/* USER CODE BEGIN Header */

/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "app_threadx.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "main.h"
#include "../fm_keypad/fm_keypad.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define THREAD_STACK_SIZE 1024
#define QUEUE_STACK_SIZE 256

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN PV */

/*
 * Manejadores de timers.
 */
extern RTC_HandleTypeDef hrtc;

/*
 * Stacks de tareas y punteros.
 */
uint8_t menu_task_stack[THREAD_STACK_SIZE];
TX_THREAD menu_task_ptr;

uint8_t debounce_task_stack[THREAD_STACK_SIZE];
TX_THREAD debounce_task_ptr;

uint8_t event_queue_stack[QUEUE_STACK_SIZE];
TX_QUEUE event_queue_ptr;

TX_SEMAPHORE debounce_semaphore_ptr;

/*
 * Inicio y final de lptim1.
 */
uint16_t g_lptim1_start;
uint16_t g_lptim1_end;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

VOID menu_task(ULONG initial_input);
VOID debounce_task(ULONG initial_input);

/* USER CODE END PFP */

/**
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
  UINT ret = TX_SUCCESS;
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;

  /* USER CODE BEGIN App_ThreadX_Init */
  (void)byte_pool;
  tx_thread_create(&menu_task_ptr, "menu_thread", menu_task, 0x1234,
  menu_task_stack, THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START);
  tx_thread_create(&debounce_task_ptr, "debounce_thread", debounce_task, 0x1234,
  debounce_task_stack, THREAD_STACK_SIZE, 14, 14, 1, TX_AUTO_START);

  tx_semaphore_create(&debounce_semaphore_ptr, "debounce_semaphore", 0);

  tx_queue_create(&event_queue_ptr, "event_queue", sizeof(fm_event_t),
  event_queue_stack, 256);
  /* USER CODE END App_ThreadX_Init */

  return (ret);
}

/**
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}

/**
  * @brief  App_ThreadX_LowPower_Timer_Setup
  * @param  count : TX timer count
  * @retval None
  */
void App_ThreadX_LowPower_Timer_Setup(ULONG count)
{
  /* USER CODE BEGIN  App_ThreadX_LowPower_Timer_Setup */
    uint32_t ticks_to_sleep;
    //LPTIM1->CNT = 0; //
    g_lptim1_start = LPTIM1->CNT;
    ticks_to_sleep = (32768 / 16) * count; // clock_freq /  RTC_WAKEUPCLOCK_RTCCLK_DIV16
    ticks_to_sleep /= TX_TIMER_TICKS_PER_SECOND;
    HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, ticks_to_sleep, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
  /* USER CODE END  App_ThreadX_LowPower_Timer_Setup */
}

/**
  * @brief  App_ThreadX_LowPower_Enter
  * @param  None
  * @retval None
  */
void App_ThreadX_LowPower_Enter(void)
{
  /* USER CODE BEGIN  App_ThreadX_LowPower_Enter */
    // CPU goes to stop mode,
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
    HAL_PWREx_EnterSTOP1Mode(PWR_STOPENTRY_WFI);

  /* USER CODE END  App_ThreadX_LowPower_Enter */
}

/**
  * @brief  App_ThreadX_LowPower_Exit
  * @param  None
  * @retval None
  */
void App_ThreadX_LowPower_Exit(void)
{
  /* USER CODE BEGIN  App_ThreadX_LowPower_Exit */

    /*
     * If CPU wakes up other reason but timer flag we must wait until
     * expected time was elapsed. Debugger issues makes wake up CPU earlier
     */
    HAL_ResumeTick();
    SystemClock_Config();
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
  /* USER CODE END  App_ThreadX_LowPower_Exit */
}

/**
  * @brief  App_ThreadX_LowPower_Timer_Adjust
  * @param  None
  * @retval Amount of time (in ticks)
  */
ULONG App_ThreadX_LowPower_Timer_Adjust(void)
{
  /* USER CODE BEGIN  App_ThreadX_LowPower_Timer_Adjust */
    static uint16_t cnt_drift = 0;
    ULONG cnt_ret;
    g_lptim1_end = LPTIM1->CNT;
    cnt_ret = (g_lptim1_end - g_lptim1_start);
    cnt_ret *= TX_TIMER_TICKS_PER_SECOND;
    cnt_ret += cnt_drift;
    cnt_drift = cnt_ret % 2048;
    cnt_ret /= 2048;
    return (cnt_ret);
  /* USER CODE END  App_ThreadX_LowPower_Timer_Adjust */
}

/* USER CODE BEGIN 1 */
VOID menu_task(ULONG initial_input)
{
    ptr_fun_menu_t ptr_menu = fm_menu_show_init;
    fm_event_t event_next = EVENT_LCD_REFRESH;
    const int refresh_time = 100;

    while(1)
    {
        tx_queue_receive(&event_queue_ptr,&event_next,refresh_time);
        ptr_menu = (ptr_fun_menu_t)(*ptr_menu)(event_next);
        //ptr_menu = (ptr_fun_menu_t)(*ptr_menu)(event_next);
    }
}

VOID debounce_task(ULONG initial_input)
{
    const int debounce_time = 20;

    while(1)
    {
        tx_semaphore_get(&debounce_semaphore_ptr,TX_WAIT_FOREVER);

        tx_thread_sleep(debounce_time);

        __HAL_GPIO_EXTI_CLEAR_IT(KEY_UP_PIN);
        __HAL_GPIO_EXTI_CLEAR_IT(KEY_DOWN_PIN);
        __HAL_GPIO_EXTI_CLEAR_IT(KEY_ENTER_PIN);
        __HAL_GPIO_EXTI_CLEAR_IT(KEY_ESC_PIN);

        HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
    }
}

/* USER CODE END 1 */
