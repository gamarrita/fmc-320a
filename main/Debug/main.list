
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010324  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  080104c4  080104c4  000204c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080108c8  080108c8  000301b8  2**0
                  CONTENTS
  4 .ARM          00000008  080108c8  080108c8  000208c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080108d0  080108d0  000301b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080108d0  080108d0  000208d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080108d4  080108d4  000208d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .trace        00000000  20000000  20000000  000301b8  2**0
                  CONTENTS
  9 .data         000001b8  20000000  080108d8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001c3c  200001b8  08010a90  000301b8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20001df4  08010a90  00031df4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00035e1e  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000085b7  00000000  00000000  00066006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022c0  00000000  00000000  0006e5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001df8  00000000  00000000  00070880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ee25  00000000  00000000  00072678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00036179  00000000  00000000  000a149d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ffd88  00000000  00000000  000d7616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001d739e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000889c  00000000  00000000  001d73f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001b8 	.word	0x200001b8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080104ac 	.word	0x080104ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001bc 	.word	0x200001bc
 80001dc:	080104ac 	.word	0x080104ac

080001e0 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 80001e0:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80001e2:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80001e6:	4919      	ldr	r1, [pc, #100]	; (800024c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 80001e8:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80001ec:	4818      	ldr	r0, [pc, #96]	; (8000250 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80001ee:	4917      	ldr	r1, [pc, #92]	; (800024c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 80001f0:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 80001f2:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 80001f4:	4817      	ldr	r0, [pc, #92]	; (8000254 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 80001f6:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 80001f8:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 80001fc:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80001fe:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000202:	4915      	ldr	r1, [pc, #84]	; (8000258 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000204:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000206:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800020a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800020c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000210:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000214:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000218:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800021c:	490f      	ldr	r1, [pc, #60]	; (800025c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800021e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000222:	4770      	bx	lr

08000224 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000224:	f7ff bffe 	b.w	8000224 <__tx_BadHandler>

08000228 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000228:	f7ff bffe 	b.w	8000228 <__tx_HardfaultHandler>

0800022c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800022c:	f7ff bffe 	b.w	800022c <__tx_SVCallHandler>

08000230 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000230:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000232:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000236:	4770      	bx	lr

08000238 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000238:	b501      	push	{r0, lr}
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800023a:	f000 f899 	bl	8000370 <_tx_timer_interrupt>
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800023e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000242:	4770      	bx	lr

08000244 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000244:	f7ff bffe 	b.w	8000244 <__tx_NMIHandler>

08000248 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000248:	f7ff bffe 	b.w	8000248 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800024c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000250:	20001644 	.word	0x20001644
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000254:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000258:	0003a97f 	.word	0x0003a97f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800025c:	40ff0000 	.word	0x40ff0000

08000260 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000260:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000264:	4a2e      	ldr	r2, [pc, #184]	; (8000320 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000266:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_PCS_VFP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000268:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800026c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000270:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000274:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000276:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800027a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800027e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000282:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000286:	f3bf 8f6f 	isb	sy

0800028a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800028a:	e7fe      	b.n	800028a <__tx_wait_here>

0800028c <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800028c:	4825      	ldr	r0, [pc, #148]	; (8000324 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800028e:	4a26      	ldr	r2, [pc, #152]	; (8000328 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 8000290:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000294:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000296:	b191      	cbz	r1, 80002be <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000298:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800029a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800029e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_PCS_VFP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002a2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002a6:	d101      	bne.n	80002ac <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002a8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002ac <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002ac:	4c1f      	ldr	r4, [pc, #124]	; (800032c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002ae:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002b2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002b4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002b8:	b10d      	cbz	r5, 80002be <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002ba:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002bc:	6023      	str	r3, [r4, #0]

080002be <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 80002be:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80002c0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80002c2:	b1b1      	cbz	r1, 80002f2 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80002c4:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 80002c6:	b662      	cpsie	i

080002c8 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80002c8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002ca:	4c18      	ldr	r4, [pc, #96]	; (800032c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80002cc:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80002ce:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 80002d2:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80002d4:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80002d6:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80002da:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_PCS_VFP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002de:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 80002e2:	d101      	bne.n	80002e8 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 80002e4:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080002e8 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80002e8:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80002ec:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 80002f0:	4770      	bx	lr

080002f2 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 80002f2:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80002f4:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80002f6:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80002f8:	b949      	cbnz	r1, 800030e <__tx_ts_ready>

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 80002fa:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_enter                      // Possibly enter low power mode
 80002fc:	f009 fcb2 	bl	8009c64 <tx_low_power_enter>
    POP     {r0-r3}
 8000300:	bc0f      	pop	{r0, r1, r2, r3}
    WFI                                             // Wait for interrupt
    ISB                                             // Ensure pipeline is flushed
#endif

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 8000302:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_exit                       // Exit low power mode
 8000304:	f009 fcde 	bl	8009cc4 <tx_low_power_exit>
    POP     {r0-r3}
 8000308:	bc0f      	pop	{r0, r1, r2, r3}
#endif

    CPSIE   i                                       // Enable interrupts
 800030a:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 800030c:	e7f1      	b.n	80002f2 <__tx_ts_wait>

0800030e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800030e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000312:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000316:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */

    CPSIE   i                                       // Enable interrupts
 800031a:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 800031c:	e7d4      	b.n	80002c8 <__tx_ts_restore>

0800031e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800031e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000320:	200016e0 	.word	0x200016e0
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000324:	20001648 	.word	0x20001648
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000328:	2000164c 	.word	0x2000164c
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800032c:	20001c4c 	.word	0x20001c4c

08000330 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000330:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000332:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000336:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800033a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800033e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000340:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000344:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000346:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000348:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800034a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800034c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800034e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000350:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000352:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000354:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000356:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000358:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800035a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800035c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800035e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000362:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000364:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000366:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800036a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800036c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800036e:	4770      	bx	lr

08000370 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000370:	4922      	ldr	r1, [pc, #136]	; (80003fc <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000372:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000374:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000378:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800037a:	4b21      	ldr	r3, [pc, #132]	; (8000400 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800037c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800037e:	b13a      	cbz	r2, 8000390 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000380:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000384:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000386:	b91a      	cbnz	r2, 8000390 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000388:	4b1e      	ldr	r3, [pc, #120]	; (8000404 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 800038a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800038e:	6018      	str	r0, [r3, #0]

08000390 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000390:	491d      	ldr	r1, [pc, #116]	; (8000408 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000392:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000394:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000396:	b122      	cbz	r2, 80003a2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000398:	4b1c      	ldr	r3, [pc, #112]	; (800040c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 800039a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800039e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003a0:	e008      	b.n	80003b4 <__tx_timer_done>

080003a2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003a2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003a6:	4b1a      	ldr	r3, [pc, #104]	; (8000410 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003a8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003aa:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003ac:	d101      	bne.n	80003b2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003ae:	4b19      	ldr	r3, [pc, #100]	; (8000414 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003b0:	6818      	ldr	r0, [r3, #0]

080003b2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003b2:	6008      	str	r0, [r1, #0]

080003b4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80003b4:	4b13      	ldr	r3, [pc, #76]	; (8000404 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80003b6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80003b8:	b912      	cbnz	r2, 80003c0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80003ba:	4914      	ldr	r1, [pc, #80]	; (800040c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003bc:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80003be:	b1d0      	cbz	r0, 80003f6 <__tx_timer_nothing_expired>

080003c0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003c0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003c4:	4911      	ldr	r1, [pc, #68]	; (800040c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003c6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003c8:	b108      	cbz	r0, 80003ce <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003ca:	f008 fd11 	bl	8008df0 <_tx_timer_expiration_process>

080003ce <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003ce:	4b0d      	ldr	r3, [pc, #52]	; (8000404 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80003d0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80003d2:	b172      	cbz	r2, 80003f2 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80003d4:	f008 fbf0 	bl	8008bb8 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003d8:	480f      	ldr	r0, [pc, #60]	; (8000418 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80003da:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80003dc:	b949      	cbnz	r1, 80003f2 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003de:	480f      	ldr	r0, [pc, #60]	; (800041c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80003e0:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003e2:	4a0f      	ldr	r2, [pc, #60]	; (8000420 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80003e4:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80003e6:	480f      	ldr	r0, [pc, #60]	; (8000424 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80003e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80003ec:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80003ee:	d000      	beq.n	80003f2 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 80003f0:	6002      	str	r2, [r0, #0]

080003f2 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 80003f2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080003f6 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 80003f6:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 80003fa:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003fc:	200016ec 	.word	0x200016ec
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000400:	20001c4c 	.word	0x20001c4c
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000404:	200016f0 	.word	0x200016f0
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000408:	2000177c 	.word	0x2000177c
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800040c:	20001780 	.word	0x20001780
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000410:	20001778 	.word	0x20001778
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000414:	20001774 	.word	0x20001774
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000418:	200016e0 	.word	0x200016e0
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800041c:	20001648 	.word	0x20001648
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000420:	2000164c 	.word	0x2000164c
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000424:	e000ed04 	.word	0xe000ed04

08000428 <strlen>:
 8000428:	4603      	mov	r3, r0
 800042a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800042e:	2a00      	cmp	r2, #0
 8000430:	d1fb      	bne.n	800042a <strlen+0x2>
 8000432:	1a18      	subs	r0, r3, r0
 8000434:	3801      	subs	r0, #1
 8000436:	4770      	bx	lr
	...

08000440 <memchr>:
 8000440:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000444:	2a10      	cmp	r2, #16
 8000446:	db2b      	blt.n	80004a0 <memchr+0x60>
 8000448:	f010 0f07 	tst.w	r0, #7
 800044c:	d008      	beq.n	8000460 <memchr+0x20>
 800044e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000452:	3a01      	subs	r2, #1
 8000454:	428b      	cmp	r3, r1
 8000456:	d02d      	beq.n	80004b4 <memchr+0x74>
 8000458:	f010 0f07 	tst.w	r0, #7
 800045c:	b342      	cbz	r2, 80004b0 <memchr+0x70>
 800045e:	d1f6      	bne.n	800044e <memchr+0xe>
 8000460:	b4f0      	push	{r4, r5, r6, r7}
 8000462:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000466:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800046a:	f022 0407 	bic.w	r4, r2, #7
 800046e:	f07f 0700 	mvns.w	r7, #0
 8000472:	2300      	movs	r3, #0
 8000474:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000478:	3c08      	subs	r4, #8
 800047a:	ea85 0501 	eor.w	r5, r5, r1
 800047e:	ea86 0601 	eor.w	r6, r6, r1
 8000482:	fa85 f547 	uadd8	r5, r5, r7
 8000486:	faa3 f587 	sel	r5, r3, r7
 800048a:	fa86 f647 	uadd8	r6, r6, r7
 800048e:	faa5 f687 	sel	r6, r5, r7
 8000492:	b98e      	cbnz	r6, 80004b8 <memchr+0x78>
 8000494:	d1ee      	bne.n	8000474 <memchr+0x34>
 8000496:	bcf0      	pop	{r4, r5, r6, r7}
 8000498:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800049c:	f002 0207 	and.w	r2, r2, #7
 80004a0:	b132      	cbz	r2, 80004b0 <memchr+0x70>
 80004a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80004a6:	3a01      	subs	r2, #1
 80004a8:	ea83 0301 	eor.w	r3, r3, r1
 80004ac:	b113      	cbz	r3, 80004b4 <memchr+0x74>
 80004ae:	d1f8      	bne.n	80004a2 <memchr+0x62>
 80004b0:	2000      	movs	r0, #0
 80004b2:	4770      	bx	lr
 80004b4:	3801      	subs	r0, #1
 80004b6:	4770      	bx	lr
 80004b8:	2d00      	cmp	r5, #0
 80004ba:	bf06      	itte	eq
 80004bc:	4635      	moveq	r5, r6
 80004be:	3803      	subeq	r0, #3
 80004c0:	3807      	subne	r0, #7
 80004c2:	f015 0f01 	tst.w	r5, #1
 80004c6:	d107      	bne.n	80004d8 <memchr+0x98>
 80004c8:	3001      	adds	r0, #1
 80004ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80004ce:	bf02      	ittt	eq
 80004d0:	3001      	addeq	r0, #1
 80004d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80004d6:	3001      	addeq	r0, #1
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	3801      	subs	r0, #1
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <__aeabi_uldivmod>:
 80004e0:	b953      	cbnz	r3, 80004f8 <__aeabi_uldivmod+0x18>
 80004e2:	b94a      	cbnz	r2, 80004f8 <__aeabi_uldivmod+0x18>
 80004e4:	2900      	cmp	r1, #0
 80004e6:	bf08      	it	eq
 80004e8:	2800      	cmpeq	r0, #0
 80004ea:	bf1c      	itt	ne
 80004ec:	f04f 31ff 	movne.w	r1, #4294967295
 80004f0:	f04f 30ff 	movne.w	r0, #4294967295
 80004f4:	f000 b974 	b.w	80007e0 <__aeabi_idiv0>
 80004f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80004fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000500:	f000 f806 	bl	8000510 <__udivmoddi4>
 8000504:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000508:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800050c:	b004      	add	sp, #16
 800050e:	4770      	bx	lr

08000510 <__udivmoddi4>:
 8000510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000514:	9d08      	ldr	r5, [sp, #32]
 8000516:	4604      	mov	r4, r0
 8000518:	468e      	mov	lr, r1
 800051a:	2b00      	cmp	r3, #0
 800051c:	d14d      	bne.n	80005ba <__udivmoddi4+0xaa>
 800051e:	428a      	cmp	r2, r1
 8000520:	4694      	mov	ip, r2
 8000522:	d969      	bls.n	80005f8 <__udivmoddi4+0xe8>
 8000524:	fab2 f282 	clz	r2, r2
 8000528:	b152      	cbz	r2, 8000540 <__udivmoddi4+0x30>
 800052a:	fa01 f302 	lsl.w	r3, r1, r2
 800052e:	f1c2 0120 	rsb	r1, r2, #32
 8000532:	fa20 f101 	lsr.w	r1, r0, r1
 8000536:	fa0c fc02 	lsl.w	ip, ip, r2
 800053a:	ea41 0e03 	orr.w	lr, r1, r3
 800053e:	4094      	lsls	r4, r2
 8000540:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000544:	0c21      	lsrs	r1, r4, #16
 8000546:	fbbe f6f8 	udiv	r6, lr, r8
 800054a:	fa1f f78c 	uxth.w	r7, ip
 800054e:	fb08 e316 	mls	r3, r8, r6, lr
 8000552:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000556:	fb06 f107 	mul.w	r1, r6, r7
 800055a:	4299      	cmp	r1, r3
 800055c:	d90a      	bls.n	8000574 <__udivmoddi4+0x64>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f106 30ff 	add.w	r0, r6, #4294967295
 8000566:	f080 811f 	bcs.w	80007a8 <__udivmoddi4+0x298>
 800056a:	4299      	cmp	r1, r3
 800056c:	f240 811c 	bls.w	80007a8 <__udivmoddi4+0x298>
 8000570:	3e02      	subs	r6, #2
 8000572:	4463      	add	r3, ip
 8000574:	1a5b      	subs	r3, r3, r1
 8000576:	b2a4      	uxth	r4, r4
 8000578:	fbb3 f0f8 	udiv	r0, r3, r8
 800057c:	fb08 3310 	mls	r3, r8, r0, r3
 8000580:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000584:	fb00 f707 	mul.w	r7, r0, r7
 8000588:	42a7      	cmp	r7, r4
 800058a:	d90a      	bls.n	80005a2 <__udivmoddi4+0x92>
 800058c:	eb1c 0404 	adds.w	r4, ip, r4
 8000590:	f100 33ff 	add.w	r3, r0, #4294967295
 8000594:	f080 810a 	bcs.w	80007ac <__udivmoddi4+0x29c>
 8000598:	42a7      	cmp	r7, r4
 800059a:	f240 8107 	bls.w	80007ac <__udivmoddi4+0x29c>
 800059e:	4464      	add	r4, ip
 80005a0:	3802      	subs	r0, #2
 80005a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005a6:	1be4      	subs	r4, r4, r7
 80005a8:	2600      	movs	r6, #0
 80005aa:	b11d      	cbz	r5, 80005b4 <__udivmoddi4+0xa4>
 80005ac:	40d4      	lsrs	r4, r2
 80005ae:	2300      	movs	r3, #0
 80005b0:	e9c5 4300 	strd	r4, r3, [r5]
 80005b4:	4631      	mov	r1, r6
 80005b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ba:	428b      	cmp	r3, r1
 80005bc:	d909      	bls.n	80005d2 <__udivmoddi4+0xc2>
 80005be:	2d00      	cmp	r5, #0
 80005c0:	f000 80ef 	beq.w	80007a2 <__udivmoddi4+0x292>
 80005c4:	2600      	movs	r6, #0
 80005c6:	e9c5 0100 	strd	r0, r1, [r5]
 80005ca:	4630      	mov	r0, r6
 80005cc:	4631      	mov	r1, r6
 80005ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d2:	fab3 f683 	clz	r6, r3
 80005d6:	2e00      	cmp	r6, #0
 80005d8:	d14a      	bne.n	8000670 <__udivmoddi4+0x160>
 80005da:	428b      	cmp	r3, r1
 80005dc:	d302      	bcc.n	80005e4 <__udivmoddi4+0xd4>
 80005de:	4282      	cmp	r2, r0
 80005e0:	f200 80f9 	bhi.w	80007d6 <__udivmoddi4+0x2c6>
 80005e4:	1a84      	subs	r4, r0, r2
 80005e6:	eb61 0303 	sbc.w	r3, r1, r3
 80005ea:	2001      	movs	r0, #1
 80005ec:	469e      	mov	lr, r3
 80005ee:	2d00      	cmp	r5, #0
 80005f0:	d0e0      	beq.n	80005b4 <__udivmoddi4+0xa4>
 80005f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80005f6:	e7dd      	b.n	80005b4 <__udivmoddi4+0xa4>
 80005f8:	b902      	cbnz	r2, 80005fc <__udivmoddi4+0xec>
 80005fa:	deff      	udf	#255	; 0xff
 80005fc:	fab2 f282 	clz	r2, r2
 8000600:	2a00      	cmp	r2, #0
 8000602:	f040 8092 	bne.w	800072a <__udivmoddi4+0x21a>
 8000606:	eba1 010c 	sub.w	r1, r1, ip
 800060a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800060e:	fa1f fe8c 	uxth.w	lr, ip
 8000612:	2601      	movs	r6, #1
 8000614:	0c20      	lsrs	r0, r4, #16
 8000616:	fbb1 f3f7 	udiv	r3, r1, r7
 800061a:	fb07 1113 	mls	r1, r7, r3, r1
 800061e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000622:	fb0e f003 	mul.w	r0, lr, r3
 8000626:	4288      	cmp	r0, r1
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x12c>
 800062a:	eb1c 0101 	adds.w	r1, ip, r1
 800062e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000632:	d202      	bcs.n	800063a <__udivmoddi4+0x12a>
 8000634:	4288      	cmp	r0, r1
 8000636:	f200 80cb 	bhi.w	80007d0 <__udivmoddi4+0x2c0>
 800063a:	4643      	mov	r3, r8
 800063c:	1a09      	subs	r1, r1, r0
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb1 f0f7 	udiv	r0, r1, r7
 8000644:	fb07 1110 	mls	r1, r7, r0, r1
 8000648:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800064c:	fb0e fe00 	mul.w	lr, lr, r0
 8000650:	45a6      	cmp	lr, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x156>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f100 31ff 	add.w	r1, r0, #4294967295
 800065c:	d202      	bcs.n	8000664 <__udivmoddi4+0x154>
 800065e:	45a6      	cmp	lr, r4
 8000660:	f200 80bb 	bhi.w	80007da <__udivmoddi4+0x2ca>
 8000664:	4608      	mov	r0, r1
 8000666:	eba4 040e 	sub.w	r4, r4, lr
 800066a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800066e:	e79c      	b.n	80005aa <__udivmoddi4+0x9a>
 8000670:	f1c6 0720 	rsb	r7, r6, #32
 8000674:	40b3      	lsls	r3, r6
 8000676:	fa22 fc07 	lsr.w	ip, r2, r7
 800067a:	ea4c 0c03 	orr.w	ip, ip, r3
 800067e:	fa20 f407 	lsr.w	r4, r0, r7
 8000682:	fa01 f306 	lsl.w	r3, r1, r6
 8000686:	431c      	orrs	r4, r3
 8000688:	40f9      	lsrs	r1, r7
 800068a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800068e:	fa00 f306 	lsl.w	r3, r0, r6
 8000692:	fbb1 f8f9 	udiv	r8, r1, r9
 8000696:	0c20      	lsrs	r0, r4, #16
 8000698:	fa1f fe8c 	uxth.w	lr, ip
 800069c:	fb09 1118 	mls	r1, r9, r8, r1
 80006a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80006a4:	fb08 f00e 	mul.w	r0, r8, lr
 80006a8:	4288      	cmp	r0, r1
 80006aa:	fa02 f206 	lsl.w	r2, r2, r6
 80006ae:	d90b      	bls.n	80006c8 <__udivmoddi4+0x1b8>
 80006b0:	eb1c 0101 	adds.w	r1, ip, r1
 80006b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80006b8:	f080 8088 	bcs.w	80007cc <__udivmoddi4+0x2bc>
 80006bc:	4288      	cmp	r0, r1
 80006be:	f240 8085 	bls.w	80007cc <__udivmoddi4+0x2bc>
 80006c2:	f1a8 0802 	sub.w	r8, r8, #2
 80006c6:	4461      	add	r1, ip
 80006c8:	1a09      	subs	r1, r1, r0
 80006ca:	b2a4      	uxth	r4, r4
 80006cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80006d0:	fb09 1110 	mls	r1, r9, r0, r1
 80006d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80006d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006dc:	458e      	cmp	lr, r1
 80006de:	d908      	bls.n	80006f2 <__udivmoddi4+0x1e2>
 80006e0:	eb1c 0101 	adds.w	r1, ip, r1
 80006e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80006e8:	d26c      	bcs.n	80007c4 <__udivmoddi4+0x2b4>
 80006ea:	458e      	cmp	lr, r1
 80006ec:	d96a      	bls.n	80007c4 <__udivmoddi4+0x2b4>
 80006ee:	3802      	subs	r0, #2
 80006f0:	4461      	add	r1, ip
 80006f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80006f6:	fba0 9402 	umull	r9, r4, r0, r2
 80006fa:	eba1 010e 	sub.w	r1, r1, lr
 80006fe:	42a1      	cmp	r1, r4
 8000700:	46c8      	mov	r8, r9
 8000702:	46a6      	mov	lr, r4
 8000704:	d356      	bcc.n	80007b4 <__udivmoddi4+0x2a4>
 8000706:	d053      	beq.n	80007b0 <__udivmoddi4+0x2a0>
 8000708:	b15d      	cbz	r5, 8000722 <__udivmoddi4+0x212>
 800070a:	ebb3 0208 	subs.w	r2, r3, r8
 800070e:	eb61 010e 	sbc.w	r1, r1, lr
 8000712:	fa01 f707 	lsl.w	r7, r1, r7
 8000716:	fa22 f306 	lsr.w	r3, r2, r6
 800071a:	40f1      	lsrs	r1, r6
 800071c:	431f      	orrs	r7, r3
 800071e:	e9c5 7100 	strd	r7, r1, [r5]
 8000722:	2600      	movs	r6, #0
 8000724:	4631      	mov	r1, r6
 8000726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800072a:	f1c2 0320 	rsb	r3, r2, #32
 800072e:	40d8      	lsrs	r0, r3
 8000730:	fa0c fc02 	lsl.w	ip, ip, r2
 8000734:	fa21 f303 	lsr.w	r3, r1, r3
 8000738:	4091      	lsls	r1, r2
 800073a:	4301      	orrs	r1, r0
 800073c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000740:	fa1f fe8c 	uxth.w	lr, ip
 8000744:	fbb3 f0f7 	udiv	r0, r3, r7
 8000748:	fb07 3610 	mls	r6, r7, r0, r3
 800074c:	0c0b      	lsrs	r3, r1, #16
 800074e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000752:	fb00 f60e 	mul.w	r6, r0, lr
 8000756:	429e      	cmp	r6, r3
 8000758:	fa04 f402 	lsl.w	r4, r4, r2
 800075c:	d908      	bls.n	8000770 <__udivmoddi4+0x260>
 800075e:	eb1c 0303 	adds.w	r3, ip, r3
 8000762:	f100 38ff 	add.w	r8, r0, #4294967295
 8000766:	d22f      	bcs.n	80007c8 <__udivmoddi4+0x2b8>
 8000768:	429e      	cmp	r6, r3
 800076a:	d92d      	bls.n	80007c8 <__udivmoddi4+0x2b8>
 800076c:	3802      	subs	r0, #2
 800076e:	4463      	add	r3, ip
 8000770:	1b9b      	subs	r3, r3, r6
 8000772:	b289      	uxth	r1, r1
 8000774:	fbb3 f6f7 	udiv	r6, r3, r7
 8000778:	fb07 3316 	mls	r3, r7, r6, r3
 800077c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000780:	fb06 f30e 	mul.w	r3, r6, lr
 8000784:	428b      	cmp	r3, r1
 8000786:	d908      	bls.n	800079a <__udivmoddi4+0x28a>
 8000788:	eb1c 0101 	adds.w	r1, ip, r1
 800078c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000790:	d216      	bcs.n	80007c0 <__udivmoddi4+0x2b0>
 8000792:	428b      	cmp	r3, r1
 8000794:	d914      	bls.n	80007c0 <__udivmoddi4+0x2b0>
 8000796:	3e02      	subs	r6, #2
 8000798:	4461      	add	r1, ip
 800079a:	1ac9      	subs	r1, r1, r3
 800079c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80007a0:	e738      	b.n	8000614 <__udivmoddi4+0x104>
 80007a2:	462e      	mov	r6, r5
 80007a4:	4628      	mov	r0, r5
 80007a6:	e705      	b.n	80005b4 <__udivmoddi4+0xa4>
 80007a8:	4606      	mov	r6, r0
 80007aa:	e6e3      	b.n	8000574 <__udivmoddi4+0x64>
 80007ac:	4618      	mov	r0, r3
 80007ae:	e6f8      	b.n	80005a2 <__udivmoddi4+0x92>
 80007b0:	454b      	cmp	r3, r9
 80007b2:	d2a9      	bcs.n	8000708 <__udivmoddi4+0x1f8>
 80007b4:	ebb9 0802 	subs.w	r8, r9, r2
 80007b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80007bc:	3801      	subs	r0, #1
 80007be:	e7a3      	b.n	8000708 <__udivmoddi4+0x1f8>
 80007c0:	4646      	mov	r6, r8
 80007c2:	e7ea      	b.n	800079a <__udivmoddi4+0x28a>
 80007c4:	4620      	mov	r0, r4
 80007c6:	e794      	b.n	80006f2 <__udivmoddi4+0x1e2>
 80007c8:	4640      	mov	r0, r8
 80007ca:	e7d1      	b.n	8000770 <__udivmoddi4+0x260>
 80007cc:	46d0      	mov	r8, sl
 80007ce:	e77b      	b.n	80006c8 <__udivmoddi4+0x1b8>
 80007d0:	3b02      	subs	r3, #2
 80007d2:	4461      	add	r1, ip
 80007d4:	e732      	b.n	800063c <__udivmoddi4+0x12c>
 80007d6:	4630      	mov	r0, r6
 80007d8:	e709      	b.n	80005ee <__udivmoddi4+0xde>
 80007da:	4464      	add	r4, ip
 80007dc:	3802      	subs	r0, #2
 80007de:	e742      	b.n	8000666 <__udivmoddi4+0x156>

080007e0 <__aeabi_idiv0>:
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop

080007e4 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af02      	add	r7, sp, #8
 80007ea:	6078      	str	r0, [r7, #4]

  /* USER CODE END  tx_application_define */

  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80007ec:	2334      	movs	r3, #52	; 0x34
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007f4:	4a08      	ldr	r2, [pc, #32]	; (8000818 <tx_application_define+0x34>)
 80007f6:	4909      	ldr	r1, [pc, #36]	; (800081c <tx_application_define+0x38>)
 80007f8:	4809      	ldr	r0, [pc, #36]	; (8000820 <tx_application_define+0x3c>)
 80007fa:	f008 fe41 	bl	8009480 <_txe_byte_pool_create>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d104      	bne.n	800080e <tx_application_define+0x2a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <tx_application_define+0x3c>)
 8000806:	60fb      	str	r3, [r7, #12]

    if (App_ThreadX_Init(memory_ptr) != TX_SUCCESS)
 8000808:	68f8      	ldr	r0, [r7, #12]
 800080a:	f000 f80b 	bl	8000824 <App_ThreadX_Init>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

}
 800080e:	bf00      	nop
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200001d4 	.word	0x200001d4
 800081c:	080104c4 	.word	0x080104c4
 8000820:	200005d4 	.word	0x200005d4

08000824 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08c      	sub	sp, #48	; 0x30
 8000828:	af08      	add	r7, sp, #32
 800082a:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN App_ThreadX_Init */
  (void)byte_pool;
  tx_thread_create(&menu_task_ptr, "menu_thread", menu_task, 0x1234,
 8000834:	23b0      	movs	r3, #176	; 0xb0
 8000836:	9306      	str	r3, [sp, #24]
 8000838:	2301      	movs	r3, #1
 800083a:	9305      	str	r3, [sp, #20]
 800083c:	2301      	movs	r3, #1
 800083e:	9304      	str	r3, [sp, #16]
 8000840:	230f      	movs	r3, #15
 8000842:	9303      	str	r3, [sp, #12]
 8000844:	230f      	movs	r3, #15
 8000846:	9302      	str	r3, [sp, #8]
 8000848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800084c:	9301      	str	r3, [sp, #4]
 800084e:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <App_ThreadX_Init+0x94>)
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	f241 2334 	movw	r3, #4660	; 0x1234
 8000856:	4a19      	ldr	r2, [pc, #100]	; (80008bc <App_ThreadX_Init+0x98>)
 8000858:	4919      	ldr	r1, [pc, #100]	; (80008c0 <App_ThreadX_Init+0x9c>)
 800085a:	481a      	ldr	r0, [pc, #104]	; (80008c4 <App_ThreadX_Init+0xa0>)
 800085c:	f009 f910 	bl	8009a80 <_txe_thread_create>
  menu_task_stack, THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START);
  tx_thread_create(&debounce_task_ptr, "debounce_thread", debounce_task, 0x1234,
 8000860:	23b0      	movs	r3, #176	; 0xb0
 8000862:	9306      	str	r3, [sp, #24]
 8000864:	2301      	movs	r3, #1
 8000866:	9305      	str	r3, [sp, #20]
 8000868:	2301      	movs	r3, #1
 800086a:	9304      	str	r3, [sp, #16]
 800086c:	230e      	movs	r3, #14
 800086e:	9303      	str	r3, [sp, #12]
 8000870:	230e      	movs	r3, #14
 8000872:	9302      	str	r3, [sp, #8]
 8000874:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000878:	9301      	str	r3, [sp, #4]
 800087a:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <App_ThreadX_Init+0xa4>)
 800087c:	9300      	str	r3, [sp, #0]
 800087e:	f241 2334 	movw	r3, #4660	; 0x1234
 8000882:	4a12      	ldr	r2, [pc, #72]	; (80008cc <App_ThreadX_Init+0xa8>)
 8000884:	4912      	ldr	r1, [pc, #72]	; (80008d0 <App_ThreadX_Init+0xac>)
 8000886:	4813      	ldr	r0, [pc, #76]	; (80008d4 <App_ThreadX_Init+0xb0>)
 8000888:	f009 f8fa 	bl	8009a80 <_txe_thread_create>
  debounce_task_stack, THREAD_STACK_SIZE, 14, 14, 1, TX_AUTO_START);

  tx_semaphore_create(&debounce_semaphore_ptr, "debounce_semaphore", 0);
 800088c:	231c      	movs	r3, #28
 800088e:	2200      	movs	r2, #0
 8000890:	4911      	ldr	r1, [pc, #68]	; (80008d8 <App_ThreadX_Init+0xb4>)
 8000892:	4812      	ldr	r0, [pc, #72]	; (80008dc <App_ThreadX_Init+0xb8>)
 8000894:	f009 f81c 	bl	80098d0 <_txe_semaphore_create>

  tx_queue_create(&event_queue_ptr, "event_queue", sizeof(fm_event_t),
 8000898:	2338      	movs	r3, #56	; 0x38
 800089a:	9301      	str	r3, [sp, #4]
 800089c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008a0:	9300      	str	r3, [sp, #0]
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <App_ThreadX_Init+0xbc>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	490f      	ldr	r1, [pc, #60]	; (80008e4 <App_ThreadX_Init+0xc0>)
 80008a8:	480f      	ldr	r0, [pc, #60]	; (80008e8 <App_ThreadX_Init+0xc4>)
 80008aa:	f008 fe89 	bl	80095c0 <_txe_queue_create>
  #ifndef FM_THREADX_LOW_POWER
      tx_trace_enable(&tracex_buffer, TRACEX_BUFFER_SIZE, 30);
  #endif
  /* USER CODE END App_ThreadX_Init */

  return (ret);
 80008ae:	68fb      	ldr	r3, [r7, #12]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000608 	.word	0x20000608
 80008bc:	080009dd 	.word	0x080009dd
 80008c0:	080104d8 	.word	0x080104d8
 80008c4:	20000a08 	.word	0x20000a08
 80008c8:	20000ab8 	.word	0x20000ab8
 80008cc:	08000a21 	.word	0x08000a21
 80008d0:	080104e4 	.word	0x080104e4
 80008d4:	20000eb8 	.word	0x20000eb8
 80008d8:	080104f4 	.word	0x080104f4
 80008dc:	200013a0 	.word	0x200013a0
 80008e0:	20000f68 	.word	0x20000f68
 80008e4:	08010508 	.word	0x08010508
 80008e8:	20001368 	.word	0x20001368

080008ec <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 80008f0:	f006 f84c 	bl	800698c <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <App_ThreadX_LowPower_Timer_Setup>:
  * @brief  App_ThreadX_LowPower_Timer_Setup
  * @param  count : TX timer count
  * @retval None
  */
void App_ThreadX_LowPower_Timer_Setup(ULONG count)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  App_ThreadX_LowPower_Timer_Setup */
  #ifdef FM_THREADX_LOW_POWER
      uint32_t ticks_to_sleep;
      //LPTIM1->CNT = 0; //
      g_lptim1_start = LPTIM1->CNT;
 8000900:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <App_ThreadX_LowPower_Timer_Setup+0x38>)
 8000902:	69db      	ldr	r3, [r3, #28]
 8000904:	b29a      	uxth	r2, r3
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <App_ThreadX_LowPower_Timer_Setup+0x3c>)
 8000908:	801a      	strh	r2, [r3, #0]
      ticks_to_sleep = (32768 / 16) * count; // clock_freq /  RTC_WAKEUPCLOCK_RTCCLK_DIV16
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	02db      	lsls	r3, r3, #11
 800090e:	60fb      	str	r3, [r7, #12]
      ticks_to_sleep /= TX_TIMER_TICKS_PER_SECOND;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	4a09      	ldr	r2, [pc, #36]	; (8000938 <App_ThreadX_LowPower_Timer_Setup+0x40>)
 8000914:	fba2 2303 	umull	r2, r3, r2, r3
 8000918:	095b      	lsrs	r3, r3, #5
 800091a:	60fb      	str	r3, [r7, #12]
      HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, ticks_to_sleep, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 800091c:	2200      	movs	r2, #0
 800091e:	68f9      	ldr	r1, [r7, #12]
 8000920:	4806      	ldr	r0, [pc, #24]	; (800093c <App_ThreadX_LowPower_Timer_Setup+0x44>)
 8000922:	f004 fa9b 	bl	8004e5c <HAL_RTCEx_SetWakeUpTimer_IT>
  #endif
  /* USER CODE END  App_ThreadX_LowPower_Timer_Setup */
}
 8000926:	bf00      	nop
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40007c00 	.word	0x40007c00
 8000934:	200013bc 	.word	0x200013bc
 8000938:	51eb851f 	.word	0x51eb851f
 800093c:	20001464 	.word	0x20001464

08000940 <App_ThreadX_LowPower_Enter>:
  * @brief  App_ThreadX_LowPower_Enter
  * @param  None
  * @retval None
  */
void App_ThreadX_LowPower_Enter(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  App_ThreadX_LowPower_Enter */
  #ifdef FM_THREADX_LOW_POWER
      // CPU goes to stop mode,
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	2120      	movs	r1, #32
 8000948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800094c:	f002 fbae 	bl	80030ac <HAL_GPIO_WritePin>
      HAL_PWREx_EnterSTOP1Mode(PWR_STOPENTRY_WFI);
 8000950:	2001      	movs	r0, #1
 8000952:	f002 fd65 	bl	8003420 <HAL_PWREx_EnterSTOP1Mode>
  #endif

  /* USER CODE END  App_ThreadX_LowPower_Enter */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}

0800095a <App_ThreadX_LowPower_Exit>:
  * @brief  App_ThreadX_LowPower_Exit
  * @param  None
  * @retval None
  */
void App_ThreadX_LowPower_Exit(void)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	af00      	add	r7, sp, #0
     * If CPU wakes up other reason but timer flag we must wait until
     * expected time was elapsed. Debugger issues makes wake up CPU earlier
     */
    #ifdef FM_THREADX_LOW_POWER
//        HAL_ResumeTick();
        SystemClock_Config();
 800095e:	f000 f8ad 	bl	8000abc <SystemClock_Config>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000962:	2201      	movs	r2, #1
 8000964:	2120      	movs	r1, #32
 8000966:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096a:	f002 fb9f 	bl	80030ac <HAL_GPIO_WritePin>
    #endif
  /* USER CODE END  App_ThreadX_LowPower_Exit */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <App_ThreadX_LowPower_Timer_Adjust>:
  * @brief  App_ThreadX_LowPower_Timer_Adjust
  * @param  None
  * @retval Amount of time (in ticks)
  */
ULONG App_ThreadX_LowPower_Timer_Adjust(void)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  App_ThreadX_LowPower_Timer_Adjust */
    #ifdef FM_THREADX_LOW_POWER
        static uint16_t cnt_drift = 0;
        ULONG cnt_ret;
        g_lptim1_end = LPTIM1->CNT;
 800097a:	4b14      	ldr	r3, [pc, #80]	; (80009cc <App_ThreadX_LowPower_Timer_Adjust+0x58>)
 800097c:	69db      	ldr	r3, [r3, #28]
 800097e:	b29a      	uxth	r2, r3
 8000980:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <App_ThreadX_LowPower_Timer_Adjust+0x5c>)
 8000982:	801a      	strh	r2, [r3, #0]
        cnt_ret = (g_lptim1_end - g_lptim1_start);
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <App_ThreadX_LowPower_Timer_Adjust+0x5c>)
 8000986:	881b      	ldrh	r3, [r3, #0]
 8000988:	461a      	mov	r2, r3
 800098a:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <App_ThreadX_LowPower_Timer_Adjust+0x60>)
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	1ad3      	subs	r3, r2, r3
 8000990:	607b      	str	r3, [r7, #4]
        cnt_ret *= TX_TIMER_TICKS_PER_SECOND;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2264      	movs	r2, #100	; 0x64
 8000996:	fb02 f303 	mul.w	r3, r2, r3
 800099a:	607b      	str	r3, [r7, #4]
        cnt_ret += cnt_drift;
 800099c:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <App_ThreadX_LowPower_Timer_Adjust+0x64>)
 800099e:	881b      	ldrh	r3, [r3, #0]
 80009a0:	461a      	mov	r2, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	607b      	str	r3, [r7, #4]
        cnt_drift = cnt_ret % 2048;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <App_ThreadX_LowPower_Timer_Adjust+0x64>)
 80009b4:	801a      	strh	r2, [r3, #0]
        cnt_ret /= 2048;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	0adb      	lsrs	r3, r3, #11
 80009ba:	607b      	str	r3, [r7, #4]
        return (cnt_ret);
 80009bc:	687b      	ldr	r3, [r7, #4]
    #else
        return (0);
    #endif
  /* USER CODE END  App_ThreadX_LowPower_Timer_Adjust */
}
 80009be:	4618      	mov	r0, r3
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40007c00 	.word	0x40007c00
 80009d0:	200013be 	.word	0x200013be
 80009d4:	200013bc 	.word	0x200013bc
 80009d8:	200013c0 	.word	0x200013c0

080009dc <menu_task>:

/* USER CODE BEGIN 1 */
VOID menu_task(ULONG initial_input)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
    ptr_fun_menu_t ptr_menu = fm_menu_show_init;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <menu_task+0x3c>)
 80009e6:	617b      	str	r3, [r7, #20]
    fm_event_t event_next = EVENT_LCD_REFRESH;
 80009e8:	2301      	movs	r3, #1
 80009ea:	73fb      	strb	r3, [r7, #15]
    UINT ret_status;
    while(1)
    {
        ret_status = tx_queue_receive(&event_queue_ptr,&event_next,100);
 80009ec:	f107 030f 	add.w	r3, r7, #15
 80009f0:	2264      	movs	r2, #100	; 0x64
 80009f2:	4619      	mov	r1, r3
 80009f4:	4809      	ldr	r0, [pc, #36]	; (8000a1c <menu_task+0x40>)
 80009f6:	f008 feb1 	bl	800975c <_txe_queue_receive>
 80009fa:	6138      	str	r0, [r7, #16]
        if(ret_status == TX_SUCCESS)
 80009fc:	693b      	ldr	r3, [r7, #16]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d105      	bne.n	8000a0e <menu_task+0x32>
        {
            ptr_menu = (ptr_fun_menu_t)(*ptr_menu)(event_next);
 8000a02:	7bfa      	ldrb	r2, [r7, #15]
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	4610      	mov	r0, r2
 8000a08:	4798      	blx	r3
 8000a0a:	6178      	str	r0, [r7, #20]
 8000a0c:	e7ee      	b.n	80009ec <menu_task+0x10>
        }
        else
        {
            ptr_menu = (ptr_fun_menu_t)(*ptr_menu)(EVENT_LCD_REFRESH);
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	2001      	movs	r0, #1
 8000a12:	4798      	blx	r3
 8000a14:	6178      	str	r0, [r7, #20]
        ret_status = tx_queue_receive(&event_queue_ptr,&event_next,100);
 8000a16:	e7e9      	b.n	80009ec <menu_task+0x10>
 8000a18:	0800f365 	.word	0x0800f365
 8000a1c:	20001368 	.word	0x20001368

08000a20 <debounce_task>:
        }
    }
}

VOID debounce_task(ULONG initial_input)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
    /*
     * debounce_time*10ms se espera para evitar rebotes.
     */
    const int debounce_time = 14;
 8000a28:	230e      	movs	r3, #14
 8000a2a:	60fb      	str	r3, [r7, #12]

    while(1)
    {
        tx_semaphore_get(&debounce_semaphore_ptr,TX_WAIT_FOREVER);
 8000a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a30:	480d      	ldr	r0, [pc, #52]	; (8000a68 <debounce_task+0x48>)
 8000a32:	f008 ffe3 	bl	80099fc <_txe_semaphore_get>

        tx_thread_sleep(debounce_time);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f007 fbd7 	bl	80081ec <_tx_thread_sleep>

        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10);
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <debounce_task+0x4c>)
 8000a40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a44:	615a      	str	r2, [r3, #20]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_11);
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <debounce_task+0x4c>)
 8000a48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a4c:	615a      	str	r2, [r3, #20]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12);
 8000a4e:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <debounce_task+0x4c>)
 8000a50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a54:	615a      	str	r2, [r3, #20]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 8000a56:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <debounce_task+0x4c>)
 8000a58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5c:	615a      	str	r2, [r3, #20]

        HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a5e:	2028      	movs	r0, #40	; 0x28
 8000a60:	f002 f98e 	bl	8002d80 <HAL_NVIC_EnableIRQ>
        tx_semaphore_get(&debounce_semaphore_ptr,TX_WAIT_FOREVER);
 8000a64:	e7e2      	b.n	8000a2c <debounce_task+0xc>
 8000a66:	bf00      	nop
 8000a68:	200013a0 	.word	0x200013a0
 8000a6c:	40010400 	.word	0x40010400

08000a70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a74:	f000 fd5f 	bl	8001536 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a78:	f000 f820 	bl	8000abc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a7c:	f000 fa08 	bl	8000e90 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a80:	f000 f972 	bl	8000d68 <MX_SPI1_Init>
  MX_RTC_Init();
 8000a84:	f000 f908 	bl	8000c98 <MX_RTC_Init>
  MX_TIM16_Init();
 8000a88:	f000 f9ac 	bl	8000de4 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8000a8c:	f000 f9d0 	bl	8000e30 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000a90:	f000 f86c 	bl	8000b6c <MX_ADC1_Init>
  MX_LPTIM1_Init();
 8000a94:	f000 f8d2 	bl	8000c3c <MX_LPTIM1_Init>
  /* USER CODE BEGIN 2 */

  fm_lcd_clear();
 8000a98:	f00a f967 	bl	800ad6a <fm_lcd_clear>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000a9c:	217f      	movs	r1, #127	; 0x7f
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <main+0x44>)
 8000aa0:	f002 f816 	bl	8002ad0 <HAL_ADCEx_Calibration_Start>
  HAL_LPTIM_Counter_Start(&hlptim1, 0xffff);
 8000aa4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000aa8:	4803      	ldr	r0, [pc, #12]	; (8000ab8 <main+0x48>)
 8000aaa:	f002 fbd1 	bl	8003250 <HAL_LPTIM_Counter_Start>

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000aae:	f7ff ff1d 	bl	80008ec <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <main+0x42>
 8000ab4:	200013c4 	.word	0x200013c4
 8000ab8:	2000142c 	.word	0x2000142c

08000abc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b096      	sub	sp, #88	; 0x58
 8000ac0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	2244      	movs	r2, #68	; 0x44
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f00e ffb8 	bl	800fa40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
 8000adc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8000ade:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000ae2:	f002 fc47 	bl	8003374 <HAL_PWREx_ControlVoltageScaling>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000aec:	f000 fa6e 	bl	8000fcc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000af0:	f002 fc22 	bl	8003338 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000af4:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <SystemClock_Config+0xac>)
 8000af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000afa:	4a1b      	ldr	r2, [pc, #108]	; (8000b68 <SystemClock_Config+0xac>)
 8000afc:	f023 0318 	bic.w	r3, r3, #24
 8000b00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000b04:	231c      	movs	r3, #28
 8000b06:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b10:	2301      	movs	r3, #1
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 8000b18:	2390      	movs	r3, #144	; 0x90
 8000b1a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4618      	mov	r0, r3
 8000b26:	f002 fca7 	bl	8003478 <HAL_RCC_OscConfig>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000b30:	f000 fa4c 	bl	8000fcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b34:	230f      	movs	r3, #15
 8000b36:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b48:	463b      	mov	r3, r7
 8000b4a:	2104      	movs	r1, #4
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f003 f8a7 	bl	8003ca0 <HAL_RCC_ClockConfig>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000b58:	f000 fa38 	bl	8000fcc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000b5c:	f003 fd62 	bl	8004624 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000b60:	bf00      	nop
 8000b62:	3758      	adds	r7, #88	; 0x58
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40021000 	.word	0x40021000

08000b6c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b72:	463b      	mov	r3, r7
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
 8000b80:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b82:	4b2b      	ldr	r3, [pc, #172]	; (8000c30 <MX_ADC1_Init+0xc4>)
 8000b84:	4a2b      	ldr	r2, [pc, #172]	; (8000c34 <MX_ADC1_Init+0xc8>)
 8000b86:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000b88:	4b29      	ldr	r3, [pc, #164]	; (8000c30 <MX_ADC1_Init+0xc4>)
 8000b8a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b8e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b90:	4b27      	ldr	r3, [pc, #156]	; (8000c30 <MX_ADC1_Init+0xc4>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b96:	4b26      	ldr	r3, [pc, #152]	; (8000c30 <MX_ADC1_Init+0xc4>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b9c:	4b24      	ldr	r3, [pc, #144]	; (8000c30 <MX_ADC1_Init+0xc4>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ba2:	4b23      	ldr	r3, [pc, #140]	; (8000c30 <MX_ADC1_Init+0xc4>)
 8000ba4:	2204      	movs	r2, #4
 8000ba6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ba8:	4b21      	ldr	r3, [pc, #132]	; (8000c30 <MX_ADC1_Init+0xc4>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bae:	4b20      	ldr	r3, [pc, #128]	; (8000c30 <MX_ADC1_Init+0xc4>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000bb4:	4b1e      	ldr	r3, [pc, #120]	; (8000c30 <MX_ADC1_Init+0xc4>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bba:	4b1d      	ldr	r3, [pc, #116]	; (8000c30 <MX_ADC1_Init+0xc4>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bc2:	4b1b      	ldr	r3, [pc, #108]	; (8000c30 <MX_ADC1_Init+0xc4>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bc8:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <MX_ADC1_Init+0xc4>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bce:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <MX_ADC1_Init+0xc4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bd6:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <MX_ADC1_Init+0xc4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <MX_ADC1_Init+0xc4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8000be4:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <MX_ADC1_Init+0xc4>)
 8000be6:	2204      	movs	r2, #4
 8000be8:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bea:	4811      	ldr	r0, [pc, #68]	; (8000c30 <MX_ADC1_Init+0xc4>)
 8000bec:	f000 ff28 	bl	8001a40 <HAL_ADC_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000bf6:	f000 f9e9 	bl	8000fcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <MX_ADC1_Init+0xcc>)
 8000bfc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bfe:	2306      	movs	r3, #6
 8000c00:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000c02:	2305      	movs	r3, #5
 8000c04:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c06:	237f      	movs	r3, #127	; 0x7f
 8000c08:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c0a:	2304      	movs	r3, #4
 8000c0c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c12:	463b      	mov	r3, r7
 8000c14:	4619      	mov	r1, r3
 8000c16:	4806      	ldr	r0, [pc, #24]	; (8000c30 <MX_ADC1_Init+0xc4>)
 8000c18:	f001 f990 	bl	8001f3c <HAL_ADC_ConfigChannel>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8000c22:	f000 f9d3 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200013c4 	.word	0x200013c4
 8000c34:	50040000 	.word	0x50040000
 8000c38:	c7520000 	.word	0xc7520000

08000c3c <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000c40:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <MX_LPTIM1_Init+0x54>)
 8000c42:	4a14      	ldr	r2, [pc, #80]	; (8000c94 <MX_LPTIM1_Init+0x58>)
 8000c44:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000c46:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <MX_LPTIM1_Init+0x54>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV16;
 8000c4c:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <MX_LPTIM1_Init+0x54>)
 8000c4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c52:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000c54:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <MX_LPTIM1_Init+0x54>)
 8000c56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c5a:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <MX_LPTIM1_Init+0x54>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000c62:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <MX_LPTIM1_Init+0x54>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000c68:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <MX_LPTIM1_Init+0x54>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000c6e:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <MX_LPTIM1_Init+0x54>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <MX_LPTIM1_Init+0x54>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000c7a:	4805      	ldr	r0, [pc, #20]	; (8000c90 <MX_LPTIM1_Init+0x54>)
 8000c7c:	f002 fa46 	bl	800310c <HAL_LPTIM_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8000c86:	f000 f9a1 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	2000142c 	.word	0x2000142c
 8000c94:	40007c00 	.word	0x40007c00

08000c98 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000cac:	2300      	movs	r3, #0
 8000cae:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000cb0:	4b2b      	ldr	r3, [pc, #172]	; (8000d60 <MX_RTC_Init+0xc8>)
 8000cb2:	4a2c      	ldr	r2, [pc, #176]	; (8000d64 <MX_RTC_Init+0xcc>)
 8000cb4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000cb6:	4b2a      	ldr	r3, [pc, #168]	; (8000d60 <MX_RTC_Init+0xc8>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000cbc:	4b28      	ldr	r3, [pc, #160]	; (8000d60 <MX_RTC_Init+0xc8>)
 8000cbe:	227f      	movs	r2, #127	; 0x7f
 8000cc0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000cc2:	4b27      	ldr	r3, [pc, #156]	; (8000d60 <MX_RTC_Init+0xc8>)
 8000cc4:	22ff      	movs	r2, #255	; 0xff
 8000cc6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000cc8:	4b25      	ldr	r3, [pc, #148]	; (8000d60 <MX_RTC_Init+0xc8>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000cce:	4b24      	ldr	r3, [pc, #144]	; (8000d60 <MX_RTC_Init+0xc8>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000cd4:	4b22      	ldr	r3, [pc, #136]	; (8000d60 <MX_RTC_Init+0xc8>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000cda:	4b21      	ldr	r3, [pc, #132]	; (8000d60 <MX_RTC_Init+0xc8>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ce0:	481f      	ldr	r0, [pc, #124]	; (8000d60 <MX_RTC_Init+0xc8>)
 8000ce2:	f003 fda1 	bl	8004828 <HAL_RTC_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000cec:	f000 f96e 	bl	8000fcc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 8000cf0:	2309      	movs	r3, #9
 8000cf2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x35;
 8000cf4:	2335      	movs	r3, #53	; 0x35
 8000cf6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	2201      	movs	r2, #1
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4815      	ldr	r0, [pc, #84]	; (8000d60 <MX_RTC_Init+0xc8>)
 8000d0c:	f003 fe07 	bl	800491e <HAL_RTC_SetTime>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000d16:	f000 f959 	bl	8000fcc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8000d1a:	2305      	movs	r3, #5
 8000d1c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MARCH;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x31;
 8000d22:	2331      	movs	r3, #49	; 0x31
 8000d24:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8000d26:	2323      	movs	r3, #35	; 0x23
 8000d28:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000d2a:	463b      	mov	r3, r7
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	4619      	mov	r1, r3
 8000d30:	480b      	ldr	r0, [pc, #44]	; (8000d60 <MX_RTC_Init+0xc8>)
 8000d32:	f003 feed 	bl	8004b10 <HAL_RTC_SetDate>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000d3c:	f000 f946 	bl	8000fcc <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0xffff, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000d40:	2200      	movs	r2, #0
 8000d42:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d46:	4806      	ldr	r0, [pc, #24]	; (8000d60 <MX_RTC_Init+0xc8>)
 8000d48:	f004 f888 	bl	8004e5c <HAL_RTCEx_SetWakeUpTimer_IT>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_RTC_Init+0xbe>
  {
    Error_Handler();
 8000d52:	f000 f93b 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20001464 	.word	0x20001464
 8000d64:	40002800 	.word	0x40002800

08000d68 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <MX_SPI1_Init+0x74>)
 8000d6e:	4a1c      	ldr	r2, [pc, #112]	; (8000de0 <MX_SPI1_Init+0x78>)
 8000d70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d72:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <MX_SPI1_Init+0x74>)
 8000d74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000d7a:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <MX_SPI1_Init+0x74>)
 8000d7c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d80:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d82:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <MX_SPI1_Init+0x74>)
 8000d84:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d88:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d8a:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <MX_SPI1_Init+0x74>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d90:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <MX_SPI1_Init+0x74>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <MX_SPI1_Init+0x74>)
 8000d98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d9c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <MX_SPI1_Init+0x74>)
 8000da0:	2218      	movs	r2, #24
 8000da2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000da4:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <MX_SPI1_Init+0x74>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <MX_SPI1_Init+0x74>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000db0:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <MX_SPI1_Init+0x74>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <MX_SPI1_Init+0x74>)
 8000db8:	2207      	movs	r2, #7
 8000dba:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dbc:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <MX_SPI1_Init+0x74>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <MX_SPI1_Init+0x74>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dc8:	4804      	ldr	r0, [pc, #16]	; (8000ddc <MX_SPI1_Init+0x74>)
 8000dca:	f004 f95f 	bl	800508c <HAL_SPI_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000dd4:	f000 f8fa 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20001488 	.word	0x20001488
 8000de0:	40013000 	.word	0x40013000

08000de4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000de8:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <MX_TIM16_Init+0x44>)
 8000dea:	4a10      	ldr	r2, [pc, #64]	; (8000e2c <MX_TIM16_Init+0x48>)
 8000dec:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 24-1;
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <MX_TIM16_Init+0x44>)
 8000df0:	2217      	movs	r2, #23
 8000df2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <MX_TIM16_Init+0x44>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <MX_TIM16_Init+0x44>)
 8000dfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e00:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <MX_TIM16_Init+0x44>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000e08:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <MX_TIM16_Init+0x44>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <MX_TIM16_Init+0x44>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000e14:	4804      	ldr	r0, [pc, #16]	; (8000e28 <MX_TIM16_Init+0x44>)
 8000e16:	f004 fcaf 	bl	8005778 <HAL_TIM_Base_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000e20:	f000 f8d4 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	200014ec 	.word	0x200014ec
 8000e2c:	40014400 	.word	0x40014400

08000e30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e34:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e36:	4a15      	ldr	r2, [pc, #84]	; (8000e8c <MX_USART2_UART_Init+0x5c>)
 8000e38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e3a:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e56:	220c      	movs	r2, #12
 8000e58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e74:	f004 ff08 	bl	8005c88 <HAL_UART_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e7e:	f000 f8a5 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20001538 	.word	0x20001538
 8000e8c:	40004400 	.word	0x40004400

08000e90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e96:	f107 030c 	add.w	r3, r7, #12
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
 8000ea4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea6:	4b38      	ldr	r3, [pc, #224]	; (8000f88 <MX_GPIO_Init+0xf8>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eaa:	4a37      	ldr	r2, [pc, #220]	; (8000f88 <MX_GPIO_Init+0xf8>)
 8000eac:	f043 0304 	orr.w	r3, r3, #4
 8000eb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb2:	4b35      	ldr	r3, [pc, #212]	; (8000f88 <MX_GPIO_Init+0xf8>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb6:	f003 0304 	and.w	r3, r3, #4
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebe:	4b32      	ldr	r3, [pc, #200]	; (8000f88 <MX_GPIO_Init+0xf8>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec2:	4a31      	ldr	r2, [pc, #196]	; (8000f88 <MX_GPIO_Init+0xf8>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eca:	4b2f      	ldr	r3, [pc, #188]	; (8000f88 <MX_GPIO_Init+0xf8>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed6:	4b2c      	ldr	r3, [pc, #176]	; (8000f88 <MX_GPIO_Init+0xf8>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eda:	4a2b      	ldr	r2, [pc, #172]	; (8000f88 <MX_GPIO_Init+0xf8>)
 8000edc:	f043 0302 	orr.w	r3, r3, #2
 8000ee0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee2:	4b29      	ldr	r3, [pc, #164]	; (8000f88 <MX_GPIO_Init+0xf8>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	603b      	str	r3, [r7, #0]
 8000eec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PCF8553_CE_Pin|LED_GREEN_Pin|PCF8553_RESET_Pin, GPIO_PIN_RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2170      	movs	r1, #112	; 0x70
 8000ef2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef6:	f002 f8d9 	bl	80030ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCF8553_CE_Pin LED_GREEN_Pin PCF8553_RESET_Pin */
  GPIO_InitStruct.Pin = PCF8553_CE_Pin|LED_GREEN_Pin|PCF8553_RESET_Pin;
 8000efa:	2370      	movs	r3, #112	; 0x70
 8000efc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efe:	2301      	movs	r3, #1
 8000f00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0a:	f107 030c 	add.w	r3, r7, #12
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f14:	f001 ff50 	bl	8002db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_ESC_Pin */
  GPIO_InitStruct.Pin = KEY_ESC_Pin;
 8000f18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f1e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(KEY_ESC_GPIO_Port, &GPIO_InitStruct);
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4817      	ldr	r0, [pc, #92]	; (8000f8c <MX_GPIO_Init+0xfc>)
 8000f30:	f001 ff42 	bl	8002db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_UP_Pin KEY_ENTER_Pin */
  GPIO_InitStruct.Pin = KEY_UP_Pin|KEY_ENTER_Pin;
 8000f34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f3a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4e:	f001 ff33 	bl	8002db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_DOWN_Pin */
  GPIO_InitStruct.Pin = KEY_DOWN_Pin;
 8000f52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f58:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(KEY_DOWN_GPIO_Port, &GPIO_InitStruct);
 8000f62:	f107 030c 	add.w	r3, r7, #12
 8000f66:	4619      	mov	r1, r3
 8000f68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f6c:	f001 ff24 	bl	8002db8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2100      	movs	r1, #0
 8000f74:	2028      	movs	r0, #40	; 0x28
 8000f76:	f001 fee7 	bl	8002d48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f7a:	2028      	movs	r0, #40	; 0x28
 8000f7c:	f001 ff00 	bl	8002d80 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f80:	bf00      	nop
 8000f82:	3720      	adds	r7, #32
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	48000400 	.word	0x48000400

08000f90 <HAL_RTCEx_WakeUpTimerEventCallback>:

/* USER CODE BEGIN 4 */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
    UNUSED(hrtc);
    HAL_RTCEx_DeactivateWakeUpTimer(hrtc);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f003 fff3 	bl	8004f84 <HAL_RTCEx_DeactivateWakeUpTimer>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d101      	bne.n	8000fbe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fba:	f000 fad5 	bl	8001568 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40001000 	.word	0x40001000

08000fcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd0:	b672      	cpsid	i
}
 8000fd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <Error_Handler+0x8>
	...

08000fd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <HAL_MspInit+0x4c>)
 8000fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe2:	4a10      	ldr	r2, [pc, #64]	; (8001024 <HAL_MspInit+0x4c>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6613      	str	r3, [r2, #96]	; 0x60
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <HAL_MspInit+0x4c>)
 8000fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <HAL_MspInit+0x4c>)
 8000ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <HAL_MspInit+0x4c>)
 8000ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001000:	6593      	str	r3, [r2, #88]	; 0x58
 8001002:	4b08      	ldr	r3, [pc, #32]	; (8001024 <HAL_MspInit+0x4c>)
 8001004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	210f      	movs	r1, #15
 8001012:	f06f 0003 	mvn.w	r0, #3
 8001016:	f001 fe97 	bl	8002d48 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40021000 	.word	0x40021000

08001028 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b09e      	sub	sp, #120	; 0x78
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001030:	f107 0310 	add.w	r3, r7, #16
 8001034:	2268      	movs	r2, #104	; 0x68
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f00e fd01 	bl	800fa40 <memset>
  if(hadc->Instance==ADC1)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a11      	ldr	r2, [pc, #68]	; (8001088 <HAL_ADC_MspInit+0x60>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d11b      	bne.n	8001080 <HAL_ADC_MspInit+0x58>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001048:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800104c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800104e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001052:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001054:	f107 0310 	add.w	r3, r7, #16
 8001058:	4618      	mov	r0, r3
 800105a:	f003 f877 	bl	800414c <HAL_RCCEx_PeriphCLKConfig>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 8001064:	f7ff ffb2 	bl	8000fcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <HAL_ADC_MspInit+0x64>)
 800106a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106c:	4a07      	ldr	r2, [pc, #28]	; (800108c <HAL_ADC_MspInit+0x64>)
 800106e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001072:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001074:	4b05      	ldr	r3, [pc, #20]	; (800108c <HAL_ADC_MspInit+0x64>)
 8001076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001078:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001080:	bf00      	nop
 8001082:	3778      	adds	r7, #120	; 0x78
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	50040000 	.word	0x50040000
 800108c:	40021000 	.word	0x40021000

08001090 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b09e      	sub	sp, #120	; 0x78
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001098:	f107 0310 	add.w	r3, r7, #16
 800109c:	2268      	movs	r2, #104	; 0x68
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f00e fccd 	bl	800fa40 <memset>
  if(hlptim->Instance==LPTIM1)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a11      	ldr	r2, [pc, #68]	; (80010f0 <HAL_LPTIM_MspInit+0x60>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d11b      	bne.n	80010e8 <HAL_LPTIM_MspInit+0x58>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80010b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010b4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 80010b6:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80010ba:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010bc:	f107 0310 	add.w	r3, r7, #16
 80010c0:	4618      	mov	r0, r3
 80010c2:	f003 f843 	bl	800414c <HAL_RCCEx_PeriphCLKConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <HAL_LPTIM_MspInit+0x40>
    {
      Error_Handler();
 80010cc:	f7ff ff7e 	bl	8000fcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <HAL_LPTIM_MspInit+0x64>)
 80010d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d4:	4a07      	ldr	r2, [pc, #28]	; (80010f4 <HAL_LPTIM_MspInit+0x64>)
 80010d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010da:	6593      	str	r3, [r2, #88]	; 0x58
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <HAL_LPTIM_MspInit+0x64>)
 80010de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 80010e8:	bf00      	nop
 80010ea:	3778      	adds	r7, #120	; 0x78
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40007c00 	.word	0x40007c00
 80010f4:	40021000 	.word	0x40021000

080010f8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b09c      	sub	sp, #112	; 0x70
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001100:	f107 0308 	add.w	r3, r7, #8
 8001104:	2268      	movs	r2, #104	; 0x68
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f00e fc99 	bl	800fa40 <memset>
  if(hrtc->Instance==RTC)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a13      	ldr	r2, [pc, #76]	; (8001160 <HAL_RTC_MspInit+0x68>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d11f      	bne.n	8001158 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001118:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800111c:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800111e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001122:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001124:	f107 0308 	add.w	r3, r7, #8
 8001128:	4618      	mov	r0, r3
 800112a:	f003 f80f 	bl	800414c <HAL_RCCEx_PeriphCLKConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001134:	f7ff ff4a 	bl	8000fcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001138:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <HAL_RTC_MspInit+0x6c>)
 800113a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800113e:	4a09      	ldr	r2, [pc, #36]	; (8001164 <HAL_RTC_MspInit+0x6c>)
 8001140:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001144:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001148:	2200      	movs	r2, #0
 800114a:	2100      	movs	r1, #0
 800114c:	2003      	movs	r0, #3
 800114e:	f001 fdfb 	bl	8002d48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001152:	2003      	movs	r0, #3
 8001154:	f001 fe14 	bl	8002d80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001158:	bf00      	nop
 800115a:	3770      	adds	r7, #112	; 0x70
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40002800 	.word	0x40002800
 8001164:	40021000 	.word	0x40021000

08001168 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a17      	ldr	r2, [pc, #92]	; (80011e4 <HAL_SPI_MspInit+0x7c>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d128      	bne.n	80011dc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800118a:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <HAL_SPI_MspInit+0x80>)
 800118c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800118e:	4a16      	ldr	r2, [pc, #88]	; (80011e8 <HAL_SPI_MspInit+0x80>)
 8001190:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001194:	6613      	str	r3, [r2, #96]	; 0x60
 8001196:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <HAL_SPI_MspInit+0x80>)
 8001198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800119a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <HAL_SPI_MspInit+0x80>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a6:	4a10      	ldr	r2, [pc, #64]	; (80011e8 <HAL_SPI_MspInit+0x80>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <HAL_SPI_MspInit+0x80>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = PCF8553_SCL_Pin|PCF8553_SDIO_Pin;
 80011ba:	2382      	movs	r3, #130	; 0x82
 80011bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c6:	2303      	movs	r3, #3
 80011c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011ca:	2305      	movs	r3, #5
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	4619      	mov	r1, r3
 80011d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d8:	f001 fdee 	bl	8002db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011dc:	bf00      	nop
 80011de:	3728      	adds	r7, #40	; 0x28
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40013000 	.word	0x40013000
 80011e8:	40021000 	.word	0x40021000

080011ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <HAL_TIM_Base_MspInit+0x38>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d10b      	bne.n	8001216 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80011fe:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <HAL_TIM_Base_MspInit+0x3c>)
 8001200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001202:	4a09      	ldr	r2, [pc, #36]	; (8001228 <HAL_TIM_Base_MspInit+0x3c>)
 8001204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001208:	6613      	str	r3, [r2, #96]	; 0x60
 800120a:	4b07      	ldr	r3, [pc, #28]	; (8001228 <HAL_TIM_Base_MspInit+0x3c>)
 800120c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800120e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001216:	bf00      	nop
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40014400 	.word	0x40014400
 8001228:	40021000 	.word	0x40021000

0800122c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b0a4      	sub	sp, #144	; 0x90
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	2268      	movs	r2, #104	; 0x68
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f00e fbf7 	bl	800fa40 <memset>
  if(huart->Instance==USART2)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a21      	ldr	r2, [pc, #132]	; (80012dc <HAL_UART_MspInit+0xb0>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d13a      	bne.n	80012d2 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800125c:	2302      	movs	r3, #2
 800125e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001260:	2300      	movs	r3, #0
 8001262:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4618      	mov	r0, r3
 800126a:	f002 ff6f 	bl	800414c <HAL_RCCEx_PeriphCLKConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001274:	f7ff feaa 	bl	8000fcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001278:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <HAL_UART_MspInit+0xb4>)
 800127a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127c:	4a18      	ldr	r2, [pc, #96]	; (80012e0 <HAL_UART_MspInit+0xb4>)
 800127e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001282:	6593      	str	r3, [r2, #88]	; 0x58
 8001284:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <HAL_UART_MspInit+0xb4>)
 8001286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001290:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <HAL_UART_MspInit+0xb4>)
 8001292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001294:	4a12      	ldr	r2, [pc, #72]	; (80012e0 <HAL_UART_MspInit+0xb4>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129c:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <HAL_UART_MspInit+0xb4>)
 800129e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012a8:	230c      	movs	r3, #12
 80012aa:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	2302      	movs	r3, #2
 80012ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012be:	2307      	movs	r3, #7
 80012c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80012c8:	4619      	mov	r1, r3
 80012ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ce:	f001 fd73 	bl	8002db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012d2:	bf00      	nop
 80012d4:	3790      	adds	r7, #144	; 0x90
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40004400 	.word	0x40004400
 80012e0:	40021000 	.word	0x40021000

080012e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08e      	sub	sp, #56	; 0x38
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80012ec:	2300      	movs	r3, #0
 80012ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012f2:	4b34      	ldr	r3, [pc, #208]	; (80013c4 <HAL_InitTick+0xe0>)
 80012f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f6:	4a33      	ldr	r2, [pc, #204]	; (80013c4 <HAL_InitTick+0xe0>)
 80012f8:	f043 0310 	orr.w	r3, r3, #16
 80012fc:	6593      	str	r3, [r2, #88]	; 0x58
 80012fe:	4b31      	ldr	r3, [pc, #196]	; (80013c4 <HAL_InitTick+0xe0>)
 8001300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001302:	f003 0310 	and.w	r3, r3, #16
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800130a:	f107 0210 	add.w	r2, r7, #16
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4611      	mov	r1, r2
 8001314:	4618      	mov	r0, r3
 8001316:	f002 fe87 	bl	8004028 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800131a:	6a3b      	ldr	r3, [r7, #32]
 800131c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800131e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001320:	2b00      	cmp	r3, #0
 8001322:	d103      	bne.n	800132c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001324:	f002 fe54 	bl	8003fd0 <HAL_RCC_GetPCLK1Freq>
 8001328:	6378      	str	r0, [r7, #52]	; 0x34
 800132a:	e004      	b.n	8001336 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800132c:	f002 fe50 	bl	8003fd0 <HAL_RCC_GetPCLK1Freq>
 8001330:	4603      	mov	r3, r0
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001338:	4a23      	ldr	r2, [pc, #140]	; (80013c8 <HAL_InitTick+0xe4>)
 800133a:	fba2 2303 	umull	r2, r3, r2, r3
 800133e:	0c9b      	lsrs	r3, r3, #18
 8001340:	3b01      	subs	r3, #1
 8001342:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001344:	4b21      	ldr	r3, [pc, #132]	; (80013cc <HAL_InitTick+0xe8>)
 8001346:	4a22      	ldr	r2, [pc, #136]	; (80013d0 <HAL_InitTick+0xec>)
 8001348:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800134a:	4b20      	ldr	r3, [pc, #128]	; (80013cc <HAL_InitTick+0xe8>)
 800134c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001350:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001352:	4a1e      	ldr	r2, [pc, #120]	; (80013cc <HAL_InitTick+0xe8>)
 8001354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001356:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001358:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <HAL_InitTick+0xe8>)
 800135a:	2200      	movs	r2, #0
 800135c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135e:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <HAL_InitTick+0xe8>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001364:	4b19      	ldr	r3, [pc, #100]	; (80013cc <HAL_InitTick+0xe8>)
 8001366:	2200      	movs	r2, #0
 8001368:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800136a:	4818      	ldr	r0, [pc, #96]	; (80013cc <HAL_InitTick+0xe8>)
 800136c:	f004 fa04 	bl	8005778 <HAL_TIM_Base_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001376:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800137a:	2b00      	cmp	r3, #0
 800137c:	d11b      	bne.n	80013b6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800137e:	4813      	ldr	r0, [pc, #76]	; (80013cc <HAL_InitTick+0xe8>)
 8001380:	f004 fa52 	bl	8005828 <HAL_TIM_Base_Start_IT>
 8001384:	4603      	mov	r3, r0
 8001386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800138a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800138e:	2b00      	cmp	r3, #0
 8001390:	d111      	bne.n	80013b6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001392:	2036      	movs	r0, #54	; 0x36
 8001394:	f001 fcf4 	bl	8002d80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b0f      	cmp	r3, #15
 800139c:	d808      	bhi.n	80013b0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800139e:	2200      	movs	r2, #0
 80013a0:	6879      	ldr	r1, [r7, #4]
 80013a2:	2036      	movs	r0, #54	; 0x36
 80013a4:	f001 fcd0 	bl	8002d48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013a8:	4a0a      	ldr	r2, [pc, #40]	; (80013d4 <HAL_InitTick+0xf0>)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	e002      	b.n	80013b6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80013b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3738      	adds	r7, #56	; 0x38
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40021000 	.word	0x40021000
 80013c8:	431bde83 	.word	0x431bde83
 80013cc:	200015bc 	.word	0x200015bc
 80013d0:	40001000 	.word	0x40001000
 80013d4:	20000004 	.word	0x20000004

080013d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80013dc:	e7fe      	b.n	80013dc <NMI_Handler+0x4>

080013de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e2:	e7fe      	b.n	80013e2 <HardFault_Handler+0x4>

080013e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <MemManage_Handler+0x4>

080013ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ee:	e7fe      	b.n	80013ee <BusFault_Handler+0x4>

080013f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <UsageFault_Handler+0x4>

080013f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001408:	4802      	ldr	r0, [pc, #8]	; (8001414 <RTC_WKUP_IRQHandler+0x10>)
 800140a:	f003 fe19 	bl	8005040 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20001464 	.word	0x20001464

08001418 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_UP_Pin);
 800141c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001420:	f001 fe5c 	bl	80030dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(KEY_DOWN_Pin);
 8001424:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001428:	f001 fe58 	bl	80030dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(KEY_ENTER_Pin);
 800142c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001430:	f001 fe54 	bl	80030dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(KEY_ESC_Pin);
 8001434:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001438:	f001 fe50 	bl	80030dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}

08001440 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001444:	4802      	ldr	r0, [pc, #8]	; (8001450 <TIM6_DAC_IRQHandler+0x10>)
 8001446:	f004 fa4b 	bl	80058e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200015bc 	.word	0x200015bc

08001454 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 800145c:	4a14      	ldr	r2, [pc, #80]	; (80014b0 <_sbrk+0x5c>)
	- (uint32_t) &_Min_Stack_Size;
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end)
 8001468:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <_sbrk+0x64>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d102      	bne.n	8001476 <_sbrk+0x22>
	{
		__sbrk_heap_end = &_end;
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <_sbrk+0x64>)
 8001472:	4a12      	ldr	r2, [pc, #72]	; (80014bc <_sbrk+0x68>)
 8001474:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap)
 8001476:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <_sbrk+0x64>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	429a      	cmp	r2, r3
 8001482:	d207      	bcs.n	8001494 <_sbrk+0x40>
	{
		errno = ENOMEM;
 8001484:	f00e fab2 	bl	800f9ec <__errno>
 8001488:	4603      	mov	r3, r0
 800148a:	220c      	movs	r2, #12
 800148c:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800148e:	f04f 33ff 	mov.w	r3, #4294967295
 8001492:	e009      	b.n	80014a8 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8001494:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <_sbrk+0x64>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 800149a:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <_sbrk+0x64>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	4a05      	ldr	r2, [pc, #20]	; (80014b8 <_sbrk+0x64>)
 80014a4:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80014a6:	68fb      	ldr	r3, [r7, #12]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20028000 	.word	0x20028000
 80014b4:	00000400 	.word	0x00000400
 80014b8:	20001608 	.word	0x20001608
 80014bc:	20001df8 	.word	0x20001df8

080014c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <SystemInit+0x20>)
 80014c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ca:	4a05      	ldr	r2, [pc, #20]	; (80014e0 <SystemInit+0x20>)
 80014cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800151c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014e8:	f7ff ffea 	bl	80014c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014ec:	480c      	ldr	r0, [pc, #48]	; (8001520 <LoopForever+0x6>)
  ldr r1, =_edata
 80014ee:	490d      	ldr	r1, [pc, #52]	; (8001524 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014f0:	4a0d      	ldr	r2, [pc, #52]	; (8001528 <LoopForever+0xe>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f4:	e002      	b.n	80014fc <LoopCopyDataInit>

080014f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014fa:	3304      	adds	r3, #4

080014fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001500:	d3f9      	bcc.n	80014f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001502:	4a0a      	ldr	r2, [pc, #40]	; (800152c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001504:	4c0a      	ldr	r4, [pc, #40]	; (8001530 <LoopForever+0x16>)
  movs r3, #0
 8001506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001508:	e001      	b.n	800150e <LoopFillZerobss>

0800150a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800150a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800150c:	3204      	adds	r2, #4

0800150e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001510:	d3fb      	bcc.n	800150a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001512:	f00e fa71 	bl	800f9f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001516:	f7ff faab 	bl	8000a70 <main>

0800151a <LoopForever>:

LoopForever:
    b LoopForever
 800151a:	e7fe      	b.n	800151a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800151c:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8001520:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001524:	200001b8 	.word	0x200001b8
  ldr r2, =_sidata
 8001528:	080108d8 	.word	0x080108d8
  ldr r2, =_sbss
 800152c:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 8001530:	20001df4 	.word	0x20001df4

08001534 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001534:	e7fe      	b.n	8001534 <ADC1_IRQHandler>

08001536 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800153c:	2300      	movs	r3, #0
 800153e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001540:	2003      	movs	r0, #3
 8001542:	f001 fbf6 	bl	8002d32 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001546:	200f      	movs	r0, #15
 8001548:	f7ff fecc 	bl	80012e4 <HAL_InitTick>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d002      	beq.n	8001558 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	71fb      	strb	r3, [r7, #7]
 8001556:	e001      	b.n	800155c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001558:	f7ff fd3e 	bl	8000fd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800155c:	79fb      	ldrb	r3, [r7, #7]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
	...

08001568 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_IncTick+0x20>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	461a      	mov	r2, r3
 8001572:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_IncTick+0x24>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4413      	add	r3, r2
 8001578:	4a04      	ldr	r2, [pc, #16]	; (800158c <HAL_IncTick+0x24>)
 800157a:	6013      	str	r3, [r2, #0]
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	20000008 	.word	0x20000008
 800158c:	2000160c 	.word	0x2000160c

08001590 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  return uwTick;
 8001594:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <HAL_GetTick+0x14>)
 8001596:	681b      	ldr	r3, [r3, #0]
}
 8001598:	4618      	mov	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	2000160c 	.word	0x2000160c

080015a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015b0:	f7ff ffee 	bl	8001590 <HAL_GetTick>
 80015b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c0:	d005      	beq.n	80015ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015c2:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <HAL_Delay+0x44>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	461a      	mov	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4413      	add	r3, r2
 80015cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ce:	bf00      	nop
 80015d0:	f7ff ffde 	bl	8001590 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d8f7      	bhi.n	80015d0 <HAL_Delay+0x28>
  {
  }
}
 80015e0:	bf00      	nop
 80015e2:	bf00      	nop
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000008 	.word	0x20000008

080015f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	431a      	orrs	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	609a      	str	r2, [r3, #8]
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	609a      	str	r2, [r3, #8]
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800164c:	4618      	mov	r0, r3
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001658:	b480      	push	{r7}
 800165a:	b087      	sub	sp, #28
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
 8001664:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	3360      	adds	r3, #96	; 0x60
 800166a:	461a      	mov	r2, r3
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4b08      	ldr	r3, [pc, #32]	; (800169c <LL_ADC_SetOffset+0x44>)
 800167a:	4013      	ands	r3, r2
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	430a      	orrs	r2, r1
 8001686:	4313      	orrs	r3, r2
 8001688:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001690:	bf00      	nop
 8001692:	371c      	adds	r7, #28
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	03fff000 	.word	0x03fff000

080016a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	3360      	adds	r3, #96	; 0x60
 80016ae:	461a      	mov	r2, r3
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b087      	sub	sp, #28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	3360      	adds	r3, #96	; 0x60
 80016dc:	461a      	mov	r2, r3
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	431a      	orrs	r2, r3
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80016f6:	bf00      	nop
 80016f8:	371c      	adds	r7, #28
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	695b      	ldr	r3, [r3, #20]
 8001710:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	431a      	orrs	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	615a      	str	r2, [r3, #20]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800173c:	2301      	movs	r3, #1
 800173e:	e000      	b.n	8001742 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800174e:	b480      	push	{r7}
 8001750:	b087      	sub	sp, #28
 8001752:	af00      	add	r7, sp, #0
 8001754:	60f8      	str	r0, [r7, #12]
 8001756:	60b9      	str	r1, [r7, #8]
 8001758:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	3330      	adds	r3, #48	; 0x30
 800175e:	461a      	mov	r2, r3
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	0a1b      	lsrs	r3, r3, #8
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	f003 030c 	and.w	r3, r3, #12
 800176a:	4413      	add	r3, r2
 800176c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	f003 031f 	and.w	r3, r3, #31
 8001778:	211f      	movs	r1, #31
 800177a:	fa01 f303 	lsl.w	r3, r1, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	401a      	ands	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	0e9b      	lsrs	r3, r3, #26
 8001786:	f003 011f 	and.w	r1, r3, #31
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	f003 031f 	and.w	r3, r3, #31
 8001790:	fa01 f303 	lsl.w	r3, r1, r3
 8001794:	431a      	orrs	r2, r3
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800179a:	bf00      	nop
 800179c:	371c      	adds	r7, #28
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b087      	sub	sp, #28
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	60f8      	str	r0, [r7, #12]
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	3314      	adds	r3, #20
 80017b6:	461a      	mov	r2, r3
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	0e5b      	lsrs	r3, r3, #25
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	f003 0304 	and.w	r3, r3, #4
 80017c2:	4413      	add	r3, r2
 80017c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	0d1b      	lsrs	r3, r3, #20
 80017ce:	f003 031f 	and.w	r3, r3, #31
 80017d2:	2107      	movs	r1, #7
 80017d4:	fa01 f303 	lsl.w	r3, r1, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	401a      	ands	r2, r3
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	0d1b      	lsrs	r3, r3, #20
 80017e0:	f003 031f 	and.w	r3, r3, #31
 80017e4:	6879      	ldr	r1, [r7, #4]
 80017e6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ea:	431a      	orrs	r2, r3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80017f0:	bf00      	nop
 80017f2:	371c      	adds	r7, #28
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001814:	43db      	mvns	r3, r3
 8001816:	401a      	ands	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f003 0318 	and.w	r3, r3, #24
 800181e:	4908      	ldr	r1, [pc, #32]	; (8001840 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001820:	40d9      	lsrs	r1, r3
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	400b      	ands	r3, r1
 8001826:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800182a:	431a      	orrs	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001832:	bf00      	nop
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	0007ffff 	.word	0x0007ffff

08001844 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001854:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	6093      	str	r3, [r2, #8]
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001878:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800187c:	d101      	bne.n	8001882 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800187e:	2301      	movs	r3, #1
 8001880:	e000      	b.n	8001884 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80018a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80018cc:	d101      	bne.n	80018d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80018ce:	2301      	movs	r3, #1
 80018d0:	e000      	b.n	80018d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018f4:	f043 0201 	orr.w	r2, r3, #1
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001918:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800191c:	f043 0202 	orr.w	r2, r3, #2
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	2b01      	cmp	r3, #1
 8001942:	d101      	bne.n	8001948 <LL_ADC_IsEnabled+0x18>
 8001944:	2301      	movs	r3, #1
 8001946:	e000      	b.n	800194a <LL_ADC_IsEnabled+0x1a>
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b02      	cmp	r3, #2
 8001968:	d101      	bne.n	800196e <LL_ADC_IsDisableOngoing+0x18>
 800196a:	2301      	movs	r3, #1
 800196c:	e000      	b.n	8001970 <LL_ADC_IsDisableOngoing+0x1a>
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800198c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001990:	f043 0204 	orr.w	r2, r3, #4
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019b8:	f043 0210 	orr.w	r2, r3, #16
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b04      	cmp	r3, #4
 80019de:	d101      	bne.n	80019e4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80019e0:	2301      	movs	r3, #1
 80019e2:	e000      	b.n	80019e6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a02:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a06:	f043 0220 	orr.w	r2, r3, #32
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 0308 	and.w	r3, r3, #8
 8001a2a:	2b08      	cmp	r3, #8
 8001a2c:	d101      	bne.n	8001a32 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e000      	b.n	8001a34 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b088      	sub	sp, #32
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e12f      	b.n	8001cba <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d109      	bne.n	8001a7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff fadd 	bl	8001028 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fef1 	bl	8001868 <LL_ADC_IsDeepPowerDownEnabled>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d004      	beq.n	8001a96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff fed7 	bl	8001844 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff ff0c 	bl	80018b8 <LL_ADC_IsInternalRegulatorEnabled>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d115      	bne.n	8001ad2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fef0 	bl	8001890 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ab0:	4b84      	ldr	r3, [pc, #528]	; (8001cc4 <HAL_ADC_Init+0x284>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	099b      	lsrs	r3, r3, #6
 8001ab6:	4a84      	ldr	r2, [pc, #528]	; (8001cc8 <HAL_ADC_Init+0x288>)
 8001ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8001abc:	099b      	lsrs	r3, r3, #6
 8001abe:	3301      	adds	r3, #1
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ac4:	e002      	b.n	8001acc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1f9      	bne.n	8001ac6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff feee 	bl	80018b8 <LL_ADC_IsInternalRegulatorEnabled>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10d      	bne.n	8001afe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae6:	f043 0210 	orr.w	r2, r3, #16
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af2:	f043 0201 	orr.w	r2, r3, #1
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff ff62 	bl	80019cc <LL_ADC_REG_IsConversionOngoing>
 8001b08:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0e:	f003 0310 	and.w	r3, r3, #16
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f040 80c8 	bne.w	8001ca8 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f040 80c4 	bne.w	8001ca8 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b24:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b28:	f043 0202 	orr.w	r2, r3, #2
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fefb 	bl	8001930 <LL_ADC_IsEnabled>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d10b      	bne.n	8001b58 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b40:	4862      	ldr	r0, [pc, #392]	; (8001ccc <HAL_ADC_Init+0x28c>)
 8001b42:	f7ff fef5 	bl	8001930 <LL_ADC_IsEnabled>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d105      	bne.n	8001b58 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	4619      	mov	r1, r3
 8001b52:	485f      	ldr	r0, [pc, #380]	; (8001cd0 <HAL_ADC_Init+0x290>)
 8001b54:	f7ff fd4c 	bl	80015f0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	7e5b      	ldrb	r3, [r3, #25]
 8001b5c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b62:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001b68:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001b6e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b76:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d106      	bne.n	8001b94 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	045b      	lsls	r3, r3, #17
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d009      	beq.n	8001bb0 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68da      	ldr	r2, [r3, #12]
 8001bb6:	4b47      	ldr	r3, [pc, #284]	; (8001cd4 <HAL_ADC_Init+0x294>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6812      	ldr	r2, [r2, #0]
 8001bbe:	69b9      	ldr	r1, [r7, #24]
 8001bc0:	430b      	orrs	r3, r1
 8001bc2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff feff 	bl	80019cc <LL_ADC_REG_IsConversionOngoing>
 8001bce:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff20 	bl	8001a1a <LL_ADC_INJ_IsConversionOngoing>
 8001bda:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d140      	bne.n	8001c64 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d13d      	bne.n	8001c64 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	7e1b      	ldrb	r3, [r3, #24]
 8001bf0:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bf2:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bfa:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c0a:	f023 0306 	bic.w	r3, r3, #6
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	6812      	ldr	r2, [r2, #0]
 8001c12:	69b9      	ldr	r1, [r7, #24]
 8001c14:	430b      	orrs	r3, r1
 8001c16:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d118      	bne.n	8001c54 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001c2c:	f023 0304 	bic.w	r3, r3, #4
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c38:	4311      	orrs	r1, r2
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c3e:	4311      	orrs	r1, r2
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c44:	430a      	orrs	r2, r1
 8001c46:	431a      	orrs	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f042 0201 	orr.w	r2, r2, #1
 8001c50:	611a      	str	r2, [r3, #16]
 8001c52:	e007      	b.n	8001c64 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	691a      	ldr	r2, [r3, #16]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 0201 	bic.w	r2, r2, #1
 8001c62:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d10c      	bne.n	8001c86 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f023 010f 	bic.w	r1, r3, #15
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	1e5a      	subs	r2, r3, #1
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	430a      	orrs	r2, r1
 8001c82:	631a      	str	r2, [r3, #48]	; 0x30
 8001c84:	e007      	b.n	8001c96 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 020f 	bic.w	r2, r2, #15
 8001c94:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9a:	f023 0303 	bic.w	r3, r3, #3
 8001c9e:	f043 0201 	orr.w	r2, r3, #1
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	659a      	str	r2, [r3, #88]	; 0x58
 8001ca6:	e007      	b.n	8001cb8 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cac:	f043 0210 	orr.w	r2, r3, #16
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cb8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3720      	adds	r7, #32
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000000 	.word	0x20000000
 8001cc8:	053e2d63 	.word	0x053e2d63
 8001ccc:	50040000 	.word	0x50040000
 8001cd0:	50040300 	.word	0x50040300
 8001cd4:	fff0c007 	.word	0xfff0c007

08001cd8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff fe71 	bl	80019cc <LL_ADC_REG_IsConversionOngoing>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d14f      	bne.n	8001d90 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d101      	bne.n	8001cfe <HAL_ADC_Start+0x26>
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e04b      	b.n	8001d96 <HAL_ADC_Start+0xbe>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 fdd0 	bl	80028ac <ADC_Enable>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d137      	bne.n	8001d86 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d1e:	f023 0301 	bic.w	r3, r3, #1
 8001d22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d36:	d106      	bne.n	8001d46 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3c:	f023 0206 	bic.w	r2, r3, #6
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d44:	e002      	b.n	8001d4c <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	221c      	movs	r2, #28
 8001d52:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d007      	beq.n	8001d7a <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d72:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fdfc 	bl	800197c <LL_ADC_REG_StartConversion>
 8001d84:	e006      	b.n	8001d94 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001d8e:	e001      	b.n	8001d94 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d90:	2302      	movs	r3, #2
 8001d92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b084      	sub	sp, #16
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d101      	bne.n	8001db4 <HAL_ADC_Stop+0x16>
 8001db0:	2302      	movs	r3, #2
 8001db2:	e023      	b.n	8001dfc <HAL_ADC_Stop+0x5e>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001dbc:	2103      	movs	r1, #3
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 fcb8 	bl	8002734 <ADC_ConversionStop>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d111      	bne.n	8001df2 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 fdf2 	bl	80029b8 <ADC_Disable>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d109      	bne.n	8001df2 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001de6:	f023 0301 	bic.w	r3, r3, #1
 8001dea:	f043 0201 	orr.w	r2, r3, #1
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	2b08      	cmp	r3, #8
 8001e14:	d102      	bne.n	8001e1c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001e16:	2308      	movs	r3, #8
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	e010      	b.n	8001e3e <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d007      	beq.n	8001e3a <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2e:	f043 0220 	orr.w	r2, r3, #32
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e06f      	b.n	8001f1a <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001e3a:	2304      	movs	r3, #4
 8001e3c:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001e3e:	f7ff fba7 	bl	8001590 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001e44:	e021      	b.n	8001e8a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e4c:	d01d      	beq.n	8001e8a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001e4e:	f7ff fb9f 	bl	8001590 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d302      	bcc.n	8001e64 <HAL_ADC_PollForConversion+0x60>
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d112      	bne.n	8001e8a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10b      	bne.n	8001e8a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e76:	f043 0204 	orr.w	r2, r3, #4
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e047      	b.n	8001f1a <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	4013      	ands	r3, r2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0d6      	beq.n	8001e46 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fc3d 	bl	8001728 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d01c      	beq.n	8001eee <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	7e5b      	ldrb	r3, [r3, #25]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d118      	bne.n	8001eee <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d111      	bne.n	8001eee <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ece:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d105      	bne.n	8001eee <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee6:	f043 0201 	orr.w	r2, r3, #1
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d104      	bne.n	8001f06 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2208      	movs	r2, #8
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	e008      	b.n	8001f18 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d103      	bne.n	8001f18 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	220c      	movs	r2, #12
 8001f16:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b0b6      	sub	sp, #216	; 0xd8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d101      	bne.n	8001f5e <HAL_ADC_ConfigChannel+0x22>
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	e3d5      	b.n	800270a <HAL_ADC_ConfigChannel+0x7ce>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff fd2e 	bl	80019cc <LL_ADC_REG_IsConversionOngoing>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f040 83ba 	bne.w	80026ec <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b05      	cmp	r3, #5
 8001f7e:	d824      	bhi.n	8001fca <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	3b02      	subs	r3, #2
 8001f86:	2b03      	cmp	r3, #3
 8001f88:	d81b      	bhi.n	8001fc2 <HAL_ADC_ConfigChannel+0x86>
 8001f8a:	a201      	add	r2, pc, #4	; (adr r2, 8001f90 <HAL_ADC_ConfigChannel+0x54>)
 8001f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f90:	08001fa1 	.word	0x08001fa1
 8001f94:	08001fa9 	.word	0x08001fa9
 8001f98:	08001fb1 	.word	0x08001fb1
 8001f9c:	08001fb9 	.word	0x08001fb9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	220c      	movs	r2, #12
 8001fa4:	605a      	str	r2, [r3, #4]
          break;
 8001fa6:	e011      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	2212      	movs	r2, #18
 8001fac:	605a      	str	r2, [r3, #4]
          break;
 8001fae:	e00d      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	2218      	movs	r2, #24
 8001fb4:	605a      	str	r2, [r3, #4]
          break;
 8001fb6:	e009      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fbe:	605a      	str	r2, [r3, #4]
          break;
 8001fc0:	e004      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	2206      	movs	r2, #6
 8001fc6:	605a      	str	r2, [r3, #4]
          break;
 8001fc8:	e000      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001fca:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	6859      	ldr	r1, [r3, #4]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	461a      	mov	r2, r3
 8001fda:	f7ff fbb8 	bl	800174e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff fcf2 	bl	80019cc <LL_ADC_REG_IsConversionOngoing>
 8001fe8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff fd12 	bl	8001a1a <LL_ADC_INJ_IsConversionOngoing>
 8001ff6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ffa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f040 81c1 	bne.w	8002386 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002004:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002008:	2b00      	cmp	r3, #0
 800200a:	f040 81bc 	bne.w	8002386 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002016:	d10f      	bne.n	8002038 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6818      	ldr	r0, [r3, #0]
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2200      	movs	r2, #0
 8002022:	4619      	mov	r1, r3
 8002024:	f7ff fbbf 	bl	80017a6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff fb66 	bl	8001702 <LL_ADC_SetSamplingTimeCommonConfig>
 8002036:	e00e      	b.n	8002056 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6818      	ldr	r0, [r3, #0]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	6819      	ldr	r1, [r3, #0]
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	461a      	mov	r2, r3
 8002046:	f7ff fbae 	bl	80017a6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2100      	movs	r1, #0
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fb56 	bl	8001702 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	695a      	ldr	r2, [r3, #20]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	08db      	lsrs	r3, r3, #3
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	2b04      	cmp	r3, #4
 8002076:	d00a      	beq.n	800208e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6818      	ldr	r0, [r3, #0]
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	6919      	ldr	r1, [r3, #16]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002088:	f7ff fae6 	bl	8001658 <LL_ADC_SetOffset>
 800208c:	e17b      	b.n	8002386 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2100      	movs	r1, #0
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff fb03 	bl	80016a0 <LL_ADC_GetOffsetChannel>
 800209a:	4603      	mov	r3, r0
 800209c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10a      	bne.n	80020ba <HAL_ADC_ConfigChannel+0x17e>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2100      	movs	r1, #0
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff faf8 	bl	80016a0 <LL_ADC_GetOffsetChannel>
 80020b0:	4603      	mov	r3, r0
 80020b2:	0e9b      	lsrs	r3, r3, #26
 80020b4:	f003 021f 	and.w	r2, r3, #31
 80020b8:	e01e      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x1bc>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2100      	movs	r1, #0
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff faed 	bl	80016a0 <LL_ADC_GetOffsetChannel>
 80020c6:	4603      	mov	r3, r0
 80020c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80020d0:	fa93 f3a3 	rbit	r3, r3
 80020d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80020dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80020e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80020e8:	2320      	movs	r3, #32
 80020ea:	e004      	b.n	80020f6 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80020ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020f0:	fab3 f383 	clz	r3, r3
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002100:	2b00      	cmp	r3, #0
 8002102:	d105      	bne.n	8002110 <HAL_ADC_ConfigChannel+0x1d4>
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	0e9b      	lsrs	r3, r3, #26
 800210a:	f003 031f 	and.w	r3, r3, #31
 800210e:	e018      	b.n	8002142 <HAL_ADC_ConfigChannel+0x206>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002118:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800211c:	fa93 f3a3 	rbit	r3, r3
 8002120:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002124:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002128:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800212c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002134:	2320      	movs	r3, #32
 8002136:	e004      	b.n	8002142 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002138:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800213c:	fab3 f383 	clz	r3, r3
 8002140:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002142:	429a      	cmp	r2, r3
 8002144:	d106      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2200      	movs	r2, #0
 800214c:	2100      	movs	r1, #0
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff fabc 	bl	80016cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2101      	movs	r1, #1
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff faa0 	bl	80016a0 <LL_ADC_GetOffsetChannel>
 8002160:	4603      	mov	r3, r0
 8002162:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10a      	bne.n	8002180 <HAL_ADC_ConfigChannel+0x244>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2101      	movs	r1, #1
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff fa95 	bl	80016a0 <LL_ADC_GetOffsetChannel>
 8002176:	4603      	mov	r3, r0
 8002178:	0e9b      	lsrs	r3, r3, #26
 800217a:	f003 021f 	and.w	r2, r3, #31
 800217e:	e01e      	b.n	80021be <HAL_ADC_ConfigChannel+0x282>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2101      	movs	r1, #1
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff fa8a 	bl	80016a0 <LL_ADC_GetOffsetChannel>
 800218c:	4603      	mov	r3, r0
 800218e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002192:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002196:	fa93 f3a3 	rbit	r3, r3
 800219a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800219e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80021a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80021a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80021ae:	2320      	movs	r3, #32
 80021b0:	e004      	b.n	80021bc <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80021b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80021b6:	fab3 f383 	clz	r3, r3
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d105      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x29a>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	0e9b      	lsrs	r3, r3, #26
 80021d0:	f003 031f 	and.w	r3, r3, #31
 80021d4:	e018      	b.n	8002208 <HAL_ADC_ConfigChannel+0x2cc>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021e2:	fa93 f3a3 	rbit	r3, r3
 80021e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80021ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80021ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80021f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80021fa:	2320      	movs	r3, #32
 80021fc:	e004      	b.n	8002208 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80021fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002202:	fab3 f383 	clz	r3, r3
 8002206:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002208:	429a      	cmp	r2, r3
 800220a:	d106      	bne.n	800221a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2200      	movs	r2, #0
 8002212:	2101      	movs	r1, #1
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff fa59 	bl	80016cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2102      	movs	r1, #2
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff fa3d 	bl	80016a0 <LL_ADC_GetOffsetChannel>
 8002226:	4603      	mov	r3, r0
 8002228:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10a      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x30a>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2102      	movs	r1, #2
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff fa32 	bl	80016a0 <LL_ADC_GetOffsetChannel>
 800223c:	4603      	mov	r3, r0
 800223e:	0e9b      	lsrs	r3, r3, #26
 8002240:	f003 021f 	and.w	r2, r3, #31
 8002244:	e01e      	b.n	8002284 <HAL_ADC_ConfigChannel+0x348>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2102      	movs	r1, #2
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff fa27 	bl	80016a0 <LL_ADC_GetOffsetChannel>
 8002252:	4603      	mov	r3, r0
 8002254:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002258:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800225c:	fa93 f3a3 	rbit	r3, r3
 8002260:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002264:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002268:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800226c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002274:	2320      	movs	r3, #32
 8002276:	e004      	b.n	8002282 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002278:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800227c:	fab3 f383 	clz	r3, r3
 8002280:	b2db      	uxtb	r3, r3
 8002282:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800228c:	2b00      	cmp	r3, #0
 800228e:	d105      	bne.n	800229c <HAL_ADC_ConfigChannel+0x360>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	0e9b      	lsrs	r3, r3, #26
 8002296:	f003 031f 	and.w	r3, r3, #31
 800229a:	e016      	b.n	80022ca <HAL_ADC_ConfigChannel+0x38e>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022a8:	fa93 f3a3 	rbit	r3, r3
 80022ac:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80022ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80022b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80022bc:	2320      	movs	r3, #32
 80022be:	e004      	b.n	80022ca <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80022c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022c4:	fab3 f383 	clz	r3, r3
 80022c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d106      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2200      	movs	r2, #0
 80022d4:	2102      	movs	r1, #2
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff f9f8 	bl	80016cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2103      	movs	r1, #3
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff f9dc 	bl	80016a0 <LL_ADC_GetOffsetChannel>
 80022e8:	4603      	mov	r3, r0
 80022ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10a      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x3cc>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2103      	movs	r1, #3
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff f9d1 	bl	80016a0 <LL_ADC_GetOffsetChannel>
 80022fe:	4603      	mov	r3, r0
 8002300:	0e9b      	lsrs	r3, r3, #26
 8002302:	f003 021f 	and.w	r2, r3, #31
 8002306:	e017      	b.n	8002338 <HAL_ADC_ConfigChannel+0x3fc>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2103      	movs	r1, #3
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff f9c6 	bl	80016a0 <LL_ADC_GetOffsetChannel>
 8002314:	4603      	mov	r3, r0
 8002316:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002318:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800231a:	fa93 f3a3 	rbit	r3, r3
 800231e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002320:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002322:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002324:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800232a:	2320      	movs	r3, #32
 800232c:	e003      	b.n	8002336 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800232e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002330:	fab3 f383 	clz	r3, r3
 8002334:	b2db      	uxtb	r3, r3
 8002336:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002340:	2b00      	cmp	r3, #0
 8002342:	d105      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x414>
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	0e9b      	lsrs	r3, r3, #26
 800234a:	f003 031f 	and.w	r3, r3, #31
 800234e:	e011      	b.n	8002374 <HAL_ADC_ConfigChannel+0x438>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002356:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002358:	fa93 f3a3 	rbit	r3, r3
 800235c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800235e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002360:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002368:	2320      	movs	r3, #32
 800236a:	e003      	b.n	8002374 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800236c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800236e:	fab3 f383 	clz	r3, r3
 8002372:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002374:	429a      	cmp	r2, r3
 8002376:	d106      	bne.n	8002386 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2200      	movs	r2, #0
 800237e:	2103      	movs	r1, #3
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff f9a3 	bl	80016cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fad0 	bl	8001930 <LL_ADC_IsEnabled>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	f040 8140 	bne.w	8002618 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6818      	ldr	r0, [r3, #0]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	6819      	ldr	r1, [r3, #0]
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	461a      	mov	r2, r3
 80023a6:	f7ff fa29 	bl	80017fc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	4a8f      	ldr	r2, [pc, #572]	; (80025ec <HAL_ADC_ConfigChannel+0x6b0>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	f040 8131 	bne.w	8002618 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10b      	bne.n	80023de <HAL_ADC_ConfigChannel+0x4a2>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	0e9b      	lsrs	r3, r3, #26
 80023cc:	3301      	adds	r3, #1
 80023ce:	f003 031f 	and.w	r3, r3, #31
 80023d2:	2b09      	cmp	r3, #9
 80023d4:	bf94      	ite	ls
 80023d6:	2301      	movls	r3, #1
 80023d8:	2300      	movhi	r3, #0
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	e019      	b.n	8002412 <HAL_ADC_ConfigChannel+0x4d6>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023e6:	fa93 f3a3 	rbit	r3, r3
 80023ea:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80023ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023ee:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80023f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80023f6:	2320      	movs	r3, #32
 80023f8:	e003      	b.n	8002402 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80023fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023fc:	fab3 f383 	clz	r3, r3
 8002400:	b2db      	uxtb	r3, r3
 8002402:	3301      	adds	r3, #1
 8002404:	f003 031f 	and.w	r3, r3, #31
 8002408:	2b09      	cmp	r3, #9
 800240a:	bf94      	ite	ls
 800240c:	2301      	movls	r3, #1
 800240e:	2300      	movhi	r3, #0
 8002410:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002412:	2b00      	cmp	r3, #0
 8002414:	d079      	beq.n	800250a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800241e:	2b00      	cmp	r3, #0
 8002420:	d107      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x4f6>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	0e9b      	lsrs	r3, r3, #26
 8002428:	3301      	adds	r3, #1
 800242a:	069b      	lsls	r3, r3, #26
 800242c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002430:	e015      	b.n	800245e <HAL_ADC_ConfigChannel+0x522>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800243a:	fa93 f3a3 	rbit	r3, r3
 800243e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002442:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002444:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800244a:	2320      	movs	r3, #32
 800244c:	e003      	b.n	8002456 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800244e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002450:	fab3 f383 	clz	r3, r3
 8002454:	b2db      	uxtb	r3, r3
 8002456:	3301      	adds	r3, #1
 8002458:	069b      	lsls	r3, r3, #26
 800245a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002466:	2b00      	cmp	r3, #0
 8002468:	d109      	bne.n	800247e <HAL_ADC_ConfigChannel+0x542>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	0e9b      	lsrs	r3, r3, #26
 8002470:	3301      	adds	r3, #1
 8002472:	f003 031f 	and.w	r3, r3, #31
 8002476:	2101      	movs	r1, #1
 8002478:	fa01 f303 	lsl.w	r3, r1, r3
 800247c:	e017      	b.n	80024ae <HAL_ADC_ConfigChannel+0x572>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002486:	fa93 f3a3 	rbit	r3, r3
 800248a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800248c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800248e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002496:	2320      	movs	r3, #32
 8002498:	e003      	b.n	80024a2 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800249a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800249c:	fab3 f383 	clz	r3, r3
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	3301      	adds	r3, #1
 80024a4:	f003 031f 	and.w	r3, r3, #31
 80024a8:	2101      	movs	r1, #1
 80024aa:	fa01 f303 	lsl.w	r3, r1, r3
 80024ae:	ea42 0103 	orr.w	r1, r2, r3
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10a      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x598>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	0e9b      	lsrs	r3, r3, #26
 80024c4:	3301      	adds	r3, #1
 80024c6:	f003 021f 	and.w	r2, r3, #31
 80024ca:	4613      	mov	r3, r2
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4413      	add	r3, r2
 80024d0:	051b      	lsls	r3, r3, #20
 80024d2:	e018      	b.n	8002506 <HAL_ADC_ConfigChannel+0x5ca>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024dc:	fa93 f3a3 	rbit	r3, r3
 80024e0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80024e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80024e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80024ec:	2320      	movs	r3, #32
 80024ee:	e003      	b.n	80024f8 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80024f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024f2:	fab3 f383 	clz	r3, r3
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	3301      	adds	r3, #1
 80024fa:	f003 021f 	and.w	r2, r3, #31
 80024fe:	4613      	mov	r3, r2
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	4413      	add	r3, r2
 8002504:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002506:	430b      	orrs	r3, r1
 8002508:	e081      	b.n	800260e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002512:	2b00      	cmp	r3, #0
 8002514:	d107      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x5ea>
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	0e9b      	lsrs	r3, r3, #26
 800251c:	3301      	adds	r3, #1
 800251e:	069b      	lsls	r3, r3, #26
 8002520:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002524:	e015      	b.n	8002552 <HAL_ADC_ConfigChannel+0x616>
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252e:	fa93 f3a3 	rbit	r3, r3
 8002532:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002536:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800253e:	2320      	movs	r3, #32
 8002540:	e003      	b.n	800254a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002544:	fab3 f383 	clz	r3, r3
 8002548:	b2db      	uxtb	r3, r3
 800254a:	3301      	adds	r3, #1
 800254c:	069b      	lsls	r3, r3, #26
 800254e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800255a:	2b00      	cmp	r3, #0
 800255c:	d109      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x636>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	0e9b      	lsrs	r3, r3, #26
 8002564:	3301      	adds	r3, #1
 8002566:	f003 031f 	and.w	r3, r3, #31
 800256a:	2101      	movs	r1, #1
 800256c:	fa01 f303 	lsl.w	r3, r1, r3
 8002570:	e017      	b.n	80025a2 <HAL_ADC_ConfigChannel+0x666>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	fa93 f3a3 	rbit	r3, r3
 800257e:	61fb      	str	r3, [r7, #28]
  return result;
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800258a:	2320      	movs	r3, #32
 800258c:	e003      	b.n	8002596 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	fab3 f383 	clz	r3, r3
 8002594:	b2db      	uxtb	r3, r3
 8002596:	3301      	adds	r3, #1
 8002598:	f003 031f 	and.w	r3, r3, #31
 800259c:	2101      	movs	r1, #1
 800259e:	fa01 f303 	lsl.w	r3, r1, r3
 80025a2:	ea42 0103 	orr.w	r1, r2, r3
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10d      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x692>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	0e9b      	lsrs	r3, r3, #26
 80025b8:	3301      	adds	r3, #1
 80025ba:	f003 021f 	and.w	r2, r3, #31
 80025be:	4613      	mov	r3, r2
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	4413      	add	r3, r2
 80025c4:	3b1e      	subs	r3, #30
 80025c6:	051b      	lsls	r3, r3, #20
 80025c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025cc:	e01e      	b.n	800260c <HAL_ADC_ConfigChannel+0x6d0>
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	fa93 f3a3 	rbit	r3, r3
 80025da:	613b      	str	r3, [r7, #16]
  return result;
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d104      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80025e6:	2320      	movs	r3, #32
 80025e8:	e006      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x6bc>
 80025ea:	bf00      	nop
 80025ec:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	fab3 f383 	clz	r3, r3
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	3301      	adds	r3, #1
 80025fa:	f003 021f 	and.w	r2, r3, #31
 80025fe:	4613      	mov	r3, r2
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	4413      	add	r3, r2
 8002604:	3b1e      	subs	r3, #30
 8002606:	051b      	lsls	r3, r3, #20
 8002608:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800260c:	430b      	orrs	r3, r1
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	6892      	ldr	r2, [r2, #8]
 8002612:	4619      	mov	r1, r3
 8002614:	f7ff f8c7 	bl	80017a6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	4b3d      	ldr	r3, [pc, #244]	; (8002714 <HAL_ADC_ConfigChannel+0x7d8>)
 800261e:	4013      	ands	r3, r2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d06c      	beq.n	80026fe <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002624:	483c      	ldr	r0, [pc, #240]	; (8002718 <HAL_ADC_ConfigChannel+0x7dc>)
 8002626:	f7ff f809 	bl	800163c <LL_ADC_GetCommonPathInternalCh>
 800262a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a3a      	ldr	r2, [pc, #232]	; (800271c <HAL_ADC_ConfigChannel+0x7e0>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d127      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002638:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800263c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d121      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a35      	ldr	r2, [pc, #212]	; (8002720 <HAL_ADC_ConfigChannel+0x7e4>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d157      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800264e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002652:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002656:	4619      	mov	r1, r3
 8002658:	482f      	ldr	r0, [pc, #188]	; (8002718 <HAL_ADC_ConfigChannel+0x7dc>)
 800265a:	f7fe ffdc 	bl	8001616 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800265e:	4b31      	ldr	r3, [pc, #196]	; (8002724 <HAL_ADC_ConfigChannel+0x7e8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	099b      	lsrs	r3, r3, #6
 8002664:	4a30      	ldr	r2, [pc, #192]	; (8002728 <HAL_ADC_ConfigChannel+0x7ec>)
 8002666:	fba2 2303 	umull	r2, r3, r2, r3
 800266a:	099b      	lsrs	r3, r3, #6
 800266c:	1c5a      	adds	r2, r3, #1
 800266e:	4613      	mov	r3, r2
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	4413      	add	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002678:	e002      	b.n	8002680 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	3b01      	subs	r3, #1
 800267e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f9      	bne.n	800267a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002686:	e03a      	b.n	80026fe <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a27      	ldr	r2, [pc, #156]	; (800272c <HAL_ADC_ConfigChannel+0x7f0>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d113      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x77e>
 8002692:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002696:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10d      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a1f      	ldr	r2, [pc, #124]	; (8002720 <HAL_ADC_ConfigChannel+0x7e4>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d12a      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026b0:	4619      	mov	r1, r3
 80026b2:	4819      	ldr	r0, [pc, #100]	; (8002718 <HAL_ADC_ConfigChannel+0x7dc>)
 80026b4:	f7fe ffaf 	bl	8001616 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026b8:	e021      	b.n	80026fe <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a1c      	ldr	r2, [pc, #112]	; (8002730 <HAL_ADC_ConfigChannel+0x7f4>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d11c      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80026c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d116      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a12      	ldr	r2, [pc, #72]	; (8002720 <HAL_ADC_ConfigChannel+0x7e4>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d111      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026e2:	4619      	mov	r1, r3
 80026e4:	480c      	ldr	r0, [pc, #48]	; (8002718 <HAL_ADC_ConfigChannel+0x7dc>)
 80026e6:	f7fe ff96 	bl	8001616 <LL_ADC_SetCommonPathInternalCh>
 80026ea:	e008      	b.n	80026fe <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f0:	f043 0220 	orr.w	r2, r3, #32
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002706:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800270a:	4618      	mov	r0, r3
 800270c:	37d8      	adds	r7, #216	; 0xd8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	80080000 	.word	0x80080000
 8002718:	50040300 	.word	0x50040300
 800271c:	c7520000 	.word	0xc7520000
 8002720:	50040000 	.word	0x50040000
 8002724:	20000000 	.word	0x20000000
 8002728:	053e2d63 	.word	0x053e2d63
 800272c:	cb840000 	.word	0xcb840000
 8002730:	80000001 	.word	0x80000001

08002734 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b088      	sub	sp, #32
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800273e:	2300      	movs	r3, #0
 8002740:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff f93e 	bl	80019cc <LL_ADC_REG_IsConversionOngoing>
 8002750:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff f95f 	bl	8001a1a <LL_ADC_INJ_IsConversionOngoing>
 800275c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d103      	bne.n	800276c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2b00      	cmp	r3, #0
 8002768:	f000 8098 	beq.w	800289c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d02a      	beq.n	80027d0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	7e5b      	ldrb	r3, [r3, #25]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d126      	bne.n	80027d0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	7e1b      	ldrb	r3, [r3, #24]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d122      	bne.n	80027d0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800278a:	2301      	movs	r3, #1
 800278c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800278e:	e014      	b.n	80027ba <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	4a45      	ldr	r2, [pc, #276]	; (80028a8 <ADC_ConversionStop+0x174>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d90d      	bls.n	80027b4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279c:	f043 0210 	orr.w	r2, r3, #16
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a8:	f043 0201 	orr.w	r2, r3, #1
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e074      	b.n	800289e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	3301      	adds	r3, #1
 80027b8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c4:	2b40      	cmp	r3, #64	; 0x40
 80027c6:	d1e3      	bne.n	8002790 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2240      	movs	r2, #64	; 0x40
 80027ce:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d014      	beq.n	8002800 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff f8f6 	bl	80019cc <LL_ADC_REG_IsConversionOngoing>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00c      	beq.n	8002800 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff f8b3 	bl	8001956 <LL_ADC_IsDisableOngoing>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d104      	bne.n	8002800 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff f8d2 	bl	80019a4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d014      	beq.n	8002830 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff f905 	bl	8001a1a <LL_ADC_INJ_IsConversionOngoing>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00c      	beq.n	8002830 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff f89b 	bl	8001956 <LL_ADC_IsDisableOngoing>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d104      	bne.n	8002830 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff f8e1 	bl	80019f2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	2b02      	cmp	r3, #2
 8002834:	d005      	beq.n	8002842 <ADC_ConversionStop+0x10e>
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	2b03      	cmp	r3, #3
 800283a:	d105      	bne.n	8002848 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800283c:	230c      	movs	r3, #12
 800283e:	617b      	str	r3, [r7, #20]
        break;
 8002840:	e005      	b.n	800284e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002842:	2308      	movs	r3, #8
 8002844:	617b      	str	r3, [r7, #20]
        break;
 8002846:	e002      	b.n	800284e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002848:	2304      	movs	r3, #4
 800284a:	617b      	str	r3, [r7, #20]
        break;
 800284c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800284e:	f7fe fe9f 	bl	8001590 <HAL_GetTick>
 8002852:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002854:	e01b      	b.n	800288e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002856:	f7fe fe9b 	bl	8001590 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b05      	cmp	r3, #5
 8002862:	d914      	bls.n	800288e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	4013      	ands	r3, r2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00d      	beq.n	800288e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002876:	f043 0210 	orr.w	r2, r3, #16
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002882:	f043 0201 	orr.w	r2, r3, #1
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e007      	b.n	800289e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	4013      	ands	r3, r2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1dc      	bne.n	8002856 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3720      	adds	r7, #32
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	a33fffff 	.word	0xa33fffff

080028ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff f837 	bl	8001930 <LL_ADC_IsEnabled>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d169      	bne.n	800299c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	4b36      	ldr	r3, [pc, #216]	; (80029a8 <ADC_Enable+0xfc>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00d      	beq.n	80028f2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028da:	f043 0210 	orr.w	r2, r3, #16
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e6:	f043 0201 	orr.w	r2, r3, #1
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e055      	b.n	800299e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fe fff2 	bl	80018e0 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80028fc:	482b      	ldr	r0, [pc, #172]	; (80029ac <ADC_Enable+0x100>)
 80028fe:	f7fe fe9d 	bl	800163c <LL_ADC_GetCommonPathInternalCh>
 8002902:	4603      	mov	r3, r0
 8002904:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d013      	beq.n	8002934 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800290c:	4b28      	ldr	r3, [pc, #160]	; (80029b0 <ADC_Enable+0x104>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	099b      	lsrs	r3, r3, #6
 8002912:	4a28      	ldr	r2, [pc, #160]	; (80029b4 <ADC_Enable+0x108>)
 8002914:	fba2 2303 	umull	r2, r3, r2, r3
 8002918:	099b      	lsrs	r3, r3, #6
 800291a:	1c5a      	adds	r2, r3, #1
 800291c:	4613      	mov	r3, r2
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	4413      	add	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002926:	e002      	b.n	800292e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	3b01      	subs	r3, #1
 800292c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1f9      	bne.n	8002928 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002934:	f7fe fe2c 	bl	8001590 <HAL_GetTick>
 8002938:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800293a:	e028      	b.n	800298e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f7fe fff5 	bl	8001930 <LL_ADC_IsEnabled>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d104      	bne.n	8002956 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f7fe ffc5 	bl	80018e0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002956:	f7fe fe1b 	bl	8001590 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d914      	bls.n	800298e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b01      	cmp	r3, #1
 8002970:	d00d      	beq.n	800298e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002976:	f043 0210 	orr.w	r2, r3, #16
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002982:	f043 0201 	orr.w	r2, r3, #1
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e007      	b.n	800299e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b01      	cmp	r3, #1
 800299a:	d1cf      	bne.n	800293c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	8000003f 	.word	0x8000003f
 80029ac:	50040300 	.word	0x50040300
 80029b0:	20000000 	.word	0x20000000
 80029b4:	053e2d63 	.word	0x053e2d63

080029b8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7fe ffc6 	bl	8001956 <LL_ADC_IsDisableOngoing>
 80029ca:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7fe ffad 	bl	8001930 <LL_ADC_IsEnabled>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d047      	beq.n	8002a6c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d144      	bne.n	8002a6c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 030d 	and.w	r3, r3, #13
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d10c      	bne.n	8002a0a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7fe ff87 	bl	8001908 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2203      	movs	r2, #3
 8002a00:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a02:	f7fe fdc5 	bl	8001590 <HAL_GetTick>
 8002a06:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a08:	e029      	b.n	8002a5e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0e:	f043 0210 	orr.w	r2, r3, #16
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1a:	f043 0201 	orr.w	r2, r3, #1
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e023      	b.n	8002a6e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a26:	f7fe fdb3 	bl	8001590 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d914      	bls.n	8002a5e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00d      	beq.n	8002a5e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a46:	f043 0210 	orr.w	r2, r3, #16
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a52:	f043 0201 	orr.w	r2, r3, #1
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e007      	b.n	8002a6e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1dc      	bne.n	8002a26 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <LL_ADC_StartCalibration>:
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
 8002a7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002a88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002a92:	4313      	orrs	r3, r2
 8002a94:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	609a      	str	r2, [r3, #8]
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <LL_ADC_IsCalibrationOnGoing>:
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ab8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002abc:	d101      	bne.n	8002ac2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002ada:	2300      	movs	r3, #0
 8002adc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d101      	bne.n	8002aec <HAL_ADCEx_Calibration_Start+0x1c>
 8002ae8:	2302      	movs	r3, #2
 8002aea:	e04d      	b.n	8002b88 <HAL_ADCEx_Calibration_Start+0xb8>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f7ff ff5f 	bl	80029b8 <ADC_Disable>
 8002afa:	4603      	mov	r3, r0
 8002afc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002afe:	7bfb      	ldrb	r3, [r7, #15]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d136      	bne.n	8002b72 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b08:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b0c:	f023 0302 	bic.w	r3, r3, #2
 8002b10:	f043 0202 	orr.w	r2, r3, #2
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6839      	ldr	r1, [r7, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff ffa9 	bl	8002a76 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002b24:	e014      	b.n	8002b50 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8002b32:	d30d      	bcc.n	8002b50 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b38:	f023 0312 	bic.w	r3, r3, #18
 8002b3c:	f043 0210 	orr.w	r2, r3, #16
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e01b      	b.n	8002b88 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff ffa7 	bl	8002aa8 <LL_ADC_IsCalibrationOnGoing>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1e2      	bne.n	8002b26 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b64:	f023 0303 	bic.w	r3, r3, #3
 8002b68:	f043 0201 	orr.w	r2, r3, #1
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	659a      	str	r2, [r3, #88]	; 0x58
 8002b70:	e005      	b.n	8002b7e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b76:	f043 0210 	orr.w	r2, r3, #16
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ba0:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bac:	4013      	ands	r3, r2
 8002bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bc2:	4a04      	ldr	r2, [pc, #16]	; (8002bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	60d3      	str	r3, [r2, #12]
}
 8002bc8:	bf00      	nop
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	e000ed00 	.word	0xe000ed00

08002bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bdc:	4b04      	ldr	r3, [pc, #16]	; (8002bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	0a1b      	lsrs	r3, r3, #8
 8002be2:	f003 0307 	and.w	r3, r3, #7
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	e000ed00 	.word	0xe000ed00

08002bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	db0b      	blt.n	8002c1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	f003 021f 	and.w	r2, r3, #31
 8002c0c:	4907      	ldr	r1, [pc, #28]	; (8002c2c <__NVIC_EnableIRQ+0x38>)
 8002c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c12:	095b      	lsrs	r3, r3, #5
 8002c14:	2001      	movs	r0, #1
 8002c16:	fa00 f202 	lsl.w	r2, r0, r2
 8002c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	e000e100 	.word	0xe000e100

08002c30 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	4603      	mov	r3, r0
 8002c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	db12      	blt.n	8002c68 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	f003 021f 	and.w	r2, r3, #31
 8002c48:	490a      	ldr	r1, [pc, #40]	; (8002c74 <__NVIC_DisableIRQ+0x44>)
 8002c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4e:	095b      	lsrs	r3, r3, #5
 8002c50:	2001      	movs	r0, #1
 8002c52:	fa00 f202 	lsl.w	r2, r0, r2
 8002c56:	3320      	adds	r3, #32
 8002c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002c5c:	f3bf 8f4f 	dsb	sy
}
 8002c60:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c62:	f3bf 8f6f 	isb	sy
}
 8002c66:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	e000e100 	.word	0xe000e100

08002c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4603      	mov	r3, r0
 8002c80:	6039      	str	r1, [r7, #0]
 8002c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	db0a      	blt.n	8002ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	490c      	ldr	r1, [pc, #48]	; (8002cc4 <__NVIC_SetPriority+0x4c>)
 8002c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c96:	0112      	lsls	r2, r2, #4
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	440b      	add	r3, r1
 8002c9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ca0:	e00a      	b.n	8002cb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	4908      	ldr	r1, [pc, #32]	; (8002cc8 <__NVIC_SetPriority+0x50>)
 8002ca8:	79fb      	ldrb	r3, [r7, #7]
 8002caa:	f003 030f 	and.w	r3, r3, #15
 8002cae:	3b04      	subs	r3, #4
 8002cb0:	0112      	lsls	r2, r2, #4
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	761a      	strb	r2, [r3, #24]
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	e000e100 	.word	0xe000e100
 8002cc8:	e000ed00 	.word	0xe000ed00

08002ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b089      	sub	sp, #36	; 0x24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f1c3 0307 	rsb	r3, r3, #7
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	bf28      	it	cs
 8002cea:	2304      	movcs	r3, #4
 8002cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	2b06      	cmp	r3, #6
 8002cf4:	d902      	bls.n	8002cfc <NVIC_EncodePriority+0x30>
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	3b03      	subs	r3, #3
 8002cfa:	e000      	b.n	8002cfe <NVIC_EncodePriority+0x32>
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d00:	f04f 32ff 	mov.w	r2, #4294967295
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	43da      	mvns	r2, r3
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	401a      	ands	r2, r3
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d14:	f04f 31ff 	mov.w	r1, #4294967295
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1e:	43d9      	mvns	r1, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d24:	4313      	orrs	r3, r2
         );
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3724      	adds	r7, #36	; 0x24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b082      	sub	sp, #8
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7ff ff28 	bl	8002b90 <__NVIC_SetPriorityGrouping>
}
 8002d40:	bf00      	nop
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
 8002d54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d5a:	f7ff ff3d 	bl	8002bd8 <__NVIC_GetPriorityGrouping>
 8002d5e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	68b9      	ldr	r1, [r7, #8]
 8002d64:	6978      	ldr	r0, [r7, #20]
 8002d66:	f7ff ffb1 	bl	8002ccc <NVIC_EncodePriority>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d70:	4611      	mov	r1, r2
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff ff80 	bl	8002c78 <__NVIC_SetPriority>
}
 8002d78:	bf00      	nop
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff ff30 	bl	8002bf4 <__NVIC_EnableIRQ>
}
 8002d94:	bf00      	nop
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff ff40 	bl	8002c30 <__NVIC_DisableIRQ>
}
 8002db0:	bf00      	nop
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b087      	sub	sp, #28
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dc6:	e154      	b.n	8003072 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	2101      	movs	r1, #1
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 8146 	beq.w	800306c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f003 0303 	and.w	r3, r3, #3
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d005      	beq.n	8002df8 <HAL_GPIO_Init+0x40>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f003 0303 	and.w	r3, r3, #3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d130      	bne.n	8002e5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	2203      	movs	r2, #3
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	68da      	ldr	r2, [r3, #12]
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e2e:	2201      	movs	r2, #1
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	43db      	mvns	r3, r3
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	091b      	lsrs	r3, r3, #4
 8002e44:	f003 0201 	and.w	r2, r3, #1
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f003 0303 	and.w	r3, r3, #3
 8002e62:	2b03      	cmp	r3, #3
 8002e64:	d017      	beq.n	8002e96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	2203      	movs	r2, #3
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43db      	mvns	r3, r3
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	689a      	ldr	r2, [r3, #8]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d123      	bne.n	8002eea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	08da      	lsrs	r2, r3, #3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	3208      	adds	r2, #8
 8002eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	220f      	movs	r2, #15
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	691a      	ldr	r2, [r3, #16]
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	08da      	lsrs	r2, r3, #3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3208      	adds	r2, #8
 8002ee4:	6939      	ldr	r1, [r7, #16]
 8002ee6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	2203      	movs	r2, #3
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	43db      	mvns	r3, r3
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4013      	ands	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f003 0203 	and.w	r2, r3, #3
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f000 80a0 	beq.w	800306c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f2c:	4b58      	ldr	r3, [pc, #352]	; (8003090 <HAL_GPIO_Init+0x2d8>)
 8002f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f30:	4a57      	ldr	r2, [pc, #348]	; (8003090 <HAL_GPIO_Init+0x2d8>)
 8002f32:	f043 0301 	orr.w	r3, r3, #1
 8002f36:	6613      	str	r3, [r2, #96]	; 0x60
 8002f38:	4b55      	ldr	r3, [pc, #340]	; (8003090 <HAL_GPIO_Init+0x2d8>)
 8002f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	60bb      	str	r3, [r7, #8]
 8002f42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f44:	4a53      	ldr	r2, [pc, #332]	; (8003094 <HAL_GPIO_Init+0x2dc>)
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	089b      	lsrs	r3, r3, #2
 8002f4a:	3302      	adds	r3, #2
 8002f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f003 0303 	and.w	r3, r3, #3
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	220f      	movs	r2, #15
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	43db      	mvns	r3, r3
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	4013      	ands	r3, r2
 8002f66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f6e:	d019      	beq.n	8002fa4 <HAL_GPIO_Init+0x1ec>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a49      	ldr	r2, [pc, #292]	; (8003098 <HAL_GPIO_Init+0x2e0>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d013      	beq.n	8002fa0 <HAL_GPIO_Init+0x1e8>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a48      	ldr	r2, [pc, #288]	; (800309c <HAL_GPIO_Init+0x2e4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d00d      	beq.n	8002f9c <HAL_GPIO_Init+0x1e4>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a47      	ldr	r2, [pc, #284]	; (80030a0 <HAL_GPIO_Init+0x2e8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d007      	beq.n	8002f98 <HAL_GPIO_Init+0x1e0>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a46      	ldr	r2, [pc, #280]	; (80030a4 <HAL_GPIO_Init+0x2ec>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d101      	bne.n	8002f94 <HAL_GPIO_Init+0x1dc>
 8002f90:	2304      	movs	r3, #4
 8002f92:	e008      	b.n	8002fa6 <HAL_GPIO_Init+0x1ee>
 8002f94:	2307      	movs	r3, #7
 8002f96:	e006      	b.n	8002fa6 <HAL_GPIO_Init+0x1ee>
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e004      	b.n	8002fa6 <HAL_GPIO_Init+0x1ee>
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	e002      	b.n	8002fa6 <HAL_GPIO_Init+0x1ee>
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e000      	b.n	8002fa6 <HAL_GPIO_Init+0x1ee>
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	f002 0203 	and.w	r2, r2, #3
 8002fac:	0092      	lsls	r2, r2, #2
 8002fae:	4093      	lsls	r3, r2
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fb6:	4937      	ldr	r1, [pc, #220]	; (8003094 <HAL_GPIO_Init+0x2dc>)
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	089b      	lsrs	r3, r3, #2
 8002fbc:	3302      	adds	r3, #2
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fc4:	4b38      	ldr	r3, [pc, #224]	; (80030a8 <HAL_GPIO_Init+0x2f0>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002fe8:	4a2f      	ldr	r2, [pc, #188]	; (80030a8 <HAL_GPIO_Init+0x2f0>)
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002fee:	4b2e      	ldr	r3, [pc, #184]	; (80030a8 <HAL_GPIO_Init+0x2f0>)
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4313      	orrs	r3, r2
 8003010:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003012:	4a25      	ldr	r2, [pc, #148]	; (80030a8 <HAL_GPIO_Init+0x2f0>)
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003018:	4b23      	ldr	r3, [pc, #140]	; (80030a8 <HAL_GPIO_Init+0x2f0>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	43db      	mvns	r3, r3
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	4013      	ands	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d003      	beq.n	800303c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	4313      	orrs	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800303c:	4a1a      	ldr	r2, [pc, #104]	; (80030a8 <HAL_GPIO_Init+0x2f0>)
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003042:	4b19      	ldr	r3, [pc, #100]	; (80030a8 <HAL_GPIO_Init+0x2f0>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	43db      	mvns	r3, r3
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	4013      	ands	r3, r2
 8003050:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4313      	orrs	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003066:	4a10      	ldr	r2, [pc, #64]	; (80030a8 <HAL_GPIO_Init+0x2f0>)
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	3301      	adds	r3, #1
 8003070:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	fa22 f303 	lsr.w	r3, r2, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	f47f aea3 	bne.w	8002dc8 <HAL_GPIO_Init+0x10>
  }
}
 8003082:	bf00      	nop
 8003084:	bf00      	nop
 8003086:	371c      	adds	r7, #28
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	40021000 	.word	0x40021000
 8003094:	40010000 	.word	0x40010000
 8003098:	48000400 	.word	0x48000400
 800309c:	48000800 	.word	0x48000800
 80030a0:	48000c00 	.word	0x48000c00
 80030a4:	48001000 	.word	0x48001000
 80030a8:	40010400 	.word	0x40010400

080030ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	460b      	mov	r3, r1
 80030b6:	807b      	strh	r3, [r7, #2]
 80030b8:	4613      	mov	r3, r2
 80030ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030bc:	787b      	ldrb	r3, [r7, #1]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030c2:	887a      	ldrh	r2, [r7, #2]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030c8:	e002      	b.n	80030d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030ca:	887a      	ldrh	r2, [r7, #2]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	4603      	mov	r3, r0
 80030e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80030e6:	4b08      	ldr	r3, [pc, #32]	; (8003108 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030e8:	695a      	ldr	r2, [r3, #20]
 80030ea:	88fb      	ldrh	r3, [r7, #6]
 80030ec:	4013      	ands	r3, r2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d006      	beq.n	8003100 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030f2:	4a05      	ldr	r2, [pc, #20]	; (8003108 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030f4:	88fb      	ldrh	r3, [r7, #6]
 80030f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030f8:	88fb      	ldrh	r3, [r7, #6]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f007 fd36 	bl	800ab6c <HAL_GPIO_EXTI_Callback>
  }
}
 8003100:	bf00      	nop
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40010400 	.word	0x40010400

0800310c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e08f      	b.n	800323e <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	d106      	bne.n	800313e <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7fd ffa9 	bl	8001090 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2202      	movs	r2, #2
 8003142:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d004      	beq.n	8003160 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800315e:	d103      	bne.n	8003168 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f023 031e 	bic.w	r3, r3, #30
 8003166:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003170:	4293      	cmp	r3, r2
 8003172:	d005      	beq.n	8003180 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800317a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800317e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	4b31      	ldr	r3, [pc, #196]	; (8003248 <HAL_LPTIM_Init+0x13c>)
 8003184:	4013      	ands	r3, r2
 8003186:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003190:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8003196:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 800319c:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80031a2:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d107      	bne.n	80031c2 <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80031ba:	4313      	orrs	r3, r2
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	4313      	orrs	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d004      	beq.n	80031d4 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031d2:	d107      	bne.n	80031e4 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80031dc:	4313      	orrs	r3, r2
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d00a      	beq.n	8003206 <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80031f8:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80031fe:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	4313      	orrs	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a0e      	ldr	r2, [pc, #56]	; (800324c <HAL_LPTIM_Init+0x140>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d108      	bne.n	800322a <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	621a      	str	r2, [r3, #32]
 8003228:	e004      	b.n	8003234 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003232:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	ff19f1fe 	.word	0xff19f1fe
 800324c:	40007c00 	.word	0x40007c00

08003250 <HAL_LPTIM_Counter_Start>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2202      	movs	r2, #2
 800325e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d00c      	beq.n	8003284 <HAL_LPTIM_Counter_Start+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003272:	d107      	bne.n	8003284 <HAL_LPTIM_Counter_Start+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 8003282:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	691a      	ldr	r2, [r3, #16]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0201 	orr.w	r2, r2, #1
 8003292:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2210      	movs	r2, #16
 800329a:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80032a4:	2110      	movs	r1, #16
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f816 	bl	80032d8 <LPTIM_WaitForFlag>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b03      	cmp	r3, #3
 80032b0:	d101      	bne.n	80032b6 <HAL_LPTIM_Counter_Start+0x66>
  {
    return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e00c      	b.n	80032d0 <HAL_LPTIM_Counter_Start+0x80>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	691a      	ldr	r2, [r3, #16]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f042 0204 	orr.w	r2, r2, #4
 80032c4:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 80032e2:	2300      	movs	r3, #0
 80032e4:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80032e6:	4b12      	ldr	r3, [pc, #72]	; (8003330 <LPTIM_WaitForFlag+0x58>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a12      	ldr	r2, [pc, #72]	; (8003334 <LPTIM_WaitForFlag+0x5c>)
 80032ec:	fba2 2303 	umull	r2, r3, r2, r3
 80032f0:	0b9b      	lsrs	r3, r3, #14
 80032f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032f6:	fb02 f303 	mul.w	r3, r2, r3
 80032fa:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	3b01      	subs	r3, #1
 8003300:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d101      	bne.n	800330c <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	4013      	ands	r3, r2
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	429a      	cmp	r2, r3
 800331a:	d002      	beq.n	8003322 <LPTIM_WaitForFlag+0x4a>
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1ec      	bne.n	80032fc <LPTIM_WaitForFlag+0x24>

  return result;
 8003322:	7bfb      	ldrb	r3, [r7, #15]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	20000000 	.word	0x20000000
 8003334:	d1b71759 	.word	0xd1b71759

08003338 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800333c:	4b05      	ldr	r3, [pc, #20]	; (8003354 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a04      	ldr	r2, [pc, #16]	; (8003354 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003346:	6013      	str	r3, [r2, #0]
}
 8003348:	bf00      	nop
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	40007000 	.word	0x40007000

08003358 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800335c:	4b04      	ldr	r3, [pc, #16]	; (8003370 <HAL_PWREx_GetVoltageRange+0x18>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003364:	4618      	mov	r0, r3
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	40007000 	.word	0x40007000

08003374 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003382:	d130      	bne.n	80033e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003384:	4b23      	ldr	r3, [pc, #140]	; (8003414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800338c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003390:	d038      	beq.n	8003404 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003392:	4b20      	ldr	r3, [pc, #128]	; (8003414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800339a:	4a1e      	ldr	r2, [pc, #120]	; (8003414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800339c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033a2:	4b1d      	ldr	r3, [pc, #116]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2232      	movs	r2, #50	; 0x32
 80033a8:	fb02 f303 	mul.w	r3, r2, r3
 80033ac:	4a1b      	ldr	r2, [pc, #108]	; (800341c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80033ae:	fba2 2303 	umull	r2, r3, r2, r3
 80033b2:	0c9b      	lsrs	r3, r3, #18
 80033b4:	3301      	adds	r3, #1
 80033b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033b8:	e002      	b.n	80033c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	3b01      	subs	r3, #1
 80033be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033c0:	4b14      	ldr	r3, [pc, #80]	; (8003414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033cc:	d102      	bne.n	80033d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1f2      	bne.n	80033ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033d4:	4b0f      	ldr	r3, [pc, #60]	; (8003414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033e0:	d110      	bne.n	8003404 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e00f      	b.n	8003406 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80033e6:	4b0b      	ldr	r3, [pc, #44]	; (8003414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033f2:	d007      	beq.n	8003404 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033f4:	4b07      	ldr	r3, [pc, #28]	; (8003414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033fc:	4a05      	ldr	r2, [pc, #20]	; (8003414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003402:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	40007000 	.word	0x40007000
 8003418:	20000000 	.word	0x20000000
 800341c:	431bde83 	.word	0x431bde83

08003420 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 800342a:	4b11      	ldr	r3, [pc, #68]	; (8003470 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f023 0307 	bic.w	r3, r3, #7
 8003432:	4a0f      	ldr	r2, [pc, #60]	; (8003470 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8003434:	f043 0301 	orr.w	r3, r3, #1
 8003438:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800343a:	4b0e      	ldr	r3, [pc, #56]	; (8003474 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	4a0d      	ldr	r2, [pc, #52]	; (8003474 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8003440:	f043 0304 	orr.w	r3, r3, #4
 8003444:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003446:	79fb      	ldrb	r3, [r7, #7]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d101      	bne.n	8003450 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800344c:	bf30      	wfi
 800344e:	e002      	b.n	8003456 <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003450:	bf40      	sev
    __WFE();
 8003452:	bf20      	wfe
    __WFE();
 8003454:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003456:	4b07      	ldr	r3, [pc, #28]	; (8003474 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	4a06      	ldr	r2, [pc, #24]	; (8003474 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 800345c:	f023 0304 	bic.w	r3, r3, #4
 8003460:	6113      	str	r3, [r2, #16]
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	40007000 	.word	0x40007000
 8003474:	e000ed00 	.word	0xe000ed00

08003478 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b088      	sub	sp, #32
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d102      	bne.n	800348c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	f000 bc02 	b.w	8003c90 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800348c:	4b96      	ldr	r3, [pc, #600]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f003 030c 	and.w	r3, r3, #12
 8003494:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003496:	4b94      	ldr	r3, [pc, #592]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0310 	and.w	r3, r3, #16
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 80e4 	beq.w	8003676 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d007      	beq.n	80034c4 <HAL_RCC_OscConfig+0x4c>
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	2b0c      	cmp	r3, #12
 80034b8:	f040 808b 	bne.w	80035d2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	f040 8087 	bne.w	80035d2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034c4:	4b88      	ldr	r3, [pc, #544]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <HAL_RCC_OscConfig+0x64>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e3d9      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a1a      	ldr	r2, [r3, #32]
 80034e0:	4b81      	ldr	r3, [pc, #516]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0308 	and.w	r3, r3, #8
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d004      	beq.n	80034f6 <HAL_RCC_OscConfig+0x7e>
 80034ec:	4b7e      	ldr	r3, [pc, #504]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034f4:	e005      	b.n	8003502 <HAL_RCC_OscConfig+0x8a>
 80034f6:	4b7c      	ldr	r3, [pc, #496]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 80034f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034fc:	091b      	lsrs	r3, r3, #4
 80034fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003502:	4293      	cmp	r3, r2
 8003504:	d223      	bcs.n	800354e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	4618      	mov	r0, r3
 800350c:	f000 fdbe 	bl	800408c <RCC_SetFlashLatencyFromMSIRange>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e3ba      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800351a:	4b73      	ldr	r3, [pc, #460]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a72      	ldr	r2, [pc, #456]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 8003520:	f043 0308 	orr.w	r3, r3, #8
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	4b70      	ldr	r3, [pc, #448]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	496d      	ldr	r1, [pc, #436]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 8003534:	4313      	orrs	r3, r2
 8003536:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003538:	4b6b      	ldr	r3, [pc, #428]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	69db      	ldr	r3, [r3, #28]
 8003544:	021b      	lsls	r3, r3, #8
 8003546:	4968      	ldr	r1, [pc, #416]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 8003548:	4313      	orrs	r3, r2
 800354a:	604b      	str	r3, [r1, #4]
 800354c:	e025      	b.n	800359a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800354e:	4b66      	ldr	r3, [pc, #408]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a65      	ldr	r2, [pc, #404]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 8003554:	f043 0308 	orr.w	r3, r3, #8
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	4b63      	ldr	r3, [pc, #396]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	4960      	ldr	r1, [pc, #384]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 8003568:	4313      	orrs	r3, r2
 800356a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800356c:	4b5e      	ldr	r3, [pc, #376]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	69db      	ldr	r3, [r3, #28]
 8003578:	021b      	lsls	r3, r3, #8
 800357a:	495b      	ldr	r1, [pc, #364]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 800357c:	4313      	orrs	r3, r2
 800357e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d109      	bne.n	800359a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	4618      	mov	r0, r3
 800358c:	f000 fd7e 	bl	800408c <RCC_SetFlashLatencyFromMSIRange>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e37a      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800359a:	f000 fc81 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 800359e:	4602      	mov	r2, r0
 80035a0:	4b51      	ldr	r3, [pc, #324]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	091b      	lsrs	r3, r3, #4
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	4950      	ldr	r1, [pc, #320]	; (80036ec <HAL_RCC_OscConfig+0x274>)
 80035ac:	5ccb      	ldrb	r3, [r1, r3]
 80035ae:	f003 031f 	and.w	r3, r3, #31
 80035b2:	fa22 f303 	lsr.w	r3, r2, r3
 80035b6:	4a4e      	ldr	r2, [pc, #312]	; (80036f0 <HAL_RCC_OscConfig+0x278>)
 80035b8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80035ba:	4b4e      	ldr	r3, [pc, #312]	; (80036f4 <HAL_RCC_OscConfig+0x27c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fd fe90 	bl	80012e4 <HAL_InitTick>
 80035c4:	4603      	mov	r3, r0
 80035c6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d052      	beq.n	8003674 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80035ce:	7bfb      	ldrb	r3, [r7, #15]
 80035d0:	e35e      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d032      	beq.n	8003640 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80035da:	4b43      	ldr	r3, [pc, #268]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a42      	ldr	r2, [pc, #264]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 80035e0:	f043 0301 	orr.w	r3, r3, #1
 80035e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035e6:	f7fd ffd3 	bl	8001590 <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035ec:	e008      	b.n	8003600 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035ee:	f7fd ffcf 	bl	8001590 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e347      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003600:	4b39      	ldr	r3, [pc, #228]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0f0      	beq.n	80035ee <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800360c:	4b36      	ldr	r3, [pc, #216]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a35      	ldr	r2, [pc, #212]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 8003612:	f043 0308 	orr.w	r3, r3, #8
 8003616:	6013      	str	r3, [r2, #0]
 8003618:	4b33      	ldr	r3, [pc, #204]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	4930      	ldr	r1, [pc, #192]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 8003626:	4313      	orrs	r3, r2
 8003628:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800362a:	4b2f      	ldr	r3, [pc, #188]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	021b      	lsls	r3, r3, #8
 8003638:	492b      	ldr	r1, [pc, #172]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 800363a:	4313      	orrs	r3, r2
 800363c:	604b      	str	r3, [r1, #4]
 800363e:	e01a      	b.n	8003676 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003640:	4b29      	ldr	r3, [pc, #164]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a28      	ldr	r2, [pc, #160]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 8003646:	f023 0301 	bic.w	r3, r3, #1
 800364a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800364c:	f7fd ffa0 	bl	8001590 <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003654:	f7fd ff9c 	bl	8001590 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e314      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003666:	4b20      	ldr	r3, [pc, #128]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1f0      	bne.n	8003654 <HAL_RCC_OscConfig+0x1dc>
 8003672:	e000      	b.n	8003676 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003674:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d073      	beq.n	800376a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	2b08      	cmp	r3, #8
 8003686:	d005      	beq.n	8003694 <HAL_RCC_OscConfig+0x21c>
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	2b0c      	cmp	r3, #12
 800368c:	d10e      	bne.n	80036ac <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2b03      	cmp	r3, #3
 8003692:	d10b      	bne.n	80036ac <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003694:	4b14      	ldr	r3, [pc, #80]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d063      	beq.n	8003768 <HAL_RCC_OscConfig+0x2f0>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d15f      	bne.n	8003768 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e2f1      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b4:	d106      	bne.n	80036c4 <HAL_RCC_OscConfig+0x24c>
 80036b6:	4b0c      	ldr	r3, [pc, #48]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a0b      	ldr	r2, [pc, #44]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 80036bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	e025      	b.n	8003710 <HAL_RCC_OscConfig+0x298>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036cc:	d114      	bne.n	80036f8 <HAL_RCC_OscConfig+0x280>
 80036ce:	4b06      	ldr	r3, [pc, #24]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a05      	ldr	r2, [pc, #20]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 80036d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	4b03      	ldr	r3, [pc, #12]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a02      	ldr	r2, [pc, #8]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 80036e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e4:	6013      	str	r3, [r2, #0]
 80036e6:	e013      	b.n	8003710 <HAL_RCC_OscConfig+0x298>
 80036e8:	40021000 	.word	0x40021000
 80036ec:	08010730 	.word	0x08010730
 80036f0:	20000000 	.word	0x20000000
 80036f4:	20000004 	.word	0x20000004
 80036f8:	4ba0      	ldr	r3, [pc, #640]	; (800397c <HAL_RCC_OscConfig+0x504>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a9f      	ldr	r2, [pc, #636]	; (800397c <HAL_RCC_OscConfig+0x504>)
 80036fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003702:	6013      	str	r3, [r2, #0]
 8003704:	4b9d      	ldr	r3, [pc, #628]	; (800397c <HAL_RCC_OscConfig+0x504>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a9c      	ldr	r2, [pc, #624]	; (800397c <HAL_RCC_OscConfig+0x504>)
 800370a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800370e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d013      	beq.n	8003740 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003718:	f7fd ff3a 	bl	8001590 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003720:	f7fd ff36 	bl	8001590 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b64      	cmp	r3, #100	; 0x64
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e2ae      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003732:	4b92      	ldr	r3, [pc, #584]	; (800397c <HAL_RCC_OscConfig+0x504>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0f0      	beq.n	8003720 <HAL_RCC_OscConfig+0x2a8>
 800373e:	e014      	b.n	800376a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003740:	f7fd ff26 	bl	8001590 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003748:	f7fd ff22 	bl	8001590 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b64      	cmp	r3, #100	; 0x64
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e29a      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800375a:	4b88      	ldr	r3, [pc, #544]	; (800397c <HAL_RCC_OscConfig+0x504>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f0      	bne.n	8003748 <HAL_RCC_OscConfig+0x2d0>
 8003766:	e000      	b.n	800376a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d060      	beq.n	8003838 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	2b04      	cmp	r3, #4
 800377a:	d005      	beq.n	8003788 <HAL_RCC_OscConfig+0x310>
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	2b0c      	cmp	r3, #12
 8003780:	d119      	bne.n	80037b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	2b02      	cmp	r3, #2
 8003786:	d116      	bne.n	80037b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003788:	4b7c      	ldr	r3, [pc, #496]	; (800397c <HAL_RCC_OscConfig+0x504>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <HAL_RCC_OscConfig+0x328>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d101      	bne.n	80037a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e277      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a0:	4b76      	ldr	r3, [pc, #472]	; (800397c <HAL_RCC_OscConfig+0x504>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	061b      	lsls	r3, r3, #24
 80037ae:	4973      	ldr	r1, [pc, #460]	; (800397c <HAL_RCC_OscConfig+0x504>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037b4:	e040      	b.n	8003838 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d023      	beq.n	8003806 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037be:	4b6f      	ldr	r3, [pc, #444]	; (800397c <HAL_RCC_OscConfig+0x504>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a6e      	ldr	r2, [pc, #440]	; (800397c <HAL_RCC_OscConfig+0x504>)
 80037c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ca:	f7fd fee1 	bl	8001590 <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037d2:	f7fd fedd 	bl	8001590 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e255      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037e4:	4b65      	ldr	r3, [pc, #404]	; (800397c <HAL_RCC_OscConfig+0x504>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0f0      	beq.n	80037d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f0:	4b62      	ldr	r3, [pc, #392]	; (800397c <HAL_RCC_OscConfig+0x504>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	061b      	lsls	r3, r3, #24
 80037fe:	495f      	ldr	r1, [pc, #380]	; (800397c <HAL_RCC_OscConfig+0x504>)
 8003800:	4313      	orrs	r3, r2
 8003802:	604b      	str	r3, [r1, #4]
 8003804:	e018      	b.n	8003838 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003806:	4b5d      	ldr	r3, [pc, #372]	; (800397c <HAL_RCC_OscConfig+0x504>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a5c      	ldr	r2, [pc, #368]	; (800397c <HAL_RCC_OscConfig+0x504>)
 800380c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003812:	f7fd febd 	bl	8001590 <HAL_GetTick>
 8003816:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003818:	e008      	b.n	800382c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800381a:	f7fd feb9 	bl	8001590 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e231      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800382c:	4b53      	ldr	r3, [pc, #332]	; (800397c <HAL_RCC_OscConfig+0x504>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1f0      	bne.n	800381a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0308 	and.w	r3, r3, #8
 8003840:	2b00      	cmp	r3, #0
 8003842:	d03c      	beq.n	80038be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d01c      	beq.n	8003886 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800384c:	4b4b      	ldr	r3, [pc, #300]	; (800397c <HAL_RCC_OscConfig+0x504>)
 800384e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003852:	4a4a      	ldr	r2, [pc, #296]	; (800397c <HAL_RCC_OscConfig+0x504>)
 8003854:	f043 0301 	orr.w	r3, r3, #1
 8003858:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385c:	f7fd fe98 	bl	8001590 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003864:	f7fd fe94 	bl	8001590 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e20c      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003876:	4b41      	ldr	r3, [pc, #260]	; (800397c <HAL_RCC_OscConfig+0x504>)
 8003878:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0ef      	beq.n	8003864 <HAL_RCC_OscConfig+0x3ec>
 8003884:	e01b      	b.n	80038be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003886:	4b3d      	ldr	r3, [pc, #244]	; (800397c <HAL_RCC_OscConfig+0x504>)
 8003888:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800388c:	4a3b      	ldr	r2, [pc, #236]	; (800397c <HAL_RCC_OscConfig+0x504>)
 800388e:	f023 0301 	bic.w	r3, r3, #1
 8003892:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003896:	f7fd fe7b 	bl	8001590 <HAL_GetTick>
 800389a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800389c:	e008      	b.n	80038b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800389e:	f7fd fe77 	bl	8001590 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e1ef      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038b0:	4b32      	ldr	r3, [pc, #200]	; (800397c <HAL_RCC_OscConfig+0x504>)
 80038b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1ef      	bne.n	800389e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0304 	and.w	r3, r3, #4
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 80a6 	beq.w	8003a18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038cc:	2300      	movs	r3, #0
 80038ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80038d0:	4b2a      	ldr	r3, [pc, #168]	; (800397c <HAL_RCC_OscConfig+0x504>)
 80038d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10d      	bne.n	80038f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038dc:	4b27      	ldr	r3, [pc, #156]	; (800397c <HAL_RCC_OscConfig+0x504>)
 80038de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e0:	4a26      	ldr	r2, [pc, #152]	; (800397c <HAL_RCC_OscConfig+0x504>)
 80038e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e6:	6593      	str	r3, [r2, #88]	; 0x58
 80038e8:	4b24      	ldr	r3, [pc, #144]	; (800397c <HAL_RCC_OscConfig+0x504>)
 80038ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f0:	60bb      	str	r3, [r7, #8]
 80038f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038f4:	2301      	movs	r3, #1
 80038f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038f8:	4b21      	ldr	r3, [pc, #132]	; (8003980 <HAL_RCC_OscConfig+0x508>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003900:	2b00      	cmp	r3, #0
 8003902:	d118      	bne.n	8003936 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003904:	4b1e      	ldr	r3, [pc, #120]	; (8003980 <HAL_RCC_OscConfig+0x508>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a1d      	ldr	r2, [pc, #116]	; (8003980 <HAL_RCC_OscConfig+0x508>)
 800390a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800390e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003910:	f7fd fe3e 	bl	8001590 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003918:	f7fd fe3a 	bl	8001590 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e1b2      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800392a:	4b15      	ldr	r3, [pc, #84]	; (8003980 <HAL_RCC_OscConfig+0x508>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0f0      	beq.n	8003918 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d108      	bne.n	8003950 <HAL_RCC_OscConfig+0x4d8>
 800393e:	4b0f      	ldr	r3, [pc, #60]	; (800397c <HAL_RCC_OscConfig+0x504>)
 8003940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003944:	4a0d      	ldr	r2, [pc, #52]	; (800397c <HAL_RCC_OscConfig+0x504>)
 8003946:	f043 0301 	orr.w	r3, r3, #1
 800394a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800394e:	e029      	b.n	80039a4 <HAL_RCC_OscConfig+0x52c>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	2b05      	cmp	r3, #5
 8003956:	d115      	bne.n	8003984 <HAL_RCC_OscConfig+0x50c>
 8003958:	4b08      	ldr	r3, [pc, #32]	; (800397c <HAL_RCC_OscConfig+0x504>)
 800395a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395e:	4a07      	ldr	r2, [pc, #28]	; (800397c <HAL_RCC_OscConfig+0x504>)
 8003960:	f043 0304 	orr.w	r3, r3, #4
 8003964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003968:	4b04      	ldr	r3, [pc, #16]	; (800397c <HAL_RCC_OscConfig+0x504>)
 800396a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396e:	4a03      	ldr	r2, [pc, #12]	; (800397c <HAL_RCC_OscConfig+0x504>)
 8003970:	f043 0301 	orr.w	r3, r3, #1
 8003974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003978:	e014      	b.n	80039a4 <HAL_RCC_OscConfig+0x52c>
 800397a:	bf00      	nop
 800397c:	40021000 	.word	0x40021000
 8003980:	40007000 	.word	0x40007000
 8003984:	4b9a      	ldr	r3, [pc, #616]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398a:	4a99      	ldr	r2, [pc, #612]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 800398c:	f023 0301 	bic.w	r3, r3, #1
 8003990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003994:	4b96      	ldr	r3, [pc, #600]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399a:	4a95      	ldr	r2, [pc, #596]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 800399c:	f023 0304 	bic.w	r3, r3, #4
 80039a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d016      	beq.n	80039da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ac:	f7fd fdf0 	bl	8001590 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039b2:	e00a      	b.n	80039ca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b4:	f7fd fdec 	bl	8001590 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e162      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039ca:	4b89      	ldr	r3, [pc, #548]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 80039cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0ed      	beq.n	80039b4 <HAL_RCC_OscConfig+0x53c>
 80039d8:	e015      	b.n	8003a06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039da:	f7fd fdd9 	bl	8001590 <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039e0:	e00a      	b.n	80039f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039e2:	f7fd fdd5 	bl	8001590 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d901      	bls.n	80039f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e14b      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039f8:	4b7d      	ldr	r3, [pc, #500]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 80039fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1ed      	bne.n	80039e2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a06:	7ffb      	ldrb	r3, [r7, #31]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d105      	bne.n	8003a18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a0c:	4b78      	ldr	r3, [pc, #480]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a10:	4a77      	ldr	r2, [pc, #476]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003a12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a16:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0320 	and.w	r3, r3, #32
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d03c      	beq.n	8003a9e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d01c      	beq.n	8003a66 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a2c:	4b70      	ldr	r3, [pc, #448]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003a2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a32:	4a6f      	ldr	r2, [pc, #444]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003a34:	f043 0301 	orr.w	r3, r3, #1
 8003a38:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a3c:	f7fd fda8 	bl	8001590 <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a44:	f7fd fda4 	bl	8001590 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e11c      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a56:	4b66      	ldr	r3, [pc, #408]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003a58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0ef      	beq.n	8003a44 <HAL_RCC_OscConfig+0x5cc>
 8003a64:	e01b      	b.n	8003a9e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a66:	4b62      	ldr	r3, [pc, #392]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003a68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a6c:	4a60      	ldr	r2, [pc, #384]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003a6e:	f023 0301 	bic.w	r3, r3, #1
 8003a72:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a76:	f7fd fd8b 	bl	8001590 <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a7c:	e008      	b.n	8003a90 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a7e:	f7fd fd87 	bl	8001590 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e0ff      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a90:	4b57      	ldr	r3, [pc, #348]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003a92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1ef      	bne.n	8003a7e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 80f3 	beq.w	8003c8e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	f040 80c9 	bne.w	8003c44 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ab2:	4b4f      	ldr	r3, [pc, #316]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	f003 0203 	and.w	r2, r3, #3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d12c      	bne.n	8003b20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d123      	bne.n	8003b20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d11b      	bne.n	8003b20 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d113      	bne.n	8003b20 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b02:	085b      	lsrs	r3, r3, #1
 8003b04:	3b01      	subs	r3, #1
 8003b06:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d109      	bne.n	8003b20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	085b      	lsrs	r3, r3, #1
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d06b      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	2b0c      	cmp	r3, #12
 8003b24:	d062      	beq.n	8003bec <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003b26:	4b32      	ldr	r3, [pc, #200]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e0ac      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b36:	4b2e      	ldr	r3, [pc, #184]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a2d      	ldr	r2, [pc, #180]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003b3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b40:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b42:	f7fd fd25 	bl	8001590 <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b48:	e008      	b.n	8003b5c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b4a:	f7fd fd21 	bl	8001590 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e099      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b5c:	4b24      	ldr	r3, [pc, #144]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1f0      	bne.n	8003b4a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b68:	4b21      	ldr	r3, [pc, #132]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003b6a:	68da      	ldr	r2, [r3, #12]
 8003b6c:	4b21      	ldr	r3, [pc, #132]	; (8003bf4 <HAL_RCC_OscConfig+0x77c>)
 8003b6e:	4013      	ands	r3, r2
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b78:	3a01      	subs	r2, #1
 8003b7a:	0112      	lsls	r2, r2, #4
 8003b7c:	4311      	orrs	r1, r2
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b82:	0212      	lsls	r2, r2, #8
 8003b84:	4311      	orrs	r1, r2
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b8a:	0852      	lsrs	r2, r2, #1
 8003b8c:	3a01      	subs	r2, #1
 8003b8e:	0552      	lsls	r2, r2, #21
 8003b90:	4311      	orrs	r1, r2
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b96:	0852      	lsrs	r2, r2, #1
 8003b98:	3a01      	subs	r2, #1
 8003b9a:	0652      	lsls	r2, r2, #25
 8003b9c:	4311      	orrs	r1, r2
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ba2:	06d2      	lsls	r2, r2, #27
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	4912      	ldr	r1, [pc, #72]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003bac:	4b10      	ldr	r3, [pc, #64]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a0f      	ldr	r2, [pc, #60]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003bb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bb6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bb8:	4b0d      	ldr	r3, [pc, #52]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	4a0c      	ldr	r2, [pc, #48]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003bbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bc2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003bc4:	f7fd fce4 	bl	8001590 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bcc:	f7fd fce0 	bl	8001590 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e058      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bde:	4b04      	ldr	r3, [pc, #16]	; (8003bf0 <HAL_RCC_OscConfig+0x778>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0f0      	beq.n	8003bcc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bea:	e050      	b.n	8003c8e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e04f      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bf8:	4b27      	ldr	r3, [pc, #156]	; (8003c98 <HAL_RCC_OscConfig+0x820>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d144      	bne.n	8003c8e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c04:	4b24      	ldr	r3, [pc, #144]	; (8003c98 <HAL_RCC_OscConfig+0x820>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a23      	ldr	r2, [pc, #140]	; (8003c98 <HAL_RCC_OscConfig+0x820>)
 8003c0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c0e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c10:	4b21      	ldr	r3, [pc, #132]	; (8003c98 <HAL_RCC_OscConfig+0x820>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	4a20      	ldr	r2, [pc, #128]	; (8003c98 <HAL_RCC_OscConfig+0x820>)
 8003c16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c1a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c1c:	f7fd fcb8 	bl	8001590 <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c24:	f7fd fcb4 	bl	8001590 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e02c      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c36:	4b18      	ldr	r3, [pc, #96]	; (8003c98 <HAL_RCC_OscConfig+0x820>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d0f0      	beq.n	8003c24 <HAL_RCC_OscConfig+0x7ac>
 8003c42:	e024      	b.n	8003c8e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	2b0c      	cmp	r3, #12
 8003c48:	d01f      	beq.n	8003c8a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c4a:	4b13      	ldr	r3, [pc, #76]	; (8003c98 <HAL_RCC_OscConfig+0x820>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a12      	ldr	r2, [pc, #72]	; (8003c98 <HAL_RCC_OscConfig+0x820>)
 8003c50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c56:	f7fd fc9b 	bl	8001590 <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c5c:	e008      	b.n	8003c70 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c5e:	f7fd fc97 	bl	8001590 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e00f      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c70:	4b09      	ldr	r3, [pc, #36]	; (8003c98 <HAL_RCC_OscConfig+0x820>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1f0      	bne.n	8003c5e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003c7c:	4b06      	ldr	r3, [pc, #24]	; (8003c98 <HAL_RCC_OscConfig+0x820>)
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	4905      	ldr	r1, [pc, #20]	; (8003c98 <HAL_RCC_OscConfig+0x820>)
 8003c82:	4b06      	ldr	r3, [pc, #24]	; (8003c9c <HAL_RCC_OscConfig+0x824>)
 8003c84:	4013      	ands	r3, r2
 8003c86:	60cb      	str	r3, [r1, #12]
 8003c88:	e001      	b.n	8003c8e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3720      	adds	r7, #32
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	feeefffc 	.word	0xfeeefffc

08003ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e0e7      	b.n	8003e84 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cb4:	4b75      	ldr	r3, [pc, #468]	; (8003e8c <HAL_RCC_ClockConfig+0x1ec>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d910      	bls.n	8003ce4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc2:	4b72      	ldr	r3, [pc, #456]	; (8003e8c <HAL_RCC_ClockConfig+0x1ec>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f023 0207 	bic.w	r2, r3, #7
 8003cca:	4970      	ldr	r1, [pc, #448]	; (8003e8c <HAL_RCC_ClockConfig+0x1ec>)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd2:	4b6e      	ldr	r3, [pc, #440]	; (8003e8c <HAL_RCC_ClockConfig+0x1ec>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d001      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e0cf      	b.n	8003e84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d010      	beq.n	8003d12 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	4b66      	ldr	r3, [pc, #408]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d908      	bls.n	8003d12 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d00:	4b63      	ldr	r3, [pc, #396]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	4960      	ldr	r1, [pc, #384]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d04c      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2b03      	cmp	r3, #3
 8003d24:	d107      	bne.n	8003d36 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d26:	4b5a      	ldr	r3, [pc, #360]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d121      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e0a6      	b.n	8003e84 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d107      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d3e:	4b54      	ldr	r3, [pc, #336]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d115      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e09a      	b.n	8003e84 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d107      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d56:	4b4e      	ldr	r3, [pc, #312]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d109      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e08e      	b.n	8003e84 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d66:	4b4a      	ldr	r3, [pc, #296]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e086      	b.n	8003e84 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d76:	4b46      	ldr	r3, [pc, #280]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f023 0203 	bic.w	r2, r3, #3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	4943      	ldr	r1, [pc, #268]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d88:	f7fd fc02 	bl	8001590 <HAL_GetTick>
 8003d8c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8e:	e00a      	b.n	8003da6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d90:	f7fd fbfe 	bl	8001590 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e06e      	b.n	8003e84 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003da6:	4b3a      	ldr	r3, [pc, #232]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 020c 	and.w	r2, r3, #12
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d1eb      	bne.n	8003d90 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d010      	beq.n	8003de6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	4b31      	ldr	r3, [pc, #196]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d208      	bcs.n	8003de6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dd4:	4b2e      	ldr	r3, [pc, #184]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	492b      	ldr	r1, [pc, #172]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003de6:	4b29      	ldr	r3, [pc, #164]	; (8003e8c <HAL_RCC_ClockConfig+0x1ec>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d210      	bcs.n	8003e16 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df4:	4b25      	ldr	r3, [pc, #148]	; (8003e8c <HAL_RCC_ClockConfig+0x1ec>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f023 0207 	bic.w	r2, r3, #7
 8003dfc:	4923      	ldr	r1, [pc, #140]	; (8003e8c <HAL_RCC_ClockConfig+0x1ec>)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e04:	4b21      	ldr	r3, [pc, #132]	; (8003e8c <HAL_RCC_ClockConfig+0x1ec>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d001      	beq.n	8003e16 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e036      	b.n	8003e84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0304 	and.w	r3, r3, #4
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d008      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e22:	4b1b      	ldr	r3, [pc, #108]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	4918      	ldr	r1, [pc, #96]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0308 	and.w	r3, r3, #8
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d009      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e40:	4b13      	ldr	r3, [pc, #76]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	4910      	ldr	r1, [pc, #64]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e54:	f000 f824 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	4b0d      	ldr	r3, [pc, #52]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	091b      	lsrs	r3, r3, #4
 8003e60:	f003 030f 	and.w	r3, r3, #15
 8003e64:	490b      	ldr	r1, [pc, #44]	; (8003e94 <HAL_RCC_ClockConfig+0x1f4>)
 8003e66:	5ccb      	ldrb	r3, [r1, r3]
 8003e68:	f003 031f 	and.w	r3, r3, #31
 8003e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e70:	4a09      	ldr	r2, [pc, #36]	; (8003e98 <HAL_RCC_ClockConfig+0x1f8>)
 8003e72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e74:	4b09      	ldr	r3, [pc, #36]	; (8003e9c <HAL_RCC_ClockConfig+0x1fc>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7fd fa33 	bl	80012e4 <HAL_InitTick>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e82:	7afb      	ldrb	r3, [r7, #11]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40022000 	.word	0x40022000
 8003e90:	40021000 	.word	0x40021000
 8003e94:	08010730 	.word	0x08010730
 8003e98:	20000000 	.word	0x20000000
 8003e9c:	20000004 	.word	0x20000004

08003ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b089      	sub	sp, #36	; 0x24
 8003ea4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	61fb      	str	r3, [r7, #28]
 8003eaa:	2300      	movs	r3, #0
 8003eac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eae:	4b3e      	ldr	r3, [pc, #248]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 030c 	and.w	r3, r3, #12
 8003eb6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003eb8:	4b3b      	ldr	r3, [pc, #236]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f003 0303 	and.w	r3, r3, #3
 8003ec0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d005      	beq.n	8003ed4 <HAL_RCC_GetSysClockFreq+0x34>
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	2b0c      	cmp	r3, #12
 8003ecc:	d121      	bne.n	8003f12 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d11e      	bne.n	8003f12 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ed4:	4b34      	ldr	r3, [pc, #208]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0308 	and.w	r3, r3, #8
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d107      	bne.n	8003ef0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ee0:	4b31      	ldr	r3, [pc, #196]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ee6:	0a1b      	lsrs	r3, r3, #8
 8003ee8:	f003 030f 	and.w	r3, r3, #15
 8003eec:	61fb      	str	r3, [r7, #28]
 8003eee:	e005      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ef0:	4b2d      	ldr	r3, [pc, #180]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	091b      	lsrs	r3, r3, #4
 8003ef6:	f003 030f 	and.w	r3, r3, #15
 8003efa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003efc:	4a2b      	ldr	r2, [pc, #172]	; (8003fac <HAL_RCC_GetSysClockFreq+0x10c>)
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f04:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10d      	bne.n	8003f28 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f10:	e00a      	b.n	8003f28 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	2b04      	cmp	r3, #4
 8003f16:	d102      	bne.n	8003f1e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f18:	4b25      	ldr	r3, [pc, #148]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f1a:	61bb      	str	r3, [r7, #24]
 8003f1c:	e004      	b.n	8003f28 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	d101      	bne.n	8003f28 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f24:	4b23      	ldr	r3, [pc, #140]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f26:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	2b0c      	cmp	r3, #12
 8003f2c:	d134      	bne.n	8003f98 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f2e:	4b1e      	ldr	r3, [pc, #120]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	f003 0303 	and.w	r3, r3, #3
 8003f36:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d003      	beq.n	8003f46 <HAL_RCC_GetSysClockFreq+0xa6>
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	2b03      	cmp	r3, #3
 8003f42:	d003      	beq.n	8003f4c <HAL_RCC_GetSysClockFreq+0xac>
 8003f44:	e005      	b.n	8003f52 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f46:	4b1a      	ldr	r3, [pc, #104]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f48:	617b      	str	r3, [r7, #20]
      break;
 8003f4a:	e005      	b.n	8003f58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f4c:	4b19      	ldr	r3, [pc, #100]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f4e:	617b      	str	r3, [r7, #20]
      break;
 8003f50:	e002      	b.n	8003f58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	617b      	str	r3, [r7, #20]
      break;
 8003f56:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f58:	4b13      	ldr	r3, [pc, #76]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	091b      	lsrs	r3, r3, #4
 8003f5e:	f003 0307 	and.w	r3, r3, #7
 8003f62:	3301      	adds	r3, #1
 8003f64:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f66:	4b10      	ldr	r3, [pc, #64]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	0a1b      	lsrs	r3, r3, #8
 8003f6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	fb03 f202 	mul.w	r2, r3, r2
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f7c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f7e:	4b0a      	ldr	r3, [pc, #40]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	0e5b      	lsrs	r3, r3, #25
 8003f84:	f003 0303 	and.w	r3, r3, #3
 8003f88:	3301      	adds	r3, #1
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f96:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f98:	69bb      	ldr	r3, [r7, #24]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3724      	adds	r7, #36	; 0x24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	08010748 	.word	0x08010748
 8003fb0:	00f42400 	.word	0x00f42400
 8003fb4:	007a1200 	.word	0x007a1200

08003fb8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fbc:	4b03      	ldr	r3, [pc, #12]	; (8003fcc <HAL_RCC_GetHCLKFreq+0x14>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	20000000 	.word	0x20000000

08003fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003fd4:	f7ff fff0 	bl	8003fb8 <HAL_RCC_GetHCLKFreq>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	4b06      	ldr	r3, [pc, #24]	; (8003ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	0a1b      	lsrs	r3, r3, #8
 8003fe0:	f003 0307 	and.w	r3, r3, #7
 8003fe4:	4904      	ldr	r1, [pc, #16]	; (8003ff8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fe6:	5ccb      	ldrb	r3, [r1, r3]
 8003fe8:	f003 031f 	and.w	r3, r3, #31
 8003fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	08010740 	.word	0x08010740

08003ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004000:	f7ff ffda 	bl	8003fb8 <HAL_RCC_GetHCLKFreq>
 8004004:	4602      	mov	r2, r0
 8004006:	4b06      	ldr	r3, [pc, #24]	; (8004020 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	0adb      	lsrs	r3, r3, #11
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	4904      	ldr	r1, [pc, #16]	; (8004024 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004012:	5ccb      	ldrb	r3, [r1, r3]
 8004014:	f003 031f 	and.w	r3, r3, #31
 8004018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800401c:	4618      	mov	r0, r3
 800401e:	bd80      	pop	{r7, pc}
 8004020:	40021000 	.word	0x40021000
 8004024:	08010740 	.word	0x08010740

08004028 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	220f      	movs	r2, #15
 8004036:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004038:	4b12      	ldr	r3, [pc, #72]	; (8004084 <HAL_RCC_GetClockConfig+0x5c>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f003 0203 	and.w	r2, r3, #3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004044:	4b0f      	ldr	r3, [pc, #60]	; (8004084 <HAL_RCC_GetClockConfig+0x5c>)
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004050:	4b0c      	ldr	r3, [pc, #48]	; (8004084 <HAL_RCC_GetClockConfig+0x5c>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800405c:	4b09      	ldr	r3, [pc, #36]	; (8004084 <HAL_RCC_GetClockConfig+0x5c>)
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	08db      	lsrs	r3, r3, #3
 8004062:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800406a:	4b07      	ldr	r3, [pc, #28]	; (8004088 <HAL_RCC_GetClockConfig+0x60>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0207 	and.w	r2, r3, #7
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	601a      	str	r2, [r3, #0]
}
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	40021000 	.word	0x40021000
 8004088:	40022000 	.word	0x40022000

0800408c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004094:	2300      	movs	r3, #0
 8004096:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004098:	4b2a      	ldr	r3, [pc, #168]	; (8004144 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800409a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80040a4:	f7ff f958 	bl	8003358 <HAL_PWREx_GetVoltageRange>
 80040a8:	6178      	str	r0, [r7, #20]
 80040aa:	e014      	b.n	80040d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80040ac:	4b25      	ldr	r3, [pc, #148]	; (8004144 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b0:	4a24      	ldr	r2, [pc, #144]	; (8004144 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040b6:	6593      	str	r3, [r2, #88]	; 0x58
 80040b8:	4b22      	ldr	r3, [pc, #136]	; (8004144 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c0:	60fb      	str	r3, [r7, #12]
 80040c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80040c4:	f7ff f948 	bl	8003358 <HAL_PWREx_GetVoltageRange>
 80040c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80040ca:	4b1e      	ldr	r3, [pc, #120]	; (8004144 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ce:	4a1d      	ldr	r2, [pc, #116]	; (8004144 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040dc:	d10b      	bne.n	80040f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b80      	cmp	r3, #128	; 0x80
 80040e2:	d919      	bls.n	8004118 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2ba0      	cmp	r3, #160	; 0xa0
 80040e8:	d902      	bls.n	80040f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040ea:	2302      	movs	r3, #2
 80040ec:	613b      	str	r3, [r7, #16]
 80040ee:	e013      	b.n	8004118 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040f0:	2301      	movs	r3, #1
 80040f2:	613b      	str	r3, [r7, #16]
 80040f4:	e010      	b.n	8004118 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b80      	cmp	r3, #128	; 0x80
 80040fa:	d902      	bls.n	8004102 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80040fc:	2303      	movs	r3, #3
 80040fe:	613b      	str	r3, [r7, #16]
 8004100:	e00a      	b.n	8004118 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b80      	cmp	r3, #128	; 0x80
 8004106:	d102      	bne.n	800410e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004108:	2302      	movs	r3, #2
 800410a:	613b      	str	r3, [r7, #16]
 800410c:	e004      	b.n	8004118 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b70      	cmp	r3, #112	; 0x70
 8004112:	d101      	bne.n	8004118 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004114:	2301      	movs	r3, #1
 8004116:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004118:	4b0b      	ldr	r3, [pc, #44]	; (8004148 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f023 0207 	bic.w	r2, r3, #7
 8004120:	4909      	ldr	r1, [pc, #36]	; (8004148 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	4313      	orrs	r3, r2
 8004126:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004128:	4b07      	ldr	r3, [pc, #28]	; (8004148 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0307 	and.w	r3, r3, #7
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	429a      	cmp	r2, r3
 8004134:	d001      	beq.n	800413a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e000      	b.n	800413c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3718      	adds	r7, #24
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40021000 	.word	0x40021000
 8004148:	40022000 	.word	0x40022000

0800414c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004154:	2300      	movs	r3, #0
 8004156:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004158:	2300      	movs	r3, #0
 800415a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004164:	2b00      	cmp	r3, #0
 8004166:	d031      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800416c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004170:	d01a      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004172:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004176:	d814      	bhi.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004178:	2b00      	cmp	r3, #0
 800417a:	d009      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800417c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004180:	d10f      	bne.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004182:	4b5d      	ldr	r3, [pc, #372]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	4a5c      	ldr	r2, [pc, #368]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800418c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800418e:	e00c      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3304      	adds	r3, #4
 8004194:	2100      	movs	r1, #0
 8004196:	4618      	mov	r0, r3
 8004198:	f000 fa54 	bl	8004644 <RCCEx_PLLSAI1_Config>
 800419c:	4603      	mov	r3, r0
 800419e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041a0:	e003      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	74fb      	strb	r3, [r7, #19]
      break;
 80041a6:	e000      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80041a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041aa:	7cfb      	ldrb	r3, [r7, #19]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10b      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041b0:	4b51      	ldr	r3, [pc, #324]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041be:	494e      	ldr	r1, [pc, #312]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80041c6:	e001      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c8:	7cfb      	ldrb	r3, [r7, #19]
 80041ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 809e 	beq.w	8004316 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041da:	2300      	movs	r3, #0
 80041dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041de:	4b46      	ldr	r3, [pc, #280]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80041ea:	2301      	movs	r3, #1
 80041ec:	e000      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80041ee:	2300      	movs	r3, #0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00d      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041f4:	4b40      	ldr	r3, [pc, #256]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f8:	4a3f      	ldr	r2, [pc, #252]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041fe:	6593      	str	r3, [r2, #88]	; 0x58
 8004200:	4b3d      	ldr	r3, [pc, #244]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004208:	60bb      	str	r3, [r7, #8]
 800420a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800420c:	2301      	movs	r3, #1
 800420e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004210:	4b3a      	ldr	r3, [pc, #232]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a39      	ldr	r2, [pc, #228]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800421a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800421c:	f7fd f9b8 	bl	8001590 <HAL_GetTick>
 8004220:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004222:	e009      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004224:	f7fd f9b4 	bl	8001590 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d902      	bls.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	74fb      	strb	r3, [r7, #19]
        break;
 8004236:	e005      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004238:	4b30      	ldr	r3, [pc, #192]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004240:	2b00      	cmp	r3, #0
 8004242:	d0ef      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004244:	7cfb      	ldrb	r3, [r7, #19]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d15a      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800424a:	4b2b      	ldr	r3, [pc, #172]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800424c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004250:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004254:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d01e      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	429a      	cmp	r2, r3
 8004264:	d019      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004266:	4b24      	ldr	r3, [pc, #144]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004270:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004272:	4b21      	ldr	r3, [pc, #132]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004278:	4a1f      	ldr	r2, [pc, #124]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800427a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800427e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004282:	4b1d      	ldr	r3, [pc, #116]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004288:	4a1b      	ldr	r2, [pc, #108]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800428a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800428e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004292:	4a19      	ldr	r2, [pc, #100]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d016      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a4:	f7fd f974 	bl	8001590 <HAL_GetTick>
 80042a8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042aa:	e00b      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ac:	f7fd f970 	bl	8001590 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d902      	bls.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	74fb      	strb	r3, [r7, #19]
            break;
 80042c2:	e006      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042c4:	4b0c      	ldr	r3, [pc, #48]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0ec      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80042d2:	7cfb      	ldrb	r3, [r7, #19]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10b      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042d8:	4b07      	ldr	r3, [pc, #28]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042e6:	4904      	ldr	r1, [pc, #16]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80042ee:	e009      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042f0:	7cfb      	ldrb	r3, [r7, #19]
 80042f2:	74bb      	strb	r3, [r7, #18]
 80042f4:	e006      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80042f6:	bf00      	nop
 80042f8:	40021000 	.word	0x40021000
 80042fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004300:	7cfb      	ldrb	r3, [r7, #19]
 8004302:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004304:	7c7b      	ldrb	r3, [r7, #17]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d105      	bne.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800430a:	4b9e      	ldr	r3, [pc, #632]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800430c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800430e:	4a9d      	ldr	r2, [pc, #628]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004314:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00a      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004322:	4b98      	ldr	r3, [pc, #608]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004328:	f023 0203 	bic.w	r2, r3, #3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	4994      	ldr	r1, [pc, #592]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004332:	4313      	orrs	r3, r2
 8004334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00a      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004344:	4b8f      	ldr	r3, [pc, #572]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434a:	f023 020c 	bic.w	r2, r3, #12
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	498c      	ldr	r1, [pc, #560]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004354:	4313      	orrs	r3, r2
 8004356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0304 	and.w	r3, r3, #4
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00a      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004366:	4b87      	ldr	r3, [pc, #540]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004374:	4983      	ldr	r1, [pc, #524]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0308 	and.w	r3, r3, #8
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00a      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004388:	4b7e      	ldr	r3, [pc, #504]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800438a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004396:	497b      	ldr	r1, [pc, #492]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004398:	4313      	orrs	r3, r2
 800439a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0320 	and.w	r3, r3, #32
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043aa:	4b76      	ldr	r3, [pc, #472]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b8:	4972      	ldr	r1, [pc, #456]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00a      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043cc:	4b6d      	ldr	r3, [pc, #436]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043da:	496a      	ldr	r1, [pc, #424]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00a      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043ee:	4b65      	ldr	r3, [pc, #404]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043fc:	4961      	ldr	r1, [pc, #388]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00a      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004410:	4b5c      	ldr	r3, [pc, #368]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004416:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441e:	4959      	ldr	r1, [pc, #356]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004420:	4313      	orrs	r3, r2
 8004422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00a      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004432:	4b54      	ldr	r3, [pc, #336]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004438:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004440:	4950      	ldr	r1, [pc, #320]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004442:	4313      	orrs	r3, r2
 8004444:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00a      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004454:	4b4b      	ldr	r3, [pc, #300]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004462:	4948      	ldr	r1, [pc, #288]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004464:	4313      	orrs	r3, r2
 8004466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00a      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004476:	4b43      	ldr	r3, [pc, #268]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004478:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800447c:	f023 0203 	bic.w	r2, r3, #3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004484:	493f      	ldr	r1, [pc, #252]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004486:	4313      	orrs	r3, r2
 8004488:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d028      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004498:	4b3a      	ldr	r3, [pc, #232]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800449a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044a6:	4937      	ldr	r1, [pc, #220]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044b6:	d106      	bne.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044b8:	4b32      	ldr	r3, [pc, #200]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	4a31      	ldr	r2, [pc, #196]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044c2:	60d3      	str	r3, [r2, #12]
 80044c4:	e011      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044ce:	d10c      	bne.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	3304      	adds	r3, #4
 80044d4:	2101      	movs	r1, #1
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 f8b4 	bl	8004644 <RCCEx_PLLSAI1_Config>
 80044dc:	4603      	mov	r3, r0
 80044de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80044e0:	7cfb      	ldrb	r3, [r7, #19]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 80044e6:	7cfb      	ldrb	r3, [r7, #19]
 80044e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d028      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80044f6:	4b23      	ldr	r3, [pc, #140]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004504:	491f      	ldr	r1, [pc, #124]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004506:	4313      	orrs	r3, r2
 8004508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004510:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004514:	d106      	bne.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004516:	4b1b      	ldr	r3, [pc, #108]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	4a1a      	ldr	r2, [pc, #104]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800451c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004520:	60d3      	str	r3, [r2, #12]
 8004522:	e011      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004528:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800452c:	d10c      	bne.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	3304      	adds	r3, #4
 8004532:	2101      	movs	r1, #1
 8004534:	4618      	mov	r0, r3
 8004536:	f000 f885 	bl	8004644 <RCCEx_PLLSAI1_Config>
 800453a:	4603      	mov	r3, r0
 800453c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800453e:	7cfb      	ldrb	r3, [r7, #19]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8004544:	7cfb      	ldrb	r3, [r7, #19]
 8004546:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d02b      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004554:	4b0b      	ldr	r3, [pc, #44]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004562:	4908      	ldr	r1, [pc, #32]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004564:	4313      	orrs	r3, r2
 8004566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800456e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004572:	d109      	bne.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004574:	4b03      	ldr	r3, [pc, #12]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	4a02      	ldr	r2, [pc, #8]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800457a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800457e:	60d3      	str	r3, [r2, #12]
 8004580:	e014      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x460>
 8004582:	bf00      	nop
 8004584:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004590:	d10c      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	3304      	adds	r3, #4
 8004596:	2101      	movs	r1, #1
 8004598:	4618      	mov	r0, r3
 800459a:	f000 f853 	bl	8004644 <RCCEx_PLLSAI1_Config>
 800459e:	4603      	mov	r3, r0
 80045a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045a2:	7cfb      	ldrb	r3, [r7, #19]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 80045a8:	7cfb      	ldrb	r3, [r7, #19]
 80045aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d01c      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045b8:	4b19      	ldr	r3, [pc, #100]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80045ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045c6:	4916      	ldr	r1, [pc, #88]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045d6:	d10c      	bne.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3304      	adds	r3, #4
 80045dc:	2102      	movs	r1, #2
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 f830 	bl	8004644 <RCCEx_PLLSAI1_Config>
 80045e4:	4603      	mov	r3, r0
 80045e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045e8:	7cfb      	ldrb	r3, [r7, #19]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80045ee:	7cfb      	ldrb	r3, [r7, #19]
 80045f0:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045fe:	4b08      	ldr	r3, [pc, #32]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004604:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800460c:	4904      	ldr	r1, [pc, #16]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800460e:	4313      	orrs	r3, r2
 8004610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004614:	7cbb      	ldrb	r3, [r7, #18]
}
 8004616:	4618      	mov	r0, r3
 8004618:	3718      	adds	r7, #24
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	40021000 	.word	0x40021000

08004624 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004628:	4b05      	ldr	r3, [pc, #20]	; (8004640 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a04      	ldr	r2, [pc, #16]	; (8004640 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800462e:	f043 0304 	orr.w	r3, r3, #4
 8004632:	6013      	str	r3, [r2, #0]
}
 8004634:	bf00      	nop
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	40021000 	.word	0x40021000

08004644 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800464e:	2300      	movs	r3, #0
 8004650:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004652:	4b74      	ldr	r3, [pc, #464]	; (8004824 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d018      	beq.n	8004690 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800465e:	4b71      	ldr	r3, [pc, #452]	; (8004824 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f003 0203 	and.w	r2, r3, #3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	429a      	cmp	r2, r3
 800466c:	d10d      	bne.n	800468a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
       ||
 8004672:	2b00      	cmp	r3, #0
 8004674:	d009      	beq.n	800468a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004676:	4b6b      	ldr	r3, [pc, #428]	; (8004824 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	091b      	lsrs	r3, r3, #4
 800467c:	f003 0307 	and.w	r3, r3, #7
 8004680:	1c5a      	adds	r2, r3, #1
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
       ||
 8004686:	429a      	cmp	r2, r3
 8004688:	d047      	beq.n	800471a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	73fb      	strb	r3, [r7, #15]
 800468e:	e044      	b.n	800471a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b03      	cmp	r3, #3
 8004696:	d018      	beq.n	80046ca <RCCEx_PLLSAI1_Config+0x86>
 8004698:	2b03      	cmp	r3, #3
 800469a:	d825      	bhi.n	80046e8 <RCCEx_PLLSAI1_Config+0xa4>
 800469c:	2b01      	cmp	r3, #1
 800469e:	d002      	beq.n	80046a6 <RCCEx_PLLSAI1_Config+0x62>
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d009      	beq.n	80046b8 <RCCEx_PLLSAI1_Config+0x74>
 80046a4:	e020      	b.n	80046e8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046a6:	4b5f      	ldr	r3, [pc, #380]	; (8004824 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d11d      	bne.n	80046ee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046b6:	e01a      	b.n	80046ee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046b8:	4b5a      	ldr	r3, [pc, #360]	; (8004824 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d116      	bne.n	80046f2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046c8:	e013      	b.n	80046f2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046ca:	4b56      	ldr	r3, [pc, #344]	; (8004824 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10f      	bne.n	80046f6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046d6:	4b53      	ldr	r3, [pc, #332]	; (8004824 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d109      	bne.n	80046f6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046e6:	e006      	b.n	80046f6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	73fb      	strb	r3, [r7, #15]
      break;
 80046ec:	e004      	b.n	80046f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046ee:	bf00      	nop
 80046f0:	e002      	b.n	80046f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046f2:	bf00      	nop
 80046f4:	e000      	b.n	80046f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80046f8:	7bfb      	ldrb	r3, [r7, #15]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10d      	bne.n	800471a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046fe:	4b49      	ldr	r3, [pc, #292]	; (8004824 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6819      	ldr	r1, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	3b01      	subs	r3, #1
 8004710:	011b      	lsls	r3, r3, #4
 8004712:	430b      	orrs	r3, r1
 8004714:	4943      	ldr	r1, [pc, #268]	; (8004824 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004716:	4313      	orrs	r3, r2
 8004718:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800471a:	7bfb      	ldrb	r3, [r7, #15]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d17c      	bne.n	800481a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004720:	4b40      	ldr	r3, [pc, #256]	; (8004824 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a3f      	ldr	r2, [pc, #252]	; (8004824 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004726:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800472a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800472c:	f7fc ff30 	bl	8001590 <HAL_GetTick>
 8004730:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004732:	e009      	b.n	8004748 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004734:	f7fc ff2c 	bl	8001590 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d902      	bls.n	8004748 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	73fb      	strb	r3, [r7, #15]
        break;
 8004746:	e005      	b.n	8004754 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004748:	4b36      	ldr	r3, [pc, #216]	; (8004824 <RCCEx_PLLSAI1_Config+0x1e0>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1ef      	bne.n	8004734 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004754:	7bfb      	ldrb	r3, [r7, #15]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d15f      	bne.n	800481a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d110      	bne.n	8004782 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004760:	4b30      	ldr	r3, [pc, #192]	; (8004824 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004768:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6892      	ldr	r2, [r2, #8]
 8004770:	0211      	lsls	r1, r2, #8
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	68d2      	ldr	r2, [r2, #12]
 8004776:	06d2      	lsls	r2, r2, #27
 8004778:	430a      	orrs	r2, r1
 800477a:	492a      	ldr	r1, [pc, #168]	; (8004824 <RCCEx_PLLSAI1_Config+0x1e0>)
 800477c:	4313      	orrs	r3, r2
 800477e:	610b      	str	r3, [r1, #16]
 8004780:	e027      	b.n	80047d2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d112      	bne.n	80047ae <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004788:	4b26      	ldr	r3, [pc, #152]	; (8004824 <RCCEx_PLLSAI1_Config+0x1e0>)
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004790:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	6892      	ldr	r2, [r2, #8]
 8004798:	0211      	lsls	r1, r2, #8
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6912      	ldr	r2, [r2, #16]
 800479e:	0852      	lsrs	r2, r2, #1
 80047a0:	3a01      	subs	r2, #1
 80047a2:	0552      	lsls	r2, r2, #21
 80047a4:	430a      	orrs	r2, r1
 80047a6:	491f      	ldr	r1, [pc, #124]	; (8004824 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	610b      	str	r3, [r1, #16]
 80047ac:	e011      	b.n	80047d2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047ae:	4b1d      	ldr	r3, [pc, #116]	; (8004824 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80047b6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6892      	ldr	r2, [r2, #8]
 80047be:	0211      	lsls	r1, r2, #8
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	6952      	ldr	r2, [r2, #20]
 80047c4:	0852      	lsrs	r2, r2, #1
 80047c6:	3a01      	subs	r2, #1
 80047c8:	0652      	lsls	r2, r2, #25
 80047ca:	430a      	orrs	r2, r1
 80047cc:	4915      	ldr	r1, [pc, #84]	; (8004824 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80047d2:	4b14      	ldr	r3, [pc, #80]	; (8004824 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a13      	ldr	r2, [pc, #76]	; (8004824 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047dc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047de:	f7fc fed7 	bl	8001590 <HAL_GetTick>
 80047e2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047e4:	e009      	b.n	80047fa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047e6:	f7fc fed3 	bl	8001590 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d902      	bls.n	80047fa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	73fb      	strb	r3, [r7, #15]
          break;
 80047f8:	e005      	b.n	8004806 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047fa:	4b0a      	ldr	r3, [pc, #40]	; (8004824 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0ef      	beq.n	80047e6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004806:	7bfb      	ldrb	r3, [r7, #15]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d106      	bne.n	800481a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800480c:	4b05      	ldr	r3, [pc, #20]	; (8004824 <RCCEx_PLLSAI1_Config+0x1e0>)
 800480e:	691a      	ldr	r2, [r3, #16]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	4903      	ldr	r1, [pc, #12]	; (8004824 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004816:	4313      	orrs	r3, r2
 8004818:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800481a:	7bfb      	ldrb	r3, [r7, #15]
}
 800481c:	4618      	mov	r0, r3
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	40021000 	.word	0x40021000

08004828 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d06c      	beq.n	8004914 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d106      	bne.n	8004854 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7fc fc52 	bl	80010f8 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2202      	movs	r2, #2
 8004858:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	22ca      	movs	r2, #202	; 0xca
 8004862:	625a      	str	r2, [r3, #36]	; 0x24
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2253      	movs	r2, #83	; 0x53
 800486a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 fa49 	bl	8004d04 <RTC_EnterInitMode>
 8004872:	4603      	mov	r3, r0
 8004874:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004876:	7bfb      	ldrb	r3, [r7, #15]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d14b      	bne.n	8004914 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6812      	ldr	r2, [r2, #0]
 8004886:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800488a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800488e:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6899      	ldr	r1, [r3, #8]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	431a      	orrs	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	431a      	orrs	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	68d2      	ldr	r2, [r2, #12]
 80048b6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6919      	ldr	r1, [r3, #16]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	041a      	lsls	r2, r3, #16
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 fa4d 	bl	8004d6c <RTC_ExitInitMode>
 80048d2:	4603      	mov	r3, r0
 80048d4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80048d6:	7bfb      	ldrb	r3, [r7, #15]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d11b      	bne.n	8004914 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 0203 	bic.w	r2, r2, #3
 80048ea:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69da      	ldr	r2, [r3, #28]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	430a      	orrs	r2, r1
 8004902:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	22ff      	movs	r2, #255	; 0xff
 800490a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8004914:	7bfb      	ldrb	r3, [r7, #15]
}
 8004916:	4618      	mov	r0, r3
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800491e:	b590      	push	{r4, r7, lr}
 8004920:	b087      	sub	sp, #28
 8004922:	af00      	add	r7, sp, #0
 8004924:	60f8      	str	r0, [r7, #12]
 8004926:	60b9      	str	r1, [r7, #8]
 8004928:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d101      	bne.n	8004938 <HAL_RTC_SetTime+0x1a>
 8004934:	2302      	movs	r3, #2
 8004936:	e08b      	b.n	8004a50 <HAL_RTC_SetTime+0x132>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2202      	movs	r2, #2
 8004944:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	22ca      	movs	r2, #202	; 0xca
 800494e:	625a      	str	r2, [r3, #36]	; 0x24
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2253      	movs	r2, #83	; 0x53
 8004956:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f000 f9d3 	bl	8004d04 <RTC_EnterInitMode>
 800495e:	4603      	mov	r3, r0
 8004960:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004962:	7cfb      	ldrb	r3, [r7, #19]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d163      	bne.n	8004a30 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d126      	bne.n	80049bc <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004978:	2b00      	cmp	r3, #0
 800497a:	d102      	bne.n	8004982 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	2200      	movs	r2, #0
 8004980:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	4618      	mov	r0, r3
 8004988:	f000 fa2e 	bl	8004de8 <RTC_ByteToBcd2>
 800498c:	4603      	mov	r3, r0
 800498e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	785b      	ldrb	r3, [r3, #1]
 8004994:	4618      	mov	r0, r3
 8004996:	f000 fa27 	bl	8004de8 <RTC_ByteToBcd2>
 800499a:	4603      	mov	r3, r0
 800499c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800499e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	789b      	ldrb	r3, [r3, #2]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f000 fa1f 	bl	8004de8 <RTC_ByteToBcd2>
 80049aa:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80049ac:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	78db      	ldrb	r3, [r3, #3]
 80049b4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80049b6:	4313      	orrs	r3, r2
 80049b8:	617b      	str	r3, [r7, #20]
 80049ba:	e018      	b.n	80049ee <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d102      	bne.n	80049d0 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	2200      	movs	r2, #0
 80049ce:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	785b      	ldrb	r3, [r3, #1]
 80049da:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80049dc:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80049e2:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	78db      	ldrb	r3, [r3, #3]
 80049e8:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80049ea:	4313      	orrs	r3, r2
 80049ec:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80049f8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80049fc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a0c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	6899      	ldr	r1, [r3, #8]
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	68da      	ldr	r2, [r3, #12]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 f9a0 	bl	8004d6c <RTC_ExitInitMode>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	22ff      	movs	r2, #255	; 0xff
 8004a36:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004a38:	7cfb      	ldrb	r3, [r7, #19]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d103      	bne.n	8004a46 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004a4e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	371c      	adds	r7, #28
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd90      	pop	{r4, r7, pc}

08004a58 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004a86:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004a8a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	0c1b      	lsrs	r3, r3, #16
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a96:	b2da      	uxtb	r2, r3
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	0a1b      	lsrs	r3, r3, #8
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004aa6:	b2da      	uxtb	r2, r3
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ab4:	b2da      	uxtb	r2, r3
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	0d9b      	lsrs	r3, r3, #22
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d11a      	bne.n	8004b06 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 f9a7 	bl	8004e28 <RTC_Bcd2ToByte>
 8004ada:	4603      	mov	r3, r0
 8004adc:	461a      	mov	r2, r3
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	785b      	ldrb	r3, [r3, #1]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 f99e 	bl	8004e28 <RTC_Bcd2ToByte>
 8004aec:	4603      	mov	r3, r0
 8004aee:	461a      	mov	r2, r3
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	789b      	ldrb	r3, [r3, #2]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f000 f995 	bl	8004e28 <RTC_Bcd2ToByte>
 8004afe:	4603      	mov	r3, r0
 8004b00:	461a      	mov	r2, r3
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3718      	adds	r7, #24
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004b10:	b590      	push	{r4, r7, lr}
 8004b12:	b087      	sub	sp, #28
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d101      	bne.n	8004b2a <HAL_RTC_SetDate+0x1a>
 8004b26:	2302      	movs	r3, #2
 8004b28:	e075      	b.n	8004c16 <HAL_RTC_SetDate+0x106>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2202      	movs	r2, #2
 8004b36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10e      	bne.n	8004b5e <HAL_RTC_SetDate+0x4e>
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	785b      	ldrb	r3, [r3, #1]
 8004b44:	f003 0310 	and.w	r3, r3, #16
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d008      	beq.n	8004b5e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	785b      	ldrb	r3, [r3, #1]
 8004b50:	f023 0310 	bic.w	r3, r3, #16
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	330a      	adds	r3, #10
 8004b58:	b2da      	uxtb	r2, r3
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d11c      	bne.n	8004b9e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	78db      	ldrb	r3, [r3, #3]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 f93d 	bl	8004de8 <RTC_ByteToBcd2>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	785b      	ldrb	r3, [r3, #1]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 f936 	bl	8004de8 <RTC_ByteToBcd2>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004b80:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	789b      	ldrb	r3, [r3, #2]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 f92e 	bl	8004de8 <RTC_ByteToBcd2>
 8004b8c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004b8e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	617b      	str	r3, [r7, #20]
 8004b9c:	e00e      	b.n	8004bbc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	78db      	ldrb	r3, [r3, #3]
 8004ba2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	785b      	ldrb	r3, [r3, #1]
 8004ba8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004baa:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004bb0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	22ca      	movs	r2, #202	; 0xca
 8004bc2:	625a      	str	r2, [r3, #36]	; 0x24
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2253      	movs	r2, #83	; 0x53
 8004bca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f000 f899 	bl	8004d04 <RTC_EnterInitMode>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004bd6:	7cfb      	ldrb	r3, [r7, #19]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10c      	bne.n	8004bf6 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004be6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004bea:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f000 f8bd 	bl	8004d6c <RTC_ExitInitMode>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	22ff      	movs	r2, #255	; 0xff
 8004bfc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004bfe:	7cfb      	ldrb	r3, [r7, #19]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d103      	bne.n	8004c0c <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004c14:	7cfb      	ldrb	r3, [r7, #19]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	371c      	adds	r7, #28
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd90      	pop	{r4, r7, pc}

08004c1e <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b086      	sub	sp, #24
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	60f8      	str	r0, [r7, #12]
 8004c26:	60b9      	str	r1, [r7, #8]
 8004c28:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004c34:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004c38:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	0c1b      	lsrs	r3, r3, #16
 8004c3e:	b2da      	uxtb	r2, r3
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	0a1b      	lsrs	r3, r3, #8
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	f003 031f 	and.w	r3, r3, #31
 8004c4e:	b2da      	uxtb	r2, r3
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c5c:	b2da      	uxtb	r2, r3
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	0b5b      	lsrs	r3, r3, #13
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	b2da      	uxtb	r2, r3
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d11a      	bne.n	8004cae <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	78db      	ldrb	r3, [r3, #3]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f000 f8d3 	bl	8004e28 <RTC_Bcd2ToByte>
 8004c82:	4603      	mov	r3, r0
 8004c84:	461a      	mov	r2, r3
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	785b      	ldrb	r3, [r3, #1]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 f8ca 	bl	8004e28 <RTC_Bcd2ToByte>
 8004c94:	4603      	mov	r3, r0
 8004c96:	461a      	mov	r2, r3
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	789b      	ldrb	r3, [r3, #2]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f000 f8c1 	bl	8004e28 <RTC_Bcd2ToByte>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	461a      	mov	r2, r3
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3718      	adds	r7, #24
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68da      	ldr	r2, [r3, #12]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004cce:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004cd0:	f7fc fc5e 	bl	8001590 <HAL_GetTick>
 8004cd4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004cd6:	e009      	b.n	8004cec <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004cd8:	f7fc fc5a 	bl	8001590 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ce6:	d901      	bls.n	8004cec <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e007      	b.n	8004cfc <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f003 0320 	and.w	r3, r3, #32
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d0ee      	beq.n	8004cd8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d120      	bne.n	8004d60 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f04f 32ff 	mov.w	r2, #4294967295
 8004d26:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004d28:	f7fc fc32 	bl	8001590 <HAL_GetTick>
 8004d2c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004d2e:	e00d      	b.n	8004d4c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004d30:	f7fc fc2e 	bl	8001590 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d3e:	d905      	bls.n	8004d4c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2203      	movs	r2, #3
 8004d48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d102      	bne.n	8004d60 <RTC_EnterInitMode+0x5c>
 8004d5a:	7bfb      	ldrb	r3, [r7, #15]
 8004d5c:	2b03      	cmp	r3, #3
 8004d5e:	d1e7      	bne.n	8004d30 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
	...

08004d6c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d74:	2300      	movs	r3, #0
 8004d76:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004d78:	4b1a      	ldr	r3, [pc, #104]	; (8004de4 <RTC_ExitInitMode+0x78>)
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	4a19      	ldr	r2, [pc, #100]	; (8004de4 <RTC_ExitInitMode+0x78>)
 8004d7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d82:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004d84:	4b17      	ldr	r3, [pc, #92]	; (8004de4 <RTC_ExitInitMode+0x78>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f003 0320 	and.w	r3, r3, #32
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10c      	bne.n	8004daa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f7ff ff91 	bl	8004cb8 <HAL_RTC_WaitForSynchro>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d01e      	beq.n	8004dda <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2203      	movs	r2, #3
 8004da0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	73fb      	strb	r3, [r7, #15]
 8004da8:	e017      	b.n	8004dda <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004daa:	4b0e      	ldr	r3, [pc, #56]	; (8004de4 <RTC_ExitInitMode+0x78>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	4a0d      	ldr	r2, [pc, #52]	; (8004de4 <RTC_ExitInitMode+0x78>)
 8004db0:	f023 0320 	bic.w	r3, r3, #32
 8004db4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7ff ff7e 	bl	8004cb8 <HAL_RTC_WaitForSynchro>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d005      	beq.n	8004dce <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2203      	movs	r2, #3
 8004dc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004dce:	4b05      	ldr	r3, [pc, #20]	; (8004de4 <RTC_ExitInitMode+0x78>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	4a04      	ldr	r2, [pc, #16]	; (8004de4 <RTC_ExitInitMode+0x78>)
 8004dd4:	f043 0320 	orr.w	r3, r3, #32
 8004dd8:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3710      	adds	r7, #16
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	40002800 	.word	0x40002800

08004de8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	4603      	mov	r3, r0
 8004df0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8004df6:	79fb      	ldrb	r3, [r7, #7]
 8004df8:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8004dfa:	e005      	b.n	8004e08 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8004e02:	7afb      	ldrb	r3, [r7, #11]
 8004e04:	3b0a      	subs	r3, #10
 8004e06:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8004e08:	7afb      	ldrb	r3, [r7, #11]
 8004e0a:	2b09      	cmp	r3, #9
 8004e0c:	d8f6      	bhi.n	8004dfc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	011b      	lsls	r3, r3, #4
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	7afb      	ldrb	r3, [r7, #11]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	b2db      	uxtb	r3, r3
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3714      	adds	r7, #20
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	4603      	mov	r3, r0
 8004e30:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8004e32:	79fb      	ldrb	r3, [r7, #7]
 8004e34:	091b      	lsrs	r3, r3, #4
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	461a      	mov	r2, r3
 8004e3a:	0092      	lsls	r2, r2, #2
 8004e3c:	4413      	add	r3, r2
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8004e42:	79fb      	ldrb	r3, [r7, #7]
 8004e44:	f003 030f 	and.w	r3, r3, #15
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	7bfb      	ldrb	r3, [r7, #15]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	b2db      	uxtb	r3, r3
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3714      	adds	r7, #20
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d101      	bne.n	8004e76 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8004e72:	2302      	movs	r3, #2
 8004e74:	e07f      	b.n	8004f76 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2202      	movs	r2, #2
 8004e82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	22ca      	movs	r2, #202	; 0xca
 8004e8c:	625a      	str	r2, [r3, #36]	; 0x24
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2253      	movs	r2, #83	; 0x53
 8004e94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ea4:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004eb6:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d120      	bne.n	8004f08 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8004ec6:	f7fc fb63 	bl	8001590 <HAL_GetTick>
 8004eca:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8004ecc:	e015      	b.n	8004efa <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004ece:	f7fc fb5f 	bl	8001590 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004edc:	d90d      	bls.n	8004efa <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	22ff      	movs	r2, #255	; 0xff
 8004ee4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2203      	movs	r2, #3
 8004eea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e03d      	b.n	8004f76 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f003 0304 	and.w	r3, r3, #4
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d0e2      	beq.n	8004ece <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68ba      	ldr	r2, [r7, #8]
 8004f0e:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f023 0107 	bic.w	r1, r3, #7
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8004f24:	4b16      	ldr	r3, [pc, #88]	; (8004f80 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a15      	ldr	r2, [pc, #84]	; (8004f80 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8004f2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f2e:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8004f30:	4b13      	ldr	r3, [pc, #76]	; (8004f80 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	4a12      	ldr	r2, [pc, #72]	; (8004f80 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8004f36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f3a:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689a      	ldr	r2, [r3, #8]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f4a:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689a      	ldr	r2, [r3, #8]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f5a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	22ff      	movs	r2, #255	; 0xff
 8004f62:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3718      	adds	r7, #24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	40010400 	.word	0x40010400

08004f84 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d101      	bne.n	8004f9a <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8004f96:	2302      	movs	r3, #2
 8004f98:	e04d      	b.n	8005036 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2202      	movs	r2, #2
 8004fa6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	22ca      	movs	r2, #202	; 0xca
 8004fb0:	625a      	str	r2, [r3, #36]	; 0x24
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2253      	movs	r2, #83	; 0x53
 8004fb8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689a      	ldr	r2, [r3, #8]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fc8:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004fd8:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8004fda:	f7fc fad9 	bl	8001590 <HAL_GetTick>
 8004fde:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004fe0:	e015      	b.n	800500e <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004fe2:	f7fc fad5 	bl	8001590 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ff0:	d90d      	bls.n	800500e <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	22ff      	movs	r2, #255	; 0xff
 8004ff8:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2203      	movs	r2, #3
 8004ffe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e013      	b.n	8005036 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f003 0304 	and.w	r3, r3, #4
 8005018:	2b00      	cmp	r3, #0
 800501a:	d0e2      	beq.n	8004fe2 <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	22ff      	movs	r2, #255	; 0xff
 8005022:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8005048:	4b0f      	ldr	r3, [pc, #60]	; (8005088 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 800504a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800504e:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00b      	beq.n	8005076 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	b2da      	uxtb	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800506e:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f7fb ff8d 	bl	8000f90 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 800507e:	bf00      	nop
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	40010400 	.word	0x40010400

0800508c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e095      	b.n	80051ca <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d108      	bne.n	80050b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050ae:	d009      	beq.n	80050c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	61da      	str	r2, [r3, #28]
 80050b6:	e005      	b.n	80050c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d106      	bne.n	80050e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7fc f842 	bl	8001168 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005104:	d902      	bls.n	800510c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005106:	2300      	movs	r3, #0
 8005108:	60fb      	str	r3, [r7, #12]
 800510a:	e002      	b.n	8005112 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800510c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005110:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800511a:	d007      	beq.n	800512c <HAL_SPI_Init+0xa0>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005124:	d002      	beq.n	800512c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800513c:	431a      	orrs	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	431a      	orrs	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	431a      	orrs	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800515a:	431a      	orrs	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	69db      	ldr	r3, [r3, #28]
 8005160:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005164:	431a      	orrs	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800516e:	ea42 0103 	orr.w	r1, r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005176:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	0c1b      	lsrs	r3, r3, #16
 8005188:	f003 0204 	and.w	r2, r3, #4
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	f003 0310 	and.w	r3, r3, #16
 8005194:	431a      	orrs	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519a:	f003 0308 	and.w	r3, r3, #8
 800519e:	431a      	orrs	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80051a8:	ea42 0103 	orr.w	r1, r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b088      	sub	sp, #32
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	60f8      	str	r0, [r7, #12]
 80051da:	60b9      	str	r1, [r7, #8]
 80051dc:	603b      	str	r3, [r7, #0]
 80051de:	4613      	mov	r3, r2
 80051e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051e2:	2300      	movs	r3, #0
 80051e4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d101      	bne.n	80051f4 <HAL_SPI_Transmit+0x22>
 80051f0:	2302      	movs	r3, #2
 80051f2:	e158      	b.n	80054a6 <HAL_SPI_Transmit+0x2d4>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051fc:	f7fc f9c8 	bl	8001590 <HAL_GetTick>
 8005200:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005202:	88fb      	ldrh	r3, [r7, #6]
 8005204:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b01      	cmp	r3, #1
 8005210:	d002      	beq.n	8005218 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005212:	2302      	movs	r3, #2
 8005214:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005216:	e13d      	b.n	8005494 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d002      	beq.n	8005224 <HAL_SPI_Transmit+0x52>
 800521e:	88fb      	ldrh	r3, [r7, #6]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d102      	bne.n	800522a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005228:	e134      	b.n	8005494 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2203      	movs	r2, #3
 800522e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	88fa      	ldrh	r2, [r7, #6]
 8005242:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	88fa      	ldrh	r2, [r7, #6]
 8005248:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005274:	d10f      	bne.n	8005296 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005284:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005294:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a0:	2b40      	cmp	r3, #64	; 0x40
 80052a2:	d007      	beq.n	80052b4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052bc:	d94b      	bls.n	8005356 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d002      	beq.n	80052cc <HAL_SPI_Transmit+0xfa>
 80052c6:	8afb      	ldrh	r3, [r7, #22]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d13e      	bne.n	800534a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d0:	881a      	ldrh	r2, [r3, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052dc:	1c9a      	adds	r2, r3, #2
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	3b01      	subs	r3, #1
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80052f0:	e02b      	b.n	800534a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d112      	bne.n	8005326 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005304:	881a      	ldrh	r2, [r3, #0]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005310:	1c9a      	adds	r2, r3, #2
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800531a:	b29b      	uxth	r3, r3
 800531c:	3b01      	subs	r3, #1
 800531e:	b29a      	uxth	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005324:	e011      	b.n	800534a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005326:	f7fc f933 	bl	8001590 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	429a      	cmp	r2, r3
 8005334:	d803      	bhi.n	800533e <HAL_SPI_Transmit+0x16c>
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533c:	d102      	bne.n	8005344 <HAL_SPI_Transmit+0x172>
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d102      	bne.n	800534a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005348:	e0a4      	b.n	8005494 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800534e:	b29b      	uxth	r3, r3
 8005350:	2b00      	cmp	r3, #0
 8005352:	d1ce      	bne.n	80052f2 <HAL_SPI_Transmit+0x120>
 8005354:	e07c      	b.n	8005450 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d002      	beq.n	8005364 <HAL_SPI_Transmit+0x192>
 800535e:	8afb      	ldrh	r3, [r7, #22]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d170      	bne.n	8005446 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005368:	b29b      	uxth	r3, r3
 800536a:	2b01      	cmp	r3, #1
 800536c:	d912      	bls.n	8005394 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005372:	881a      	ldrh	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537e:	1c9a      	adds	r2, r3, #2
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005388:	b29b      	uxth	r3, r3
 800538a:	3b02      	subs	r3, #2
 800538c:	b29a      	uxth	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005392:	e058      	b.n	8005446 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	330c      	adds	r3, #12
 800539e:	7812      	ldrb	r2, [r2, #0]
 80053a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a6:	1c5a      	adds	r2, r3, #1
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	3b01      	subs	r3, #1
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80053ba:	e044      	b.n	8005446 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d12b      	bne.n	8005422 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d912      	bls.n	80053fa <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d8:	881a      	ldrh	r2, [r3, #0]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e4:	1c9a      	adds	r2, r3, #2
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	3b02      	subs	r3, #2
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053f8:	e025      	b.n	8005446 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	330c      	adds	r3, #12
 8005404:	7812      	ldrb	r2, [r2, #0]
 8005406:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540c:	1c5a      	adds	r2, r3, #1
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005416:	b29b      	uxth	r3, r3
 8005418:	3b01      	subs	r3, #1
 800541a:	b29a      	uxth	r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005420:	e011      	b.n	8005446 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005422:	f7fc f8b5 	bl	8001590 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	429a      	cmp	r2, r3
 8005430:	d803      	bhi.n	800543a <HAL_SPI_Transmit+0x268>
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005438:	d102      	bne.n	8005440 <HAL_SPI_Transmit+0x26e>
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d102      	bne.n	8005446 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005444:	e026      	b.n	8005494 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800544a:	b29b      	uxth	r3, r3
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1b5      	bne.n	80053bc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005450:	69ba      	ldr	r2, [r7, #24]
 8005452:	6839      	ldr	r1, [r7, #0]
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f000 f949 	bl	80056ec <SPI_EndRxTxTransaction>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d002      	beq.n	8005466 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2220      	movs	r2, #32
 8005464:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10a      	bne.n	8005484 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800546e:	2300      	movs	r3, #0
 8005470:	613b      	str	r3, [r7, #16]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	613b      	str	r3, [r7, #16]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	613b      	str	r3, [r7, #16]
 8005482:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005488:	2b00      	cmp	r3, #0
 800548a:	d002      	beq.n	8005492 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	77fb      	strb	r3, [r7, #31]
 8005490:	e000      	b.n	8005494 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005492:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80054a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3720      	adds	r7, #32
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
	...

080054b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b088      	sub	sp, #32
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	603b      	str	r3, [r7, #0]
 80054bc:	4613      	mov	r3, r2
 80054be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80054c0:	f7fc f866 	bl	8001590 <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c8:	1a9b      	subs	r3, r3, r2
 80054ca:	683a      	ldr	r2, [r7, #0]
 80054cc:	4413      	add	r3, r2
 80054ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80054d0:	f7fc f85e 	bl	8001590 <HAL_GetTick>
 80054d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80054d6:	4b39      	ldr	r3, [pc, #228]	; (80055bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	015b      	lsls	r3, r3, #5
 80054dc:	0d1b      	lsrs	r3, r3, #20
 80054de:	69fa      	ldr	r2, [r7, #28]
 80054e0:	fb02 f303 	mul.w	r3, r2, r3
 80054e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054e6:	e054      	b.n	8005592 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ee:	d050      	beq.n	8005592 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054f0:	f7fc f84e 	bl	8001590 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	69fa      	ldr	r2, [r7, #28]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d902      	bls.n	8005506 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d13d      	bne.n	8005582 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005514:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800551e:	d111      	bne.n	8005544 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005528:	d004      	beq.n	8005534 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005532:	d107      	bne.n	8005544 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005542:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005548:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800554c:	d10f      	bne.n	800556e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800556c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e017      	b.n	80055b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d101      	bne.n	800558c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005588:	2300      	movs	r3, #0
 800558a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	3b01      	subs	r3, #1
 8005590:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	689a      	ldr	r2, [r3, #8]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	4013      	ands	r3, r2
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	429a      	cmp	r2, r3
 80055a0:	bf0c      	ite	eq
 80055a2:	2301      	moveq	r3, #1
 80055a4:	2300      	movne	r3, #0
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	461a      	mov	r2, r3
 80055aa:	79fb      	ldrb	r3, [r7, #7]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d19b      	bne.n	80054e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3720      	adds	r7, #32
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	20000000 	.word	0x20000000

080055c0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b08a      	sub	sp, #40	; 0x28
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
 80055cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80055ce:	2300      	movs	r3, #0
 80055d0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80055d2:	f7fb ffdd 	bl	8001590 <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055da:	1a9b      	subs	r3, r3, r2
 80055dc:	683a      	ldr	r2, [r7, #0]
 80055de:	4413      	add	r3, r2
 80055e0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80055e2:	f7fb ffd5 	bl	8001590 <HAL_GetTick>
 80055e6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	330c      	adds	r3, #12
 80055ee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80055f0:	4b3d      	ldr	r3, [pc, #244]	; (80056e8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	4613      	mov	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4413      	add	r3, r2
 80055fa:	00da      	lsls	r2, r3, #3
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	0d1b      	lsrs	r3, r3, #20
 8005600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005602:	fb02 f303 	mul.w	r3, r2, r3
 8005606:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005608:	e060      	b.n	80056cc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005610:	d107      	bne.n	8005622 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d104      	bne.n	8005622 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	b2db      	uxtb	r3, r3
 800561e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005620:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005628:	d050      	beq.n	80056cc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800562a:	f7fb ffb1 	bl	8001590 <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005636:	429a      	cmp	r2, r3
 8005638:	d902      	bls.n	8005640 <SPI_WaitFifoStateUntilTimeout+0x80>
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	2b00      	cmp	r3, #0
 800563e:	d13d      	bne.n	80056bc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800564e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005658:	d111      	bne.n	800567e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005662:	d004      	beq.n	800566e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800566c:	d107      	bne.n	800567e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800567c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005686:	d10f      	bne.n	80056a8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005696:	601a      	str	r2, [r3, #0]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e010      	b.n	80056de <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80056c2:	2300      	movs	r3, #0
 80056c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	3b01      	subs	r3, #1
 80056ca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689a      	ldr	r2, [r3, #8]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	4013      	ands	r3, r2
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d196      	bne.n	800560a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3728      	adds	r7, #40	; 0x28
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	20000000 	.word	0x20000000

080056ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b086      	sub	sp, #24
 80056f0:	af02      	add	r7, sp, #8
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2200      	movs	r2, #0
 8005700:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f7ff ff5b 	bl	80055c0 <SPI_WaitFifoStateUntilTimeout>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d007      	beq.n	8005720 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005714:	f043 0220 	orr.w	r2, r3, #32
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e027      	b.n	8005770 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	2200      	movs	r2, #0
 8005728:	2180      	movs	r1, #128	; 0x80
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f7ff fec0 	bl	80054b0 <SPI_WaitFlagStateUntilTimeout>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d007      	beq.n	8005746 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800573a:	f043 0220 	orr.w	r2, r3, #32
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e014      	b.n	8005770 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	9300      	str	r3, [sp, #0]
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	2200      	movs	r2, #0
 800574e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f7ff ff34 	bl	80055c0 <SPI_WaitFifoStateUntilTimeout>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d007      	beq.n	800576e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005762:	f043 0220 	orr.w	r2, r3, #32
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e000      	b.n	8005770 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e049      	b.n	800581e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d106      	bne.n	80057a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7fb fd24 	bl	80011ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2202      	movs	r2, #2
 80057a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	3304      	adds	r3, #4
 80057b4:	4619      	mov	r1, r3
 80057b6:	4610      	mov	r0, r2
 80057b8:	f000 f9da 	bl	8005b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3708      	adds	r7, #8
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
	...

08005828 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005836:	b2db      	uxtb	r3, r3
 8005838:	2b01      	cmp	r3, #1
 800583a:	d001      	beq.n	8005840 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e040      	b.n	80058c2 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2202      	movs	r2, #2
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68da      	ldr	r2, [r3, #12]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f042 0201 	orr.w	r2, r2, #1
 8005856:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a1c      	ldr	r2, [pc, #112]	; (80058d0 <HAL_TIM_Base_Start_IT+0xa8>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d00e      	beq.n	8005880 <HAL_TIM_Base_Start_IT+0x58>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800586a:	d009      	beq.n	8005880 <HAL_TIM_Base_Start_IT+0x58>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a18      	ldr	r2, [pc, #96]	; (80058d4 <HAL_TIM_Base_Start_IT+0xac>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d004      	beq.n	8005880 <HAL_TIM_Base_Start_IT+0x58>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a17      	ldr	r2, [pc, #92]	; (80058d8 <HAL_TIM_Base_Start_IT+0xb0>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d115      	bne.n	80058ac <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689a      	ldr	r2, [r3, #8]
 8005886:	4b15      	ldr	r3, [pc, #84]	; (80058dc <HAL_TIM_Base_Start_IT+0xb4>)
 8005888:	4013      	ands	r3, r2
 800588a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2b06      	cmp	r3, #6
 8005890:	d015      	beq.n	80058be <HAL_TIM_Base_Start_IT+0x96>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005898:	d011      	beq.n	80058be <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f042 0201 	orr.w	r2, r2, #1
 80058a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058aa:	e008      	b.n	80058be <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0201 	orr.w	r2, r2, #1
 80058ba:	601a      	str	r2, [r3, #0]
 80058bc:	e000      	b.n	80058c0 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3714      	adds	r7, #20
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	40012c00 	.word	0x40012c00
 80058d4:	40000400 	.word	0x40000400
 80058d8:	40014000 	.word	0x40014000
 80058dc:	00010007 	.word	0x00010007

080058e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f003 0302 	and.w	r3, r3, #2
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d122      	bne.n	800593c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f003 0302 	and.w	r3, r3, #2
 8005900:	2b02      	cmp	r3, #2
 8005902:	d11b      	bne.n	800593c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f06f 0202 	mvn.w	r2, #2
 800590c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2201      	movs	r2, #1
 8005912:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	f003 0303 	and.w	r3, r3, #3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f905 	bl	8005b32 <HAL_TIM_IC_CaptureCallback>
 8005928:	e005      	b.n	8005936 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f8f7 	bl	8005b1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 f908 	bl	8005b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	f003 0304 	and.w	r3, r3, #4
 8005946:	2b04      	cmp	r3, #4
 8005948:	d122      	bne.n	8005990 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f003 0304 	and.w	r3, r3, #4
 8005954:	2b04      	cmp	r3, #4
 8005956:	d11b      	bne.n	8005990 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f06f 0204 	mvn.w	r2, #4
 8005960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2202      	movs	r2, #2
 8005966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005972:	2b00      	cmp	r3, #0
 8005974:	d003      	beq.n	800597e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f8db 	bl	8005b32 <HAL_TIM_IC_CaptureCallback>
 800597c:	e005      	b.n	800598a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f8cd 	bl	8005b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f8de 	bl	8005b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	f003 0308 	and.w	r3, r3, #8
 800599a:	2b08      	cmp	r3, #8
 800599c:	d122      	bne.n	80059e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	f003 0308 	and.w	r3, r3, #8
 80059a8:	2b08      	cmp	r3, #8
 80059aa:	d11b      	bne.n	80059e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f06f 0208 	mvn.w	r2, #8
 80059b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2204      	movs	r2, #4
 80059ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	f003 0303 	and.w	r3, r3, #3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d003      	beq.n	80059d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f8b1 	bl	8005b32 <HAL_TIM_IC_CaptureCallback>
 80059d0:	e005      	b.n	80059de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f8a3 	bl	8005b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 f8b4 	bl	8005b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	f003 0310 	and.w	r3, r3, #16
 80059ee:	2b10      	cmp	r3, #16
 80059f0:	d122      	bne.n	8005a38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	f003 0310 	and.w	r3, r3, #16
 80059fc:	2b10      	cmp	r3, #16
 80059fe:	d11b      	bne.n	8005a38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f06f 0210 	mvn.w	r2, #16
 8005a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2208      	movs	r2, #8
 8005a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d003      	beq.n	8005a26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f887 	bl	8005b32 <HAL_TIM_IC_CaptureCallback>
 8005a24:	e005      	b.n	8005a32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f879 	bl	8005b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 f88a 	bl	8005b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d10e      	bne.n	8005a64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f003 0301 	and.w	r3, r3, #1
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d107      	bne.n	8005a64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f06f 0201 	mvn.w	r2, #1
 8005a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7fb faa2 	bl	8000fa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a6e:	2b80      	cmp	r3, #128	; 0x80
 8005a70:	d10e      	bne.n	8005a90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a7c:	2b80      	cmp	r3, #128	; 0x80
 8005a7e:	d107      	bne.n	8005a90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f8e8 	bl	8005c60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a9e:	d10e      	bne.n	8005abe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aaa:	2b80      	cmp	r3, #128	; 0x80
 8005aac:	d107      	bne.n	8005abe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 f8db 	bl	8005c74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac8:	2b40      	cmp	r3, #64	; 0x40
 8005aca:	d10e      	bne.n	8005aea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad6:	2b40      	cmp	r3, #64	; 0x40
 8005ad8:	d107      	bne.n	8005aea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f838 	bl	8005b5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	f003 0320 	and.w	r3, r3, #32
 8005af4:	2b20      	cmp	r3, #32
 8005af6:	d10e      	bne.n	8005b16 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	f003 0320 	and.w	r3, r3, #32
 8005b02:	2b20      	cmp	r3, #32
 8005b04:	d107      	bne.n	8005b16 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f06f 0220 	mvn.w	r2, #32
 8005b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 f89b 	bl	8005c4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b16:	bf00      	nop
 8005b18:	3708      	adds	r7, #8
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b083      	sub	sp, #12
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b26:	bf00      	nop
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b083      	sub	sp, #12
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b3a:	bf00      	nop
 8005b3c:	370c      	adds	r7, #12
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr

08005b46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b46:	b480      	push	{r7}
 8005b48:	b083      	sub	sp, #12
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b4e:	bf00      	nop
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b083      	sub	sp, #12
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b62:	bf00      	nop
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
	...

08005b70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a2e      	ldr	r2, [pc, #184]	; (8005c3c <TIM_Base_SetConfig+0xcc>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d007      	beq.n	8005b98 <TIM_Base_SetConfig+0x28>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b8e:	d003      	beq.n	8005b98 <TIM_Base_SetConfig+0x28>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a2b      	ldr	r2, [pc, #172]	; (8005c40 <TIM_Base_SetConfig+0xd0>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d108      	bne.n	8005baa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a23      	ldr	r2, [pc, #140]	; (8005c3c <TIM_Base_SetConfig+0xcc>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d00f      	beq.n	8005bd2 <TIM_Base_SetConfig+0x62>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bb8:	d00b      	beq.n	8005bd2 <TIM_Base_SetConfig+0x62>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a20      	ldr	r2, [pc, #128]	; (8005c40 <TIM_Base_SetConfig+0xd0>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d007      	beq.n	8005bd2 <TIM_Base_SetConfig+0x62>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a1f      	ldr	r2, [pc, #124]	; (8005c44 <TIM_Base_SetConfig+0xd4>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d003      	beq.n	8005bd2 <TIM_Base_SetConfig+0x62>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a1e      	ldr	r2, [pc, #120]	; (8005c48 <TIM_Base_SetConfig+0xd8>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d108      	bne.n	8005be4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	689a      	ldr	r2, [r3, #8]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a0c      	ldr	r2, [pc, #48]	; (8005c3c <TIM_Base_SetConfig+0xcc>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d007      	beq.n	8005c20 <TIM_Base_SetConfig+0xb0>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a0c      	ldr	r2, [pc, #48]	; (8005c44 <TIM_Base_SetConfig+0xd4>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d003      	beq.n	8005c20 <TIM_Base_SetConfig+0xb0>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a0b      	ldr	r2, [pc, #44]	; (8005c48 <TIM_Base_SetConfig+0xd8>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d103      	bne.n	8005c28 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	691a      	ldr	r2, [r3, #16]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	615a      	str	r2, [r3, #20]
}
 8005c2e:	bf00      	nop
 8005c30:	3714      	adds	r7, #20
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	40012c00 	.word	0x40012c00
 8005c40:	40000400 	.word	0x40000400
 8005c44:	40014000 	.word	0x40014000
 8005c48:	40014400 	.word	0x40014400

08005c4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d101      	bne.n	8005c9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e040      	b.n	8005d1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d106      	bne.n	8005cb0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7fb fabe 	bl	800122c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2224      	movs	r2, #36	; 0x24
 8005cb4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 0201 	bic.w	r2, r2, #1
 8005cc4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f8c0 	bl	8005e4c <UART_SetConfig>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d101      	bne.n	8005cd6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e022      	b.n	8005d1c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d002      	beq.n	8005ce4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fb3a 	bl	8006358 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	685a      	ldr	r2, [r3, #4]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cf2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689a      	ldr	r2, [r3, #8]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f042 0201 	orr.w	r2, r2, #1
 8005d12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 fbc1 	bl	800649c <UART_CheckIdleState>
 8005d1a:	4603      	mov	r3, r0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3708      	adds	r7, #8
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b08a      	sub	sp, #40	; 0x28
 8005d28:	af02      	add	r7, sp, #8
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	603b      	str	r3, [r7, #0]
 8005d30:	4613      	mov	r3, r2
 8005d32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d38:	2b20      	cmp	r3, #32
 8005d3a:	f040 8082 	bne.w	8005e42 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d002      	beq.n	8005d4a <HAL_UART_Transmit+0x26>
 8005d44:	88fb      	ldrh	r3, [r7, #6]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d101      	bne.n	8005d4e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e07a      	b.n	8005e44 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d101      	bne.n	8005d5c <HAL_UART_Transmit+0x38>
 8005d58:	2302      	movs	r3, #2
 8005d5a:	e073      	b.n	8005e44 <HAL_UART_Transmit+0x120>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2221      	movs	r2, #33	; 0x21
 8005d70:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d72:	f7fb fc0d 	bl	8001590 <HAL_GetTick>
 8005d76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	88fa      	ldrh	r2, [r7, #6]
 8005d7c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	88fa      	ldrh	r2, [r7, #6]
 8005d84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d90:	d108      	bne.n	8005da4 <HAL_UART_Transmit+0x80>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d104      	bne.n	8005da4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	61bb      	str	r3, [r7, #24]
 8005da2:	e003      	b.n	8005dac <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005da8:	2300      	movs	r3, #0
 8005daa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005db4:	e02d      	b.n	8005e12 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	2180      	movs	r1, #128	; 0x80
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f000 fbb4 	bl	800652e <UART_WaitOnFlagUntilTimeout>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d001      	beq.n	8005dd0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e039      	b.n	8005e44 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d10b      	bne.n	8005dee <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	881a      	ldrh	r2, [r3, #0]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005de2:	b292      	uxth	r2, r2
 8005de4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	3302      	adds	r3, #2
 8005dea:	61bb      	str	r3, [r7, #24]
 8005dec:	e008      	b.n	8005e00 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	781a      	ldrb	r2, [r3, #0]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	b292      	uxth	r2, r2
 8005df8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1cb      	bne.n	8005db6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	9300      	str	r3, [sp, #0]
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	2200      	movs	r2, #0
 8005e26:	2140      	movs	r1, #64	; 0x40
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f000 fb80 	bl	800652e <UART_WaitOnFlagUntilTimeout>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d001      	beq.n	8005e38 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e005      	b.n	8005e44 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2220      	movs	r2, #32
 8005e3c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	e000      	b.n	8005e44 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005e42:	2302      	movs	r3, #2
  }
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3720      	adds	r7, #32
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e50:	b08a      	sub	sp, #40	; 0x28
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e56:	2300      	movs	r3, #0
 8005e58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	689a      	ldr	r2, [r3, #8]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	431a      	orrs	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	431a      	orrs	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	69db      	ldr	r3, [r3, #28]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	4ba5      	ldr	r3, [pc, #660]	; (8006110 <UART_SetConfig+0x2c4>)
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	6812      	ldr	r2, [r2, #0]
 8005e82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e84:	430b      	orrs	r3, r1
 8005e86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	68da      	ldr	r2, [r3, #12]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a9a      	ldr	r2, [pc, #616]	; (8006114 <UART_SetConfig+0x2c8>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d004      	beq.n	8005eb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a91      	ldr	r2, [pc, #580]	; (8006118 <UART_SetConfig+0x2cc>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d126      	bne.n	8005f24 <UART_SetConfig+0xd8>
 8005ed6:	4b91      	ldr	r3, [pc, #580]	; (800611c <UART_SetConfig+0x2d0>)
 8005ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005edc:	f003 0303 	and.w	r3, r3, #3
 8005ee0:	2b03      	cmp	r3, #3
 8005ee2:	d81b      	bhi.n	8005f1c <UART_SetConfig+0xd0>
 8005ee4:	a201      	add	r2, pc, #4	; (adr r2, 8005eec <UART_SetConfig+0xa0>)
 8005ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eea:	bf00      	nop
 8005eec:	08005efd 	.word	0x08005efd
 8005ef0:	08005f0d 	.word	0x08005f0d
 8005ef4:	08005f05 	.word	0x08005f05
 8005ef8:	08005f15 	.word	0x08005f15
 8005efc:	2301      	movs	r3, #1
 8005efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f02:	e0d6      	b.n	80060b2 <UART_SetConfig+0x266>
 8005f04:	2302      	movs	r3, #2
 8005f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f0a:	e0d2      	b.n	80060b2 <UART_SetConfig+0x266>
 8005f0c:	2304      	movs	r3, #4
 8005f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f12:	e0ce      	b.n	80060b2 <UART_SetConfig+0x266>
 8005f14:	2308      	movs	r3, #8
 8005f16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f1a:	e0ca      	b.n	80060b2 <UART_SetConfig+0x266>
 8005f1c:	2310      	movs	r3, #16
 8005f1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f22:	e0c6      	b.n	80060b2 <UART_SetConfig+0x266>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a7d      	ldr	r2, [pc, #500]	; (8006120 <UART_SetConfig+0x2d4>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d138      	bne.n	8005fa0 <UART_SetConfig+0x154>
 8005f2e:	4b7b      	ldr	r3, [pc, #492]	; (800611c <UART_SetConfig+0x2d0>)
 8005f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f34:	f003 030c 	and.w	r3, r3, #12
 8005f38:	2b0c      	cmp	r3, #12
 8005f3a:	d82d      	bhi.n	8005f98 <UART_SetConfig+0x14c>
 8005f3c:	a201      	add	r2, pc, #4	; (adr r2, 8005f44 <UART_SetConfig+0xf8>)
 8005f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f42:	bf00      	nop
 8005f44:	08005f79 	.word	0x08005f79
 8005f48:	08005f99 	.word	0x08005f99
 8005f4c:	08005f99 	.word	0x08005f99
 8005f50:	08005f99 	.word	0x08005f99
 8005f54:	08005f89 	.word	0x08005f89
 8005f58:	08005f99 	.word	0x08005f99
 8005f5c:	08005f99 	.word	0x08005f99
 8005f60:	08005f99 	.word	0x08005f99
 8005f64:	08005f81 	.word	0x08005f81
 8005f68:	08005f99 	.word	0x08005f99
 8005f6c:	08005f99 	.word	0x08005f99
 8005f70:	08005f99 	.word	0x08005f99
 8005f74:	08005f91 	.word	0x08005f91
 8005f78:	2300      	movs	r3, #0
 8005f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f7e:	e098      	b.n	80060b2 <UART_SetConfig+0x266>
 8005f80:	2302      	movs	r3, #2
 8005f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f86:	e094      	b.n	80060b2 <UART_SetConfig+0x266>
 8005f88:	2304      	movs	r3, #4
 8005f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f8e:	e090      	b.n	80060b2 <UART_SetConfig+0x266>
 8005f90:	2308      	movs	r3, #8
 8005f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f96:	e08c      	b.n	80060b2 <UART_SetConfig+0x266>
 8005f98:	2310      	movs	r3, #16
 8005f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f9e:	e088      	b.n	80060b2 <UART_SetConfig+0x266>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a5f      	ldr	r2, [pc, #380]	; (8006124 <UART_SetConfig+0x2d8>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d125      	bne.n	8005ff6 <UART_SetConfig+0x1aa>
 8005faa:	4b5c      	ldr	r3, [pc, #368]	; (800611c <UART_SetConfig+0x2d0>)
 8005fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005fb4:	2b30      	cmp	r3, #48	; 0x30
 8005fb6:	d016      	beq.n	8005fe6 <UART_SetConfig+0x19a>
 8005fb8:	2b30      	cmp	r3, #48	; 0x30
 8005fba:	d818      	bhi.n	8005fee <UART_SetConfig+0x1a2>
 8005fbc:	2b20      	cmp	r3, #32
 8005fbe:	d00a      	beq.n	8005fd6 <UART_SetConfig+0x18a>
 8005fc0:	2b20      	cmp	r3, #32
 8005fc2:	d814      	bhi.n	8005fee <UART_SetConfig+0x1a2>
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d002      	beq.n	8005fce <UART_SetConfig+0x182>
 8005fc8:	2b10      	cmp	r3, #16
 8005fca:	d008      	beq.n	8005fde <UART_SetConfig+0x192>
 8005fcc:	e00f      	b.n	8005fee <UART_SetConfig+0x1a2>
 8005fce:	2300      	movs	r3, #0
 8005fd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fd4:	e06d      	b.n	80060b2 <UART_SetConfig+0x266>
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fdc:	e069      	b.n	80060b2 <UART_SetConfig+0x266>
 8005fde:	2304      	movs	r3, #4
 8005fe0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fe4:	e065      	b.n	80060b2 <UART_SetConfig+0x266>
 8005fe6:	2308      	movs	r3, #8
 8005fe8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fec:	e061      	b.n	80060b2 <UART_SetConfig+0x266>
 8005fee:	2310      	movs	r3, #16
 8005ff0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ff4:	e05d      	b.n	80060b2 <UART_SetConfig+0x266>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a4b      	ldr	r2, [pc, #300]	; (8006128 <UART_SetConfig+0x2dc>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d125      	bne.n	800604c <UART_SetConfig+0x200>
 8006000:	4b46      	ldr	r3, [pc, #280]	; (800611c <UART_SetConfig+0x2d0>)
 8006002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006006:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800600a:	2bc0      	cmp	r3, #192	; 0xc0
 800600c:	d016      	beq.n	800603c <UART_SetConfig+0x1f0>
 800600e:	2bc0      	cmp	r3, #192	; 0xc0
 8006010:	d818      	bhi.n	8006044 <UART_SetConfig+0x1f8>
 8006012:	2b80      	cmp	r3, #128	; 0x80
 8006014:	d00a      	beq.n	800602c <UART_SetConfig+0x1e0>
 8006016:	2b80      	cmp	r3, #128	; 0x80
 8006018:	d814      	bhi.n	8006044 <UART_SetConfig+0x1f8>
 800601a:	2b00      	cmp	r3, #0
 800601c:	d002      	beq.n	8006024 <UART_SetConfig+0x1d8>
 800601e:	2b40      	cmp	r3, #64	; 0x40
 8006020:	d008      	beq.n	8006034 <UART_SetConfig+0x1e8>
 8006022:	e00f      	b.n	8006044 <UART_SetConfig+0x1f8>
 8006024:	2300      	movs	r3, #0
 8006026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800602a:	e042      	b.n	80060b2 <UART_SetConfig+0x266>
 800602c:	2302      	movs	r3, #2
 800602e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006032:	e03e      	b.n	80060b2 <UART_SetConfig+0x266>
 8006034:	2304      	movs	r3, #4
 8006036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800603a:	e03a      	b.n	80060b2 <UART_SetConfig+0x266>
 800603c:	2308      	movs	r3, #8
 800603e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006042:	e036      	b.n	80060b2 <UART_SetConfig+0x266>
 8006044:	2310      	movs	r3, #16
 8006046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800604a:	e032      	b.n	80060b2 <UART_SetConfig+0x266>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a30      	ldr	r2, [pc, #192]	; (8006114 <UART_SetConfig+0x2c8>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d12a      	bne.n	80060ac <UART_SetConfig+0x260>
 8006056:	4b31      	ldr	r3, [pc, #196]	; (800611c <UART_SetConfig+0x2d0>)
 8006058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800605c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006060:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006064:	d01a      	beq.n	800609c <UART_SetConfig+0x250>
 8006066:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800606a:	d81b      	bhi.n	80060a4 <UART_SetConfig+0x258>
 800606c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006070:	d00c      	beq.n	800608c <UART_SetConfig+0x240>
 8006072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006076:	d815      	bhi.n	80060a4 <UART_SetConfig+0x258>
 8006078:	2b00      	cmp	r3, #0
 800607a:	d003      	beq.n	8006084 <UART_SetConfig+0x238>
 800607c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006080:	d008      	beq.n	8006094 <UART_SetConfig+0x248>
 8006082:	e00f      	b.n	80060a4 <UART_SetConfig+0x258>
 8006084:	2300      	movs	r3, #0
 8006086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800608a:	e012      	b.n	80060b2 <UART_SetConfig+0x266>
 800608c:	2302      	movs	r3, #2
 800608e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006092:	e00e      	b.n	80060b2 <UART_SetConfig+0x266>
 8006094:	2304      	movs	r3, #4
 8006096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800609a:	e00a      	b.n	80060b2 <UART_SetConfig+0x266>
 800609c:	2308      	movs	r3, #8
 800609e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060a2:	e006      	b.n	80060b2 <UART_SetConfig+0x266>
 80060a4:	2310      	movs	r3, #16
 80060a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060aa:	e002      	b.n	80060b2 <UART_SetConfig+0x266>
 80060ac:	2310      	movs	r3, #16
 80060ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a17      	ldr	r2, [pc, #92]	; (8006114 <UART_SetConfig+0x2c8>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	f040 808b 	bne.w	80061d4 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80060be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060c2:	2b08      	cmp	r3, #8
 80060c4:	d834      	bhi.n	8006130 <UART_SetConfig+0x2e4>
 80060c6:	a201      	add	r2, pc, #4	; (adr r2, 80060cc <UART_SetConfig+0x280>)
 80060c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060cc:	080060f1 	.word	0x080060f1
 80060d0:	08006131 	.word	0x08006131
 80060d4:	080060f9 	.word	0x080060f9
 80060d8:	08006131 	.word	0x08006131
 80060dc:	080060ff 	.word	0x080060ff
 80060e0:	08006131 	.word	0x08006131
 80060e4:	08006131 	.word	0x08006131
 80060e8:	08006131 	.word	0x08006131
 80060ec:	08006107 	.word	0x08006107
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060f0:	f7fd ff6e 	bl	8003fd0 <HAL_RCC_GetPCLK1Freq>
 80060f4:	61f8      	str	r0, [r7, #28]
        break;
 80060f6:	e021      	b.n	800613c <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060f8:	4b0c      	ldr	r3, [pc, #48]	; (800612c <UART_SetConfig+0x2e0>)
 80060fa:	61fb      	str	r3, [r7, #28]
        break;
 80060fc:	e01e      	b.n	800613c <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060fe:	f7fd fecf 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 8006102:	61f8      	str	r0, [r7, #28]
        break;
 8006104:	e01a      	b.n	800613c <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006106:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800610a:	61fb      	str	r3, [r7, #28]
        break;
 800610c:	e016      	b.n	800613c <UART_SetConfig+0x2f0>
 800610e:	bf00      	nop
 8006110:	efff69f3 	.word	0xefff69f3
 8006114:	40008000 	.word	0x40008000
 8006118:	40013800 	.word	0x40013800
 800611c:	40021000 	.word	0x40021000
 8006120:	40004400 	.word	0x40004400
 8006124:	40004800 	.word	0x40004800
 8006128:	40004c00 	.word	0x40004c00
 800612c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006130:	2300      	movs	r3, #0
 8006132:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800613a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	2b00      	cmp	r3, #0
 8006140:	f000 80fa 	beq.w	8006338 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	685a      	ldr	r2, [r3, #4]
 8006148:	4613      	mov	r3, r2
 800614a:	005b      	lsls	r3, r3, #1
 800614c:	4413      	add	r3, r2
 800614e:	69fa      	ldr	r2, [r7, #28]
 8006150:	429a      	cmp	r2, r3
 8006152:	d305      	bcc.n	8006160 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800615a:	69fa      	ldr	r2, [r7, #28]
 800615c:	429a      	cmp	r2, r3
 800615e:	d903      	bls.n	8006168 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006166:	e0e7      	b.n	8006338 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	2200      	movs	r2, #0
 800616c:	461c      	mov	r4, r3
 800616e:	4615      	mov	r5, r2
 8006170:	f04f 0200 	mov.w	r2, #0
 8006174:	f04f 0300 	mov.w	r3, #0
 8006178:	022b      	lsls	r3, r5, #8
 800617a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800617e:	0222      	lsls	r2, r4, #8
 8006180:	68f9      	ldr	r1, [r7, #12]
 8006182:	6849      	ldr	r1, [r1, #4]
 8006184:	0849      	lsrs	r1, r1, #1
 8006186:	2000      	movs	r0, #0
 8006188:	4688      	mov	r8, r1
 800618a:	4681      	mov	r9, r0
 800618c:	eb12 0a08 	adds.w	sl, r2, r8
 8006190:	eb43 0b09 	adc.w	fp, r3, r9
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	603b      	str	r3, [r7, #0]
 800619c:	607a      	str	r2, [r7, #4]
 800619e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061a2:	4650      	mov	r0, sl
 80061a4:	4659      	mov	r1, fp
 80061a6:	f7fa f99b 	bl	80004e0 <__aeabi_uldivmod>
 80061aa:	4602      	mov	r2, r0
 80061ac:	460b      	mov	r3, r1
 80061ae:	4613      	mov	r3, r2
 80061b0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061b8:	d308      	bcc.n	80061cc <UART_SetConfig+0x380>
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061c0:	d204      	bcs.n	80061cc <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	69ba      	ldr	r2, [r7, #24]
 80061c8:	60da      	str	r2, [r3, #12]
 80061ca:	e0b5      	b.n	8006338 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80061d2:	e0b1      	b.n	8006338 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	69db      	ldr	r3, [r3, #28]
 80061d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061dc:	d15d      	bne.n	800629a <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 80061de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061e2:	2b08      	cmp	r3, #8
 80061e4:	d827      	bhi.n	8006236 <UART_SetConfig+0x3ea>
 80061e6:	a201      	add	r2, pc, #4	; (adr r2, 80061ec <UART_SetConfig+0x3a0>)
 80061e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ec:	08006211 	.word	0x08006211
 80061f0:	08006219 	.word	0x08006219
 80061f4:	08006221 	.word	0x08006221
 80061f8:	08006237 	.word	0x08006237
 80061fc:	08006227 	.word	0x08006227
 8006200:	08006237 	.word	0x08006237
 8006204:	08006237 	.word	0x08006237
 8006208:	08006237 	.word	0x08006237
 800620c:	0800622f 	.word	0x0800622f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006210:	f7fd fede 	bl	8003fd0 <HAL_RCC_GetPCLK1Freq>
 8006214:	61f8      	str	r0, [r7, #28]
        break;
 8006216:	e014      	b.n	8006242 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006218:	f7fd fef0 	bl	8003ffc <HAL_RCC_GetPCLK2Freq>
 800621c:	61f8      	str	r0, [r7, #28]
        break;
 800621e:	e010      	b.n	8006242 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006220:	4b4c      	ldr	r3, [pc, #304]	; (8006354 <UART_SetConfig+0x508>)
 8006222:	61fb      	str	r3, [r7, #28]
        break;
 8006224:	e00d      	b.n	8006242 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006226:	f7fd fe3b 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 800622a:	61f8      	str	r0, [r7, #28]
        break;
 800622c:	e009      	b.n	8006242 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800622e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006232:	61fb      	str	r3, [r7, #28]
        break;
 8006234:	e005      	b.n	8006242 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8006236:	2300      	movs	r3, #0
 8006238:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006240:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d077      	beq.n	8006338 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	005a      	lsls	r2, r3, #1
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	085b      	lsrs	r3, r3, #1
 8006252:	441a      	add	r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	fbb2 f3f3 	udiv	r3, r2, r3
 800625c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	2b0f      	cmp	r3, #15
 8006262:	d916      	bls.n	8006292 <UART_SetConfig+0x446>
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800626a:	d212      	bcs.n	8006292 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	b29b      	uxth	r3, r3
 8006270:	f023 030f 	bic.w	r3, r3, #15
 8006274:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	085b      	lsrs	r3, r3, #1
 800627a:	b29b      	uxth	r3, r3
 800627c:	f003 0307 	and.w	r3, r3, #7
 8006280:	b29a      	uxth	r2, r3
 8006282:	8afb      	ldrh	r3, [r7, #22]
 8006284:	4313      	orrs	r3, r2
 8006286:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	8afa      	ldrh	r2, [r7, #22]
 800628e:	60da      	str	r2, [r3, #12]
 8006290:	e052      	b.n	8006338 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006298:	e04e      	b.n	8006338 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 800629a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800629e:	2b08      	cmp	r3, #8
 80062a0:	d827      	bhi.n	80062f2 <UART_SetConfig+0x4a6>
 80062a2:	a201      	add	r2, pc, #4	; (adr r2, 80062a8 <UART_SetConfig+0x45c>)
 80062a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a8:	080062cd 	.word	0x080062cd
 80062ac:	080062d5 	.word	0x080062d5
 80062b0:	080062dd 	.word	0x080062dd
 80062b4:	080062f3 	.word	0x080062f3
 80062b8:	080062e3 	.word	0x080062e3
 80062bc:	080062f3 	.word	0x080062f3
 80062c0:	080062f3 	.word	0x080062f3
 80062c4:	080062f3 	.word	0x080062f3
 80062c8:	080062eb 	.word	0x080062eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062cc:	f7fd fe80 	bl	8003fd0 <HAL_RCC_GetPCLK1Freq>
 80062d0:	61f8      	str	r0, [r7, #28]
        break;
 80062d2:	e014      	b.n	80062fe <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062d4:	f7fd fe92 	bl	8003ffc <HAL_RCC_GetPCLK2Freq>
 80062d8:	61f8      	str	r0, [r7, #28]
        break;
 80062da:	e010      	b.n	80062fe <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062dc:	4b1d      	ldr	r3, [pc, #116]	; (8006354 <UART_SetConfig+0x508>)
 80062de:	61fb      	str	r3, [r7, #28]
        break;
 80062e0:	e00d      	b.n	80062fe <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062e2:	f7fd fddd 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 80062e6:	61f8      	str	r0, [r7, #28]
        break;
 80062e8:	e009      	b.n	80062fe <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062ee:	61fb      	str	r3, [r7, #28]
        break;
 80062f0:	e005      	b.n	80062fe <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 80062f2:	2300      	movs	r3, #0
 80062f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80062fc:	bf00      	nop
    }

    if (pclk != 0U)
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d019      	beq.n	8006338 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	085a      	lsrs	r2, r3, #1
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	441a      	add	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	fbb2 f3f3 	udiv	r3, r2, r3
 8006316:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	2b0f      	cmp	r3, #15
 800631c:	d909      	bls.n	8006332 <UART_SetConfig+0x4e6>
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006324:	d205      	bcs.n	8006332 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	b29a      	uxth	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	60da      	str	r2, [r3, #12]
 8006330:	e002      	b.n	8006338 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006344:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006348:	4618      	mov	r0, r3
 800634a:	3728      	adds	r7, #40	; 0x28
 800634c:	46bd      	mov	sp, r7
 800634e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006352:	bf00      	nop
 8006354:	00f42400 	.word	0x00f42400

08006358 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006364:	f003 0301 	and.w	r3, r3, #1
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00a      	beq.n	8006382 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006386:	f003 0302 	and.w	r3, r3, #2
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00a      	beq.n	80063a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	430a      	orrs	r2, r1
 80063a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a8:	f003 0304 	and.w	r3, r3, #4
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00a      	beq.n	80063c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	430a      	orrs	r2, r1
 80063c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ca:	f003 0308 	and.w	r3, r3, #8
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00a      	beq.n	80063e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	430a      	orrs	r2, r1
 80063e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ec:	f003 0310 	and.w	r3, r3, #16
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00a      	beq.n	800640a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	430a      	orrs	r2, r1
 8006408:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640e:	f003 0320 	and.w	r3, r3, #32
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00a      	beq.n	800642c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	430a      	orrs	r2, r1
 800642a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006434:	2b00      	cmp	r3, #0
 8006436:	d01a      	beq.n	800646e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	430a      	orrs	r2, r1
 800644c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006452:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006456:	d10a      	bne.n	800646e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	430a      	orrs	r2, r1
 800646c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00a      	beq.n	8006490 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	430a      	orrs	r2, r1
 800648e:	605a      	str	r2, [r3, #4]
  }
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af02      	add	r7, sp, #8
 80064a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064ac:	f7fb f870 	bl	8001590 <HAL_GetTick>
 80064b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0308 	and.w	r3, r3, #8
 80064bc:	2b08      	cmp	r3, #8
 80064be:	d10e      	bne.n	80064de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f82d 	bl	800652e <UART_WaitOnFlagUntilTimeout>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e023      	b.n	8006526 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0304 	and.w	r3, r3, #4
 80064e8:	2b04      	cmp	r3, #4
 80064ea:	d10e      	bne.n	800650a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064f0:	9300      	str	r3, [sp, #0]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f817 	bl	800652e <UART_WaitOnFlagUntilTimeout>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d001      	beq.n	800650a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e00d      	b.n	8006526 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2220      	movs	r2, #32
 800650e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2220      	movs	r2, #32
 8006514:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3710      	adds	r7, #16
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}

0800652e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b09c      	sub	sp, #112	; 0x70
 8006532:	af00      	add	r7, sp, #0
 8006534:	60f8      	str	r0, [r7, #12]
 8006536:	60b9      	str	r1, [r7, #8]
 8006538:	603b      	str	r3, [r7, #0]
 800653a:	4613      	mov	r3, r2
 800653c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800653e:	e0a5      	b.n	800668c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006540:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006546:	f000 80a1 	beq.w	800668c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800654a:	f7fb f821 	bl	8001590 <HAL_GetTick>
 800654e:	4602      	mov	r2, r0
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006556:	429a      	cmp	r2, r3
 8006558:	d302      	bcc.n	8006560 <UART_WaitOnFlagUntilTimeout+0x32>
 800655a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800655c:	2b00      	cmp	r3, #0
 800655e:	d13e      	bne.n	80065de <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006568:	e853 3f00 	ldrex	r3, [r3]
 800656c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800656e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006570:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006574:	667b      	str	r3, [r7, #100]	; 0x64
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	461a      	mov	r2, r3
 800657c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800657e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006580:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006582:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006584:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006586:	e841 2300 	strex	r3, r2, [r1]
 800658a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800658c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1e6      	bne.n	8006560 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	3308      	adds	r3, #8
 8006598:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800659c:	e853 3f00 	ldrex	r3, [r3]
 80065a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a4:	f023 0301 	bic.w	r3, r3, #1
 80065a8:	663b      	str	r3, [r7, #96]	; 0x60
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	3308      	adds	r3, #8
 80065b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80065b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80065b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065ba:	e841 2300 	strex	r3, r2, [r1]
 80065be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80065c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1e5      	bne.n	8006592 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2220      	movs	r2, #32
 80065ca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2220      	movs	r2, #32
 80065d0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e067      	b.n	80066ae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0304 	and.w	r3, r3, #4
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d04f      	beq.n	800668c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	69db      	ldr	r3, [r3, #28]
 80065f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065fa:	d147      	bne.n	800668c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006604:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660e:	e853 3f00 	ldrex	r3, [r3]
 8006612:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800661a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	461a      	mov	r2, r3
 8006622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006624:	637b      	str	r3, [r7, #52]	; 0x34
 8006626:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006628:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800662a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800662c:	e841 2300 	strex	r3, r2, [r1]
 8006630:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1e6      	bne.n	8006606 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	3308      	adds	r3, #8
 800663e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	e853 3f00 	ldrex	r3, [r3]
 8006646:	613b      	str	r3, [r7, #16]
   return(result);
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	f023 0301 	bic.w	r3, r3, #1
 800664e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	3308      	adds	r3, #8
 8006656:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006658:	623a      	str	r2, [r7, #32]
 800665a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665c:	69f9      	ldr	r1, [r7, #28]
 800665e:	6a3a      	ldr	r2, [r7, #32]
 8006660:	e841 2300 	strex	r3, r2, [r1]
 8006664:	61bb      	str	r3, [r7, #24]
   return(result);
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1e5      	bne.n	8006638 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2220      	movs	r2, #32
 8006670:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2220      	movs	r2, #32
 8006676:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2220      	movs	r2, #32
 800667c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e010      	b.n	80066ae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	69da      	ldr	r2, [r3, #28]
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	4013      	ands	r3, r2
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	429a      	cmp	r2, r3
 800669a:	bf0c      	ite	eq
 800669c:	2301      	moveq	r3, #1
 800669e:	2300      	movne	r3, #0
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	461a      	mov	r2, r3
 80066a4:	79fb      	ldrb	r3, [r7, #7]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	f43f af4a 	beq.w	8006540 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3770      	adds	r7, #112	; 0x70
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
	...

080066b8 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b096      	sub	sp, #88	; 0x58
 80066bc:	af02      	add	r7, sp, #8
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
 80066c4:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 80066c6:	2234      	movs	r2, #52	; 0x34
 80066c8:	2100      	movs	r1, #0
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f009 f9b8 	bl	800fa40 <memset>

    /* Round the pool size down to something that is evenly divisible by 
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	f023 0303 	bic.w	r3, r3, #3
 80066d6:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the 
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	f1a3 0208 	sub.w	r2, r3, #8
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2202      	movs	r2, #2
 8006704:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */
    
    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	617b      	str	r3, [r7, #20]
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	4413      	add	r3, r2
 8006710:	617b      	str	r3, [r7, #20]

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	3b04      	subs	r3, #4
 8006716:	617b      	str	r3, [r7, #20]

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	647b      	str	r3, [r7, #68]	; 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  temp_ptr;
 8006720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006722:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006724:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	3b04      	subs	r3, #4
 800672a:	617b      	str	r3, [r7, #20]
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	647b      	str	r3, [r7, #68]	; 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800673a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800673c:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  block_ptr;
 800673e:	697a      	ldr	r2, [r7, #20]
 8006740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006742:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	617b      	str	r3, [r7, #20]
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	3304      	adds	r3, #4
 800674c:	617b      	str	r3, [r7, #20]
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	63fb      	str	r3, [r7, #60]	; 0x3c
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8006752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006754:	4a5d      	ldr	r2, [pc, #372]	; (80068cc <_tx_byte_pool_create+0x214>)
 8006756:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	621a      	str	r2, [r3, #32]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800675e:	f3ef 8310 	mrs	r3, PRIMASK
 8006762:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return(posture);
 8006764:	6a7b      	ldr	r3, [r7, #36]	; 0x24

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 8006766:	623b      	str	r3, [r7, #32]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8006768:	b672      	cpsid	i
#endif
    return(int_posture);
 800676a:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800676c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	4a57      	ldr	r2, [pc, #348]	; (80068d0 <_tx_byte_pool_create+0x218>)
 8006772:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8006774:	4b57      	ldr	r3, [pc, #348]	; (80068d4 <_tx_byte_pool_create+0x21c>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d109      	bne.n	8006790 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800677c:	4a56      	ldr	r2, [pc, #344]	; (80068d8 <_tx_byte_pool_create+0x220>)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	631a      	str	r2, [r3, #48]	; 0x30
 800678e:	e011      	b.n	80067b4 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8006790:	4b51      	ldr	r3, [pc, #324]	; (80068d8 <_tx_byte_pool_create+0x220>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	637b      	str	r3, [r7, #52]	; 0x34
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8006796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679a:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800679c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 80067a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ac:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067b2:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 80067b4:	4b47      	ldr	r3, [pc, #284]	; (80068d4 <_tx_byte_pool_create+0x21c>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	3301      	adds	r3, #1
 80067ba:	4a46      	ldr	r2, [pc, #280]	; (80068d4 <_tx_byte_pool_create+0x21c>)
 80067bc:	6013      	str	r3, [r2, #0]
    
    /* Optional byte pool create extended processing.  */
    TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_BYTE_POOL, pool_ptr, name_ptr, pool_size, 0)
 80067be:	2300      	movs	r3, #0
 80067c0:	9300      	str	r3, [sp, #0]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	68f9      	ldr	r1, [r7, #12]
 80067c8:	2008      	movs	r0, #8
 80067ca:	f002 fd6d 	bl	80092a8 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_BYTE_POOL_CREATE, pool_ptr, TX_POINTER_TO_ULONG_CONVERT(pool_start), pool_size, TX_POINTER_TO_ULONG_CONVERT(&block_ptr), TX_TRACE_BYTE_POOL_EVENTS)
 80067ce:	4b43      	ldr	r3, [pc, #268]	; (80068dc <_tx_byte_pool_create+0x224>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d06c      	beq.n	80068b4 <_tx_byte_pool_create+0x1fc>
 80067da:	4b41      	ldr	r3, [pc, #260]	; (80068e0 <_tx_byte_pool_create+0x228>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0304 	and.w	r3, r3, #4
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d066      	beq.n	80068b4 <_tx_byte_pool_create+0x1fc>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80067e6:	f3ef 8305 	mrs	r3, IPSR
 80067ea:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 80067ec:	69fa      	ldr	r2, [r7, #28]
 80067ee:	4b3d      	ldr	r3, [pc, #244]	; (80068e4 <_tx_byte_pool_create+0x22c>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80067f6:	4b3c      	ldr	r3, [pc, #240]	; (80068e8 <_tx_byte_pool_create+0x230>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80067fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10b      	bne.n	800681a <_tx_byte_pool_create+0x162>
 8006802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006806:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800680a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800680c:	041a      	lsls	r2, r3, #16
 800680e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006810:	4313      	orrs	r3, r2
 8006812:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006816:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006818:	e00e      	b.n	8006838 <_tx_byte_pool_create+0x180>
 800681a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8006820:	d205      	bcs.n	800682e <_tx_byte_pool_create+0x176>
 8006822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006824:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006826:	f04f 33ff 	mov.w	r3, #4294967295
 800682a:	64bb      	str	r3, [r7, #72]	; 0x48
 800682c:	e004      	b.n	8006838 <_tx_byte_pool_create+0x180>
 800682e:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8006832:	64bb      	str	r3, [r7, #72]	; 0x48
 8006834:	2300      	movs	r3, #0
 8006836:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006838:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800683a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683c:	601a      	str	r2, [r3, #0]
 800683e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006840:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006842:	605a      	str	r2, [r3, #4]
 8006844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006846:	2215      	movs	r2, #21
 8006848:	609a      	str	r2, [r3, #8]
 800684a:	4b28      	ldr	r3, [pc, #160]	; (80068ec <_tx_byte_pool_create+0x234>)
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006850:	60da      	str	r2, [r3, #12]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006856:	611a      	str	r2, [r3, #16]
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685c:	615a      	str	r2, [r3, #20]
 800685e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006860:	683a      	ldr	r2, [r7, #0]
 8006862:	619a      	str	r2, [r3, #24]
 8006864:	f107 0214 	add.w	r2, r7, #20
 8006868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686a:	61da      	str	r2, [r3, #28]
 800686c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686e:	3320      	adds	r3, #32
 8006870:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006872:	4b1f      	ldr	r3, [pc, #124]	; (80068f0 <_tx_byte_pool_create+0x238>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006878:	429a      	cmp	r2, r3
 800687a:	d314      	bcc.n	80068a6 <_tx_byte_pool_create+0x1ee>
 800687c:	4b1d      	ldr	r3, [pc, #116]	; (80068f4 <_tx_byte_pool_create+0x23c>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006882:	4a16      	ldr	r2, [pc, #88]	; (80068dc <_tx_byte_pool_create+0x224>)
 8006884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006886:	6013      	str	r3, [r2, #0]
 8006888:	4b1b      	ldr	r3, [pc, #108]	; (80068f8 <_tx_byte_pool_create+0x240>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800688e:	621a      	str	r2, [r3, #32]
 8006890:	4b1a      	ldr	r3, [pc, #104]	; (80068fc <_tx_byte_pool_create+0x244>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00d      	beq.n	80068b4 <_tx_byte_pool_create+0x1fc>
 8006898:	4b18      	ldr	r3, [pc, #96]	; (80068fc <_tx_byte_pool_create+0x244>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a16      	ldr	r2, [pc, #88]	; (80068f8 <_tx_byte_pool_create+0x240>)
 800689e:	6812      	ldr	r2, [r2, #0]
 80068a0:	4610      	mov	r0, r2
 80068a2:	4798      	blx	r3
 80068a4:	e006      	b.n	80068b4 <_tx_byte_pool_create+0x1fc>
 80068a6:	4a0d      	ldr	r2, [pc, #52]	; (80068dc <_tx_byte_pool_create+0x224>)
 80068a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068aa:	6013      	str	r3, [r2, #0]
 80068ac:	4b12      	ldr	r3, [pc, #72]	; (80068f8 <_tx_byte_pool_create+0x240>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068b2:	621a      	str	r2, [r3, #32]
 80068b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	f383 8810 	msr	PRIMASK, r3
}
 80068be:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3750      	adds	r7, #80	; 0x50
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	ffffeeee 	.word	0xffffeeee
 80068d0:	42595445 	.word	0x42595445
 80068d4:	2000163c 	.word	0x2000163c
 80068d8:	20001638 	.word	0x20001638
 80068dc:	20001c64 	.word	0x20001c64
 80068e0:	20001c68 	.word	0x20001c68
 80068e4:	2000000c 	.word	0x2000000c
 80068e8:	20001648 	.word	0x20001648
 80068ec:	e0001004 	.word	0xe0001004
 80068f0:	20001c60 	.word	0x20001c60
 80068f4:	20001c5c 	.word	0x20001c5c
 80068f8:	20001c50 	.word	0x20001c50
 80068fc:	20001c6c 	.word	0x20001c6c

08006900 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	af00      	add	r7, sp, #0

    /* Initialize event tracing, if enabled.  */
    TX_TRACE_INITIALIZE
 8006904:	f002 fcaa 	bl	800925c <_tx_trace_initialize>

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8006908:	f001 fbe6 	bl	80080d8 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800690c:	f002 fa92 	bl	8008e34 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8006910:	4b12      	ldr	r3, [pc, #72]	; (800695c <_tx_initialize_high_level+0x5c>)
 8006912:	2200      	movs	r2, #0
 8006914:	601a      	str	r2, [r3, #0]
 8006916:	4b12      	ldr	r3, [pc, #72]	; (8006960 <_tx_initialize_high_level+0x60>)
 8006918:	2200      	movs	r2, #0
 800691a:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800691c:	4b11      	ldr	r3, [pc, #68]	; (8006964 <_tx_initialize_high_level+0x64>)
 800691e:	2200      	movs	r2, #0
 8006920:	601a      	str	r2, [r3, #0]
 8006922:	4b11      	ldr	r3, [pc, #68]	; (8006968 <_tx_initialize_high_level+0x68>)
 8006924:	2200      	movs	r2, #0
 8006926:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8006928:	4b10      	ldr	r3, [pc, #64]	; (800696c <_tx_initialize_high_level+0x6c>)
 800692a:	2200      	movs	r2, #0
 800692c:	601a      	str	r2, [r3, #0]
 800692e:	4b10      	ldr	r3, [pc, #64]	; (8006970 <_tx_initialize_high_level+0x70>)
 8006930:	2200      	movs	r2, #0
 8006932:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8006934:	4b0f      	ldr	r3, [pc, #60]	; (8006974 <_tx_initialize_high_level+0x74>)
 8006936:	2200      	movs	r2, #0
 8006938:	601a      	str	r2, [r3, #0]
 800693a:	4b0f      	ldr	r3, [pc, #60]	; (8006978 <_tx_initialize_high_level+0x78>)
 800693c:	2200      	movs	r2, #0
 800693e:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8006940:	4b0e      	ldr	r3, [pc, #56]	; (800697c <_tx_initialize_high_level+0x7c>)
 8006942:	2200      	movs	r2, #0
 8006944:	601a      	str	r2, [r3, #0]
 8006946:	4b0e      	ldr	r3, [pc, #56]	; (8006980 <_tx_initialize_high_level+0x80>)
 8006948:	2200      	movs	r2, #0
 800694a:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800694c:	4b0d      	ldr	r3, [pc, #52]	; (8006984 <_tx_initialize_high_level+0x84>)
 800694e:	2200      	movs	r2, #0
 8006950:	601a      	str	r2, [r3, #0]
 8006952:	4b0d      	ldr	r3, [pc, #52]	; (8006988 <_tx_initialize_high_level+0x88>)
 8006954:	2200      	movs	r2, #0
 8006956:	601a      	str	r2, [r3, #0]
#endif
}
 8006958:	bf00      	nop
 800695a:	bd80      	pop	{r7, pc}
 800695c:	20001610 	.word	0x20001610
 8006960:	20001614 	.word	0x20001614
 8006964:	20001618 	.word	0x20001618
 8006968:	2000161c 	.word	0x2000161c
 800696c:	20001620 	.word	0x20001620
 8006970:	20001624 	.word	0x20001624
 8006974:	20001630 	.word	0x20001630
 8006978:	20001634 	.word	0x20001634
 800697c:	20001638 	.word	0x20001638
 8006980:	2000163c 	.word	0x2000163c
 8006984:	20001628 	.word	0x20001628
 8006988:	2000162c 	.word	0x2000162c

0800698c <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8006990:	4b10      	ldr	r3, [pc, #64]	; (80069d4 <_tx_initialize_kernel_enter+0x48>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8006998:	d00c      	beq.n	80069b4 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate 
           initialization is in progress.  Note that this variable is 
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800699a:	4b0e      	ldr	r3, [pc, #56]	; (80069d4 <_tx_initialize_kernel_enter+0x48>)
 800699c:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80069a0:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 80069a2:	f7f9 fc1d 	bl	80001e0 <_tx_initialize_low_level>
    
        /* Invoke the high-level initialization to exercise all of the 
           ThreadX components and the application's initialization 
           function.  */
        _tx_initialize_high_level();
 80069a6:	f7ff ffab 	bl	8006900 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 80069aa:	4b0b      	ldr	r3, [pc, #44]	; (80069d8 <_tx_initialize_kernel_enter+0x4c>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	3301      	adds	r3, #1
 80069b0:	4a09      	ldr	r2, [pc, #36]	; (80069d8 <_tx_initialize_kernel_enter+0x4c>)
 80069b2:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate 
       initialization is in progress.  Note that this variable is 
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80069b4:	4b07      	ldr	r3, [pc, #28]	; (80069d4 <_tx_initialize_kernel_enter+0x48>)
 80069b6:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80069ba:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 80069bc:	4b07      	ldr	r3, [pc, #28]	; (80069dc <_tx_initialize_kernel_enter+0x50>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4618      	mov	r0, r3
 80069c2:	f7f9 ff0f 	bl	80007e4 <tx_application_define>

    /* Set the system state in preparation for entering the thread 
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 80069c6:	4b03      	ldr	r3, [pc, #12]	; (80069d4 <_tx_initialize_kernel_enter+0x48>)
 80069c8:	2200      	movs	r2, #0
 80069ca:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 80069cc:	f7f9 fc48 	bl	8000260 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80069d0:	bf00      	nop
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	2000000c 	.word	0x2000000c
 80069d8:	200016e0 	.word	0x200016e0
 80069dc:	20001640 	.word	0x20001640

080069e0 <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b08e      	sub	sp, #56	; 0x38
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80069ea:	f3ef 8310 	mrs	r3, PRIMASK
 80069ee:	623b      	str	r3, [r7, #32]
    return(posture);
 80069f0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80069f2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80069f4:	b672      	cpsid	i
    return(int_posture);
 80069f6:	69fb      	ldr	r3, [r7, #28]

    
#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 80069f8:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069fe:	4a37      	ldr	r2, [pc, #220]	; (8006adc <_tx_queue_cleanup+0xfc>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d161      	bne.n	8006ac8 <_tx_queue_cleanup+0xe8>
    {
    
        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d15b      	bne.n	8006ac8 <_tx_queue_cleanup+0xe8>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a14:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 8006a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d055      	beq.n	8006ac8 <_tx_queue_cleanup+0xe8>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 8006a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a2f      	ldr	r2, [pc, #188]	; (8006ae0 <_tx_queue_cleanup+0x100>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d150      	bne.n	8006ac8 <_tx_queue_cleanup+0xe8>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 8006a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d04c      	beq.n	8006ac8 <_tx_queue_cleanup+0xe8>
#endif

                        /* Yes, we still have thread suspension!  */
    
                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 8006a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a38:	1e5a      	subs	r2, r3, #1
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3c:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a42:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8006a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d103      	bne.n	8006a52 <_tx_queue_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8006a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	629a      	str	r2, [r3, #40]	; 0x28
 8006a50:	e013      	b.n	8006a7a <_tx_queue_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a56:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a5c:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8006a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a62:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8006a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a68:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 8006a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d102      	bne.n	8006a7a <_tx_queue_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 8006a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a78:	629a      	str	r2, [r3, #40]	; 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7e:	2b05      	cmp	r3, #5
 8006a80:	d122      	bne.n	8006ac8 <_tx_queue_cleanup+0xe8>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 8006a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d004      	beq.n	8006a94 <_tx_queue_cleanup+0xb4>
                            {
            
                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	220b      	movs	r2, #11
 8006a8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8006a92:	e003      	b.n	8006a9c <_tx_queue_cleanup+0xbc>
                            }
                            else
                            {
            
                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	220a      	movs	r2, #10
 8006a98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8006a9c:	4b11      	ldr	r3, [pc, #68]	; (8006ae4 <_tx_queue_cleanup+0x104>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	4a10      	ldr	r2, [pc, #64]	; (8006ae4 <_tx_queue_cleanup+0x104>)
 8006aa4:	6013      	str	r3, [r2, #0]
 8006aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aa8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	f383 8810 	msr	PRIMASK, r3
}
 8006ab0:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f001 fcd6 	bl	8008464 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006ab8:	f3ef 8310 	mrs	r3, PRIMASK
 8006abc:	61bb      	str	r3, [r7, #24]
    return(posture);
 8006abe:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8006ac0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006ac2:	b672      	cpsid	i
    return(int_posture);
 8006ac4:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8006ac6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aca:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f383 8810 	msr	PRIMASK, r3
}
 8006ad2:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8006ad4:	bf00      	nop
 8006ad6:	3738      	adds	r7, #56	; 0x38
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	080069e1 	.word	0x080069e1
 8006ae0:	51554555 	.word	0x51554555
 8006ae4:	200016e0 	.word	0x200016e0

08006ae8 <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size, 
                        VOID *queue_start, ULONG queue_size)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b094      	sub	sp, #80	; 0x50
 8006aec:	af02      	add	r7, sp, #8
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
 8006af4:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 8006af6:	2238      	movs	r2, #56	; 0x38
 8006af8:	2100      	movs	r1, #0
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f008 ffa0 	bl	800fa40 <memset>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	68ba      	ldr	r2, [r7, #8]
 8006b04:	605a      	str	r2, [r3, #4]
    
    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b16:	63fb      	str	r3, [r7, #60]	; 0x3c
    used_words =  capacity * message_size;
 8006b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	fb02 f303 	mul.w	r3, r2, r3
 8006b20:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Save the starting address and calculate the ending address of 
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	683a      	ldr	r2, [r7, #0]
 8006b26:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	699a      	ldr	r2, [r3, #24]
 8006b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	441a      	add	r2, r3
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	683a      	ldr	r2, [r7, #0]
 8006b3a:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	683a      	ldr	r2, [r7, #0]
 8006b40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b46:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b4c:	60da      	str	r2, [r3, #12]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006b4e:	f3ef 8310 	mrs	r3, PRIMASK
 8006b52:	623b      	str	r3, [r7, #32]
    return(posture);
 8006b54:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8006b56:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006b58:	b672      	cpsid	i
    return(int_posture);
 8006b5a:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 8006b5c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	4a55      	ldr	r2, [pc, #340]	; (8006cb8 <_tx_queue_create+0x1d0>)
 8006b62:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 8006b64:	4b55      	ldr	r3, [pc, #340]	; (8006cbc <_tx_queue_create+0x1d4>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d109      	bne.n	8006b80 <_tx_queue_create+0x98>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 8006b6c:	4a54      	ldr	r2, [pc, #336]	; (8006cc0 <_tx_queue_create+0x1d8>)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6013      	str	r3, [r2, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	631a      	str	r2, [r3, #48]	; 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	635a      	str	r2, [r3, #52]	; 0x34
 8006b7e:	e011      	b.n	8006ba4 <_tx_queue_create+0xbc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 8006b80:	4b4f      	ldr	r3, [pc, #316]	; (8006cc0 <_tx_queue_create+0x1d8>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	633b      	str	r3, [r7, #48]	; 0x30
        previous_queue =  next_queue -> tx_queue_created_previous;
 8006b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b8a:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 8006b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 8006b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	631a      	str	r2, [r3, #48]	; 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b9c:	635a      	str	r2, [r3, #52]	; 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ba2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 8006ba4:	4b45      	ldr	r3, [pc, #276]	; (8006cbc <_tx_queue_create+0x1d4>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	4a44      	ldr	r2, [pc, #272]	; (8006cbc <_tx_queue_create+0x1d4>)
 8006bac:	6013      	str	r3, [r2, #0]

    /* Optional queue create extended processing.  */
    TX_QUEUE_CREATE_EXTENSION(queue_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_QUEUE, queue_ptr, name_ptr, queue_size, message_size)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	9300      	str	r3, [sp, #0]
 8006bb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	68f9      	ldr	r1, [r7, #12]
 8006bb8:	2003      	movs	r0, #3
 8006bba:	f002 fb75 	bl	80092a8 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_CREATE, queue_ptr, message_size, TX_POINTER_TO_ULONG_CONVERT(queue_start), queue_size, TX_TRACE_QUEUE_EVENTS)
 8006bbe:	4b41      	ldr	r3, [pc, #260]	; (8006cc4 <_tx_queue_create+0x1dc>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d06b      	beq.n	8006ca2 <_tx_queue_create+0x1ba>
 8006bca:	4b3f      	ldr	r3, [pc, #252]	; (8006cc8 <_tx_queue_create+0x1e0>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d065      	beq.n	8006ca2 <_tx_queue_create+0x1ba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006bd6:	f3ef 8305 	mrs	r3, IPSR
 8006bda:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8006bdc:	69ba      	ldr	r2, [r7, #24]
 8006bde:	4b3b      	ldr	r3, [pc, #236]	; (8006ccc <_tx_queue_create+0x1e4>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	627b      	str	r3, [r7, #36]	; 0x24
 8006be6:	4b3a      	ldr	r3, [pc, #232]	; (8006cd0 <_tx_queue_create+0x1e8>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	643b      	str	r3, [r7, #64]	; 0x40
 8006bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10b      	bne.n	8006c0a <_tx_queue_create+0x122>
 8006bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf6:	647b      	str	r3, [r7, #68]	; 0x44
 8006bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bfc:	041a      	lsls	r2, r3, #16
 8006bfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c00:	4313      	orrs	r3, r2
 8006c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c06:	647b      	str	r3, [r7, #68]	; 0x44
 8006c08:	e00e      	b.n	8006c28 <_tx_queue_create+0x140>
 8006c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8006c10:	d205      	bcs.n	8006c1e <_tx_queue_create+0x136>
 8006c12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c14:	647b      	str	r3, [r7, #68]	; 0x44
 8006c16:	f04f 33ff 	mov.w	r3, #4294967295
 8006c1a:	643b      	str	r3, [r7, #64]	; 0x40
 8006c1c:	e004      	b.n	8006c28 <_tx_queue_create+0x140>
 8006c1e:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8006c22:	643b      	str	r3, [r7, #64]	; 0x40
 8006c24:	2300      	movs	r3, #0
 8006c26:	647b      	str	r3, [r7, #68]	; 0x44
 8006c28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2c:	601a      	str	r2, [r3, #0]
 8006c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c32:	605a      	str	r2, [r3, #4]
 8006c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c36:	223c      	movs	r2, #60	; 0x3c
 8006c38:	609a      	str	r2, [r3, #8]
 8006c3a:	4b26      	ldr	r3, [pc, #152]	; (8006cd4 <_tx_queue_create+0x1ec>)
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c40:	60da      	str	r2, [r3, #12]
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c46:	611a      	str	r2, [r3, #16]
 8006c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	615a      	str	r2, [r3, #20]
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c52:	619a      	str	r2, [r3, #24]
 8006c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006c58:	61da      	str	r2, [r3, #28]
 8006c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5c:	3320      	adds	r3, #32
 8006c5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c60:	4b1d      	ldr	r3, [pc, #116]	; (8006cd8 <_tx_queue_create+0x1f0>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d314      	bcc.n	8006c94 <_tx_queue_create+0x1ac>
 8006c6a:	4b1c      	ldr	r3, [pc, #112]	; (8006cdc <_tx_queue_create+0x1f4>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c70:	4a14      	ldr	r2, [pc, #80]	; (8006cc4 <_tx_queue_create+0x1dc>)
 8006c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c74:	6013      	str	r3, [r2, #0]
 8006c76:	4b1a      	ldr	r3, [pc, #104]	; (8006ce0 <_tx_queue_create+0x1f8>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c7c:	621a      	str	r2, [r3, #32]
 8006c7e:	4b19      	ldr	r3, [pc, #100]	; (8006ce4 <_tx_queue_create+0x1fc>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00d      	beq.n	8006ca2 <_tx_queue_create+0x1ba>
 8006c86:	4b17      	ldr	r3, [pc, #92]	; (8006ce4 <_tx_queue_create+0x1fc>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a15      	ldr	r2, [pc, #84]	; (8006ce0 <_tx_queue_create+0x1f8>)
 8006c8c:	6812      	ldr	r2, [r2, #0]
 8006c8e:	4610      	mov	r0, r2
 8006c90:	4798      	blx	r3
 8006c92:	e006      	b.n	8006ca2 <_tx_queue_create+0x1ba>
 8006c94:	4a0b      	ldr	r2, [pc, #44]	; (8006cc4 <_tx_queue_create+0x1dc>)
 8006c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c98:	6013      	str	r3, [r2, #0]
 8006c9a:	4b11      	ldr	r3, [pc, #68]	; (8006ce0 <_tx_queue_create+0x1f8>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ca0:	621a      	str	r2, [r3, #32]
 8006ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	f383 8810 	msr	PRIMASK, r3
}
 8006cac:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3748      	adds	r7, #72	; 0x48
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	51554555 	.word	0x51554555
 8006cbc:	2000161c 	.word	0x2000161c
 8006cc0:	20001618 	.word	0x20001618
 8006cc4:	20001c64 	.word	0x20001c64
 8006cc8:	20001c68 	.word	0x20001c68
 8006ccc:	2000000c 	.word	0x2000000c
 8006cd0:	20001648 	.word	0x20001648
 8006cd4:	e0001004 	.word	0xe0001004
 8006cd8:	20001c60 	.word	0x20001c60
 8006cdc:	20001c5c 	.word	0x20001c5c
 8006ce0:	20001c50 	.word	0x20001c50
 8006ce4:	20001c6c 	.word	0x20001c6c

08006ce8 <_tx_queue_flush>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_flush(TX_QUEUE *queue_ptr)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b094      	sub	sp, #80	; 0x50
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
UINT            suspended_count;
TX_THREAD       *thread_ptr;


    /* Initialize the suspended count and list.  */
    suspended_count =  TX_NO_SUSPENSIONS;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	64bb      	str	r3, [r7, #72]	; 0x48
    suspension_list =  TX_NULL;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8006cfc:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 8006cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 8006d00:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 8006d02:	b672      	cpsid	i
    return(int_posture);
 8006d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to reset various queue parameters.  */
    TX_DISABLE
 8006d06:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_FLUSH, queue_ptr, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), 0, 0, TX_TRACE_QUEUE_EVENTS)
 8006d08:	4b76      	ldr	r3, [pc, #472]	; (8006ee4 <_tx_queue_flush+0x1fc>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d06c      	beq.n	8006dee <_tx_queue_flush+0x106>
 8006d14:	4b74      	ldr	r3, [pc, #464]	; (8006ee8 <_tx_queue_flush+0x200>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d066      	beq.n	8006dee <_tx_queue_flush+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006d20:	f3ef 8305 	mrs	r3, IPSR
 8006d24:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8006d26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d28:	4b70      	ldr	r3, [pc, #448]	; (8006eec <_tx_queue_flush+0x204>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	637b      	str	r3, [r7, #52]	; 0x34
 8006d30:	4b6f      	ldr	r3, [pc, #444]	; (8006ef0 <_tx_queue_flush+0x208>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	643b      	str	r3, [r7, #64]	; 0x40
 8006d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10b      	bne.n	8006d54 <_tx_queue_flush+0x6c>
 8006d3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d40:	647b      	str	r3, [r7, #68]	; 0x44
 8006d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d46:	041a      	lsls	r2, r3, #16
 8006d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d50:	647b      	str	r3, [r7, #68]	; 0x44
 8006d52:	e00e      	b.n	8006d72 <_tx_queue_flush+0x8a>
 8006d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d56:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8006d5a:	d205      	bcs.n	8006d68 <_tx_queue_flush+0x80>
 8006d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d5e:	647b      	str	r3, [r7, #68]	; 0x44
 8006d60:	f04f 33ff 	mov.w	r3, #4294967295
 8006d64:	643b      	str	r3, [r7, #64]	; 0x40
 8006d66:	e004      	b.n	8006d72 <_tx_queue_flush+0x8a>
 8006d68:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8006d6c:	643b      	str	r3, [r7, #64]	; 0x40
 8006d6e:	2300      	movs	r3, #0
 8006d70:	647b      	str	r3, [r7, #68]	; 0x44
 8006d72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d76:	601a      	str	r2, [r3, #0]
 8006d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d7c:	605a      	str	r2, [r3, #4]
 8006d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d80:	223e      	movs	r2, #62	; 0x3e
 8006d82:	609a      	str	r2, [r3, #8]
 8006d84:	4b5b      	ldr	r3, [pc, #364]	; (8006ef4 <_tx_queue_flush+0x20c>)
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8a:	60da      	str	r2, [r3, #12]
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d90:	611a      	str	r2, [r3, #16]
 8006d92:	f107 0208 	add.w	r2, r7, #8
 8006d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d98:	615a      	str	r2, [r3, #20]
 8006d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	619a      	str	r2, [r3, #24]
 8006da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da2:	2200      	movs	r2, #0
 8006da4:	61da      	str	r2, [r3, #28]
 8006da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da8:	3320      	adds	r3, #32
 8006daa:	63bb      	str	r3, [r7, #56]	; 0x38
 8006dac:	4b52      	ldr	r3, [pc, #328]	; (8006ef8 <_tx_queue_flush+0x210>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d314      	bcc.n	8006de0 <_tx_queue_flush+0xf8>
 8006db6:	4b51      	ldr	r3, [pc, #324]	; (8006efc <_tx_queue_flush+0x214>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	63bb      	str	r3, [r7, #56]	; 0x38
 8006dbc:	4a49      	ldr	r2, [pc, #292]	; (8006ee4 <_tx_queue_flush+0x1fc>)
 8006dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc0:	6013      	str	r3, [r2, #0]
 8006dc2:	4b4f      	ldr	r3, [pc, #316]	; (8006f00 <_tx_queue_flush+0x218>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dc8:	621a      	str	r2, [r3, #32]
 8006dca:	4b4e      	ldr	r3, [pc, #312]	; (8006f04 <_tx_queue_flush+0x21c>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00d      	beq.n	8006dee <_tx_queue_flush+0x106>
 8006dd2:	4b4c      	ldr	r3, [pc, #304]	; (8006f04 <_tx_queue_flush+0x21c>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a4a      	ldr	r2, [pc, #296]	; (8006f00 <_tx_queue_flush+0x218>)
 8006dd8:	6812      	ldr	r2, [r2, #0]
 8006dda:	4610      	mov	r0, r2
 8006ddc:	4798      	blx	r3
 8006dde:	e006      	b.n	8006dee <_tx_queue_flush+0x106>
 8006de0:	4a40      	ldr	r2, [pc, #256]	; (8006ee4 <_tx_queue_flush+0x1fc>)
 8006de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de4:	6013      	str	r3, [r2, #0]
 8006de6:	4b46      	ldr	r3, [pc, #280]	; (8006f00 <_tx_queue_flush+0x218>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dec:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_QUEUE_FLUSH_INSERT

    /* Determine if there is something on the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d023      	beq.n	8006e3e <_tx_queue_flush+0x156>
    {

        /* Yes, there is something in the queue.  */

        /* Reset the queue parameters to erase all of the queued messages.  */
        queue_ptr -> tx_queue_enqueued =           TX_NO_MESSAGES;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	611a      	str	r2, [r3, #16]
        queue_ptr -> tx_queue_available_storage =  queue_ptr -> tx_queue_capacity;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	68da      	ldr	r2, [r3, #12]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	615a      	str	r2, [r3, #20]
        queue_ptr -> tx_queue_read =               queue_ptr -> tx_queue_start;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	699a      	ldr	r2, [r3, #24]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	621a      	str	r2, [r3, #32]
        queue_ptr -> tx_queue_write =              queue_ptr -> tx_queue_start;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	699a      	ldr	r2, [r3, #24]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	625a      	str	r2, [r3, #36]	; 0x24

        /* Now determine if there are any threads suspended on a full queue.  */
        if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d010      	beq.n	8006e3e <_tx_queue_flush+0x156>

            /* Yes, there are threads suspended on this queue, they must be 
               resumed!  */

            /* Copy the information into temporary variables.  */
            suspension_list =  queue_ptr -> tx_queue_suspension_list;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e20:	64fb      	str	r3, [r7, #76]	; 0x4c
            suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e26:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Clear the queue variables.  */
            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	629a      	str	r2, [r3, #40]	; 0x28
            queue_ptr -> tx_queue_suspended_count =  TX_NO_SUSPENSIONS;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8006e34:	4b34      	ldr	r3, [pc, #208]	; (8006f08 <_tx_queue_flush+0x220>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	3301      	adds	r3, #1
 8006e3a:	4a33      	ldr	r2, [pc, #204]	; (8006f08 <_tx_queue_flush+0x220>)
 8006e3c:	6013      	str	r3, [r2, #0]
 8006e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e40:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e44:	f383 8810 	msr	PRIMASK, r3
}
 8006e48:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the queue list to resume any and all threads suspended
       on this queue.  */
    if (suspended_count != TX_NO_SUSPENSIONS)
 8006e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d044      	beq.n	8006eda <_tx_queue_flush+0x1f2>
    {

        /* Pickup the thread to resume.  */
        thread_ptr =  suspension_list;
 8006e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e52:	60bb      	str	r3, [r7, #8]
        while (suspended_count != ((ULONG) 0))
 8006e54:	e027      	b.n	8006ea6 <_tx_queue_flush+0x1be>
        {
        
            /* Decrement the suspension count.  */
            suspended_count--;
 8006e56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Check for a NULL thread pointer.  */
            if (thread_ptr == TX_NULL)
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d025      	beq.n	8006eae <_tx_queue_flush+0x1c6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006e62:	f3ef 8310 	mrs	r3, PRIMASK
 8006e66:	61fb      	str	r3, [r7, #28]
    return(posture);
 8006e68:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8006e6a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006e6c:	b672      	cpsid	i
    return(int_posture);
 8006e6e:	69bb      	ldr	r3, [r7, #24]
            }

            /* Resume the next suspended thread.  */
            
            /* Lockout interrupts.  */
            TX_DISABLE
 8006e70:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Clear the cleanup pointer, this prevents the timeout from doing 
               anything.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	2200      	movs	r2, #0
 8006e76:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set the return status in the thread to TX_SUCCESS.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Move the thread pointer ahead.  */
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e84:	60bb      	str	r3, [r7, #8]
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption again.  */
            _tx_thread_preempt_disable++;
 8006e86:	4b20      	ldr	r3, [pc, #128]	; (8006f08 <_tx_queue_flush+0x220>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	4a1e      	ldr	r2, [pc, #120]	; (8006f08 <_tx_queue_flush+0x220>)
 8006e8e:	6013      	str	r3, [r2, #0]
 8006e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e92:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006e94:	6a3b      	ldr	r3, [r7, #32]
 8006e96:	f383 8810 	msr	PRIMASK, r3
}
 8006e9a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE
    
            /* Resume the thread.  */
            _tx_thread_system_resume(thread_ptr -> tx_thread_suspended_previous);
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f001 fadf 	bl	8008464 <_tx_thread_system_resume>
        while (suspended_count != ((ULONG) 0))
 8006ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1d4      	bne.n	8006e56 <_tx_queue_flush+0x16e>
 8006eac:	e000      	b.n	8006eb0 <_tx_queue_flush+0x1c8>
                break;
 8006eae:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006eb0:	f3ef 8310 	mrs	r3, PRIMASK
 8006eb4:	613b      	str	r3, [r7, #16]
    return(posture);
 8006eb6:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8006eb8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006eba:	b672      	cpsid	i
    return(int_posture);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
#endif
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8006ebe:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Restore previous preempt posture.  */
        _tx_thread_preempt_disable--;
 8006ec0:	4b11      	ldr	r3, [pc, #68]	; (8006f08 <_tx_queue_flush+0x220>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	4a10      	ldr	r2, [pc, #64]	; (8006f08 <_tx_queue_flush+0x220>)
 8006ec8:	6013      	str	r3, [r2, #0]
 8006eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ecc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	f383 8810 	msr	PRIMASK, r3
}
 8006ed4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8006ed6:	f001 fa8b 	bl	80083f0 <_tx_thread_system_preempt_check>
    }

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3750      	adds	r7, #80	; 0x50
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	20001c64 	.word	0x20001c64
 8006ee8:	20001c68 	.word	0x20001c68
 8006eec:	2000000c 	.word	0x2000000c
 8006ef0:	20001648 	.word	0x20001648
 8006ef4:	e0001004 	.word	0xe0001004
 8006ef8:	20001c60 	.word	0x20001c60
 8006efc:	20001c5c 	.word	0x20001c5c
 8006f00:	20001c50 	.word	0x20001c50
 8006f04:	20001c6c 	.word	0x20001c6c
 8006f08:	200016e0 	.word	0x200016e0

08006f0c <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b09a      	sub	sp, #104	; 0x68
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006f1c:	f3ef 8310 	mrs	r3, PRIMASK
 8006f20:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 8006f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 8006f24:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 8006f26:	b672      	cpsid	i
    return(int_posture);
 8006f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 8006f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
    queue_ptr -> tx_queue_performance_messages_received_count++;

#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_RECEIVE, queue_ptr, TX_POINTER_TO_ULONG_CONVERT(destination_ptr), wait_option, queue_ptr -> tx_queue_enqueued, TX_TRACE_QUEUE_EVENTS)
 8006f2c:	4b77      	ldr	r3, [pc, #476]	; (800710c <_tx_queue_receive+0x200>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d06c      	beq.n	8007012 <_tx_queue_receive+0x106>
 8006f38:	4b75      	ldr	r3, [pc, #468]	; (8007110 <_tx_queue_receive+0x204>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d066      	beq.n	8007012 <_tx_queue_receive+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006f44:	f3ef 8305 	mrs	r3, IPSR
 8006f48:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8006f4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f4c:	4b71      	ldr	r3, [pc, #452]	; (8007114 <_tx_queue_receive+0x208>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	647b      	str	r3, [r7, #68]	; 0x44
 8006f54:	4b70      	ldr	r3, [pc, #448]	; (8007118 <_tx_queue_receive+0x20c>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	653b      	str	r3, [r7, #80]	; 0x50
 8006f5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d10b      	bne.n	8006f78 <_tx_queue_receive+0x6c>
 8006f60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f64:	657b      	str	r3, [r7, #84]	; 0x54
 8006f66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6a:	041a      	lsls	r2, r3, #16
 8006f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f74:	657b      	str	r3, [r7, #84]	; 0x54
 8006f76:	e00e      	b.n	8006f96 <_tx_queue_receive+0x8a>
 8006f78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f7a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8006f7e:	d205      	bcs.n	8006f8c <_tx_queue_receive+0x80>
 8006f80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f82:	657b      	str	r3, [r7, #84]	; 0x54
 8006f84:	f04f 33ff 	mov.w	r3, #4294967295
 8006f88:	653b      	str	r3, [r7, #80]	; 0x50
 8006f8a:	e004      	b.n	8006f96 <_tx_queue_receive+0x8a>
 8006f8c:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8006f90:	653b      	str	r3, [r7, #80]	; 0x50
 8006f92:	2300      	movs	r3, #0
 8006f94:	657b      	str	r3, [r7, #84]	; 0x54
 8006f96:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006f98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f9a:	601a      	str	r2, [r3, #0]
 8006f9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f9e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006fa0:	605a      	str	r2, [r3, #4]
 8006fa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fa4:	2244      	movs	r2, #68	; 0x44
 8006fa6:	609a      	str	r2, [r3, #8]
 8006fa8:	4b5c      	ldr	r3, [pc, #368]	; (800711c <_tx_queue_receive+0x210>)
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fae:	60da      	str	r2, [r3, #12]
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fb4:	611a      	str	r2, [r3, #16]
 8006fb6:	68ba      	ldr	r2, [r7, #8]
 8006fb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fba:	615a      	str	r2, [r3, #20]
 8006fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	619a      	str	r2, [r3, #24]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	691a      	ldr	r2, [r3, #16]
 8006fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fc8:	61da      	str	r2, [r3, #28]
 8006fca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fcc:	3320      	adds	r3, #32
 8006fce:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fd0:	4b53      	ldr	r3, [pc, #332]	; (8007120 <_tx_queue_receive+0x214>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d314      	bcc.n	8007004 <_tx_queue_receive+0xf8>
 8006fda:	4b52      	ldr	r3, [pc, #328]	; (8007124 <_tx_queue_receive+0x218>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fe0:	4a4a      	ldr	r2, [pc, #296]	; (800710c <_tx_queue_receive+0x200>)
 8006fe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fe4:	6013      	str	r3, [r2, #0]
 8006fe6:	4b50      	ldr	r3, [pc, #320]	; (8007128 <_tx_queue_receive+0x21c>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fec:	621a      	str	r2, [r3, #32]
 8006fee:	4b4f      	ldr	r3, [pc, #316]	; (800712c <_tx_queue_receive+0x220>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00d      	beq.n	8007012 <_tx_queue_receive+0x106>
 8006ff6:	4b4d      	ldr	r3, [pc, #308]	; (800712c <_tx_queue_receive+0x220>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a4b      	ldr	r2, [pc, #300]	; (8007128 <_tx_queue_receive+0x21c>)
 8006ffc:	6812      	ldr	r2, [r2, #0]
 8006ffe:	4610      	mov	r0, r2
 8007000:	4798      	blx	r3
 8007002:	e006      	b.n	8007012 <_tx_queue_receive+0x106>
 8007004:	4a41      	ldr	r2, [pc, #260]	; (800710c <_tx_queue_receive+0x200>)
 8007006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007008:	6013      	str	r3, [r2, #0]
 800700a:	4b47      	ldr	r3, [pc, #284]	; (8007128 <_tx_queue_receive+0x21c>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007010:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007016:	643b      	str	r3, [r7, #64]	; 0x40
    
    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 8149 	beq.w	80072b4 <_tx_queue_receive+0x3a8>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8007022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007024:	2b00      	cmp	r3, #0
 8007026:	d13c      	bne.n	80070a2 <_tx_queue_receive+0x196>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */
            
            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6a1b      	ldr	r3, [r3, #32]
 800702c:	667b      	str	r3, [r7, #100]	; 0x64
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	663b      	str	r3, [r7, #96]	; 0x60
            size =         queue_ptr -> tx_queue_message_size;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Copy message. Note that the source and destination pointers are 
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8007038:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800703a:	1d13      	adds	r3, r2, #4
 800703c:	667b      	str	r3, [r7, #100]	; 0x64
 800703e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007040:	1d19      	adds	r1, r3, #4
 8007042:	6639      	str	r1, [r7, #96]	; 0x60
 8007044:	6812      	ldr	r2, [r2, #0]
 8007046:	601a      	str	r2, [r3, #0]
 8007048:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800704a:	2b01      	cmp	r3, #1
 800704c:	d90e      	bls.n	800706c <_tx_queue_receive+0x160>
 800704e:	e007      	b.n	8007060 <_tx_queue_receive+0x154>
 8007050:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007052:	1d13      	adds	r3, r2, #4
 8007054:	667b      	str	r3, [r7, #100]	; 0x64
 8007056:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007058:	1d19      	adds	r1, r3, #4
 800705a:	6639      	str	r1, [r7, #96]	; 0x60
 800705c:	6812      	ldr	r2, [r2, #0]
 800705e:	601a      	str	r2, [r3, #0]
 8007060:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007062:	3b01      	subs	r3, #1
 8007064:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007066:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1f1      	bne.n	8007050 <_tx_queue_receive+0x144>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	69db      	ldr	r3, [r3, #28]
 8007070:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007072:	429a      	cmp	r2, r3
 8007074:	d102      	bne.n	800707c <_tx_queue_receive+0x170>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	699b      	ldr	r3, [r3, #24]
 800707a:	667b      	str	r3, [r7, #100]	; 0x64
            }
        
            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007080:	621a      	str	r2, [r3, #32]
        
            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	695b      	ldr	r3, [r3, #20]
 8007086:	1c5a      	adds	r2, r3, #1
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	1e5a      	subs	r2, r3, #1
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	611a      	str	r2, [r3, #16]
 8007096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007098:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709c:	f383 8810 	msr	PRIMASK, r3
}
 80070a0:	e176      	b.n	8007390 <_tx_queue_receive+0x484>
        {
        
            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a6:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Now determine if there is a queue front suspension active.   */
    
            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 80070a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d166      	bne.n	8007180 <_tx_queue_receive+0x274>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 80070b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070b6:	667b      	str	r3, [r7, #100]	; 0x64
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	663b      	str	r3, [r7, #96]	; 0x60
                size =         queue_ptr -> tx_queue_message_size;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Copy message. Note that the source and destination pointers are 
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80070c2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80070c4:	1d13      	adds	r3, r2, #4
 80070c6:	667b      	str	r3, [r7, #100]	; 0x64
 80070c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070ca:	1d19      	adds	r1, r3, #4
 80070cc:	6639      	str	r1, [r7, #96]	; 0x60
 80070ce:	6812      	ldr	r2, [r2, #0]
 80070d0:	601a      	str	r2, [r3, #0]
 80070d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d90e      	bls.n	80070f6 <_tx_queue_receive+0x1ea>
 80070d8:	e007      	b.n	80070ea <_tx_queue_receive+0x1de>
 80070da:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80070dc:	1d13      	adds	r3, r2, #4
 80070de:	667b      	str	r3, [r7, #100]	; 0x64
 80070e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070e2:	1d19      	adds	r1, r3, #4
 80070e4:	6639      	str	r1, [r7, #96]	; 0x60
 80070e6:	6812      	ldr	r2, [r2, #0]
 80070e8:	601a      	str	r2, [r3, #0]
 80070ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070ec:	3b01      	subs	r3, #1
 80070ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d1f1      	bne.n	80070da <_tx_queue_receive+0x1ce>

                /* Message is now in the caller's destination. See if this is the only suspended thread 
                   on the list.  */
                suspended_count--;
 80070f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070f8:	3b01      	subs	r3, #1
 80070fa:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 80070fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d116      	bne.n	8007130 <_tx_queue_receive+0x224>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	629a      	str	r2, [r3, #40]	; 0x28
 8007108:	e021      	b.n	800714e <_tx_queue_receive+0x242>
 800710a:	bf00      	nop
 800710c:	20001c64 	.word	0x20001c64
 8007110:	20001c68 	.word	0x20001c68
 8007114:	2000000c 	.word	0x2000000c
 8007118:	20001648 	.word	0x20001648
 800711c:	e0001004 	.word	0xe0001004
 8007120:	20001c60 	.word	0x20001c60
 8007124:	20001c5c 	.word	0x20001c5c
 8007128:	20001c50 	.word	0x20001c50
 800712c:	20001c6c 	.word	0x20001c6c
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8007130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007134:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800713a:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800713c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800713e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007140:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 8007142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007144:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007146:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 8007148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800714a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800714c:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007152:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8007154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007156:	2200      	movs	r2, #0
 8007158:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800715a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800715c:	2200      	movs	r2, #0
 800715e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8007162:	4b8e      	ldr	r3, [pc, #568]	; (800739c <_tx_queue_receive+0x490>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	3301      	adds	r3, #1
 8007168:	4a8c      	ldr	r2, [pc, #560]	; (800739c <_tx_queue_receive+0x490>)
 800716a:	6013      	str	r3, [r2, #0]
 800716c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800716e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007170:	6a3b      	ldr	r3, [r7, #32]
 8007172:	f383 8810 	msr	PRIMASK, r3
}
 8007176:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 8007178:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800717a:	f001 f973 	bl	8008464 <_tx_thread_system_resume>
 800717e:	e107      	b.n	8007390 <_tx_queue_receive+0x484>
                /* At this point, we know that the queue is full and there 
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6a1b      	ldr	r3, [r3, #32]
 8007184:	667b      	str	r3, [r7, #100]	; 0x64
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	663b      	str	r3, [r7, #96]	; 0x60
                size =         queue_ptr -> tx_queue_message_size;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Copy message. Note that the source and destination pointers are 
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8007190:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007192:	1d13      	adds	r3, r2, #4
 8007194:	667b      	str	r3, [r7, #100]	; 0x64
 8007196:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007198:	1d19      	adds	r1, r3, #4
 800719a:	6639      	str	r1, [r7, #96]	; 0x60
 800719c:	6812      	ldr	r2, [r2, #0]
 800719e:	601a      	str	r2, [r3, #0]
 80071a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d90e      	bls.n	80071c4 <_tx_queue_receive+0x2b8>
 80071a6:	e007      	b.n	80071b8 <_tx_queue_receive+0x2ac>
 80071a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80071aa:	1d13      	adds	r3, r2, #4
 80071ac:	667b      	str	r3, [r7, #100]	; 0x64
 80071ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071b0:	1d19      	adds	r1, r3, #4
 80071b2:	6639      	str	r1, [r7, #96]	; 0x60
 80071b4:	6812      	ldr	r2, [r2, #0]
 80071b6:	601a      	str	r2, [r3, #0]
 80071b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071ba:	3b01      	subs	r3, #1
 80071bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1f1      	bne.n	80071a8 <_tx_queue_receive+0x29c>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	69db      	ldr	r3, [r3, #28]
 80071c8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d102      	bne.n	80071d4 <_tx_queue_receive+0x2c8>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	699b      	ldr	r3, [r3, #24]
 80071d2:	667b      	str	r3, [r7, #100]	; 0x64
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80071d8:	621a      	str	r2, [r3, #32]
  
                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 80071da:	4b70      	ldr	r3, [pc, #448]	; (800739c <_tx_queue_receive+0x490>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	3301      	adds	r3, #1
 80071e0:	4a6e      	ldr	r2, [pc, #440]	; (800739c <_tx_queue_receive+0x490>)
 80071e2:	6013      	str	r3, [r2, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 80071e4:	4b6d      	ldr	r3, [pc, #436]	; (800739c <_tx_queue_receive+0x490>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	3b01      	subs	r3, #1
 80071ea:	4a6c      	ldr	r2, [pc, #432]	; (800739c <_tx_queue_receive+0x490>)
 80071ec:	6013      	str	r3, [r2, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 80071ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071f2:	667b      	str	r3, [r7, #100]	; 0x64
                destination =  queue_ptr -> tx_queue_write;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f8:	663b      	str	r3, [r7, #96]	; 0x60
                size =         queue_ptr -> tx_queue_message_size;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Copy message. Note that the source and destination pointers are 
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8007200:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007202:	1d13      	adds	r3, r2, #4
 8007204:	667b      	str	r3, [r7, #100]	; 0x64
 8007206:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007208:	1d19      	adds	r1, r3, #4
 800720a:	6639      	str	r1, [r7, #96]	; 0x60
 800720c:	6812      	ldr	r2, [r2, #0]
 800720e:	601a      	str	r2, [r3, #0]
 8007210:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007212:	2b01      	cmp	r3, #1
 8007214:	d90e      	bls.n	8007234 <_tx_queue_receive+0x328>
 8007216:	e007      	b.n	8007228 <_tx_queue_receive+0x31c>
 8007218:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800721a:	1d13      	adds	r3, r2, #4
 800721c:	667b      	str	r3, [r7, #100]	; 0x64
 800721e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007220:	1d19      	adds	r1, r3, #4
 8007222:	6639      	str	r1, [r7, #96]	; 0x60
 8007224:	6812      	ldr	r2, [r2, #0]
 8007226:	601a      	str	r2, [r3, #0]
 8007228:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800722a:	3b01      	subs	r3, #1
 800722c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800722e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1f1      	bne.n	8007218 <_tx_queue_receive+0x30c>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	69db      	ldr	r3, [r3, #28]
 8007238:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800723a:	429a      	cmp	r2, r3
 800723c:	d102      	bne.n	8007244 <_tx_queue_receive+0x338>
                {
            
                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	699b      	ldr	r3, [r3, #24]
 8007242:	663b      	str	r3, [r7, #96]	; 0x60
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007248:	625a      	str	r2, [r3, #36]	; 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800724e:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Message is now in the queue.  See if this is the only suspended thread 
                   on the list.  */
                suspended_count--;
 8007250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007252:	3b01      	subs	r3, #1
 8007254:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 8007256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007258:	2b00      	cmp	r3, #0
 800725a:	d103      	bne.n	8007264 <_tx_queue_receive+0x358>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	629a      	str	r2, [r3, #40]	; 0x28
 8007262:	e00e      	b.n	8007282 <_tx_queue_receive+0x376>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8007264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007268:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800726e:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8007270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007272:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007274:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 8007276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007278:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800727a:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 800727c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800727e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007280:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007286:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8007288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800728a:	2200      	movs	r2, #0
 800728c:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800728e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007290:	2200      	movs	r2, #0
 8007292:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8007296:	4b41      	ldr	r3, [pc, #260]	; (800739c <_tx_queue_receive+0x490>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	3301      	adds	r3, #1
 800729c:	4a3f      	ldr	r2, [pc, #252]	; (800739c <_tx_queue_receive+0x490>)
 800729e:	6013      	str	r3, [r2, #0]
 80072a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072a2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	f383 8810 	msr	PRIMASK, r3
}
 80072aa:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 80072ac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80072ae:	f001 f8d9 	bl	8008464 <_tx_thread_system_resume>
 80072b2:	e06d      	b.n	8007390 <_tx_queue_receive+0x484>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d062      	beq.n	8007380 <_tx_queue_receive+0x474>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80072ba:	4b38      	ldr	r3, [pc, #224]	; (800739c <_tx_queue_receive+0x490>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d008      	beq.n	80072d4 <_tx_queue_receive+0x3c8>
 80072c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072c4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	f383 8810 	msr	PRIMASK, r3
}
 80072cc:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE
           
            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 80072ce:	230a      	movs	r3, #10
 80072d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80072d2:	e05d      	b.n	8007390 <_tx_queue_receive+0x484>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif
            
            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80072d4:	4b32      	ldr	r3, [pc, #200]	; (80073a0 <_tx_queue_receive+0x494>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 80072da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072dc:	4a31      	ldr	r2, [pc, #196]	; (80073a4 <_tx_queue_receive+0x498>)
 80072de:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 80072e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 80072e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 80072ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ee:	2200      	movs	r2, #0
 80072f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 80072f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80072fa:	1c5a      	adds	r2, r3, #1
 80072fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072fe:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 8007302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007304:	2b00      	cmp	r3, #0
 8007306:	d109      	bne.n	800731c <_tx_queue_receive+0x410>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800730c:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800730e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007310:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007312:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8007314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007316:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007318:	675a      	str	r2, [r3, #116]	; 0x74
 800731a:	e011      	b.n	8007340 <_tx_queue_receive+0x434>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007320:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8007322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007324:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007326:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8007328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800732c:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800732e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007330:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007332:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8007334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007336:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007338:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800733a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800733c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800733e:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 8007340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007342:	1c5a      	adds	r2, r3, #1
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 8007348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800734a:	2205      	movs	r2, #5
 800734c:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800734e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007350:	2201      	movs	r2, #1
 8007352:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8007354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800735a:	4b10      	ldr	r3, [pc, #64]	; (800739c <_tx_queue_receive+0x490>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	3301      	adds	r3, #1
 8007360:	4a0e      	ldr	r2, [pc, #56]	; (800739c <_tx_queue_receive+0x490>)
 8007362:	6013      	str	r3, [r2, #0]
 8007364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007366:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	f383 8810 	msr	PRIMASK, r3
}
 800736e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8007370:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007372:	f001 fa31 	bl	80087d8 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8007376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800737c:	65bb      	str	r3, [r7, #88]	; 0x58
 800737e:	e007      	b.n	8007390 <_tx_queue_receive+0x484>
 8007380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007382:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	f383 8810 	msr	PRIMASK, r3
}
 800738a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
           
        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 800738c:	230a      	movs	r3, #10
 800738e:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    /* Return completion status.  */
    return(status);
 8007390:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 8007392:	4618      	mov	r0, r3
 8007394:	3768      	adds	r7, #104	; 0x68
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	200016e0 	.word	0x200016e0
 80073a0:	20001648 	.word	0x20001648
 80073a4:	080069e1 	.word	0x080069e1

080073a8 <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b09a      	sub	sp, #104	; 0x68
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 80073b4:	2300      	movs	r3, #0
 80073b6:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80073b8:	f3ef 8310 	mrs	r3, PRIMASK
 80073bc:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 80073be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 80073c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 80073c2:	b672      	cpsid	i
    return(int_posture);
 80073c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 80073c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Increment the number of messages sent to this queue.  */
    queue_ptr -> tx_queue_performance_messages_sent_count++;
#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_SEND, queue_ptr, TX_POINTER_TO_ULONG_CONVERT(source_ptr), wait_option, queue_ptr -> tx_queue_enqueued, TX_TRACE_QUEUE_EVENTS)
 80073c8:	4b7a      	ldr	r3, [pc, #488]	; (80075b4 <_tx_queue_send+0x20c>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80073ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d06c      	beq.n	80074ae <_tx_queue_send+0x106>
 80073d4:	4b78      	ldr	r3, [pc, #480]	; (80075b8 <_tx_queue_send+0x210>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d066      	beq.n	80074ae <_tx_queue_send+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80073e0:	f3ef 8305 	mrs	r3, IPSR
 80073e4:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 80073e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073e8:	4b74      	ldr	r3, [pc, #464]	; (80075bc <_tx_queue_send+0x214>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	647b      	str	r3, [r7, #68]	; 0x44
 80073f0:	4b73      	ldr	r3, [pc, #460]	; (80075c0 <_tx_queue_send+0x218>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	653b      	str	r3, [r7, #80]	; 0x50
 80073f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10b      	bne.n	8007414 <_tx_queue_send+0x6c>
 80073fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007400:	657b      	str	r3, [r7, #84]	; 0x54
 8007402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007406:	041a      	lsls	r2, r3, #16
 8007408:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800740a:	4313      	orrs	r3, r2
 800740c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007410:	657b      	str	r3, [r7, #84]	; 0x54
 8007412:	e00e      	b.n	8007432 <_tx_queue_send+0x8a>
 8007414:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007416:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800741a:	d205      	bcs.n	8007428 <_tx_queue_send+0x80>
 800741c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800741e:	657b      	str	r3, [r7, #84]	; 0x54
 8007420:	f04f 33ff 	mov.w	r3, #4294967295
 8007424:	653b      	str	r3, [r7, #80]	; 0x50
 8007426:	e004      	b.n	8007432 <_tx_queue_send+0x8a>
 8007428:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800742c:	653b      	str	r3, [r7, #80]	; 0x50
 800742e:	2300      	movs	r3, #0
 8007430:	657b      	str	r3, [r7, #84]	; 0x54
 8007432:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007436:	601a      	str	r2, [r3, #0]
 8007438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800743a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800743c:	605a      	str	r2, [r3, #4]
 800743e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007440:	2245      	movs	r2, #69	; 0x45
 8007442:	609a      	str	r2, [r3, #8]
 8007444:	4b5f      	ldr	r3, [pc, #380]	; (80075c4 <_tx_queue_send+0x21c>)
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800744a:	60da      	str	r2, [r3, #12]
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007450:	611a      	str	r2, [r3, #16]
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007456:	615a      	str	r2, [r3, #20]
 8007458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	619a      	str	r2, [r3, #24]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	691a      	ldr	r2, [r3, #16]
 8007462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007464:	61da      	str	r2, [r3, #28]
 8007466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007468:	3320      	adds	r3, #32
 800746a:	64bb      	str	r3, [r7, #72]	; 0x48
 800746c:	4b56      	ldr	r3, [pc, #344]	; (80075c8 <_tx_queue_send+0x220>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007472:	429a      	cmp	r2, r3
 8007474:	d314      	bcc.n	80074a0 <_tx_queue_send+0xf8>
 8007476:	4b55      	ldr	r3, [pc, #340]	; (80075cc <_tx_queue_send+0x224>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	64bb      	str	r3, [r7, #72]	; 0x48
 800747c:	4a4d      	ldr	r2, [pc, #308]	; (80075b4 <_tx_queue_send+0x20c>)
 800747e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007480:	6013      	str	r3, [r2, #0]
 8007482:	4b53      	ldr	r3, [pc, #332]	; (80075d0 <_tx_queue_send+0x228>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007488:	621a      	str	r2, [r3, #32]
 800748a:	4b52      	ldr	r3, [pc, #328]	; (80075d4 <_tx_queue_send+0x22c>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00d      	beq.n	80074ae <_tx_queue_send+0x106>
 8007492:	4b50      	ldr	r3, [pc, #320]	; (80075d4 <_tx_queue_send+0x22c>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a4e      	ldr	r2, [pc, #312]	; (80075d0 <_tx_queue_send+0x228>)
 8007498:	6812      	ldr	r2, [r2, #0]
 800749a:	4610      	mov	r0, r2
 800749c:	4798      	blx	r3
 800749e:	e006      	b.n	80074ae <_tx_queue_send+0x106>
 80074a0:	4a44      	ldr	r2, [pc, #272]	; (80075b4 <_tx_queue_send+0x20c>)
 80074a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074a4:	6013      	str	r3, [r2, #0]
 80074a6:	4b4a      	ldr	r3, [pc, #296]	; (80075d0 <_tx_queue_send+0x228>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074ac:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b2:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	695b      	ldr	r3, [r3, #20]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f000 80ae 	beq.w	800761a <_tx_queue_send+0x272>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 80074be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d13c      	bne.n	800753e <_tx_queue_send+0x196>
        {
        
            /* No suspended threads, simply place the message in the queue.  */
            
            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	695b      	ldr	r3, [r3, #20]
 80074c8:	1e5a      	subs	r2, r3, #1
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	1c5a      	adds	r2, r3, #1
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	667b      	str	r3, [r7, #100]	; 0x64
            destination =  queue_ptr -> tx_queue_write;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e0:	663b      	str	r3, [r7, #96]	; 0x60
            size =         queue_ptr -> tx_queue_message_size;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Copy message. Note that the source and destination pointers are 
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80074e8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80074ea:	1d13      	adds	r3, r2, #4
 80074ec:	667b      	str	r3, [r7, #100]	; 0x64
 80074ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074f0:	1d19      	adds	r1, r3, #4
 80074f2:	6639      	str	r1, [r7, #96]	; 0x60
 80074f4:	6812      	ldr	r2, [r2, #0]
 80074f6:	601a      	str	r2, [r3, #0]
 80074f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d90e      	bls.n	800751c <_tx_queue_send+0x174>
 80074fe:	e007      	b.n	8007510 <_tx_queue_send+0x168>
 8007500:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007502:	1d13      	adds	r3, r2, #4
 8007504:	667b      	str	r3, [r7, #100]	; 0x64
 8007506:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007508:	1d19      	adds	r1, r3, #4
 800750a:	6639      	str	r1, [r7, #96]	; 0x60
 800750c:	6812      	ldr	r2, [r2, #0]
 800750e:	601a      	str	r2, [r3, #0]
 8007510:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007512:	3b01      	subs	r3, #1
 8007514:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007516:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1f1      	bne.n	8007500 <_tx_queue_send+0x158>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	69db      	ldr	r3, [r3, #28]
 8007520:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007522:	429a      	cmp	r2, r3
 8007524:	d102      	bne.n	800752c <_tx_queue_send+0x184>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	699b      	ldr	r3, [r3, #24]
 800752a:	663b      	str	r3, [r7, #96]	; 0x60
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007530:	625a      	str	r2, [r3, #36]	; 0x24
 8007532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007534:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007538:	f383 8810 	msr	PRIMASK, r3
}
 800753c:	e0db      	b.n	80076f6 <_tx_queue_send+0x34e>
            /* There is a thread suspended on an empty queue. Simply 
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007542:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 8007544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007546:	3b01      	subs	r3, #1
 8007548:	643b      	str	r3, [r7, #64]	; 0x40
            if (suspended_count == TX_NO_SUSPENSIONS)
 800754a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800754c:	2b00      	cmp	r3, #0
 800754e:	d103      	bne.n	8007558 <_tx_queue_send+0x1b0>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	629a      	str	r2, [r3, #40]	; 0x28
 8007556:	e012      	b.n	800757e <_tx_queue_send+0x1d6>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8007558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800755a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8007560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007564:	63bb      	str	r3, [r7, #56]	; 0x38
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800756a:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800756c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800756e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007570:	637b      	str	r3, [r7, #52]	; 0x34
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 8007572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007574:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007576:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 8007578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800757a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800757c:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007582:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8007584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007586:	2200      	movs	r2, #0
 8007588:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	667b      	str	r3, [r7, #100]	; 0x64
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800758e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007590:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007592:	663b      	str	r3, [r7, #96]	; 0x60
            size =         queue_ptr -> tx_queue_message_size;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Copy message. Note that the source and destination pointers are 
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800759a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800759c:	1d13      	adds	r3, r2, #4
 800759e:	667b      	str	r3, [r7, #100]	; 0x64
 80075a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075a2:	1d19      	adds	r1, r3, #4
 80075a4:	6639      	str	r1, [r7, #96]	; 0x60
 80075a6:	6812      	ldr	r2, [r2, #0]
 80075a8:	601a      	str	r2, [r3, #0]
 80075aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d921      	bls.n	80075f4 <_tx_queue_send+0x24c>
 80075b0:	e01a      	b.n	80075e8 <_tx_queue_send+0x240>
 80075b2:	bf00      	nop
 80075b4:	20001c64 	.word	0x20001c64
 80075b8:	20001c68 	.word	0x20001c68
 80075bc:	2000000c 	.word	0x2000000c
 80075c0:	20001648 	.word	0x20001648
 80075c4:	e0001004 	.word	0xe0001004
 80075c8:	20001c60 	.word	0x20001c60
 80075cc:	20001c5c 	.word	0x20001c5c
 80075d0:	20001c50 	.word	0x20001c50
 80075d4:	20001c6c 	.word	0x20001c6c
 80075d8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80075da:	1d13      	adds	r3, r2, #4
 80075dc:	667b      	str	r3, [r7, #100]	; 0x64
 80075de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075e0:	1d19      	adds	r1, r3, #4
 80075e2:	6639      	str	r1, [r7, #96]	; 0x60
 80075e4:	6812      	ldr	r2, [r2, #0]
 80075e6:	601a      	str	r2, [r3, #0]
 80075e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075ea:	3b01      	subs	r3, #1
 80075ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1f1      	bne.n	80075d8 <_tx_queue_send+0x230>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80075f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075f6:	2200      	movs	r2, #0
 80075f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80075fc:	4b40      	ldr	r3, [pc, #256]	; (8007700 <_tx_queue_send+0x358>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	3301      	adds	r3, #1
 8007602:	4a3f      	ldr	r2, [pc, #252]	; (8007700 <_tx_queue_send+0x358>)
 8007604:	6013      	str	r3, [r2, #0]
 8007606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007608:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800760a:	6a3b      	ldr	r3, [r7, #32]
 800760c:	f383 8810 	msr	PRIMASK, r3
}
 8007610:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 8007612:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007614:	f000 ff26 	bl	8008464 <_tx_thread_system_resume>
 8007618:	e06d      	b.n	80076f6 <_tx_queue_send+0x34e>
#endif
        }
    }
    
    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d062      	beq.n	80076e6 <_tx_queue_send+0x33e>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8007620:	4b37      	ldr	r3, [pc, #220]	; (8007700 <_tx_queue_send+0x358>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d008      	beq.n	800763a <_tx_queue_send+0x292>
 8007628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800762a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	f383 8810 	msr	PRIMASK, r3
}
 8007632:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 8007634:	230b      	movs	r3, #11
 8007636:	65bb      	str	r3, [r7, #88]	; 0x58
 8007638:	e05d      	b.n	80076f6 <_tx_queue_send+0x34e>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif
            
            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800763a:	4b32      	ldr	r3, [pc, #200]	; (8007704 <_tx_queue_send+0x35c>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 8007640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007642:	4a31      	ldr	r2, [pc, #196]	; (8007708 <_tx_queue_send+0x360>)
 8007644:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 8007646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 800764c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800764e:	68ba      	ldr	r2, [r7, #8]
 8007650:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 8007652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007654:	2200      	movs	r2, #0
 8007656:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800765a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800765c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007660:	1c5a      	adds	r2, r3, #1
 8007662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007664:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 8007668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800766a:	2b00      	cmp	r3, #0
 800766c:	d109      	bne.n	8007682 <_tx_queue_send+0x2da>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007672:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8007674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007676:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007678:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800767a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800767c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800767e:	675a      	str	r2, [r3, #116]	; 0x74
 8007680:	e011      	b.n	80076a6 <_tx_queue_send+0x2fe>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007686:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8007688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800768a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800768c:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800768e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007692:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8007694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007696:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007698:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800769a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800769c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800769e:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80076a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80076a4:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 80076a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076a8:	1c5a      	adds	r2, r3, #1
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 80076ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076b0:	2205      	movs	r2, #5
 80076b2:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80076b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076b6:	2201      	movs	r2, #1
 80076b8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80076ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80076c0:	4b0f      	ldr	r3, [pc, #60]	; (8007700 <_tx_queue_send+0x358>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	3301      	adds	r3, #1
 80076c6:	4a0e      	ldr	r2, [pc, #56]	; (8007700 <_tx_queue_send+0x358>)
 80076c8:	6013      	str	r3, [r2, #0]
 80076ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076cc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	f383 8810 	msr	PRIMASK, r3
}
 80076d4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80076d6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80076d8:	f001 f87e 	bl	80087d8 <_tx_thread_system_suspend>
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80076dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80076e4:	e007      	b.n	80076f6 <_tx_queue_send+0x34e>
 80076e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076e8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	f383 8810 	msr	PRIMASK, r3
}
 80076f0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 80076f2:	230b      	movs	r3, #11
 80076f4:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    /* Return completion status.  */
    return(status);
 80076f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3768      	adds	r7, #104	; 0x68
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	200016e0 	.word	0x200016e0
 8007704:	20001648 	.word	0x20001648
 8007708:	080069e1 	.word	0x080069e1

0800770c <_tx_semaphore_ceiling_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_ceiling_put(TX_SEMAPHORE *semaphore_ptr, ULONG ceiling)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b092      	sub	sp, #72	; 0x48
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8007716:	2300      	movs	r3, #0
 8007718:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800771a:	f3ef 8310 	mrs	r3, PRIMASK
 800771e:	61fb      	str	r3, [r7, #28]
    return(posture);
 8007720:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8007722:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007724:	b672      	cpsid	i
    return(int_posture);
 8007726:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 8007728:	63bb      	str	r3, [r7, #56]	; 0x38
    /* Increment the number of puts on this semaphore.  */
    semaphore_ptr -> tx_semaphore_performance_put_count++;
#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_SEMAPHORE_CEILING_PUT, semaphore_ptr, semaphore_ptr -> tx_semaphore_count, semaphore_ptr -> tx_semaphore_suspended_count, ceiling, TX_TRACE_SEMAPHORE_EVENTS)
 800772a:	4b67      	ldr	r3, [pc, #412]	; (80078c8 <_tx_semaphore_ceiling_put+0x1bc>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	637b      	str	r3, [r7, #52]	; 0x34
 8007730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007732:	2b00      	cmp	r3, #0
 8007734:	d06d      	beq.n	8007812 <_tx_semaphore_ceiling_put+0x106>
 8007736:	4b65      	ldr	r3, [pc, #404]	; (80078cc <_tx_semaphore_ceiling_put+0x1c0>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800773e:	2b00      	cmp	r3, #0
 8007740:	d067      	beq.n	8007812 <_tx_semaphore_ceiling_put+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007742:	f3ef 8305 	mrs	r3, IPSR
 8007746:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8007748:	697a      	ldr	r2, [r7, #20]
 800774a:	4b61      	ldr	r3, [pc, #388]	; (80078d0 <_tx_semaphore_ceiling_put+0x1c4>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4313      	orrs	r3, r2
 8007750:	633b      	str	r3, [r7, #48]	; 0x30
 8007752:	4b60      	ldr	r3, [pc, #384]	; (80078d4 <_tx_semaphore_ceiling_put+0x1c8>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775a:	2b00      	cmp	r3, #0
 800775c:	d10b      	bne.n	8007776 <_tx_semaphore_ceiling_put+0x6a>
 800775e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007762:	643b      	str	r3, [r7, #64]	; 0x40
 8007764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007768:	041a      	lsls	r2, r3, #16
 800776a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800776c:	4313      	orrs	r3, r2
 800776e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007772:	643b      	str	r3, [r7, #64]	; 0x40
 8007774:	e00e      	b.n	8007794 <_tx_semaphore_ceiling_put+0x88>
 8007776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007778:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800777c:	d205      	bcs.n	800778a <_tx_semaphore_ceiling_put+0x7e>
 800777e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007780:	643b      	str	r3, [r7, #64]	; 0x40
 8007782:	f04f 33ff 	mov.w	r3, #4294967295
 8007786:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007788:	e004      	b.n	8007794 <_tx_semaphore_ceiling_put+0x88>
 800778a:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800778e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007790:	2300      	movs	r3, #0
 8007792:	643b      	str	r3, [r7, #64]	; 0x40
 8007794:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007798:	601a      	str	r2, [r3, #0]
 800779a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800779c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800779e:	605a      	str	r2, [r3, #4]
 80077a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a2:	2250      	movs	r2, #80	; 0x50
 80077a4:	609a      	str	r2, [r3, #8]
 80077a6:	4b4c      	ldr	r3, [pc, #304]	; (80078d8 <_tx_semaphore_ceiling_put+0x1cc>)
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ac:	60da      	str	r2, [r3, #12]
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077b2:	611a      	str	r2, [r3, #16]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	689a      	ldr	r2, [r3, #8]
 80077b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ba:	615a      	str	r2, [r3, #20]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	691a      	ldr	r2, [r3, #16]
 80077c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077c2:	619a      	str	r2, [r3, #24]
 80077c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077c6:	683a      	ldr	r2, [r7, #0]
 80077c8:	61da      	str	r2, [r3, #28]
 80077ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077cc:	3320      	adds	r3, #32
 80077ce:	637b      	str	r3, [r7, #52]	; 0x34
 80077d0:	4b42      	ldr	r3, [pc, #264]	; (80078dc <_tx_semaphore_ceiling_put+0x1d0>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d314      	bcc.n	8007804 <_tx_semaphore_ceiling_put+0xf8>
 80077da:	4b41      	ldr	r3, [pc, #260]	; (80078e0 <_tx_semaphore_ceiling_put+0x1d4>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	637b      	str	r3, [r7, #52]	; 0x34
 80077e0:	4a39      	ldr	r2, [pc, #228]	; (80078c8 <_tx_semaphore_ceiling_put+0x1bc>)
 80077e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077e4:	6013      	str	r3, [r2, #0]
 80077e6:	4b3f      	ldr	r3, [pc, #252]	; (80078e4 <_tx_semaphore_ceiling_put+0x1d8>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077ec:	621a      	str	r2, [r3, #32]
 80077ee:	4b3e      	ldr	r3, [pc, #248]	; (80078e8 <_tx_semaphore_ceiling_put+0x1dc>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d00d      	beq.n	8007812 <_tx_semaphore_ceiling_put+0x106>
 80077f6:	4b3c      	ldr	r3, [pc, #240]	; (80078e8 <_tx_semaphore_ceiling_put+0x1dc>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a3a      	ldr	r2, [pc, #232]	; (80078e4 <_tx_semaphore_ceiling_put+0x1d8>)
 80077fc:	6812      	ldr	r2, [r2, #0]
 80077fe:	4610      	mov	r0, r2
 8007800:	4798      	blx	r3
 8007802:	e006      	b.n	8007812 <_tx_semaphore_ceiling_put+0x106>
 8007804:	4a30      	ldr	r2, [pc, #192]	; (80078c8 <_tx_semaphore_ceiling_put+0x1bc>)
 8007806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007808:	6013      	str	r3, [r2, #0]
 800780a:	4b36      	ldr	r3, [pc, #216]	; (80078e4 <_tx_semaphore_ceiling_put+0x1d8>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007810:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_CEILING_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8007818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800781a:	2b00      	cmp	r3, #0
 800781c:	d11b      	bne.n	8007856 <_tx_semaphore_ceiling_put+0x14a>
    {

        /* Determine if the ceiling has been exceeded.  */
        if (semaphore_ptr -> tx_semaphore_count >= ceiling)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	683a      	ldr	r2, [r7, #0]
 8007824:	429a      	cmp	r2, r3
 8007826:	d808      	bhi.n	800783a <_tx_semaphore_ceiling_put+0x12e>
 8007828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800782a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	f383 8810 	msr	PRIMASK, r3
}
 8007832:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Return an error.  */
            status =  TX_CEILING_EXCEEDED;
 8007834:	2321      	movs	r3, #33	; 0x21
 8007836:	647b      	str	r3, [r7, #68]	; 0x44
 8007838:	e041      	b.n	80078be <_tx_semaphore_ceiling_put+0x1b2>
        }
        else
        {

            /* Increment the semaphore count.  */
            semaphore_ptr -> tx_semaphore_count++;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	1c5a      	adds	r2, r3, #1
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	609a      	str	r2, [r3, #8]
 8007844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007846:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f383 8810 	msr	PRIMASK, r3
}
 800784e:	bf00      	nop
                (semaphore_put_notify)(semaphore_ptr);
            }
#endif

            /* Return successful completion status.  */
            status =  TX_SUCCESS;
 8007850:	2300      	movs	r3, #0
 8007852:	647b      	str	r3, [r7, #68]	; 0x44
 8007854:	e033      	b.n	80078be <_tx_semaphore_ceiling_put+0x1b2>
    {

        /* Remove the suspended thread from the list.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	62bb      	str	r3, [r7, #40]	; 0x28

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 800785c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785e:	3b01      	subs	r3, #1
 8007860:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (suspended_count == TX_NO_SUSPENSIONS)
 8007862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007864:	2b00      	cmp	r3, #0
 8007866:	d103      	bne.n	8007870 <_tx_semaphore_ceiling_put+0x164>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	60da      	str	r2, [r3, #12]
 800786e:	e00e      	b.n	800788e <_tx_semaphore_ceiling_put+0x182>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 8007870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007874:	627b      	str	r3, [r7, #36]	; 0x24
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800787a:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800787c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007880:	623b      	str	r3, [r7, #32]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8007882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007884:	6a3a      	ldr	r2, [r7, #32]
 8007886:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8007888:	6a3b      	ldr	r3, [r7, #32]
 800788a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800788c:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007892:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8007894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007896:	2200      	movs	r2, #0
 8007898:	669a      	str	r2, [r3, #104]	; 0x68

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800789a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789c:	2200      	movs	r2, #0
 800789e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 80078a2:	4b12      	ldr	r3, [pc, #72]	; (80078ec <_tx_semaphore_ceiling_put+0x1e0>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	3301      	adds	r3, #1
 80078a8:	4a10      	ldr	r2, [pc, #64]	; (80078ec <_tx_semaphore_ceiling_put+0x1e0>)
 80078aa:	6013      	str	r3, [r2, #0]
 80078ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ae:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	f383 8810 	msr	PRIMASK, r3
}
 80078b6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 80078b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078ba:	f000 fdd3 	bl	8008464 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(status);
 80078be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3748      	adds	r7, #72	; 0x48
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	20001c64 	.word	0x20001c64
 80078cc:	20001c68 	.word	0x20001c68
 80078d0:	2000000c 	.word	0x2000000c
 80078d4:	20001648 	.word	0x20001648
 80078d8:	e0001004 	.word	0xe0001004
 80078dc:	20001c60 	.word	0x20001c60
 80078e0:	20001c5c 	.word	0x20001c5c
 80078e4:	20001c50 	.word	0x20001c50
 80078e8:	20001c6c 	.word	0x20001c6c
 80078ec:	200016e0 	.word	0x200016e0

080078f0 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b08e      	sub	sp, #56	; 0x38
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80078fa:	f3ef 8310 	mrs	r3, PRIMASK
 80078fe:	623b      	str	r3, [r7, #32]
    return(posture);
 8007900:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8007902:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007904:	b672      	cpsid	i
    return(int_posture);
 8007906:	69fb      	ldr	r3, [r7, #28]
    

#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 8007908:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800790e:	4a33      	ldr	r2, [pc, #204]	; (80079dc <_tx_semaphore_cleanup+0xec>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d158      	bne.n	80079c6 <_tx_semaphore_cleanup+0xd6>
    {
    
        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800791a:	683a      	ldr	r2, [r7, #0]
 800791c:	429a      	cmp	r2, r3
 800791e:	d152      	bne.n	80079c6 <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007924:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 8007926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007928:	2b00      	cmp	r3, #0
 800792a:	d04c      	beq.n	80079c6 <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 800792c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a2b      	ldr	r2, [pc, #172]	; (80079e0 <_tx_semaphore_cleanup+0xf0>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d147      	bne.n	80079c6 <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 8007936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d043      	beq.n	80079c6 <_tx_semaphore_cleanup+0xd6>
#endif
                
                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 8007944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007946:	691b      	ldr	r3, [r3, #16]
 8007948:	1e5a      	subs	r2, r3, #1
 800794a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794c:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800794e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8007954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007956:	2b00      	cmp	r3, #0
 8007958:	d103      	bne.n	8007962 <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */
    
                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800795a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795c:	2200      	movs	r2, #0
 800795e:	60da      	str	r2, [r3, #12]
 8007960:	e013      	b.n	800798a <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007966:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800796c:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800796e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007972:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8007974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007976:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007978:	671a      	str	r2, [r3, #112]	; 0x70
            
                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800797a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	429a      	cmp	r2, r3
 8007982:	d102      	bne.n	800798a <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8007984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007986:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007988:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798e:	2b06      	cmp	r3, #6
 8007990:	d119      	bne.n	80079c6 <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	220d      	movs	r2, #13
 8007996:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800799a:	4b12      	ldr	r3, [pc, #72]	; (80079e4 <_tx_semaphore_cleanup+0xf4>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	3301      	adds	r3, #1
 80079a0:	4a10      	ldr	r2, [pc, #64]	; (80079e4 <_tx_semaphore_cleanup+0xf4>)
 80079a2:	6013      	str	r3, [r2, #0]
 80079a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079a6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	f383 8810 	msr	PRIMASK, r3
}
 80079ae:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 fd57 	bl	8008464 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80079b6:	f3ef 8310 	mrs	r3, PRIMASK
 80079ba:	61bb      	str	r3, [r7, #24]
    return(posture);
 80079bc:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80079be:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80079c0:	b672      	cpsid	i
    return(int_posture);
 80079c2:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80079c4:	637b      	str	r3, [r7, #52]	; 0x34
 80079c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079c8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f383 8810 	msr	PRIMASK, r3
}
 80079d0:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80079d2:	bf00      	nop
 80079d4:	3738      	adds	r7, #56	; 0x38
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	080078f1 	.word	0x080078f1
 80079e0:	53454d41 	.word	0x53454d41
 80079e4:	200016e0 	.word	0x200016e0

080079e8 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b092      	sub	sp, #72	; 0x48
 80079ec:	af02      	add	r7, sp, #8
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 80079f4:	221c      	movs	r2, #28
 80079f6:	2100      	movs	r1, #0
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	f008 f821 	bl	800fa40 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007a0a:	f3ef 8310 	mrs	r3, PRIMASK
 8007a0e:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8007a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8007a12:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007a14:	b672      	cpsid	i
    return(int_posture);
 8007a16:	6a3b      	ldr	r3, [r7, #32]
    
    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 8007a18:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	4a56      	ldr	r2, [pc, #344]	; (8007b78 <_tx_semaphore_create+0x190>)
 8007a1e:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8007a20:	4b56      	ldr	r3, [pc, #344]	; (8007b7c <_tx_semaphore_create+0x194>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d109      	bne.n	8007a3c <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 8007a28:	4a55      	ldr	r2, [pc, #340]	; (8007b80 <_tx_semaphore_create+0x198>)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	619a      	str	r2, [r3, #24]
 8007a3a:	e011      	b.n	8007a60 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 8007a3c:	4b50      	ldr	r3, [pc, #320]	; (8007b80 <_tx_semaphore_create+0x198>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	617b      	str	r3, [r7, #20]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	699b      	ldr	r3, [r3, #24]
 8007a46:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 8007a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a58:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 8007a5a:	697a      	ldr	r2, [r7, #20]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	615a      	str	r2, [r3, #20]
    }
    
    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8007a60:	4b46      	ldr	r3, [pc, #280]	; (8007b7c <_tx_semaphore_create+0x194>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	3301      	adds	r3, #1
 8007a66:	4a45      	ldr	r2, [pc, #276]	; (8007b7c <_tx_semaphore_create+0x194>)
 8007a68:	6013      	str	r3, [r2, #0]

    /* Optional semaphore create extended processing.  */
    TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_SEMAPHORE, semaphore_ptr, name_ptr, initial_count, 0)
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	9300      	str	r3, [sp, #0]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	68ba      	ldr	r2, [r7, #8]
 8007a72:	68f9      	ldr	r1, [r7, #12]
 8007a74:	2004      	movs	r0, #4
 8007a76:	f001 fc17 	bl	80092a8 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_SEMAPHORE_CREATE, semaphore_ptr, initial_count, TX_POINTER_TO_ULONG_CONVERT(&next_semaphore), 0, TX_TRACE_SEMAPHORE_EVENTS)
 8007a7a:	4b42      	ldr	r3, [pc, #264]	; (8007b84 <_tx_semaphore_create+0x19c>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d06c      	beq.n	8007b60 <_tx_semaphore_create+0x178>
 8007a86:	4b40      	ldr	r3, [pc, #256]	; (8007b88 <_tx_semaphore_create+0x1a0>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d066      	beq.n	8007b60 <_tx_semaphore_create+0x178>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007a92:	f3ef 8305 	mrs	r3, IPSR
 8007a96:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8007a98:	69fa      	ldr	r2, [r7, #28]
 8007a9a:	4b3c      	ldr	r3, [pc, #240]	; (8007b8c <_tx_semaphore_create+0x1a4>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007aa2:	4b3b      	ldr	r3, [pc, #236]	; (8007b90 <_tx_semaphore_create+0x1a8>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8007aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d10b      	bne.n	8007ac6 <_tx_semaphore_create+0xde>
 8007aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ab8:	041a      	lsls	r2, r3, #16
 8007aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007abc:	4313      	orrs	r3, r2
 8007abe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ac4:	e00e      	b.n	8007ae4 <_tx_semaphore_create+0xfc>
 8007ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8007acc:	d205      	bcs.n	8007ada <_tx_semaphore_create+0xf2>
 8007ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ad6:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ad8:	e004      	b.n	8007ae4 <_tx_semaphore_create+0xfc>
 8007ada:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8007ade:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ae4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae8:	601a      	str	r2, [r3, #0]
 8007aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007aee:	605a      	str	r2, [r3, #4]
 8007af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af2:	2251      	movs	r2, #81	; 0x51
 8007af4:	609a      	str	r2, [r3, #8]
 8007af6:	4b27      	ldr	r3, [pc, #156]	; (8007b94 <_tx_semaphore_create+0x1ac>)
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afc:	60da      	str	r2, [r3, #12]
 8007afe:	68fa      	ldr	r2, [r7, #12]
 8007b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b02:	611a      	str	r2, [r3, #16]
 8007b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	615a      	str	r2, [r3, #20]
 8007b0a:	f107 0214 	add.w	r2, r7, #20
 8007b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b10:	619a      	str	r2, [r3, #24]
 8007b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b14:	2200      	movs	r2, #0
 8007b16:	61da      	str	r2, [r3, #28]
 8007b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1a:	3320      	adds	r3, #32
 8007b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b1e:	4b1e      	ldr	r3, [pc, #120]	; (8007b98 <_tx_semaphore_create+0x1b0>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d314      	bcc.n	8007b52 <_tx_semaphore_create+0x16a>
 8007b28:	4b1c      	ldr	r3, [pc, #112]	; (8007b9c <_tx_semaphore_create+0x1b4>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b2e:	4a15      	ldr	r2, [pc, #84]	; (8007b84 <_tx_semaphore_create+0x19c>)
 8007b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b32:	6013      	str	r3, [r2, #0]
 8007b34:	4b1a      	ldr	r3, [pc, #104]	; (8007ba0 <_tx_semaphore_create+0x1b8>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b3a:	621a      	str	r2, [r3, #32]
 8007b3c:	4b19      	ldr	r3, [pc, #100]	; (8007ba4 <_tx_semaphore_create+0x1bc>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00d      	beq.n	8007b60 <_tx_semaphore_create+0x178>
 8007b44:	4b17      	ldr	r3, [pc, #92]	; (8007ba4 <_tx_semaphore_create+0x1bc>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a15      	ldr	r2, [pc, #84]	; (8007ba0 <_tx_semaphore_create+0x1b8>)
 8007b4a:	6812      	ldr	r2, [r2, #0]
 8007b4c:	4610      	mov	r0, r2
 8007b4e:	4798      	blx	r3
 8007b50:	e006      	b.n	8007b60 <_tx_semaphore_create+0x178>
 8007b52:	4a0c      	ldr	r2, [pc, #48]	; (8007b84 <_tx_semaphore_create+0x19c>)
 8007b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b56:	6013      	str	r3, [r2, #0]
 8007b58:	4b11      	ldr	r3, [pc, #68]	; (8007ba0 <_tx_semaphore_create+0x1b8>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b5e:	621a      	str	r2, [r3, #32]
 8007b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b62:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	f383 8810 	msr	PRIMASK, r3
}
 8007b6a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3740      	adds	r7, #64	; 0x40
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	53454d41 	.word	0x53454d41
 8007b7c:	20001614 	.word	0x20001614
 8007b80:	20001610 	.word	0x20001610
 8007b84:	20001c64 	.word	0x20001c64
 8007b88:	20001c68 	.word	0x20001c68
 8007b8c:	2000000c 	.word	0x2000000c
 8007b90:	20001648 	.word	0x20001648
 8007b94:	e0001004 	.word	0xe0001004
 8007b98:	20001c60 	.word	0x20001c60
 8007b9c:	20001c5c 	.word	0x20001c5c
 8007ba0:	20001c50 	.word	0x20001c50
 8007ba4:	20001c6c 	.word	0x20001c6c

08007ba8 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b092      	sub	sp, #72	; 0x48
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007bb6:	f3ef 8310 	mrs	r3, PRIMASK
 8007bba:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8007bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8007bbe:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007bc0:	b672      	cpsid	i
    return(int_posture);
 8007bc2:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 8007bc4:	63bb      	str	r3, [r7, #56]	; 0x38
    /* Increment the number of attempts to get this semaphore.  */
    semaphore_ptr -> tx_semaphore_performance_get_count++;
#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_SEMAPHORE_GET, semaphore_ptr, wait_option, semaphore_ptr -> tx_semaphore_count, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), TX_TRACE_SEMAPHORE_EVENTS)
 8007bc6:	4b78      	ldr	r3, [pc, #480]	; (8007da8 <_tx_semaphore_get+0x200>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	637b      	str	r3, [r7, #52]	; 0x34
 8007bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d06d      	beq.n	8007cae <_tx_semaphore_get+0x106>
 8007bd2:	4b76      	ldr	r3, [pc, #472]	; (8007dac <_tx_semaphore_get+0x204>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d067      	beq.n	8007cae <_tx_semaphore_get+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007bde:	f3ef 8305 	mrs	r3, IPSR
 8007be2:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8007be4:	69fa      	ldr	r2, [r7, #28]
 8007be6:	4b72      	ldr	r3, [pc, #456]	; (8007db0 <_tx_semaphore_get+0x208>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	633b      	str	r3, [r7, #48]	; 0x30
 8007bee:	4b71      	ldr	r3, [pc, #452]	; (8007db4 <_tx_semaphore_get+0x20c>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d10b      	bne.n	8007c12 <_tx_semaphore_get+0x6a>
 8007bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bfe:	643b      	str	r3, [r7, #64]	; 0x40
 8007c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c04:	041a      	lsls	r2, r3, #16
 8007c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c0e:	643b      	str	r3, [r7, #64]	; 0x40
 8007c10:	e00e      	b.n	8007c30 <_tx_semaphore_get+0x88>
 8007c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c14:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8007c18:	d205      	bcs.n	8007c26 <_tx_semaphore_get+0x7e>
 8007c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c1c:	643b      	str	r3, [r7, #64]	; 0x40
 8007c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c24:	e004      	b.n	8007c30 <_tx_semaphore_get+0x88>
 8007c26:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8007c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	643b      	str	r3, [r7, #64]	; 0x40
 8007c30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c34:	601a      	str	r2, [r3, #0]
 8007c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c3a:	605a      	str	r2, [r3, #4]
 8007c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c3e:	2253      	movs	r2, #83	; 0x53
 8007c40:	609a      	str	r2, [r3, #8]
 8007c42:	4b5d      	ldr	r3, [pc, #372]	; (8007db8 <_tx_semaphore_get+0x210>)
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c48:	60da      	str	r2, [r3, #12]
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c4e:	611a      	str	r2, [r3, #16]
 8007c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c52:	683a      	ldr	r2, [r7, #0]
 8007c54:	615a      	str	r2, [r3, #20]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	689a      	ldr	r2, [r3, #8]
 8007c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c5c:	619a      	str	r2, [r3, #24]
 8007c5e:	f107 0208 	add.w	r2, r7, #8
 8007c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c64:	61da      	str	r2, [r3, #28]
 8007c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c68:	3320      	adds	r3, #32
 8007c6a:	637b      	str	r3, [r7, #52]	; 0x34
 8007c6c:	4b53      	ldr	r3, [pc, #332]	; (8007dbc <_tx_semaphore_get+0x214>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d314      	bcc.n	8007ca0 <_tx_semaphore_get+0xf8>
 8007c76:	4b52      	ldr	r3, [pc, #328]	; (8007dc0 <_tx_semaphore_get+0x218>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	637b      	str	r3, [r7, #52]	; 0x34
 8007c7c:	4a4a      	ldr	r2, [pc, #296]	; (8007da8 <_tx_semaphore_get+0x200>)
 8007c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c80:	6013      	str	r3, [r2, #0]
 8007c82:	4b50      	ldr	r3, [pc, #320]	; (8007dc4 <_tx_semaphore_get+0x21c>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c88:	621a      	str	r2, [r3, #32]
 8007c8a:	4b4f      	ldr	r3, [pc, #316]	; (8007dc8 <_tx_semaphore_get+0x220>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00d      	beq.n	8007cae <_tx_semaphore_get+0x106>
 8007c92:	4b4d      	ldr	r3, [pc, #308]	; (8007dc8 <_tx_semaphore_get+0x220>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a4b      	ldr	r2, [pc, #300]	; (8007dc4 <_tx_semaphore_get+0x21c>)
 8007c98:	6812      	ldr	r2, [r2, #0]
 8007c9a:	4610      	mov	r0, r2
 8007c9c:	4798      	blx	r3
 8007c9e:	e006      	b.n	8007cae <_tx_semaphore_get+0x106>
 8007ca0:	4a41      	ldr	r2, [pc, #260]	; (8007da8 <_tx_semaphore_get+0x200>)
 8007ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ca4:	6013      	str	r3, [r2, #0]
 8007ca6:	4b47      	ldr	r3, [pc, #284]	; (8007dc4 <_tx_semaphore_get+0x21c>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cac:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00a      	beq.n	8007ccc <_tx_semaphore_get+0x124>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	1e5a      	subs	r2, r3, #1
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	609a      	str	r2, [r3, #8]
 8007cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	f383 8810 	msr	PRIMASK, r3
}
 8007cca:	e068      	b.n	8007d9e <_tx_semaphore_get+0x1f6>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d05d      	beq.n	8007d8e <_tx_semaphore_get+0x1e6>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8007cd2:	4b3e      	ldr	r3, [pc, #248]	; (8007dcc <_tx_semaphore_get+0x224>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d008      	beq.n	8007cec <_tx_semaphore_get+0x144>
 8007cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cdc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	f383 8810 	msr	PRIMASK, r3
}
 8007ce4:	bf00      	nop
    
            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 8007ce6:	230d      	movs	r3, #13
 8007ce8:	647b      	str	r3, [r7, #68]	; 0x44
 8007cea:	e058      	b.n	8007d9e <_tx_semaphore_get+0x1f6>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif
            
            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8007cec:	4b31      	ldr	r3, [pc, #196]	; (8007db4 <_tx_semaphore_get+0x20c>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	60bb      	str	r3, [r7, #8]

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	4a36      	ldr	r2, [pc, #216]	; (8007dd0 <_tx_semaphore_get+0x228>)
 8007cf6:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007d04:	3201      	adds	r2, #1
 8007d06:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	691b      	ldr	r3, [r3, #16]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d109      	bne.n	8007d26 <_tx_semaphore_get+0x17e>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 8007d12:	68ba      	ldr	r2, [r7, #8]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	68ba      	ldr	r2, [r7, #8]
 8007d22:	675a      	str	r2, [r3, #116]	; 0x74
 8007d24:	e011      	b.n	8007d4a <_tx_semaphore_get+0x1a2>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d30:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8007d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d36:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d3c:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8007d3e:	68ba      	ldr	r2, [r7, #8]
 8007d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d42:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8007d44:	68ba      	ldr	r2, [r7, #8]
 8007d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d48:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	1c5a      	adds	r2, r3, #1
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	2206      	movs	r2, #6
 8007d58:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	683a      	ldr	r2, [r7, #0]
 8007d64:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8007d66:	4b19      	ldr	r3, [pc, #100]	; (8007dcc <_tx_semaphore_get+0x224>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	4a17      	ldr	r2, [pc, #92]	; (8007dcc <_tx_semaphore_get+0x224>)
 8007d6e:	6013      	str	r3, [r2, #0]
 8007d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d72:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	f383 8810 	msr	PRIMASK, r3
}
 8007d7a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f000 fd2a 	bl	80087d8 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d8a:	647b      	str	r3, [r7, #68]	; 0x44
 8007d8c:	e007      	b.n	8007d9e <_tx_semaphore_get+0x1f6>
 8007d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d90:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f383 8810 	msr	PRIMASK, r3
}
 8007d98:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 8007d9a:	230d      	movs	r3, #13
 8007d9c:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8007d9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3748      	adds	r7, #72	; 0x48
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	20001c64 	.word	0x20001c64
 8007dac:	20001c68 	.word	0x20001c68
 8007db0:	2000000c 	.word	0x2000000c
 8007db4:	20001648 	.word	0x20001648
 8007db8:	e0001004 	.word	0xe0001004
 8007dbc:	20001c60 	.word	0x20001c60
 8007dc0:	20001c5c 	.word	0x20001c5c
 8007dc4:	20001c50 	.word	0x20001c50
 8007dc8:	20001c6c 	.word	0x20001c6c
 8007dcc:	200016e0 	.word	0x200016e0
 8007dd0:	080078f1 	.word	0x080078f1

08007dd4 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b09a      	sub	sp, #104	; 0x68
 8007dd8:	af02      	add	r7, sp, #8
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	607a      	str	r2, [r7, #4]
 8007de0:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8007de2:	2300      	movs	r3, #0
 8007de4:	65bb      	str	r3, [r7, #88]	; 0x58
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8007de6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007de8:	21ef      	movs	r1, #239	; 0xef
 8007dea:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007dec:	f007 fe28 	bl	800fa40 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8007df0:	22b0      	movs	r2, #176	; 0xb0
 8007df2:	2100      	movs	r1, #0
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	f007 fe23 	bl	800fa40 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	68ba      	ldr	r2, [r7, #8]
 8007dfe:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	683a      	ldr	r2, [r7, #0]
 8007e0a:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e10:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e16:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007e1c:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007e22:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007e2a:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007e30:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2220      	movs	r2, #32
 8007e36:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8007e3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8007e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e40:	3b01      	subs	r3, #1
 8007e42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e44:	4413      	add	r3, r2
 8007e46:	64fb      	str	r3, [r7, #76]	; 0x4c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e4c:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8007e4e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007e50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d007      	beq.n	8007e66 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8007e64:	e006      	b.n	8007e74 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007e6a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007e70:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2203      	movs	r2, #3
 8007e78:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	4a86      	ldr	r2, [pc, #536]	; (8008098 <_tx_thread_create+0x2c4>)
 8007e7e:	655a      	str	r2, [r3, #84]	; 0x54
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the 
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8007e86:	4985      	ldr	r1, [pc, #532]	; (800809c <_tx_thread_create+0x2c8>)
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	f7f8 fa51 	bl	8000330 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8007e92:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8007e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8007e96:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8007e98:	b672      	cpsid	i
    return(int_posture);
 8007e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8007e9c:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	4a7f      	ldr	r2, [pc, #508]	; (80080a0 <_tx_thread_create+0x2cc>)
 8007ea2:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8007ea4:	4b7f      	ldr	r3, [pc, #508]	; (80080a4 <_tx_thread_create+0x2d0>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d10b      	bne.n	8007ec4 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8007eac:	4a7e      	ldr	r2, [pc, #504]	; (80080a8 <_tx_thread_create+0x2d4>)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8007ec2:	e016      	b.n	8007ef2 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8007ec4:	4b78      	ldr	r3, [pc, #480]	; (80080a8 <_tx_thread_create+0x2d4>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	647b      	str	r3, [r7, #68]	; 0x44
        previous_thread =  next_thread -> tx_thread_created_previous;
 8007eca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ed0:	643b      	str	r3, [r7, #64]	; 0x40

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8007ed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8007eda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ee6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007eee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }
    
    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8007ef2:	4b6c      	ldr	r3, [pc, #432]	; (80080a4 <_tx_thread_create+0x2d0>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	4a6a      	ldr	r2, [pc, #424]	; (80080a4 <_tx_thread_create+0x2d0>)
 8007efa:	6013      	str	r3, [r2, #0]

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, name_ptr, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size)
 8007efc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f00:	9300      	str	r3, [sp, #0]
 8007f02:	4613      	mov	r3, r2
 8007f04:	68ba      	ldr	r2, [r7, #8]
 8007f06:	68f9      	ldr	r1, [r7, #12]
 8007f08:	2001      	movs	r0, #1
 8007f0a:	f001 f9cd 	bl	80092a8 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_CREATE, thread_ptr, priority, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size, TX_TRACE_THREAD_EVENTS)
 8007f0e:	4b67      	ldr	r3, [pc, #412]	; (80080ac <_tx_thread_create+0x2d8>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d06b      	beq.n	8007ff2 <_tx_thread_create+0x21e>
 8007f1a:	4b65      	ldr	r3, [pc, #404]	; (80080b0 <_tx_thread_create+0x2dc>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d065      	beq.n	8007ff2 <_tx_thread_create+0x21e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007f26:	f3ef 8305 	mrs	r3, IPSR
 8007f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8007f2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f2e:	4b61      	ldr	r3, [pc, #388]	; (80080b4 <_tx_thread_create+0x2e0>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f36:	4b60      	ldr	r3, [pc, #384]	; (80080b8 <_tx_thread_create+0x2e4>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	653b      	str	r3, [r7, #80]	; 0x50
 8007f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d10b      	bne.n	8007f5a <_tx_thread_create+0x186>
 8007f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f46:	657b      	str	r3, [r7, #84]	; 0x54
 8007f48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f4c:	041a      	lsls	r2, r3, #16
 8007f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f50:	4313      	orrs	r3, r2
 8007f52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f56:	657b      	str	r3, [r7, #84]	; 0x54
 8007f58:	e00e      	b.n	8007f78 <_tx_thread_create+0x1a4>
 8007f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8007f60:	d205      	bcs.n	8007f6e <_tx_thread_create+0x19a>
 8007f62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f64:	657b      	str	r3, [r7, #84]	; 0x54
 8007f66:	f04f 33ff 	mov.w	r3, #4294967295
 8007f6a:	653b      	str	r3, [r7, #80]	; 0x50
 8007f6c:	e004      	b.n	8007f78 <_tx_thread_create+0x1a4>
 8007f6e:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8007f72:	653b      	str	r3, [r7, #80]	; 0x50
 8007f74:	2300      	movs	r3, #0
 8007f76:	657b      	str	r3, [r7, #84]	; 0x54
 8007f78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f7c:	601a      	str	r2, [r3, #0]
 8007f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007f82:	605a      	str	r2, [r3, #4]
 8007f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f86:	2264      	movs	r2, #100	; 0x64
 8007f88:	609a      	str	r2, [r3, #8]
 8007f8a:	4b4c      	ldr	r3, [pc, #304]	; (80080bc <_tx_thread_create+0x2e8>)
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f90:	60da      	str	r2, [r3, #12]
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f96:	611a      	str	r2, [r3, #16]
 8007f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f9a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007f9c:	615a      	str	r2, [r3, #20]
 8007f9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fa2:	619a      	str	r2, [r3, #24]
 8007fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fa6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007fa8:	61da      	str	r2, [r3, #28]
 8007faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fac:	3320      	adds	r3, #32
 8007fae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fb0:	4b43      	ldr	r3, [pc, #268]	; (80080c0 <_tx_thread_create+0x2ec>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d314      	bcc.n	8007fe4 <_tx_thread_create+0x210>
 8007fba:	4b42      	ldr	r3, [pc, #264]	; (80080c4 <_tx_thread_create+0x2f0>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fc0:	4a3a      	ldr	r2, [pc, #232]	; (80080ac <_tx_thread_create+0x2d8>)
 8007fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fc4:	6013      	str	r3, [r2, #0]
 8007fc6:	4b40      	ldr	r3, [pc, #256]	; (80080c8 <_tx_thread_create+0x2f4>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007fcc:	621a      	str	r2, [r3, #32]
 8007fce:	4b3f      	ldr	r3, [pc, #252]	; (80080cc <_tx_thread_create+0x2f8>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00d      	beq.n	8007ff2 <_tx_thread_create+0x21e>
 8007fd6:	4b3d      	ldr	r3, [pc, #244]	; (80080cc <_tx_thread_create+0x2f8>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a3b      	ldr	r2, [pc, #236]	; (80080c8 <_tx_thread_create+0x2f4>)
 8007fdc:	6812      	ldr	r2, [r2, #0]
 8007fde:	4610      	mov	r0, r2
 8007fe0:	4798      	blx	r3
 8007fe2:	e006      	b.n	8007ff2 <_tx_thread_create+0x21e>
 8007fe4:	4a31      	ldr	r2, [pc, #196]	; (80080ac <_tx_thread_create+0x2d8>)
 8007fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fe8:	6013      	str	r3, [r2, #0]
 8007fea:	4b37      	ldr	r3, [pc, #220]	; (80080c8 <_tx_thread_create+0x2f4>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007ff0:	621a      	str	r2, [r3, #32]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8007ff2:	4b37      	ldr	r3, [pc, #220]	; (80080d0 <_tx_thread_create+0x2fc>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	4a35      	ldr	r2, [pc, #212]	; (80080d0 <_tx_thread_create+0x2fc>)
 8007ffa:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8007ffc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d129      	bne.n	8008056 <_tx_thread_create+0x282>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008002:	f3ef 8305 	mrs	r3, IPSR
 8008006:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8008008:	6aba      	ldr	r2, [r7, #40]	; 0x28
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800800a:	4b2a      	ldr	r3, [pc, #168]	; (80080b4 <_tx_thread_create+0x2e0>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4313      	orrs	r3, r2
 8008010:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8008014:	d30d      	bcc.n	8008032 <_tx_thread_create+0x25e>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is 
               not required, since interrupts are assumed to be disabled during 
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8008016:	4b2f      	ldr	r3, [pc, #188]	; (80080d4 <_tx_thread_create+0x300>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800801c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800801e:	2b00      	cmp	r3, #0
 8008020:	d009      	beq.n	8008036 <_tx_thread_create+0x262>
            {
                
                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8008022:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008026:	65bb      	str	r3, [r7, #88]	; 0x58

                /* For initialization, temporarily set the preemption-threshold to the 
                   priority level to make sure the highest-priority thread runs once 
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8008028:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800802a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800802c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800802e:	63da      	str	r2, [r3, #60]	; 0x3c
 8008030:	e001      	b.n	8008036 <_tx_thread_create+0x262>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8008032:	2300      	movs	r3, #0
 8008034:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008038:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800803a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803c:	f383 8810 	msr	PRIMASK, r3
}
 8008040:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f000 fa0e 	bl	8008464 <_tx_thread_system_resume>
#endif
 
        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8008048:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800804a:	2b00      	cmp	r3, #0
 800804c:	d01e      	beq.n	800808c <_tx_thread_create+0x2b8>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800804e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008050:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008052:	63da      	str	r2, [r3, #60]	; 0x3c
 8008054:	e01a      	b.n	800808c <_tx_thread_create+0x2b8>
 8008056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008058:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	f383 8810 	msr	PRIMASK, r3
}
 8008060:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008062:	f3ef 8310 	mrs	r3, PRIMASK
 8008066:	61fb      	str	r3, [r7, #28]
    return(posture);
 8008068:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800806a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800806c:	b672      	cpsid	i
    return(int_posture);
 800806e:	69bb      	ldr	r3, [r7, #24]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8008070:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8008072:	4b17      	ldr	r3, [pc, #92]	; (80080d0 <_tx_thread_create+0x2fc>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	3b01      	subs	r3, #1
 8008078:	4a15      	ldr	r2, [pc, #84]	; (80080d0 <_tx_thread_create+0x2fc>)
 800807a:	6013      	str	r3, [r2, #0]
 800807c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800807e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008080:	6a3b      	ldr	r3, [r7, #32]
 8008082:	f383 8810 	msr	PRIMASK, r3
}
 8008086:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8008088:	f000 f9b2 	bl	80083f0 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	3760      	adds	r7, #96	; 0x60
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	08008d79 	.word	0x08008d79
 800809c:	08008155 	.word	0x08008155
 80080a0:	54485244 	.word	0x54485244
 80080a4:	20001654 	.word	0x20001654
 80080a8:	20001650 	.word	0x20001650
 80080ac:	20001c64 	.word	0x20001c64
 80080b0:	20001c68 	.word	0x20001c68
 80080b4:	2000000c 	.word	0x2000000c
 80080b8:	20001648 	.word	0x20001648
 80080bc:	e0001004 	.word	0xe0001004
 80080c0:	20001c60 	.word	0x20001c60
 80080c4:	20001c5c 	.word	0x20001c5c
 80080c8:	20001c50 	.word	0x20001c50
 80080cc:	20001c6c 	.word	0x20001c6c
 80080d0:	200016e0 	.word	0x200016e0
 80080d4:	2000164c 	.word	0x2000164c

080080d8 <_tx_thread_initialize>:
/*                                            Execution Profile support,  */
/*                                            resulting in version 6.1.7  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 80080dc:	4b13      	ldr	r3, [pc, #76]	; (800812c <_tx_thread_initialize+0x54>)
 80080de:	2200      	movs	r2, #0
 80080e0:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 80080e2:	4b13      	ldr	r3, [pc, #76]	; (8008130 <_tx_thread_initialize+0x58>)
 80080e4:	2200      	movs	r2, #0
 80080e6:	601a      	str	r2, [r3, #0]
 80080e8:	4b12      	ldr	r3, [pc, #72]	; (8008134 <_tx_thread_initialize+0x5c>)
 80080ea:	2200      	movs	r2, #0
 80080ec:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80080ee:	4b12      	ldr	r3, [pc, #72]	; (8008138 <_tx_thread_initialize+0x60>)
 80080f0:	2220      	movs	r2, #32
 80080f2:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 80080f4:	2280      	movs	r2, #128	; 0x80
 80080f6:	2100      	movs	r1, #0
 80080f8:	4810      	ldr	r0, [pc, #64]	; (800813c <_tx_thread_initialize+0x64>)
 80080fa:	f007 fca1 	bl	800fa40 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 80080fe:	4b10      	ldr	r3, [pc, #64]	; (8008140 <_tx_thread_initialize+0x68>)
 8008100:	2200      	movs	r2, #0
 8008102:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8008104:	4b0f      	ldr	r3, [pc, #60]	; (8008144 <_tx_thread_initialize+0x6c>)
 8008106:	2200      	movs	r2, #0
 8008108:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800810a:	4b0f      	ldr	r3, [pc, #60]	; (8008148 <_tx_thread_initialize+0x70>)
 800810c:	2200      	movs	r2, #0
 800810e:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8008110:	4b0e      	ldr	r3, [pc, #56]	; (800814c <_tx_thread_initialize+0x74>)
 8008112:	2200      	movs	r2, #0
 8008114:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_TIMER_ENABLE_PERFORMANCE_INFO
                            | (((ULONG) 1) << 9)
#endif
#ifdef TX_ENABLE_EVENT_TRACE
                            | (((ULONG) 1) << 8)
 8008116:	4b0e      	ldr	r3, [pc, #56]	; (8008150 <_tx_thread_initialize+0x78>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f043 2301 	orr.w	r3, r3, #16777472	; 0x1000100
 800811e:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
    _tx_build_options =  _tx_build_options 
 8008122:	4a0b      	ldr	r2, [pc, #44]	; (8008150 <_tx_thread_initialize+0x78>)
 8008124:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8008126:	bf00      	nop
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	20001648 	.word	0x20001648
 8008130:	2000164c 	.word	0x2000164c
 8008134:	20001658 	.word	0x20001658
 8008138:	2000165c 	.word	0x2000165c
 800813c:	20001660 	.word	0x20001660
 8008140:	20001650 	.word	0x20001650
 8008144:	20001654 	.word	0x20001654
 8008148:	200016e0 	.word	0x200016e0
 800814c:	200016e4 	.word	0x200016e4
 8008150:	200016e8 	.word	0x200016e8

08008154 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b088      	sub	sp, #32
 8008158:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800815a:	4b21      	ldr	r3, [pc, #132]	; (80081e0 <_tx_thread_shell_entry+0x8c>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008164:	69fa      	ldr	r2, [r7, #28]
 8008166:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008168:	4610      	mov	r0, r2
 800816a:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800816c:	4b1d      	ldr	r3, [pc, #116]	; (80081e4 <_tx_thread_shell_entry+0x90>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d003      	beq.n	800817c <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that 
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8008174:	4b1b      	ldr	r3, [pc, #108]	; (80081e4 <_tx_thread_shell_entry+0x90>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	69f8      	ldr	r0, [r7, #28]
 800817a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800817c:	f3ef 8310 	mrs	r3, PRIMASK
 8008180:	607b      	str	r3, [r7, #4]
    return(posture);
 8008182:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8008184:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008186:	b672      	cpsid	i
    return(int_posture);
 8008188:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800818a:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	2201      	movs	r2, #1
 8008190:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	2201      	movs	r2, #1
 8008196:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	2200      	movs	r2, #0
 800819c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800819e:	4b12      	ldr	r3, [pc, #72]	; (80081e8 <_tx_thread_shell_entry+0x94>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	3301      	adds	r3, #1
 80081a4:	4a10      	ldr	r2, [pc, #64]	; (80081e8 <_tx_thread_shell_entry+0x94>)
 80081a6:	6013      	str	r3, [r2, #0]
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	f383 8810 	msr	PRIMASK, r3
}
 80081b2:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 80081b4:	f3ef 8314 	mrs	r3, CONTROL
 80081b8:	60fb      	str	r3, [r7, #12]
    return(control_value);
 80081ba:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 80081bc:	617b      	str	r3, [r7, #20]
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	f023 0304 	bic.w	r3, r3, #4
 80081c4:	617b      	str	r3, [r7, #20]
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	f383 8814 	msr	CONTROL, r3
}
 80081d0:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 80081d2:	69f8      	ldr	r0, [r7, #28]
 80081d4:	f000 fb00 	bl	80087d8 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80081d8:	bf00      	nop
 80081da:	3720      	adds	r7, #32
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	20001648 	.word	0x20001648
 80081e4:	200016e4 	.word	0x200016e4
 80081e8:	200016e0 	.word	0x200016e0

080081ec <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b094      	sub	sp, #80	; 0x50
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80081f4:	f3ef 8310 	mrs	r3, PRIMASK
 80081f8:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 80081fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 80081fc:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 80081fe:	b672      	cpsid	i
    return(int_posture);
 8008200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8008202:	647b      	str	r3, [r7, #68]	; 0x44

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8008204:	4b6f      	ldr	r3, [pc, #444]	; (80083c4 <_tx_thread_sleep+0x1d8>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800820a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800820c:	2b00      	cmp	r3, #0
 800820e:	d108      	bne.n	8008222 <_tx_thread_sleep+0x36>
 8008210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008212:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008216:	f383 8810 	msr	PRIMASK, r3
}
 800821a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800821c:	2313      	movs	r3, #19
 800821e:	60fb      	str	r3, [r7, #12]
 8008220:	e0ca      	b.n	80083b8 <_tx_thread_sleep+0x1cc>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008222:	f3ef 8305 	mrs	r3, IPSR
 8008226:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8008228:	6aba      	ldr	r2, [r7, #40]	; 0x28
    }
    
    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800822a:	4b67      	ldr	r3, [pc, #412]	; (80083c8 <_tx_thread_sleep+0x1dc>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4313      	orrs	r3, r2
 8008230:	2b00      	cmp	r3, #0
 8008232:	d008      	beq.n	8008246 <_tx_thread_sleep+0x5a>
 8008234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008236:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823a:	f383 8810 	msr	PRIMASK, r3
}
 800823e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8008240:	2313      	movs	r3, #19
 8008242:	60fb      	str	r3, [r7, #12]
 8008244:	e0b8      	b.n	80083b8 <_tx_thread_sleep+0x1cc>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8008246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008248:	4a60      	ldr	r2, [pc, #384]	; (80083cc <_tx_thread_sleep+0x1e0>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d108      	bne.n	8008260 <_tx_thread_sleep+0x74>
 800824e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008250:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008252:	6a3b      	ldr	r3, [r7, #32]
 8008254:	f383 8810 	msr	PRIMASK, r3
}
 8008258:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800825a:	2313      	movs	r3, #19
 800825c:	60fb      	str	r3, [r7, #12]
 800825e:	e0ab      	b.n	80083b8 <_tx_thread_sleep+0x1cc>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d108      	bne.n	8008278 <_tx_thread_sleep+0x8c>
 8008266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008268:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	f383 8810 	msr	PRIMASK, r3
}
 8008270:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
      
        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 8008272:	2300      	movs	r3, #0
 8008274:	60fb      	str	r3, [r7, #12]
 8008276:	e09f      	b.n	80083b8 <_tx_thread_sleep+0x1cc>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8008278:	4b55      	ldr	r3, [pc, #340]	; (80083d0 <_tx_thread_sleep+0x1e4>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d008      	beq.n	8008292 <_tx_thread_sleep+0xa6>
 8008280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008282:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008284:	69bb      	ldr	r3, [r7, #24]
 8008286:	f383 8810 	msr	PRIMASK, r3
}
 800828a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE
        
            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800828c:	2313      	movs	r3, #19
 800828e:	60fb      	str	r3, [r7, #12]
 8008290:	e092      	b.n	80083b8 <_tx_thread_sleep+0x1cc>
        }
        else
        {
        
            /* If trace is enabled, insert this event into the trace buffer.  */
            TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SLEEP, TX_ULONG_TO_POINTER_CONVERT(timer_ticks), thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&status), 0, TX_TRACE_THREAD_EVENTS)
 8008292:	4b50      	ldr	r3, [pc, #320]	; (80083d4 <_tx_thread_sleep+0x1e8>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800829a:	2b00      	cmp	r3, #0
 800829c:	d06d      	beq.n	800837a <_tx_thread_sleep+0x18e>
 800829e:	4b4e      	ldr	r3, [pc, #312]	; (80083d8 <_tx_thread_sleep+0x1ec>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d067      	beq.n	800837a <_tx_thread_sleep+0x18e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80082aa:	f3ef 8305 	mrs	r3, IPSR
 80082ae:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80082b0:	697a      	ldr	r2, [r7, #20]
 80082b2:	4b45      	ldr	r3, [pc, #276]	; (80083c8 <_tx_thread_sleep+0x1dc>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80082ba:	4b42      	ldr	r3, [pc, #264]	; (80083c4 <_tx_thread_sleep+0x1d8>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	64bb      	str	r3, [r7, #72]	; 0x48
 80082c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d10b      	bne.n	80082de <_tx_thread_sleep+0xf2>
 80082c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082d0:	041a      	lsls	r2, r3, #16
 80082d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082d4:	4313      	orrs	r3, r2
 80082d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80082da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082dc:	e00e      	b.n	80082fc <_tx_thread_sleep+0x110>
 80082de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e0:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80082e4:	d205      	bcs.n	80082f2 <_tx_thread_sleep+0x106>
 80082e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082ea:	f04f 33ff 	mov.w	r3, #4294967295
 80082ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80082f0:	e004      	b.n	80082fc <_tx_thread_sleep+0x110>
 80082f2:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 80082f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80082f8:	2300      	movs	r3, #0
 80082fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008300:	601a      	str	r2, [r3, #0]
 8008302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008304:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008306:	605a      	str	r2, [r3, #4]
 8008308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800830a:	2270      	movs	r2, #112	; 0x70
 800830c:	609a      	str	r2, [r3, #8]
 800830e:	4b33      	ldr	r3, [pc, #204]	; (80083dc <_tx_thread_sleep+0x1f0>)
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008314:	60da      	str	r2, [r3, #12]
 8008316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	611a      	str	r2, [r3, #16]
 800831c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800831e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008322:	615a      	str	r2, [r3, #20]
 8008324:	f107 020c 	add.w	r2, r7, #12
 8008328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800832a:	619a      	str	r2, [r3, #24]
 800832c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800832e:	2200      	movs	r2, #0
 8008330:	61da      	str	r2, [r3, #28]
 8008332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008334:	3320      	adds	r3, #32
 8008336:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008338:	4b29      	ldr	r3, [pc, #164]	; (80083e0 <_tx_thread_sleep+0x1f4>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800833e:	429a      	cmp	r2, r3
 8008340:	d314      	bcc.n	800836c <_tx_thread_sleep+0x180>
 8008342:	4b28      	ldr	r3, [pc, #160]	; (80083e4 <_tx_thread_sleep+0x1f8>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008348:	4a22      	ldr	r2, [pc, #136]	; (80083d4 <_tx_thread_sleep+0x1e8>)
 800834a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800834c:	6013      	str	r3, [r2, #0]
 800834e:	4b26      	ldr	r3, [pc, #152]	; (80083e8 <_tx_thread_sleep+0x1fc>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008354:	621a      	str	r2, [r3, #32]
 8008356:	4b25      	ldr	r3, [pc, #148]	; (80083ec <_tx_thread_sleep+0x200>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00d      	beq.n	800837a <_tx_thread_sleep+0x18e>
 800835e:	4b23      	ldr	r3, [pc, #140]	; (80083ec <_tx_thread_sleep+0x200>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a21      	ldr	r2, [pc, #132]	; (80083e8 <_tx_thread_sleep+0x1fc>)
 8008364:	6812      	ldr	r2, [r2, #0]
 8008366:	4610      	mov	r0, r2
 8008368:	4798      	blx	r3
 800836a:	e006      	b.n	800837a <_tx_thread_sleep+0x18e>
 800836c:	4a19      	ldr	r2, [pc, #100]	; (80083d4 <_tx_thread_sleep+0x1e8>)
 800836e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008370:	6013      	str	r3, [r2, #0]
 8008372:	4b1d      	ldr	r3, [pc, #116]	; (80083e8 <_tx_thread_sleep+0x1fc>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008378:	621a      	str	r2, [r3, #32]
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800837a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800837c:	2204      	movs	r2, #4
 800837e:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8008380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008382:	2201      	movs	r2, #1
 8008384:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8008386:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008388:	2200      	movs	r2, #0
 800838a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800838e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8008394:	4b0e      	ldr	r3, [pc, #56]	; (80083d0 <_tx_thread_sleep+0x1e4>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	3301      	adds	r3, #1
 800839a:	4a0d      	ldr	r2, [pc, #52]	; (80083d0 <_tx_thread_sleep+0x1e4>)
 800839c:	6013      	str	r3, [r2, #0]
 800839e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083a0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	f383 8810 	msr	PRIMASK, r3
}
 80083a8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80083aa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80083ac:	f000 fa14 	bl	80087d8 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80083b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083b6:	60fb      	str	r3, [r7, #12]
        }
    }
    
    /* Return completion status.  */
    return(status);
 80083b8:	68fb      	ldr	r3, [r7, #12]
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3750      	adds	r7, #80	; 0x50
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	20001648 	.word	0x20001648
 80083c8:	2000000c 	.word	0x2000000c
 80083cc:	20001790 	.word	0x20001790
 80083d0:	200016e0 	.word	0x200016e0
 80083d4:	20001c64 	.word	0x20001c64
 80083d8:	20001c68 	.word	0x20001c68
 80083dc:	e0001004 	.word	0xe0001004
 80083e0:	20001c60 	.word	0x20001c60
 80083e4:	20001c5c 	.word	0x20001c5c
 80083e8:	20001c50 	.word	0x20001c50
 80083ec:	20001c6c 	.word	0x20001c6c

080083f0 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b089      	sub	sp, #36	; 0x24
 80083f4:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80083f6:	4b17      	ldr	r3, [pc, #92]	; (8008454 <_tx_thread_system_preempt_check+0x64>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d121      	bne.n	8008446 <_tx_thread_system_preempt_check+0x56>
    {
    
        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8008402:	4b15      	ldr	r3, [pc, #84]	; (8008458 <_tx_thread_system_preempt_check+0x68>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8008408:	4b14      	ldr	r3, [pc, #80]	; (800845c <_tx_thread_system_preempt_check+0x6c>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800840e:	69ba      	ldr	r2, [r7, #24]
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	429a      	cmp	r2, r3
 8008414:	d017      	beq.n	8008446 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8008416:	4b12      	ldr	r3, [pc, #72]	; (8008460 <_tx_thread_system_preempt_check+0x70>)
 8008418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800841c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800841e:	f3ef 8305 	mrs	r3, IPSR
 8008422:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8008424:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 8008426:	2b00      	cmp	r3, #0
 8008428:	d10c      	bne.n	8008444 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800842a:	f3ef 8310 	mrs	r3, PRIMASK
 800842e:	60fb      	str	r3, [r7, #12]
    return(posture);
 8008430:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8008432:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8008434:	b662      	cpsie	i
}
 8008436:	bf00      	nop
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f383 8810 	msr	PRIMASK, r3
}
 8008442:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8008444:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8008446:	bf00      	nop
 8008448:	3724      	adds	r7, #36	; 0x24
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop
 8008454:	200016e0 	.word	0x200016e0
 8008458:	20001648 	.word	0x20001648
 800845c:	2000164c 	.word	0x2000164c
 8008460:	e000ed04 	.word	0xe000ed04

08008464 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b09e      	sub	sp, #120	; 0x78
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
TX_THREAD       *current_thread;
ULONG           combined_flags;

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 800846c:	2300      	movs	r3, #0
 800846e:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008470:	f3ef 8310 	mrs	r3, PRIMASK
 8008474:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8008476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8008478:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800847a:	b672      	cpsid	i
    return(int_posture);
 800847c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800847e:	66bb      	str	r3, [r7, #104]	; 0x68

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008484:	2b00      	cmp	r3, #0
 8008486:	d005      	beq.n	8008494 <_tx_thread_system_resume+0x30>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	334c      	adds	r3, #76	; 0x4c
 800848c:	4618      	mov	r0, r3
 800848e:	f000 fdaf 	bl	8008ff0 <_tx_timer_system_deactivate>
 8008492:	e002      	b.n	800849a <_tx_thread_system_resume+0x36>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

#ifdef TX_ENABLE_EVENT_TRACE

    /* If trace is enabled, save the current event pointer.  */
    entry_ptr =  _tx_trace_buffer_current_ptr;
 800849a:	4b8b      	ldr	r3, [pc, #556]	; (80086c8 <_tx_thread_system_resume+0x264>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	667b      	str	r3, [r7, #100]	; 0x64
#endif

    /* Log the thread status change.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_RESUME, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&execute_ptr), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 80084a0:	4b89      	ldr	r3, [pc, #548]	; (80086c8 <_tx_thread_system_resume+0x264>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	663b      	str	r3, [r7, #96]	; 0x60
 80084a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d06f      	beq.n	800858c <_tx_thread_system_resume+0x128>
 80084ac:	4b87      	ldr	r3, [pc, #540]	; (80086cc <_tx_thread_system_resume+0x268>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f003 0301 	and.w	r3, r3, #1
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d069      	beq.n	800858c <_tx_thread_system_resume+0x128>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80084b8:	f3ef 8305 	mrs	r3, IPSR
 80084bc:	63bb      	str	r3, [r7, #56]	; 0x38
    return(ipsr_value);
 80084be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084c0:	4b83      	ldr	r3, [pc, #524]	; (80086d0 <_tx_thread_system_resume+0x26c>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4313      	orrs	r3, r2
 80084c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084c8:	4b82      	ldr	r3, [pc, #520]	; (80086d4 <_tx_thread_system_resume+0x270>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80084ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d10b      	bne.n	80084ec <_tx_thread_system_resume+0x88>
 80084d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d8:	673b      	str	r3, [r7, #112]	; 0x70
 80084da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084de:	041a      	lsls	r2, r3, #16
 80084e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80084e2:	4313      	orrs	r3, r2
 80084e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80084e8:	673b      	str	r3, [r7, #112]	; 0x70
 80084ea:	e00e      	b.n	800850a <_tx_thread_system_resume+0xa6>
 80084ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084ee:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80084f2:	d205      	bcs.n	8008500 <_tx_thread_system_resume+0x9c>
 80084f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084f6:	673b      	str	r3, [r7, #112]	; 0x70
 80084f8:	f04f 33ff 	mov.w	r3, #4294967295
 80084fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80084fe:	e004      	b.n	800850a <_tx_thread_system_resume+0xa6>
 8008500:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8008504:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008506:	2300      	movs	r3, #0
 8008508:	673b      	str	r3, [r7, #112]	; 0x70
 800850a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800850c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800850e:	601a      	str	r2, [r3, #0]
 8008510:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008512:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008514:	605a      	str	r2, [r3, #4]
 8008516:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008518:	2201      	movs	r2, #1
 800851a:	609a      	str	r2, [r3, #8]
 800851c:	4b6e      	ldr	r3, [pc, #440]	; (80086d8 <_tx_thread_system_resume+0x274>)
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008522:	60da      	str	r2, [r3, #12]
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008528:	611a      	str	r2, [r3, #16]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800852e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008530:	615a      	str	r2, [r3, #20]
 8008532:	f107 020c 	add.w	r2, r7, #12
 8008536:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008538:	619a      	str	r2, [r3, #24]
 800853a:	4b68      	ldr	r3, [pc, #416]	; (80086dc <_tx_thread_system_resume+0x278>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	461a      	mov	r2, r3
 8008540:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008542:	61da      	str	r2, [r3, #28]
 8008544:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008546:	3320      	adds	r3, #32
 8008548:	663b      	str	r3, [r7, #96]	; 0x60
 800854a:	4b65      	ldr	r3, [pc, #404]	; (80086e0 <_tx_thread_system_resume+0x27c>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008550:	429a      	cmp	r2, r3
 8008552:	d314      	bcc.n	800857e <_tx_thread_system_resume+0x11a>
 8008554:	4b63      	ldr	r3, [pc, #396]	; (80086e4 <_tx_thread_system_resume+0x280>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	663b      	str	r3, [r7, #96]	; 0x60
 800855a:	4a5b      	ldr	r2, [pc, #364]	; (80086c8 <_tx_thread_system_resume+0x264>)
 800855c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800855e:	6013      	str	r3, [r2, #0]
 8008560:	4b61      	ldr	r3, [pc, #388]	; (80086e8 <_tx_thread_system_resume+0x284>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008566:	621a      	str	r2, [r3, #32]
 8008568:	4b60      	ldr	r3, [pc, #384]	; (80086ec <_tx_thread_system_resume+0x288>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00d      	beq.n	800858c <_tx_thread_system_resume+0x128>
 8008570:	4b5e      	ldr	r3, [pc, #376]	; (80086ec <_tx_thread_system_resume+0x288>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a5c      	ldr	r2, [pc, #368]	; (80086e8 <_tx_thread_system_resume+0x284>)
 8008576:	6812      	ldr	r2, [r2, #0]
 8008578:	4610      	mov	r0, r2
 800857a:	4798      	blx	r3
 800857c:	e006      	b.n	800858c <_tx_thread_system_resume+0x128>
 800857e:	4a52      	ldr	r2, [pc, #328]	; (80086c8 <_tx_thread_system_resume+0x264>)
 8008580:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008582:	6013      	str	r3, [r2, #0]
 8008584:	4b58      	ldr	r3, [pc, #352]	; (80086e8 <_tx_thread_system_resume+0x284>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800858a:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

    /* Save the time stamp for later comparison to verify that
       the event hasn't been overwritten by the time we have 
       computed the next thread to execute.  */
    if (entry_ptr != TX_NULL)
 800858c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800858e:	2b00      	cmp	r3, #0
 8008590:	d002      	beq.n	8008598 <_tx_thread_system_resume+0x134>
    {

        /* Save time stamp.  */
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 8008592:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	677b      	str	r3, [r7, #116]	; 0x74
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8008598:	4b55      	ldr	r3, [pc, #340]	; (80086f0 <_tx_thread_system_resume+0x28c>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	3b01      	subs	r3, #1
 800859e:	4a54      	ldr	r2, [pc, #336]	; (80086f0 <_tx_thread_system_resume+0x28c>)
 80085a0:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	f040 80b3 	bne.w	8008712 <_tx_thread_system_resume+0x2ae>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread 
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	f000 80c7 	beq.w	8008744 <_tx_thread_system_resume+0x2e0>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	f040 80a2 	bne.w	8008704 <_tx_thread_system_resume+0x2a0>
                /* Resume the thread!  */
                
                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ca:	65bb      	str	r3, [r7, #88]	; 0x58
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 80085cc:	4a49      	ldr	r2, [pc, #292]	; (80086f4 <_tx_thread_system_resume+0x290>)
 80085ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80085d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085d4:	657b      	str	r3, [r7, #84]	; 0x54
                if (head_ptr == TX_NULL)
 80085d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d164      	bne.n	80086a6 <_tx_thread_system_resume+0x242>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 80085dc:	4945      	ldr	r1, [pc, #276]	; (80086f4 <_tx_thread_system_resume+0x290>)
 80085de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 80085f2:	2201      	movs	r2, #1
 80085f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80085f6:	fa02 f303 	lsl.w	r3, r2, r3
 80085fa:	64fb      	str	r3, [r7, #76]	; 0x4c
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 80085fc:	4b3e      	ldr	r3, [pc, #248]	; (80086f8 <_tx_thread_system_resume+0x294>)
 80085fe:	681a      	ldr	r2, [r3, #0]
 8008600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008602:	4313      	orrs	r3, r2
 8008604:	4a3c      	ldr	r2, [pc, #240]	; (80086f8 <_tx_thread_system_resume+0x294>)
 8008606:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8008608:	4b3c      	ldr	r3, [pc, #240]	; (80086fc <_tx_thread_system_resume+0x298>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800860e:	429a      	cmp	r2, r3
 8008610:	f080 8098 	bcs.w	8008744 <_tx_thread_system_resume+0x2e0>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8008614:	4a39      	ldr	r2, [pc, #228]	; (80086fc <_tx_thread_system_resume+0x298>)
 8008616:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008618:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800861a:	4b30      	ldr	r3, [pc, #192]	; (80086dc <_tx_thread_system_resume+0x278>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	60fb      	str	r3, [r7, #12]
                        
                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d103      	bne.n	800862e <_tx_thread_system_resume+0x1ca>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8008626:	4a2d      	ldr	r2, [pc, #180]	; (80086dc <_tx_thread_system_resume+0x278>)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6013      	str	r3, [r2, #0]
 800862c:	e08a      	b.n	8008744 <_tx_thread_system_resume+0x2e0>
                        {
                        
                            /* Another thread has been scheduled for execution.  */
               
                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008632:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008634:	429a      	cmp	r2, r3
 8008636:	f080 8085 	bcs.w	8008744 <_tx_thread_system_resume+0x2e0>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800863a:	4a28      	ldr	r2, [pc, #160]	; (80086dc <_tx_thread_system_resume+0x278>)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                                /* Check that the event time stamp is unchanged.  A different
                                   timestamp means that a later event wrote over the thread
                                   resume event. In that case, do nothing here.  */
                                if (entry_ptr != TX_NULL)
 8008640:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008642:	2b00      	cmp	r3, #0
 8008644:	d009      	beq.n	800865a <_tx_thread_system_resume+0x1f6>
                                {
    
                                    /* Is the timestamp the same?  */
                                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 8008646:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008648:	68db      	ldr	r3, [r3, #12]
 800864a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800864c:	429a      	cmp	r2, r3
 800864e:	d104      	bne.n	800865a <_tx_thread_system_resume+0x1f6>
                                    {
        
                                        /* Timestamp is the same, set the "next thread pointer" to NULL. This can
                                           be used by the trace analysis tool to show idle system conditions.  */
                                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 8008650:	4b22      	ldr	r3, [pc, #136]	; (80086dc <_tx_thread_system_resume+0x278>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	461a      	mov	r2, r3
 8008656:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008658:	61da      	str	r2, [r3, #28]
 800865a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800865c:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800865e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008660:	f383 8810 	msr	PRIMASK, r3
}
 8008664:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8008666:	4b22      	ldr	r3, [pc, #136]	; (80086f0 <_tx_thread_system_resume+0x28c>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	64bb      	str	r3, [r7, #72]	; 0x48
                                if (combined_flags == ((ULONG) 0))
 800866c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800866e:	2b00      	cmp	r3, #0
 8008670:	f040 80a1 	bne.w	80087b6 <_tx_thread_system_resume+0x352>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8008674:	4b22      	ldr	r3, [pc, #136]	; (8008700 <_tx_thread_system_resume+0x29c>)
 8008676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800867a:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800867c:	f3ef 8305 	mrs	r3, IPSR
 8008680:	633b      	str	r3, [r7, #48]	; 0x30
    return(ipsr_value);
 8008682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    if (__get_ipsr_value() == 0)
 8008684:	2b00      	cmp	r3, #0
 8008686:	f040 8098 	bne.w	80087ba <_tx_thread_system_resume+0x356>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800868a:	f3ef 8310 	mrs	r3, PRIMASK
 800868e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8008690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        interrupt_save = __get_interrupt_posture();
 8008692:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSIE  i": : : "memory");
 8008694:	b662      	cpsie	i
}
 8008696:	bf00      	nop
 8008698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800869a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800869c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869e:	f383 8810 	msr	PRIMASK, r3
}
 80086a2:	bf00      	nop
}
 80086a4:	e089      	b.n	80087ba <_tx_thread_system_resume+0x356>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 80086a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086aa:	653b      	str	r3, [r7, #80]	; 0x50
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 80086ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 80086b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80086bc:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80086c2:	621a      	str	r2, [r3, #32]
 80086c4:	e03e      	b.n	8008744 <_tx_thread_system_resume+0x2e0>
 80086c6:	bf00      	nop
 80086c8:	20001c64 	.word	0x20001c64
 80086cc:	20001c68 	.word	0x20001c68
 80086d0:	2000000c 	.word	0x2000000c
 80086d4:	20001648 	.word	0x20001648
 80086d8:	e0001004 	.word	0xe0001004
 80086dc:	2000164c 	.word	0x2000164c
 80086e0:	20001c60 	.word	0x20001c60
 80086e4:	20001c5c 	.word	0x20001c5c
 80086e8:	20001c50 	.word	0x20001c50
 80086ec:	20001c6c 	.word	0x20001c6c
 80086f0:	200016e0 	.word	0x200016e0
 80086f4:	20001660 	.word	0x20001660
 80086f8:	20001658 	.word	0x20001658
 80086fc:	2000165c 	.word	0x2000165c
 8008700:	e000ed04 	.word	0xe000ed04
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2203      	movs	r2, #3
 800870e:	631a      	str	r2, [r3, #48]	; 0x30
 8008710:	e018      	b.n	8008744 <_tx_thread_system_resume+0x2e0>
        /* A resumption occurred in the middle of a previous thread suspension.  */
        
        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the 
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008716:	2b01      	cmp	r3, #1
 8008718:	d014      	beq.n	8008744 <_tx_thread_system_resume+0x2e0>
        {
            
            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800871e:	2b02      	cmp	r3, #2
 8008720:	d010      	beq.n	8008744 <_tx_thread_system_resume+0x2e0>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008726:	2b00      	cmp	r3, #0
 8008728:	d106      	bne.n	8008738 <_tx_thread_system_resume+0x2d4>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2200      	movs	r2, #0
 800872e:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2200      	movs	r2, #0
 8008734:	631a      	str	r2, [r3, #48]	; 0x30
 8008736:	e005      	b.n	8008744 <_tx_thread_system_resume+0x2e0>
                }
                else
                {
                
                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2200      	movs	r2, #0
 800873c:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2203      	movs	r2, #3
 8008742:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef TX_ENABLE_EVENT_TRACE

    /* Check that the event time stamp is unchanged.  A different
       timestamp means that a later event wrote over the thread
       resume event. In that case, do nothing here.  */
    if (entry_ptr != TX_NULL)
 8008744:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008746:	2b00      	cmp	r3, #0
 8008748:	d009      	beq.n	800875e <_tx_thread_system_resume+0x2fa>
    {
    
        /* Is the timestamp the same?  */
        if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800874a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008750:	429a      	cmp	r2, r3
 8008752:	d104      	bne.n	800875e <_tx_thread_system_resume+0x2fa>
            /* Timestamp is the same, set the "next thread pointer" to NULL. This can
               be used by the trace analysis tool to show idle system conditions.  */
#ifdef TX_MISRA_ENABLE
            entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
            entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 8008754:	4b1c      	ldr	r3, [pc, #112]	; (80087c8 <_tx_thread_system_resume+0x364>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	461a      	mov	r2, r3
 800875a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800875c:	61da      	str	r2, [r3, #28]
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800875e:	4b1b      	ldr	r3, [pc, #108]	; (80087cc <_tx_thread_system_resume+0x368>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	647b      	str	r3, [r7, #68]	; 0x44
 8008764:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008766:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008768:	6a3b      	ldr	r3, [r7, #32]
 800876a:	f383 8810 	msr	PRIMASK, r3
}
 800876e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8008770:	4b15      	ldr	r3, [pc, #84]	; (80087c8 <_tx_thread_system_resume+0x364>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008776:	429a      	cmp	r2, r3
 8008778:	d022      	beq.n	80087c0 <_tx_thread_system_resume+0x35c>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800877a:	4b15      	ldr	r3, [pc, #84]	; (80087d0 <_tx_thread_system_resume+0x36c>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	64bb      	str	r3, [r7, #72]	; 0x48
        if (combined_flags == ((ULONG) 0))
 8008780:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008782:	2b00      	cmp	r3, #0
 8008784:	d11c      	bne.n	80087c0 <_tx_thread_system_resume+0x35c>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8008786:	4b13      	ldr	r3, [pc, #76]	; (80087d4 <_tx_thread_system_resume+0x370>)
 8008788:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800878c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800878e:	f3ef 8305 	mrs	r3, IPSR
 8008792:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8008794:	69fb      	ldr	r3, [r7, #28]
    if (__get_ipsr_value() == 0)
 8008796:	2b00      	cmp	r3, #0
 8008798:	d111      	bne.n	80087be <_tx_thread_system_resume+0x35a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800879a:	f3ef 8310 	mrs	r3, PRIMASK
 800879e:	61bb      	str	r3, [r7, #24]
    return(posture);
 80087a0:	69bb      	ldr	r3, [r7, #24]
        interrupt_save = __get_interrupt_posture();
 80087a2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80087a4:	b662      	cpsie	i
}
 80087a6:	bf00      	nop
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	f383 8810 	msr	PRIMASK, r3
}
 80087b2:	bf00      	nop
}
 80087b4:	e003      	b.n	80087be <_tx_thread_system_resume+0x35a>
                                return;
 80087b6:	bf00      	nop
 80087b8:	e002      	b.n	80087c0 <_tx_thread_system_resume+0x35c>
 80087ba:	bf00      	nop
 80087bc:	e000      	b.n	80087c0 <_tx_thread_system_resume+0x35c>
 80087be:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 80087c0:	3778      	adds	r7, #120	; 0x78
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	2000164c 	.word	0x2000164c
 80087cc:	20001648 	.word	0x20001648
 80087d0:	200016e0 	.word	0x200016e0
 80087d4:	e000ed04 	.word	0xe000ed04

080087d8 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b0a4      	sub	sp, #144	; 0x90
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
ULONG           timeout;
#endif

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 80087e0:	2300      	movs	r3, #0
 80087e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80087e6:	4b98      	ldr	r3, [pc, #608]	; (8008a48 <_tx_thread_system_suspend+0x270>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80087ee:	f3ef 8310 	mrs	r3, PRIMASK
 80087f2:	653b      	str	r3, [r7, #80]	; 0x50
    return(posture);
 80087f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    int_posture = __get_interrupt_posture();
 80087f6:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("CPSID i" : : : "memory");
 80087f8:	b672      	cpsid	i
    return(int_posture);
 80087fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 80087fc:	67fb      	str	r3, [r7, #124]	; 0x7c

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008804:	429a      	cmp	r2, r3
 8008806:	d112      	bne.n	800882e <_tx_thread_system_suspend+0x56>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800880c:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800880e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008810:	2b00      	cmp	r3, #0
 8008812:	d008      	beq.n	8008826 <_tx_thread_system_suspend+0x4e>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8008814:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800881a:	d004      	beq.n	8008826 <_tx_thread_system_suspend+0x4e>
            {
            
                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	334c      	adds	r3, #76	; 0x4c
 8008820:	4618      	mov	r0, r3
 8008822:	f000 fb83 	bl	8008f2c <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	69db      	ldr	r3, [r3, #28]
 800882a:	4a88      	ldr	r2, [pc, #544]	; (8008a4c <_tx_thread_system_suspend+0x274>)
 800882c:	6013      	str	r3, [r2, #0]
    }
#endif
    
    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800882e:	4b88      	ldr	r3, [pc, #544]	; (8008a50 <_tx_thread_system_suspend+0x278>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	3b01      	subs	r3, #1
 8008834:	4a86      	ldr	r2, [pc, #536]	; (8008a50 <_tx_thread_system_suspend+0x278>)
 8008836:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800883c:	2b01      	cmp	r3, #1
 800883e:	f040 817d 	bne.w	8008b3c <_tx_thread_system_suspend+0x364>
        TX_EL_THREAD_STATUS_CHANGE_INSERT(thread_ptr, thread_ptr -> tx_thread_state)

#ifdef TX_ENABLE_EVENT_TRACE

        /* If trace is enabled, save the current event pointer.  */
        entry_ptr =  _tx_trace_buffer_current_ptr;
 8008842:	4b84      	ldr	r3, [pc, #528]	; (8008a54 <_tx_thread_system_suspend+0x27c>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	677b      	str	r3, [r7, #116]	; 0x74
#endif

        /* Log the thread status change.  */
        TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SUSPEND, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&priority), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 8008848:	4b82      	ldr	r3, [pc, #520]	; (8008a54 <_tx_thread_system_suspend+0x27c>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	673b      	str	r3, [r7, #112]	; 0x70
 800884e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008850:	2b00      	cmp	r3, #0
 8008852:	d07c      	beq.n	800894e <_tx_thread_system_suspend+0x176>
 8008854:	4b80      	ldr	r3, [pc, #512]	; (8008a58 <_tx_thread_system_suspend+0x280>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f003 0301 	and.w	r3, r3, #1
 800885c:	2b00      	cmp	r3, #0
 800885e:	d076      	beq.n	800894e <_tx_thread_system_suspend+0x176>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008860:	f3ef 8305 	mrs	r3, IPSR
 8008864:	64bb      	str	r3, [r7, #72]	; 0x48
    return(ipsr_value);
 8008866:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008868:	4b7c      	ldr	r3, [pc, #496]	; (8008a5c <_tx_thread_system_suspend+0x284>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4313      	orrs	r3, r2
 800886e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008870:	4b75      	ldr	r3, [pc, #468]	; (8008a48 <_tx_thread_system_suspend+0x270>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800887a:	2b00      	cmp	r3, #0
 800887c:	d110      	bne.n	80088a0 <_tx_thread_system_suspend+0xc8>
 800887e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008884:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008888:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800888c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800888e:	041a      	lsls	r2, r3, #16
 8008890:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008894:	4313      	orrs	r3, r2
 8008896:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800889a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800889e:	e013      	b.n	80088c8 <_tx_thread_system_suspend+0xf0>
 80088a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088a2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80088a6:	d208      	bcs.n	80088ba <_tx_thread_system_suspend+0xe2>
 80088a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80088b0:	f04f 33ff 	mov.w	r3, #4294967295
 80088b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80088b8:	e006      	b.n	80088c8 <_tx_thread_system_suspend+0xf0>
 80088ba:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 80088be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80088c2:	2300      	movs	r3, #0
 80088c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80088c8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80088cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088ce:	601a      	str	r2, [r3, #0]
 80088d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088d2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80088d6:	605a      	str	r2, [r3, #4]
 80088d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088da:	2202      	movs	r2, #2
 80088dc:	609a      	str	r2, [r3, #8]
 80088de:	4b60      	ldr	r3, [pc, #384]	; (8008a60 <_tx_thread_system_suspend+0x288>)
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088e4:	60da      	str	r2, [r3, #12]
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088ea:	611a      	str	r2, [r3, #16]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088f2:	615a      	str	r2, [r3, #20]
 80088f4:	f107 0208 	add.w	r2, r7, #8
 80088f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088fa:	619a      	str	r2, [r3, #24]
 80088fc:	4b59      	ldr	r3, [pc, #356]	; (8008a64 <_tx_thread_system_suspend+0x28c>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	461a      	mov	r2, r3
 8008902:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008904:	61da      	str	r2, [r3, #28]
 8008906:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008908:	3320      	adds	r3, #32
 800890a:	673b      	str	r3, [r7, #112]	; 0x70
 800890c:	4b56      	ldr	r3, [pc, #344]	; (8008a68 <_tx_thread_system_suspend+0x290>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008912:	429a      	cmp	r2, r3
 8008914:	d314      	bcc.n	8008940 <_tx_thread_system_suspend+0x168>
 8008916:	4b55      	ldr	r3, [pc, #340]	; (8008a6c <_tx_thread_system_suspend+0x294>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	673b      	str	r3, [r7, #112]	; 0x70
 800891c:	4a4d      	ldr	r2, [pc, #308]	; (8008a54 <_tx_thread_system_suspend+0x27c>)
 800891e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008920:	6013      	str	r3, [r2, #0]
 8008922:	4b53      	ldr	r3, [pc, #332]	; (8008a70 <_tx_thread_system_suspend+0x298>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008928:	621a      	str	r2, [r3, #32]
 800892a:	4b52      	ldr	r3, [pc, #328]	; (8008a74 <_tx_thread_system_suspend+0x29c>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d00d      	beq.n	800894e <_tx_thread_system_suspend+0x176>
 8008932:	4b50      	ldr	r3, [pc, #320]	; (8008a74 <_tx_thread_system_suspend+0x29c>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a4e      	ldr	r2, [pc, #312]	; (8008a70 <_tx_thread_system_suspend+0x298>)
 8008938:	6812      	ldr	r2, [r2, #0]
 800893a:	4610      	mov	r0, r2
 800893c:	4798      	blx	r3
 800893e:	e006      	b.n	800894e <_tx_thread_system_suspend+0x176>
 8008940:	4a44      	ldr	r2, [pc, #272]	; (8008a54 <_tx_thread_system_suspend+0x27c>)
 8008942:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008944:	6013      	str	r3, [r2, #0]
 8008946:	4b4a      	ldr	r3, [pc, #296]	; (8008a70 <_tx_thread_system_suspend+0x298>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800894c:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

        /* Save the time stamp for later comparison to verify that
           the event hasn't been overwritten by the time we have 
           computed the next thread to execute.  */
        if (entry_ptr != TX_NULL)
 800894e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008950:	2b00      	cmp	r3, #0
 8008952:	d003      	beq.n	800895c <_tx_thread_system_suspend+0x184>
        {

            /* Save time stamp.  */
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 8008954:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008966:	60bb      	str	r3, [r7, #8]

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6a1b      	ldr	r3, [r3, #32]
 800896c:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800896e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	429a      	cmp	r2, r3
 8008974:	d016      	beq.n	80089a4 <_tx_thread_system_suspend+0x1cc>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897a:	657b      	str	r3, [r7, #84]	; 0x54

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800897c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800897e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008980:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8008982:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008984:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008986:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	4a3b      	ldr	r2, [pc, #236]	; (8008a78 <_tx_thread_system_suspend+0x2a0>)
 800898c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	429a      	cmp	r2, r3
 8008994:	f040 8085 	bne.w	8008aa2 <_tx_thread_system_suspend+0x2ca>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	4937      	ldr	r1, [pc, #220]	; (8008a78 <_tx_thread_system_suspend+0x2a0>)
 800899c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800899e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80089a2:	e07e      	b.n	8008aa2 <_tx_thread_system_suspend+0x2ca>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head 
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	4a34      	ldr	r2, [pc, #208]	; (8008a78 <_tx_thread_system_suspend+0x2a0>)
 80089a8:	2100      	movs	r1, #0
 80089aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	2201      	movs	r2, #1
 80089b2:	fa02 f303 	lsl.w	r3, r2, r3
 80089b6:	667b      	str	r3, [r7, #100]	; 0x64
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 80089b8:	4b30      	ldr	r3, [pc, #192]	; (8008a7c <_tx_thread_system_suspend+0x2a4>)
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089be:	43db      	mvns	r3, r3
 80089c0:	4013      	ands	r3, r2
 80089c2:	4a2e      	ldr	r2, [pc, #184]	; (8008a7c <_tx_thread_system_suspend+0x2a4>)
 80089c4:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 80089c6:	2300      	movs	r3, #0
 80089c8:	663b      	str	r3, [r7, #96]	; 0x60
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 80089ca:	4b2c      	ldr	r3, [pc, #176]	; (8008a7c <_tx_thread_system_suspend+0x2a4>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 80089d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d158      	bne.n	8008a88 <_tx_thread_system_suspend+0x2b0>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80089d6:	4b2a      	ldr	r3, [pc, #168]	; (8008a80 <_tx_thread_system_suspend+0x2a8>)
 80089d8:	2220      	movs	r2, #32
 80089da:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 80089dc:	4b21      	ldr	r3, [pc, #132]	; (8008a64 <_tx_thread_system_suspend+0x28c>)
 80089de:	2200      	movs	r2, #0
 80089e0:	601a      	str	r2, [r3, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                /* Check that the event time stamp is unchanged.  A different
                   timestamp means that a later event wrote over the thread
                   suspend event. In that case, do nothing here.  */
                if (entry_ptr != TX_NULL)
 80089e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d008      	beq.n	80089fa <_tx_thread_system_suspend+0x222>
                {
            
                    /* Is the timestamp the same?  */
                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 80089e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d102      	bne.n	80089fa <_tx_thread_system_suspend+0x222>
                    {
    
                        /* Timestamp is the same, set the "next thread pointer" to the new value of the
                           next thread to execute. This can be used by the trace analysis tool to keep 
                           track of next thread execution.  */
                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  0;
 80089f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089f6:	2200      	movs	r2, #0
 80089f8:	61da      	str	r2, [r3, #28]
 80089fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80089fc:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80089fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a00:	f383 8810 	msr	PRIMASK, r3
}
 8008a04:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8008a06:	4b12      	ldr	r3, [pc, #72]	; (8008a50 <_tx_thread_system_suspend+0x278>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	65bb      	str	r3, [r7, #88]	; 0x58
                if (combined_flags == ((ULONG) 0))
 8008a0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	f040 80bf 	bne.w	8008b92 <_tx_thread_system_suspend+0x3ba>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8008a14:	4b1b      	ldr	r3, [pc, #108]	; (8008a84 <_tx_thread_system_suspend+0x2ac>)
 8008a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a1a:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008a1c:	f3ef 8305 	mrs	r3, IPSR
 8008a20:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8008a22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d10c      	bne.n	8008a42 <_tx_thread_system_suspend+0x26a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008a28:	f3ef 8310 	mrs	r3, PRIMASK
 8008a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8008a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 8008a30:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8008a32:	b662      	cpsie	i
}
 8008a34:	bf00      	nop
 8008a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a38:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a3c:	f383 8810 	msr	PRIMASK, r3
}
 8008a40:	bf00      	nop
}
 8008a42:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8008a44:	e0a5      	b.n	8008b92 <_tx_thread_system_suspend+0x3ba>
 8008a46:	bf00      	nop
 8008a48:	20001648 	.word	0x20001648
 8008a4c:	20001c4c 	.word	0x20001c4c
 8008a50:	200016e0 	.word	0x200016e0
 8008a54:	20001c64 	.word	0x20001c64
 8008a58:	20001c68 	.word	0x20001c68
 8008a5c:	2000000c 	.word	0x2000000c
 8008a60:	e0001004 	.word	0xe0001004
 8008a64:	2000164c 	.word	0x2000164c
 8008a68:	20001c60 	.word	0x20001c60
 8008a6c:	20001c5c 	.word	0x20001c5c
 8008a70:	20001c50 	.word	0x20001c50
 8008a74:	20001c6c 	.word	0x20001c6c
 8008a78:	20001660 	.word	0x20001660
 8008a7c:	20001658 	.word	0x20001658
 8008a80:	2000165c 	.word	0x2000165c
 8008a84:	e000ed04 	.word	0xe000ed04
            {
            
                /* Other threads at different priority levels are ready to run.  */
            
                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8008a88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a8a:	fa93 f3a3 	rbit	r3, r3
 8008a8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a92:	fab3 f383 	clz	r3, r3
 8008a96:	667b      	str	r3, [r7, #100]	; 0x64

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8008a98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008a9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a9c:	4413      	add	r3, r2
 8008a9e:	4a41      	ldr	r2, [pc, #260]	; (8008ba4 <_tx_thread_system_suspend+0x3cc>)
 8008aa0:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8008aa2:	4b41      	ldr	r3, [pc, #260]	; (8008ba8 <_tx_thread_system_suspend+0x3d0>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d139      	bne.n	8008b20 <_tx_thread_system_suspend+0x348>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8008aac:	4b3d      	ldr	r3, [pc, #244]	; (8008ba4 <_tx_thread_system_suspend+0x3cc>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a3e      	ldr	r2, [pc, #248]	; (8008bac <_tx_thread_system_suspend+0x3d4>)
 8008ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ab6:	4a3c      	ldr	r2, [pc, #240]	; (8008ba8 <_tx_thread_system_suspend+0x3d0>)
 8008ab8:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

            /* Check that the event time stamp is unchanged.  A different
               timestamp means that a later event wrote over the thread
               suspend event. In that case, do nothing here.  */
            if (entry_ptr != TX_NULL)
 8008aba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d00a      	beq.n	8008ad6 <_tx_thread_system_suspend+0x2fe>
            {
            
                /* Is the timestamp the same?  */
                if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 8008ac0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d104      	bne.n	8008ad6 <_tx_thread_system_suspend+0x2fe>
                {
    
                    /* Timestamp is the same, set the "next thread pointer" to the new value of the
                       next thread to execute. This can be used by the trace analysis tool to keep 
                       track of next thread execution.  */
                    entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 8008acc:	4b36      	ldr	r3, [pc, #216]	; (8008ba8 <_tx_thread_system_suspend+0x3d0>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ad4:	61da      	str	r2, [r3, #28]
 8008ad6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008ad8:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008adc:	f383 8810 	msr	PRIMASK, r3
}
 8008ae0:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8008ae2:	4b33      	ldr	r3, [pc, #204]	; (8008bb0 <_tx_thread_system_suspend+0x3d8>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	65bb      	str	r3, [r7, #88]	; 0x58
            if (combined_flags == ((ULONG) 0))
 8008ae8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d153      	bne.n	8008b96 <_tx_thread_system_suspend+0x3be>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8008aee:	4b31      	ldr	r3, [pc, #196]	; (8008bb4 <_tx_thread_system_suspend+0x3dc>)
 8008af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008af4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008af6:	f3ef 8305 	mrs	r3, IPSR
 8008afa:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8008afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d10c      	bne.n	8008b1c <_tx_thread_system_suspend+0x344>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008b02:	f3ef 8310 	mrs	r3, PRIMASK
 8008b06:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8008b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8008b0a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8008b0c:	b662      	cpsie	i
}
 8008b0e:	bf00      	nop
 8008b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b12:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008b14:	6a3b      	ldr	r3, [r7, #32]
 8008b16:	f383 8810 	msr	PRIMASK, r3
}
 8008b1a:	bf00      	nop
}
 8008b1c:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8008b1e:	e03a      	b.n	8008b96 <_tx_thread_system_suspend+0x3be>
#ifdef TX_ENABLE_EVENT_TRACE

         /* Check that the event time stamp is unchanged.  A different
            timestamp means that a later event wrote over the thread
            suspend event. In that case, do nothing here.  */
         if (entry_ptr != TX_NULL)
 8008b20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00a      	beq.n	8008b3c <_tx_thread_system_suspend+0x364>
         {
            
            /* Is the timestamp the same?  */
            if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 8008b26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d104      	bne.n	8008b3c <_tx_thread_system_suspend+0x364>
                   next thread to execute. This can be used by the trace analysis tool to keep 
                   track of next thread execution.  */
#ifdef TX_MISRA_ENABLE
                entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
                entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 8008b32:	4b1d      	ldr	r3, [pc, #116]	; (8008ba8 <_tx_thread_system_suspend+0x3d0>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	461a      	mov	r2, r3
 8008b38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b3a:	61da      	str	r2, [r3, #28]
 8008b3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008b3e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	f383 8810 	msr	PRIMASK, r3
}
 8008b46:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8008b48:	4b17      	ldr	r3, [pc, #92]	; (8008ba8 <_tx_thread_system_suspend+0x3d0>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d022      	beq.n	8008b9a <_tx_thread_system_suspend+0x3c2>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8008b54:	4b16      	ldr	r3, [pc, #88]	; (8008bb0 <_tx_thread_system_suspend+0x3d8>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	65bb      	str	r3, [r7, #88]	; 0x58
        if (combined_flags == ((ULONG) 0))
 8008b5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d11c      	bne.n	8008b9a <_tx_thread_system_suspend+0x3c2>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8008b60:	4b14      	ldr	r3, [pc, #80]	; (8008bb4 <_tx_thread_system_suspend+0x3dc>)
 8008b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b66:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008b68:	f3ef 8305 	mrs	r3, IPSR
 8008b6c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8008b6e:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d10c      	bne.n	8008b8e <_tx_thread_system_suspend+0x3b6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008b74:	f3ef 8310 	mrs	r3, PRIMASK
 8008b78:	617b      	str	r3, [r7, #20]
    return(posture);
 8008b7a:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8008b7c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8008b7e:	b662      	cpsie	i
}
 8008b80:	bf00      	nop
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f383 8810 	msr	PRIMASK, r3
}
 8008b8c:	bf00      	nop
}
 8008b8e:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8008b90:	e003      	b.n	8008b9a <_tx_thread_system_suspend+0x3c2>
                return;
 8008b92:	bf00      	nop
 8008b94:	e002      	b.n	8008b9c <_tx_thread_system_suspend+0x3c4>
            return;
 8008b96:	bf00      	nop
 8008b98:	e000      	b.n	8008b9c <_tx_thread_system_suspend+0x3c4>
    return;
 8008b9a:	bf00      	nop
}
 8008b9c:	3790      	adds	r7, #144	; 0x90
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	2000165c 	.word	0x2000165c
 8008ba8:	2000164c 	.word	0x2000164c
 8008bac:	20001660 	.word	0x20001660
 8008bb0:	200016e0 	.word	0x200016e0
 8008bb4:	e000ed04 	.word	0xe000ed04

08008bb8 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b08e      	sub	sp, #56	; 0x38
 8008bbc:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8008bbe:	4b5f      	ldr	r3, [pc, #380]	; (8008d3c <_tx_thread_time_slice+0x184>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008bc4:	f3ef 8310 	mrs	r3, PRIMASK
 8008bc8:	61bb      	str	r3, [r7, #24]
    return(posture);
 8008bca:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8008bcc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008bce:	b672      	cpsid	i
    return(int_posture);
 8008bd0:	697b      	ldr	r3, [r7, #20]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8008bd2:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8008bd4:	4b5a      	ldr	r3, [pc, #360]	; (8008d40 <_tx_thread_time_slice+0x188>)
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d024      	beq.n	8008c2a <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d120      	bne.n	8008c2a <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	69d2      	ldr	r2, [r2, #28]
 8008bee:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	699b      	ldr	r3, [r3, #24]
 8008bf4:	4a53      	ldr	r2, [pc, #332]	; (8008d44 <_tx_thread_time_slice+0x18c>)
 8008bf6:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6a1a      	ldr	r2, [r3, #32]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d013      	beq.n	8008c2a <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d10d      	bne.n	8008c2a <_tx_thread_time_slice+0x72>
                
                    /* Preemption-threshold is not being used by this thread.  */
        
                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c14:	6a12      	ldr	r2, [r2, #32]
 8008c16:	494c      	ldr	r1, [pc, #304]	; (8008d48 <_tx_thread_time_slice+0x190>)
 8008c18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
                    /* Designate the highest priority thread as the one to execute.  Don't use this 
                       thread's priority as an index just in case a higher priority thread is now 
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8008c1c:	4b4b      	ldr	r3, [pc, #300]	; (8008d4c <_tx_thread_time_slice+0x194>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a49      	ldr	r2, [pc, #292]	; (8008d48 <_tx_thread_time_slice+0x190>)
 8008c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c26:	4a4a      	ldr	r2, [pc, #296]	; (8008d50 <_tx_thread_time_slice+0x198>)
 8008c28:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008c2a:	f3ef 8305 	mrs	r3, IPSR
 8008c2e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8008c30:	693a      	ldr	r2, [r7, #16]
    }

#ifdef TX_ENABLE_EVENT_TRACE

    /* Pickup the volatile information.  */
    system_state =  TX_THREAD_GET_SYSTEM_STATE();
 8008c32:	4b48      	ldr	r3, [pc, #288]	; (8008d54 <_tx_thread_time_slice+0x19c>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4313      	orrs	r3, r2
 8008c38:	62bb      	str	r3, [r7, #40]	; 0x28
    preempt_disable =  _tx_thread_preempt_disable;
 8008c3a:	4b47      	ldr	r3, [pc, #284]	; (8008d58 <_tx_thread_time_slice+0x1a0>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	627b      	str	r3, [r7, #36]	; 0x24
   
    /* Insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_TIME_SLICE, _tx_thread_execute_ptr, system_state, preempt_disable, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), TX_TRACE_INTERNAL_EVENTS)
 8008c40:	4b46      	ldr	r3, [pc, #280]	; (8008d5c <_tx_thread_time_slice+0x1a4>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	623b      	str	r3, [r7, #32]
 8008c46:	6a3b      	ldr	r3, [r7, #32]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d06d      	beq.n	8008d28 <_tx_thread_time_slice+0x170>
 8008c4c:	4b44      	ldr	r3, [pc, #272]	; (8008d60 <_tx_thread_time_slice+0x1a8>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f003 0301 	and.w	r3, r3, #1
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d067      	beq.n	8008d28 <_tx_thread_time_slice+0x170>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008c58:	f3ef 8305 	mrs	r3, IPSR
 8008c5c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8008c5e:	68fa      	ldr	r2, [r7, #12]
 8008c60:	4b3c      	ldr	r3, [pc, #240]	; (8008d54 <_tx_thread_time_slice+0x19c>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4313      	orrs	r3, r2
 8008c66:	61fb      	str	r3, [r7, #28]
 8008c68:	4b34      	ldr	r3, [pc, #208]	; (8008d3c <_tx_thread_time_slice+0x184>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	633b      	str	r3, [r7, #48]	; 0x30
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d10b      	bne.n	8008c8c <_tx_thread_time_slice+0xd4>
 8008c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c78:	637b      	str	r3, [r7, #52]	; 0x34
 8008c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c7e:	041a      	lsls	r2, r3, #16
 8008c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c82:	4313      	orrs	r3, r2
 8008c84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c88:	637b      	str	r3, [r7, #52]	; 0x34
 8008c8a:	e00e      	b.n	8008caa <_tx_thread_time_slice+0xf2>
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8008c92:	d205      	bcs.n	8008ca0 <_tx_thread_time_slice+0xe8>
 8008c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c96:	637b      	str	r3, [r7, #52]	; 0x34
 8008c98:	f04f 33ff 	mov.w	r3, #4294967295
 8008c9c:	633b      	str	r3, [r7, #48]	; 0x30
 8008c9e:	e004      	b.n	8008caa <_tx_thread_time_slice+0xf2>
 8008ca0:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8008ca4:	633b      	str	r3, [r7, #48]	; 0x30
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8008caa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cac:	6a3b      	ldr	r3, [r7, #32]
 8008cae:	601a      	str	r2, [r3, #0]
 8008cb0:	6a3b      	ldr	r3, [r7, #32]
 8008cb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cb4:	605a      	str	r2, [r3, #4]
 8008cb6:	6a3b      	ldr	r3, [r7, #32]
 8008cb8:	2205      	movs	r2, #5
 8008cba:	609a      	str	r2, [r3, #8]
 8008cbc:	4b29      	ldr	r3, [pc, #164]	; (8008d64 <_tx_thread_time_slice+0x1ac>)
 8008cbe:	681a      	ldr	r2, [r3, #0]
 8008cc0:	6a3b      	ldr	r3, [r7, #32]
 8008cc2:	60da      	str	r2, [r3, #12]
 8008cc4:	4b22      	ldr	r3, [pc, #136]	; (8008d50 <_tx_thread_time_slice+0x198>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	461a      	mov	r2, r3
 8008cca:	6a3b      	ldr	r3, [r7, #32]
 8008ccc:	611a      	str	r2, [r3, #16]
 8008cce:	6a3b      	ldr	r3, [r7, #32]
 8008cd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cd2:	615a      	str	r2, [r3, #20]
 8008cd4:	6a3b      	ldr	r3, [r7, #32]
 8008cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cd8:	619a      	str	r2, [r3, #24]
 8008cda:	1d3a      	adds	r2, r7, #4
 8008cdc:	6a3b      	ldr	r3, [r7, #32]
 8008cde:	61da      	str	r2, [r3, #28]
 8008ce0:	6a3b      	ldr	r3, [r7, #32]
 8008ce2:	3320      	adds	r3, #32
 8008ce4:	623b      	str	r3, [r7, #32]
 8008ce6:	4b20      	ldr	r3, [pc, #128]	; (8008d68 <_tx_thread_time_slice+0x1b0>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	6a3a      	ldr	r2, [r7, #32]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d314      	bcc.n	8008d1a <_tx_thread_time_slice+0x162>
 8008cf0:	4b1e      	ldr	r3, [pc, #120]	; (8008d6c <_tx_thread_time_slice+0x1b4>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	623b      	str	r3, [r7, #32]
 8008cf6:	4a19      	ldr	r2, [pc, #100]	; (8008d5c <_tx_thread_time_slice+0x1a4>)
 8008cf8:	6a3b      	ldr	r3, [r7, #32]
 8008cfa:	6013      	str	r3, [r2, #0]
 8008cfc:	4b1c      	ldr	r3, [pc, #112]	; (8008d70 <_tx_thread_time_slice+0x1b8>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	6a3a      	ldr	r2, [r7, #32]
 8008d02:	621a      	str	r2, [r3, #32]
 8008d04:	4b1b      	ldr	r3, [pc, #108]	; (8008d74 <_tx_thread_time_slice+0x1bc>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00d      	beq.n	8008d28 <_tx_thread_time_slice+0x170>
 8008d0c:	4b19      	ldr	r3, [pc, #100]	; (8008d74 <_tx_thread_time_slice+0x1bc>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a17      	ldr	r2, [pc, #92]	; (8008d70 <_tx_thread_time_slice+0x1b8>)
 8008d12:	6812      	ldr	r2, [r2, #0]
 8008d14:	4610      	mov	r0, r2
 8008d16:	4798      	blx	r3
 8008d18:	e006      	b.n	8008d28 <_tx_thread_time_slice+0x170>
 8008d1a:	4a10      	ldr	r2, [pc, #64]	; (8008d5c <_tx_thread_time_slice+0x1a4>)
 8008d1c:	6a3b      	ldr	r3, [r7, #32]
 8008d1e:	6013      	str	r3, [r2, #0]
 8008d20:	4b13      	ldr	r3, [pc, #76]	; (8008d70 <_tx_thread_time_slice+0x1b8>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	6a3a      	ldr	r2, [r7, #32]
 8008d26:	621a      	str	r2, [r3, #32]
 8008d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d2a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	f383 8810 	msr	PRIMASK, r3
}
 8008d32:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8008d34:	bf00      	nop
 8008d36:	3738      	adds	r7, #56	; 0x38
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}
 8008d3c:	20001648 	.word	0x20001648
 8008d40:	200016f0 	.word	0x200016f0
 8008d44:	20001c4c 	.word	0x20001c4c
 8008d48:	20001660 	.word	0x20001660
 8008d4c:	2000165c 	.word	0x2000165c
 8008d50:	2000164c 	.word	0x2000164c
 8008d54:	2000000c 	.word	0x2000000c
 8008d58:	200016e0 	.word	0x200016e0
 8008d5c:	20001c64 	.word	0x20001c64
 8008d60:	20001c68 	.word	0x20001c68
 8008d64:	e0001004 	.word	0xe0001004
 8008d68:	20001c60 	.word	0x20001c60
 8008d6c:	20001c5c 	.word	0x20001c5c
 8008d70:	20001c50 	.word	0x20001c50
 8008d74:	20001c6c 	.word	0x20001c6c

08008d78 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b08a      	sub	sp, #40	; 0x28
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008d84:	f3ef 8310 	mrs	r3, PRIMASK
 8008d88:	617b      	str	r3, [r7, #20]
    return(posture);
 8008d8a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8008d8c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008d8e:	b672      	cpsid	i
    return(int_posture);
 8008d90:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8008d92:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8008d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d98:	2b04      	cmp	r3, #4
 8008d9a:	d10e      	bne.n	8008dba <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8008d9c:	4b13      	ldr	r3, [pc, #76]	; (8008dec <_tx_thread_timeout+0x74>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	3301      	adds	r3, #1
 8008da2:	4a12      	ldr	r2, [pc, #72]	; (8008dec <_tx_thread_timeout+0x74>)
 8008da4:	6013      	str	r3, [r2, #0]
 8008da6:	6a3b      	ldr	r3, [r7, #32]
 8008da8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f383 8810 	msr	PRIMASK, r3
}
 8008db0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8008db2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008db4:	f7ff fb56 	bl	8008464 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8008db8:	e013      	b.n	8008de2 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8008dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008dbe:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8008dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008dc6:	61bb      	str	r3, [r7, #24]
 8008dc8:	6a3b      	ldr	r3, [r7, #32]
 8008dca:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	f383 8810 	msr	PRIMASK, r3
}
 8008dd2:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d003      	beq.n	8008de2 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8008dda:	69fb      	ldr	r3, [r7, #28]
 8008ddc:	69b9      	ldr	r1, [r7, #24]
 8008dde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008de0:	4798      	blx	r3
}
 8008de2:	bf00      	nop
 8008de4:	3728      	adds	r7, #40	; 0x28
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	200016e0 	.word	0x200016e0

08008df0 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008df6:	f3ef 8310 	mrs	r3, PRIMASK
 8008dfa:	607b      	str	r3, [r7, #4]
    return(posture);
 8008dfc:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8008dfe:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008e00:	b672      	cpsid	i
    return(int_posture);
 8008e02:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the 
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8008e04:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8008e06:	4b09      	ldr	r3, [pc, #36]	; (8008e2c <_tx_timer_expiration_process+0x3c>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	4a07      	ldr	r2, [pc, #28]	; (8008e2c <_tx_timer_expiration_process+0x3c>)
 8008e0e:	6013      	str	r3, [r2, #0]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	f383 8810 	msr	PRIMASK, r3
}
 8008e1a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8008e1c:	4804      	ldr	r0, [pc, #16]	; (8008e30 <_tx_timer_expiration_process+0x40>)
 8008e1e:	f7ff fb21 	bl	8008464 <_tx_thread_system_resume>
    }
    
    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8008e22:	bf00      	nop
 8008e24:	3710      	adds	r7, #16
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	200016e0 	.word	0x200016e0
 8008e30:	20001790 	.word	0x20001790

08008e34 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8008e34:	b590      	push	{r4, r7, lr}
 8008e36:	b089      	sub	sp, #36	; 0x24
 8008e38:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8008e3a:	4b28      	ldr	r3, [pc, #160]	; (8008edc <_tx_timer_initialize+0xa8>)
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8008e40:	4b27      	ldr	r3, [pc, #156]	; (8008ee0 <_tx_timer_initialize+0xac>)
 8008e42:	2200      	movs	r2, #0
 8008e44:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8008e46:	4b27      	ldr	r3, [pc, #156]	; (8008ee4 <_tx_timer_initialize+0xb0>)
 8008e48:	2200      	movs	r2, #0
 8008e4a:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8008e4c:	4b26      	ldr	r3, [pc, #152]	; (8008ee8 <_tx_timer_initialize+0xb4>)
 8008e4e:	2200      	movs	r2, #0
 8008e50:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8008e52:	4b26      	ldr	r3, [pc, #152]	; (8008eec <_tx_timer_initialize+0xb8>)
 8008e54:	2200      	movs	r2, #0
 8008e56:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8008e58:	2280      	movs	r2, #128	; 0x80
 8008e5a:	2100      	movs	r1, #0
 8008e5c:	4824      	ldr	r0, [pc, #144]	; (8008ef0 <_tx_timer_initialize+0xbc>)
 8008e5e:	f006 fdef 	bl	800fa40 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8008e62:	4b24      	ldr	r3, [pc, #144]	; (8008ef4 <_tx_timer_initialize+0xc0>)
 8008e64:	4a22      	ldr	r2, [pc, #136]	; (8008ef0 <_tx_timer_initialize+0xbc>)
 8008e66:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8008e68:	4b23      	ldr	r3, [pc, #140]	; (8008ef8 <_tx_timer_initialize+0xc4>)
 8008e6a:	4a21      	ldr	r2, [pc, #132]	; (8008ef0 <_tx_timer_initialize+0xbc>)
 8008e6c:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8008e6e:	4b23      	ldr	r3, [pc, #140]	; (8008efc <_tx_timer_initialize+0xc8>)
 8008e70:	4a23      	ldr	r2, [pc, #140]	; (8008f00 <_tx_timer_initialize+0xcc>)
 8008e72:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8008e74:	4b21      	ldr	r3, [pc, #132]	; (8008efc <_tx_timer_initialize+0xc8>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	3304      	adds	r3, #4
 8008e7a:	4a20      	ldr	r2, [pc, #128]	; (8008efc <_tx_timer_initialize+0xc8>)
 8008e7c:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and 
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8008e7e:	4b21      	ldr	r3, [pc, #132]	; (8008f04 <_tx_timer_initialize+0xd0>)
 8008e80:	4a21      	ldr	r2, [pc, #132]	; (8008f08 <_tx_timer_initialize+0xd4>)
 8008e82:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8008e84:	4b21      	ldr	r3, [pc, #132]	; (8008f0c <_tx_timer_initialize+0xd8>)
 8008e86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008e8a:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8008e8c:	4b20      	ldr	r3, [pc, #128]	; (8008f10 <_tx_timer_initialize+0xdc>)
 8008e8e:	2200      	movs	r2, #0
 8008e90:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {
      
        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread, 
 8008e92:	4b1c      	ldr	r3, [pc, #112]	; (8008f04 <_tx_timer_initialize+0xd0>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a1d      	ldr	r2, [pc, #116]	; (8008f0c <_tx_timer_initialize+0xd8>)
 8008e98:	6812      	ldr	r2, [r2, #0]
 8008e9a:	491d      	ldr	r1, [pc, #116]	; (8008f10 <_tx_timer_initialize+0xdc>)
 8008e9c:	6809      	ldr	r1, [r1, #0]
 8008e9e:	481c      	ldr	r0, [pc, #112]	; (8008f10 <_tx_timer_initialize+0xdc>)
 8008ea0:	6800      	ldr	r0, [r0, #0]
 8008ea2:	2400      	movs	r4, #0
 8008ea4:	9405      	str	r4, [sp, #20]
 8008ea6:	2400      	movs	r4, #0
 8008ea8:	9404      	str	r4, [sp, #16]
 8008eaa:	9003      	str	r0, [sp, #12]
 8008eac:	9102      	str	r1, [sp, #8]
 8008eae:	9201      	str	r2, [sp, #4]
 8008eb0:	9300      	str	r3, [sp, #0]
 8008eb2:	4b18      	ldr	r3, [pc, #96]	; (8008f14 <_tx_timer_initialize+0xe0>)
 8008eb4:	4a18      	ldr	r2, [pc, #96]	; (8008f18 <_tx_timer_initialize+0xe4>)
 8008eb6:	4919      	ldr	r1, [pc, #100]	; (8008f1c <_tx_timer_initialize+0xe8>)
 8008eb8:	4819      	ldr	r0, [pc, #100]	; (8008f20 <_tx_timer_initialize+0xec>)
 8008eba:	f7fe ff8b 	bl	8007dd4 <_tx_thread_create>
 8008ebe:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)
        
    } while (status != TX_SUCCESS);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1e5      	bne.n	8008e92 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8008ec6:	4b17      	ldr	r3, [pc, #92]	; (8008f24 <_tx_timer_initialize+0xf0>)
 8008ec8:	2200      	movs	r2, #0
 8008eca:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8008ecc:	4b16      	ldr	r3, [pc, #88]	; (8008f28 <_tx_timer_initialize+0xf4>)
 8008ece:	2200      	movs	r2, #0
 8008ed0:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8008ed2:	bf00      	nop
 8008ed4:	370c      	adds	r7, #12
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd90      	pop	{r4, r7, pc}
 8008eda:	bf00      	nop
 8008edc:	200016ec 	.word	0x200016ec
 8008ee0:	20001c4c 	.word	0x20001c4c
 8008ee4:	200016f0 	.word	0x200016f0
 8008ee8:	20001780 	.word	0x20001780
 8008eec:	2000178c 	.word	0x2000178c
 8008ef0:	200016f4 	.word	0x200016f4
 8008ef4:	20001774 	.word	0x20001774
 8008ef8:	2000177c 	.word	0x2000177c
 8008efc:	20001778 	.word	0x20001778
 8008f00:	20001770 	.word	0x20001770
 8008f04:	20001840 	.word	0x20001840
 8008f08:	2000184c 	.word	0x2000184c
 8008f0c:	20001844 	.word	0x20001844
 8008f10:	20001848 	.word	0x20001848
 8008f14:	4154494d 	.word	0x4154494d
 8008f18:	08009061 	.word	0x08009061
 8008f1c:	08010514 	.word	0x08010514
 8008f20:	20001790 	.word	0x20001790
 8008f24:	20001784 	.word	0x20001784
 8008f28:	20001788 	.word	0x20001788

08008f2c <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b089      	sub	sp, #36	; 0x24
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d04a      	beq.n	8008fd6 <_tx_timer_system_activate+0xaa>
    {
    
        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f46:	d046      	beq.n	8008fd6 <_tx_timer_system_activate+0xaa>
        {
    
            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	699b      	ldr	r3, [r3, #24]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d142      	bne.n	8008fd6 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	2b20      	cmp	r3, #32
 8008f54:	d902      	bls.n	8008f5c <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8008f56:	231f      	movs	r3, #31
 8008f58:	61bb      	str	r3, [r7, #24]
 8008f5a:	e002      	b.n	8008f62 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	3b01      	subs	r3, #1
 8008f60:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */
    
                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8008f62:	4b20      	ldr	r3, [pc, #128]	; (8008fe4 <_tx_timer_system_activate+0xb8>)
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	69bb      	ldr	r3, [r7, #24]
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	4413      	add	r3, r2
 8008f6c:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8008f6e:	4b1e      	ldr	r3, [pc, #120]	; (8008fe8 <_tx_timer_system_activate+0xbc>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	69fa      	ldr	r2, [r7, #28]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d30b      	bcc.n	8008f90 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8008f78:	4b1b      	ldr	r3, [pc, #108]	; (8008fe8 <_tx_timer_system_activate+0xbc>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	69fa      	ldr	r2, [r7, #28]
 8008f7e:	1ad3      	subs	r3, r2, r3
 8008f80:	109b      	asrs	r3, r3, #2
 8008f82:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8008f84:	4b19      	ldr	r3, [pc, #100]	; (8008fec <_tx_timer_system_activate+0xc0>)
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	4413      	add	r3, r2
 8008f8e:	61fb      	str	r3, [r7, #28]
                }
    
                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8008f90:	69fb      	ldr	r3, [r7, #28]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d109      	bne.n	8008fac <_tx_timer_system_activate+0x80>
                {
                
                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	601a      	str	r2, [r3, #0]
 8008faa:	e011      	b.n	8008fd0 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	695b      	ldr	r3, [r3, #20]
 8008fb6:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	68fa      	ldr	r2, [r7, #12]
 8008fc8:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	68ba      	ldr	r2, [r7, #8]
 8008fce:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	69fa      	ldr	r2, [r7, #28]
 8008fd4:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8008fd6:	bf00      	nop
 8008fd8:	3724      	adds	r7, #36	; 0x24
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop
 8008fe4:	2000177c 	.word	0x2000177c
 8008fe8:	20001778 	.word	0x20001778
 8008fec:	20001774 	.word	0x20001774

08008ff0 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b087      	sub	sp, #28
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	699b      	ldr	r3, [r3, #24]
 8008ffc:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d026      	beq.n	8009052 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	691b      	ldr	r3, [r3, #16]
 8009008:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	429a      	cmp	r2, r3
 8009010:	d108      	bne.n	8009024 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	429a      	cmp	r2, r3
 800901a:	d117      	bne.n	800904c <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	2200      	movs	r2, #0
 8009020:	601a      	str	r2, [r3, #0]
 8009022:	e013      	b.n	800904c <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	695b      	ldr	r3, [r3, #20]
 8009028:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	68fa      	ldr	r2, [r7, #12]
 800902e:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	693a      	ldr	r2, [r7, #16]
 8009034:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	429a      	cmp	r2, r3
 800903e:	d105      	bne.n	800904c <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	697a      	ldr	r2, [r7, #20]
 8009044:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	693a      	ldr	r2, [r7, #16]
 800904a:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	619a      	str	r2, [r3, #24]
    }
}
 8009052:	bf00      	nop
 8009054:	371c      	adds	r7, #28
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr
	...

08009060 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b098      	sub	sp, #96	; 0x60
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8009068:	2300      	movs	r3, #0
 800906a:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4a73      	ldr	r2, [pc, #460]	; (800923c <_tx_timer_thread_entry+0x1dc>)
 8009070:	4293      	cmp	r3, r2
 8009072:	f040 80de 	bne.w	8009232 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009076:	f3ef 8310 	mrs	r3, PRIMASK
 800907a:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800907c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800907e:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8009080:	b672      	cpsid	i
    return(int_posture);
 8009082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer 
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8009084:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8009086:	4b6e      	ldr	r3, [pc, #440]	; (8009240 <_tx_timer_thread_entry+0x1e0>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d003      	beq.n	800909c <_tx_timer_thread_entry+0x3c>
            {
        
                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f107 020c 	add.w	r2, r7, #12
 800909a:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800909c:	4b68      	ldr	r3, [pc, #416]	; (8009240 <_tx_timer_thread_entry+0x1e0>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	2200      	movs	r2, #0
 80090a2:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to 
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 80090a4:	4b66      	ldr	r3, [pc, #408]	; (8009240 <_tx_timer_thread_entry+0x1e0>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	3304      	adds	r3, #4
 80090aa:	4a65      	ldr	r2, [pc, #404]	; (8009240 <_tx_timer_thread_entry+0x1e0>)
 80090ac:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 80090ae:	4b64      	ldr	r3, [pc, #400]	; (8009240 <_tx_timer_thread_entry+0x1e0>)
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	4b64      	ldr	r3, [pc, #400]	; (8009244 <_tx_timer_thread_entry+0x1e4>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d103      	bne.n	80090c2 <_tx_timer_thread_entry+0x62>
            {
        
                _tx_timer_current_ptr =  _tx_timer_list_start;
 80090ba:	4b63      	ldr	r3, [pc, #396]	; (8009248 <_tx_timer_thread_entry+0x1e8>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a60      	ldr	r2, [pc, #384]	; (8009240 <_tx_timer_thread_entry+0x1e0>)
 80090c0:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 80090c2:	4b62      	ldr	r3, [pc, #392]	; (800924c <_tx_timer_thread_entry+0x1ec>)
 80090c4:	2200      	movs	r2, #0
 80090c6:	601a      	str	r2, [r3, #0]
 80090c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090ca:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80090cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ce:	f383 8810 	msr	PRIMASK, r3
}
 80090d2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80090d4:	f3ef 8310 	mrs	r3, PRIMASK
 80090d8:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 80090da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 80090dc:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80090de:	b672      	cpsid	i
    return(int_posture);
 80090e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 80090e2:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 80090e4:	e07f      	b.n	80091e6 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	691b      	ldr	r3, [r3, #16]
 80090ee:	64bb      	str	r3, [r7, #72]	; 0x48
            
                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 80090f0:	2300      	movs	r3, #0
 80090f2:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 80090f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80090f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d102      	bne.n	8009102 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 80090fc:	2300      	movs	r3, #0
 80090fe:	60fb      	str	r3, [r7, #12]
 8009100:	e00e      	b.n	8009120 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */
            
                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8009102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009104:	695b      	ldr	r3, [r3, #20]
 8009106:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8009108:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800910a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800910c:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800910e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009110:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009112:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8009114:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009116:	f107 020c 	add.w	r2, r7, #12
 800911a:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800911c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800911e:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really 
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8009120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2b20      	cmp	r3, #32
 8009126:	d911      	bls.n	800914c <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8009128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =  
 8009130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009132:	601a      	str	r2, [r3, #0]
                
                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8009134:	2300      	movs	r3, #0
 8009136:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8009138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800913a:	f107 0208 	add.w	r2, r7, #8
 800913e:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8009140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009142:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009144:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8009146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009148:	60bb      	str	r3, [r7, #8]
 800914a:	e01a      	b.n	8009182 <_tx_timer_thread_entry+0x122>
                    }
#endif
                  
                    /* Copy the calling function and ID into local variables before interrupts 
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800914c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8009152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8009158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800915a:	685a      	ldr	r2, [r3, #4]
 800915c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800915e:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8009160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d009      	beq.n	800917c <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will 
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8009168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800916a:	f107 0208 	add.w	r2, r7, #8
 800916e:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8009170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009172:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009174:	611a      	str	r2, [r3, #16]
                        
                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8009176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009178:	60bb      	str	r3, [r7, #8]
 800917a:	e002      	b.n	8009182 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800917c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800917e:	2200      	movs	r2, #0
 8009180:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8009182:	4a33      	ldr	r2, [pc, #204]	; (8009250 <_tx_timer_thread_entry+0x1f0>)
 8009184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009186:	6013      	str	r3, [r2, #0]
 8009188:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800918a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800918c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800918e:	f383 8810 	msr	PRIMASK, r3
}
 8009192:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8009194:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009196:	2b00      	cmp	r3, #0
 8009198:	d002      	beq.n	80091a0 <_tx_timer_thread_entry+0x140>
                {
            
                    (timeout_function) (timeout_param);
 800919a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800919c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800919e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80091a0:	f3ef 8310 	mrs	r3, PRIMASK
 80091a4:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80091a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80091a8:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80091aa:	b672      	cpsid	i
    return(int_posture);
 80091ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 80091ae:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 80091b0:	4b27      	ldr	r3, [pc, #156]	; (8009250 <_tx_timer_thread_entry+0x1f0>)
 80091b2:	2200      	movs	r2, #0
 80091b4:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d105      	bne.n	80091ca <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 80091be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091c0:	2200      	movs	r2, #0
 80091c2:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 80091c4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80091c6:	f7ff feb1 	bl	8008f2c <_tx_timer_system_activate>
 80091ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091cc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	f383 8810 	msr	PRIMASK, r3
}
 80091d4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80091d6:	f3ef 8310 	mrs	r3, PRIMASK
 80091da:	623b      	str	r3, [r7, #32]
    return(posture);
 80091dc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80091de:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80091e0:	b672      	cpsid	i
    return(int_posture);
 80091e2:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 80091e4:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f47f af7c 	bne.w	80090e6 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 80091ee:	4b17      	ldr	r3, [pc, #92]	; (800924c <_tx_timer_thread_entry+0x1ec>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d116      	bne.n	8009224 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 80091f6:	4b17      	ldr	r3, [pc, #92]	; (8009254 <_tx_timer_thread_entry+0x1f4>)
 80091f8:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the 
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80091fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091fc:	2203      	movs	r2, #3
 80091fe:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8009200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009202:	2201      	movs	r2, #1
 8009204:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8009206:	4b14      	ldr	r3, [pc, #80]	; (8009258 <_tx_timer_thread_entry+0x1f8>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	3301      	adds	r3, #1
 800920c:	4a12      	ldr	r2, [pc, #72]	; (8009258 <_tx_timer_thread_entry+0x1f8>)
 800920e:	6013      	str	r3, [r2, #0]
 8009210:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009212:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	f383 8810 	msr	PRIMASK, r3
}
 800921a:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800921c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800921e:	f7ff fadb 	bl	80087d8 <_tx_thread_system_suspend>
 8009222:	e728      	b.n	8009076 <_tx_timer_thread_entry+0x16>
 8009224:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009226:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	f383 8810 	msr	PRIMASK, r3
}
 800922e:	bf00      	nop
            TX_DISABLE
 8009230:	e721      	b.n	8009076 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8009232:	bf00      	nop
 8009234:	3760      	adds	r7, #96	; 0x60
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
 800923a:	bf00      	nop
 800923c:	4154494d 	.word	0x4154494d
 8009240:	2000177c 	.word	0x2000177c
 8009244:	20001778 	.word	0x20001778
 8009248:	20001774 	.word	0x20001774
 800924c:	20001780 	.word	0x20001780
 8009250:	2000178c 	.word	0x2000178c
 8009254:	20001790 	.word	0x20001790
 8009258:	200016e0 	.word	0x200016e0

0800925c <_tx_trace_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_initialize(VOID)
{
 800925c:	b480      	push	{r7}
 800925e:	af00      	add	r7, sp, #0

#ifdef TX_ENABLE_EVENT_TRACE
#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize all the pointers to the trace buffer to NULL.  */
    _tx_trace_header_ptr =          TX_NULL;
 8009260:	4b0b      	ldr	r3, [pc, #44]	; (8009290 <_tx_trace_initialize+0x34>)
 8009262:	2200      	movs	r2, #0
 8009264:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_start_ptr =  TX_NULL;
 8009266:	4b0b      	ldr	r3, [pc, #44]	; (8009294 <_tx_trace_initialize+0x38>)
 8009268:	2200      	movs	r2, #0
 800926a:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_end_ptr =    TX_NULL;
 800926c:	4b0a      	ldr	r3, [pc, #40]	; (8009298 <_tx_trace_initialize+0x3c>)
 800926e:	2200      	movs	r2, #0
 8009270:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_start_ptr =    TX_NULL;
 8009272:	4b0a      	ldr	r3, [pc, #40]	; (800929c <_tx_trace_initialize+0x40>)
 8009274:	2200      	movs	r2, #0
 8009276:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_end_ptr =      TX_NULL;
 8009278:	4b09      	ldr	r3, [pc, #36]	; (80092a0 <_tx_trace_initialize+0x44>)
 800927a:	2200      	movs	r2, #0
 800927c:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_current_ptr =  TX_NULL;
 800927e:	4b09      	ldr	r3, [pc, #36]	; (80092a4 <_tx_trace_initialize+0x48>)
 8009280:	2200      	movs	r2, #0
 8009282:	601a      	str	r2, [r3, #0]
#endif
#endif
}
 8009284:	bf00      	nop
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr
 800928e:	bf00      	nop
 8009290:	20001c50 	.word	0x20001c50
 8009294:	20001c54 	.word	0x20001c54
 8009298:	20001c58 	.word	0x20001c58
 800929c:	20001c5c 	.word	0x20001c5c
 80092a0:	20001c60 	.word	0x20001c60
 80092a4:	20001c64 	.word	0x20001c64

080092a8 <_tx_trace_object_register>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_object_register(UCHAR object_type, VOID *object_ptr, CHAR *object_name, ULONG parameter_1, ULONG parameter_2)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b08d      	sub	sp, #52	; 0x34
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60b9      	str	r1, [r7, #8]
 80092b0:	607a      	str	r2, [r7, #4]
 80092b2:	603b      	str	r3, [r7, #0]
 80092b4:	4603      	mov	r3, r0
 80092b6:	73fb      	strb	r3, [r7, #15]
UCHAR                           *work_ptr;
TX_TRACE_OBJECT_ENTRY           *entry_ptr;


    /* Determine if the registry area is setup.  */
    if (_tx_trace_registry_start_ptr != TX_NULL)
 80092b8:	4b6d      	ldr	r3, [pc, #436]	; (8009470 <_tx_trace_object_register+0x1c8>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f000 80d0 	beq.w	8009462 <_tx_trace_object_register+0x1ba>
    {

        /* Trace buffer is enabled, proceed.  */

        /* Pickup the total entries.  */
        entries =  _tx_trace_total_registry_entries;
 80092c2:	4b6c      	ldr	r3, [pc, #432]	; (8009474 <_tx_trace_object_register+0x1cc>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	623b      	str	r3, [r7, #32]

        /* Determine if there are available entries in the registry.  */
        if (_tx_trace_available_registry_entries != ((ULONG) 0))
 80092c8:	4b6b      	ldr	r3, [pc, #428]	; (8009478 <_tx_trace_object_register+0x1d0>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	f000 80c8 	beq.w	8009462 <_tx_trace_object_register+0x1ba>
        {
    
            /* There are more available entries, proceed.  */

            /* Initialize found to the max entries... indicating no space was found.  */
            found =       entries;
 80092d2:	6a3b      	ldr	r3, [r7, #32]
 80092d4:	62bb      	str	r3, [r7, #40]	; 0x28
            loop_break =  TX_FALSE;
 80092d6:	2300      	movs	r3, #0
 80092d8:	627b      	str	r3, [r7, #36]	; 0x24

            /* Loop to find available entry.  */
            i =  _tx_trace_registry_search_start;
 80092da:	4b68      	ldr	r3, [pc, #416]	; (800947c <_tx_trace_object_register+0x1d4>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	62fb      	str	r3, [r7, #44]	; 0x2c
            do
            {

                /* Setup the registry entry pointer.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 80092e0:	4b63      	ldr	r3, [pc, #396]	; (8009470 <_tx_trace_object_register+0x1c8>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*i));
 80092e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092e8:	4613      	mov	r3, r2
 80092ea:	005b      	lsls	r3, r3, #1
 80092ec:	4413      	add	r3, r2
 80092ee:	011b      	lsls	r3, r3, #4
 80092f0:	461a      	mov	r2, r3
 80092f2:	69fb      	ldr	r3, [r7, #28]
 80092f4:	4413      	add	r3, r2
 80092f6:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 80092f8:	69fb      	ldr	r3, [r7, #28]
 80092fa:	61bb      	str	r3, [r7, #24]

                /* Determine if this is the first pass building the registry. A NULL object value indicates this part
                   of the registry has never been used.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == (ULONG) 0)
 80092fc:	69bb      	ldr	r3, [r7, #24]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d103      	bne.n	800930c <_tx_trace_object_register+0x64>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 8009304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009306:	62bb      	str	r3, [r7, #40]	; 0x28
                    loop_break =  TX_TRUE;
 8009308:	2301      	movs	r3, #1
 800930a:	627b      	str	r3, [r7, #36]	; 0x24
                }

                /* Determine if this entry matches the object pointer... we must reuse old entries left in the 
                   registry.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == TX_POINTER_TO_ULONG_CONVERT(object_ptr))
 800930c:	69bb      	ldr	r3, [r7, #24]
 800930e:	685a      	ldr	r2, [r3, #4]
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	429a      	cmp	r2, r3
 8009314:	d103      	bne.n	800931e <_tx_trace_object_register+0x76>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 8009316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009318:	62bb      	str	r3, [r7, #40]	; 0x28
                    loop_break =  TX_TRUE;
 800931a:	2301      	movs	r3, #1
 800931c:	627b      	str	r3, [r7, #36]	; 0x24
                }
                
                /* Determine if we should break out of the loop.  */
                if (loop_break == TX_TRUE)
 800931e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009320:	2b01      	cmp	r3, #1
 8009322:	d02d      	beq.n	8009380 <_tx_trace_object_register+0xd8>
                    /* Yes, break out of the loop.  */
                    break;
                }

                /* Is this entry available?  */
                if (entry_ptr -> tx_trace_object_entry_available == TX_TRUE)
 8009324:	69bb      	ldr	r3, [r7, #24]
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	2b01      	cmp	r3, #1
 800932a:	d11a      	bne.n	8009362 <_tx_trace_object_register+0xba>
                {

                    /* Yes, determine if we have not already found an empty slot.  */
                    if (found == entries)
 800932c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800932e:	6a3b      	ldr	r3, [r7, #32]
 8009330:	429a      	cmp	r2, r3
 8009332:	d102      	bne.n	800933a <_tx_trace_object_register+0x92>
                    {
                        found =  i;
 8009334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009336:	62bb      	str	r3, [r7, #40]	; 0x28
 8009338:	e013      	b.n	8009362 <_tx_trace_object_register+0xba>
                    }
                    else
                    {
                    
                        /* Setup a pointer to the found entry.  */
                        work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 800933a:	4b4d      	ldr	r3, [pc, #308]	; (8009470 <_tx_trace_object_register+0x1c8>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	61fb      	str	r3, [r7, #28]
                        work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 8009340:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009342:	4613      	mov	r3, r2
 8009344:	005b      	lsls	r3, r3, #1
 8009346:	4413      	add	r3, r2
 8009348:	011b      	lsls	r3, r3, #4
 800934a:	461a      	mov	r2, r3
 800934c:	69fb      	ldr	r3, [r7, #28]
 800934e:	4413      	add	r3, r2
 8009350:	61fb      	str	r3, [r7, #28]
                        entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 8009352:	69fb      	ldr	r3, [r7, #28]
 8009354:	61bb      	str	r3, [r7, #24]
                
                         if (entry_ptr -> tx_trace_object_entry_type != ((UCHAR) 0))
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	785b      	ldrb	r3, [r3, #1]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d001      	beq.n	8009362 <_tx_trace_object_register+0xba>
                         {
                            found =  i;
 800935e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009360:	62bb      	str	r3, [r7, #40]	; 0x28
                         }
                    }
                }
        
                /* Move to the next entry.  */
                i++;
 8009362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009364:	3301      	adds	r3, #1
 8009366:	62fb      	str	r3, [r7, #44]	; 0x2c
        
                /* Determine if we have wrapped the list.  */
                if (i >= entries)
 8009368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800936a:	6a3b      	ldr	r3, [r7, #32]
 800936c:	429a      	cmp	r2, r3
 800936e:	d301      	bcc.n	8009374 <_tx_trace_object_register+0xcc>
                {
        
                    /* Yes, wrap to the beginning of the list.  */
                    i =  ((ULONG) 0);
 8009370:	2300      	movs	r3, #0
 8009372:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
        
            } while (i != _tx_trace_registry_search_start);
 8009374:	4b41      	ldr	r3, [pc, #260]	; (800947c <_tx_trace_object_register+0x1d4>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800937a:	429a      	cmp	r2, r3
 800937c:	d1b0      	bne.n	80092e0 <_tx_trace_object_register+0x38>
 800937e:	e000      	b.n	8009382 <_tx_trace_object_register+0xda>
                    break;
 8009380:	bf00      	nop

            /* Now determine if an empty or reuse entry has been found.  */
            if (found < entries)
 8009382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009384:	6a3b      	ldr	r3, [r7, #32]
 8009386:	429a      	cmp	r2, r3
 8009388:	d26b      	bcs.n	8009462 <_tx_trace_object_register+0x1ba>
            {

                /* Decrement the number of available entries.  */
                _tx_trace_available_registry_entries--;
 800938a:	4b3b      	ldr	r3, [pc, #236]	; (8009478 <_tx_trace_object_register+0x1d0>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	3b01      	subs	r3, #1
 8009390:	4a39      	ldr	r2, [pc, #228]	; (8009478 <_tx_trace_object_register+0x1d0>)
 8009392:	6013      	str	r3, [r2, #0]

                /* Adjust the search index to the next entry.  */
                if ((found + ((ULONG) 1)) < entries)
 8009394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009396:	3301      	adds	r3, #1
 8009398:	6a3a      	ldr	r2, [r7, #32]
 800939a:	429a      	cmp	r2, r3
 800939c:	d904      	bls.n	80093a8 <_tx_trace_object_register+0x100>
                {
                    
                    /* Start searching from the next index.  */
                    _tx_trace_registry_search_start =  found + ((ULONG) 1);
 800939e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a0:	3301      	adds	r3, #1
 80093a2:	4a36      	ldr	r2, [pc, #216]	; (800947c <_tx_trace_object_register+0x1d4>)
 80093a4:	6013      	str	r3, [r2, #0]
 80093a6:	e002      	b.n	80093ae <_tx_trace_object_register+0x106>
                }
                else
                {
                
                    /* Reset the search to the beginning of the list. */
                    _tx_trace_registry_search_start =  ((ULONG) 0);
 80093a8:	4b34      	ldr	r3, [pc, #208]	; (800947c <_tx_trace_object_register+0x1d4>)
 80093aa:	2200      	movs	r2, #0
 80093ac:	601a      	str	r2, [r3, #0]
                }
        
                /* Yes, an entry has been found...  */
                
                /* Build a pointer to the found entry.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 80093ae:	4b30      	ldr	r3, [pc, #192]	; (8009470 <_tx_trace_object_register+0x1c8>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 80093b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093b6:	4613      	mov	r3, r2
 80093b8:	005b      	lsls	r3, r3, #1
 80093ba:	4413      	add	r3, r2
 80093bc:	011b      	lsls	r3, r3, #4
 80093be:	461a      	mov	r2, r3
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	4413      	add	r3, r2
 80093c4:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 80093c6:	69fb      	ldr	r3, [r7, #28]
 80093c8:	61bb      	str	r3, [r7, #24]
                
                /* Populate the found entry!  */
                entry_ptr -> tx_trace_object_entry_available =       ((UCHAR) TX_FALSE);
 80093ca:	69bb      	ldr	r3, [r7, #24]
 80093cc:	2200      	movs	r2, #0
 80093ce:	701a      	strb	r2, [r3, #0]
                entry_ptr -> tx_trace_object_entry_type =            object_type;
 80093d0:	69bb      	ldr	r3, [r7, #24]
 80093d2:	7bfa      	ldrb	r2, [r7, #15]
 80093d4:	705a      	strb	r2, [r3, #1]
                entry_ptr -> tx_trace_object_entry_thread_pointer =  TX_POINTER_TO_ULONG_CONVERT(object_ptr);
 80093d6:	68ba      	ldr	r2, [r7, #8]
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	605a      	str	r2, [r3, #4]
                entry_ptr -> tx_trace_object_entry_param_1 =         parameter_1;
 80093dc:	69bb      	ldr	r3, [r7, #24]
 80093de:	683a      	ldr	r2, [r7, #0]
 80093e0:	609a      	str	r2, [r3, #8]
                entry_ptr -> tx_trace_object_entry_param_2 =         parameter_2;
 80093e2:	69bb      	ldr	r3, [r7, #24]
 80093e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093e6:	60da      	str	r2, [r3, #12]

                /* Loop to copy the object name string...  */
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 80093e8:	2300      	movs	r3, #0
 80093ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093ec:	e014      	b.n	8009418 <_tx_trace_object_register+0x170>
                {

                    /* Setup work pointer to the object name character.  */
                    work_ptr =  TX_CHAR_TO_UCHAR_POINTER_CONVERT(object_name);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	61fb      	str	r3, [r7, #28]
                    work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, i);
 80093f2:	69fa      	ldr	r2, [r7, #28]
 80093f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f6:	4413      	add	r3, r2
 80093f8:	61fb      	str	r3, [r7, #28]
                  
                    /* Copy a character of the name.  */
                    entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) *work_ptr;
 80093fa:	69fb      	ldr	r3, [r7, #28]
 80093fc:	7819      	ldrb	r1, [r3, #0]
 80093fe:	69ba      	ldr	r2, [r7, #24]
 8009400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009402:	4413      	add	r3, r2
 8009404:	3310      	adds	r3, #16
 8009406:	460a      	mov	r2, r1
 8009408:	701a      	strb	r2, [r3, #0]

                    /* Determine if we are at the end.  */
                    if (*work_ptr == ((UCHAR) 0))
 800940a:	69fb      	ldr	r3, [r7, #28]
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d006      	beq.n	8009420 <_tx_trace_object_register+0x178>
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 8009412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009414:	3301      	adds	r3, #1
 8009416:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800941a:	2b1e      	cmp	r3, #30
 800941c:	d9e7      	bls.n	80093ee <_tx_trace_object_register+0x146>
 800941e:	e000      	b.n	8009422 <_tx_trace_object_register+0x17a>
                    {
                        break;
 8009420:	bf00      	nop
                    }
                }

                /* Null terminate the object string.  */
                entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) 0;
 8009422:	69ba      	ldr	r2, [r7, #24]
 8009424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009426:	4413      	add	r3, r2
 8009428:	3310      	adds	r3, #16
 800942a:	2200      	movs	r2, #0
 800942c:	701a      	strb	r2, [r3, #0]

                /* Determine if a thread object type is present.  */
                if (object_type == TX_TRACE_OBJECT_TYPE_THREAD)
 800942e:	7bfb      	ldrb	r3, [r7, #15]
 8009430:	2b01      	cmp	r3, #1
 8009432:	d110      	bne.n	8009456 <_tx_trace_object_register+0x1ae>
                {

                    /* Yes, a thread object is present.  */
            
                    /* Setup a pointer to the thread.  */
                    thread_ptr =  TX_VOID_TO_THREAD_POINTER_CONVERT(object_ptr);
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	617b      	str	r3, [r7, #20]
            
                    /* Store the thread's priority in the reserved bits.  */
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0x80) | ((UCHAR) (thread_ptr -> tx_thread_priority >> ((UCHAR) 8)));
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800943c:	0a1b      	lsrs	r3, r3, #8
 800943e:	b2db      	uxtb	r3, r3
 8009440:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009444:	b2da      	uxtb	r2, r3
 8009446:	69bb      	ldr	r3, [r7, #24]
 8009448:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  (UCHAR) (thread_ptr -> tx_thread_priority & ((UCHAR) 0xFF));
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800944e:	b2da      	uxtb	r2, r3
 8009450:	69bb      	ldr	r3, [r7, #24]
 8009452:	70da      	strb	r2, [r3, #3]
                }
            }
        }
    }
#endif
}
 8009454:	e005      	b.n	8009462 <_tx_trace_object_register+0x1ba>
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0);
 8009456:	69bb      	ldr	r3, [r7, #24]
 8009458:	2200      	movs	r2, #0
 800945a:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  ((UCHAR) 0);
 800945c:	69bb      	ldr	r3, [r7, #24]
 800945e:	2200      	movs	r2, #0
 8009460:	70da      	strb	r2, [r3, #3]
}
 8009462:	bf00      	nop
 8009464:	3734      	adds	r7, #52	; 0x34
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr
 800946e:	bf00      	nop
 8009470:	20001c54 	.word	0x20001c54
 8009474:	20001c70 	.word	0x20001c70
 8009478:	20001c74 	.word	0x20001c74
 800947c:	20001c78 	.word	0x20001c78

08009480 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b092      	sub	sp, #72	; 0x48
 8009484:	af00      	add	r7, sp, #0
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	60b9      	str	r1, [r7, #8]
 800948a:	607a      	str	r2, [r7, #4]
 800948c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800948e:	2300      	movs	r3, #0
 8009490:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d102      	bne.n	800949e <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8009498:	2302      	movs	r3, #2
 800949a:	647b      	str	r3, [r7, #68]	; 0x44
 800949c:	e075      	b.n	800958a <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800949e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094a0:	2b34      	cmp	r3, #52	; 0x34
 80094a2:	d002      	beq.n	80094aa <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80094a4:	2302      	movs	r3, #2
 80094a6:	647b      	str	r3, [r7, #68]	; 0x44
 80094a8:	e06f      	b.n	800958a <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80094aa:	f3ef 8310 	mrs	r3, PRIMASK
 80094ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80094b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80094b2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80094b4:	b672      	cpsid	i
    return(int_posture);
 80094b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {
    
        /* Disable interrupts.  */
        TX_DISABLE
 80094b8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80094ba:	4b3b      	ldr	r3, [pc, #236]	; (80095a8 <_txe_byte_pool_create+0x128>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	3301      	adds	r3, #1
 80094c0:	4a39      	ldr	r2, [pc, #228]	; (80095a8 <_txe_byte_pool_create+0x128>)
 80094c2:	6013      	str	r3, [r2, #0]
 80094c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80094c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ca:	f383 8810 	msr	PRIMASK, r3
}
 80094ce:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 80094d0:	4b36      	ldr	r3, [pc, #216]	; (80095ac <_txe_byte_pool_create+0x12c>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80094d6:	2300      	movs	r3, #0
 80094d8:	643b      	str	r3, [r7, #64]	; 0x40
 80094da:	e009      	b.n	80094f0 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 80094dc:	68fa      	ldr	r2, [r7, #12]
 80094de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d00b      	beq.n	80094fc <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 80094e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80094ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094ec:	3301      	adds	r3, #1
 80094ee:	643b      	str	r3, [r7, #64]	; 0x40
 80094f0:	4b2f      	ldr	r3, [pc, #188]	; (80095b0 <_txe_byte_pool_create+0x130>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d3f0      	bcc.n	80094dc <_txe_byte_pool_create+0x5c>
 80094fa:	e000      	b.n	80094fe <_txe_byte_pool_create+0x7e>
                break;
 80094fc:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80094fe:	f3ef 8310 	mrs	r3, PRIMASK
 8009502:	623b      	str	r3, [r7, #32]
    return(posture);
 8009504:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8009506:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009508:	b672      	cpsid	i
    return(int_posture);
 800950a:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800950c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800950e:	4b26      	ldr	r3, [pc, #152]	; (80095a8 <_txe_byte_pool_create+0x128>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	3b01      	subs	r3, #1
 8009514:	4a24      	ldr	r2, [pc, #144]	; (80095a8 <_txe_byte_pool_create+0x128>)
 8009516:	6013      	str	r3, [r2, #0]
 8009518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800951c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951e:	f383 8810 	msr	PRIMASK, r3
}
 8009522:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8009524:	f7fe ff64 	bl	80083f0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8009528:	68fa      	ldr	r2, [r7, #12]
 800952a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800952c:	429a      	cmp	r2, r3
 800952e:	d102      	bne.n	8009536 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8009530:	2302      	movs	r3, #2
 8009532:	647b      	str	r3, [r7, #68]	; 0x44
 8009534:	e029      	b.n	800958a <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d102      	bne.n	8009542 <_txe_byte_pool_create+0xc2>
        {
    
            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800953c:	2303      	movs	r3, #3
 800953e:	647b      	str	r3, [r7, #68]	; 0x44
 8009540:	e023      	b.n	800958a <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	2b63      	cmp	r3, #99	; 0x63
 8009546:	d802      	bhi.n	800954e <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8009548:	2305      	movs	r3, #5
 800954a:	647b      	str	r3, [r7, #68]	; 0x44
 800954c:	e01d      	b.n	800958a <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800954e:	4b19      	ldr	r3, [pc, #100]	; (80095b4 <_txe_byte_pool_create+0x134>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8009554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009556:	4a18      	ldr	r2, [pc, #96]	; (80095b8 <_txe_byte_pool_create+0x138>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d101      	bne.n	8009560 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800955c:	2313      	movs	r3, #19
 800955e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009560:	f3ef 8305 	mrs	r3, IPSR
 8009564:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8009566:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8009568:	4b14      	ldr	r3, [pc, #80]	; (80095bc <_txe_byte_pool_create+0x13c>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4313      	orrs	r3, r2
 800956e:	2b00      	cmp	r3, #0
 8009570:	d00b      	beq.n	800958a <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009572:	f3ef 8305 	mrs	r3, IPSR
 8009576:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8009578:	697a      	ldr	r2, [r7, #20]
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800957a:	4b10      	ldr	r3, [pc, #64]	; (80095bc <_txe_byte_pool_create+0x13c>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4313      	orrs	r3, r2
 8009580:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8009584:	d201      	bcs.n	800958a <_txe_byte_pool_create+0x10a>
                {
        
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8009586:	2313      	movs	r3, #19
 8009588:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800958a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800958c:	2b00      	cmp	r3, #0
 800958e:	d106      	bne.n	800959e <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	68b9      	ldr	r1, [r7, #8]
 8009596:	68f8      	ldr	r0, [r7, #12]
 8009598:	f7fd f88e 	bl	80066b8 <_tx_byte_pool_create>
 800959c:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800959e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3748      	adds	r7, #72	; 0x48
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	200016e0 	.word	0x200016e0
 80095ac:	20001638 	.word	0x20001638
 80095b0:	2000163c 	.word	0x2000163c
 80095b4:	20001648 	.word	0x20001648
 80095b8:	20001790 	.word	0x20001790
 80095bc:	2000000c 	.word	0x2000000c

080095c0 <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size, 
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b094      	sub	sp, #80	; 0x50
 80095c4:	af02      	add	r7, sp, #8
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	607a      	str	r2, [r7, #4]
 80095cc:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80095ce:	2300      	movs	r3, #0
 80095d0:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d102      	bne.n	80095de <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80095d8:	2309      	movs	r3, #9
 80095da:	647b      	str	r3, [r7, #68]	; 0x44
 80095dc:	e083      	b.n	80096e6 <_txe_queue_create+0x126>
    }
    
    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 80095de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095e0:	2b38      	cmp	r3, #56	; 0x38
 80095e2:	d002      	beq.n	80095ea <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80095e4:	2309      	movs	r3, #9
 80095e6:	647b      	str	r3, [r7, #68]	; 0x44
 80095e8:	e07d      	b.n	80096e6 <_txe_queue_create+0x126>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80095ea:	f3ef 8310 	mrs	r3, PRIMASK
 80095ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80095f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80095f2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80095f4:	b672      	cpsid	i
    return(int_posture);
 80095f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80095f8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80095fa:	4b43      	ldr	r3, [pc, #268]	; (8009708 <_txe_queue_create+0x148>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	3301      	adds	r3, #1
 8009600:	4a41      	ldr	r2, [pc, #260]	; (8009708 <_txe_queue_create+0x148>)
 8009602:	6013      	str	r3, [r2, #0]
 8009604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009606:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800960a:	f383 8810 	msr	PRIMASK, r3
}
 800960e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 8009610:	4b3e      	ldr	r3, [pc, #248]	; (800970c <_txe_queue_create+0x14c>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 8009616:	2300      	movs	r3, #0
 8009618:	643b      	str	r3, [r7, #64]	; 0x40
 800961a:	e009      	b.n	8009630 <_txe_queue_create+0x70>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 800961c:	68fa      	ldr	r2, [r7, #12]
 800961e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009620:	429a      	cmp	r2, r3
 8009622:	d00b      	beq.n	800963c <_txe_queue_create+0x7c>
            }
            else
            {
        
                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 8009624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009628:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800962a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800962c:	3301      	adds	r3, #1
 800962e:	643b      	str	r3, [r7, #64]	; 0x40
 8009630:	4b37      	ldr	r3, [pc, #220]	; (8009710 <_txe_queue_create+0x150>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009636:	429a      	cmp	r2, r3
 8009638:	d3f0      	bcc.n	800961c <_txe_queue_create+0x5c>
 800963a:	e000      	b.n	800963e <_txe_queue_create+0x7e>
                break;
 800963c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800963e:	f3ef 8310 	mrs	r3, PRIMASK
 8009642:	623b      	str	r3, [r7, #32]
    return(posture);
 8009644:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8009646:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009648:	b672      	cpsid	i
    return(int_posture);
 800964a:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800964c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800964e:	4b2e      	ldr	r3, [pc, #184]	; (8009708 <_txe_queue_create+0x148>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	3b01      	subs	r3, #1
 8009654:	4a2c      	ldr	r2, [pc, #176]	; (8009708 <_txe_queue_create+0x148>)
 8009656:	6013      	str	r3, [r2, #0]
 8009658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800965a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800965c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965e:	f383 8810 	msr	PRIMASK, r3
}
 8009662:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8009664:	f7fe fec4 	bl	80083f0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 8009668:	68fa      	ldr	r2, [r7, #12]
 800966a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800966c:	429a      	cmp	r2, r3
 800966e:	d102      	bne.n	8009676 <_txe_queue_create+0xb6>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 8009670:	2309      	movs	r3, #9
 8009672:	647b      	str	r3, [r7, #68]	; 0x44
 8009674:	e037      	b.n	80096e6 <_txe_queue_create+0x126>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d102      	bne.n	8009682 <_txe_queue_create+0xc2>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 800967c:	2303      	movs	r3, #3
 800967e:	647b      	str	r3, [r7, #68]	; 0x44
 8009680:	e031      	b.n	80096e6 <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d102      	bne.n	800968e <_txe_queue_create+0xce>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 8009688:	2305      	movs	r3, #5
 800968a:	647b      	str	r3, [r7, #68]	; 0x44
 800968c:	e02b      	b.n	80096e6 <_txe_queue_create+0x126>
        }
    
        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2b10      	cmp	r3, #16
 8009692:	d902      	bls.n	800969a <_txe_queue_create+0xda>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 8009694:	2305      	movs	r3, #5
 8009696:	647b      	str	r3, [r7, #68]	; 0x44
 8009698:	e025      	b.n	80096e6 <_txe_queue_create+0x126>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 800969a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800969c:	089b      	lsrs	r3, r3, #2
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d902      	bls.n	80096aa <_txe_queue_create+0xea>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 80096a4:	2305      	movs	r3, #5
 80096a6:	647b      	str	r3, [r7, #68]	; 0x44
 80096a8:	e01d      	b.n	80096e6 <_txe_queue_create+0x126>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80096aa:	4b1a      	ldr	r3, [pc, #104]	; (8009714 <_txe_queue_create+0x154>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80096b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096b2:	4a19      	ldr	r2, [pc, #100]	; (8009718 <_txe_queue_create+0x158>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d101      	bne.n	80096bc <_txe_queue_create+0xfc>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80096b8:	2313      	movs	r3, #19
 80096ba:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80096bc:	f3ef 8305 	mrs	r3, IPSR
 80096c0:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80096c2:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80096c4:	4b15      	ldr	r3, [pc, #84]	; (800971c <_txe_queue_create+0x15c>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4313      	orrs	r3, r2
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d00b      	beq.n	80096e6 <_txe_queue_create+0x126>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80096ce:	f3ef 8305 	mrs	r3, IPSR
 80096d2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80096d4:	697a      	ldr	r2, [r7, #20]
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80096d6:	4b11      	ldr	r3, [pc, #68]	; (800971c <_txe_queue_create+0x15c>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4313      	orrs	r3, r2
 80096dc:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80096e0:	d201      	bcs.n	80096e6 <_txe_queue_create+0x126>
                {
        
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80096e2:	2313      	movs	r3, #19
 80096e4:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80096e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d108      	bne.n	80096fe <_txe_queue_create+0x13e>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 80096ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096ee:	9300      	str	r3, [sp, #0]
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	687a      	ldr	r2, [r7, #4]
 80096f4:	68b9      	ldr	r1, [r7, #8]
 80096f6:	68f8      	ldr	r0, [r7, #12]
 80096f8:	f7fd f9f6 	bl	8006ae8 <_tx_queue_create>
 80096fc:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 80096fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8009700:	4618      	mov	r0, r3
 8009702:	3748      	adds	r7, #72	; 0x48
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}
 8009708:	200016e0 	.word	0x200016e0
 800970c:	20001618 	.word	0x20001618
 8009710:	2000161c 	.word	0x2000161c
 8009714:	20001648 	.word	0x20001648
 8009718:	20001790 	.word	0x20001790
 800971c:	2000000c 	.word	0x2000000c

08009720 <_txe_queue_flush>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_flush(TX_QUEUE *queue_ptr)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d102      	bne.n	8009734 <_txe_queue_flush+0x14>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800972e:	2309      	movs	r3, #9
 8009730:	60fb      	str	r3, [r7, #12]
 8009732:	e00b      	b.n	800974c <_txe_queue_flush+0x2c>
    }
    
    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a07      	ldr	r2, [pc, #28]	; (8009758 <_txe_queue_flush+0x38>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d002      	beq.n	8009744 <_txe_queue_flush+0x24>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800973e:	2309      	movs	r3, #9
 8009740:	60fb      	str	r3, [r7, #12]
 8009742:	e003      	b.n	800974c <_txe_queue_flush+0x2c>
    }
    else
    {

        /* Call actual queue flush function.  */
        status =  _tx_queue_flush(queue_ptr);
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f7fd facf 	bl	8006ce8 <_tx_queue_flush>
 800974a:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800974c:	68fb      	ldr	r3, [r7, #12]
}
 800974e:	4618      	mov	r0, r3
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	51554555 	.word	0x51554555

0800975c <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b088      	sub	sp, #32
 8009760:	af00      	add	r7, sp, #0
 8009762:	60f8      	str	r0, [r7, #12]
 8009764:	60b9      	str	r1, [r7, #8]
 8009766:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8009768:	2300      	movs	r3, #0
 800976a:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d102      	bne.n	8009778 <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8009772:	2309      	movs	r3, #9
 8009774:	61fb      	str	r3, [r7, #28]
 8009776:	e025      	b.n	80097c4 <_txe_queue_receive+0x68>
    }
    
    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a18      	ldr	r2, [pc, #96]	; (80097e0 <_txe_queue_receive+0x84>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d002      	beq.n	8009788 <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8009782:	2309      	movs	r3, #9
 8009784:	61fb      	str	r3, [r7, #28]
 8009786:	e01d      	b.n	80097c4 <_txe_queue_receive+0x68>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d102      	bne.n	8009794 <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800978e:	2303      	movs	r3, #3
 8009790:	61fb      	str	r3, [r7, #28]
 8009792:	e017      	b.n	80097c4 <_txe_queue_receive+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d014      	beq.n	80097c4 <_txe_queue_receive+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800979a:	f3ef 8305 	mrs	r3, IPSR
 800979e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80097a0:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80097a2:	4b10      	ldr	r3, [pc, #64]	; (80097e4 <_txe_queue_receive+0x88>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4313      	orrs	r3, r2
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d002      	beq.n	80097b2 <_txe_queue_receive+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80097ac:	2304      	movs	r3, #4
 80097ae:	61fb      	str	r3, [r7, #28]
 80097b0:	e008      	b.n	80097c4 <_txe_queue_receive+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 80097b2:	4b0d      	ldr	r3, [pc, #52]	; (80097e8 <_txe_queue_receive+0x8c>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 80097b8:	69bb      	ldr	r3, [r7, #24]
 80097ba:	4a0c      	ldr	r2, [pc, #48]	; (80097ec <_txe_queue_receive+0x90>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d101      	bne.n	80097c4 <_txe_queue_receive+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 80097c0:	2304      	movs	r3, #4
 80097c2:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d105      	bne.n	80097d6 <_txe_queue_receive+0x7a>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	68b9      	ldr	r1, [r7, #8]
 80097ce:	68f8      	ldr	r0, [r7, #12]
 80097d0:	f7fd fb9c 	bl	8006f0c <_tx_queue_receive>
 80097d4:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 80097d6:	69fb      	ldr	r3, [r7, #28]
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3720      	adds	r7, #32
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}
 80097e0:	51554555 	.word	0x51554555
 80097e4:	2000000c 	.word	0x2000000c
 80097e8:	20001648 	.word	0x20001648
 80097ec:	20001790 	.word	0x20001790

080097f0 <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b088      	sub	sp, #32
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	60f8      	str	r0, [r7, #12]
 80097f8:	60b9      	str	r1, [r7, #8]
 80097fa:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80097fc:	2300      	movs	r3, #0
 80097fe:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d102      	bne.n	800980c <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8009806:	2309      	movs	r3, #9
 8009808:	61fb      	str	r3, [r7, #28]
 800980a:	e025      	b.n	8009858 <_txe_queue_send+0x68>
    }
    
    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a18      	ldr	r2, [pc, #96]	; (8009874 <_txe_queue_send+0x84>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d002      	beq.n	800981c <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8009816:	2309      	movs	r3, #9
 8009818:	61fb      	str	r3, [r7, #28]
 800981a:	e01d      	b.n	8009858 <_txe_queue_send+0x68>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d102      	bne.n	8009828 <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8009822:	2303      	movs	r3, #3
 8009824:	61fb      	str	r3, [r7, #28]
 8009826:	e017      	b.n	8009858 <_txe_queue_send+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d014      	beq.n	8009858 <_txe_queue_send+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800982e:	f3ef 8305 	mrs	r3, IPSR
 8009832:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8009834:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8009836:	4b10      	ldr	r3, [pc, #64]	; (8009878 <_txe_queue_send+0x88>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4313      	orrs	r3, r2
 800983c:	2b00      	cmp	r3, #0
 800983e:	d002      	beq.n	8009846 <_txe_queue_send+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8009840:	2304      	movs	r3, #4
 8009842:	61fb      	str	r3, [r7, #28]
 8009844:	e008      	b.n	8009858 <_txe_queue_send+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {
    
                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8009846:	4b0d      	ldr	r3, [pc, #52]	; (800987c <_txe_queue_send+0x8c>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800984c:	69bb      	ldr	r3, [r7, #24]
 800984e:	4a0c      	ldr	r2, [pc, #48]	; (8009880 <_txe_queue_send+0x90>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d101      	bne.n	8009858 <_txe_queue_send+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8009854:	2304      	movs	r3, #4
 8009856:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8009858:	69fb      	ldr	r3, [r7, #28]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d105      	bne.n	800986a <_txe_queue_send+0x7a>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	68b9      	ldr	r1, [r7, #8]
 8009862:	68f8      	ldr	r0, [r7, #12]
 8009864:	f7fd fda0 	bl	80073a8 <_tx_queue_send>
 8009868:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800986a:	69fb      	ldr	r3, [r7, #28]
}
 800986c:	4618      	mov	r0, r3
 800986e:	3720      	adds	r7, #32
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	51554555 	.word	0x51554555
 8009878:	2000000c 	.word	0x2000000c
 800987c:	20001648 	.word	0x20001648
 8009880:	20001790 	.word	0x20001790

08009884 <_txe_semaphore_ceiling_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_ceiling_put(TX_SEMAPHORE *semaphore_ptr, ULONG ceiling)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d102      	bne.n	800989a <_txe_semaphore_ceiling_put+0x16>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8009894:	230c      	movs	r3, #12
 8009896:	60fb      	str	r3, [r7, #12]
 8009898:	e012      	b.n	80098c0 <_txe_semaphore_ceiling_put+0x3c>
    }
    
    /* Now check for a valid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4a0b      	ldr	r2, [pc, #44]	; (80098cc <_txe_semaphore_ceiling_put+0x48>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d002      	beq.n	80098aa <_txe_semaphore_ceiling_put+0x26>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80098a4:	230c      	movs	r3, #12
 80098a6:	60fb      	str	r3, [r7, #12]
 80098a8:	e00a      	b.n	80098c0 <_txe_semaphore_ceiling_put+0x3c>
    }

    /* Determine if the ceiling is valid - must be greater than 1.  */
    else if (ceiling == ((ULONG) 0))
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d102      	bne.n	80098b6 <_txe_semaphore_ceiling_put+0x32>
    {

        /* Invalid ceiling, return error.  */
        status =  TX_INVALID_CEILING;
 80098b0:	2322      	movs	r3, #34	; 0x22
 80098b2:	60fb      	str	r3, [r7, #12]
 80098b4:	e004      	b.n	80098c0 <_txe_semaphore_ceiling_put+0x3c>
    }
    else
    {

        /* Call actual semaphore ceiling put function.  */
        status =  _tx_semaphore_ceiling_put(semaphore_ptr, ceiling);
 80098b6:	6839      	ldr	r1, [r7, #0]
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f7fd ff27 	bl	800770c <_tx_semaphore_ceiling_put>
 80098be:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 80098c0:	68fb      	ldr	r3, [r7, #12]
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3710      	adds	r7, #16
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}
 80098ca:	bf00      	nop
 80098cc:	53454d41 	.word	0x53454d41

080098d0 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b092      	sub	sp, #72	; 0x48
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	60f8      	str	r0, [r7, #12]
 80098d8:	60b9      	str	r1, [r7, #8]
 80098da:	607a      	str	r2, [r7, #4]
 80098dc:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80098de:	2300      	movs	r3, #0
 80098e0:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d102      	bne.n	80098ee <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80098e8:	230c      	movs	r3, #12
 80098ea:	647b      	str	r3, [r7, #68]	; 0x44
 80098ec:	e054      	b.n	8009998 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	2b1c      	cmp	r3, #28
 80098f2:	d002      	beq.n	80098fa <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80098f4:	230c      	movs	r3, #12
 80098f6:	647b      	str	r3, [r7, #68]	; 0x44
 80098f8:	e04e      	b.n	8009998 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80098fa:	f3ef 8310 	mrs	r3, PRIMASK
 80098fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8009900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8009902:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8009904:	b672      	cpsid	i
    return(int_posture);
 8009906:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8009908:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800990a:	4b36      	ldr	r3, [pc, #216]	; (80099e4 <_txe_semaphore_create+0x114>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	3301      	adds	r3, #1
 8009910:	4a34      	ldr	r2, [pc, #208]	; (80099e4 <_txe_semaphore_create+0x114>)
 8009912:	6013      	str	r3, [r2, #0]
 8009914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009916:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800991a:	f383 8810 	msr	PRIMASK, r3
}
 800991e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 8009920:	4b31      	ldr	r3, [pc, #196]	; (80099e8 <_txe_semaphore_create+0x118>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8009926:	2300      	movs	r3, #0
 8009928:	643b      	str	r3, [r7, #64]	; 0x40
 800992a:	e009      	b.n	8009940 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800992c:	68fa      	ldr	r2, [r7, #12]
 800992e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009930:	429a      	cmp	r2, r3
 8009932:	d00b      	beq.n	800994c <_txe_semaphore_create+0x7c>
            }
            else
            {
            
                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 8009934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009936:	695b      	ldr	r3, [r3, #20]
 8009938:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800993a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800993c:	3301      	adds	r3, #1
 800993e:	643b      	str	r3, [r7, #64]	; 0x40
 8009940:	4b2a      	ldr	r3, [pc, #168]	; (80099ec <_txe_semaphore_create+0x11c>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009946:	429a      	cmp	r2, r3
 8009948:	d3f0      	bcc.n	800992c <_txe_semaphore_create+0x5c>
 800994a:	e000      	b.n	800994e <_txe_semaphore_create+0x7e>
                break;
 800994c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800994e:	f3ef 8310 	mrs	r3, PRIMASK
 8009952:	623b      	str	r3, [r7, #32]
    return(posture);
 8009954:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8009956:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009958:	b672      	cpsid	i
    return(int_posture);
 800995a:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800995c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800995e:	4b21      	ldr	r3, [pc, #132]	; (80099e4 <_txe_semaphore_create+0x114>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	3b01      	subs	r3, #1
 8009964:	4a1f      	ldr	r2, [pc, #124]	; (80099e4 <_txe_semaphore_create+0x114>)
 8009966:	6013      	str	r3, [r2, #0]
 8009968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800996a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800996c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996e:	f383 8810 	msr	PRIMASK, r3
}
 8009972:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8009974:	f7fe fd3c 	bl	80083f0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 8009978:	68fa      	ldr	r2, [r7, #12]
 800997a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800997c:	429a      	cmp	r2, r3
 800997e:	d102      	bne.n	8009986 <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 8009980:	230c      	movs	r3, #12
 8009982:	647b      	str	r3, [r7, #68]	; 0x44
 8009984:	e008      	b.n	8009998 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {
        
            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8009986:	4b1a      	ldr	r3, [pc, #104]	; (80099f0 <_txe_semaphore_create+0x120>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800998c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800998e:	4a19      	ldr	r2, [pc, #100]	; (80099f4 <_txe_semaphore_create+0x124>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d101      	bne.n	8009998 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8009994:	2313      	movs	r3, #19
 8009996:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8009998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800999a:	2b00      	cmp	r3, #0
 800999c:	d114      	bne.n	80099c8 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800999e:	f3ef 8305 	mrs	r3, IPSR
 80099a2:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80099a4:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80099a6:	4b14      	ldr	r3, [pc, #80]	; (80099f8 <_txe_semaphore_create+0x128>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4313      	orrs	r3, r2
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d00b      	beq.n	80099c8 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80099b0:	f3ef 8305 	mrs	r3, IPSR
 80099b4:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80099b6:	697a      	ldr	r2, [r7, #20]
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80099b8:	4b0f      	ldr	r3, [pc, #60]	; (80099f8 <_txe_semaphore_create+0x128>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4313      	orrs	r3, r2
 80099be:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80099c2:	d201      	bcs.n	80099c8 <_txe_semaphore_create+0xf8>
            {
        
                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80099c4:	2313      	movs	r3, #19
 80099c6:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80099c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d105      	bne.n	80099da <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	68b9      	ldr	r1, [r7, #8]
 80099d2:	68f8      	ldr	r0, [r7, #12]
 80099d4:	f7fe f808 	bl	80079e8 <_tx_semaphore_create>
 80099d8:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 80099da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3748      	adds	r7, #72	; 0x48
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}
 80099e4:	200016e0 	.word	0x200016e0
 80099e8:	20001610 	.word	0x20001610
 80099ec:	20001614 	.word	0x20001614
 80099f0:	20001648 	.word	0x20001648
 80099f4:	20001790 	.word	0x20001790
 80099f8:	2000000c 	.word	0x2000000c

080099fc <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b086      	sub	sp, #24
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8009a06:	2300      	movs	r3, #0
 8009a08:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d102      	bne.n	8009a16 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8009a10:	230c      	movs	r3, #12
 8009a12:	617b      	str	r3, [r7, #20]
 8009a14:	e01f      	b.n	8009a56 <_txe_semaphore_get+0x5a>
    }
    
    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a15      	ldr	r2, [pc, #84]	; (8009a70 <_txe_semaphore_get+0x74>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d002      	beq.n	8009a26 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8009a20:	230c      	movs	r3, #12
 8009a22:	617b      	str	r3, [r7, #20]
 8009a24:	e017      	b.n	8009a56 <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d014      	beq.n	8009a56 <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009a2c:	f3ef 8305 	mrs	r3, IPSR
 8009a30:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8009a32:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8009a34:	4b0f      	ldr	r3, [pc, #60]	; (8009a74 <_txe_semaphore_get+0x78>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d002      	beq.n	8009a44 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8009a3e:	2304      	movs	r3, #4
 8009a40:	617b      	str	r3, [r7, #20]
 8009a42:	e008      	b.n	8009a56 <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {
            
                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8009a44:	4b0c      	ldr	r3, [pc, #48]	; (8009a78 <_txe_semaphore_get+0x7c>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	4a0b      	ldr	r2, [pc, #44]	; (8009a7c <_txe_semaphore_get+0x80>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d101      	bne.n	8009a56 <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8009a52:	2304      	movs	r3, #4
 8009a54:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d104      	bne.n	8009a66 <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 8009a5c:	6839      	ldr	r1, [r7, #0]
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f7fe f8a2 	bl	8007ba8 <_tx_semaphore_get>
 8009a64:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8009a66:	697b      	ldr	r3, [r7, #20]
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3718      	adds	r7, #24
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}
 8009a70:	53454d41 	.word	0x53454d41
 8009a74:	2000000c 	.word	0x2000000c
 8009a78:	20001648 	.word	0x20001648
 8009a7c:	20001790 	.word	0x20001790

08009a80 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, 
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size, 
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b09a      	sub	sp, #104	; 0x68
 8009a84:	af06      	add	r7, sp, #24
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	60b9      	str	r1, [r7, #8]
 8009a8a:	607a      	str	r2, [r7, #4]
 8009a8c:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d102      	bne.n	8009a9e <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8009a98:	230e      	movs	r3, #14
 8009a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a9c:	e0bb      	b.n	8009c16 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8009a9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009aa0:	2bb0      	cmp	r3, #176	; 0xb0
 8009aa2:	d002      	beq.n	8009aaa <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8009aa4:	230e      	movs	r3, #14
 8009aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009aa8:	e0b5      	b.n	8009c16 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009aaa:	f3ef 8310 	mrs	r3, PRIMASK
 8009aae:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8009ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8009ab2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8009ab4:	b672      	cpsid	i
    return(int_posture);
 8009ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8009ab8:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8009aba:	4b64      	ldr	r3, [pc, #400]	; (8009c4c <_txe_thread_create+0x1cc>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	3301      	adds	r3, #1
 8009ac0:	4a62      	ldr	r2, [pc, #392]	; (8009c4c <_txe_thread_create+0x1cc>)
 8009ac2:	6013      	str	r3, [r2, #0]
 8009ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aca:	f383 8810 	msr	PRIMASK, r3
}
 8009ace:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 8009ad4:	4b5e      	ldr	r3, [pc, #376]	; (8009c50 <_txe_thread_create+0x1d0>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8009ada:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009adc:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8009ade:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ae0:	3b01      	subs	r3, #1
 8009ae2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ae4:	4413      	add	r3, r2
 8009ae6:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8009ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aea:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8009aec:	2300      	movs	r3, #0
 8009aee:	647b      	str	r3, [r7, #68]	; 0x44
 8009af0:	e02b      	b.n	8009b4a <_txe_thread_create+0xca>
        {
        
            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8009af2:	68fa      	ldr	r2, [r7, #12]
 8009af4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d101      	bne.n	8009afe <_txe_thread_create+0x7e>
            {
        
                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8009afa:	2301      	movs	r3, #1
 8009afc:	64bb      	str	r3, [r7, #72]	; 0x48
            }
            
            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8009afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d028      	beq.n	8009b56 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8009b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d308      	bcc.n	8009b20 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8009b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b10:	691b      	ldr	r3, [r3, #16]
 8009b12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d203      	bcs.n	8009b20 <_txe_thread_create+0xa0>
                {
        
                    /* This stack overlaps with an existing thread, clear the stack pointer to 
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	65bb      	str	r3, [r7, #88]	; 0x58
                    
                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8009b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b22:	68db      	ldr	r3, [r3, #12]
 8009b24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d308      	bcc.n	8009b3c <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8009b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b2c:	691b      	ldr	r3, [r3, #16]
 8009b2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d203      	bcs.n	8009b3c <_txe_thread_create+0xbc>
                {
        
                    /* This stack overlaps with an existing thread, clear the stack pointer to 
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8009b34:	2300      	movs	r3, #0
 8009b36:	65bb      	str	r3, [r7, #88]	; 0x58
                    
                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8009b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b42:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8009b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b46:	3301      	adds	r3, #1
 8009b48:	647b      	str	r3, [r7, #68]	; 0x44
 8009b4a:	4b42      	ldr	r3, [pc, #264]	; (8009c54 <_txe_thread_create+0x1d4>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d3ce      	bcc.n	8009af2 <_txe_thread_create+0x72>
 8009b54:	e000      	b.n	8009b58 <_txe_thread_create+0xd8>
                break;
 8009b56:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009b58:	f3ef 8310 	mrs	r3, PRIMASK
 8009b5c:	61fb      	str	r3, [r7, #28]
    return(posture);
 8009b5e:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8009b60:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009b62:	b672      	cpsid	i
    return(int_posture);
 8009b64:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8009b66:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8009b68:	4b38      	ldr	r3, [pc, #224]	; (8009c4c <_txe_thread_create+0x1cc>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	3b01      	subs	r3, #1
 8009b6e:	4a37      	ldr	r2, [pc, #220]	; (8009c4c <_txe_thread_create+0x1cc>)
 8009b70:	6013      	str	r3, [r2, #0]
 8009b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b74:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009b76:	6a3b      	ldr	r3, [r7, #32]
 8009b78:	f383 8810 	msr	PRIMASK, r3
}
 8009b7c:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8009b7e:	f7fe fc37 	bl	80083f0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 8009b82:	68fa      	ldr	r2, [r7, #12]
 8009b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d102      	bne.n	8009b90 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8009b8a:	230e      	movs	r3, #14
 8009b8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b8e:	e042      	b.n	8009c16 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8009b90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d102      	bne.n	8009b9c <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8009b96:	2303      	movs	r3, #3
 8009b98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b9a:	e03c      	b.n	8009c16 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d102      	bne.n	8009ba8 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8009ba2:	2303      	movs	r3, #3
 8009ba4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ba6:	e036      	b.n	8009c16 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8009ba8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009baa:	2bc7      	cmp	r3, #199	; 0xc7
 8009bac:	d802      	bhi.n	8009bb4 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8009bae:	2305      	movs	r3, #5
 8009bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009bb2:	e030      	b.n	8009c16 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8009bb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009bb6:	2b1f      	cmp	r3, #31
 8009bb8:	d902      	bls.n	8009bc0 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8009bba:	230f      	movs	r3, #15
 8009bbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009bbe:	e02a      	b.n	8009c16 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8009bc0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009bc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d902      	bls.n	8009bce <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8009bc8:	2318      	movs	r3, #24
 8009bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009bcc:	e023      	b.n	8009c16 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8009bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	d902      	bls.n	8009bda <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8009bd4:	2310      	movs	r3, #16
 8009bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009bd8:	e01d      	b.n	8009c16 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8009bda:	4b1f      	ldr	r3, [pc, #124]	; (8009c58 <_txe_thread_create+0x1d8>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8009be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be2:	4a1e      	ldr	r2, [pc, #120]	; (8009c5c <_txe_thread_create+0x1dc>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d101      	bne.n	8009bec <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8009be8:	2313      	movs	r3, #19
 8009bea:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009bec:	f3ef 8305 	mrs	r3, IPSR
 8009bf0:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8009bf2:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8009bf4:	4b1a      	ldr	r3, [pc, #104]	; (8009c60 <_txe_thread_create+0x1e0>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d00b      	beq.n	8009c16 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009bfe:	f3ef 8305 	mrs	r3, IPSR
 8009c02:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8009c04:	693a      	ldr	r2, [r7, #16]
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8009c06:	4b16      	ldr	r3, [pc, #88]	; (8009c60 <_txe_thread_create+0x1e0>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8009c10:	d201      	bcs.n	8009c16 <_txe_thread_create+0x196>
                {
            
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8009c12:	2313      	movs	r3, #19
 8009c14:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8009c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d112      	bne.n	8009c42 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8009c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c1e:	9305      	str	r3, [sp, #20]
 8009c20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c22:	9304      	str	r3, [sp, #16]
 8009c24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c26:	9303      	str	r3, [sp, #12]
 8009c28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c2a:	9302      	str	r3, [sp, #8]
 8009c2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c2e:	9301      	str	r3, [sp, #4]
 8009c30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c32:	9300      	str	r3, [sp, #0]
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	68b9      	ldr	r1, [r7, #8]
 8009c3a:	68f8      	ldr	r0, [r7, #12]
 8009c3c:	f7fe f8ca 	bl	8007dd4 <_tx_thread_create>
 8009c40:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8009c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3750      	adds	r7, #80	; 0x50
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}
 8009c4c:	200016e0 	.word	0x200016e0
 8009c50:	20001650 	.word	0x20001650
 8009c54:	20001654 	.word	0x20001654
 8009c58:	20001648 	.word	0x20001648
 8009c5c:	20001790 	.word	0x20001790
 8009c60:	2000000c 	.word	0x2000000c

08009c64 <tx_low_power_enter>:
/*                                            compiler warning,           */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_enter(VOID)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b086      	sub	sp, #24
 8009c68:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009c6a:	f3ef 8310 	mrs	r3, PRIMASK
 8009c6e:	60fb      	str	r3, [r7, #12]
    return(posture);
 8009c70:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8009c72:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009c74:	b672      	cpsid	i
    return(int_posture);
 8009c76:	68bb      	ldr	r3, [r7, #8]
ULONG   tx_low_power_next_expiration;   /* The next timer experation (units of ThreadX timer ticks). */
ULONG   timers_active;
#endif

    /* Disable interrupts while we prepare for low power mode.  */
    TX_DISABLE
 8009c78:	613b      	str	r3, [r7, #16]
    /*  At this point, we want to enter low power mode, since nothing
        meaningful is going on in the system. However, in order to keep
        the ThreadX timer services accurate, we must first determine the
        next ThreadX timer expiration in terms of ticks. This is
        accomplished via the tx_timer_get_next API.  */
    timers_active =  tx_timer_get_next(&tx_low_power_next_expiration);
 8009c7a:	463b      	mov	r3, r7
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f000 f83d 	bl	8009cfc <tx_timer_get_next>
 8009c82:	6178      	str	r0, [r7, #20]
            a low power clock needs to be set up.
    */

#ifndef TX_LOW_POWER_TICKLESS
    /* We still want to keep track of time in low power mode. */
    if (timers_active == TX_FALSE)
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d104      	bne.n	8009c94 <tx_low_power_enter+0x30>
    {
        /* Set the next expiration to 0xFFFFFFF, an indication that the timer sleeps for
           maximum amount of time the HW supports.*/
        tx_low_power_next_expiration = 0xFFFFFFFF;
 8009c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8009c8e:	603b      	str	r3, [r7, #0]
        timers_active = TX_TRUE;
 8009c90:	2301      	movs	r3, #1
 8009c92:	617b      	str	r3, [r7, #20]
    }
#endif /* TX_LOW_POWER_TICKLESS */

    if (timers_active == TX_TRUE)
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d103      	bne.n	8009ca2 <tx_low_power_enter+0x3e>
    {
        /* A ThreadX timer is active or we simply want to keep track of time. */
        TX_LOW_POWER_TIMER_SETUP(tx_low_power_next_expiration);
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f7f6 fe2b 	bl	80008f8 <App_ThreadX_LowPower_Timer_Setup>


    /* Set the flag indicating that low power has been entered. This 
       flag is checked in tx_low_power_exit to determine if the logic
       used to adjust the ThreadX time is required.  */
    tx_low_power_entered =  TX_TRUE;
 8009ca2:	4b07      	ldr	r3, [pc, #28]	; (8009cc0 <tx_low_power_enter+0x5c>)
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	601a      	str	r2, [r3, #0]
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f383 8810 	msr	PRIMASK, r3
}
 8009cb2:	bf00      	nop

    /* User code to enter low power mode. This allows the application to power down
       peripherals and put the processor in sleep mode.
    */
#ifdef TX_LOW_POWER_USER_ENTER
    TX_LOW_POWER_USER_ENTER;
 8009cb4:	f7f6 fe44 	bl	8000940 <App_ThreadX_LowPower_Enter>
#endif

    /* If the low power code returns, this routine returns to the tx_thread_schedule loop.  */
}
 8009cb8:	bf00      	nop
 8009cba:	3718      	adds	r7, #24
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}
 8009cc0:	20001c7c 	.word	0x20001c7c

08009cc4 <tx_low_power_exit>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_exit(VOID)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
/* How many ticks to adjust ThreadX timers after exiting low power mode. */
ULONG   tx_low_power_adjust_ticks;


    /* Determine if the interrupt occurred in low power mode.  */
    if (tx_low_power_entered)
 8009cca:	4b0b      	ldr	r3, [pc, #44]	; (8009cf8 <tx_low_power_exit+0x34>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d00d      	beq.n	8009cee <tx_low_power_exit+0x2a>
    {
        /* Yes, low power mode was interrupted.   */

        /* Clear the low power entered flag.  */
        tx_low_power_entered =  TX_FALSE;
 8009cd2:	4b09      	ldr	r3, [pc, #36]	; (8009cf8 <tx_low_power_exit+0x34>)
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	601a      	str	r2, [r3, #0]

        /* User code to exit low power mode and reprogram the
           timer to the desired interrupt frequency.  */
#ifdef TX_LOW_POWER_USER_EXIT
        TX_LOW_POWER_USER_EXIT;
 8009cd8:	f7f6 fe3f 	bl	800095a <App_ThreadX_LowPower_Exit>
#endif

#ifdef TX_LOW_POWER_USER_TIMER_ADJUST
        /* Call the user's low-power timer code to obtain the amount of time (in ticks)
           the system has been in low power mode. */
        tx_low_power_adjust_ticks = TX_LOW_POWER_USER_TIMER_ADJUST;
 8009cdc:	f7f6 fe4a 	bl	8000974 <App_ThreadX_LowPower_Timer_Adjust>
 8009ce0:	6078      	str	r0, [r7, #4]
#else
        tx_low_power_adjust_ticks = (ULONG) 0;
#endif

        /* Determine if the ThreadX timer(s) needs incrementing.  */
        if (tx_low_power_adjust_ticks)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d002      	beq.n	8009cee <tx_low_power_exit+0x2a>
        {
            /* Yes, the ThreadX timer(s) must be incremented.  */
            tx_time_increment(tx_low_power_adjust_ticks);
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 f86f 	bl	8009dcc <tx_time_increment>
        }
    }
}
 8009cee:	bf00      	nop
 8009cf0:	3708      	adds	r7, #8
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	20001c7c 	.word	0x20001c7c

08009cfc <tx_timer_get_next>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
ULONG  tx_timer_get_next(ULONG *next_timer_tick_ptr)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b08d      	sub	sp, #52	; 0x34
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]

TX_TIMER_INTERNAL           **timer_list_head;
TX_TIMER_INTERNAL           *next_timer;
UINT                        i;
ULONG                       calculated_time;
ULONG                       expiration_time = (ULONG) 0xFFFFFFFF;
 8009d04:	f04f 33ff 	mov.w	r3, #4294967295
 8009d08:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009d0a:	f3ef 8310 	mrs	r3, PRIMASK
 8009d0e:	617b      	str	r3, [r7, #20]
    return(posture);
 8009d10:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8009d12:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009d14:	b672      	cpsid	i
    return(int_posture);
 8009d16:	693b      	ldr	r3, [r7, #16]


    /* Disable interrupts.  */
    TX_DISABLE
 8009d18:	61bb      	str	r3, [r7, #24]

    /* Look at the next timer entry.  */
    timer_list_head =  _tx_timer_current_ptr;
 8009d1a:	4b29      	ldr	r3, [pc, #164]	; (8009dc0 <tx_timer_get_next+0xc4>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Loop through the timer list, looking for the first non-NULL
       value to signal an active timer.  */
    for (i = (UINT)0; i < TX_TIMER_ENTRIES; i++)
 8009d20:	2300      	movs	r3, #0
 8009d22:	627b      	str	r3, [r7, #36]	; 0x24
 8009d24:	e02f      	b.n	8009d86 <tx_timer_get_next+0x8a>
    {
        /* Now determine if there is an active timer in this slot.  */
        if (*timer_list_head)
 8009d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d01d      	beq.n	8009d6a <tx_timer_get_next+0x6e>
        {
            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 8009d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8009d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	2b20      	cmp	r3, #32
 8009d3a:	d906      	bls.n	8009d4a <tx_timer_get_next+0x4e>
                {
                    /* Calculate the expiration time.  */
                    calculated_time =  next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i);
 8009d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d3e:	681a      	ldr	r2, [r3, #0]
 8009d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d42:	4413      	add	r3, r2
 8009d44:	3b20      	subs	r3, #32
 8009d46:	623b      	str	r3, [r7, #32]
 8009d48:	e001      	b.n	8009d4e <tx_timer_get_next+0x52>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    calculated_time =  i;
 8009d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4c:	623b      	str	r3, [r7, #32]
                }

                /* Determine if a new minimum expiration time is present.  */
                if (expiration_time > calculated_time)
 8009d4e:	69fa      	ldr	r2, [r7, #28]
 8009d50:	6a3b      	ldr	r3, [r7, #32]
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d901      	bls.n	8009d5a <tx_timer_get_next+0x5e>
                {
                    /* Yes, a new minimum expiration time is present - remember it!  */
                    expiration_time =  calculated_time;
 8009d56:	6a3b      	ldr	r3, [r7, #32]
 8009d58:	61fb      	str	r3, [r7, #28]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 8009d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d5c:	691b      	ldr	r3, [r3, #16]
 8009d5e:	62bb      	str	r3, [r7, #40]	; 0x28

            } while (next_timer != *timer_list_head);
 8009d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d1e4      	bne.n	8009d34 <tx_timer_get_next+0x38>
        }

        /* This timer entry is NULL, so just move to the next one.  */
        timer_list_head++;
 8009d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d6c:	3304      	adds	r3, #4
 8009d6e:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check for timer list wrap condition.  */
        if (timer_list_head >= _tx_timer_list_end)
 8009d70:	4b14      	ldr	r3, [pc, #80]	; (8009dc4 <tx_timer_get_next+0xc8>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d76:	429a      	cmp	r2, r3
 8009d78:	d302      	bcc.n	8009d80 <tx_timer_get_next+0x84>
        {
            /* Wrap to the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 8009d7a:	4b13      	ldr	r3, [pc, #76]	; (8009dc8 <tx_timer_get_next+0xcc>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (i = (UINT)0; i < TX_TIMER_ENTRIES; i++)
 8009d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d82:	3301      	adds	r3, #1
 8009d84:	627b      	str	r3, [r7, #36]	; 0x24
 8009d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d88:	2b1f      	cmp	r3, #31
 8009d8a:	d9cc      	bls.n	8009d26 <tx_timer_get_next+0x2a>
 8009d8c:	69bb      	ldr	r3, [r7, #24]
 8009d8e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f383 8810 	msr	PRIMASK, r3
}
 8009d96:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if an active timer was found.  */
    if (expiration_time != (ULONG) 0xFFFFFFFF)
 8009d98:	69fb      	ldr	r3, [r7, #28]
 8009d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d9e:	d004      	beq.n	8009daa <tx_timer_get_next+0xae>
    {
        /* Yes, an active timer was found.  */
        *next_timer_tick_ptr =  expiration_time;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	69fa      	ldr	r2, [r7, #28]
 8009da4:	601a      	str	r2, [r3, #0]
        return(TX_TRUE);
 8009da6:	2301      	movs	r3, #1
 8009da8:	e003      	b.n	8009db2 <tx_timer_get_next+0xb6>
    }
    else
    {
        /* No active timer was found.  */
        *next_timer_tick_ptr = 0;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2200      	movs	r2, #0
 8009dae:	601a      	str	r2, [r3, #0]
        return(TX_FALSE);
 8009db0:	2300      	movs	r3, #0
    }
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3734      	adds	r7, #52	; 0x34
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr
 8009dbe:	bf00      	nop
 8009dc0:	2000177c 	.word	0x2000177c
 8009dc4:	20001778 	.word	0x20001778
 8009dc8:	20001774 	.word	0x20001774

08009dcc <tx_time_increment>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_time_increment(ULONG time_increment)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b08a      	sub	sp, #40	; 0x28
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *temp_list_head;


    /* Determine if there is any time increment.  */
    if (time_increment == 0)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	f000 809b 	beq.w	8009f12 <tx_time_increment+0x146>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009ddc:	f3ef 8310 	mrs	r3, PRIMASK
 8009de0:	613b      	str	r3, [r7, #16]
    return(posture);
 8009de2:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8009de4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009de6:	b672      	cpsid	i
    return(int_posture);
 8009de8:	68fb      	ldr	r3, [r7, #12]
        /* Nothing to do, just return.  */
        return;
    }

    /* Disable interrupts.  */
    TX_DISABLE
 8009dea:	617b      	str	r3, [r7, #20]

    /* Adjust the system clock.  */
    _tx_timer_system_clock =  _tx_timer_system_clock + time_increment;
 8009dec:	4b4b      	ldr	r3, [pc, #300]	; (8009f1c <tx_time_increment+0x150>)
 8009dee:	681a      	ldr	r2, [r3, #0]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4413      	add	r3, r2
 8009df4:	4a49      	ldr	r2, [pc, #292]	; (8009f1c <tx_time_increment+0x150>)
 8009df6:	6013      	str	r3, [r2, #0]

    /* Adjust the time slice variable.  */
    if (_tx_timer_time_slice)
 8009df8:	4b49      	ldr	r3, [pc, #292]	; (8009f20 <tx_time_increment+0x154>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d00e      	beq.n	8009e1e <tx_time_increment+0x52>
    {
        /* Decrement the time-slice variable.  */
        if (_tx_timer_time_slice > time_increment)
 8009e00:	4b47      	ldr	r3, [pc, #284]	; (8009f20 <tx_time_increment+0x154>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	687a      	ldr	r2, [r7, #4]
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d206      	bcs.n	8009e18 <tx_time_increment+0x4c>
        {
            _tx_timer_time_slice =  _tx_timer_time_slice - time_increment;
 8009e0a:	4b45      	ldr	r3, [pc, #276]	; (8009f20 <tx_time_increment+0x154>)
 8009e0c:	681a      	ldr	r2, [r3, #0]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	1ad3      	subs	r3, r2, r3
 8009e12:	4a43      	ldr	r2, [pc, #268]	; (8009f20 <tx_time_increment+0x154>)
 8009e14:	6013      	str	r3, [r2, #0]
 8009e16:	e002      	b.n	8009e1e <tx_time_increment+0x52>
        }
        else
        {
            _tx_timer_time_slice =  1;
 8009e18:	4b41      	ldr	r3, [pc, #260]	; (8009f20 <tx_time_increment+0x154>)
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	601a      	str	r2, [r3, #0]
        }
    }

    /* Calculate the proper place to position the timer.  */
    timer_list_head =  _tx_timer_current_ptr;
 8009e1e:	4b41      	ldr	r3, [pc, #260]	; (8009f24 <tx_time_increment+0x158>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	623b      	str	r3, [r7, #32]

    /* Setup the temporary list pointer.  */
    temp_list_head =  TX_NULL;
 8009e24:	2300      	movs	r3, #0
 8009e26:	61bb      	str	r3, [r7, #24]

    /* Loop to pull all timers off the timer structure and put on the temporary list head.  */
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 8009e28:	2300      	movs	r3, #0
 8009e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8009e2c:	e046      	b.n	8009ebc <tx_time_increment+0xf0>
    {
        /* Determine if there is a timer list in this entry.  */
        if (*timer_list_head)
 8009e2e:	6a3b      	ldr	r3, [r7, #32]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d034      	beq.n	8009ea0 <tx_time_increment+0xd4>
        {
            /* Walk the list and update all the relative times to actual times.  */

            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 8009e36:	6a3b      	ldr	r3, [r7, #32]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	61fb      	str	r3, [r7, #28]

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8009e3c:	69fb      	ldr	r3, [r7, #28]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2b20      	cmp	r3, #32
 8009e42:	d908      	bls.n	8009e56 <tx_time_increment+0x8a>
                {
                    /* Calculate the actual expiration time.  */
                    next_timer -> tx_timer_internal_remaining_ticks =
                                    next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i) + 1;
 8009e44:	69fb      	ldr	r3, [r7, #28]
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4a:	4413      	add	r3, r2
 8009e4c:	f1a3 021f 	sub.w	r2, r3, #31
                    next_timer -> tx_timer_internal_remaining_ticks =
 8009e50:	69fb      	ldr	r3, [r7, #28]
 8009e52:	601a      	str	r2, [r3, #0]
 8009e54:	e003      	b.n	8009e5e <tx_time_increment+0x92>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    next_timer -> tx_timer_internal_remaining_ticks =  i + 1;
 8009e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e58:	1c5a      	adds	r2, r3, #1
 8009e5a:	69fb      	ldr	r3, [r7, #28]
 8009e5c:	601a      	str	r2, [r3, #0]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 8009e5e:	69fb      	ldr	r3, [r7, #28]
 8009e60:	691b      	ldr	r3, [r3, #16]
 8009e62:	61fb      	str	r3, [r7, #28]

            } while (next_timer != *timer_list_head);
 8009e64:	6a3b      	ldr	r3, [r7, #32]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	69fa      	ldr	r2, [r7, #28]
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d1e6      	bne.n	8009e3c <tx_time_increment+0x70>

            /* NULL terminate the current timer list.  */
            ((*timer_list_head) -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  TX_NULL;
 8009e6e:	6a3b      	ldr	r3, [r7, #32]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	695b      	ldr	r3, [r3, #20]
 8009e74:	2200      	movs	r2, #0
 8009e76:	611a      	str	r2, [r3, #16]

            /* Yes, determine if the temporary list is NULL.  */
            if (temp_list_head == TX_NULL)
 8009e78:	69bb      	ldr	r3, [r7, #24]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d103      	bne.n	8009e86 <tx_time_increment+0xba>
            {
                /* First item on the list.  Move the entire linked list.  */
                temp_list_head =  *timer_list_head;
 8009e7e:	6a3b      	ldr	r3, [r7, #32]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	61bb      	str	r3, [r7, #24]
 8009e84:	e009      	b.n	8009e9a <tx_time_increment+0xce>
            }
            else
            {
                /* No, the temp list already has timers on it. Link the next timer list to the end.  */
                (temp_list_head -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  *timer_list_head;
 8009e86:	69bb      	ldr	r3, [r7, #24]
 8009e88:	695b      	ldr	r3, [r3, #20]
 8009e8a:	6a3a      	ldr	r2, [r7, #32]
 8009e8c:	6812      	ldr	r2, [r2, #0]
 8009e8e:	611a      	str	r2, [r3, #16]

                /* Now update the previous to the new list's previous timer pointer.  */
                temp_list_head -> tx_timer_internal_active_previous =  (*timer_list_head) -> tx_timer_internal_active_previous;
 8009e90:	6a3b      	ldr	r3, [r7, #32]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	695a      	ldr	r2, [r3, #20]
 8009e96:	69bb      	ldr	r3, [r7, #24]
 8009e98:	615a      	str	r2, [r3, #20]
            }

            /* Now clear the current timer head pointer.  */
            *timer_list_head =  TX_NULL;
 8009e9a:	6a3b      	ldr	r3, [r7, #32]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	601a      	str	r2, [r3, #0]
        }
        
        /* Move to next timer entry.  */
        timer_list_head++;
 8009ea0:	6a3b      	ldr	r3, [r7, #32]
 8009ea2:	3304      	adds	r3, #4
 8009ea4:	623b      	str	r3, [r7, #32]

        /* Determine if a wrap around condition has occurred.  */
        if (timer_list_head >= _tx_timer_list_end)
 8009ea6:	4b20      	ldr	r3, [pc, #128]	; (8009f28 <tx_time_increment+0x15c>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	6a3a      	ldr	r2, [r7, #32]
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d302      	bcc.n	8009eb6 <tx_time_increment+0xea>
        {
            /* Wrap from the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 8009eb0:	4b1e      	ldr	r3, [pc, #120]	; (8009f2c <tx_time_increment+0x160>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	623b      	str	r3, [r7, #32]
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 8009eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb8:	3301      	adds	r3, #1
 8009eba:	627b      	str	r3, [r7, #36]	; 0x24
 8009ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ebe:	2b1f      	cmp	r3, #31
 8009ec0:	d9b5      	bls.n	8009e2e <tx_time_increment+0x62>
        }
    }

    /* Set the current timer pointer to the beginning of the list.  */
    _tx_timer_current_ptr =  _tx_timer_list_start;
 8009ec2:	4b1a      	ldr	r3, [pc, #104]	; (8009f2c <tx_time_increment+0x160>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a17      	ldr	r2, [pc, #92]	; (8009f24 <tx_time_increment+0x158>)
 8009ec8:	6013      	str	r3, [r2, #0]

    /* Loop to update and reinsert all the timers in the list.  */
    while (temp_list_head)
 8009eca:	e019      	b.n	8009f00 <tx_time_increment+0x134>
    {
        /* Pickup the next timer to update and reinsert.  */
        next_timer =  temp_list_head;
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	61fb      	str	r3, [r7, #28]

        /* Move the temp list head pointer to the next pointer.  */
        temp_list_head =  next_timer -> tx_timer_internal_active_next;
 8009ed0:	69fb      	ldr	r3, [r7, #28]
 8009ed2:	691b      	ldr	r3, [r3, #16]
 8009ed4:	61bb      	str	r3, [r7, #24]

        /* Determine if the remaining time is greater than the time increment
           value - this is the normal case.  */
        if (next_timer -> tx_timer_internal_remaining_ticks > time_increment)
 8009ed6:	69fb      	ldr	r3, [r7, #28]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d206      	bcs.n	8009eee <tx_time_increment+0x122>
        {
            /* Decrement the elapsed time.  */
            next_timer -> tx_timer_internal_remaining_ticks =  next_timer -> tx_timer_internal_remaining_ticks - time_increment;
 8009ee0:	69fb      	ldr	r3, [r7, #28]
 8009ee2:	681a      	ldr	r2, [r3, #0]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	1ad2      	subs	r2, r2, r3
 8009ee8:	69fb      	ldr	r3, [r7, #28]
 8009eea:	601a      	str	r2, [r3, #0]
 8009eec:	e002      	b.n	8009ef4 <tx_time_increment+0x128>
        }
        else
        {
            /* Simply set the expiration value to expire on the next tick.  */
            next_timer -> tx_timer_internal_remaining_ticks =  1;
 8009eee:	69fb      	ldr	r3, [r7, #28]
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	601a      	str	r2, [r3, #0]
        }

        /* Now clear the timer list head pointer for the timer activate function to work properly.  */
        next_timer -> tx_timer_internal_list_head =  TX_NULL;
 8009ef4:	69fb      	ldr	r3, [r7, #28]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	619a      	str	r2, [r3, #24]

        /* Now re-insert the timer into the list.  */
        _tx_timer_system_activate(next_timer);
 8009efa:	69f8      	ldr	r0, [r7, #28]
 8009efc:	f7ff f816 	bl	8008f2c <_tx_timer_system_activate>
    while (temp_list_head)
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d1e2      	bne.n	8009ecc <tx_time_increment+0x100>
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	f383 8810 	msr	PRIMASK, r3
}
 8009f10:	e000      	b.n	8009f14 <tx_time_increment+0x148>
        return;
 8009f12:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8009f14:	3728      	adds	r7, #40	; 0x28
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	200016ec 	.word	0x200016ec
 8009f20:	20001c4c 	.word	0x20001c4c
 8009f24:	2000177c 	.word	0x2000177c
 8009f28:	20001778 	.word	0x20001778
 8009f2c:	20001774 	.word	0x20001774

08009f30 <fm_calendar_get>:
 * usa.
 * @param None
 * @retval None
 */
void fm_calendar_get()
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	af00      	add	r7, sp, #0
     *     __HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
     *     HAL_RTC_WaitForSynchro(&hrtc);
     *     __HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
     */

    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8009f34:	2200      	movs	r2, #0
 8009f36:	4905      	ldr	r1, [pc, #20]	; (8009f4c <fm_calendar_get+0x1c>)
 8009f38:	4805      	ldr	r0, [pc, #20]	; (8009f50 <fm_calendar_get+0x20>)
 8009f3a:	f7fa fd8d 	bl	8004a58 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8009f3e:	2200      	movs	r2, #0
 8009f40:	4904      	ldr	r1, [pc, #16]	; (8009f54 <fm_calendar_get+0x24>)
 8009f42:	4803      	ldr	r0, [pc, #12]	; (8009f50 <fm_calendar_get+0x20>)
 8009f44:	f7fa fe6b 	bl	8004c1e <HAL_RTC_GetDate>
}
 8009f48:	bf00      	nop
 8009f4a:	bd80      	pop	{r7, pc}
 8009f4c:	20001c80 	.word	0x20001c80
 8009f50:	20001464 	.word	0x20001464
 8009f54:	20001c94 	.word	0x20001c94

08009f58 <fm_calendar_get_hour>:
 * @brief Función que lee la hora desde el RTC y la devuelve como parámetro.
 * @param None
 * @retval Hora leida del calendario.
 */
int fm_calendar_get_hour()
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	af00      	add	r7, sp, #0
    fm_calendar_get();
 8009f5c:	f7ff ffe8 	bl	8009f30 <fm_calendar_get>
    return (sTime.Hours);
 8009f60:	4b01      	ldr	r3, [pc, #4]	; (8009f68 <fm_calendar_get_hour+0x10>)
 8009f62:	781b      	ldrb	r3, [r3, #0]
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	bd80      	pop	{r7, pc}
 8009f68:	20001c80 	.word	0x20001c80

08009f6c <fm_calendar_get_minute>:
 * parámetro.
 * @param None
 * @retval Minutos leidos del calendario.
 */
int fm_calendar_get_minute()
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	af00      	add	r7, sp, #0
    fm_calendar_get();
 8009f70:	f7ff ffde 	bl	8009f30 <fm_calendar_get>
    return (sTime.Minutes);
 8009f74:	4b01      	ldr	r3, [pc, #4]	; (8009f7c <fm_calendar_get_minute+0x10>)
 8009f76:	785b      	ldrb	r3, [r3, #1]
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	bd80      	pop	{r7, pc}
 8009f7c:	20001c80 	.word	0x20001c80

08009f80 <fm_calendar_get_second>:
 * parámetro.
 * @param None
 * @retval Segundos leidos del calendario.
 */
int fm_calendar_get_second()
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	af00      	add	r7, sp, #0
    fm_calendar_get();
 8009f84:	f7ff ffd4 	bl	8009f30 <fm_calendar_get>
    return (sTime.Seconds);
 8009f88:	4b01      	ldr	r3, [pc, #4]	; (8009f90 <fm_calendar_get_second+0x10>)
 8009f8a:	789b      	ldrb	r3, [r3, #2]
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	bd80      	pop	{r7, pc}
 8009f90:	20001c80 	.word	0x20001c80

08009f94 <fm_calendar_get_day>:
 * @brief Función que lee el día desde el RTC y lo devuelve como parámetro.
 * @param None
 * @retval Día leido del calendario.
 */
int fm_calendar_get_day()
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	af00      	add	r7, sp, #0
    fm_calendar_get();
 8009f98:	f7ff ffca 	bl	8009f30 <fm_calendar_get>
    return (sDate.Date);
 8009f9c:	4b01      	ldr	r3, [pc, #4]	; (8009fa4 <fm_calendar_get_day+0x10>)
 8009f9e:	789b      	ldrb	r3, [r3, #2]
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	bd80      	pop	{r7, pc}
 8009fa4:	20001c94 	.word	0x20001c94

08009fa8 <fm_calendar_get_month>:
 * @brief Función que lee el mes desde el RTC y lo devuelve como parámetro.
 * @param None
 * @retval Mes leida del calendario.
 */
int fm_calendar_get_month()
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	af00      	add	r7, sp, #0
    fm_calendar_get();
 8009fac:	f7ff ffc0 	bl	8009f30 <fm_calendar_get>
    return (sDate.Month);
 8009fb0:	4b01      	ldr	r3, [pc, #4]	; (8009fb8 <fm_calendar_get_month+0x10>)
 8009fb2:	785b      	ldrb	r3, [r3, #1]
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	bd80      	pop	{r7, pc}
 8009fb8:	20001c94 	.word	0x20001c94

08009fbc <fm_calendar_get_year>:
 * @brief Función que lee el año desde el RTC y lo devuelve como parámetro.
 * @param None
 * @retval Año leido del calendario.
 */
int fm_calendar_get_year()
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	af00      	add	r7, sp, #0
    fm_calendar_get();
 8009fc0:	f7ff ffb6 	bl	8009f30 <fm_calendar_get>
    return (sDate.Year);
 8009fc4:	4b01      	ldr	r3, [pc, #4]	; (8009fcc <fm_calendar_get_year+0x10>)
 8009fc6:	78db      	ldrb	r3, [r3, #3]
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	bd80      	pop	{r7, pc}
 8009fcc:	20001c94 	.word	0x20001c94

08009fd0 <fm_calendar_format_time>:
 * fm_factory.
 * @param None
 * @retval None
 */
void fm_calendar_format_time()
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b088      	sub	sp, #32
 8009fd4:	af02      	add	r7, sp, #8
    int  time_int = 0;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	617b      	str	r3, [r7, #20]
    char time_arr[PCF8553_DATA_SIZE];

    fm_calendar_get();
 8009fda:	f7ff ffa9 	bl	8009f30 <fm_calendar_get>
    sprintf(time_arr, "%02d%02d%02d", sTime.Hours, sTime.Minutes,
 8009fde:	4b0d      	ldr	r3, [pc, #52]	; (800a014 <fm_calendar_format_time+0x44>)
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	4b0b      	ldr	r3, [pc, #44]	; (800a014 <fm_calendar_format_time+0x44>)
 8009fe6:	785b      	ldrb	r3, [r3, #1]
 8009fe8:	4619      	mov	r1, r3
    sTime.Seconds);
 8009fea:	4b0a      	ldr	r3, [pc, #40]	; (800a014 <fm_calendar_format_time+0x44>)
 8009fec:	789b      	ldrb	r3, [r3, #2]
    sprintf(time_arr, "%02d%02d%02d", sTime.Hours, sTime.Minutes,
 8009fee:	4638      	mov	r0, r7
 8009ff0:	9300      	str	r3, [sp, #0]
 8009ff2:	460b      	mov	r3, r1
 8009ff4:	4908      	ldr	r1, [pc, #32]	; (800a018 <fm_calendar_format_time+0x48>)
 8009ff6:	f005 fd5f 	bl	800fab8 <siprintf>
     * Esta instrucción está de mas ya que después se vuelve a formatear el
     * entero en un arreglo, pero por ahora se va a quedar así hasta que se
     * elimine el formatter de la libreria fm_lcd.h
     */

    time_int = atoi(time_arr);
 8009ffa:	463b      	mov	r3, r7
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f005 fcf1 	bl	800f9e4 <atoi>
 800a002:	6178      	str	r0, [r7, #20]
    fm_factory_modify_fp_time(time_int);
 800a004:	6978      	ldr	r0, [r7, #20]
 800a006:	f000 f9dd 	bl	800a3c4 <fm_factory_modify_fp_time>
}
 800a00a:	bf00      	nop
 800a00c:	3718      	adds	r7, #24
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
 800a012:	bf00      	nop
 800a014:	20001c80 	.word	0x20001c80
 800a018:	08010528 	.word	0x08010528

0800a01c <fm_calendar_format_date>:
 * en fm_factory.
 * @param None
 * @retval None
 */
void fm_calendar_format_date()
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b088      	sub	sp, #32
 800a020:	af02      	add	r7, sp, #8
    int  date_int = 0;
 800a022:	2300      	movs	r3, #0
 800a024:	617b      	str	r3, [r7, #20]
    char date_arr[PCF8553_DATA_SIZE];

    fm_calendar_get();
 800a026:	f7ff ff83 	bl	8009f30 <fm_calendar_get>
    sprintf(date_arr, "%02d%02d20%02d", sDate.Date, sDate.Month, sDate.Year);
 800a02a:	4b0d      	ldr	r3, [pc, #52]	; (800a060 <fm_calendar_format_date+0x44>)
 800a02c:	789b      	ldrb	r3, [r3, #2]
 800a02e:	461a      	mov	r2, r3
 800a030:	4b0b      	ldr	r3, [pc, #44]	; (800a060 <fm_calendar_format_date+0x44>)
 800a032:	785b      	ldrb	r3, [r3, #1]
 800a034:	4619      	mov	r1, r3
 800a036:	4b0a      	ldr	r3, [pc, #40]	; (800a060 <fm_calendar_format_date+0x44>)
 800a038:	78db      	ldrb	r3, [r3, #3]
 800a03a:	4638      	mov	r0, r7
 800a03c:	9300      	str	r3, [sp, #0]
 800a03e:	460b      	mov	r3, r1
 800a040:	4908      	ldr	r1, [pc, #32]	; (800a064 <fm_calendar_format_date+0x48>)
 800a042:	f005 fd39 	bl	800fab8 <siprintf>
    /*
     * Esta instrucción está de mas ya que después se vuelve a formatear el
     * entero en un arreglo, pero por ahora se va a quedar así hasta que se
     * elimine el formatter de la libreria fm_lcd.h
     */
    date_int = atoi(date_arr);
 800a046:	463b      	mov	r3, r7
 800a048:	4618      	mov	r0, r3
 800a04a:	f005 fccb 	bl	800f9e4 <atoi>
 800a04e:	6178      	str	r0, [r7, #20]
    fm_factory_modify_fp_date(date_int);
 800a050:	6978      	ldr	r0, [r7, #20]
 800a052:	f000 f9a7 	bl	800a3a4 <fm_factory_modify_fp_date>
}
 800a056:	bf00      	nop
 800a058:	3718      	adds	r7, #24
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	20001c94 	.word	0x20001c94
 800a064:	08010538 	.word	0x08010538

0800a068 <fm_debug_msg_uart>:
 * @param Mensaje a transmitir y su longitud.
 * @retval None
 *
 */
void fm_debug_msg_uart(const uint8_t *p_msg, uint8_t len)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b084      	sub	sp, #16
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	460b      	mov	r3, r1
 800a072:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef ret = HAL_BUSY;
 800a074:	2302      	movs	r3, #2
 800a076:	73fb      	strb	r3, [r7, #15]
     * ejecutada en otro hilo. La siguiente implementación no es buena porque
     * bloquea puede bloquear al sistema, una mejor solucion seria bloquear
     * por un corto tiempo, aun mejor seria implementar algo con RTOS.
     *
     */
    while (ret == HAL_BUSY)
 800a078:	e008      	b.n	800a08c <fm_debug_msg_uart+0x24>
    {
        ret = HAL_UART_Transmit(&huart2, p_msg, len, DELAY_DEFAULT);
 800a07a:	78fb      	ldrb	r3, [r7, #3]
 800a07c:	b29a      	uxth	r2, r3
 800a07e:	230a      	movs	r3, #10
 800a080:	6879      	ldr	r1, [r7, #4]
 800a082:	4806      	ldr	r0, [pc, #24]	; (800a09c <fm_debug_msg_uart+0x34>)
 800a084:	f7fb fe4e 	bl	8005d24 <HAL_UART_Transmit>
 800a088:	4603      	mov	r3, r0
 800a08a:	73fb      	strb	r3, [r7, #15]
    while (ret == HAL_BUSY)
 800a08c:	7bfb      	ldrb	r3, [r7, #15]
 800a08e:	2b02      	cmp	r3, #2
 800a090:	d0f3      	beq.n	800a07a <fm_debug_msg_uart+0x12>
    }

}
 800a092:	bf00      	nop
 800a094:	bf00      	nop
 800a096:	3710      	adds	r7, #16
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	20001538 	.word	0x20001538

0800a0a0 <fm_factory_get_acm>:
 * @brief Función que devuelve el parámetro ACM almacenado en fm_factory.
 * @param None
 * @retval Parámetro ACM como estructura de tipo fmc_totalizer_t.
 */
fmc_totalizer_t fm_factory_get_acm()
{
 800a0a0:	b4b0      	push	{r4, r5, r7}
 800a0a2:	b083      	sub	sp, #12
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
    return (acm_config);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	4a07      	ldr	r2, [pc, #28]	; (800a0c8 <fm_factory_get_acm+0x28>)
 800a0ac:	461c      	mov	r4, r3
 800a0ae:	4615      	mov	r5, r2
 800a0b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a0b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a0b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a0b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bcb0      	pop	{r4, r5, r7}
 800a0c4:	4770      	bx	lr
 800a0c6:	bf00      	nop
 800a0c8:	20000030 	.word	0x20000030

0800a0cc <fm_factory_get_ttl>:
 * @brief Función que devuelve el parámetro TTL almacenado en fm_factory.
 * @param None
 * @retval Parámetro TTL como estructura de tipo fmc_totalizer_t.
 */
fmc_totalizer_t fm_factory_get_ttl()
{
 800a0cc:	b4b0      	push	{r4, r5, r7}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
    return (ttl_config);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	4a07      	ldr	r2, [pc, #28]	; (800a0f4 <fm_factory_get_ttl+0x28>)
 800a0d8:	461c      	mov	r4, r3
 800a0da:	4615      	mov	r5, r2
 800a0dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a0de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a0e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a0e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	370c      	adds	r7, #12
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bcb0      	pop	{r4, r5, r7}
 800a0f0:	4770      	bx	lr
 800a0f2:	bf00      	nop
 800a0f4:	20000010 	.word	0x20000010

0800a0f8 <fm_factory_get_rate>:
 * @brief Función que devuelve el parámetro RATE almacenado en fm_factory.
 * @param None
 * @retval Parámetro RATE como estructura de tipo fmc_totalizer_t.
 */
fmc_totalizer_t fm_factory_get_rate()
{
 800a0f8:	b4b0      	push	{r4, r5, r7}
 800a0fa:	b083      	sub	sp, #12
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
    return (rate_config);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	4a07      	ldr	r2, [pc, #28]	; (800a120 <fm_factory_get_rate+0x28>)
 800a104:	461c      	mov	r4, r3
 800a106:	4615      	mov	r5, r2
 800a108:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a10a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a10c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a110:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	370c      	adds	r7, #12
 800a118:	46bd      	mov	sp, r7
 800a11a:	bcb0      	pop	{r4, r5, r7}
 800a11c:	4770      	bx	lr
 800a11e:	bf00      	nop
 800a120:	20000050 	.word	0x20000050

0800a124 <fm_factory_get_temp>:
 * fm_factory.
 * @param None
 * @retval Temperatura interna del micro como estructura de tipo fmc_temp_t.
 */
fmc_temp_t fm_factory_get_temp()
{
 800a124:	b480      	push	{r7}
 800a126:	b083      	sub	sp, #12
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
    return (temperature_config);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	4a05      	ldr	r2, [pc, #20]	; (800a144 <fm_factory_get_temp+0x20>)
 800a130:	ca07      	ldmia	r2, {r0, r1, r2}
 800a132:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	370c      	adds	r7, #12
 800a13a:	46bd      	mov	sp, r7
 800a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a140:	4770      	bx	lr
 800a142:	bf00      	nop
 800a144:	20000070 	.word	0x20000070

0800a148 <fm_factory_get_units_tim>:
 * fm_factory.
 * @param None
 * @retval Configuración de resoluciones como estructura de tipo fmc_fp_t.
 */
fmc_fp_t fm_factory_get_units_tim()
{
 800a148:	b480      	push	{r7}
 800a14a:	b083      	sub	sp, #12
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
    return (units_digits_tim);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	4a05      	ldr	r2, [pc, #20]	; (800a168 <fm_factory_get_units_tim+0x20>)
 800a154:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a158:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	370c      	adds	r7, #12
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr
 800a168:	20000094 	.word	0x20000094

0800a16c <fm_factory_get_units_vol>:
 * fm_factory.
 * @param None
 * @retval Configuración de resoluciones como estructura de tipo fmc_fp_t.
 */
fmc_fp_t fm_factory_get_units_vol()
{
 800a16c:	b480      	push	{r7}
 800a16e:	b083      	sub	sp, #12
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
    return (units_digits_vol);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	4a05      	ldr	r2, [pc, #20]	; (800a18c <fm_factory_get_units_vol+0x20>)
 800a178:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a17c:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	370c      	adds	r7, #12
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr
 800a18c:	2000009c 	.word	0x2000009c

0800a190 <fm_factory_get_k_factor>:
 * @brief Función que devuelve el factor K almacenado en fm_factory.
 * @param None
 * @retval Factor K.
 */
fmc_fp_t fm_factory_get_k_factor(sel_k k_sel)
{
 800a190:	b480      	push	{r7}
 800a192:	b083      	sub	sp, #12
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	460b      	mov	r3, r1
 800a19a:	70fb      	strb	r3, [r7, #3]
    static fmc_fp_t k_selected;
    if(k_sel == K_FACTOR)
 800a19c:	78fb      	ldrb	r3, [r7, #3]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d106      	bne.n	800a1b0 <fm_factory_get_k_factor+0x20>
    {
        k_selected = k_factor_config;
 800a1a2:	4b22      	ldr	r3, [pc, #136]	; (800a22c <fm_factory_get_k_factor+0x9c>)
 800a1a4:	4a22      	ldr	r2, [pc, #136]	; (800a230 <fm_factory_get_k_factor+0xa0>)
 800a1a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a1aa:	e883 0003 	stmia.w	r3, {r0, r1}
 800a1ae:	e030      	b.n	800a212 <fm_factory_get_k_factor+0x82>
    }
    else if(k_sel == K_LIN_1)
 800a1b0:	78fb      	ldrb	r3, [r7, #3]
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	d106      	bne.n	800a1c4 <fm_factory_get_k_factor+0x34>
    {
        k_selected = k_lin_1_config;
 800a1b6:	4b1d      	ldr	r3, [pc, #116]	; (800a22c <fm_factory_get_k_factor+0x9c>)
 800a1b8:	4a1e      	ldr	r2, [pc, #120]	; (800a234 <fm_factory_get_k_factor+0xa4>)
 800a1ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a1be:	e883 0003 	stmia.w	r3, {r0, r1}
 800a1c2:	e026      	b.n	800a212 <fm_factory_get_k_factor+0x82>
    }
    else if(k_sel == K_LIN_2)
 800a1c4:	78fb      	ldrb	r3, [r7, #3]
 800a1c6:	2b02      	cmp	r3, #2
 800a1c8:	d106      	bne.n	800a1d8 <fm_factory_get_k_factor+0x48>
    {
        k_selected = k_lin_2_config;
 800a1ca:	4b18      	ldr	r3, [pc, #96]	; (800a22c <fm_factory_get_k_factor+0x9c>)
 800a1cc:	4a1a      	ldr	r2, [pc, #104]	; (800a238 <fm_factory_get_k_factor+0xa8>)
 800a1ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a1d2:	e883 0003 	stmia.w	r3, {r0, r1}
 800a1d6:	e01c      	b.n	800a212 <fm_factory_get_k_factor+0x82>
    }
    else if(k_sel == K_LIN_3)
 800a1d8:	78fb      	ldrb	r3, [r7, #3]
 800a1da:	2b03      	cmp	r3, #3
 800a1dc:	d106      	bne.n	800a1ec <fm_factory_get_k_factor+0x5c>
    {
        k_selected = k_lin_3_config;
 800a1de:	4b13      	ldr	r3, [pc, #76]	; (800a22c <fm_factory_get_k_factor+0x9c>)
 800a1e0:	4a16      	ldr	r2, [pc, #88]	; (800a23c <fm_factory_get_k_factor+0xac>)
 800a1e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a1e6:	e883 0003 	stmia.w	r3, {r0, r1}
 800a1ea:	e012      	b.n	800a212 <fm_factory_get_k_factor+0x82>
    }
    else if(k_sel == K_LIN_4)
 800a1ec:	78fb      	ldrb	r3, [r7, #3]
 800a1ee:	2b04      	cmp	r3, #4
 800a1f0:	d106      	bne.n	800a200 <fm_factory_get_k_factor+0x70>
    {
        k_selected = k_lin_4_config;
 800a1f2:	4b0e      	ldr	r3, [pc, #56]	; (800a22c <fm_factory_get_k_factor+0x9c>)
 800a1f4:	4a12      	ldr	r2, [pc, #72]	; (800a240 <fm_factory_get_k_factor+0xb0>)
 800a1f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a1fa:	e883 0003 	stmia.w	r3, {r0, r1}
 800a1fe:	e008      	b.n	800a212 <fm_factory_get_k_factor+0x82>
    }
    else if(k_sel == K_LIN_5)
 800a200:	78fb      	ldrb	r3, [r7, #3]
 800a202:	2b05      	cmp	r3, #5
 800a204:	d105      	bne.n	800a212 <fm_factory_get_k_factor+0x82>
    {
        k_selected = k_lin_5_config;
 800a206:	4b09      	ldr	r3, [pc, #36]	; (800a22c <fm_factory_get_k_factor+0x9c>)
 800a208:	4a0e      	ldr	r2, [pc, #56]	; (800a244 <fm_factory_get_k_factor+0xb4>)
 800a20a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a20e:	e883 0003 	stmia.w	r3, {r0, r1}
    }

    return (k_selected);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	4a05      	ldr	r2, [pc, #20]	; (800a22c <fm_factory_get_k_factor+0x9c>)
 800a216:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a21a:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	370c      	adds	r7, #12
 800a222:	46bd      	mov	sp, r7
 800a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a228:	4770      	bx	lr
 800a22a:	bf00      	nop
 800a22c:	20001cb0 	.word	0x20001cb0
 800a230:	200000f4 	.word	0x200000f4
 800a234:	200000cc 	.word	0x200000cc
 800a238:	200000d4 	.word	0x200000d4
 800a23c:	200000dc 	.word	0x200000dc
 800a240:	200000e4 	.word	0x200000e4
 800a244:	200000ec 	.word	0x200000ec

0800a248 <fm_factory_get_frec_lin>:

fmc_fp_t fm_factory_get_frec_lin(sel_k k_sel)
{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	460b      	mov	r3, r1
 800a252:	70fb      	strb	r3, [r7, #3]
    static fmc_fp_t frec_lin_selected;

    if(k_sel == K_LIN_1)
 800a254:	78fb      	ldrb	r3, [r7, #3]
 800a256:	2b01      	cmp	r3, #1
 800a258:	d106      	bne.n	800a268 <fm_factory_get_frec_lin+0x20>
    {
        frec_lin_selected = frec_lin_1;
 800a25a:	4b1d      	ldr	r3, [pc, #116]	; (800a2d0 <fm_factory_get_frec_lin+0x88>)
 800a25c:	4a1d      	ldr	r2, [pc, #116]	; (800a2d4 <fm_factory_get_frec_lin+0x8c>)
 800a25e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a262:	e883 0003 	stmia.w	r3, {r0, r1}
 800a266:	e026      	b.n	800a2b6 <fm_factory_get_frec_lin+0x6e>
    }
    else if(k_sel == K_LIN_2)
 800a268:	78fb      	ldrb	r3, [r7, #3]
 800a26a:	2b02      	cmp	r3, #2
 800a26c:	d106      	bne.n	800a27c <fm_factory_get_frec_lin+0x34>
    {
        frec_lin_selected = frec_lin_2;
 800a26e:	4b18      	ldr	r3, [pc, #96]	; (800a2d0 <fm_factory_get_frec_lin+0x88>)
 800a270:	4a19      	ldr	r2, [pc, #100]	; (800a2d8 <fm_factory_get_frec_lin+0x90>)
 800a272:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a276:	e883 0003 	stmia.w	r3, {r0, r1}
 800a27a:	e01c      	b.n	800a2b6 <fm_factory_get_frec_lin+0x6e>
    }
    else if(k_sel == K_LIN_3)
 800a27c:	78fb      	ldrb	r3, [r7, #3]
 800a27e:	2b03      	cmp	r3, #3
 800a280:	d106      	bne.n	800a290 <fm_factory_get_frec_lin+0x48>
    {
        frec_lin_selected = frec_lin_3;
 800a282:	4b13      	ldr	r3, [pc, #76]	; (800a2d0 <fm_factory_get_frec_lin+0x88>)
 800a284:	4a15      	ldr	r2, [pc, #84]	; (800a2dc <fm_factory_get_frec_lin+0x94>)
 800a286:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a28a:	e883 0003 	stmia.w	r3, {r0, r1}
 800a28e:	e012      	b.n	800a2b6 <fm_factory_get_frec_lin+0x6e>
    }
    else if(k_sel == K_LIN_4)
 800a290:	78fb      	ldrb	r3, [r7, #3]
 800a292:	2b04      	cmp	r3, #4
 800a294:	d106      	bne.n	800a2a4 <fm_factory_get_frec_lin+0x5c>
    {
        frec_lin_selected = frec_lin_4;
 800a296:	4b0e      	ldr	r3, [pc, #56]	; (800a2d0 <fm_factory_get_frec_lin+0x88>)
 800a298:	4a11      	ldr	r2, [pc, #68]	; (800a2e0 <fm_factory_get_frec_lin+0x98>)
 800a29a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a29e:	e883 0003 	stmia.w	r3, {r0, r1}
 800a2a2:	e008      	b.n	800a2b6 <fm_factory_get_frec_lin+0x6e>
    }
    else if(k_sel == K_LIN_5)
 800a2a4:	78fb      	ldrb	r3, [r7, #3]
 800a2a6:	2b05      	cmp	r3, #5
 800a2a8:	d105      	bne.n	800a2b6 <fm_factory_get_frec_lin+0x6e>
    {
        frec_lin_selected = frec_lin_5;
 800a2aa:	4b09      	ldr	r3, [pc, #36]	; (800a2d0 <fm_factory_get_frec_lin+0x88>)
 800a2ac:	4a0d      	ldr	r2, [pc, #52]	; (800a2e4 <fm_factory_get_frec_lin+0x9c>)
 800a2ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a2b2:	e883 0003 	stmia.w	r3, {r0, r1}
    }

    return (frec_lin_selected);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	4a05      	ldr	r2, [pc, #20]	; (800a2d0 <fm_factory_get_frec_lin+0x88>)
 800a2ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a2be:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	370c      	adds	r7, #12
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2cc:	4770      	bx	lr
 800a2ce:	bf00      	nop
 800a2d0:	20001cb8 	.word	0x20001cb8
 800a2d4:	200000a4 	.word	0x200000a4
 800a2d8:	200000ac 	.word	0x200000ac
 800a2dc:	200000b4 	.word	0x200000b4
 800a2e0:	200000bc 	.word	0x200000bc
 800a2e4:	200000c4 	.word	0x200000c4

0800a2e8 <fm_factory_get_date_time>:
 * @param None
 * @retval Hora, minutos, segundos, día, mes y año almacenados en
 * date_time_config.
 */
fmc_date_time_t fm_factory_get_date_time()
{
 800a2e8:	b4b0      	push	{r4, r5, r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
    return(date_time_config);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	4a07      	ldr	r2, [pc, #28]	; (800a310 <fm_factory_get_date_time+0x28>)
 800a2f4:	461c      	mov	r4, r3
 800a2f6:	4615      	mov	r5, r2
 800a2f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a2fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a2fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a300:	e884 0003 	stmia.w	r4, {r0, r1}
}
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	370c      	adds	r7, #12
 800a308:	46bd      	mov	sp, r7
 800a30a:	bcb0      	pop	{r4, r5, r7}
 800a30c:	4770      	bx	lr
 800a30e:	bf00      	nop
 800a310:	2000007c 	.word	0x2000007c

0800a314 <fm_factory_get_fp_date>:
 * parámetro de tipo punto fijo con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la fecha.
 */
fmc_fp_t fm_factory_get_fp_date()
{
 800a314:	b480      	push	{r7}
 800a316:	b083      	sub	sp, #12
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
    return(date_user);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	4a05      	ldr	r2, [pc, #20]	; (800a334 <fm_factory_get_fp_date+0x20>)
 800a320:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a324:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	370c      	adds	r7, #12
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr
 800a334:	20000104 	.word	0x20000104

0800a338 <fm_factory_get_fp_time>:
 * parámetro de tipo punto fijo con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la hora.
 */
fmc_fp_t fm_factory_get_fp_time()
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
    return(time_user);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	4a05      	ldr	r2, [pc, #20]	; (800a358 <fm_factory_get_fp_time+0x20>)
 800a344:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a348:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	370c      	adds	r7, #12
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr
 800a358:	200000fc 	.word	0x200000fc

0800a35c <fm_factory_get_fp_date_conf>:
 * con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la fecha congelada.
 */
fmc_fp_t fm_factory_get_fp_date_conf()
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
    return(date_config);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	4a05      	ldr	r2, [pc, #20]	; (800a37c <fm_factory_get_fp_date_conf+0x20>)
 800a368:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a36c:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	370c      	adds	r7, #12
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr
 800a37c:	20000114 	.word	0x20000114

0800a380 <fm_factory_get_fp_time_conf>:
 * con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la hora congelada.
 */
fmc_fp_t fm_factory_get_fp_time_conf()
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
    return(time_config);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4a05      	ldr	r2, [pc, #20]	; (800a3a0 <fm_factory_get_fp_time_conf+0x20>)
 800a38c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a390:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	370c      	adds	r7, #12
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr
 800a3a0:	2000010c 	.word	0x2000010c

0800a3a4 <fm_factory_modify_fp_date>:
 * fijo.
 * @param Fecha a almacenar como un número concatenado.
 * @retval None
 */
void fm_factory_modify_fp_date(int date)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b083      	sub	sp, #12
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
    date_user.num = date;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	4a04      	ldr	r2, [pc, #16]	; (800a3c0 <fm_factory_modify_fp_date+0x1c>)
 800a3b0:	6013      	str	r3, [r2, #0]
}
 800a3b2:	bf00      	nop
 800a3b4:	370c      	adds	r7, #12
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr
 800a3be:	bf00      	nop
 800a3c0:	20000104 	.word	0x20000104

0800a3c4 <fm_factory_modify_fp_time>:
 * fijo.
 * @param Hora a almacenar como un número concatenado.
 * @retval None
 */
void fm_factory_modify_fp_time(int time)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
    time_user.num = time;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	4a04      	ldr	r2, [pc, #16]	; (800a3e0 <fm_factory_modify_fp_time+0x1c>)
 800a3d0:	6013      	str	r3, [r2, #0]
}
 800a3d2:	bf00      	nop
 800a3d4:	370c      	adds	r7, #12
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr
 800a3de:	bf00      	nop
 800a3e0:	200000fc 	.word	0x200000fc

0800a3e4 <fm_factory_modify_date>:
 * fijo.
 * @param día, mes y año leídos del calendario.
 * @retval None
 */
void fm_factory_modify_date(int mod_day, int mod_month, int mod_year)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b085      	sub	sp, #20
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	60b9      	str	r1, [r7, #8]
 800a3ee:	607a      	str	r2, [r7, #4]
    date_time_config.day = mod_day;
 800a3f0:	4a0f      	ldr	r2, [pc, #60]	; (800a430 <fm_factory_modify_date+0x4c>)
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	6013      	str	r3, [r2, #0]
    date_time_config.month = mod_month;
 800a3f6:	4a0e      	ldr	r2, [pc, #56]	; (800a430 <fm_factory_modify_date+0x4c>)
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	6053      	str	r3, [r2, #4]
    date_time_config.year = mod_year;
 800a3fc:	4a0c      	ldr	r2, [pc, #48]	; (800a430 <fm_factory_modify_date+0x4c>)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6093      	str	r3, [r2, #8]

    date_config.num = mod_day * 1000000 + mod_month * 10000 + 2000 + mod_year;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	4a0b      	ldr	r2, [pc, #44]	; (800a434 <fm_factory_modify_date+0x50>)
 800a406:	fb03 f202 	mul.w	r2, r3, r2
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	f242 7110 	movw	r1, #10000	; 0x2710
 800a410:	fb01 f303 	mul.w	r3, r1, r3
 800a414:	4413      	add	r3, r2
 800a416:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	4413      	add	r3, r2
 800a41e:	461a      	mov	r2, r3
 800a420:	4b05      	ldr	r3, [pc, #20]	; (800a438 <fm_factory_modify_date+0x54>)
 800a422:	601a      	str	r2, [r3, #0]
}
 800a424:	bf00      	nop
 800a426:	3714      	adds	r7, #20
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr
 800a430:	2000007c 	.word	0x2000007c
 800a434:	000f4240 	.word	0x000f4240
 800a438:	20000114 	.word	0x20000114

0800a43c <fm_factory_modify_time>:
 * fijo.
 * @param Hora, minutos y segundos leídos del calendario.
 * @retval None
 */
void fm_factory_modify_time(int mod_hour, int mod_minute, int mod_second)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b085      	sub	sp, #20
 800a440:	af00      	add	r7, sp, #0
 800a442:	60f8      	str	r0, [r7, #12]
 800a444:	60b9      	str	r1, [r7, #8]
 800a446:	607a      	str	r2, [r7, #4]
    date_time_config.hour = mod_hour;
 800a448:	4a0e      	ldr	r2, [pc, #56]	; (800a484 <fm_factory_modify_time+0x48>)
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	60d3      	str	r3, [r2, #12]
    date_time_config.minute = mod_minute;
 800a44e:	4a0d      	ldr	r2, [pc, #52]	; (800a484 <fm_factory_modify_time+0x48>)
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	6113      	str	r3, [r2, #16]
    date_time_config.second = mod_second;
 800a454:	4a0b      	ldr	r2, [pc, #44]	; (800a484 <fm_factory_modify_time+0x48>)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6153      	str	r3, [r2, #20]

    time_config.num = mod_hour * 10000 + mod_minute * 100 + mod_second;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f242 7210 	movw	r2, #10000	; 0x2710
 800a460:	fb03 f202 	mul.w	r2, r3, r2
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	2164      	movs	r1, #100	; 0x64
 800a468:	fb01 f303 	mul.w	r3, r1, r3
 800a46c:	441a      	add	r2, r3
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	4413      	add	r3, r2
 800a472:	461a      	mov	r2, r3
 800a474:	4b04      	ldr	r3, [pc, #16]	; (800a488 <fm_factory_modify_time+0x4c>)
 800a476:	601a      	str	r2, [r3, #0]
}
 800a478:	bf00      	nop
 800a47a:	3714      	adds	r7, #20
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr
 800a484:	2000007c 	.word	0x2000007c
 800a488:	2000010c 	.word	0x2000010c

0800a48c <fm_factory_modify_k_factor_add>:
 * @brief Función que suma uno al dígito pasado como parámetro del factor K.
 * @param Digito a modificar del factor K de la enumeración sel_digit_t.
 * @retval None
 */
void fm_factory_modify_k_factor_add(sel_digit_t digit_k)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
 800a492:	4603      	mov	r3, r0
 800a494:	71fb      	strb	r3, [r7, #7]
    uint32_t k_new_num = 0;
 800a496:	2300      	movs	r3, #0
 800a498:	60fb      	str	r3, [r7, #12]
    fm_factory_separate_k_factor();
 800a49a:	f000 fab9 	bl	800aa10 <fm_factory_separate_k_factor>
    if (k_array[LINE_1_DIGITS - 1 - digit_k] < VAL_9)
 800a49e:	79fb      	ldrb	r3, [r7, #7]
 800a4a0:	f1c3 0307 	rsb	r3, r3, #7
 800a4a4:	4a17      	ldr	r2, [pc, #92]	; (800a504 <fm_factory_modify_k_factor_add+0x78>)
 800a4a6:	5cd3      	ldrb	r3, [r2, r3]
 800a4a8:	2b08      	cmp	r3, #8
 800a4aa:	d809      	bhi.n	800a4c0 <fm_factory_modify_k_factor_add+0x34>
    {
        k_array[LINE_1_DIGITS - 1 - digit_k]++;
 800a4ac:	79fb      	ldrb	r3, [r7, #7]
 800a4ae:	f1c3 0307 	rsb	r3, r3, #7
 800a4b2:	4a14      	ldr	r2, [pc, #80]	; (800a504 <fm_factory_modify_k_factor_add+0x78>)
 800a4b4:	5cd2      	ldrb	r2, [r2, r3]
 800a4b6:	3201      	adds	r2, #1
 800a4b8:	b2d1      	uxtb	r1, r2
 800a4ba:	4a12      	ldr	r2, [pc, #72]	; (800a504 <fm_factory_modify_k_factor_add+0x78>)
 800a4bc:	54d1      	strb	r1, [r2, r3]
 800a4be:	e005      	b.n	800a4cc <fm_factory_modify_k_factor_add+0x40>
    }
    else
    {
        k_array[LINE_1_DIGITS - 1 - digit_k] = VAL_0;
 800a4c0:	79fb      	ldrb	r3, [r7, #7]
 800a4c2:	f1c3 0307 	rsb	r3, r3, #7
 800a4c6:	4a0f      	ldr	r2, [pc, #60]	; (800a504 <fm_factory_modify_k_factor_add+0x78>)
 800a4c8:	2100      	movs	r1, #0
 800a4ca:	54d1      	strb	r1, [r2, r3]
    }

    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	60bb      	str	r3, [r7, #8]
 800a4d0:	e00e      	b.n	800a4f0 <fm_factory_modify_k_factor_add+0x64>
    {
        k_new_num = (k_new_num * 10) + k_array[i];
 800a4d2:	68fa      	ldr	r2, [r7, #12]
 800a4d4:	4613      	mov	r3, r2
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	4413      	add	r3, r2
 800a4da:	005b      	lsls	r3, r3, #1
 800a4dc:	4619      	mov	r1, r3
 800a4de:	4a09      	ldr	r2, [pc, #36]	; (800a504 <fm_factory_modify_k_factor_add+0x78>)
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	4413      	add	r3, r2
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	440b      	add	r3, r1
 800a4e8:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	3301      	adds	r3, #1
 800a4ee:	60bb      	str	r3, [r7, #8]
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	2b07      	cmp	r3, #7
 800a4f4:	dded      	ble.n	800a4d2 <fm_factory_modify_k_factor_add+0x46>
    }

    k_factor_config.num = k_new_num;
 800a4f6:	4a04      	ldr	r2, [pc, #16]	; (800a508 <fm_factory_modify_k_factor_add+0x7c>)
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	6013      	str	r3, [r2, #0]
}
 800a4fc:	bf00      	nop
 800a4fe:	3710      	adds	r7, #16
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}
 800a504:	20001c98 	.word	0x20001c98
 800a508:	200000f4 	.word	0x200000f4

0800a50c <fm_factory_modify_k_factor_subs>:
 * @brief Función que resta uno al dígito pasado como parámetro del factor K.
 * @param Digito a modificar del factor K de la enumeración sel_digit_t.
 * @retval None
 */
void fm_factory_modify_k_factor_subs(sel_digit_t digit_k)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b084      	sub	sp, #16
 800a510:	af00      	add	r7, sp, #0
 800a512:	4603      	mov	r3, r0
 800a514:	71fb      	strb	r3, [r7, #7]
    uint32_t k_new_num = 0;
 800a516:	2300      	movs	r3, #0
 800a518:	60fb      	str	r3, [r7, #12]
    fm_factory_separate_k_factor();
 800a51a:	f000 fa79 	bl	800aa10 <fm_factory_separate_k_factor>
    if (k_array[LINE_1_DIGITS - 1 - digit_k] > VAL_0)
 800a51e:	79fb      	ldrb	r3, [r7, #7]
 800a520:	f1c3 0307 	rsb	r3, r3, #7
 800a524:	4a17      	ldr	r2, [pc, #92]	; (800a584 <fm_factory_modify_k_factor_subs+0x78>)
 800a526:	5cd3      	ldrb	r3, [r2, r3]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d009      	beq.n	800a540 <fm_factory_modify_k_factor_subs+0x34>
    {
        k_array[LINE_1_DIGITS - 1 - digit_k]--;
 800a52c:	79fb      	ldrb	r3, [r7, #7]
 800a52e:	f1c3 0307 	rsb	r3, r3, #7
 800a532:	4a14      	ldr	r2, [pc, #80]	; (800a584 <fm_factory_modify_k_factor_subs+0x78>)
 800a534:	5cd2      	ldrb	r2, [r2, r3]
 800a536:	3a01      	subs	r2, #1
 800a538:	b2d1      	uxtb	r1, r2
 800a53a:	4a12      	ldr	r2, [pc, #72]	; (800a584 <fm_factory_modify_k_factor_subs+0x78>)
 800a53c:	54d1      	strb	r1, [r2, r3]
 800a53e:	e005      	b.n	800a54c <fm_factory_modify_k_factor_subs+0x40>
    }
    else
    {
        k_array[LINE_1_DIGITS - 1 - digit_k] = VAL_9;
 800a540:	79fb      	ldrb	r3, [r7, #7]
 800a542:	f1c3 0307 	rsb	r3, r3, #7
 800a546:	4a0f      	ldr	r2, [pc, #60]	; (800a584 <fm_factory_modify_k_factor_subs+0x78>)
 800a548:	2109      	movs	r1, #9
 800a54a:	54d1      	strb	r1, [r2, r3]
    }

    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800a54c:	2300      	movs	r3, #0
 800a54e:	60bb      	str	r3, [r7, #8]
 800a550:	e00e      	b.n	800a570 <fm_factory_modify_k_factor_subs+0x64>
    {
        k_new_num = (k_new_num * 10) + k_array[i];
 800a552:	68fa      	ldr	r2, [r7, #12]
 800a554:	4613      	mov	r3, r2
 800a556:	009b      	lsls	r3, r3, #2
 800a558:	4413      	add	r3, r2
 800a55a:	005b      	lsls	r3, r3, #1
 800a55c:	4619      	mov	r1, r3
 800a55e:	4a09      	ldr	r2, [pc, #36]	; (800a584 <fm_factory_modify_k_factor_subs+0x78>)
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	4413      	add	r3, r2
 800a564:	781b      	ldrb	r3, [r3, #0]
 800a566:	440b      	add	r3, r1
 800a568:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	3301      	adds	r3, #1
 800a56e:	60bb      	str	r3, [r7, #8]
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	2b07      	cmp	r3, #7
 800a574:	dded      	ble.n	800a552 <fm_factory_modify_k_factor_subs+0x46>
    }

    k_factor_config.num = k_new_num;
 800a576:	4a04      	ldr	r2, [pc, #16]	; (800a588 <fm_factory_modify_k_factor_subs+0x7c>)
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	6013      	str	r3, [r2, #0]
}
 800a57c:	bf00      	nop
 800a57e:	3710      	adds	r7, #16
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}
 800a584:	20001c98 	.word	0x20001c98
 800a588:	200000f4 	.word	0x200000f4

0800a58c <fm_factory_modify_k_lin_add>:

void fm_factory_modify_k_lin_add(sel_digit_k_lin_t digit_k_lin, sel_k k_sel)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b086      	sub	sp, #24
 800a590:	af00      	add	r7, sp, #0
 800a592:	4603      	mov	r3, r0
 800a594:	460a      	mov	r2, r1
 800a596:	71fb      	strb	r3, [r7, #7]
 800a598:	4613      	mov	r3, r2
 800a59a:	71bb      	strb	r3, [r7, #6]
    uint32_t k_lin_new_num = 0;
 800a59c:	2300      	movs	r3, #0
 800a59e:	617b      	str	r3, [r7, #20]
    uint32_t frec_lin_new_num = 0;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	613b      	str	r3, [r7, #16]

    fm_factory_separate_k_lin_and_frec(k_sel);
 800a5a4:	79bb      	ldrb	r3, [r7, #6]
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f000 fa6e 	bl	800aa88 <fm_factory_separate_k_lin_and_frec>
    if(digit_k_lin <= DIG_LIN_7)
 800a5ac:	79fb      	ldrb	r3, [r7, #7]
 800a5ae:	2b07      	cmp	r3, #7
 800a5b0:	d84e      	bhi.n	800a650 <fm_factory_modify_k_lin_add+0xc4>
    {
        if(k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] < VAL_9)
 800a5b2:	79fb      	ldrb	r3, [r7, #7]
 800a5b4:	f1c3 0307 	rsb	r3, r3, #7
 800a5b8:	4a5e      	ldr	r2, [pc, #376]	; (800a734 <fm_factory_modify_k_lin_add+0x1a8>)
 800a5ba:	5cd3      	ldrb	r3, [r2, r3]
 800a5bc:	2b08      	cmp	r3, #8
 800a5be:	d809      	bhi.n	800a5d4 <fm_factory_modify_k_lin_add+0x48>
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin]++;
 800a5c0:	79fb      	ldrb	r3, [r7, #7]
 800a5c2:	f1c3 0307 	rsb	r3, r3, #7
 800a5c6:	4a5b      	ldr	r2, [pc, #364]	; (800a734 <fm_factory_modify_k_lin_add+0x1a8>)
 800a5c8:	5cd2      	ldrb	r2, [r2, r3]
 800a5ca:	3201      	adds	r2, #1
 800a5cc:	b2d1      	uxtb	r1, r2
 800a5ce:	4a59      	ldr	r2, [pc, #356]	; (800a734 <fm_factory_modify_k_lin_add+0x1a8>)
 800a5d0:	54d1      	strb	r1, [r2, r3]
 800a5d2:	e005      	b.n	800a5e0 <fm_factory_modify_k_lin_add+0x54>
        }
        else
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] = VAL_0;
 800a5d4:	79fb      	ldrb	r3, [r7, #7]
 800a5d6:	f1c3 0307 	rsb	r3, r3, #7
 800a5da:	4a56      	ldr	r2, [pc, #344]	; (800a734 <fm_factory_modify_k_lin_add+0x1a8>)
 800a5dc:	2100      	movs	r1, #0
 800a5de:	54d1      	strb	r1, [r2, r3]
        }

        for(int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	60fb      	str	r3, [r7, #12]
 800a5e4:	e00e      	b.n	800a604 <fm_factory_modify_k_lin_add+0x78>
        {
            k_lin_new_num = (k_lin_new_num * 10) + k_lin_array[i];
 800a5e6:	697a      	ldr	r2, [r7, #20]
 800a5e8:	4613      	mov	r3, r2
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	4413      	add	r3, r2
 800a5ee:	005b      	lsls	r3, r3, #1
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	4a50      	ldr	r2, [pc, #320]	; (800a734 <fm_factory_modify_k_lin_add+0x1a8>)
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	4413      	add	r3, r2
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	440b      	add	r3, r1
 800a5fc:	617b      	str	r3, [r7, #20]
        for(int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	3301      	adds	r3, #1
 800a602:	60fb      	str	r3, [r7, #12]
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2b07      	cmp	r3, #7
 800a608:	dded      	ble.n	800a5e6 <fm_factory_modify_k_lin_add+0x5a>
        }

        if(k_sel == K_LIN_1)
 800a60a:	79bb      	ldrb	r3, [r7, #6]
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	d103      	bne.n	800a618 <fm_factory_modify_k_lin_add+0x8c>
        {
            k_lin_1_config.num = k_lin_new_num;
 800a610:	4a49      	ldr	r2, [pc, #292]	; (800a738 <fm_factory_modify_k_lin_add+0x1ac>)
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	6013      	str	r3, [r2, #0]
        else if(k_sel == K_LIN_5)
        {
            frec_lin_5.num = frec_lin_new_num;
        }
    }
}
 800a616:	e089      	b.n	800a72c <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_2)
 800a618:	79bb      	ldrb	r3, [r7, #6]
 800a61a:	2b02      	cmp	r3, #2
 800a61c:	d103      	bne.n	800a626 <fm_factory_modify_k_lin_add+0x9a>
            k_lin_2_config.num = k_lin_new_num;
 800a61e:	4a47      	ldr	r2, [pc, #284]	; (800a73c <fm_factory_modify_k_lin_add+0x1b0>)
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	6013      	str	r3, [r2, #0]
}
 800a624:	e082      	b.n	800a72c <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_3)
 800a626:	79bb      	ldrb	r3, [r7, #6]
 800a628:	2b03      	cmp	r3, #3
 800a62a:	d103      	bne.n	800a634 <fm_factory_modify_k_lin_add+0xa8>
            k_lin_3_config.num = k_lin_new_num;
 800a62c:	4a44      	ldr	r2, [pc, #272]	; (800a740 <fm_factory_modify_k_lin_add+0x1b4>)
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	6013      	str	r3, [r2, #0]
}
 800a632:	e07b      	b.n	800a72c <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_4)
 800a634:	79bb      	ldrb	r3, [r7, #6]
 800a636:	2b04      	cmp	r3, #4
 800a638:	d103      	bne.n	800a642 <fm_factory_modify_k_lin_add+0xb6>
            k_lin_4_config.num = k_lin_new_num;
 800a63a:	4a42      	ldr	r2, [pc, #264]	; (800a744 <fm_factory_modify_k_lin_add+0x1b8>)
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	6013      	str	r3, [r2, #0]
}
 800a640:	e074      	b.n	800a72c <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_5)
 800a642:	79bb      	ldrb	r3, [r7, #6]
 800a644:	2b05      	cmp	r3, #5
 800a646:	d171      	bne.n	800a72c <fm_factory_modify_k_lin_add+0x1a0>
            k_lin_5_config.num = k_lin_new_num;
 800a648:	4a3f      	ldr	r2, [pc, #252]	; (800a748 <fm_factory_modify_k_lin_add+0x1bc>)
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	6013      	str	r3, [r2, #0]
}
 800a64e:	e06d      	b.n	800a72c <fm_factory_modify_k_lin_add+0x1a0>
    else if(digit_k_lin > DIG_LIN_7)
 800a650:	79fb      	ldrb	r3, [r7, #7]
 800a652:	2b07      	cmp	r3, #7
 800a654:	d96a      	bls.n	800a72c <fm_factory_modify_k_lin_add+0x1a0>
        if(LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8 != DIG_LIN_3)
 800a656:	79fb      	ldrb	r3, [r7, #7]
 800a658:	f1c3 030e 	rsb	r3, r3, #14
 800a65c:	2b03      	cmp	r3, #3
 800a65e:	d017      	beq.n	800a690 <fm_factory_modify_k_lin_add+0x104>
            if(frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] < VAL_9)
 800a660:	79fb      	ldrb	r3, [r7, #7]
 800a662:	f1c3 030e 	rsb	r3, r3, #14
 800a666:	4a39      	ldr	r2, [pc, #228]	; (800a74c <fm_factory_modify_k_lin_add+0x1c0>)
 800a668:	5cd3      	ldrb	r3, [r2, r3]
 800a66a:	2b08      	cmp	r3, #8
 800a66c:	d809      	bhi.n	800a682 <fm_factory_modify_k_lin_add+0xf6>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]++;
 800a66e:	79fb      	ldrb	r3, [r7, #7]
 800a670:	f1c3 030e 	rsb	r3, r3, #14
 800a674:	4a35      	ldr	r2, [pc, #212]	; (800a74c <fm_factory_modify_k_lin_add+0x1c0>)
 800a676:	5cd2      	ldrb	r2, [r2, r3]
 800a678:	3201      	adds	r2, #1
 800a67a:	b2d1      	uxtb	r1, r2
 800a67c:	4a33      	ldr	r2, [pc, #204]	; (800a74c <fm_factory_modify_k_lin_add+0x1c0>)
 800a67e:	54d1      	strb	r1, [r2, r3]
 800a680:	e01d      	b.n	800a6be <fm_factory_modify_k_lin_add+0x132>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_0;
 800a682:	79fb      	ldrb	r3, [r7, #7]
 800a684:	f1c3 030e 	rsb	r3, r3, #14
 800a688:	4a30      	ldr	r2, [pc, #192]	; (800a74c <fm_factory_modify_k_lin_add+0x1c0>)
 800a68a:	2100      	movs	r1, #0
 800a68c:	54d1      	strb	r1, [r2, r3]
 800a68e:	e016      	b.n	800a6be <fm_factory_modify_k_lin_add+0x132>
            if(frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] < VAL_1)
 800a690:	79fb      	ldrb	r3, [r7, #7]
 800a692:	f1c3 030e 	rsb	r3, r3, #14
 800a696:	4a2d      	ldr	r2, [pc, #180]	; (800a74c <fm_factory_modify_k_lin_add+0x1c0>)
 800a698:	5cd3      	ldrb	r3, [r2, r3]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d109      	bne.n	800a6b2 <fm_factory_modify_k_lin_add+0x126>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]++;
 800a69e:	79fb      	ldrb	r3, [r7, #7]
 800a6a0:	f1c3 030e 	rsb	r3, r3, #14
 800a6a4:	4a29      	ldr	r2, [pc, #164]	; (800a74c <fm_factory_modify_k_lin_add+0x1c0>)
 800a6a6:	5cd2      	ldrb	r2, [r2, r3]
 800a6a8:	3201      	adds	r2, #1
 800a6aa:	b2d1      	uxtb	r1, r2
 800a6ac:	4a27      	ldr	r2, [pc, #156]	; (800a74c <fm_factory_modify_k_lin_add+0x1c0>)
 800a6ae:	54d1      	strb	r1, [r2, r3]
 800a6b0:	e005      	b.n	800a6be <fm_factory_modify_k_lin_add+0x132>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_0;
 800a6b2:	79fb      	ldrb	r3, [r7, #7]
 800a6b4:	f1c3 030e 	rsb	r3, r3, #14
 800a6b8:	4a24      	ldr	r2, [pc, #144]	; (800a74c <fm_factory_modify_k_lin_add+0x1c0>)
 800a6ba:	2100      	movs	r1, #0
 800a6bc:	54d1      	strb	r1, [r2, r3]
        for(int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800a6be:	2300      	movs	r3, #0
 800a6c0:	60bb      	str	r3, [r7, #8]
 800a6c2:	e00e      	b.n	800a6e2 <fm_factory_modify_k_lin_add+0x156>
            frec_lin_new_num = (frec_lin_new_num * 10) + frec_array[j];
 800a6c4:	693a      	ldr	r2, [r7, #16]
 800a6c6:	4613      	mov	r3, r2
 800a6c8:	009b      	lsls	r3, r3, #2
 800a6ca:	4413      	add	r3, r2
 800a6cc:	005b      	lsls	r3, r3, #1
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	4a1e      	ldr	r2, [pc, #120]	; (800a74c <fm_factory_modify_k_lin_add+0x1c0>)
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	4413      	add	r3, r2
 800a6d6:	781b      	ldrb	r3, [r3, #0]
 800a6d8:	440b      	add	r3, r1
 800a6da:	613b      	str	r3, [r7, #16]
        for(int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	3301      	adds	r3, #1
 800a6e0:	60bb      	str	r3, [r7, #8]
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	2b06      	cmp	r3, #6
 800a6e6:	dded      	ble.n	800a6c4 <fm_factory_modify_k_lin_add+0x138>
        if(k_sel == K_LIN_1)
 800a6e8:	79bb      	ldrb	r3, [r7, #6]
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	d103      	bne.n	800a6f6 <fm_factory_modify_k_lin_add+0x16a>
            frec_lin_1.num = frec_lin_new_num;
 800a6ee:	4a18      	ldr	r2, [pc, #96]	; (800a750 <fm_factory_modify_k_lin_add+0x1c4>)
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	6013      	str	r3, [r2, #0]
}
 800a6f4:	e01a      	b.n	800a72c <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_2)
 800a6f6:	79bb      	ldrb	r3, [r7, #6]
 800a6f8:	2b02      	cmp	r3, #2
 800a6fa:	d103      	bne.n	800a704 <fm_factory_modify_k_lin_add+0x178>
            frec_lin_2.num = frec_lin_new_num;
 800a6fc:	4a15      	ldr	r2, [pc, #84]	; (800a754 <fm_factory_modify_k_lin_add+0x1c8>)
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	6013      	str	r3, [r2, #0]
}
 800a702:	e013      	b.n	800a72c <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_3)
 800a704:	79bb      	ldrb	r3, [r7, #6]
 800a706:	2b03      	cmp	r3, #3
 800a708:	d103      	bne.n	800a712 <fm_factory_modify_k_lin_add+0x186>
            frec_lin_3.num = frec_lin_new_num;
 800a70a:	4a13      	ldr	r2, [pc, #76]	; (800a758 <fm_factory_modify_k_lin_add+0x1cc>)
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	6013      	str	r3, [r2, #0]
}
 800a710:	e00c      	b.n	800a72c <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_4)
 800a712:	79bb      	ldrb	r3, [r7, #6]
 800a714:	2b04      	cmp	r3, #4
 800a716:	d103      	bne.n	800a720 <fm_factory_modify_k_lin_add+0x194>
            frec_lin_4.num = frec_lin_new_num;
 800a718:	4a10      	ldr	r2, [pc, #64]	; (800a75c <fm_factory_modify_k_lin_add+0x1d0>)
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	6013      	str	r3, [r2, #0]
}
 800a71e:	e005      	b.n	800a72c <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_5)
 800a720:	79bb      	ldrb	r3, [r7, #6]
 800a722:	2b05      	cmp	r3, #5
 800a724:	d102      	bne.n	800a72c <fm_factory_modify_k_lin_add+0x1a0>
            frec_lin_5.num = frec_lin_new_num;
 800a726:	4a0e      	ldr	r2, [pc, #56]	; (800a760 <fm_factory_modify_k_lin_add+0x1d4>)
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	6013      	str	r3, [r2, #0]
}
 800a72c:	bf00      	nop
 800a72e:	3718      	adds	r7, #24
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}
 800a734:	20001ca0 	.word	0x20001ca0
 800a738:	200000cc 	.word	0x200000cc
 800a73c:	200000d4 	.word	0x200000d4
 800a740:	200000dc 	.word	0x200000dc
 800a744:	200000e4 	.word	0x200000e4
 800a748:	200000ec 	.word	0x200000ec
 800a74c:	20001ca8 	.word	0x20001ca8
 800a750:	200000a4 	.word	0x200000a4
 800a754:	200000ac 	.word	0x200000ac
 800a758:	200000b4 	.word	0x200000b4
 800a75c:	200000bc 	.word	0x200000bc
 800a760:	200000c4 	.word	0x200000c4

0800a764 <fm_factory_modify_k_lin_subs>:

void fm_factory_modify_k_lin_subs(sel_digit_k_lin_t digit_k_lin, sel_k k_sel)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b086      	sub	sp, #24
 800a768:	af00      	add	r7, sp, #0
 800a76a:	4603      	mov	r3, r0
 800a76c:	460a      	mov	r2, r1
 800a76e:	71fb      	strb	r3, [r7, #7]
 800a770:	4613      	mov	r3, r2
 800a772:	71bb      	strb	r3, [r7, #6]
    uint32_t k_lin_new_num = 0;
 800a774:	2300      	movs	r3, #0
 800a776:	617b      	str	r3, [r7, #20]
    uint32_t frec_lin_new_num = 0;
 800a778:	2300      	movs	r3, #0
 800a77a:	613b      	str	r3, [r7, #16]

    fm_factory_separate_k_lin_and_frec(k_sel);
 800a77c:	79bb      	ldrb	r3, [r7, #6]
 800a77e:	4618      	mov	r0, r3
 800a780:	f000 f982 	bl	800aa88 <fm_factory_separate_k_lin_and_frec>
    if(digit_k_lin <= DIG_LIN_7)
 800a784:	79fb      	ldrb	r3, [r7, #7]
 800a786:	2b07      	cmp	r3, #7
 800a788:	d84e      	bhi.n	800a828 <fm_factory_modify_k_lin_subs+0xc4>
    {
        if(k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] > VAL_0)
 800a78a:	79fb      	ldrb	r3, [r7, #7]
 800a78c:	f1c3 0307 	rsb	r3, r3, #7
 800a790:	4a5e      	ldr	r2, [pc, #376]	; (800a90c <fm_factory_modify_k_lin_subs+0x1a8>)
 800a792:	5cd3      	ldrb	r3, [r2, r3]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d009      	beq.n	800a7ac <fm_factory_modify_k_lin_subs+0x48>
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin]--;
 800a798:	79fb      	ldrb	r3, [r7, #7]
 800a79a:	f1c3 0307 	rsb	r3, r3, #7
 800a79e:	4a5b      	ldr	r2, [pc, #364]	; (800a90c <fm_factory_modify_k_lin_subs+0x1a8>)
 800a7a0:	5cd2      	ldrb	r2, [r2, r3]
 800a7a2:	3a01      	subs	r2, #1
 800a7a4:	b2d1      	uxtb	r1, r2
 800a7a6:	4a59      	ldr	r2, [pc, #356]	; (800a90c <fm_factory_modify_k_lin_subs+0x1a8>)
 800a7a8:	54d1      	strb	r1, [r2, r3]
 800a7aa:	e005      	b.n	800a7b8 <fm_factory_modify_k_lin_subs+0x54>
        }
        else
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] = VAL_9;
 800a7ac:	79fb      	ldrb	r3, [r7, #7]
 800a7ae:	f1c3 0307 	rsb	r3, r3, #7
 800a7b2:	4a56      	ldr	r2, [pc, #344]	; (800a90c <fm_factory_modify_k_lin_subs+0x1a8>)
 800a7b4:	2109      	movs	r1, #9
 800a7b6:	54d1      	strb	r1, [r2, r3]
        }

        for(int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	60fb      	str	r3, [r7, #12]
 800a7bc:	e00e      	b.n	800a7dc <fm_factory_modify_k_lin_subs+0x78>
        {
            k_lin_new_num = (k_lin_new_num * 10) + k_lin_array[i];
 800a7be:	697a      	ldr	r2, [r7, #20]
 800a7c0:	4613      	mov	r3, r2
 800a7c2:	009b      	lsls	r3, r3, #2
 800a7c4:	4413      	add	r3, r2
 800a7c6:	005b      	lsls	r3, r3, #1
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	4a50      	ldr	r2, [pc, #320]	; (800a90c <fm_factory_modify_k_lin_subs+0x1a8>)
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	4413      	add	r3, r2
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	440b      	add	r3, r1
 800a7d4:	617b      	str	r3, [r7, #20]
        for(int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	3301      	adds	r3, #1
 800a7da:	60fb      	str	r3, [r7, #12]
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2b07      	cmp	r3, #7
 800a7e0:	dded      	ble.n	800a7be <fm_factory_modify_k_lin_subs+0x5a>
        }

        if(k_sel == K_LIN_1)
 800a7e2:	79bb      	ldrb	r3, [r7, #6]
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d103      	bne.n	800a7f0 <fm_factory_modify_k_lin_subs+0x8c>
        {
            k_lin_1_config.num = k_lin_new_num;
 800a7e8:	4a49      	ldr	r2, [pc, #292]	; (800a910 <fm_factory_modify_k_lin_subs+0x1ac>)
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	6013      	str	r3, [r2, #0]
        else if(k_sel == K_LIN_5)
        {
            frec_lin_5.num = frec_lin_new_num;
        }
    }
}
 800a7ee:	e089      	b.n	800a904 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_2)
 800a7f0:	79bb      	ldrb	r3, [r7, #6]
 800a7f2:	2b02      	cmp	r3, #2
 800a7f4:	d103      	bne.n	800a7fe <fm_factory_modify_k_lin_subs+0x9a>
            k_lin_2_config.num = k_lin_new_num;
 800a7f6:	4a47      	ldr	r2, [pc, #284]	; (800a914 <fm_factory_modify_k_lin_subs+0x1b0>)
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	6013      	str	r3, [r2, #0]
}
 800a7fc:	e082      	b.n	800a904 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_3)
 800a7fe:	79bb      	ldrb	r3, [r7, #6]
 800a800:	2b03      	cmp	r3, #3
 800a802:	d103      	bne.n	800a80c <fm_factory_modify_k_lin_subs+0xa8>
            k_lin_3_config.num = k_lin_new_num;
 800a804:	4a44      	ldr	r2, [pc, #272]	; (800a918 <fm_factory_modify_k_lin_subs+0x1b4>)
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	6013      	str	r3, [r2, #0]
}
 800a80a:	e07b      	b.n	800a904 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_4)
 800a80c:	79bb      	ldrb	r3, [r7, #6]
 800a80e:	2b04      	cmp	r3, #4
 800a810:	d103      	bne.n	800a81a <fm_factory_modify_k_lin_subs+0xb6>
            k_lin_4_config.num = k_lin_new_num;
 800a812:	4a42      	ldr	r2, [pc, #264]	; (800a91c <fm_factory_modify_k_lin_subs+0x1b8>)
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	6013      	str	r3, [r2, #0]
}
 800a818:	e074      	b.n	800a904 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_5)
 800a81a:	79bb      	ldrb	r3, [r7, #6]
 800a81c:	2b05      	cmp	r3, #5
 800a81e:	d171      	bne.n	800a904 <fm_factory_modify_k_lin_subs+0x1a0>
            k_lin_5_config.num = k_lin_new_num;
 800a820:	4a3f      	ldr	r2, [pc, #252]	; (800a920 <fm_factory_modify_k_lin_subs+0x1bc>)
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	6013      	str	r3, [r2, #0]
}
 800a826:	e06d      	b.n	800a904 <fm_factory_modify_k_lin_subs+0x1a0>
    else if(digit_k_lin > DIG_LIN_7)
 800a828:	79fb      	ldrb	r3, [r7, #7]
 800a82a:	2b07      	cmp	r3, #7
 800a82c:	d96a      	bls.n	800a904 <fm_factory_modify_k_lin_subs+0x1a0>
        if(LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8 != DIG_LIN_3)
 800a82e:	79fb      	ldrb	r3, [r7, #7]
 800a830:	f1c3 030e 	rsb	r3, r3, #14
 800a834:	2b03      	cmp	r3, #3
 800a836:	d017      	beq.n	800a868 <fm_factory_modify_k_lin_subs+0x104>
            if(frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] > VAL_0)
 800a838:	79fb      	ldrb	r3, [r7, #7]
 800a83a:	f1c3 030e 	rsb	r3, r3, #14
 800a83e:	4a39      	ldr	r2, [pc, #228]	; (800a924 <fm_factory_modify_k_lin_subs+0x1c0>)
 800a840:	5cd3      	ldrb	r3, [r2, r3]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d009      	beq.n	800a85a <fm_factory_modify_k_lin_subs+0xf6>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]--;
 800a846:	79fb      	ldrb	r3, [r7, #7]
 800a848:	f1c3 030e 	rsb	r3, r3, #14
 800a84c:	4a35      	ldr	r2, [pc, #212]	; (800a924 <fm_factory_modify_k_lin_subs+0x1c0>)
 800a84e:	5cd2      	ldrb	r2, [r2, r3]
 800a850:	3a01      	subs	r2, #1
 800a852:	b2d1      	uxtb	r1, r2
 800a854:	4a33      	ldr	r2, [pc, #204]	; (800a924 <fm_factory_modify_k_lin_subs+0x1c0>)
 800a856:	54d1      	strb	r1, [r2, r3]
 800a858:	e01d      	b.n	800a896 <fm_factory_modify_k_lin_subs+0x132>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_9;
 800a85a:	79fb      	ldrb	r3, [r7, #7]
 800a85c:	f1c3 030e 	rsb	r3, r3, #14
 800a860:	4a30      	ldr	r2, [pc, #192]	; (800a924 <fm_factory_modify_k_lin_subs+0x1c0>)
 800a862:	2109      	movs	r1, #9
 800a864:	54d1      	strb	r1, [r2, r3]
 800a866:	e016      	b.n	800a896 <fm_factory_modify_k_lin_subs+0x132>
            if(frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] > VAL_0)
 800a868:	79fb      	ldrb	r3, [r7, #7]
 800a86a:	f1c3 030e 	rsb	r3, r3, #14
 800a86e:	4a2d      	ldr	r2, [pc, #180]	; (800a924 <fm_factory_modify_k_lin_subs+0x1c0>)
 800a870:	5cd3      	ldrb	r3, [r2, r3]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d009      	beq.n	800a88a <fm_factory_modify_k_lin_subs+0x126>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]--;
 800a876:	79fb      	ldrb	r3, [r7, #7]
 800a878:	f1c3 030e 	rsb	r3, r3, #14
 800a87c:	4a29      	ldr	r2, [pc, #164]	; (800a924 <fm_factory_modify_k_lin_subs+0x1c0>)
 800a87e:	5cd2      	ldrb	r2, [r2, r3]
 800a880:	3a01      	subs	r2, #1
 800a882:	b2d1      	uxtb	r1, r2
 800a884:	4a27      	ldr	r2, [pc, #156]	; (800a924 <fm_factory_modify_k_lin_subs+0x1c0>)
 800a886:	54d1      	strb	r1, [r2, r3]
 800a888:	e005      	b.n	800a896 <fm_factory_modify_k_lin_subs+0x132>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_1;
 800a88a:	79fb      	ldrb	r3, [r7, #7]
 800a88c:	f1c3 030e 	rsb	r3, r3, #14
 800a890:	4a24      	ldr	r2, [pc, #144]	; (800a924 <fm_factory_modify_k_lin_subs+0x1c0>)
 800a892:	2101      	movs	r1, #1
 800a894:	54d1      	strb	r1, [r2, r3]
        for(int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800a896:	2300      	movs	r3, #0
 800a898:	60bb      	str	r3, [r7, #8]
 800a89a:	e00e      	b.n	800a8ba <fm_factory_modify_k_lin_subs+0x156>
            frec_lin_new_num = (frec_lin_new_num * 10) + frec_array[j];
 800a89c:	693a      	ldr	r2, [r7, #16]
 800a89e:	4613      	mov	r3, r2
 800a8a0:	009b      	lsls	r3, r3, #2
 800a8a2:	4413      	add	r3, r2
 800a8a4:	005b      	lsls	r3, r3, #1
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	4a1e      	ldr	r2, [pc, #120]	; (800a924 <fm_factory_modify_k_lin_subs+0x1c0>)
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	4413      	add	r3, r2
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	440b      	add	r3, r1
 800a8b2:	613b      	str	r3, [r7, #16]
        for(int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	3301      	adds	r3, #1
 800a8b8:	60bb      	str	r3, [r7, #8]
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	2b06      	cmp	r3, #6
 800a8be:	dded      	ble.n	800a89c <fm_factory_modify_k_lin_subs+0x138>
        if(k_sel == K_LIN_1)
 800a8c0:	79bb      	ldrb	r3, [r7, #6]
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	d103      	bne.n	800a8ce <fm_factory_modify_k_lin_subs+0x16a>
            frec_lin_1.num = frec_lin_new_num;
 800a8c6:	4a18      	ldr	r2, [pc, #96]	; (800a928 <fm_factory_modify_k_lin_subs+0x1c4>)
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	6013      	str	r3, [r2, #0]
}
 800a8cc:	e01a      	b.n	800a904 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_2)
 800a8ce:	79bb      	ldrb	r3, [r7, #6]
 800a8d0:	2b02      	cmp	r3, #2
 800a8d2:	d103      	bne.n	800a8dc <fm_factory_modify_k_lin_subs+0x178>
            frec_lin_2.num = frec_lin_new_num;
 800a8d4:	4a15      	ldr	r2, [pc, #84]	; (800a92c <fm_factory_modify_k_lin_subs+0x1c8>)
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	6013      	str	r3, [r2, #0]
}
 800a8da:	e013      	b.n	800a904 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_3)
 800a8dc:	79bb      	ldrb	r3, [r7, #6]
 800a8de:	2b03      	cmp	r3, #3
 800a8e0:	d103      	bne.n	800a8ea <fm_factory_modify_k_lin_subs+0x186>
            frec_lin_3.num = frec_lin_new_num;
 800a8e2:	4a13      	ldr	r2, [pc, #76]	; (800a930 <fm_factory_modify_k_lin_subs+0x1cc>)
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	6013      	str	r3, [r2, #0]
}
 800a8e8:	e00c      	b.n	800a904 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_4)
 800a8ea:	79bb      	ldrb	r3, [r7, #6]
 800a8ec:	2b04      	cmp	r3, #4
 800a8ee:	d103      	bne.n	800a8f8 <fm_factory_modify_k_lin_subs+0x194>
            frec_lin_4.num = frec_lin_new_num;
 800a8f0:	4a10      	ldr	r2, [pc, #64]	; (800a934 <fm_factory_modify_k_lin_subs+0x1d0>)
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	6013      	str	r3, [r2, #0]
}
 800a8f6:	e005      	b.n	800a904 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_5)
 800a8f8:	79bb      	ldrb	r3, [r7, #6]
 800a8fa:	2b05      	cmp	r3, #5
 800a8fc:	d102      	bne.n	800a904 <fm_factory_modify_k_lin_subs+0x1a0>
            frec_lin_5.num = frec_lin_new_num;
 800a8fe:	4a0e      	ldr	r2, [pc, #56]	; (800a938 <fm_factory_modify_k_lin_subs+0x1d4>)
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	6013      	str	r3, [r2, #0]
}
 800a904:	bf00      	nop
 800a906:	3718      	adds	r7, #24
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}
 800a90c:	20001ca0 	.word	0x20001ca0
 800a910:	200000cc 	.word	0x200000cc
 800a914:	200000d4 	.word	0x200000d4
 800a918:	200000dc 	.word	0x200000dc
 800a91c:	200000e4 	.word	0x200000e4
 800a920:	200000ec 	.word	0x200000ec
 800a924:	20001ca8 	.word	0x20001ca8
 800a928:	200000a4 	.word	0x200000a4
 800a92c:	200000ac 	.word	0x200000ac
 800a930:	200000b4 	.word	0x200000b4
 800a934:	200000bc 	.word	0x200000bc
 800a938:	200000c4 	.word	0x200000c4

0800a93c <fm_factory_modify_res_acm_ttl>:
 * @param Resoluciones de fabrica, y de los parámetros ACM y TTL.
 * @retval None
 */
void fm_factory_modify_res_acm_ttl(sel_resolution_t units_res,
sel_resolution_t acm_res, sel_resolution_t ttl_res)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b083      	sub	sp, #12
 800a940:	af00      	add	r7, sp, #0
 800a942:	4603      	mov	r3, r0
 800a944:	71fb      	strb	r3, [r7, #7]
 800a946:	460b      	mov	r3, r1
 800a948:	71bb      	strb	r3, [r7, #6]
 800a94a:	4613      	mov	r3, r2
 800a94c:	717b      	strb	r3, [r7, #5]
    units_digits_vol.res = units_res;
 800a94e:	4a07      	ldr	r2, [pc, #28]	; (800a96c <fm_factory_modify_res_acm_ttl+0x30>)
 800a950:	79fb      	ldrb	r3, [r7, #7]
 800a952:	7113      	strb	r3, [r2, #4]
    acm_config.volume.res = acm_res;
 800a954:	4a06      	ldr	r2, [pc, #24]	; (800a970 <fm_factory_modify_res_acm_ttl+0x34>)
 800a956:	79bb      	ldrb	r3, [r7, #6]
 800a958:	7313      	strb	r3, [r2, #12]
    ttl_config.volume.res = ttl_res;
 800a95a:	4a06      	ldr	r2, [pc, #24]	; (800a974 <fm_factory_modify_res_acm_ttl+0x38>)
 800a95c:	797b      	ldrb	r3, [r7, #5]
 800a95e:	7313      	strb	r3, [r2, #12]
}
 800a960:	bf00      	nop
 800a962:	370c      	adds	r7, #12
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr
 800a96c:	2000009c 	.word	0x2000009c
 800a970:	20000030 	.word	0x20000030
 800a974:	20000010 	.word	0x20000010

0800a978 <fm_factory_modify_res_rate>:
 * @param Resolución de fabrica, y del parámetro rate.
 * @retval None
 */
void fm_factory_modify_res_rate(sel_resolution_t units_res,
sel_resolution_t rate_res)
{
 800a978:	b480      	push	{r7}
 800a97a:	b083      	sub	sp, #12
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	4603      	mov	r3, r0
 800a980:	460a      	mov	r2, r1
 800a982:	71fb      	strb	r3, [r7, #7]
 800a984:	4613      	mov	r3, r2
 800a986:	71bb      	strb	r3, [r7, #6]
    units_digits_tim.res = units_res;
 800a988:	4a05      	ldr	r2, [pc, #20]	; (800a9a0 <fm_factory_modify_res_rate+0x28>)
 800a98a:	79fb      	ldrb	r3, [r7, #7]
 800a98c:	7113      	strb	r3, [r2, #4]
    rate_config.volume.res = rate_res;
 800a98e:	4a05      	ldr	r2, [pc, #20]	; (800a9a4 <fm_factory_modify_res_rate+0x2c>)
 800a990:	79bb      	ldrb	r3, [r7, #6]
 800a992:	7313      	strb	r3, [r2, #12]
}
 800a994:	bf00      	nop
 800a996:	370c      	adds	r7, #12
 800a998:	46bd      	mov	sp, r7
 800a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99e:	4770      	bx	lr
 800a9a0:	20000094 	.word	0x20000094
 800a9a4:	20000050 	.word	0x20000050

0800a9a8 <fm_factory_modify_time_units>:
 * usuario.
 * @param A que unidad se quiere cambiar.
 * @retval None
 */
void fm_factory_modify_time_units(fmc_unit_time_t time_units)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b083      	sub	sp, #12
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	71fb      	strb	r3, [r7, #7]
    acm_config.unit_time = time_units;
 800a9b2:	4a07      	ldr	r2, [pc, #28]	; (800a9d0 <fm_factory_modify_time_units+0x28>)
 800a9b4:	79fb      	ldrb	r3, [r7, #7]
 800a9b6:	7653      	strb	r3, [r2, #25]
    ttl_config.unit_time = time_units;
 800a9b8:	4a06      	ldr	r2, [pc, #24]	; (800a9d4 <fm_factory_modify_time_units+0x2c>)
 800a9ba:	79fb      	ldrb	r3, [r7, #7]
 800a9bc:	7653      	strb	r3, [r2, #25]
    rate_config.unit_time = time_units;
 800a9be:	4a06      	ldr	r2, [pc, #24]	; (800a9d8 <fm_factory_modify_time_units+0x30>)
 800a9c0:	79fb      	ldrb	r3, [r7, #7]
 800a9c2:	7653      	strb	r3, [r2, #25]
}
 800a9c4:	bf00      	nop
 800a9c6:	370c      	adds	r7, #12
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr
 800a9d0:	20000030 	.word	0x20000030
 800a9d4:	20000010 	.word	0x20000010
 800a9d8:	20000050 	.word	0x20000050

0800a9dc <fm_factory_modify_volume_units>:
 * usuario.
 * @param A que unidad se quiere cambiar.
 * @retval None
 */
void fm_factory_modify_volume_units(fmc_unit_volume_t volume_units)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b083      	sub	sp, #12
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	71fb      	strb	r3, [r7, #7]
    acm_config.unit_volume = volume_units;
 800a9e6:	4a07      	ldr	r2, [pc, #28]	; (800aa04 <fm_factory_modify_volume_units+0x28>)
 800a9e8:	79fb      	ldrb	r3, [r7, #7]
 800a9ea:	7613      	strb	r3, [r2, #24]
    ttl_config.unit_volume = volume_units;
 800a9ec:	4a06      	ldr	r2, [pc, #24]	; (800aa08 <fm_factory_modify_volume_units+0x2c>)
 800a9ee:	79fb      	ldrb	r3, [r7, #7]
 800a9f0:	7613      	strb	r3, [r2, #24]
    rate_config.unit_volume = volume_units;
 800a9f2:	4a06      	ldr	r2, [pc, #24]	; (800aa0c <fm_factory_modify_volume_units+0x30>)
 800a9f4:	79fb      	ldrb	r3, [r7, #7]
 800a9f6:	7613      	strb	r3, [r2, #24]
}
 800a9f8:	bf00      	nop
 800a9fa:	370c      	adds	r7, #12
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr
 800aa04:	20000030 	.word	0x20000030
 800aa08:	20000010 	.word	0x20000010
 800aa0c:	20000050 	.word	0x20000050

0800aa10 <fm_factory_separate_k_factor>:
 * global.
 * @param None
 * @retval None
 */
void fm_factory_separate_k_factor()
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
    uint32_t k_num;
    int i = 7;
 800aa16:	2307      	movs	r3, #7
 800aa18:	60bb      	str	r3, [r7, #8]
    k_num = fm_factory_get_k_factor(K_FACTOR).num;
 800aa1a:	463b      	mov	r3, r7
 800aa1c:	2100      	movs	r1, #0
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f7ff fbb6 	bl	800a190 <fm_factory_get_k_factor>
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	60fb      	str	r3, [r7, #12]

    while (i >= 0)
 800aa28:	e021      	b.n	800aa6e <fm_factory_separate_k_factor+0x5e>
    {
        if (k_num > 0)
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d016      	beq.n	800aa5e <fm_factory_separate_k_factor+0x4e>
        {
            k_array[i] = k_num % 10;
 800aa30:	68f9      	ldr	r1, [r7, #12]
 800aa32:	4b13      	ldr	r3, [pc, #76]	; (800aa80 <fm_factory_separate_k_factor+0x70>)
 800aa34:	fba3 2301 	umull	r2, r3, r3, r1
 800aa38:	08da      	lsrs	r2, r3, #3
 800aa3a:	4613      	mov	r3, r2
 800aa3c:	009b      	lsls	r3, r3, #2
 800aa3e:	4413      	add	r3, r2
 800aa40:	005b      	lsls	r3, r3, #1
 800aa42:	1aca      	subs	r2, r1, r3
 800aa44:	b2d1      	uxtb	r1, r2
 800aa46:	4a0f      	ldr	r2, [pc, #60]	; (800aa84 <fm_factory_separate_k_factor+0x74>)
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	4413      	add	r3, r2
 800aa4c:	460a      	mov	r2, r1
 800aa4e:	701a      	strb	r2, [r3, #0]
            k_num /= 10;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	4a0b      	ldr	r2, [pc, #44]	; (800aa80 <fm_factory_separate_k_factor+0x70>)
 800aa54:	fba2 2303 	umull	r2, r3, r2, r3
 800aa58:	08db      	lsrs	r3, r3, #3
 800aa5a:	60fb      	str	r3, [r7, #12]
 800aa5c:	e004      	b.n	800aa68 <fm_factory_separate_k_factor+0x58>
        }
        else
        {
            k_array[i] = 0;
 800aa5e:	4a09      	ldr	r2, [pc, #36]	; (800aa84 <fm_factory_separate_k_factor+0x74>)
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	4413      	add	r3, r2
 800aa64:	2200      	movs	r2, #0
 800aa66:	701a      	strb	r2, [r3, #0]
        }
        i--;
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	3b01      	subs	r3, #1
 800aa6c:	60bb      	str	r3, [r7, #8]
    while (i >= 0)
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	dada      	bge.n	800aa2a <fm_factory_separate_k_factor+0x1a>
    }
}
 800aa74:	bf00      	nop
 800aa76:	bf00      	nop
 800aa78:	3710      	adds	r7, #16
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
 800aa7e:	bf00      	nop
 800aa80:	cccccccd 	.word	0xcccccccd
 800aa84:	20001c98 	.word	0x20001c98

0800aa88 <fm_factory_separate_k_lin_and_frec>:

void fm_factory_separate_k_lin_and_frec(sel_k k_sel)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b08a      	sub	sp, #40	; 0x28
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	4603      	mov	r3, r0
 800aa90:	71fb      	strb	r3, [r7, #7]
    uint32_t k_lin_num;
    uint32_t frec_num;

    int i = 7; //Contador que funciona solo en el while de esta función.
 800aa92:	2307      	movs	r3, #7
 800aa94:	61fb      	str	r3, [r7, #28]
    int j = 6; //Contador que funciona solo en el while de esta función.
 800aa96:	2306      	movs	r3, #6
 800aa98:	61bb      	str	r3, [r7, #24]
    k_lin_num = fm_factory_get_k_factor(k_sel).num;
 800aa9a:	f107 0308 	add.w	r3, r7, #8
 800aa9e:	79fa      	ldrb	r2, [r7, #7]
 800aaa0:	4611      	mov	r1, r2
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f7ff fb74 	bl	800a190 <fm_factory_get_k_factor>
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	627b      	str	r3, [r7, #36]	; 0x24
    frec_num = fm_factory_get_frec_lin(k_sel).num;
 800aaac:	f107 0310 	add.w	r3, r7, #16
 800aab0:	79fa      	ldrb	r2, [r7, #7]
 800aab2:	4611      	mov	r1, r2
 800aab4:	4618      	mov	r0, r3
 800aab6:	f7ff fbc7 	bl	800a248 <fm_factory_get_frec_lin>
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	623b      	str	r3, [r7, #32]

    while (i >= 0) //Introduzco el factor k linealizado en un arreglo.
 800aabe:	e021      	b.n	800ab04 <fm_factory_separate_k_lin_and_frec+0x7c>
    {
        if (k_lin_num > 0)
 800aac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d016      	beq.n	800aaf4 <fm_factory_separate_k_lin_and_frec+0x6c>
        {
            k_lin_array[i] = k_lin_num % 10;
 800aac6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aac8:	4b25      	ldr	r3, [pc, #148]	; (800ab60 <fm_factory_separate_k_lin_and_frec+0xd8>)
 800aaca:	fba3 2301 	umull	r2, r3, r3, r1
 800aace:	08da      	lsrs	r2, r3, #3
 800aad0:	4613      	mov	r3, r2
 800aad2:	009b      	lsls	r3, r3, #2
 800aad4:	4413      	add	r3, r2
 800aad6:	005b      	lsls	r3, r3, #1
 800aad8:	1aca      	subs	r2, r1, r3
 800aada:	b2d1      	uxtb	r1, r2
 800aadc:	4a21      	ldr	r2, [pc, #132]	; (800ab64 <fm_factory_separate_k_lin_and_frec+0xdc>)
 800aade:	69fb      	ldr	r3, [r7, #28]
 800aae0:	4413      	add	r3, r2
 800aae2:	460a      	mov	r2, r1
 800aae4:	701a      	strb	r2, [r3, #0]
            k_lin_num /= 10;
 800aae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae8:	4a1d      	ldr	r2, [pc, #116]	; (800ab60 <fm_factory_separate_k_lin_and_frec+0xd8>)
 800aaea:	fba2 2303 	umull	r2, r3, r2, r3
 800aaee:	08db      	lsrs	r3, r3, #3
 800aaf0:	627b      	str	r3, [r7, #36]	; 0x24
 800aaf2:	e004      	b.n	800aafe <fm_factory_separate_k_lin_and_frec+0x76>
        }
        else
        {
            k_lin_array[i] = 0;
 800aaf4:	4a1b      	ldr	r2, [pc, #108]	; (800ab64 <fm_factory_separate_k_lin_and_frec+0xdc>)
 800aaf6:	69fb      	ldr	r3, [r7, #28]
 800aaf8:	4413      	add	r3, r2
 800aafa:	2200      	movs	r2, #0
 800aafc:	701a      	strb	r2, [r3, #0]
        }
        i--;
 800aafe:	69fb      	ldr	r3, [r7, #28]
 800ab00:	3b01      	subs	r3, #1
 800ab02:	61fb      	str	r3, [r7, #28]
    while (i >= 0) //Introduzco el factor k linealizado en un arreglo.
 800ab04:	69fb      	ldr	r3, [r7, #28]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	dada      	bge.n	800aac0 <fm_factory_separate_k_lin_and_frec+0x38>
    }

    while(j >= 0) //Introduzco la frecuencia de linealización en otro arreglo.
 800ab0a:	e021      	b.n	800ab50 <fm_factory_separate_k_lin_and_frec+0xc8>
    {
        if(frec_num > 0)
 800ab0c:	6a3b      	ldr	r3, [r7, #32]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d016      	beq.n	800ab40 <fm_factory_separate_k_lin_and_frec+0xb8>
        {
            frec_array[j] = frec_num % 10;
 800ab12:	6a39      	ldr	r1, [r7, #32]
 800ab14:	4b12      	ldr	r3, [pc, #72]	; (800ab60 <fm_factory_separate_k_lin_and_frec+0xd8>)
 800ab16:	fba3 2301 	umull	r2, r3, r3, r1
 800ab1a:	08da      	lsrs	r2, r3, #3
 800ab1c:	4613      	mov	r3, r2
 800ab1e:	009b      	lsls	r3, r3, #2
 800ab20:	4413      	add	r3, r2
 800ab22:	005b      	lsls	r3, r3, #1
 800ab24:	1aca      	subs	r2, r1, r3
 800ab26:	b2d1      	uxtb	r1, r2
 800ab28:	4a0f      	ldr	r2, [pc, #60]	; (800ab68 <fm_factory_separate_k_lin_and_frec+0xe0>)
 800ab2a:	69bb      	ldr	r3, [r7, #24]
 800ab2c:	4413      	add	r3, r2
 800ab2e:	460a      	mov	r2, r1
 800ab30:	701a      	strb	r2, [r3, #0]
            frec_num /= 10;
 800ab32:	6a3b      	ldr	r3, [r7, #32]
 800ab34:	4a0a      	ldr	r2, [pc, #40]	; (800ab60 <fm_factory_separate_k_lin_and_frec+0xd8>)
 800ab36:	fba2 2303 	umull	r2, r3, r2, r3
 800ab3a:	08db      	lsrs	r3, r3, #3
 800ab3c:	623b      	str	r3, [r7, #32]
 800ab3e:	e004      	b.n	800ab4a <fm_factory_separate_k_lin_and_frec+0xc2>
        }
        else
        {
            frec_array[j] = 0;
 800ab40:	4a09      	ldr	r2, [pc, #36]	; (800ab68 <fm_factory_separate_k_lin_and_frec+0xe0>)
 800ab42:	69bb      	ldr	r3, [r7, #24]
 800ab44:	4413      	add	r3, r2
 800ab46:	2200      	movs	r2, #0
 800ab48:	701a      	strb	r2, [r3, #0]
        }
        j--;
 800ab4a:	69bb      	ldr	r3, [r7, #24]
 800ab4c:	3b01      	subs	r3, #1
 800ab4e:	61bb      	str	r3, [r7, #24]
    while(j >= 0) //Introduzco la frecuencia de linealización en otro arreglo.
 800ab50:	69bb      	ldr	r3, [r7, #24]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	dada      	bge.n	800ab0c <fm_factory_separate_k_lin_and_frec+0x84>
    }
}
 800ab56:	bf00      	nop
 800ab58:	bf00      	nop
 800ab5a:	3728      	adds	r7, #40	; 0x28
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	cccccccd 	.word	0xcccccccd
 800ab64:	20001ca0 	.word	0x20001ca0
 800ab68:	20001ca8 	.word	0x20001ca8

0800ab6c <HAL_GPIO_EXTI_Callback>:
// Private function bodies.

// Interrupts

void HAL_GPIO_EXTI_Callback(uint16_t gpio_pin) // @suppress("Name convention for function")
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	4603      	mov	r3, r0
 800ab74:	80fb      	strh	r3, [r7, #6]
    /*
     * Deshabilito interrupciones para evitar rebotes de los botones, hasta que
     * la tarea task_debounce termine su ejecución y se bloquee.
     */
    HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800ab76:	2028      	movs	r0, #40	; 0x28
 800ab78:	f7f8 f910 	bl	8002d9c <HAL_NVIC_DisableIRQ>
    fm_event_t event_now;

    /*
     * Compruebo qué botón fue el presionado.
     */
    switch (gpio_pin)
 800ab7c:	88fb      	ldrh	r3, [r7, #6]
 800ab7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab82:	d018      	beq.n	800abb6 <HAL_GPIO_EXTI_Callback+0x4a>
 800ab84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab88:	dc18      	bgt.n	800abbc <HAL_GPIO_EXTI_Callback+0x50>
 800ab8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab8e:	d00f      	beq.n	800abb0 <HAL_GPIO_EXTI_Callback+0x44>
 800ab90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab94:	dc12      	bgt.n	800abbc <HAL_GPIO_EXTI_Callback+0x50>
 800ab96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab9a:	d003      	beq.n	800aba4 <HAL_GPIO_EXTI_Callback+0x38>
 800ab9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aba0:	d003      	beq.n	800abaa <HAL_GPIO_EXTI_Callback+0x3e>
        break;
        case KEY_ESC:
            event_now = EVENT_KEY_ESC;
        break;
        default:
        break;
 800aba2:	e00b      	b.n	800abbc <HAL_GPIO_EXTI_Callback+0x50>
            event_now = EVENT_KEY_UP;
 800aba4:	2302      	movs	r3, #2
 800aba6:	73fb      	strb	r3, [r7, #15]
        break;
 800aba8:	e009      	b.n	800abbe <HAL_GPIO_EXTI_Callback+0x52>
            event_now = EVENT_KEY_DOWN;
 800abaa:	2303      	movs	r3, #3
 800abac:	73fb      	strb	r3, [r7, #15]
        break;
 800abae:	e006      	b.n	800abbe <HAL_GPIO_EXTI_Callback+0x52>
            event_now = EVENT_KEY_ENTER;
 800abb0:	2304      	movs	r3, #4
 800abb2:	73fb      	strb	r3, [r7, #15]
        break;
 800abb4:	e003      	b.n	800abbe <HAL_GPIO_EXTI_Callback+0x52>
            event_now = EVENT_KEY_ESC;
 800abb6:	2305      	movs	r3, #5
 800abb8:	73fb      	strb	r3, [r7, #15]
        break;
 800abba:	e000      	b.n	800abbe <HAL_GPIO_EXTI_Callback+0x52>
        break;
 800abbc:	bf00      	nop
    /*
     * Pongo el nombre del botón presionado en la cola de eventos y libero el
     * semáforo de la tarea task_debounce, para que esta se bloquee durante el
     * tiempo necesario para que no haya rebotes de los botones.
     */
    tx_queue_send(&event_queue_ptr,&event_now,TX_NO_WAIT);
 800abbe:	f107 030f 	add.w	r3, r7, #15
 800abc2:	2200      	movs	r2, #0
 800abc4:	4619      	mov	r1, r3
 800abc6:	4805      	ldr	r0, [pc, #20]	; (800abdc <HAL_GPIO_EXTI_Callback+0x70>)
 800abc8:	f7fe fe12 	bl	80097f0 <_txe_queue_send>
    tx_semaphore_ceiling_put(&debounce_semaphore_ptr, 1);
 800abcc:	2101      	movs	r1, #1
 800abce:	4804      	ldr	r0, [pc, #16]	; (800abe0 <HAL_GPIO_EXTI_Callback+0x74>)
 800abd0:	f7fe fe58 	bl	8009884 <_txe_semaphore_ceiling_put>
}
 800abd4:	bf00      	nop
 800abd6:	3710      	adds	r7, #16
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}
 800abdc:	20001368 	.word	0x20001368
 800abe0:	200013a0 	.word	0x200013a0

0800abe4 <fm_lcd_acm_rate>:
 * personalizada según las opciones que se elijan.
 * @param None
 * @retval None
 */
void fm_lcd_acm_rate()
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b0b8      	sub	sp, #224	; 0xe0
 800abe8:	af02      	add	r7, sp, #8
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fmc_get_acm().volume, ' ', LINE_0_DIGITS, lcd_msg,
 800abea:	f107 0318 	add.w	r3, r7, #24
 800abee:	4618      	mov	r0, r3
 800abf0:	f004 fdb4 	bl	800f75c <fmc_get_acm>
 800abf4:	2314      	movs	r3, #20
 800abf6:	9301      	str	r3, [sp, #4]
 800abf8:	1d3b      	adds	r3, r7, #4
 800abfa:	9300      	str	r3, [sp, #0]
 800abfc:	2309      	movs	r3, #9
 800abfe:	2220      	movs	r2, #32
 800ac00:	f107 0120 	add.w	r1, r7, #32
 800ac04:	c903      	ldmia	r1, {r0, r1}
 800ac06:	f000 f9eb 	bl	800afe0 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_acm().volume, lcd_msg, sizeof(lcd_msg));
 800ac0a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f004 fda4 	bl	800f75c <fmc_get_acm>
 800ac14:	1d3a      	adds	r2, r7, #4
 800ac16:	2314      	movs	r3, #20
 800ac18:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800ac1c:	c903      	ldmia	r1, {r0, r1}
 800ac1e:	f000 f99b 	bl	800af58 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800ac22:	1d3b      	adds	r3, r7, #4
 800ac24:	2100      	movs	r1, #0
 800ac26:	4618      	mov	r0, r3
 800ac28:	f000 fb7c 	bl	800b324 <fm_lcd_puts>

    fm_lcd_fp_to_str(fmc_get_rate().volume, ' ', LINE_1_DIGITS, lcd_msg,
 800ac2c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ac30:	4618      	mov	r0, r3
 800ac32:	f004 fdf9 	bl	800f828 <fmc_get_rate>
 800ac36:	2314      	movs	r3, #20
 800ac38:	9301      	str	r3, [sp, #4]
 800ac3a:	1d3b      	adds	r3, r7, #4
 800ac3c:	9300      	str	r3, [sp, #0]
 800ac3e:	2308      	movs	r3, #8
 800ac40:	2220      	movs	r2, #32
 800ac42:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800ac46:	c903      	ldmia	r1, {r0, r1}
 800ac48:	f000 f9ca 	bl	800afe0 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_rate().volume, lcd_msg, sizeof(lcd_msg));
 800ac4c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800ac50:	4618      	mov	r0, r3
 800ac52:	f004 fde9 	bl	800f828 <fmc_get_rate>
 800ac56:	1d3a      	adds	r2, r7, #4
 800ac58:	2314      	movs	r3, #20
 800ac5a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800ac5e:	c903      	ldmia	r1, {r0, r1}
 800ac60:	f000 f97a 	bl	800af58 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800ac64:	1d3b      	adds	r3, r7, #4
 800ac66:	2101      	movs	r1, #1
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f000 fb5b 	bl	800b324 <fm_lcd_puts>

    lcd_set_symbol(ACM, 0x0);
 800ac6e:	2100      	movs	r1, #0
 800ac70:	2006      	movs	r0, #6
 800ac72:	f001 fe3f 	bl	800c8f4 <lcd_set_symbol>
    lcd_set_symbol(RATE, 0x0);
 800ac76:	2100      	movs	r1, #0
 800ac78:	2002      	movs	r0, #2
 800ac7a:	f001 fe3b 	bl	800c8f4 <lcd_set_symbol>

    lcd_set_vol_unit(fmc_get_acm().unit_volume, 0x0);
 800ac7e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800ac82:	4618      	mov	r0, r3
 800ac84:	f004 fd6a 	bl	800f75c <fmc_get_acm>
 800ac88:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 800ac8c:	2100      	movs	r1, #0
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f002 f9b4 	bl	800cffc <lcd_set_vol_unit>
    lcd_set_symbol(BACKSLASH, 0x0);
 800ac94:	2100      	movs	r1, #0
 800ac96:	2007      	movs	r0, #7
 800ac98:	f001 fe2c 	bl	800c8f4 <lcd_set_symbol>
    lcd_set_time_unit(fmc_get_acm().unit_time, 0x0);
 800ac9c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800aca0:	4618      	mov	r0, r3
 800aca2:	f004 fd5b 	bl	800f75c <fmc_get_acm>
 800aca6:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 800acaa:	2100      	movs	r1, #0
 800acac:	4618      	mov	r0, r3
 800acae:	f002 f963 	bl	800cf78 <lcd_set_time_unit>
}
 800acb2:	bf00      	nop
 800acb4:	37d8      	adds	r7, #216	; 0xd8
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}

0800acba <fm_lcd_acm_temp>:
 * de forma personalizada según las opciones que se elijan.
 * @param None
 * @retval None
 */
void fm_lcd_acm_temp()
{
 800acba:	b580      	push	{r7, lr}
 800acbc:	b0a2      	sub	sp, #136	; 0x88
 800acbe:	af02      	add	r7, sp, #8
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fmc_get_acm().volume, ' ', LINE_0_DIGITS, lcd_msg,
 800acc0:	f107 0318 	add.w	r3, r7, #24
 800acc4:	4618      	mov	r0, r3
 800acc6:	f004 fd49 	bl	800f75c <fmc_get_acm>
 800acca:	2314      	movs	r3, #20
 800accc:	9301      	str	r3, [sp, #4]
 800acce:	1d3b      	adds	r3, r7, #4
 800acd0:	9300      	str	r3, [sp, #0]
 800acd2:	2309      	movs	r3, #9
 800acd4:	2220      	movs	r2, #32
 800acd6:	f107 0120 	add.w	r1, r7, #32
 800acda:	c903      	ldmia	r1, {r0, r1}
 800acdc:	f000 f980 	bl	800afe0 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_acm().volume, lcd_msg, sizeof(lcd_msg));
 800ace0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ace4:	4618      	mov	r0, r3
 800ace6:	f004 fd39 	bl	800f75c <fmc_get_acm>
 800acea:	1d3a      	adds	r2, r7, #4
 800acec:	2314      	movs	r3, #20
 800acee:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800acf2:	c903      	ldmia	r1, {r0, r1}
 800acf4:	f000 f930 	bl	800af58 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800acf8:	1d3b      	adds	r3, r7, #4
 800acfa:	2100      	movs	r1, #0
 800acfc:	4618      	mov	r0, r3
 800acfe:	f000 fb11 	bl	800b324 <fm_lcd_puts>

    fm_lcd_fp_to_str(fmc_get_stm32_temp().temperature, ' ', LINE_1_DIGITS,
 800ad02:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ad06:	4618      	mov	r0, r3
 800ad08:	f004 fd68 	bl	800f7dc <fmc_get_stm32_temp>
 800ad0c:	2314      	movs	r3, #20
 800ad0e:	9301      	str	r3, [sp, #4]
 800ad10:	1d3b      	adds	r3, r7, #4
 800ad12:	9300      	str	r3, [sp, #0]
 800ad14:	2308      	movs	r3, #8
 800ad16:	2220      	movs	r2, #32
 800ad18:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800ad1c:	c903      	ldmia	r1, {r0, r1}
 800ad1e:	f000 f95f 	bl	800afe0 <fm_lcd_fp_to_str>
    lcd_msg, sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_stm32_temp().temperature, lcd_msg,
 800ad22:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ad26:	4618      	mov	r0, r3
 800ad28:	f004 fd58 	bl	800f7dc <fmc_get_stm32_temp>
 800ad2c:	1d3a      	adds	r2, r7, #4
 800ad2e:	2314      	movs	r3, #20
 800ad30:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800ad34:	c903      	ldmia	r1, {r0, r1}
 800ad36:	f000 f90f 	bl	800af58 <fm_lcd_fp_add_dot>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800ad3a:	1d3b      	adds	r3, r7, #4
 800ad3c:	2101      	movs	r1, #1
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f000 faf0 	bl	800b324 <fm_lcd_puts>

    lcd_set_symbol(ACM, 0x0);
 800ad44:	2100      	movs	r1, #0
 800ad46:	2006      	movs	r0, #6
 800ad48:	f001 fdd4 	bl	800c8f4 <lcd_set_symbol>
    lcd_set_vol_unit(fmc_get_stm32_temp().unit_volume_temp, 0x0);
 800ad4c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800ad50:	4618      	mov	r0, r3
 800ad52:	f004 fd43 	bl	800f7dc <fmc_get_stm32_temp>
 800ad56:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800ad5a:	2100      	movs	r1, #0
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f002 f94d 	bl	800cffc <lcd_set_vol_unit>
}
 800ad62:	bf00      	nop
 800ad64:	3780      	adds	r7, #128	; 0x80
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}

0800ad6a <fm_lcd_clear>:
 * @brief Función que limpia toda la pantalla.
 * @param  None
 * @retval None
 */
void fm_lcd_clear()
{
 800ad6a:	b580      	push	{r7, lr}
 800ad6c:	af00      	add	r7, sp, #0
    lcd_clear_all();
 800ad6e:	f000 fcd1 	bl	800b714 <lcd_clear_all>
}
 800ad72:	bf00      	nop
 800ad74:	bd80      	pop	{r7, pc}
	...

0800ad78 <fm_lcd_date_hour>:
 * @param Hora y fecha a imprimir.
 * @retval None
 */
void fm_lcd_date_hour(user_or_configuration_t configuration,
fm_event_t event_id, sel_date_time_field_t field)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b090      	sub	sp, #64	; 0x40
 800ad7c:	af02      	add	r7, sp, #8
 800ad7e:	4603      	mov	r3, r0
 800ad80:	73fb      	strb	r3, [r7, #15]
 800ad82:	460b      	mov	r3, r1
 800ad84:	73bb      	strb	r3, [r7, #14]
 800ad86:	4613      	mov	r3, r2
 800ad88:	737b      	strb	r3, [r7, #13]
    char lcd_msg[PCF8553_DATA_SIZE];

    /*
     * Se comprueba si se está en el menú de configuración o de usuario.
     */
    if(configuration)
 800ad8a:	7bfb      	ldrb	r3, [r7, #15]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d00a      	beq.n	800ada6 <fm_lcd_date_hour+0x2e>
    {
        date_to_str = fm_factory_get_fp_date_conf();
 800ad90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7ff fae1 	bl	800a35c <fm_factory_get_fp_date_conf>
        time_to_str = fm_factory_get_fp_time_conf();
 800ad9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f7ff faee 	bl	800a380 <fm_factory_get_fp_time_conf>
 800ada4:	e019      	b.n	800adda <fm_lcd_date_hour+0x62>
    }
    else
    {
        fm_calendar_format_date();
 800ada6:	f7ff f939 	bl	800a01c <fm_calendar_format_date>
        fm_calendar_format_time();
 800adaa:	f7ff f911 	bl	8009fd0 <fm_calendar_format_time>

        date_to_str = fm_factory_get_fp_date();
 800adae:	463b      	mov	r3, r7
 800adb0:	4618      	mov	r0, r3
 800adb2:	f7ff faaf 	bl	800a314 <fm_factory_get_fp_date>
 800adb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800adba:	463a      	mov	r2, r7
 800adbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800adc0:	e883 0003 	stmia.w	r3, {r0, r1}
        time_to_str = fm_factory_get_fp_time();
 800adc4:	463b      	mov	r3, r7
 800adc6:	4618      	mov	r0, r3
 800adc8:	f7ff fab6 	bl	800a338 <fm_factory_get_fp_time>
 800adcc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800add0:	463a      	mov	r2, r7
 800add2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800add6:	e883 0003 	stmia.w	r3, {r0, r1}
    }

    fm_lcd_fp_to_str(date_to_str, '0', LINE_0_DIGITS, lcd_msg,
 800adda:	2314      	movs	r3, #20
 800addc:	9301      	str	r3, [sp, #4]
 800adde:	f107 0314 	add.w	r3, r7, #20
 800ade2:	9300      	str	r3, [sp, #0]
 800ade4:	2309      	movs	r3, #9
 800ade6:	2230      	movs	r2, #48	; 0x30
 800ade8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800adec:	c903      	ldmia	r1, {r0, r1}
 800adee:	f000 f8f7 	bl	800afe0 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800adf2:	f107 0314 	add.w	r3, r7, #20
 800adf6:	2100      	movs	r1, #0
 800adf8:	4618      	mov	r0, r3
 800adfa:	f000 fa93 	bl	800b324 <fm_lcd_puts>
    lcd_set_point(HIGH_ROW, PNT_1);
 800adfe:	2101      	movs	r1, #1
 800ae00:	2000      	movs	r0, #0
 800ae02:	f001 fccb 	bl	800c79c <lcd_set_point>
    lcd_set_point(HIGH_ROW, PNT_3);
 800ae06:	2103      	movs	r1, #3
 800ae08:	2000      	movs	r0, #0
 800ae0a:	f001 fcc7 	bl	800c79c <lcd_set_point>

    fm_lcd_fp_to_str(time_to_str, '0', LINE_1_DIGITS, lcd_msg,
 800ae0e:	2314      	movs	r3, #20
 800ae10:	9301      	str	r3, [sp, #4]
 800ae12:	f107 0314 	add.w	r3, r7, #20
 800ae16:	9300      	str	r3, [sp, #0]
 800ae18:	2308      	movs	r3, #8
 800ae1a:	2230      	movs	r2, #48	; 0x30
 800ae1c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800ae20:	c903      	ldmia	r1, {r0, r1}
 800ae22:	f000 f8dd 	bl	800afe0 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800ae26:	f107 0314 	add.w	r3, r7, #20
 800ae2a:	2101      	movs	r1, #1
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f000 fa79 	bl	800b324 <fm_lcd_puts>
    lcd_clear_digit(DIGIT_0, LOW_ROW);
 800ae32:	2101      	movs	r1, #1
 800ae34:	2000      	movs	r0, #0
 800ae36:	f000 fc95 	bl	800b764 <lcd_clear_digit>
    lcd_set_point(LOW_ROW, PNT_2);
 800ae3a:	2102      	movs	r1, #2
 800ae3c:	2001      	movs	r0, #1
 800ae3e:	f001 fcad 	bl	800c79c <lcd_set_point>
    lcd_set_point(LOW_ROW, PNT_4);
 800ae42:	2104      	movs	r1, #4
 800ae44:	2001      	movs	r0, #1
 800ae46:	f001 fca9 	bl	800c79c <lcd_set_point>

    if(configuration)
 800ae4a:	7bfb      	ldrb	r3, [r7, #15]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d059      	beq.n	800af04 <fm_lcd_date_hour+0x18c>
//        if(event_id != EVENT_LCD_REFRESH)
//        {
//            blink = 1;
//        }

        if(blink == 1)
 800ae50:	4b2e      	ldr	r3, [pc, #184]	; (800af0c <fm_lcd_date_hour+0x194>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	2b01      	cmp	r3, #1
 800ae56:	d152      	bne.n	800aefe <fm_lcd_date_hour+0x186>
        {
            if(field == DAY)
 800ae58:	7b7b      	ldrb	r3, [r7, #13]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d108      	bne.n	800ae70 <fm_lcd_date_hour+0xf8>
            {
                lcd_clear_digit(DIGIT_1, HIGH_ROW);
 800ae5e:	2100      	movs	r1, #0
 800ae60:	2001      	movs	r0, #1
 800ae62:	f000 fc7f 	bl	800b764 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_0, HIGH_ROW);
 800ae66:	2100      	movs	r1, #0
 800ae68:	2000      	movs	r0, #0
 800ae6a:	f000 fc7b 	bl	800b764 <lcd_clear_digit>
 800ae6e:	e042      	b.n	800aef6 <fm_lcd_date_hour+0x17e>
            }
            else if(field == MONTH)
 800ae70:	7b7b      	ldrb	r3, [r7, #13]
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d108      	bne.n	800ae88 <fm_lcd_date_hour+0x110>
            {
                lcd_clear_digit(DIGIT_3, HIGH_ROW);
 800ae76:	2100      	movs	r1, #0
 800ae78:	2003      	movs	r0, #3
 800ae7a:	f000 fc73 	bl	800b764 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_2, HIGH_ROW);
 800ae7e:	2100      	movs	r1, #0
 800ae80:	2002      	movs	r0, #2
 800ae82:	f000 fc6f 	bl	800b764 <lcd_clear_digit>
 800ae86:	e036      	b.n	800aef6 <fm_lcd_date_hour+0x17e>
            }
            else if(field == YEAR)
 800ae88:	7b7b      	ldrb	r3, [r7, #13]
 800ae8a:	2b02      	cmp	r3, #2
 800ae8c:	d110      	bne.n	800aeb0 <fm_lcd_date_hour+0x138>
            {
                lcd_clear_digit(DIGIT_7, HIGH_ROW);
 800ae8e:	2100      	movs	r1, #0
 800ae90:	2007      	movs	r0, #7
 800ae92:	f000 fc67 	bl	800b764 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_6, HIGH_ROW);
 800ae96:	2100      	movs	r1, #0
 800ae98:	2006      	movs	r0, #6
 800ae9a:	f000 fc63 	bl	800b764 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_5, HIGH_ROW);
 800ae9e:	2100      	movs	r1, #0
 800aea0:	2005      	movs	r0, #5
 800aea2:	f000 fc5f 	bl	800b764 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_4, HIGH_ROW);
 800aea6:	2100      	movs	r1, #0
 800aea8:	2004      	movs	r0, #4
 800aeaa:	f000 fc5b 	bl	800b764 <lcd_clear_digit>
 800aeae:	e022      	b.n	800aef6 <fm_lcd_date_hour+0x17e>
            }
            else if(field == HOUR)
 800aeb0:	7b7b      	ldrb	r3, [r7, #13]
 800aeb2:	2b03      	cmp	r3, #3
 800aeb4:	d108      	bne.n	800aec8 <fm_lcd_date_hour+0x150>
            {
                lcd_clear_digit(DIGIT_2, LOW_ROW);
 800aeb6:	2101      	movs	r1, #1
 800aeb8:	2002      	movs	r0, #2
 800aeba:	f000 fc53 	bl	800b764 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_1, LOW_ROW);
 800aebe:	2101      	movs	r1, #1
 800aec0:	2001      	movs	r0, #1
 800aec2:	f000 fc4f 	bl	800b764 <lcd_clear_digit>
 800aec6:	e016      	b.n	800aef6 <fm_lcd_date_hour+0x17e>
            }
            else if(field == MINUTE)
 800aec8:	7b7b      	ldrb	r3, [r7, #13]
 800aeca:	2b04      	cmp	r3, #4
 800aecc:	d108      	bne.n	800aee0 <fm_lcd_date_hour+0x168>
            {
                lcd_clear_digit(DIGIT_4, LOW_ROW);
 800aece:	2101      	movs	r1, #1
 800aed0:	2004      	movs	r0, #4
 800aed2:	f000 fc47 	bl	800b764 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_3, LOW_ROW);
 800aed6:	2101      	movs	r1, #1
 800aed8:	2003      	movs	r0, #3
 800aeda:	f000 fc43 	bl	800b764 <lcd_clear_digit>
 800aede:	e00a      	b.n	800aef6 <fm_lcd_date_hour+0x17e>
            }
            else if(field == SECOND)
 800aee0:	7b7b      	ldrb	r3, [r7, #13]
 800aee2:	2b05      	cmp	r3, #5
 800aee4:	d107      	bne.n	800aef6 <fm_lcd_date_hour+0x17e>
            {
                lcd_clear_digit(DIGIT_6, LOW_ROW);
 800aee6:	2101      	movs	r1, #1
 800aee8:	2006      	movs	r0, #6
 800aeea:	f000 fc3b 	bl	800b764 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_5, LOW_ROW);
 800aeee:	2101      	movs	r1, #1
 800aef0:	2005      	movs	r0, #5
 800aef2:	f000 fc37 	bl	800b764 <lcd_clear_digit>
            }

            blink = 0;
 800aef6:	4b05      	ldr	r3, [pc, #20]	; (800af0c <fm_lcd_date_hour+0x194>)
 800aef8:	2200      	movs	r2, #0
 800aefa:	601a      	str	r2, [r3, #0]
        else
        {
            blink = 1;
        }
    }
}
 800aefc:	e002      	b.n	800af04 <fm_lcd_date_hour+0x18c>
            blink = 1;
 800aefe:	4b03      	ldr	r3, [pc, #12]	; (800af0c <fm_lcd_date_hour+0x194>)
 800af00:	2201      	movs	r2, #1
 800af02:	601a      	str	r2, [r3, #0]
}
 800af04:	bf00      	nop
 800af06:	3738      	adds	r7, #56	; 0x38
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}
 800af0c:	2000011c 	.word	0x2000011c

0800af10 <fm_lcd_format_number_in_line>:
 * @param Enumeracion rows_t de lcd.h
 * @retval arreglo con la información formateada tipo char.
 */
void fm_lcd_format_number_in_line(rows_t line, uint32_t data, char *p_str,
int length)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b084      	sub	sp, #16
 800af14:	af00      	add	r7, sp, #0
 800af16:	60b9      	str	r1, [r7, #8]
 800af18:	607a      	str	r2, [r7, #4]
 800af1a:	603b      	str	r3, [r7, #0]
 800af1c:	4603      	mov	r3, r0
 800af1e:	73fb      	strb	r3, [r7, #15]
    if (line == HIGH_ROW)
 800af20:	7bfb      	ldrb	r3, [r7, #15]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d106      	bne.n	800af34 <fm_lcd_format_number_in_line+0x24>
    {
        snprintf(p_str, length, "%8lu", data);
 800af26:	6839      	ldr	r1, [r7, #0]
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	4a09      	ldr	r2, [pc, #36]	; (800af50 <fm_lcd_format_number_in_line+0x40>)
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f004 fd8f 	bl	800fa50 <sniprintf>
    }
    else if (line == LOW_ROW)
    {
        snprintf(p_str, length, "%7lu", data);
    }
}
 800af32:	e008      	b.n	800af46 <fm_lcd_format_number_in_line+0x36>
    else if (line == LOW_ROW)
 800af34:	7bfb      	ldrb	r3, [r7, #15]
 800af36:	2b01      	cmp	r3, #1
 800af38:	d105      	bne.n	800af46 <fm_lcd_format_number_in_line+0x36>
        snprintf(p_str, length, "%7lu", data);
 800af3a:	6839      	ldr	r1, [r7, #0]
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	4a05      	ldr	r2, [pc, #20]	; (800af54 <fm_lcd_format_number_in_line+0x44>)
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f004 fd85 	bl	800fa50 <sniprintf>
}
 800af46:	bf00      	nop
 800af48:	3710      	adds	r7, #16
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}
 800af4e:	bf00      	nop
 800af50:	08010548 	.word	0x08010548
 800af54:	08010550 	.word	0x08010550

0800af58 <fm_lcd_fp_add_dot>:
 * @param str_size tamaño del string.
 * @retval int.
 *
 */
int fm_lcd_fp_add_dot(fmc_fp_t fp, char *p_str, int str_size)
{
 800af58:	b590      	push	{r4, r7, lr}
 800af5a:	b087      	sub	sp, #28
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	f107 0408 	add.w	r4, r7, #8
 800af62:	e884 0003 	stmia.w	r4, {r0, r1}
 800af66:	607a      	str	r2, [r7, #4]
 800af68:	603b      	str	r3, [r7, #0]
    int idx_now;

    /*
     * Si la resolución asignada por el usuario es 0, no hay nada que hacer.
     */
    if (fp.res == 0)
 800af6a:	7b3b      	ldrb	r3, [r7, #12]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d101      	bne.n	800af74 <fm_lcd_fp_add_dot+0x1c>
    {
        return (0);
 800af70:	2300      	movs	r3, #0
 800af72:	e031      	b.n	800afd8 <fm_lcd_fp_add_dot+0x80>
    }

    idx_now = strlen(p_str); //Como indice apunta a terminador nulo.
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f7f5 fa57 	bl	8000428 <strlen>
 800af7a:	4603      	mov	r3, r0
 800af7c:	617b      	str	r3, [r7, #20]

    /*
     * Chequeo de contorno para ver si entra el punto o no.
     */

    if ((idx_now + 1 + 1) >= str_size)
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	3302      	adds	r3, #2
 800af82:	683a      	ldr	r2, [r7, #0]
 800af84:	429a      	cmp	r2, r3
 800af86:	dc02      	bgt.n	800af8e <fm_lcd_fp_add_dot+0x36>
    {
        return (-1);
 800af88:	f04f 33ff 	mov.w	r3, #4294967295
 800af8c:	e024      	b.n	800afd8 <fm_lcd_fp_add_dot+0x80>
    }

    idx_end = idx_now - fp.res; //Como índice apunta a donde debe ir el '.'
 800af8e:	7b3b      	ldrb	r3, [r7, #12]
 800af90:	461a      	mov	r2, r3
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	1a9b      	subs	r3, r3, r2
 800af96:	613b      	str	r3, [r7, #16]

    /*
     * Desplazo posiciones en el arreglo hasta llegar a la posición donde debe
     * ir ubicado el '.'
     */
    while (idx_now != idx_end)
 800af98:	e00b      	b.n	800afb2 <fm_lcd_fp_add_dot+0x5a>
    {
        p_str[idx_now + 1] = p_str[idx_now];
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	441a      	add	r2, r3
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	3301      	adds	r3, #1
 800afa4:	6879      	ldr	r1, [r7, #4]
 800afa6:	440b      	add	r3, r1
 800afa8:	7812      	ldrb	r2, [r2, #0]
 800afaa:	701a      	strb	r2, [r3, #0]
        idx_now--;
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	3b01      	subs	r3, #1
 800afb0:	617b      	str	r3, [r7, #20]
    while (idx_now != idx_end)
 800afb2:	697a      	ldr	r2, [r7, #20]
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d1ef      	bne.n	800af9a <fm_lcd_fp_add_dot+0x42>
    }
    p_str[idx_now + 1] = p_str[idx_now];
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	687a      	ldr	r2, [r7, #4]
 800afbe:	441a      	add	r2, r3
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	3301      	adds	r3, #1
 800afc4:	6879      	ldr	r1, [r7, #4]
 800afc6:	440b      	add	r3, r1
 800afc8:	7812      	ldrb	r2, [r2, #0]
 800afca:	701a      	strb	r2, [r3, #0]
    p_str[idx_now] = '.';
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	4413      	add	r3, r2
 800afd2:	222e      	movs	r2, #46	; 0x2e
 800afd4:	701a      	strb	r2, [r3, #0]

    return (0);
 800afd6:	2300      	movs	r3, #0
}
 800afd8:	4618      	mov	r0, r3
 800afda:	371c      	adds	r7, #28
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd90      	pop	{r4, r7, pc}

0800afe0 <fm_lcd_fp_to_str>:
 * @param str_size tamaño del string.
 * @retval int.
 */
int fm_lcd_fp_to_str(fmc_fp_t fp, char leading_char, int str_width, char *p_str,
int str_size)
{
 800afe0:	b490      	push	{r4, r7}
 800afe2:	b088      	sub	sp, #32
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	f107 0408 	add.w	r4, r7, #8
 800afea:	e884 0003 	stmia.w	r4, {r0, r1}
 800afee:	603b      	str	r3, [r7, #0]
 800aff0:	4613      	mov	r3, r2
 800aff2:	71fb      	strb	r3, [r7, #7]
    int idx_1 = 0;
 800aff4:	2300      	movs	r3, #0
 800aff6:	61fb      	str	r3, [r7, #28]
    /*
     * Este es el unico chequeo de contorno. Verifica que el tamaño del string
     * no sea menor a PCF8553_DATA_SIZE, calculado como suficiente para operar
     * con las líneas del lcd.
     */
    if (str_size < PCF8553_DATA_SIZE)
 800aff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800affa:	2b13      	cmp	r3, #19
 800affc:	dc02      	bgt.n	800b004 <fm_lcd_fp_to_str+0x24>
    {
        return (-1);
 800affe:	f04f 33ff 	mov.w	r3, #4294967295
 800b002:	e086      	b.n	800b112 <fm_lcd_fp_to_str+0x132>
    }

    /*
     * Esta linea es necesaria para representa bien a num = 0
     */
    p_str[idx_1] = fp.num % 10 + '0';
 800b004:	68b9      	ldr	r1, [r7, #8]
 800b006:	4b45      	ldr	r3, [pc, #276]	; (800b11c <fm_lcd_fp_to_str+0x13c>)
 800b008:	fba3 2301 	umull	r2, r3, r3, r1
 800b00c:	08da      	lsrs	r2, r3, #3
 800b00e:	4613      	mov	r3, r2
 800b010:	009b      	lsls	r3, r3, #2
 800b012:	4413      	add	r3, r2
 800b014:	005b      	lsls	r3, r3, #1
 800b016:	1aca      	subs	r2, r1, r3
 800b018:	b2d2      	uxtb	r2, r2
 800b01a:	69fb      	ldr	r3, [r7, #28]
 800b01c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b01e:	440b      	add	r3, r1
 800b020:	3230      	adds	r2, #48	; 0x30
 800b022:	b2d2      	uxtb	r2, r2
 800b024:	701a      	strb	r2, [r3, #0]

    uint32_t num_aux = fp.num;
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	617b      	str	r3, [r7, #20]

    /*
     * Almaceno el número de atrás para adelante hasta que llegar al primer
     * dígito inclusive
     */
    while (fp.num / 10)
 800b02a:	e019      	b.n	800b060 <fm_lcd_fp_to_str+0x80>
    {
        idx_1++;
 800b02c:	69fb      	ldr	r3, [r7, #28]
 800b02e:	3301      	adds	r3, #1
 800b030:	61fb      	str	r3, [r7, #28]
        fp.num /= 10;
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	4a39      	ldr	r2, [pc, #228]	; (800b11c <fm_lcd_fp_to_str+0x13c>)
 800b036:	fba2 2303 	umull	r2, r3, r2, r3
 800b03a:	08db      	lsrs	r3, r3, #3
 800b03c:	60bb      	str	r3, [r7, #8]
        p_str[idx_1] = fp.num % 10 + '0';
 800b03e:	68b9      	ldr	r1, [r7, #8]
 800b040:	4b36      	ldr	r3, [pc, #216]	; (800b11c <fm_lcd_fp_to_str+0x13c>)
 800b042:	fba3 2301 	umull	r2, r3, r3, r1
 800b046:	08da      	lsrs	r2, r3, #3
 800b048:	4613      	mov	r3, r2
 800b04a:	009b      	lsls	r3, r3, #2
 800b04c:	4413      	add	r3, r2
 800b04e:	005b      	lsls	r3, r3, #1
 800b050:	1aca      	subs	r2, r1, r3
 800b052:	b2d2      	uxtb	r2, r2
 800b054:	69fb      	ldr	r3, [r7, #28]
 800b056:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b058:	440b      	add	r3, r1
 800b05a:	3230      	adds	r2, #48	; 0x30
 800b05c:	b2d2      	uxtb	r2, r2
 800b05e:	701a      	strb	r2, [r3, #0]
    while (fp.num / 10)
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	2b09      	cmp	r3, #9
 800b064:	d8e2      	bhi.n	800b02c <fm_lcd_fp_to_str+0x4c>

    /*
     * Si se midió 0 pulsos, se rellena con 0 hasta pasar el punto y asi se
     * mantiene la resolución deseada.
     */
    if (num_aux == 0)
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d119      	bne.n	800b0a0 <fm_lcd_fp_to_str+0xc0>
    {
        while (idx_1 < fp.res)
 800b06c:	e013      	b.n	800b096 <fm_lcd_fp_to_str+0xb6>
        {
            idx_1++;
 800b06e:	69fb      	ldr	r3, [r7, #28]
 800b070:	3301      	adds	r3, #1
 800b072:	61fb      	str	r3, [r7, #28]
            p_str[idx_1] = fp.num % 10 + '0';
 800b074:	68b9      	ldr	r1, [r7, #8]
 800b076:	4b29      	ldr	r3, [pc, #164]	; (800b11c <fm_lcd_fp_to_str+0x13c>)
 800b078:	fba3 2301 	umull	r2, r3, r3, r1
 800b07c:	08da      	lsrs	r2, r3, #3
 800b07e:	4613      	mov	r3, r2
 800b080:	009b      	lsls	r3, r3, #2
 800b082:	4413      	add	r3, r2
 800b084:	005b      	lsls	r3, r3, #1
 800b086:	1aca      	subs	r2, r1, r3
 800b088:	b2d2      	uxtb	r2, r2
 800b08a:	69fb      	ldr	r3, [r7, #28]
 800b08c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b08e:	440b      	add	r3, r1
 800b090:	3230      	adds	r2, #48	; 0x30
 800b092:	b2d2      	uxtb	r2, r2
 800b094:	701a      	strb	r2, [r3, #0]
        while (idx_1 < fp.res)
 800b096:	7b3b      	ldrb	r3, [r7, #12]
 800b098:	461a      	mov	r2, r3
 800b09a:	69fb      	ldr	r3, [r7, #28]
 800b09c:	4293      	cmp	r3, r2
 800b09e:	dbe6      	blt.n	800b06e <fm_lcd_fp_to_str+0x8e>

    /*
     * Si el caracter a completar no es 0, se lo debe agregar al final del
     * arreglo hasta completar el largo de la linea (7 u 8 caracteres + \0).
     */
    if (leading_char)
 800b0a0:	79fb      	ldrb	r3, [r7, #7]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d00d      	beq.n	800b0c2 <fm_lcd_fp_to_str+0xe2>
    {
        while (idx_1 < str_width - 1)
 800b0a6:	e007      	b.n	800b0b8 <fm_lcd_fp_to_str+0xd8>
        {
            idx_1++;
 800b0a8:	69fb      	ldr	r3, [r7, #28]
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	61fb      	str	r3, [r7, #28]
            p_str[idx_1] = leading_char;
 800b0ae:	69fb      	ldr	r3, [r7, #28]
 800b0b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0b2:	4413      	add	r3, r2
 800b0b4:	79fa      	ldrb	r2, [r7, #7]
 800b0b6:	701a      	strb	r2, [r3, #0]
        while (idx_1 < str_width - 1)
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	3b01      	subs	r3, #1
 800b0bc:	69fa      	ldr	r2, [r7, #28]
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	dbf2      	blt.n	800b0a8 <fm_lcd_fp_to_str+0xc8>
        }
    }
    p_str[idx_1] = '\0';
 800b0c2:	69fb      	ldr	r3, [r7, #28]
 800b0c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0c6:	4413      	add	r3, r2
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	701a      	strb	r2, [r3, #0]
    idx_1--;
 800b0cc:	69fb      	ldr	r3, [r7, #28]
 800b0ce:	3b01      	subs	r3, #1
 800b0d0:	61fb      	str	r3, [r7, #28]

    /*
     *Esta sección da vuelta el arreglo ya que se completó al revés.
     */
    int idx_2 = 0;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	61bb      	str	r3, [r7, #24]
    char ch_temp;

    while (idx_1 > idx_2)
 800b0d6:	e017      	b.n	800b108 <fm_lcd_fp_to_str+0x128>
    {
        ch_temp = p_str[idx_1];
 800b0d8:	69fb      	ldr	r3, [r7, #28]
 800b0da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0dc:	4413      	add	r3, r2
 800b0de:	781b      	ldrb	r3, [r3, #0]
 800b0e0:	74fb      	strb	r3, [r7, #19]
        p_str[idx_1] = p_str[idx_2];
 800b0e2:	69bb      	ldr	r3, [r7, #24]
 800b0e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0e6:	441a      	add	r2, r3
 800b0e8:	69fb      	ldr	r3, [r7, #28]
 800b0ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b0ec:	440b      	add	r3, r1
 800b0ee:	7812      	ldrb	r2, [r2, #0]
 800b0f0:	701a      	strb	r2, [r3, #0]
        p_str[idx_2] = ch_temp;
 800b0f2:	69bb      	ldr	r3, [r7, #24]
 800b0f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0f6:	4413      	add	r3, r2
 800b0f8:	7cfa      	ldrb	r2, [r7, #19]
 800b0fa:	701a      	strb	r2, [r3, #0]
        idx_1--;
 800b0fc:	69fb      	ldr	r3, [r7, #28]
 800b0fe:	3b01      	subs	r3, #1
 800b100:	61fb      	str	r3, [r7, #28]
        idx_2++;
 800b102:	69bb      	ldr	r3, [r7, #24]
 800b104:	3301      	adds	r3, #1
 800b106:	61bb      	str	r3, [r7, #24]
    while (idx_1 > idx_2)
 800b108:	69fa      	ldr	r2, [r7, #28]
 800b10a:	69bb      	ldr	r3, [r7, #24]
 800b10c:	429a      	cmp	r2, r3
 800b10e:	dce3      	bgt.n	800b0d8 <fm_lcd_fp_to_str+0xf8>
    }

    return (0);
 800b110:	2300      	movs	r3, #0
}
 800b112:	4618      	mov	r0, r3
 800b114:	3720      	adds	r7, #32
 800b116:	46bd      	mov	sp, r7
 800b118:	bc90      	pop	{r4, r7}
 800b11a:	4770      	bx	lr
 800b11c:	cccccccd 	.word	0xcccccccd

0800b120 <fm_lcd_init>:
 * @brief Es la primera instrucción a llamar para usar el lcd.
 * @param  None
 * @retval None
 */
void fm_lcd_init()
{
 800b120:	b580      	push	{r7, lr}
 800b122:	af00      	add	r7, sp, #0
    lcd_clear_all();
 800b124:	f000 faf6 	bl	800b714 <lcd_clear_all>
    lcd_init();
 800b128:	f001 f942 	bl	800c3b0 <lcd_init>
}
 800b12c:	bf00      	nop
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <fm_lcd_k_factor>:
 * configuración del factor de calibración K.
 * @param  None
 * @retval None
 */
void fm_lcd_k_factor(fm_event_t event_id, sel_digit_t digit_modify)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b08e      	sub	sp, #56	; 0x38
 800b134:	af02      	add	r7, sp, #8
 800b136:	4603      	mov	r3, r0
 800b138:	460a      	mov	r2, r1
 800b13a:	71fb      	strb	r3, [r7, #7]
 800b13c:	4613      	mov	r3, r2
 800b13e:	71bb      	strb	r3, [r7, #6]
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fm_factory_get_k_factor(K_FACTOR), '0',
 800b140:	f107 0320 	add.w	r3, r7, #32
 800b144:	2100      	movs	r1, #0
 800b146:	4618      	mov	r0, r3
 800b148:	f7ff f822 	bl	800a190 <fm_factory_get_k_factor>
 800b14c:	2314      	movs	r3, #20
 800b14e:	9301      	str	r3, [sp, #4]
 800b150:	f107 030c 	add.w	r3, r7, #12
 800b154:	9300      	str	r3, [sp, #0]
 800b156:	2309      	movs	r3, #9
 800b158:	2230      	movs	r2, #48	; 0x30
 800b15a:	f107 0120 	add.w	r1, r7, #32
 800b15e:	c903      	ldmia	r1, {r0, r1}
 800b160:	f7ff ff3e 	bl	800afe0 <fm_lcd_fp_to_str>
    LINE_0_DIGITS, lcd_msg, sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_k_factor(K_FACTOR), lcd_msg,
 800b164:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b168:	2100      	movs	r1, #0
 800b16a:	4618      	mov	r0, r3
 800b16c:	f7ff f810 	bl	800a190 <fm_factory_get_k_factor>
 800b170:	f107 020c 	add.w	r2, r7, #12
 800b174:	2314      	movs	r3, #20
 800b176:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b17a:	c903      	ldmia	r1, {r0, r1}
 800b17c:	f7ff feec 	bl	800af58 <fm_lcd_fp_add_dot>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800b180:	f107 030c 	add.w	r3, r7, #12
 800b184:	2100      	movs	r1, #0
 800b186:	4618      	mov	r0, r3
 800b188:	f000 f8cc 	bl	800b324 <fm_lcd_puts>
//    if(event_id != EVENT_LCD_REFRESH)
//    {
//        blink = 1;
//    }

    if(blink == 1)
 800b18c:	4b0d      	ldr	r3, [pc, #52]	; (800b1c4 <fm_lcd_k_factor+0x94>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	2b01      	cmp	r3, #1
 800b192:	d10b      	bne.n	800b1ac <fm_lcd_k_factor+0x7c>
    {
        lcd_clear_digit(DIG_7 - digit_modify, HIGH_ROW);
 800b194:	79bb      	ldrb	r3, [r7, #6]
 800b196:	f1c3 0307 	rsb	r3, r3, #7
 800b19a:	b2db      	uxtb	r3, r3
 800b19c:	2100      	movs	r1, #0
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f000 fae0 	bl	800b764 <lcd_clear_digit>
        blink = 0;
 800b1a4:	4b07      	ldr	r3, [pc, #28]	; (800b1c4 <fm_lcd_k_factor+0x94>)
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	601a      	str	r2, [r3, #0]
 800b1aa:	e002      	b.n	800b1b2 <fm_lcd_k_factor+0x82>
    }
    else
    {
        blink = 1;
 800b1ac:	4b05      	ldr	r3, [pc, #20]	; (800b1c4 <fm_lcd_k_factor+0x94>)
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	601a      	str	r2, [r3, #0]
    }

    lcd_set_symbol(K, 0x00);
 800b1b2:	2100      	movs	r1, #0
 800b1b4:	200b      	movs	r0, #11
 800b1b6:	f001 fb9d 	bl	800c8f4 <lcd_set_symbol>
}
 800b1ba:	bf00      	nop
 800b1bc:	3730      	adds	r7, #48	; 0x30
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}
 800b1c2:	bf00      	nop
 800b1c4:	2000011c 	.word	0x2000011c

0800b1c8 <fm_lcd_k_lin>:

void fm_lcd_k_lin(sel_k k_sel, fm_event_t event_id, sel_digit_k_lin_t digit_lin_modify)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b090      	sub	sp, #64	; 0x40
 800b1cc:	af02      	add	r7, sp, #8
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	71fb      	strb	r3, [r7, #7]
 800b1d2:	460b      	mov	r3, r1
 800b1d4:	71bb      	strb	r3, [r7, #6]
 800b1d6:	4613      	mov	r3, r2
 800b1d8:	717b      	strb	r3, [r7, #5]
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fm_factory_get_k_factor(k_sel), '0', LINE_0_DIGITS,
 800b1da:	f107 0320 	add.w	r3, r7, #32
 800b1de:	79fa      	ldrb	r2, [r7, #7]
 800b1e0:	4611      	mov	r1, r2
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f7fe ffd4 	bl	800a190 <fm_factory_get_k_factor>
 800b1e8:	2314      	movs	r3, #20
 800b1ea:	9301      	str	r3, [sp, #4]
 800b1ec:	f107 030c 	add.w	r3, r7, #12
 800b1f0:	9300      	str	r3, [sp, #0]
 800b1f2:	2309      	movs	r3, #9
 800b1f4:	2230      	movs	r2, #48	; 0x30
 800b1f6:	f107 0120 	add.w	r1, r7, #32
 800b1fa:	c903      	ldmia	r1, {r0, r1}
 800b1fc:	f7ff fef0 	bl	800afe0 <fm_lcd_fp_to_str>
    lcd_msg, sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_k_factor(k_sel), lcd_msg,
 800b200:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b204:	79fa      	ldrb	r2, [r7, #7]
 800b206:	4611      	mov	r1, r2
 800b208:	4618      	mov	r0, r3
 800b20a:	f7fe ffc1 	bl	800a190 <fm_factory_get_k_factor>
 800b20e:	f107 020c 	add.w	r2, r7, #12
 800b212:	2314      	movs	r3, #20
 800b214:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b218:	c903      	ldmia	r1, {r0, r1}
 800b21a:	f7ff fe9d 	bl	800af58 <fm_lcd_fp_add_dot>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800b21e:	f107 030c 	add.w	r3, r7, #12
 800b222:	2100      	movs	r1, #0
 800b224:	4618      	mov	r0, r3
 800b226:	f000 f87d 	bl	800b324 <fm_lcd_puts>

    fm_lcd_fp_to_str(fm_factory_get_frec_lin(k_sel), '0', LINE_1_DIGITS,
 800b22a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b22e:	79fa      	ldrb	r2, [r7, #7]
 800b230:	4611      	mov	r1, r2
 800b232:	4618      	mov	r0, r3
 800b234:	f7ff f808 	bl	800a248 <fm_factory_get_frec_lin>
 800b238:	2314      	movs	r3, #20
 800b23a:	9301      	str	r3, [sp, #4]
 800b23c:	f107 030c 	add.w	r3, r7, #12
 800b240:	9300      	str	r3, [sp, #0]
 800b242:	2308      	movs	r3, #8
 800b244:	2230      	movs	r2, #48	; 0x30
 800b246:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800b24a:	c903      	ldmia	r1, {r0, r1}
 800b24c:	f7ff fec8 	bl	800afe0 <fm_lcd_fp_to_str>
    lcd_msg, sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800b250:	f107 030c 	add.w	r3, r7, #12
 800b254:	2101      	movs	r1, #1
 800b256:	4618      	mov	r0, r3
 800b258:	f000 f864 	bl	800b324 <fm_lcd_puts>
    lcd_clear_digit(DIGIT_0, LOW_ROW);
 800b25c:	2101      	movs	r1, #1
 800b25e:	2000      	movs	r0, #0
 800b260:	f000 fa80 	bl	800b764 <lcd_clear_digit>
    lcd_clear_digit(DIGIT_1, LOW_ROW);
 800b264:	2101      	movs	r1, #1
 800b266:	2001      	movs	r0, #1
 800b268:	f000 fa7c 	bl	800b764 <lcd_clear_digit>
    lcd_clear_digit(DIGIT_2, LOW_ROW);
 800b26c:	2101      	movs	r1, #1
 800b26e:	2002      	movs	r0, #2
 800b270:	f000 fa78 	bl	800b764 <lcd_clear_digit>
//    if(event_id != EVENT_LCD_REFRESH)
//    {
//        blink = 1;
//    }

    if(digit_lin_modify <= DIG_LIN_7)
 800b274:	797b      	ldrb	r3, [r7, #5]
 800b276:	2b07      	cmp	r3, #7
 800b278:	d813      	bhi.n	800b2a2 <fm_lcd_k_lin+0xda>
    {
        if(blink == 1)
 800b27a:	4b29      	ldr	r3, [pc, #164]	; (800b320 <fm_lcd_k_lin+0x158>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	2b01      	cmp	r3, #1
 800b280:	d10b      	bne.n	800b29a <fm_lcd_k_lin+0xd2>
        {
            lcd_clear_digit(DIG_LIN_7 - digit_lin_modify, HIGH_ROW);
 800b282:	797b      	ldrb	r3, [r7, #5]
 800b284:	f1c3 0307 	rsb	r3, r3, #7
 800b288:	b2db      	uxtb	r3, r3
 800b28a:	2100      	movs	r1, #0
 800b28c:	4618      	mov	r0, r3
 800b28e:	f000 fa69 	bl	800b764 <lcd_clear_digit>
            blink = 0;
 800b292:	4b23      	ldr	r3, [pc, #140]	; (800b320 <fm_lcd_k_lin+0x158>)
 800b294:	2200      	movs	r2, #0
 800b296:	601a      	str	r2, [r3, #0]
 800b298:	e016      	b.n	800b2c8 <fm_lcd_k_lin+0x100>
        }
        else
        {
            blink = 1;
 800b29a:	4b21      	ldr	r3, [pc, #132]	; (800b320 <fm_lcd_k_lin+0x158>)
 800b29c:	2201      	movs	r2, #1
 800b29e:	601a      	str	r2, [r3, #0]
 800b2a0:	e012      	b.n	800b2c8 <fm_lcd_k_lin+0x100>
        }
    }
    else
    {
        if(blink == 1)
 800b2a2:	4b1f      	ldr	r3, [pc, #124]	; (800b320 <fm_lcd_k_lin+0x158>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	2b01      	cmp	r3, #1
 800b2a8:	d10b      	bne.n	800b2c2 <fm_lcd_k_lin+0xfa>
        {
            lcd_clear_digit(DIG_LIN_6 - digit_lin_modify + DIG_LIN_8, LOW_ROW);
 800b2aa:	797b      	ldrb	r3, [r7, #5]
 800b2ac:	f1c3 030e 	rsb	r3, r3, #14
 800b2b0:	b2db      	uxtb	r3, r3
 800b2b2:	2101      	movs	r1, #1
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f000 fa55 	bl	800b764 <lcd_clear_digit>
            blink = 0;
 800b2ba:	4b19      	ldr	r3, [pc, #100]	; (800b320 <fm_lcd_k_lin+0x158>)
 800b2bc:	2200      	movs	r2, #0
 800b2be:	601a      	str	r2, [r3, #0]
 800b2c0:	e002      	b.n	800b2c8 <fm_lcd_k_lin+0x100>
        }
        else
        {
            blink = 1;
 800b2c2:	4b17      	ldr	r3, [pc, #92]	; (800b320 <fm_lcd_k_lin+0x158>)
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	601a      	str	r2, [r3, #0]
        }
    }

    lcd_set_symbol(F, 0x00);
 800b2c8:	2100      	movs	r1, #0
 800b2ca:	2010      	movs	r0, #16
 800b2cc:	f001 fb12 	bl	800c8f4 <lcd_set_symbol>
    if(k_sel == K_LIN_1)
 800b2d0:	79fb      	ldrb	r3, [r7, #7]
 800b2d2:	2b01      	cmp	r3, #1
 800b2d4:	d103      	bne.n	800b2de <fm_lcd_k_lin+0x116>
    {
        lcd_set_symbol(LIN_1, 0x00);
 800b2d6:	2100      	movs	r1, #0
 800b2d8:	2011      	movs	r0, #17
 800b2da:	f001 fb0b 	bl	800c8f4 <lcd_set_symbol>
    }
    if(k_sel == K_LIN_2)
 800b2de:	79fb      	ldrb	r3, [r7, #7]
 800b2e0:	2b02      	cmp	r3, #2
 800b2e2:	d103      	bne.n	800b2ec <fm_lcd_k_lin+0x124>
    {
        lcd_set_symbol(LIN_2, 0x00);
 800b2e4:	2100      	movs	r1, #0
 800b2e6:	2012      	movs	r0, #18
 800b2e8:	f001 fb04 	bl	800c8f4 <lcd_set_symbol>
    }
    if(k_sel == K_LIN_3)
 800b2ec:	79fb      	ldrb	r3, [r7, #7]
 800b2ee:	2b03      	cmp	r3, #3
 800b2f0:	d103      	bne.n	800b2fa <fm_lcd_k_lin+0x132>
    {
        lcd_set_symbol(LIN_3, 0x00);
 800b2f2:	2100      	movs	r1, #0
 800b2f4:	2013      	movs	r0, #19
 800b2f6:	f001 fafd 	bl	800c8f4 <lcd_set_symbol>
    }
    if(k_sel == K_LIN_4)
 800b2fa:	79fb      	ldrb	r3, [r7, #7]
 800b2fc:	2b04      	cmp	r3, #4
 800b2fe:	d103      	bne.n	800b308 <fm_lcd_k_lin+0x140>
    {
        lcd_set_symbol(LIN_4, 0x00);
 800b300:	2100      	movs	r1, #0
 800b302:	2014      	movs	r0, #20
 800b304:	f001 faf6 	bl	800c8f4 <lcd_set_symbol>
    }
    if(k_sel == K_LIN_5)
 800b308:	79fb      	ldrb	r3, [r7, #7]
 800b30a:	2b05      	cmp	r3, #5
 800b30c:	d103      	bne.n	800b316 <fm_lcd_k_lin+0x14e>
    {
        lcd_set_symbol(LIN_5, 0x00);
 800b30e:	2100      	movs	r1, #0
 800b310:	2015      	movs	r0, #21
 800b312:	f001 faef 	bl	800c8f4 <lcd_set_symbol>
    }
}
 800b316:	bf00      	nop
 800b318:	3738      	adds	r7, #56	; 0x38
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop
 800b320:	2000011c 	.word	0x2000011c

0800b324 <fm_lcd_puts>:
 * @param Arreglo a imprimir.
 * @param Fila donde se coloca el arreglo a imprimir.
 * @retval None
 */
void fm_lcd_puts(const char *c, const rows_t row)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b084      	sub	sp, #16
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	460b      	mov	r3, r1
 800b32e:	70fb      	strb	r3, [r7, #3]
    uint8_t col = 0;
 800b330:	2300      	movs	r3, #0
 800b332:	73fb      	strb	r3, [r7, #15]
    uint8_t col_limit;

    if (row == 0)
 800b334:	78fb      	ldrb	r3, [r7, #3]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d102      	bne.n	800b340 <fm_lcd_puts+0x1c>
    {
        col_limit = LINE_0_DIGITS - 1;
 800b33a:	2308      	movs	r3, #8
 800b33c:	73bb      	strb	r3, [r7, #14]
 800b33e:	e026      	b.n	800b38e <fm_lcd_puts+0x6a>
    }
    else
    {
        col_limit = LINE_1_DIGITS - 1;
 800b340:	2307      	movs	r3, #7
 800b342:	73bb      	strb	r3, [r7, #14]
    }

    while ((*c) && (col < col_limit))
 800b344:	e023      	b.n	800b38e <fm_lcd_puts+0x6a>
    {
        if (((*c >= '0') && (*c <= '9')) || (*c == ' ') || (*c == '.'))
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	2b2f      	cmp	r3, #47	; 0x2f
 800b34c:	d903      	bls.n	800b356 <fm_lcd_puts+0x32>
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	781b      	ldrb	r3, [r3, #0]
 800b352:	2b39      	cmp	r3, #57	; 0x39
 800b354:	d907      	bls.n	800b366 <fm_lcd_puts+0x42>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	781b      	ldrb	r3, [r3, #0]
 800b35a:	2b20      	cmp	r3, #32
 800b35c:	d003      	beq.n	800b366 <fm_lcd_puts+0x42>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	2b2e      	cmp	r3, #46	; 0x2e
 800b364:	d106      	bne.n	800b374 <fm_lcd_puts+0x50>
        {
            lcd_put_char(*c, col, row);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	781b      	ldrb	r3, [r3, #0]
 800b36a:	78fa      	ldrb	r2, [r7, #3]
 800b36c:	7bf9      	ldrb	r1, [r7, #15]
 800b36e:	4618      	mov	r0, r3
 800b370:	f001 f824 	bl	800c3bc <lcd_put_char>
        }
        col++;
 800b374:	7bfb      	ldrb	r3, [r7, #15]
 800b376:	3301      	adds	r3, #1
 800b378:	73fb      	strb	r3, [r7, #15]
        c++;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	3301      	adds	r3, #1
 800b37e:	607b      	str	r3, [r7, #4]
        if (*c == '.')
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	781b      	ldrb	r3, [r3, #0]
 800b384:	2b2e      	cmp	r3, #46	; 0x2e
 800b386:	d102      	bne.n	800b38e <fm_lcd_puts+0x6a>
        {
            col--;
 800b388:	7bfb      	ldrb	r3, [r7, #15]
 800b38a:	3b01      	subs	r3, #1
 800b38c:	73fb      	strb	r3, [r7, #15]
    while ((*c) && (col < col_limit))
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	781b      	ldrb	r3, [r3, #0]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d003      	beq.n	800b39e <fm_lcd_puts+0x7a>
 800b396:	7bfa      	ldrb	r2, [r7, #15]
 800b398:	7bbb      	ldrb	r3, [r7, #14]
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d3d3      	bcc.n	800b346 <fm_lcd_puts+0x22>
        }
    }
}
 800b39e:	bf00      	nop
 800b3a0:	3710      	adds	r7, #16
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}

0800b3a6 <fm_lcd_refresh>:
 * la librería de mas bajo nivel 'lcd.h'.
 * @param  None
 * @retval None
 */
void fm_lcd_refresh()
{
 800b3a6:	b580      	push	{r7, lr}
 800b3a8:	af00      	add	r7, sp, #0
    lcd_refresh();
 800b3aa:	f001 f9f1 	bl	800c790 <lcd_refresh>
}
 800b3ae:	bf00      	nop
 800b3b0:	bd80      	pop	{r7, pc}

0800b3b2 <fm_lcd_ttl_rate>:
 * personalizada según las opciones que se elijan.
 * @param None
 * @retval None
 */
void fm_lcd_ttl_rate()
{
 800b3b2:	b580      	push	{r7, lr}
 800b3b4:	b0b8      	sub	sp, #224	; 0xe0
 800b3b6:	af02      	add	r7, sp, #8
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fmc_get_ttl().volume, ' ', LINE_0_DIGITS, lcd_msg,
 800b3b8:	f107 0318 	add.w	r3, r7, #24
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f004 fa73 	bl	800f8a8 <fmc_get_ttl>
 800b3c2:	2314      	movs	r3, #20
 800b3c4:	9301      	str	r3, [sp, #4]
 800b3c6:	1d3b      	adds	r3, r7, #4
 800b3c8:	9300      	str	r3, [sp, #0]
 800b3ca:	2309      	movs	r3, #9
 800b3cc:	2220      	movs	r2, #32
 800b3ce:	f107 0120 	add.w	r1, r7, #32
 800b3d2:	c903      	ldmia	r1, {r0, r1}
 800b3d4:	f7ff fe04 	bl	800afe0 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_ttl().volume, lcd_msg, sizeof(lcd_msg));
 800b3d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f004 fa63 	bl	800f8a8 <fmc_get_ttl>
 800b3e2:	1d3a      	adds	r2, r7, #4
 800b3e4:	2314      	movs	r3, #20
 800b3e6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800b3ea:	c903      	ldmia	r1, {r0, r1}
 800b3ec:	f7ff fdb4 	bl	800af58 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800b3f0:	1d3b      	adds	r3, r7, #4
 800b3f2:	2100      	movs	r1, #0
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f7ff ff95 	bl	800b324 <fm_lcd_puts>

    fm_lcd_fp_to_str(fmc_get_rate().volume, ' ', LINE_1_DIGITS, lcd_msg,
 800b3fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b3fe:	4618      	mov	r0, r3
 800b400:	f004 fa12 	bl	800f828 <fmc_get_rate>
 800b404:	2314      	movs	r3, #20
 800b406:	9301      	str	r3, [sp, #4]
 800b408:	1d3b      	adds	r3, r7, #4
 800b40a:	9300      	str	r3, [sp, #0]
 800b40c:	2308      	movs	r3, #8
 800b40e:	2220      	movs	r2, #32
 800b410:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800b414:	c903      	ldmia	r1, {r0, r1}
 800b416:	f7ff fde3 	bl	800afe0 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_rate().volume, lcd_msg, sizeof(lcd_msg));
 800b41a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b41e:	4618      	mov	r0, r3
 800b420:	f004 fa02 	bl	800f828 <fmc_get_rate>
 800b424:	1d3a      	adds	r2, r7, #4
 800b426:	2314      	movs	r3, #20
 800b428:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800b42c:	c903      	ldmia	r1, {r0, r1}
 800b42e:	f7ff fd93 	bl	800af58 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800b432:	1d3b      	adds	r3, r7, #4
 800b434:	2101      	movs	r1, #1
 800b436:	4618      	mov	r0, r3
 800b438:	f7ff ff74 	bl	800b324 <fm_lcd_puts>

    lcd_set_symbol(TTL, 0x0);
 800b43c:	2100      	movs	r1, #0
 800b43e:	2005      	movs	r0, #5
 800b440:	f001 fa58 	bl	800c8f4 <lcd_set_symbol>
    lcd_set_symbol(RATE, 0x0);
 800b444:	2100      	movs	r1, #0
 800b446:	2002      	movs	r0, #2
 800b448:	f001 fa54 	bl	800c8f4 <lcd_set_symbol>

    lcd_set_vol_unit(fmc_get_ttl().unit_volume, 0x0);
 800b44c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800b450:	4618      	mov	r0, r3
 800b452:	f004 fa29 	bl	800f8a8 <fmc_get_ttl>
 800b456:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 800b45a:	2100      	movs	r1, #0
 800b45c:	4618      	mov	r0, r3
 800b45e:	f001 fdcd 	bl	800cffc <lcd_set_vol_unit>
    lcd_set_symbol(BACKSLASH, 0x0);
 800b462:	2100      	movs	r1, #0
 800b464:	2007      	movs	r0, #7
 800b466:	f001 fa45 	bl	800c8f4 <lcd_set_symbol>
    lcd_set_time_unit(fmc_get_ttl().unit_time, 0x0);
 800b46a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800b46e:	4618      	mov	r0, r3
 800b470:	f004 fa1a 	bl	800f8a8 <fmc_get_ttl>
 800b474:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 800b478:	2100      	movs	r1, #0
 800b47a:	4618      	mov	r0, r3
 800b47c:	f001 fd7c 	bl	800cf78 <lcd_set_time_unit>
}
 800b480:	bf00      	nop
 800b482:	37d8      	adds	r7, #216	; 0xd8
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <fm_lcd_units_tim>:
 * configuración de unidades tiempo y la resolución del factor RATE.
 * @param  None
 * @retval None
 */
void fm_lcd_units_tim(fm_event_t event_id)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b0a6      	sub	sp, #152	; 0x98
 800b48c:	af02      	add	r7, sp, #8
 800b48e:	4603      	mov	r3, r0
 800b490:	71fb      	strb	r3, [r7, #7]
    char lcd_msg[PCF8553_DATA_SIZE];
    point_t resolution_modify;

    fm_lcd_fp_to_str(fm_factory_get_units_tim(), '0', LINE_1_DIGITS, lcd_msg,
 800b492:	f107 0320 	add.w	r3, r7, #32
 800b496:	4618      	mov	r0, r3
 800b498:	f7fe fe56 	bl	800a148 <fm_factory_get_units_tim>
 800b49c:	2314      	movs	r3, #20
 800b49e:	9301      	str	r3, [sp, #4]
 800b4a0:	f107 030c 	add.w	r3, r7, #12
 800b4a4:	9300      	str	r3, [sp, #0]
 800b4a6:	2308      	movs	r3, #8
 800b4a8:	2230      	movs	r2, #48	; 0x30
 800b4aa:	f107 0120 	add.w	r1, r7, #32
 800b4ae:	c903      	ldmia	r1, {r0, r1}
 800b4b0:	f7ff fd96 	bl	800afe0 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_units_tim(), lcd_msg, sizeof(lcd_msg));
 800b4b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f7fe fe45 	bl	800a148 <fm_factory_get_units_tim>
 800b4be:	f107 020c 	add.w	r2, r7, #12
 800b4c2:	2314      	movs	r3, #20
 800b4c4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b4c8:	c903      	ldmia	r1, {r0, r1}
 800b4ca:	f7ff fd45 	bl	800af58 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800b4ce:	f107 030c 	add.w	r3, r7, #12
 800b4d2:	2101      	movs	r1, #1
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f7ff ff25 	bl	800b324 <fm_lcd_puts>

    if(blink == 1)
 800b4da:	4b30      	ldr	r3, [pc, #192]	; (800b59c <fm_lcd_units_tim+0x114>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	2b01      	cmp	r3, #1
 800b4e0:	d146      	bne.n	800b570 <fm_lcd_units_tim+0xe8>
    {
        if(fm_factory_get_units_tim().res == 1)
 800b4e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f7fe fe2e 	bl	800a148 <fm_factory_get_units_tim>
 800b4ec:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d109      	bne.n	800b508 <fm_lcd_units_tim+0x80>
        {
            resolution_modify = PNT_5;
 800b4f4:	2305      	movs	r3, #5
 800b4f6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(LOW_ROW, resolution_modify);
 800b4fa:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b4fe:	4619      	mov	r1, r3
 800b500:	2001      	movs	r0, #1
 800b502:	f000 fc6d 	bl	800bde0 <lcd_clear_point>
 800b506:	e024      	b.n	800b552 <fm_lcd_units_tim+0xca>
        }
        else if(fm_factory_get_units_tim().res == 2)
 800b508:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b50c:	4618      	mov	r0, r3
 800b50e:	f7fe fe1b 	bl	800a148 <fm_factory_get_units_tim>
 800b512:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b516:	2b02      	cmp	r3, #2
 800b518:	d109      	bne.n	800b52e <fm_lcd_units_tim+0xa6>
        {
            resolution_modify = PNT_4;
 800b51a:	2304      	movs	r3, #4
 800b51c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(LOW_ROW, resolution_modify);
 800b520:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b524:	4619      	mov	r1, r3
 800b526:	2001      	movs	r0, #1
 800b528:	f000 fc5a 	bl	800bde0 <lcd_clear_point>
 800b52c:	e011      	b.n	800b552 <fm_lcd_units_tim+0xca>
        }
        else if(fm_factory_get_units_tim().res == 3)
 800b52e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b532:	4618      	mov	r0, r3
 800b534:	f7fe fe08 	bl	800a148 <fm_factory_get_units_tim>
 800b538:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800b53c:	2b03      	cmp	r3, #3
 800b53e:	d108      	bne.n	800b552 <fm_lcd_units_tim+0xca>
        {
            resolution_modify = PNT_3;
 800b540:	2303      	movs	r3, #3
 800b542:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(LOW_ROW, resolution_modify);
 800b546:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b54a:	4619      	mov	r1, r3
 800b54c:	2001      	movs	r0, #1
 800b54e:	f000 fc47 	bl	800bde0 <lcd_clear_point>
        }

        lcd_clear_time_unit(fmc_get_rate().unit_time, 0x0);
 800b552:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b556:	4618      	mov	r0, r3
 800b558:	f004 f966 	bl	800f828 <fmc_get_rate>
 800b55c:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800b560:	2100      	movs	r1, #0
 800b562:	4618      	mov	r0, r3
 800b564:	f000 fce8 	bl	800bf38 <lcd_clear_time_unit>

        blink = 0;
 800b568:	4b0c      	ldr	r3, [pc, #48]	; (800b59c <fm_lcd_units_tim+0x114>)
 800b56a:	2200      	movs	r2, #0
 800b56c:	601a      	str	r2, [r3, #0]
 800b56e:	e00d      	b.n	800b58c <fm_lcd_units_tim+0x104>
    }
    else
    {
        lcd_set_time_unit(fmc_get_rate().unit_time, 0x0);
 800b570:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b574:	4618      	mov	r0, r3
 800b576:	f004 f957 	bl	800f828 <fmc_get_rate>
 800b57a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800b57e:	2100      	movs	r1, #0
 800b580:	4618      	mov	r0, r3
 800b582:	f001 fcf9 	bl	800cf78 <lcd_set_time_unit>
        blink = 1;
 800b586:	4b05      	ldr	r3, [pc, #20]	; (800b59c <fm_lcd_units_tim+0x114>)
 800b588:	2201      	movs	r2, #1
 800b58a:	601a      	str	r2, [r3, #0]
    }

    lcd_set_symbol(RATE, 0x00);
 800b58c:	2100      	movs	r1, #0
 800b58e:	2002      	movs	r0, #2
 800b590:	f001 f9b0 	bl	800c8f4 <lcd_set_symbol>
}
 800b594:	bf00      	nop
 800b596:	3790      	adds	r7, #144	; 0x90
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}
 800b59c:	2000011c 	.word	0x2000011c

0800b5a0 <fm_lcd_units_vol>:
 * TTL.
 * @param  None
 * @retval None
 */
void fm_lcd_units_vol(fm_event_t event_id)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b0a6      	sub	sp, #152	; 0x98
 800b5a4:	af02      	add	r7, sp, #8
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	71fb      	strb	r3, [r7, #7]
    char lcd_msg[PCF8553_DATA_SIZE];
    point_t resolution_modify;

    fm_lcd_fp_to_str(fm_factory_get_units_vol(), '0', LINE_0_DIGITS,
 800b5aa:	f107 0320 	add.w	r3, r7, #32
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7fe fddc 	bl	800a16c <fm_factory_get_units_vol>
 800b5b4:	2314      	movs	r3, #20
 800b5b6:	9301      	str	r3, [sp, #4]
 800b5b8:	f107 030c 	add.w	r3, r7, #12
 800b5bc:	9300      	str	r3, [sp, #0]
 800b5be:	2309      	movs	r3, #9
 800b5c0:	2230      	movs	r2, #48	; 0x30
 800b5c2:	f107 0120 	add.w	r1, r7, #32
 800b5c6:	c903      	ldmia	r1, {r0, r1}
 800b5c8:	f7ff fd0a 	bl	800afe0 <fm_lcd_fp_to_str>
    lcd_msg, sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_units_vol(), lcd_msg, sizeof(lcd_msg));
 800b5cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f7fe fdcb 	bl	800a16c <fm_factory_get_units_vol>
 800b5d6:	f107 020c 	add.w	r2, r7, #12
 800b5da:	2314      	movs	r3, #20
 800b5dc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b5e0:	c903      	ldmia	r1, {r0, r1}
 800b5e2:	f7ff fcb9 	bl	800af58 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800b5e6:	f107 030c 	add.w	r3, r7, #12
 800b5ea:	2100      	movs	r1, #0
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f7ff fe99 	bl	800b324 <fm_lcd_puts>
//    if(event_id != EVENT_LCD_REFRESH)
//    {
//        blink = 1;
//    }

    if(blink == 1)
 800b5f2:	4b32      	ldr	r3, [pc, #200]	; (800b6bc <fm_lcd_units_vol+0x11c>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	2b01      	cmp	r3, #1
 800b5f8:	d146      	bne.n	800b688 <fm_lcd_units_vol+0xe8>
    {
        if(fm_factory_get_units_vol().res == 1)
 800b5fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b5fe:	4618      	mov	r0, r3
 800b600:	f7fe fdb4 	bl	800a16c <fm_factory_get_units_vol>
 800b604:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b608:	2b01      	cmp	r3, #1
 800b60a:	d109      	bne.n	800b620 <fm_lcd_units_vol+0x80>
        {
            resolution_modify = PNT_6;
 800b60c:	2306      	movs	r3, #6
 800b60e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(HIGH_ROW, resolution_modify);
 800b612:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b616:	4619      	mov	r1, r3
 800b618:	2000      	movs	r0, #0
 800b61a:	f000 fbe1 	bl	800bde0 <lcd_clear_point>
 800b61e:	e024      	b.n	800b66a <fm_lcd_units_vol+0xca>
        }
        else if(fm_factory_get_units_vol().res == 2)
 800b620:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b624:	4618      	mov	r0, r3
 800b626:	f7fe fda1 	bl	800a16c <fm_factory_get_units_vol>
 800b62a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b62e:	2b02      	cmp	r3, #2
 800b630:	d109      	bne.n	800b646 <fm_lcd_units_vol+0xa6>
        {
            resolution_modify = PNT_5;
 800b632:	2305      	movs	r3, #5
 800b634:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(HIGH_ROW, resolution_modify);
 800b638:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b63c:	4619      	mov	r1, r3
 800b63e:	2000      	movs	r0, #0
 800b640:	f000 fbce 	bl	800bde0 <lcd_clear_point>
 800b644:	e011      	b.n	800b66a <fm_lcd_units_vol+0xca>
        }
        else if(fm_factory_get_units_vol().res == 3)
 800b646:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b64a:	4618      	mov	r0, r3
 800b64c:	f7fe fd8e 	bl	800a16c <fm_factory_get_units_vol>
 800b650:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800b654:	2b03      	cmp	r3, #3
 800b656:	d108      	bne.n	800b66a <fm_lcd_units_vol+0xca>
        {
            resolution_modify = PNT_4;
 800b658:	2304      	movs	r3, #4
 800b65a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(HIGH_ROW, resolution_modify);
 800b65e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b662:	4619      	mov	r1, r3
 800b664:	2000      	movs	r0, #0
 800b666:	f000 fbbb 	bl	800bde0 <lcd_clear_point>
        }

        lcd_clear_vol_unit(fmc_get_acm().unit_volume, 0x0);
 800b66a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b66e:	4618      	mov	r0, r3
 800b670:	f004 f874 	bl	800f75c <fmc_get_acm>
 800b674:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800b678:	2100      	movs	r1, #0
 800b67a:	4618      	mov	r0, r3
 800b67c:	f000 fc9e 	bl	800bfbc <lcd_clear_vol_unit>

        blink = 0;
 800b680:	4b0e      	ldr	r3, [pc, #56]	; (800b6bc <fm_lcd_units_vol+0x11c>)
 800b682:	2200      	movs	r2, #0
 800b684:	601a      	str	r2, [r3, #0]
 800b686:	e00d      	b.n	800b6a4 <fm_lcd_units_vol+0x104>
    }
    else
    {
        lcd_set_vol_unit(fmc_get_acm().unit_volume, 0x0);
 800b688:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b68c:	4618      	mov	r0, r3
 800b68e:	f004 f865 	bl	800f75c <fmc_get_acm>
 800b692:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800b696:	2100      	movs	r1, #0
 800b698:	4618      	mov	r0, r3
 800b69a:	f001 fcaf 	bl	800cffc <lcd_set_vol_unit>
        blink = 1;
 800b69e:	4b07      	ldr	r3, [pc, #28]	; (800b6bc <fm_lcd_units_vol+0x11c>)
 800b6a0:	2201      	movs	r2, #1
 800b6a2:	601a      	str	r2, [r3, #0]
    }

    lcd_set_symbol(ACM, 0x00);
 800b6a4:	2100      	movs	r1, #0
 800b6a6:	2006      	movs	r0, #6
 800b6a8:	f001 f924 	bl	800c8f4 <lcd_set_symbol>
    lcd_set_symbol(TTL, 0x00);
 800b6ac:	2100      	movs	r1, #0
 800b6ae:	2005      	movs	r0, #5
 800b6b0:	f001 f920 	bl	800c8f4 <lcd_set_symbol>
}
 800b6b4:	bf00      	nop
 800b6b6:	3790      	adds	r7, #144	; 0x90
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	2000011c 	.word	0x2000011c

0800b6c0 <fm_lcd_version>:
 * según las opciones que se elijan.
 * @param puntos de la fila inferior a imprimir, de tipo point_t.
 * @retval None
 */
void fm_lcd_version(point_t low_point1, point_t low_point2)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b086      	sub	sp, #24
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	460a      	mov	r2, r1
 800b6ca:	71fb      	strb	r3, [r7, #7]
 800b6cc:	4613      	mov	r3, r2
 800b6ce:	71bb      	strb	r3, [r7, #6]
    char lcd_msg[MSG_LENGTH];

    fm_lcd_format_number_in_line(LOW_ROW, fm_version_get(), lcd_msg,
 800b6d0:	f004 f82a 	bl	800f728 <fm_version_get>
 800b6d4:	4601      	mov	r1, r0
 800b6d6:	f107 020c 	add.w	r2, r7, #12
 800b6da:	230c      	movs	r3, #12
 800b6dc:	2001      	movs	r0, #1
 800b6de:	f7ff fc17 	bl	800af10 <fm_lcd_format_number_in_line>
    MSG_LENGTH);
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800b6e2:	f107 030c 	add.w	r3, r7, #12
 800b6e6:	2101      	movs	r1, #1
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f7ff fe1b 	bl	800b324 <fm_lcd_puts>
    lcd_set_point(LOW_ROW, low_point1);
 800b6ee:	79fb      	ldrb	r3, [r7, #7]
 800b6f0:	4619      	mov	r1, r3
 800b6f2:	2001      	movs	r0, #1
 800b6f4:	f001 f852 	bl	800c79c <lcd_set_point>
    lcd_set_point(LOW_ROW, low_point2);
 800b6f8:	79bb      	ldrb	r3, [r7, #6]
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	2001      	movs	r0, #1
 800b6fe:	f001 f84d 	bl	800c79c <lcd_set_point>

    lcd_set_symbol(VE, 0x0);
 800b702:	2100      	movs	r1, #0
 800b704:	2009      	movs	r0, #9
 800b706:	f001 f8f5 	bl	800c8f4 <lcd_set_symbol>
}
 800b70a:	bf00      	nop
 800b70c:	3718      	adds	r7, #24
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}
	...

0800b714 <lcd_clear_all>:
 * @brief Función que limpia toda la pantalla.
 * @param  None
 * @retval None
 */
void lcd_clear_all()
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b082      	sub	sp, #8
 800b718:	af00      	add	r7, sp, #0
    pcf8553_clear_buff();
 800b71a:	f001 ff73 	bl	800d604 <pcf8553_clear_buff>
     * Limpia el buffer intermedio de los números que aparecen en las filas HIGH
     * y LOW de la pantalla LCD. No es muy eficiente si se pretende usar al
     * refrescar la pantalla cada x tiempo, pero será necesario usarla por el
     * momento al pasar de una pantalla a otra.
     */
    for (int cont_buff_row = 0; cont_buff_row < LCD_ROWS; cont_buff_row++)
 800b71e:	2300      	movs	r3, #0
 800b720:	607b      	str	r3, [r7, #4]
 800b722:	e013      	b.n	800b74c <lcd_clear_all+0x38>
    {
        for (int cont_buff_col = 0; cont_buff_col < LCD_COLS; cont_buff_col++)
 800b724:	2300      	movs	r3, #0
 800b726:	603b      	str	r3, [r7, #0]
 800b728:	e00a      	b.n	800b740 <lcd_clear_all+0x2c>
        {
            g_buf[cont_buff_row][cont_buff_col] = 0;
 800b72a:	4a0d      	ldr	r2, [pc, #52]	; (800b760 <lcd_clear_all+0x4c>)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	00db      	lsls	r3, r3, #3
 800b730:	441a      	add	r2, r3
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	4413      	add	r3, r2
 800b736:	2200      	movs	r2, #0
 800b738:	701a      	strb	r2, [r3, #0]
        for (int cont_buff_col = 0; cont_buff_col < LCD_COLS; cont_buff_col++)
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	3301      	adds	r3, #1
 800b73e:	603b      	str	r3, [r7, #0]
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	2b07      	cmp	r3, #7
 800b744:	ddf1      	ble.n	800b72a <lcd_clear_all+0x16>
    for (int cont_buff_row = 0; cont_buff_row < LCD_ROWS; cont_buff_row++)
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	3301      	adds	r3, #1
 800b74a:	607b      	str	r3, [r7, #4]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2b01      	cmp	r3, #1
 800b750:	dde8      	ble.n	800b724 <lcd_clear_all+0x10>
        }
    }

    pcf8553_write_all(NONE_SEGMENTS);
 800b752:	2000      	movs	r0, #0
 800b754:	f001 ffe6 	bl	800d724 <pcf8553_write_all>
}
 800b758:	bf00      	nop
 800b75a:	3708      	adds	r7, #8
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}
 800b760:	20001cc0 	.word	0x20001cc0

0800b764 <lcd_clear_digit>:

void lcd_clear_digit(screen_digits_t digit, rows_t line)
{
 800b764:	b480      	push	{r7}
 800b766:	b083      	sub	sp, #12
 800b768:	af00      	add	r7, sp, #0
 800b76a:	4603      	mov	r3, r0
 800b76c:	460a      	mov	r2, r1
 800b76e:	71fb      	strb	r3, [r7, #7]
 800b770:	4613      	mov	r3, r2
 800b772:	71bb      	strb	r3, [r7, #6]
    if(line == HIGH_ROW)
 800b774:	79bb      	ldrb	r3, [r7, #6]
 800b776:	2b00      	cmp	r3, #0
 800b778:	f040 81aa 	bne.w	800bad0 <lcd_clear_digit+0x36c>
    {
        switch(digit)
 800b77c:	79fb      	ldrb	r3, [r7, #7]
 800b77e:	2b07      	cmp	r3, #7
 800b780:	f200 8320 	bhi.w	800bdc4 <lcd_clear_digit+0x660>
 800b784:	a201      	add	r2, pc, #4	; (adr r2, 800b78c <lcd_clear_digit+0x28>)
 800b786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b78a:	bf00      	nop
 800b78c:	0800b7ad 	.word	0x0800b7ad
 800b790:	0800b811 	.word	0x0800b811
 800b794:	0800b875 	.word	0x0800b875
 800b798:	0800b8d9 	.word	0x0800b8d9
 800b79c:	0800b93d 	.word	0x0800b93d
 800b7a0:	0800b9a1 	.word	0x0800b9a1
 800b7a4:	0800ba09 	.word	0x0800ba09
 800b7a8:	0800ba6d 	.word	0x0800ba6d
        {
            case DIGIT_0:
                g_lcd_map[REG_12] &= ~(1 << BIT_7);
 800b7ac:	4b95      	ldr	r3, [pc, #596]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b7ae:	7b1b      	ldrb	r3, [r3, #12]
 800b7b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7b4:	b2da      	uxtb	r2, r3
 800b7b6:	4b93      	ldr	r3, [pc, #588]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b7b8:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_12] &= ~(1 << BIT_6);
 800b7ba:	4b92      	ldr	r3, [pc, #584]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b7bc:	7b1b      	ldrb	r3, [r3, #12]
 800b7be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7c2:	b2da      	uxtb	r2, r3
 800b7c4:	4b8f      	ldr	r3, [pc, #572]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b7c6:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_17] &= ~(1 << BIT_7);
 800b7c8:	4b8e      	ldr	r3, [pc, #568]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b7ca:	7c5b      	ldrb	r3, [r3, #17]
 800b7cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7d0:	b2da      	uxtb	r2, r3
 800b7d2:	4b8c      	ldr	r3, [pc, #560]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b7d4:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_17] &= ~(1 << BIT_6);
 800b7d6:	4b8b      	ldr	r3, [pc, #556]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b7d8:	7c5b      	ldrb	r3, [r3, #17]
 800b7da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7de:	b2da      	uxtb	r2, r3
 800b7e0:	4b88      	ldr	r3, [pc, #544]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b7e2:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_2] &= ~(1 << BIT_6);
 800b7e4:	4b87      	ldr	r3, [pc, #540]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b7e6:	789b      	ldrb	r3, [r3, #2]
 800b7e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7ec:	b2da      	uxtb	r2, r3
 800b7ee:	4b85      	ldr	r3, [pc, #532]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b7f0:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_2] &= ~(1 << BIT_7);
 800b7f2:	4b84      	ldr	r3, [pc, #528]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b7f4:	789b      	ldrb	r3, [r3, #2]
 800b7f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7fa:	b2da      	uxtb	r2, r3
 800b7fc:	4b81      	ldr	r3, [pc, #516]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b7fe:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_7] &= ~(1 << BIT_6);
 800b800:	4b80      	ldr	r3, [pc, #512]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b802:	79db      	ldrb	r3, [r3, #7]
 800b804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b808:	b2da      	uxtb	r2, r3
 800b80a:	4b7e      	ldr	r3, [pc, #504]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b80c:	71da      	strb	r2, [r3, #7]
            break;
 800b80e:	e2de      	b.n	800bdce <lcd_clear_digit+0x66a>
            case DIGIT_1:
                g_lcd_map[REG_13] &= ~(1 << BIT_1);
 800b810:	4b7c      	ldr	r3, [pc, #496]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b812:	7b5b      	ldrb	r3, [r3, #13]
 800b814:	f023 0302 	bic.w	r3, r3, #2
 800b818:	b2da      	uxtb	r2, r3
 800b81a:	4b7a      	ldr	r3, [pc, #488]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b81c:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_0);
 800b81e:	4b79      	ldr	r3, [pc, #484]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b820:	7b5b      	ldrb	r3, [r3, #13]
 800b822:	f023 0301 	bic.w	r3, r3, #1
 800b826:	b2da      	uxtb	r2, r3
 800b828:	4b76      	ldr	r3, [pc, #472]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b82a:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_1);
 800b82c:	4b75      	ldr	r3, [pc, #468]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b82e:	7c9b      	ldrb	r3, [r3, #18]
 800b830:	f023 0302 	bic.w	r3, r3, #2
 800b834:	b2da      	uxtb	r2, r3
 800b836:	4b73      	ldr	r3, [pc, #460]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b838:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_0);
 800b83a:	4b72      	ldr	r3, [pc, #456]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b83c:	7c9b      	ldrb	r3, [r3, #18]
 800b83e:	f023 0301 	bic.w	r3, r3, #1
 800b842:	b2da      	uxtb	r2, r3
 800b844:	4b6f      	ldr	r3, [pc, #444]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b846:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_0);
 800b848:	4b6e      	ldr	r3, [pc, #440]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b84a:	78db      	ldrb	r3, [r3, #3]
 800b84c:	f023 0301 	bic.w	r3, r3, #1
 800b850:	b2da      	uxtb	r2, r3
 800b852:	4b6c      	ldr	r3, [pc, #432]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b854:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_1);
 800b856:	4b6b      	ldr	r3, [pc, #428]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b858:	78db      	ldrb	r3, [r3, #3]
 800b85a:	f023 0302 	bic.w	r3, r3, #2
 800b85e:	b2da      	uxtb	r2, r3
 800b860:	4b68      	ldr	r3, [pc, #416]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b862:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_0);
 800b864:	4b67      	ldr	r3, [pc, #412]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b866:	7a1b      	ldrb	r3, [r3, #8]
 800b868:	f023 0301 	bic.w	r3, r3, #1
 800b86c:	b2da      	uxtb	r2, r3
 800b86e:	4b65      	ldr	r3, [pc, #404]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b870:	721a      	strb	r2, [r3, #8]
            break;
 800b872:	e2ac      	b.n	800bdce <lcd_clear_digit+0x66a>
            case DIGIT_2:
                g_lcd_map[REG_13] &= ~(1 << BIT_3);
 800b874:	4b63      	ldr	r3, [pc, #396]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b876:	7b5b      	ldrb	r3, [r3, #13]
 800b878:	f023 0308 	bic.w	r3, r3, #8
 800b87c:	b2da      	uxtb	r2, r3
 800b87e:	4b61      	ldr	r3, [pc, #388]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b880:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_2);
 800b882:	4b60      	ldr	r3, [pc, #384]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b884:	7b5b      	ldrb	r3, [r3, #13]
 800b886:	f023 0304 	bic.w	r3, r3, #4
 800b88a:	b2da      	uxtb	r2, r3
 800b88c:	4b5d      	ldr	r3, [pc, #372]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b88e:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_3);
 800b890:	4b5c      	ldr	r3, [pc, #368]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b892:	7c9b      	ldrb	r3, [r3, #18]
 800b894:	f023 0308 	bic.w	r3, r3, #8
 800b898:	b2da      	uxtb	r2, r3
 800b89a:	4b5a      	ldr	r3, [pc, #360]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b89c:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_2);
 800b89e:	4b59      	ldr	r3, [pc, #356]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b8a0:	7c9b      	ldrb	r3, [r3, #18]
 800b8a2:	f023 0304 	bic.w	r3, r3, #4
 800b8a6:	b2da      	uxtb	r2, r3
 800b8a8:	4b56      	ldr	r3, [pc, #344]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b8aa:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_2);
 800b8ac:	4b55      	ldr	r3, [pc, #340]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b8ae:	78db      	ldrb	r3, [r3, #3]
 800b8b0:	f023 0304 	bic.w	r3, r3, #4
 800b8b4:	b2da      	uxtb	r2, r3
 800b8b6:	4b53      	ldr	r3, [pc, #332]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b8b8:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_3);
 800b8ba:	4b52      	ldr	r3, [pc, #328]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b8bc:	78db      	ldrb	r3, [r3, #3]
 800b8be:	f023 0308 	bic.w	r3, r3, #8
 800b8c2:	b2da      	uxtb	r2, r3
 800b8c4:	4b4f      	ldr	r3, [pc, #316]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b8c6:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_2);
 800b8c8:	4b4e      	ldr	r3, [pc, #312]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b8ca:	7a1b      	ldrb	r3, [r3, #8]
 800b8cc:	f023 0304 	bic.w	r3, r3, #4
 800b8d0:	b2da      	uxtb	r2, r3
 800b8d2:	4b4c      	ldr	r3, [pc, #304]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b8d4:	721a      	strb	r2, [r3, #8]
            break;
 800b8d6:	e27a      	b.n	800bdce <lcd_clear_digit+0x66a>
            case DIGIT_3:
                g_lcd_map[REG_13] &= ~(1 << BIT_5);
 800b8d8:	4b4a      	ldr	r3, [pc, #296]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b8da:	7b5b      	ldrb	r3, [r3, #13]
 800b8dc:	f023 0320 	bic.w	r3, r3, #32
 800b8e0:	b2da      	uxtb	r2, r3
 800b8e2:	4b48      	ldr	r3, [pc, #288]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b8e4:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_4);
 800b8e6:	4b47      	ldr	r3, [pc, #284]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b8e8:	7b5b      	ldrb	r3, [r3, #13]
 800b8ea:	f023 0310 	bic.w	r3, r3, #16
 800b8ee:	b2da      	uxtb	r2, r3
 800b8f0:	4b44      	ldr	r3, [pc, #272]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b8f2:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_5);
 800b8f4:	4b43      	ldr	r3, [pc, #268]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b8f6:	7c9b      	ldrb	r3, [r3, #18]
 800b8f8:	f023 0320 	bic.w	r3, r3, #32
 800b8fc:	b2da      	uxtb	r2, r3
 800b8fe:	4b41      	ldr	r3, [pc, #260]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b900:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_4);
 800b902:	4b40      	ldr	r3, [pc, #256]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b904:	7c9b      	ldrb	r3, [r3, #18]
 800b906:	f023 0310 	bic.w	r3, r3, #16
 800b90a:	b2da      	uxtb	r2, r3
 800b90c:	4b3d      	ldr	r3, [pc, #244]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b90e:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_4);
 800b910:	4b3c      	ldr	r3, [pc, #240]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b912:	78db      	ldrb	r3, [r3, #3]
 800b914:	f023 0310 	bic.w	r3, r3, #16
 800b918:	b2da      	uxtb	r2, r3
 800b91a:	4b3a      	ldr	r3, [pc, #232]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b91c:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_5);
 800b91e:	4b39      	ldr	r3, [pc, #228]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b920:	78db      	ldrb	r3, [r3, #3]
 800b922:	f023 0320 	bic.w	r3, r3, #32
 800b926:	b2da      	uxtb	r2, r3
 800b928:	4b36      	ldr	r3, [pc, #216]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b92a:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_4);
 800b92c:	4b35      	ldr	r3, [pc, #212]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b92e:	7a1b      	ldrb	r3, [r3, #8]
 800b930:	f023 0310 	bic.w	r3, r3, #16
 800b934:	b2da      	uxtb	r2, r3
 800b936:	4b33      	ldr	r3, [pc, #204]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b938:	721a      	strb	r2, [r3, #8]
            break;
 800b93a:	e248      	b.n	800bdce <lcd_clear_digit+0x66a>
            case DIGIT_4:
                g_lcd_map[REG_13] &= ~(1 << BIT_7);
 800b93c:	4b31      	ldr	r3, [pc, #196]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b93e:	7b5b      	ldrb	r3, [r3, #13]
 800b940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b944:	b2da      	uxtb	r2, r3
 800b946:	4b2f      	ldr	r3, [pc, #188]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b948:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_6);
 800b94a:	4b2e      	ldr	r3, [pc, #184]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b94c:	7b5b      	ldrb	r3, [r3, #13]
 800b94e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b952:	b2da      	uxtb	r2, r3
 800b954:	4b2b      	ldr	r3, [pc, #172]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b956:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_7);
 800b958:	4b2a      	ldr	r3, [pc, #168]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b95a:	7c9b      	ldrb	r3, [r3, #18]
 800b95c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b960:	b2da      	uxtb	r2, r3
 800b962:	4b28      	ldr	r3, [pc, #160]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b964:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_6);
 800b966:	4b27      	ldr	r3, [pc, #156]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b968:	7c9b      	ldrb	r3, [r3, #18]
 800b96a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b96e:	b2da      	uxtb	r2, r3
 800b970:	4b24      	ldr	r3, [pc, #144]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b972:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_6);
 800b974:	4b23      	ldr	r3, [pc, #140]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b976:	78db      	ldrb	r3, [r3, #3]
 800b978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b97c:	b2da      	uxtb	r2, r3
 800b97e:	4b21      	ldr	r3, [pc, #132]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b980:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_7);
 800b982:	4b20      	ldr	r3, [pc, #128]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b984:	78db      	ldrb	r3, [r3, #3]
 800b986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b98a:	b2da      	uxtb	r2, r3
 800b98c:	4b1d      	ldr	r3, [pc, #116]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b98e:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_6);
 800b990:	4b1c      	ldr	r3, [pc, #112]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b992:	7a1b      	ldrb	r3, [r3, #8]
 800b994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b998:	b2da      	uxtb	r2, r3
 800b99a:	4b1a      	ldr	r3, [pc, #104]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b99c:	721a      	strb	r2, [r3, #8]
            break;
 800b99e:	e216      	b.n	800bdce <lcd_clear_digit+0x66a>
            case DIGIT_5:
                g_lcd_map[REG_14] &= ~(1 << BIT_1);
 800b9a0:	4b18      	ldr	r3, [pc, #96]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b9a2:	7b9b      	ldrb	r3, [r3, #14]
 800b9a4:	f023 0302 	bic.w	r3, r3, #2
 800b9a8:	b2da      	uxtb	r2, r3
 800b9aa:	4b16      	ldr	r3, [pc, #88]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b9ac:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_14] &= ~(1 << BIT_0);
 800b9ae:	4b15      	ldr	r3, [pc, #84]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b9b0:	7b9b      	ldrb	r3, [r3, #14]
 800b9b2:	f023 0301 	bic.w	r3, r3, #1
 800b9b6:	b2da      	uxtb	r2, r3
 800b9b8:	4b12      	ldr	r3, [pc, #72]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b9ba:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_19] &= ~(1 << BIT_1);
 800b9bc:	4b11      	ldr	r3, [pc, #68]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b9be:	7cdb      	ldrb	r3, [r3, #19]
 800b9c0:	f023 0302 	bic.w	r3, r3, #2
 800b9c4:	b2da      	uxtb	r2, r3
 800b9c6:	4b0f      	ldr	r3, [pc, #60]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b9c8:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_19] &= ~(1 << BIT_0);
 800b9ca:	4b0e      	ldr	r3, [pc, #56]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b9cc:	7cdb      	ldrb	r3, [r3, #19]
 800b9ce:	f023 0301 	bic.w	r3, r3, #1
 800b9d2:	b2da      	uxtb	r2, r3
 800b9d4:	4b0b      	ldr	r3, [pc, #44]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b9d6:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_4] &= ~(1 << BIT_0);
 800b9d8:	4b0a      	ldr	r3, [pc, #40]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b9da:	791b      	ldrb	r3, [r3, #4]
 800b9dc:	f023 0301 	bic.w	r3, r3, #1
 800b9e0:	b2da      	uxtb	r2, r3
 800b9e2:	4b08      	ldr	r3, [pc, #32]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b9e4:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_4] &= ~(1 << BIT_1);
 800b9e6:	4b07      	ldr	r3, [pc, #28]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b9e8:	791b      	ldrb	r3, [r3, #4]
 800b9ea:	f023 0302 	bic.w	r3, r3, #2
 800b9ee:	b2da      	uxtb	r2, r3
 800b9f0:	4b04      	ldr	r3, [pc, #16]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b9f2:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_9] &= ~(1 << BIT_0);
 800b9f4:	4b03      	ldr	r3, [pc, #12]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800b9f6:	7a5b      	ldrb	r3, [r3, #9]
 800b9f8:	f023 0301 	bic.w	r3, r3, #1
 800b9fc:	b2da      	uxtb	r2, r3
 800b9fe:	4b01      	ldr	r3, [pc, #4]	; (800ba04 <lcd_clear_digit+0x2a0>)
 800ba00:	725a      	strb	r2, [r3, #9]
            break;
 800ba02:	e1e4      	b.n	800bdce <lcd_clear_digit+0x66a>
 800ba04:	20001d38 	.word	0x20001d38
            case DIGIT_6:
                g_lcd_map[REG_14] &= ~(1 << BIT_3);
 800ba08:	4ba2      	ldr	r3, [pc, #648]	; (800bc94 <lcd_clear_digit+0x530>)
 800ba0a:	7b9b      	ldrb	r3, [r3, #14]
 800ba0c:	f023 0308 	bic.w	r3, r3, #8
 800ba10:	b2da      	uxtb	r2, r3
 800ba12:	4ba0      	ldr	r3, [pc, #640]	; (800bc94 <lcd_clear_digit+0x530>)
 800ba14:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_14] &= ~(1 << BIT_2);
 800ba16:	4b9f      	ldr	r3, [pc, #636]	; (800bc94 <lcd_clear_digit+0x530>)
 800ba18:	7b9b      	ldrb	r3, [r3, #14]
 800ba1a:	f023 0304 	bic.w	r3, r3, #4
 800ba1e:	b2da      	uxtb	r2, r3
 800ba20:	4b9c      	ldr	r3, [pc, #624]	; (800bc94 <lcd_clear_digit+0x530>)
 800ba22:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_19] &= ~(1 << BIT_3);
 800ba24:	4b9b      	ldr	r3, [pc, #620]	; (800bc94 <lcd_clear_digit+0x530>)
 800ba26:	7cdb      	ldrb	r3, [r3, #19]
 800ba28:	f023 0308 	bic.w	r3, r3, #8
 800ba2c:	b2da      	uxtb	r2, r3
 800ba2e:	4b99      	ldr	r3, [pc, #612]	; (800bc94 <lcd_clear_digit+0x530>)
 800ba30:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_19] &= ~(1 << BIT_2);
 800ba32:	4b98      	ldr	r3, [pc, #608]	; (800bc94 <lcd_clear_digit+0x530>)
 800ba34:	7cdb      	ldrb	r3, [r3, #19]
 800ba36:	f023 0304 	bic.w	r3, r3, #4
 800ba3a:	b2da      	uxtb	r2, r3
 800ba3c:	4b95      	ldr	r3, [pc, #596]	; (800bc94 <lcd_clear_digit+0x530>)
 800ba3e:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_4] &= ~(1 << BIT_2);
 800ba40:	4b94      	ldr	r3, [pc, #592]	; (800bc94 <lcd_clear_digit+0x530>)
 800ba42:	791b      	ldrb	r3, [r3, #4]
 800ba44:	f023 0304 	bic.w	r3, r3, #4
 800ba48:	b2da      	uxtb	r2, r3
 800ba4a:	4b92      	ldr	r3, [pc, #584]	; (800bc94 <lcd_clear_digit+0x530>)
 800ba4c:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_4] &= ~(1 << BIT_3);
 800ba4e:	4b91      	ldr	r3, [pc, #580]	; (800bc94 <lcd_clear_digit+0x530>)
 800ba50:	791b      	ldrb	r3, [r3, #4]
 800ba52:	f023 0308 	bic.w	r3, r3, #8
 800ba56:	b2da      	uxtb	r2, r3
 800ba58:	4b8e      	ldr	r3, [pc, #568]	; (800bc94 <lcd_clear_digit+0x530>)
 800ba5a:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_9] &= ~(1 << BIT_2);
 800ba5c:	4b8d      	ldr	r3, [pc, #564]	; (800bc94 <lcd_clear_digit+0x530>)
 800ba5e:	7a5b      	ldrb	r3, [r3, #9]
 800ba60:	f023 0304 	bic.w	r3, r3, #4
 800ba64:	b2da      	uxtb	r2, r3
 800ba66:	4b8b      	ldr	r3, [pc, #556]	; (800bc94 <lcd_clear_digit+0x530>)
 800ba68:	725a      	strb	r2, [r3, #9]
            break;
 800ba6a:	e1b0      	b.n	800bdce <lcd_clear_digit+0x66a>
            case DIGIT_7:
                g_lcd_map[REG_14] &= ~(1 << BIT_5);
 800ba6c:	4b89      	ldr	r3, [pc, #548]	; (800bc94 <lcd_clear_digit+0x530>)
 800ba6e:	7b9b      	ldrb	r3, [r3, #14]
 800ba70:	f023 0320 	bic.w	r3, r3, #32
 800ba74:	b2da      	uxtb	r2, r3
 800ba76:	4b87      	ldr	r3, [pc, #540]	; (800bc94 <lcd_clear_digit+0x530>)
 800ba78:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_14] &= ~(1 << BIT_4);
 800ba7a:	4b86      	ldr	r3, [pc, #536]	; (800bc94 <lcd_clear_digit+0x530>)
 800ba7c:	7b9b      	ldrb	r3, [r3, #14]
 800ba7e:	f023 0310 	bic.w	r3, r3, #16
 800ba82:	b2da      	uxtb	r2, r3
 800ba84:	4b83      	ldr	r3, [pc, #524]	; (800bc94 <lcd_clear_digit+0x530>)
 800ba86:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_19] &= ~(1 << BIT_5);
 800ba88:	4b82      	ldr	r3, [pc, #520]	; (800bc94 <lcd_clear_digit+0x530>)
 800ba8a:	7cdb      	ldrb	r3, [r3, #19]
 800ba8c:	f023 0320 	bic.w	r3, r3, #32
 800ba90:	b2da      	uxtb	r2, r3
 800ba92:	4b80      	ldr	r3, [pc, #512]	; (800bc94 <lcd_clear_digit+0x530>)
 800ba94:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_19] &= ~(1 << BIT_4);
 800ba96:	4b7f      	ldr	r3, [pc, #508]	; (800bc94 <lcd_clear_digit+0x530>)
 800ba98:	7cdb      	ldrb	r3, [r3, #19]
 800ba9a:	f023 0310 	bic.w	r3, r3, #16
 800ba9e:	b2da      	uxtb	r2, r3
 800baa0:	4b7c      	ldr	r3, [pc, #496]	; (800bc94 <lcd_clear_digit+0x530>)
 800baa2:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_4] &= ~(1 << BIT_4);
 800baa4:	4b7b      	ldr	r3, [pc, #492]	; (800bc94 <lcd_clear_digit+0x530>)
 800baa6:	791b      	ldrb	r3, [r3, #4]
 800baa8:	f023 0310 	bic.w	r3, r3, #16
 800baac:	b2da      	uxtb	r2, r3
 800baae:	4b79      	ldr	r3, [pc, #484]	; (800bc94 <lcd_clear_digit+0x530>)
 800bab0:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_4] &= ~(1 << BIT_5);
 800bab2:	4b78      	ldr	r3, [pc, #480]	; (800bc94 <lcd_clear_digit+0x530>)
 800bab4:	791b      	ldrb	r3, [r3, #4]
 800bab6:	f023 0320 	bic.w	r3, r3, #32
 800baba:	b2da      	uxtb	r2, r3
 800babc:	4b75      	ldr	r3, [pc, #468]	; (800bc94 <lcd_clear_digit+0x530>)
 800babe:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_9] &= ~(1 << BIT_4);
 800bac0:	4b74      	ldr	r3, [pc, #464]	; (800bc94 <lcd_clear_digit+0x530>)
 800bac2:	7a5b      	ldrb	r3, [r3, #9]
 800bac4:	f023 0310 	bic.w	r3, r3, #16
 800bac8:	b2da      	uxtb	r2, r3
 800baca:	4b72      	ldr	r3, [pc, #456]	; (800bc94 <lcd_clear_digit+0x530>)
 800bacc:	725a      	strb	r2, [r3, #9]
            break;
 800bace:	e17e      	b.n	800bdce <lcd_clear_digit+0x66a>
            default:
            break;
        }
    }
    else if(line == LOW_ROW)
 800bad0:	79bb      	ldrb	r3, [r7, #6]
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	f040 8178 	bne.w	800bdc8 <lcd_clear_digit+0x664>
    {
        switch(digit)
 800bad8:	79fb      	ldrb	r3, [r7, #7]
 800bada:	2b06      	cmp	r3, #6
 800badc:	f200 8176 	bhi.w	800bdcc <lcd_clear_digit+0x668>
 800bae0:	a201      	add	r2, pc, #4	; (adr r2, 800bae8 <lcd_clear_digit+0x384>)
 800bae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bae6:	bf00      	nop
 800bae8:	0800bb05 	.word	0x0800bb05
 800baec:	0800bb69 	.word	0x0800bb69
 800baf0:	0800bbcd 	.word	0x0800bbcd
 800baf4:	0800bc31 	.word	0x0800bc31
 800baf8:	0800bc99 	.word	0x0800bc99
 800bafc:	0800bcfd 	.word	0x0800bcfd
 800bb00:	0800bd61 	.word	0x0800bd61
        {
            case DIGIT_0:
                g_lcd_map[REG_12] &= ~(1 << BIT_2);
 800bb04:	4b63      	ldr	r3, [pc, #396]	; (800bc94 <lcd_clear_digit+0x530>)
 800bb06:	7b1b      	ldrb	r3, [r3, #12]
 800bb08:	f023 0304 	bic.w	r3, r3, #4
 800bb0c:	b2da      	uxtb	r2, r3
 800bb0e:	4b61      	ldr	r3, [pc, #388]	; (800bc94 <lcd_clear_digit+0x530>)
 800bb10:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_12] &= ~(1 << BIT_3);
 800bb12:	4b60      	ldr	r3, [pc, #384]	; (800bc94 <lcd_clear_digit+0x530>)
 800bb14:	7b1b      	ldrb	r3, [r3, #12]
 800bb16:	f023 0308 	bic.w	r3, r3, #8
 800bb1a:	b2da      	uxtb	r2, r3
 800bb1c:	4b5d      	ldr	r3, [pc, #372]	; (800bc94 <lcd_clear_digit+0x530>)
 800bb1e:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_17] &= ~(1 << BIT_2);
 800bb20:	4b5c      	ldr	r3, [pc, #368]	; (800bc94 <lcd_clear_digit+0x530>)
 800bb22:	7c5b      	ldrb	r3, [r3, #17]
 800bb24:	f023 0304 	bic.w	r3, r3, #4
 800bb28:	b2da      	uxtb	r2, r3
 800bb2a:	4b5a      	ldr	r3, [pc, #360]	; (800bc94 <lcd_clear_digit+0x530>)
 800bb2c:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_17] &= ~(1 << BIT_3);
 800bb2e:	4b59      	ldr	r3, [pc, #356]	; (800bc94 <lcd_clear_digit+0x530>)
 800bb30:	7c5b      	ldrb	r3, [r3, #17]
 800bb32:	f023 0308 	bic.w	r3, r3, #8
 800bb36:	b2da      	uxtb	r2, r3
 800bb38:	4b56      	ldr	r3, [pc, #344]	; (800bc94 <lcd_clear_digit+0x530>)
 800bb3a:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_2] &= ~(1 << BIT_2);
 800bb3c:	4b55      	ldr	r3, [pc, #340]	; (800bc94 <lcd_clear_digit+0x530>)
 800bb3e:	789b      	ldrb	r3, [r3, #2]
 800bb40:	f023 0304 	bic.w	r3, r3, #4
 800bb44:	b2da      	uxtb	r2, r3
 800bb46:	4b53      	ldr	r3, [pc, #332]	; (800bc94 <lcd_clear_digit+0x530>)
 800bb48:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_2] &= ~(1 << BIT_3);
 800bb4a:	4b52      	ldr	r3, [pc, #328]	; (800bc94 <lcd_clear_digit+0x530>)
 800bb4c:	789b      	ldrb	r3, [r3, #2]
 800bb4e:	f023 0308 	bic.w	r3, r3, #8
 800bb52:	b2da      	uxtb	r2, r3
 800bb54:	4b4f      	ldr	r3, [pc, #316]	; (800bc94 <lcd_clear_digit+0x530>)
 800bb56:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_7] &= ~(1 << BIT_3);
 800bb58:	4b4e      	ldr	r3, [pc, #312]	; (800bc94 <lcd_clear_digit+0x530>)
 800bb5a:	79db      	ldrb	r3, [r3, #7]
 800bb5c:	f023 0308 	bic.w	r3, r3, #8
 800bb60:	b2da      	uxtb	r2, r3
 800bb62:	4b4c      	ldr	r3, [pc, #304]	; (800bc94 <lcd_clear_digit+0x530>)
 800bb64:	71da      	strb	r2, [r3, #7]
            break;
 800bb66:	e132      	b.n	800bdce <lcd_clear_digit+0x66a>
            case DIGIT_1:
                g_lcd_map[REG_12] &= ~(1 << BIT_0);
 800bb68:	4b4a      	ldr	r3, [pc, #296]	; (800bc94 <lcd_clear_digit+0x530>)
 800bb6a:	7b1b      	ldrb	r3, [r3, #12]
 800bb6c:	f023 0301 	bic.w	r3, r3, #1
 800bb70:	b2da      	uxtb	r2, r3
 800bb72:	4b48      	ldr	r3, [pc, #288]	; (800bc94 <lcd_clear_digit+0x530>)
 800bb74:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_12] &= ~(1 << BIT_1);
 800bb76:	4b47      	ldr	r3, [pc, #284]	; (800bc94 <lcd_clear_digit+0x530>)
 800bb78:	7b1b      	ldrb	r3, [r3, #12]
 800bb7a:	f023 0302 	bic.w	r3, r3, #2
 800bb7e:	b2da      	uxtb	r2, r3
 800bb80:	4b44      	ldr	r3, [pc, #272]	; (800bc94 <lcd_clear_digit+0x530>)
 800bb82:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_17] &= ~(1 << BIT_0);
 800bb84:	4b43      	ldr	r3, [pc, #268]	; (800bc94 <lcd_clear_digit+0x530>)
 800bb86:	7c5b      	ldrb	r3, [r3, #17]
 800bb88:	f023 0301 	bic.w	r3, r3, #1
 800bb8c:	b2da      	uxtb	r2, r3
 800bb8e:	4b41      	ldr	r3, [pc, #260]	; (800bc94 <lcd_clear_digit+0x530>)
 800bb90:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_17] &= ~(1 << BIT_1);
 800bb92:	4b40      	ldr	r3, [pc, #256]	; (800bc94 <lcd_clear_digit+0x530>)
 800bb94:	7c5b      	ldrb	r3, [r3, #17]
 800bb96:	f023 0302 	bic.w	r3, r3, #2
 800bb9a:	b2da      	uxtb	r2, r3
 800bb9c:	4b3d      	ldr	r3, [pc, #244]	; (800bc94 <lcd_clear_digit+0x530>)
 800bb9e:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_2] &= ~(1 << BIT_0);
 800bba0:	4b3c      	ldr	r3, [pc, #240]	; (800bc94 <lcd_clear_digit+0x530>)
 800bba2:	789b      	ldrb	r3, [r3, #2]
 800bba4:	f023 0301 	bic.w	r3, r3, #1
 800bba8:	b2da      	uxtb	r2, r3
 800bbaa:	4b3a      	ldr	r3, [pc, #232]	; (800bc94 <lcd_clear_digit+0x530>)
 800bbac:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_2] &= ~(1 << BIT_1);
 800bbae:	4b39      	ldr	r3, [pc, #228]	; (800bc94 <lcd_clear_digit+0x530>)
 800bbb0:	789b      	ldrb	r3, [r3, #2]
 800bbb2:	f023 0302 	bic.w	r3, r3, #2
 800bbb6:	b2da      	uxtb	r2, r3
 800bbb8:	4b36      	ldr	r3, [pc, #216]	; (800bc94 <lcd_clear_digit+0x530>)
 800bbba:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_7] &= ~(1 << BIT_1);
 800bbbc:	4b35      	ldr	r3, [pc, #212]	; (800bc94 <lcd_clear_digit+0x530>)
 800bbbe:	79db      	ldrb	r3, [r3, #7]
 800bbc0:	f023 0302 	bic.w	r3, r3, #2
 800bbc4:	b2da      	uxtb	r2, r3
 800bbc6:	4b33      	ldr	r3, [pc, #204]	; (800bc94 <lcd_clear_digit+0x530>)
 800bbc8:	71da      	strb	r2, [r3, #7]
            break;
 800bbca:	e100      	b.n	800bdce <lcd_clear_digit+0x66a>
            case DIGIT_2:
                g_lcd_map[REG_11] &= ~(1 << BIT_6);
 800bbcc:	4b31      	ldr	r3, [pc, #196]	; (800bc94 <lcd_clear_digit+0x530>)
 800bbce:	7adb      	ldrb	r3, [r3, #11]
 800bbd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbd4:	b2da      	uxtb	r2, r3
 800bbd6:	4b2f      	ldr	r3, [pc, #188]	; (800bc94 <lcd_clear_digit+0x530>)
 800bbd8:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_7);
 800bbda:	4b2e      	ldr	r3, [pc, #184]	; (800bc94 <lcd_clear_digit+0x530>)
 800bbdc:	7adb      	ldrb	r3, [r3, #11]
 800bbde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbe2:	b2da      	uxtb	r2, r3
 800bbe4:	4b2b      	ldr	r3, [pc, #172]	; (800bc94 <lcd_clear_digit+0x530>)
 800bbe6:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_6);
 800bbe8:	4b2a      	ldr	r3, [pc, #168]	; (800bc94 <lcd_clear_digit+0x530>)
 800bbea:	7c1b      	ldrb	r3, [r3, #16]
 800bbec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbf0:	b2da      	uxtb	r2, r3
 800bbf2:	4b28      	ldr	r3, [pc, #160]	; (800bc94 <lcd_clear_digit+0x530>)
 800bbf4:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_7);
 800bbf6:	4b27      	ldr	r3, [pc, #156]	; (800bc94 <lcd_clear_digit+0x530>)
 800bbf8:	7c1b      	ldrb	r3, [r3, #16]
 800bbfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbfe:	b2da      	uxtb	r2, r3
 800bc00:	4b24      	ldr	r3, [pc, #144]	; (800bc94 <lcd_clear_digit+0x530>)
 800bc02:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_6);
 800bc04:	4b23      	ldr	r3, [pc, #140]	; (800bc94 <lcd_clear_digit+0x530>)
 800bc06:	785b      	ldrb	r3, [r3, #1]
 800bc08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc0c:	b2da      	uxtb	r2, r3
 800bc0e:	4b21      	ldr	r3, [pc, #132]	; (800bc94 <lcd_clear_digit+0x530>)
 800bc10:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_7);
 800bc12:	4b20      	ldr	r3, [pc, #128]	; (800bc94 <lcd_clear_digit+0x530>)
 800bc14:	785b      	ldrb	r3, [r3, #1]
 800bc16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc1a:	b2da      	uxtb	r2, r3
 800bc1c:	4b1d      	ldr	r3, [pc, #116]	; (800bc94 <lcd_clear_digit+0x530>)
 800bc1e:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_7);
 800bc20:	4b1c      	ldr	r3, [pc, #112]	; (800bc94 <lcd_clear_digit+0x530>)
 800bc22:	799b      	ldrb	r3, [r3, #6]
 800bc24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc28:	b2da      	uxtb	r2, r3
 800bc2a:	4b1a      	ldr	r3, [pc, #104]	; (800bc94 <lcd_clear_digit+0x530>)
 800bc2c:	719a      	strb	r2, [r3, #6]
            break;
 800bc2e:	e0ce      	b.n	800bdce <lcd_clear_digit+0x66a>
            case DIGIT_3:
                g_lcd_map[REG_11] &= ~(1 << BIT_4);
 800bc30:	4b18      	ldr	r3, [pc, #96]	; (800bc94 <lcd_clear_digit+0x530>)
 800bc32:	7adb      	ldrb	r3, [r3, #11]
 800bc34:	f023 0310 	bic.w	r3, r3, #16
 800bc38:	b2da      	uxtb	r2, r3
 800bc3a:	4b16      	ldr	r3, [pc, #88]	; (800bc94 <lcd_clear_digit+0x530>)
 800bc3c:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_5);
 800bc3e:	4b15      	ldr	r3, [pc, #84]	; (800bc94 <lcd_clear_digit+0x530>)
 800bc40:	7adb      	ldrb	r3, [r3, #11]
 800bc42:	f023 0320 	bic.w	r3, r3, #32
 800bc46:	b2da      	uxtb	r2, r3
 800bc48:	4b12      	ldr	r3, [pc, #72]	; (800bc94 <lcd_clear_digit+0x530>)
 800bc4a:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_4);
 800bc4c:	4b11      	ldr	r3, [pc, #68]	; (800bc94 <lcd_clear_digit+0x530>)
 800bc4e:	7c1b      	ldrb	r3, [r3, #16]
 800bc50:	f023 0310 	bic.w	r3, r3, #16
 800bc54:	b2da      	uxtb	r2, r3
 800bc56:	4b0f      	ldr	r3, [pc, #60]	; (800bc94 <lcd_clear_digit+0x530>)
 800bc58:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_5);
 800bc5a:	4b0e      	ldr	r3, [pc, #56]	; (800bc94 <lcd_clear_digit+0x530>)
 800bc5c:	7c1b      	ldrb	r3, [r3, #16]
 800bc5e:	f023 0320 	bic.w	r3, r3, #32
 800bc62:	b2da      	uxtb	r2, r3
 800bc64:	4b0b      	ldr	r3, [pc, #44]	; (800bc94 <lcd_clear_digit+0x530>)
 800bc66:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_4);
 800bc68:	4b0a      	ldr	r3, [pc, #40]	; (800bc94 <lcd_clear_digit+0x530>)
 800bc6a:	785b      	ldrb	r3, [r3, #1]
 800bc6c:	f023 0310 	bic.w	r3, r3, #16
 800bc70:	b2da      	uxtb	r2, r3
 800bc72:	4b08      	ldr	r3, [pc, #32]	; (800bc94 <lcd_clear_digit+0x530>)
 800bc74:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_5);
 800bc76:	4b07      	ldr	r3, [pc, #28]	; (800bc94 <lcd_clear_digit+0x530>)
 800bc78:	785b      	ldrb	r3, [r3, #1]
 800bc7a:	f023 0320 	bic.w	r3, r3, #32
 800bc7e:	b2da      	uxtb	r2, r3
 800bc80:	4b04      	ldr	r3, [pc, #16]	; (800bc94 <lcd_clear_digit+0x530>)
 800bc82:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_5);
 800bc84:	4b03      	ldr	r3, [pc, #12]	; (800bc94 <lcd_clear_digit+0x530>)
 800bc86:	799b      	ldrb	r3, [r3, #6]
 800bc88:	f023 0320 	bic.w	r3, r3, #32
 800bc8c:	b2da      	uxtb	r2, r3
 800bc8e:	4b01      	ldr	r3, [pc, #4]	; (800bc94 <lcd_clear_digit+0x530>)
 800bc90:	719a      	strb	r2, [r3, #6]
            break;
 800bc92:	e09c      	b.n	800bdce <lcd_clear_digit+0x66a>
 800bc94:	20001d38 	.word	0x20001d38
            case DIGIT_4:
                g_lcd_map[REG_11] &= ~(1 << BIT_2);
 800bc98:	4b50      	ldr	r3, [pc, #320]	; (800bddc <lcd_clear_digit+0x678>)
 800bc9a:	7adb      	ldrb	r3, [r3, #11]
 800bc9c:	f023 0304 	bic.w	r3, r3, #4
 800bca0:	b2da      	uxtb	r2, r3
 800bca2:	4b4e      	ldr	r3, [pc, #312]	; (800bddc <lcd_clear_digit+0x678>)
 800bca4:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_3);
 800bca6:	4b4d      	ldr	r3, [pc, #308]	; (800bddc <lcd_clear_digit+0x678>)
 800bca8:	7adb      	ldrb	r3, [r3, #11]
 800bcaa:	f023 0308 	bic.w	r3, r3, #8
 800bcae:	b2da      	uxtb	r2, r3
 800bcb0:	4b4a      	ldr	r3, [pc, #296]	; (800bddc <lcd_clear_digit+0x678>)
 800bcb2:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_2);
 800bcb4:	4b49      	ldr	r3, [pc, #292]	; (800bddc <lcd_clear_digit+0x678>)
 800bcb6:	7c1b      	ldrb	r3, [r3, #16]
 800bcb8:	f023 0304 	bic.w	r3, r3, #4
 800bcbc:	b2da      	uxtb	r2, r3
 800bcbe:	4b47      	ldr	r3, [pc, #284]	; (800bddc <lcd_clear_digit+0x678>)
 800bcc0:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_3);
 800bcc2:	4b46      	ldr	r3, [pc, #280]	; (800bddc <lcd_clear_digit+0x678>)
 800bcc4:	7c1b      	ldrb	r3, [r3, #16]
 800bcc6:	f023 0308 	bic.w	r3, r3, #8
 800bcca:	b2da      	uxtb	r2, r3
 800bccc:	4b43      	ldr	r3, [pc, #268]	; (800bddc <lcd_clear_digit+0x678>)
 800bcce:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_2);
 800bcd0:	4b42      	ldr	r3, [pc, #264]	; (800bddc <lcd_clear_digit+0x678>)
 800bcd2:	785b      	ldrb	r3, [r3, #1]
 800bcd4:	f023 0304 	bic.w	r3, r3, #4
 800bcd8:	b2da      	uxtb	r2, r3
 800bcda:	4b40      	ldr	r3, [pc, #256]	; (800bddc <lcd_clear_digit+0x678>)
 800bcdc:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_3);
 800bcde:	4b3f      	ldr	r3, [pc, #252]	; (800bddc <lcd_clear_digit+0x678>)
 800bce0:	785b      	ldrb	r3, [r3, #1]
 800bce2:	f023 0308 	bic.w	r3, r3, #8
 800bce6:	b2da      	uxtb	r2, r3
 800bce8:	4b3c      	ldr	r3, [pc, #240]	; (800bddc <lcd_clear_digit+0x678>)
 800bcea:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_3);
 800bcec:	4b3b      	ldr	r3, [pc, #236]	; (800bddc <lcd_clear_digit+0x678>)
 800bcee:	799b      	ldrb	r3, [r3, #6]
 800bcf0:	f023 0308 	bic.w	r3, r3, #8
 800bcf4:	b2da      	uxtb	r2, r3
 800bcf6:	4b39      	ldr	r3, [pc, #228]	; (800bddc <lcd_clear_digit+0x678>)
 800bcf8:	719a      	strb	r2, [r3, #6]
            break;
 800bcfa:	e068      	b.n	800bdce <lcd_clear_digit+0x66a>
            case DIGIT_5:
                g_lcd_map[REG_11] &= ~(1 << BIT_0);
 800bcfc:	4b37      	ldr	r3, [pc, #220]	; (800bddc <lcd_clear_digit+0x678>)
 800bcfe:	7adb      	ldrb	r3, [r3, #11]
 800bd00:	f023 0301 	bic.w	r3, r3, #1
 800bd04:	b2da      	uxtb	r2, r3
 800bd06:	4b35      	ldr	r3, [pc, #212]	; (800bddc <lcd_clear_digit+0x678>)
 800bd08:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_1);
 800bd0a:	4b34      	ldr	r3, [pc, #208]	; (800bddc <lcd_clear_digit+0x678>)
 800bd0c:	7adb      	ldrb	r3, [r3, #11]
 800bd0e:	f023 0302 	bic.w	r3, r3, #2
 800bd12:	b2da      	uxtb	r2, r3
 800bd14:	4b31      	ldr	r3, [pc, #196]	; (800bddc <lcd_clear_digit+0x678>)
 800bd16:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_0);
 800bd18:	4b30      	ldr	r3, [pc, #192]	; (800bddc <lcd_clear_digit+0x678>)
 800bd1a:	7c1b      	ldrb	r3, [r3, #16]
 800bd1c:	f023 0301 	bic.w	r3, r3, #1
 800bd20:	b2da      	uxtb	r2, r3
 800bd22:	4b2e      	ldr	r3, [pc, #184]	; (800bddc <lcd_clear_digit+0x678>)
 800bd24:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_1);
 800bd26:	4b2d      	ldr	r3, [pc, #180]	; (800bddc <lcd_clear_digit+0x678>)
 800bd28:	7c1b      	ldrb	r3, [r3, #16]
 800bd2a:	f023 0302 	bic.w	r3, r3, #2
 800bd2e:	b2da      	uxtb	r2, r3
 800bd30:	4b2a      	ldr	r3, [pc, #168]	; (800bddc <lcd_clear_digit+0x678>)
 800bd32:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_0);
 800bd34:	4b29      	ldr	r3, [pc, #164]	; (800bddc <lcd_clear_digit+0x678>)
 800bd36:	785b      	ldrb	r3, [r3, #1]
 800bd38:	f023 0301 	bic.w	r3, r3, #1
 800bd3c:	b2da      	uxtb	r2, r3
 800bd3e:	4b27      	ldr	r3, [pc, #156]	; (800bddc <lcd_clear_digit+0x678>)
 800bd40:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_1);
 800bd42:	4b26      	ldr	r3, [pc, #152]	; (800bddc <lcd_clear_digit+0x678>)
 800bd44:	785b      	ldrb	r3, [r3, #1]
 800bd46:	f023 0302 	bic.w	r3, r3, #2
 800bd4a:	b2da      	uxtb	r2, r3
 800bd4c:	4b23      	ldr	r3, [pc, #140]	; (800bddc <lcd_clear_digit+0x678>)
 800bd4e:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_1);
 800bd50:	4b22      	ldr	r3, [pc, #136]	; (800bddc <lcd_clear_digit+0x678>)
 800bd52:	799b      	ldrb	r3, [r3, #6]
 800bd54:	f023 0302 	bic.w	r3, r3, #2
 800bd58:	b2da      	uxtb	r2, r3
 800bd5a:	4b20      	ldr	r3, [pc, #128]	; (800bddc <lcd_clear_digit+0x678>)
 800bd5c:	719a      	strb	r2, [r3, #6]
            break;
 800bd5e:	e036      	b.n	800bdce <lcd_clear_digit+0x66a>
            case DIGIT_6:
                g_lcd_map[REG_10] &= ~(1 << BIT_6);
 800bd60:	4b1e      	ldr	r3, [pc, #120]	; (800bddc <lcd_clear_digit+0x678>)
 800bd62:	7a9b      	ldrb	r3, [r3, #10]
 800bd64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd68:	b2da      	uxtb	r2, r3
 800bd6a:	4b1c      	ldr	r3, [pc, #112]	; (800bddc <lcd_clear_digit+0x678>)
 800bd6c:	729a      	strb	r2, [r3, #10]
                g_lcd_map[REG_10] &= ~(1 << BIT_7);
 800bd6e:	4b1b      	ldr	r3, [pc, #108]	; (800bddc <lcd_clear_digit+0x678>)
 800bd70:	7a9b      	ldrb	r3, [r3, #10]
 800bd72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd76:	b2da      	uxtb	r2, r3
 800bd78:	4b18      	ldr	r3, [pc, #96]	; (800bddc <lcd_clear_digit+0x678>)
 800bd7a:	729a      	strb	r2, [r3, #10]
                g_lcd_map[REG_15] &= ~(1 << BIT_6);
 800bd7c:	4b17      	ldr	r3, [pc, #92]	; (800bddc <lcd_clear_digit+0x678>)
 800bd7e:	7bdb      	ldrb	r3, [r3, #15]
 800bd80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd84:	b2da      	uxtb	r2, r3
 800bd86:	4b15      	ldr	r3, [pc, #84]	; (800bddc <lcd_clear_digit+0x678>)
 800bd88:	73da      	strb	r2, [r3, #15]
                g_lcd_map[REG_15] &= ~(1 << BIT_7);
 800bd8a:	4b14      	ldr	r3, [pc, #80]	; (800bddc <lcd_clear_digit+0x678>)
 800bd8c:	7bdb      	ldrb	r3, [r3, #15]
 800bd8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd92:	b2da      	uxtb	r2, r3
 800bd94:	4b11      	ldr	r3, [pc, #68]	; (800bddc <lcd_clear_digit+0x678>)
 800bd96:	73da      	strb	r2, [r3, #15]
                g_lcd_map[REG_0] &= ~(1 << BIT_6);
 800bd98:	4b10      	ldr	r3, [pc, #64]	; (800bddc <lcd_clear_digit+0x678>)
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bda0:	b2da      	uxtb	r2, r3
 800bda2:	4b0e      	ldr	r3, [pc, #56]	; (800bddc <lcd_clear_digit+0x678>)
 800bda4:	701a      	strb	r2, [r3, #0]
                g_lcd_map[REG_0] &= ~(1 << BIT_7);
 800bda6:	4b0d      	ldr	r3, [pc, #52]	; (800bddc <lcd_clear_digit+0x678>)
 800bda8:	781b      	ldrb	r3, [r3, #0]
 800bdaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdae:	b2da      	uxtb	r2, r3
 800bdb0:	4b0a      	ldr	r3, [pc, #40]	; (800bddc <lcd_clear_digit+0x678>)
 800bdb2:	701a      	strb	r2, [r3, #0]
                g_lcd_map[REG_5] &= ~(1 << BIT_7);
 800bdb4:	4b09      	ldr	r3, [pc, #36]	; (800bddc <lcd_clear_digit+0x678>)
 800bdb6:	795b      	ldrb	r3, [r3, #5]
 800bdb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdbc:	b2da      	uxtb	r2, r3
 800bdbe:	4b07      	ldr	r3, [pc, #28]	; (800bddc <lcd_clear_digit+0x678>)
 800bdc0:	715a      	strb	r2, [r3, #5]
            break;
 800bdc2:	e004      	b.n	800bdce <lcd_clear_digit+0x66a>
            break;
 800bdc4:	bf00      	nop
 800bdc6:	e002      	b.n	800bdce <lcd_clear_digit+0x66a>
            default:
            break;
        }
    }
 800bdc8:	bf00      	nop
 800bdca:	e000      	b.n	800bdce <lcd_clear_digit+0x66a>
            break;
 800bdcc:	bf00      	nop
}
 800bdce:	bf00      	nop
 800bdd0:	370c      	adds	r7, #12
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd8:	4770      	bx	lr
 800bdda:	bf00      	nop
 800bddc:	20001d38 	.word	0x20001d38

0800bde0 <lcd_clear_point>:
 * pantalla.
 * @param Enumeraciones rows_t y point_t de lcd.h
 * @retval None
 */
void lcd_clear_point(rows_t line, point_t point)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b083      	sub	sp, #12
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	4603      	mov	r3, r0
 800bde8:	460a      	mov	r2, r1
 800bdea:	71fb      	strb	r3, [r7, #7]
 800bdec:	4613      	mov	r3, r2
 800bdee:	71bb      	strb	r3, [r7, #6]
    if (line == HIGH_ROW)
 800bdf0:	79fb      	ldrb	r3, [r7, #7]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d14c      	bne.n	800be90 <lcd_clear_point+0xb0>
    {
        switch (point)
 800bdf6:	79bb      	ldrb	r3, [r7, #6]
 800bdf8:	2b06      	cmp	r3, #6
 800bdfa:	f200 808f 	bhi.w	800bf1c <lcd_clear_point+0x13c>
 800bdfe:	a201      	add	r2, pc, #4	; (adr r2, 800be04 <lcd_clear_point+0x24>)
 800be00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be04:	0800be21 	.word	0x0800be21
 800be08:	0800be31 	.word	0x0800be31
 800be0c:	0800be41 	.word	0x0800be41
 800be10:	0800be51 	.word	0x0800be51
 800be14:	0800be61 	.word	0x0800be61
 800be18:	0800be71 	.word	0x0800be71
 800be1c:	0800be81 	.word	0x0800be81
        {
            case PNT_0:
                g_lcd_map[REG_7] &= ~(1 << BIT_7);
 800be20:	4b44      	ldr	r3, [pc, #272]	; (800bf34 <lcd_clear_point+0x154>)
 800be22:	79db      	ldrb	r3, [r3, #7]
 800be24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be28:	b2da      	uxtb	r2, r3
 800be2a:	4b42      	ldr	r3, [pc, #264]	; (800bf34 <lcd_clear_point+0x154>)
 800be2c:	71da      	strb	r2, [r3, #7]
            break;
 800be2e:	e07a      	b.n	800bf26 <lcd_clear_point+0x146>
            case PNT_1:
                g_lcd_map[REG_8] &= ~(1 << BIT_1);
 800be30:	4b40      	ldr	r3, [pc, #256]	; (800bf34 <lcd_clear_point+0x154>)
 800be32:	7a1b      	ldrb	r3, [r3, #8]
 800be34:	f023 0302 	bic.w	r3, r3, #2
 800be38:	b2da      	uxtb	r2, r3
 800be3a:	4b3e      	ldr	r3, [pc, #248]	; (800bf34 <lcd_clear_point+0x154>)
 800be3c:	721a      	strb	r2, [r3, #8]
            break;
 800be3e:	e072      	b.n	800bf26 <lcd_clear_point+0x146>
            case PNT_2:
                g_lcd_map[REG_8] &= ~(1 << BIT_3);
 800be40:	4b3c      	ldr	r3, [pc, #240]	; (800bf34 <lcd_clear_point+0x154>)
 800be42:	7a1b      	ldrb	r3, [r3, #8]
 800be44:	f023 0308 	bic.w	r3, r3, #8
 800be48:	b2da      	uxtb	r2, r3
 800be4a:	4b3a      	ldr	r3, [pc, #232]	; (800bf34 <lcd_clear_point+0x154>)
 800be4c:	721a      	strb	r2, [r3, #8]
            break;
 800be4e:	e06a      	b.n	800bf26 <lcd_clear_point+0x146>
            case PNT_3:
                g_lcd_map[REG_8] &= ~(1 << BIT_5);
 800be50:	4b38      	ldr	r3, [pc, #224]	; (800bf34 <lcd_clear_point+0x154>)
 800be52:	7a1b      	ldrb	r3, [r3, #8]
 800be54:	f023 0320 	bic.w	r3, r3, #32
 800be58:	b2da      	uxtb	r2, r3
 800be5a:	4b36      	ldr	r3, [pc, #216]	; (800bf34 <lcd_clear_point+0x154>)
 800be5c:	721a      	strb	r2, [r3, #8]
            break;
 800be5e:	e062      	b.n	800bf26 <lcd_clear_point+0x146>
            case PNT_4:
                g_lcd_map[REG_8] &= ~(1 << BIT_7);
 800be60:	4b34      	ldr	r3, [pc, #208]	; (800bf34 <lcd_clear_point+0x154>)
 800be62:	7a1b      	ldrb	r3, [r3, #8]
 800be64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be68:	b2da      	uxtb	r2, r3
 800be6a:	4b32      	ldr	r3, [pc, #200]	; (800bf34 <lcd_clear_point+0x154>)
 800be6c:	721a      	strb	r2, [r3, #8]
            break;
 800be6e:	e05a      	b.n	800bf26 <lcd_clear_point+0x146>
            case PNT_5:
                g_lcd_map[REG_9] &= ~(1 << BIT_1);
 800be70:	4b30      	ldr	r3, [pc, #192]	; (800bf34 <lcd_clear_point+0x154>)
 800be72:	7a5b      	ldrb	r3, [r3, #9]
 800be74:	f023 0302 	bic.w	r3, r3, #2
 800be78:	b2da      	uxtb	r2, r3
 800be7a:	4b2e      	ldr	r3, [pc, #184]	; (800bf34 <lcd_clear_point+0x154>)
 800be7c:	725a      	strb	r2, [r3, #9]
            break;
 800be7e:	e052      	b.n	800bf26 <lcd_clear_point+0x146>
            case PNT_6:
                g_lcd_map[REG_9] &= ~(1 << BIT_3);
 800be80:	4b2c      	ldr	r3, [pc, #176]	; (800bf34 <lcd_clear_point+0x154>)
 800be82:	7a5b      	ldrb	r3, [r3, #9]
 800be84:	f023 0308 	bic.w	r3, r3, #8
 800be88:	b2da      	uxtb	r2, r3
 800be8a:	4b2a      	ldr	r3, [pc, #168]	; (800bf34 <lcd_clear_point+0x154>)
 800be8c:	725a      	strb	r2, [r3, #9]
            break;
 800be8e:	e04a      	b.n	800bf26 <lcd_clear_point+0x146>
            default:
            break;
        }
    }
    else if (line == LOW_ROW)
 800be90:	79fb      	ldrb	r3, [r7, #7]
 800be92:	2b01      	cmp	r3, #1
 800be94:	d144      	bne.n	800bf20 <lcd_clear_point+0x140>
    {
        switch (point)
 800be96:	79bb      	ldrb	r3, [r7, #6]
 800be98:	2b05      	cmp	r3, #5
 800be9a:	d843      	bhi.n	800bf24 <lcd_clear_point+0x144>
 800be9c:	a201      	add	r2, pc, #4	; (adr r2, 800bea4 <lcd_clear_point+0xc4>)
 800be9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bea2:	bf00      	nop
 800bea4:	0800bebd 	.word	0x0800bebd
 800bea8:	0800becd 	.word	0x0800becd
 800beac:	0800bedd 	.word	0x0800bedd
 800beb0:	0800beed 	.word	0x0800beed
 800beb4:	0800befd 	.word	0x0800befd
 800beb8:	0800bf0d 	.word	0x0800bf0d
        {
            case PNT_0:
                g_lcd_map[REG_7] &= ~(1 << BIT_2);
 800bebc:	4b1d      	ldr	r3, [pc, #116]	; (800bf34 <lcd_clear_point+0x154>)
 800bebe:	79db      	ldrb	r3, [r3, #7]
 800bec0:	f023 0304 	bic.w	r3, r3, #4
 800bec4:	b2da      	uxtb	r2, r3
 800bec6:	4b1b      	ldr	r3, [pc, #108]	; (800bf34 <lcd_clear_point+0x154>)
 800bec8:	71da      	strb	r2, [r3, #7]
            break;
 800beca:	e02c      	b.n	800bf26 <lcd_clear_point+0x146>
            case PNT_1:
                g_lcd_map[REG_7] &= ~(1 << BIT_0);
 800becc:	4b19      	ldr	r3, [pc, #100]	; (800bf34 <lcd_clear_point+0x154>)
 800bece:	79db      	ldrb	r3, [r3, #7]
 800bed0:	f023 0301 	bic.w	r3, r3, #1
 800bed4:	b2da      	uxtb	r2, r3
 800bed6:	4b17      	ldr	r3, [pc, #92]	; (800bf34 <lcd_clear_point+0x154>)
 800bed8:	71da      	strb	r2, [r3, #7]
            break;
 800beda:	e024      	b.n	800bf26 <lcd_clear_point+0x146>
            case PNT_2:
                g_lcd_map[REG_6] &= ~(1 << BIT_6);
 800bedc:	4b15      	ldr	r3, [pc, #84]	; (800bf34 <lcd_clear_point+0x154>)
 800bede:	799b      	ldrb	r3, [r3, #6]
 800bee0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bee4:	b2da      	uxtb	r2, r3
 800bee6:	4b13      	ldr	r3, [pc, #76]	; (800bf34 <lcd_clear_point+0x154>)
 800bee8:	719a      	strb	r2, [r3, #6]
            break;
 800beea:	e01c      	b.n	800bf26 <lcd_clear_point+0x146>
            case PNT_3:
                g_lcd_map[REG_6] &= ~(1 << BIT_4);
 800beec:	4b11      	ldr	r3, [pc, #68]	; (800bf34 <lcd_clear_point+0x154>)
 800beee:	799b      	ldrb	r3, [r3, #6]
 800bef0:	f023 0310 	bic.w	r3, r3, #16
 800bef4:	b2da      	uxtb	r2, r3
 800bef6:	4b0f      	ldr	r3, [pc, #60]	; (800bf34 <lcd_clear_point+0x154>)
 800bef8:	719a      	strb	r2, [r3, #6]
            break;
 800befa:	e014      	b.n	800bf26 <lcd_clear_point+0x146>
            case PNT_4:
                g_lcd_map[REG_6] &= ~(1 << BIT_2);
 800befc:	4b0d      	ldr	r3, [pc, #52]	; (800bf34 <lcd_clear_point+0x154>)
 800befe:	799b      	ldrb	r3, [r3, #6]
 800bf00:	f023 0304 	bic.w	r3, r3, #4
 800bf04:	b2da      	uxtb	r2, r3
 800bf06:	4b0b      	ldr	r3, [pc, #44]	; (800bf34 <lcd_clear_point+0x154>)
 800bf08:	719a      	strb	r2, [r3, #6]
            break;
 800bf0a:	e00c      	b.n	800bf26 <lcd_clear_point+0x146>
            case PNT_5:
                g_lcd_map[REG_6] &= ~(1 << BIT_0);
 800bf0c:	4b09      	ldr	r3, [pc, #36]	; (800bf34 <lcd_clear_point+0x154>)
 800bf0e:	799b      	ldrb	r3, [r3, #6]
 800bf10:	f023 0301 	bic.w	r3, r3, #1
 800bf14:	b2da      	uxtb	r2, r3
 800bf16:	4b07      	ldr	r3, [pc, #28]	; (800bf34 <lcd_clear_point+0x154>)
 800bf18:	719a      	strb	r2, [r3, #6]
            break;
 800bf1a:	e004      	b.n	800bf26 <lcd_clear_point+0x146>
            break;
 800bf1c:	bf00      	nop
 800bf1e:	e002      	b.n	800bf26 <lcd_clear_point+0x146>
            default:
            break;
        }
    }
 800bf20:	bf00      	nop
 800bf22:	e000      	b.n	800bf26 <lcd_clear_point+0x146>
            break;
 800bf24:	bf00      	nop
}
 800bf26:	bf00      	nop
 800bf28:	370c      	adds	r7, #12
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf30:	4770      	bx	lr
 800bf32:	bf00      	nop
 800bf34:	20001d38 	.word	0x20001d38

0800bf38 <lcd_clear_time_unit>:

    pcf8553_blink(blink_speed);
}

void lcd_clear_time_unit(fmc_unit_time_t time_unit, blink_t blink_speed)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b082      	sub	sp, #8
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	4603      	mov	r3, r0
 800bf40:	460a      	mov	r2, r1
 800bf42:	71fb      	strb	r3, [r7, #7]
 800bf44:	4613      	mov	r3, r2
 800bf46:	71bb      	strb	r3, [r7, #6]
    switch (time_unit)
 800bf48:	79fb      	ldrb	r3, [r7, #7]
 800bf4a:	2b03      	cmp	r3, #3
 800bf4c:	d82a      	bhi.n	800bfa4 <lcd_clear_time_unit+0x6c>
 800bf4e:	a201      	add	r2, pc, #4	; (adr r2, 800bf54 <lcd_clear_time_unit+0x1c>)
 800bf50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf54:	0800bf65 	.word	0x0800bf65
 800bf58:	0800bf75 	.word	0x0800bf75
 800bf5c:	0800bf85 	.word	0x0800bf85
 800bf60:	0800bf95 	.word	0x0800bf95
    {
        case H:
            g_lcd_map[REG_5] &= ~(1 << BIT_6);
 800bf64:	4b14      	ldr	r3, [pc, #80]	; (800bfb8 <lcd_clear_time_unit+0x80>)
 800bf66:	795b      	ldrb	r3, [r3, #5]
 800bf68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf6c:	b2da      	uxtb	r2, r3
 800bf6e:	4b12      	ldr	r3, [pc, #72]	; (800bfb8 <lcd_clear_time_unit+0x80>)
 800bf70:	715a      	strb	r2, [r3, #5]
        break;
 800bf72:	e018      	b.n	800bfa6 <lcd_clear_time_unit+0x6e>
        case D:
            g_lcd_map[REG_9] &= ~(1 << BIT_5);
 800bf74:	4b10      	ldr	r3, [pc, #64]	; (800bfb8 <lcd_clear_time_unit+0x80>)
 800bf76:	7a5b      	ldrb	r3, [r3, #9]
 800bf78:	f023 0320 	bic.w	r3, r3, #32
 800bf7c:	b2da      	uxtb	r2, r3
 800bf7e:	4b0e      	ldr	r3, [pc, #56]	; (800bfb8 <lcd_clear_time_unit+0x80>)
 800bf80:	725a      	strb	r2, [r3, #9]
        break;
 800bf82:	e010      	b.n	800bfa6 <lcd_clear_time_unit+0x6e>
        case S:
            g_lcd_map[REG_10] &= ~(1 << BIT_5);
 800bf84:	4b0c      	ldr	r3, [pc, #48]	; (800bfb8 <lcd_clear_time_unit+0x80>)
 800bf86:	7a9b      	ldrb	r3, [r3, #10]
 800bf88:	f023 0320 	bic.w	r3, r3, #32
 800bf8c:	b2da      	uxtb	r2, r3
 800bf8e:	4b0a      	ldr	r3, [pc, #40]	; (800bfb8 <lcd_clear_time_unit+0x80>)
 800bf90:	729a      	strb	r2, [r3, #10]
        break;
 800bf92:	e008      	b.n	800bfa6 <lcd_clear_time_unit+0x6e>
        case M:
            g_lcd_map[REG_9] &= ~(1 << BIT_7);
 800bf94:	4b08      	ldr	r3, [pc, #32]	; (800bfb8 <lcd_clear_time_unit+0x80>)
 800bf96:	7a5b      	ldrb	r3, [r3, #9]
 800bf98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf9c:	b2da      	uxtb	r2, r3
 800bf9e:	4b06      	ldr	r3, [pc, #24]	; (800bfb8 <lcd_clear_time_unit+0x80>)
 800bfa0:	725a      	strb	r2, [r3, #9]
        break;
 800bfa2:	e000      	b.n	800bfa6 <lcd_clear_time_unit+0x6e>
        default:
        break;
 800bfa4:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 800bfa6:	79bb      	ldrb	r3, [r7, #6]
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f001 faff 	bl	800d5ac <pcf8553_blink>
}
 800bfae:	bf00      	nop
 800bfb0:	3708      	adds	r7, #8
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
 800bfb6:	bf00      	nop
 800bfb8:	20001d38 	.word	0x20001d38

0800bfbc <lcd_clear_vol_unit>:

void lcd_clear_vol_unit(fmc_unit_volume_t vol_unit, blink_t blink_speed)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b082      	sub	sp, #8
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	460a      	mov	r2, r1
 800bfc6:	71fb      	strb	r3, [r7, #7]
 800bfc8:	4613      	mov	r3, r2
 800bfca:	71bb      	strb	r3, [r7, #6]
    switch (vol_unit)
 800bfcc:	79fb      	ldrb	r3, [r7, #7]
 800bfce:	2b06      	cmp	r3, #6
 800bfd0:	f200 81e3 	bhi.w	800c39a <lcd_clear_vol_unit+0x3de>
 800bfd4:	a201      	add	r2, pc, #4	; (adr r2, 800bfdc <lcd_clear_vol_unit+0x20>)
 800bfd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfda:	bf00      	nop
 800bfdc:	0800bff9 	.word	0x0800bff9
 800bfe0:	0800c0eb 	.word	0x0800c0eb
 800bfe4:	0800c04f 	.word	0x0800c04f
 800bfe8:	0800c261 	.word	0x0800c261
 800bfec:	0800c195 	.word	0x0800c195
 800bff0:	0800c2e1 	.word	0x0800c2e1
 800bff4:	0800c361 	.word	0x0800c361
    {
        case LT:
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 800bff8:	4b98      	ldr	r3, [pc, #608]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800bffa:	7bdb      	ldrb	r3, [r3, #15]
 800bffc:	f023 0320 	bic.w	r3, r3, #32
 800c000:	b2da      	uxtb	r2, r3
 800c002:	4b96      	ldr	r3, [pc, #600]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c004:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 800c006:	4b95      	ldr	r3, [pc, #596]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c008:	781b      	ldrb	r3, [r3, #0]
 800c00a:	f023 0320 	bic.w	r3, r3, #32
 800c00e:	b2da      	uxtb	r2, r3
 800c010:	4b92      	ldr	r3, [pc, #584]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c012:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_5);
 800c014:	4b91      	ldr	r3, [pc, #580]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c016:	795b      	ldrb	r3, [r3, #5]
 800c018:	f023 0320 	bic.w	r3, r3, #32
 800c01c:	b2da      	uxtb	r2, r3
 800c01e:	4b8f      	ldr	r3, [pc, #572]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c020:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 800c022:	4b8e      	ldr	r3, [pc, #568]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c024:	7b9b      	ldrb	r3, [r3, #14]
 800c026:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c02a:	b2da      	uxtb	r2, r3
 800c02c:	4b8b      	ldr	r3, [pc, #556]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c02e:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_10] &= ~(1 << BIT_0);
 800c030:	4b8a      	ldr	r3, [pc, #552]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c032:	7a9b      	ldrb	r3, [r3, #10]
 800c034:	f023 0301 	bic.w	r3, r3, #1
 800c038:	b2da      	uxtb	r2, r3
 800c03a:	4b88      	ldr	r3, [pc, #544]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c03c:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_9] &= ~(1 << BIT_6);
 800c03e:	4b87      	ldr	r3, [pc, #540]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c040:	7a5b      	ldrb	r3, [r3, #9]
 800c042:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c046:	b2da      	uxtb	r2, r3
 800c048:	4b84      	ldr	r3, [pc, #528]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c04a:	725a      	strb	r2, [r3, #9]
        break;
 800c04c:	e1a6      	b.n	800c39c <lcd_clear_vol_unit+0x3e0>
        case KG:
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 800c04e:	4b83      	ldr	r3, [pc, #524]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c050:	7bdb      	ldrb	r3, [r3, #15]
 800c052:	f023 0320 	bic.w	r3, r3, #32
 800c056:	b2da      	uxtb	r2, r3
 800c058:	4b80      	ldr	r3, [pc, #512]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c05a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_4);
 800c05c:	4b7f      	ldr	r3, [pc, #508]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c05e:	7bdb      	ldrb	r3, [r3, #15]
 800c060:	f023 0310 	bic.w	r3, r3, #16
 800c064:	b2da      	uxtb	r2, r3
 800c066:	4b7d      	ldr	r3, [pc, #500]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c068:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_2);
 800c06a:	4b7c      	ldr	r3, [pc, #496]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c06c:	7bdb      	ldrb	r3, [r3, #15]
 800c06e:	f023 0304 	bic.w	r3, r3, #4
 800c072:	b2da      	uxtb	r2, r3
 800c074:	4b79      	ldr	r3, [pc, #484]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c076:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 800c078:	4b78      	ldr	r3, [pc, #480]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	f023 0320 	bic.w	r3, r3, #32
 800c080:	b2da      	uxtb	r2, r3
 800c082:	4b76      	ldr	r3, [pc, #472]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c084:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_4);
 800c086:	4b75      	ldr	r3, [pc, #468]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c088:	795b      	ldrb	r3, [r3, #5]
 800c08a:	f023 0310 	bic.w	r3, r3, #16
 800c08e:	b2da      	uxtb	r2, r3
 800c090:	4b72      	ldr	r3, [pc, #456]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c092:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 800c094:	4b71      	ldr	r3, [pc, #452]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c096:	7b9b      	ldrb	r3, [r3, #14]
 800c098:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c09c:	b2da      	uxtb	r2, r3
 800c09e:	4b6f      	ldr	r3, [pc, #444]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c0a0:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 800c0a2:	4b6e      	ldr	r3, [pc, #440]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c0a4:	7bdb      	ldrb	r3, [r3, #15]
 800c0a6:	f023 0302 	bic.w	r3, r3, #2
 800c0aa:	b2da      	uxtb	r2, r3
 800c0ac:	4b6b      	ldr	r3, [pc, #428]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c0ae:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 800c0b0:	4b6a      	ldr	r3, [pc, #424]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c0b2:	781b      	ldrb	r3, [r3, #0]
 800c0b4:	f023 0301 	bic.w	r3, r3, #1
 800c0b8:	b2da      	uxtb	r2, r3
 800c0ba:	4b68      	ldr	r3, [pc, #416]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c0bc:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 800c0be:	4b67      	ldr	r3, [pc, #412]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c0c0:	781b      	ldrb	r3, [r3, #0]
 800c0c2:	f023 0302 	bic.w	r3, r3, #2
 800c0c6:	b2da      	uxtb	r2, r3
 800c0c8:	4b64      	ldr	r3, [pc, #400]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c0ca:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] &= ~(1 << BIT_7);
 800c0cc:	4b63      	ldr	r3, [pc, #396]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c0ce:	791b      	ldrb	r3, [r3, #4]
 800c0d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0d4:	b2da      	uxtb	r2, r3
 800c0d6:	4b61      	ldr	r3, [pc, #388]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c0d8:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 800c0da:	4b60      	ldr	r3, [pc, #384]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c0dc:	795b      	ldrb	r3, [r3, #5]
 800c0de:	f023 0302 	bic.w	r3, r3, #2
 800c0e2:	b2da      	uxtb	r2, r3
 800c0e4:	4b5d      	ldr	r3, [pc, #372]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c0e6:	715a      	strb	r2, [r3, #5]
        break;
 800c0e8:	e158      	b.n	800c39c <lcd_clear_vol_unit+0x3e0>
        case M3:
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 800c0ea:	4b5c      	ldr	r3, [pc, #368]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c0ec:	7bdb      	ldrb	r3, [r3, #15]
 800c0ee:	f023 0320 	bic.w	r3, r3, #32
 800c0f2:	b2da      	uxtb	r2, r3
 800c0f4:	4b59      	ldr	r3, [pc, #356]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c0f6:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_10] &= ~(1 << BIT_2);
 800c0f8:	4b58      	ldr	r3, [pc, #352]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c0fa:	7a9b      	ldrb	r3, [r3, #10]
 800c0fc:	f023 0304 	bic.w	r3, r3, #4
 800c100:	b2da      	uxtb	r2, r3
 800c102:	4b56      	ldr	r3, [pc, #344]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c104:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_4);
 800c106:	4b55      	ldr	r3, [pc, #340]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c108:	7bdb      	ldrb	r3, [r3, #15]
 800c10a:	f023 0310 	bic.w	r3, r3, #16
 800c10e:	b2da      	uxtb	r2, r3
 800c110:	4b52      	ldr	r3, [pc, #328]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c112:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_3);
 800c114:	4b51      	ldr	r3, [pc, #324]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c116:	7bdb      	ldrb	r3, [r3, #15]
 800c118:	f023 0308 	bic.w	r3, r3, #8
 800c11c:	b2da      	uxtb	r2, r3
 800c11e:	4b4f      	ldr	r3, [pc, #316]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c120:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 800c122:	4b4e      	ldr	r3, [pc, #312]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c124:	781b      	ldrb	r3, [r3, #0]
 800c126:	f023 0320 	bic.w	r3, r3, #32
 800c12a:	b2da      	uxtb	r2, r3
 800c12c:	4b4b      	ldr	r3, [pc, #300]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c12e:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_3);
 800c130:	4b4a      	ldr	r3, [pc, #296]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c132:	781b      	ldrb	r3, [r3, #0]
 800c134:	f023 0308 	bic.w	r3, r3, #8
 800c138:	b2da      	uxtb	r2, r3
 800c13a:	4b48      	ldr	r3, [pc, #288]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c13c:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 800c13e:	4b47      	ldr	r3, [pc, #284]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c140:	7b9b      	ldrb	r3, [r3, #14]
 800c142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c146:	b2da      	uxtb	r2, r3
 800c148:	4b44      	ldr	r3, [pc, #272]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c14a:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_19] &= ~(1 << BIT_7);
 800c14c:	4b43      	ldr	r3, [pc, #268]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c14e:	7cdb      	ldrb	r3, [r3, #19]
 800c150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c154:	b2da      	uxtb	r2, r3
 800c156:	4b41      	ldr	r3, [pc, #260]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c158:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] &= ~(1 << BIT_6);
 800c15a:	4b40      	ldr	r3, [pc, #256]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c15c:	7cdb      	ldrb	r3, [r3, #19]
 800c15e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c162:	b2da      	uxtb	r2, r3
 800c164:	4b3d      	ldr	r3, [pc, #244]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c166:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 800c168:	4b3c      	ldr	r3, [pc, #240]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c16a:	781b      	ldrb	r3, [r3, #0]
 800c16c:	f023 0301 	bic.w	r3, r3, #1
 800c170:	b2da      	uxtb	r2, r3
 800c172:	4b3a      	ldr	r3, [pc, #232]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c174:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] &= ~(1 << BIT_7);
 800c176:	4b39      	ldr	r3, [pc, #228]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c178:	791b      	ldrb	r3, [r3, #4]
 800c17a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c17e:	b2da      	uxtb	r2, r3
 800c180:	4b36      	ldr	r3, [pc, #216]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c182:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 800c184:	4b35      	ldr	r3, [pc, #212]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c186:	795b      	ldrb	r3, [r3, #5]
 800c188:	f023 0302 	bic.w	r3, r3, #2
 800c18c:	b2da      	uxtb	r2, r3
 800c18e:	4b33      	ldr	r3, [pc, #204]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c190:	715a      	strb	r2, [r3, #5]
        break;
 800c192:	e103      	b.n	800c39c <lcd_clear_vol_unit+0x3e0>
        case BR:
            g_lcd_map[REG_10] &= ~(1 << BIT_3);
 800c194:	4b31      	ldr	r3, [pc, #196]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c196:	7a9b      	ldrb	r3, [r3, #10]
 800c198:	f023 0308 	bic.w	r3, r3, #8
 800c19c:	b2da      	uxtb	r2, r3
 800c19e:	4b2f      	ldr	r3, [pc, #188]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c1a0:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_10] &= ~(1 << BIT_4);
 800c1a2:	4b2e      	ldr	r3, [pc, #184]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c1a4:	7a9b      	ldrb	r3, [r3, #10]
 800c1a6:	f023 0310 	bic.w	r3, r3, #16
 800c1aa:	b2da      	uxtb	r2, r3
 800c1ac:	4b2b      	ldr	r3, [pc, #172]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c1ae:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_3);
 800c1b0:	4b2a      	ldr	r3, [pc, #168]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c1b2:	7bdb      	ldrb	r3, [r3, #15]
 800c1b4:	f023 0308 	bic.w	r3, r3, #8
 800c1b8:	b2da      	uxtb	r2, r3
 800c1ba:	4b28      	ldr	r3, [pc, #160]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c1bc:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 800c1be:	4b27      	ldr	r3, [pc, #156]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c1c0:	781b      	ldrb	r3, [r3, #0]
 800c1c2:	f023 0310 	bic.w	r3, r3, #16
 800c1c6:	b2da      	uxtb	r2, r3
 800c1c8:	4b24      	ldr	r3, [pc, #144]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c1ca:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_2);
 800c1cc:	4b23      	ldr	r3, [pc, #140]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c1ce:	795b      	ldrb	r3, [r3, #5]
 800c1d0:	f023 0304 	bic.w	r3, r3, #4
 800c1d4:	b2da      	uxtb	r2, r3
 800c1d6:	4b21      	ldr	r3, [pc, #132]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c1d8:	715a      	strb	r2, [r3, #5]
            g_lcd_map[REG_0] &= ~(1 << BIT_3);
 800c1da:	4b20      	ldr	r3, [pc, #128]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	f023 0308 	bic.w	r3, r3, #8
 800c1e2:	b2da      	uxtb	r2, r3
 800c1e4:	4b1d      	ldr	r3, [pc, #116]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c1e6:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_5);
 800c1e8:	4b1c      	ldr	r3, [pc, #112]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c1ea:	795b      	ldrb	r3, [r3, #5]
 800c1ec:	f023 0320 	bic.w	r3, r3, #32
 800c1f0:	b2da      	uxtb	r2, r3
 800c1f2:	4b1a      	ldr	r3, [pc, #104]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c1f4:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 800c1f6:	4b19      	ldr	r3, [pc, #100]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c1f8:	7b9b      	ldrb	r3, [r3, #14]
 800c1fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1fe:	b2da      	uxtb	r2, r3
 800c200:	4b16      	ldr	r3, [pc, #88]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c202:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 800c204:	4b15      	ldr	r3, [pc, #84]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c206:	7bdb      	ldrb	r3, [r3, #15]
 800c208:	f023 0302 	bic.w	r3, r3, #2
 800c20c:	b2da      	uxtb	r2, r3
 800c20e:	4b13      	ldr	r3, [pc, #76]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c210:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] &= ~(1 << BIT_7);
 800c212:	4b12      	ldr	r3, [pc, #72]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c214:	7cdb      	ldrb	r3, [r3, #19]
 800c216:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c21a:	b2da      	uxtb	r2, r3
 800c21c:	4b0f      	ldr	r3, [pc, #60]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c21e:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] &= ~(1 << BIT_6);
 800c220:	4b0e      	ldr	r3, [pc, #56]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c222:	7cdb      	ldrb	r3, [r3, #19]
 800c224:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c228:	b2da      	uxtb	r2, r3
 800c22a:	4b0c      	ldr	r3, [pc, #48]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c22c:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 800c22e:	4b0b      	ldr	r3, [pc, #44]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c230:	781b      	ldrb	r3, [r3, #0]
 800c232:	f023 0301 	bic.w	r3, r3, #1
 800c236:	b2da      	uxtb	r2, r3
 800c238:	4b08      	ldr	r3, [pc, #32]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c23a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 800c23c:	4b07      	ldr	r3, [pc, #28]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c23e:	781b      	ldrb	r3, [r3, #0]
 800c240:	f023 0302 	bic.w	r3, r3, #2
 800c244:	b2da      	uxtb	r2, r3
 800c246:	4b05      	ldr	r3, [pc, #20]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c248:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_0);
 800c24a:	4b04      	ldr	r3, [pc, #16]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c24c:	795b      	ldrb	r3, [r3, #5]
 800c24e:	f023 0301 	bic.w	r3, r3, #1
 800c252:	b2da      	uxtb	r2, r3
 800c254:	4b01      	ldr	r3, [pc, #4]	; (800c25c <lcd_clear_vol_unit+0x2a0>)
 800c256:	715a      	strb	r2, [r3, #5]
        break;
 800c258:	e0a0      	b.n	800c39c <lcd_clear_vol_unit+0x3e0>
 800c25a:	bf00      	nop
 800c25c:	20001d38 	.word	0x20001d38
        case GL:
            g_lcd_map[REG_10] &= ~(1 << BIT_3);
 800c260:	4b52      	ldr	r3, [pc, #328]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c262:	7a9b      	ldrb	r3, [r3, #10]
 800c264:	f023 0308 	bic.w	r3, r3, #8
 800c268:	b2da      	uxtb	r2, r3
 800c26a:	4b50      	ldr	r3, [pc, #320]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c26c:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 800c26e:	4b4f      	ldr	r3, [pc, #316]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c270:	7bdb      	ldrb	r3, [r3, #15]
 800c272:	f023 0320 	bic.w	r3, r3, #32
 800c276:	b2da      	uxtb	r2, r3
 800c278:	4b4c      	ldr	r3, [pc, #304]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c27a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 800c27c:	4b4b      	ldr	r3, [pc, #300]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c27e:	781b      	ldrb	r3, [r3, #0]
 800c280:	f023 0310 	bic.w	r3, r3, #16
 800c284:	b2da      	uxtb	r2, r3
 800c286:	4b49      	ldr	r3, [pc, #292]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c288:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 800c28a:	4b48      	ldr	r3, [pc, #288]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c28c:	781b      	ldrb	r3, [r3, #0]
 800c28e:	f023 0320 	bic.w	r3, r3, #32
 800c292:	b2da      	uxtb	r2, r3
 800c294:	4b45      	ldr	r3, [pc, #276]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c296:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_3);
 800c298:	4b44      	ldr	r3, [pc, #272]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	f023 0308 	bic.w	r3, r3, #8
 800c2a0:	b2da      	uxtb	r2, r3
 800c2a2:	4b42      	ldr	r3, [pc, #264]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c2a4:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_5);
 800c2a6:	4b41      	ldr	r3, [pc, #260]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c2a8:	795b      	ldrb	r3, [r3, #5]
 800c2aa:	f023 0320 	bic.w	r3, r3, #32
 800c2ae:	b2da      	uxtb	r2, r3
 800c2b0:	4b3e      	ldr	r3, [pc, #248]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c2b2:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 800c2b4:	4b3d      	ldr	r3, [pc, #244]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c2b6:	7bdb      	ldrb	r3, [r3, #15]
 800c2b8:	f023 0302 	bic.w	r3, r3, #2
 800c2bc:	b2da      	uxtb	r2, r3
 800c2be:	4b3b      	ldr	r3, [pc, #236]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c2c0:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 800c2c2:	4b3a      	ldr	r3, [pc, #232]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c2c4:	781b      	ldrb	r3, [r3, #0]
 800c2c6:	f023 0302 	bic.w	r3, r3, #2
 800c2ca:	b2da      	uxtb	r2, r3
 800c2cc:	4b37      	ldr	r3, [pc, #220]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c2ce:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 800c2d0:	4b36      	ldr	r3, [pc, #216]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c2d2:	795b      	ldrb	r3, [r3, #5]
 800c2d4:	f023 0302 	bic.w	r3, r3, #2
 800c2d8:	b2da      	uxtb	r2, r3
 800c2da:	4b34      	ldr	r3, [pc, #208]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c2dc:	715a      	strb	r2, [r3, #5]
        break;
 800c2de:	e05d      	b.n	800c39c <lcd_clear_vol_unit+0x3e0>
        case CELSIUS:
            g_lcd_map[REG_10] &= ~(1 << BIT_3);
 800c2e0:	4b32      	ldr	r3, [pc, #200]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c2e2:	7a9b      	ldrb	r3, [r3, #10]
 800c2e4:	f023 0308 	bic.w	r3, r3, #8
 800c2e8:	b2da      	uxtb	r2, r3
 800c2ea:	4b30      	ldr	r3, [pc, #192]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c2ec:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 800c2ee:	4b2f      	ldr	r3, [pc, #188]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c2f0:	7bdb      	ldrb	r3, [r3, #15]
 800c2f2:	f023 0320 	bic.w	r3, r3, #32
 800c2f6:	b2da      	uxtb	r2, r3
 800c2f8:	4b2c      	ldr	r3, [pc, #176]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c2fa:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_3);
 800c2fc:	4b2b      	ldr	r3, [pc, #172]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c2fe:	7bdb      	ldrb	r3, [r3, #15]
 800c300:	f023 0308 	bic.w	r3, r3, #8
 800c304:	b2da      	uxtb	r2, r3
 800c306:	4b29      	ldr	r3, [pc, #164]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c308:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_2);
 800c30a:	4b28      	ldr	r3, [pc, #160]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c30c:	7bdb      	ldrb	r3, [r3, #15]
 800c30e:	f023 0304 	bic.w	r3, r3, #4
 800c312:	b2da      	uxtb	r2, r3
 800c314:	4b25      	ldr	r3, [pc, #148]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c316:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 800c318:	4b24      	ldr	r3, [pc, #144]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c31a:	781b      	ldrb	r3, [r3, #0]
 800c31c:	f023 0310 	bic.w	r3, r3, #16
 800c320:	b2da      	uxtb	r2, r3
 800c322:	4b22      	ldr	r3, [pc, #136]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c324:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 800c326:	4b21      	ldr	r3, [pc, #132]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c328:	7b9b      	ldrb	r3, [r3, #14]
 800c32a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c32e:	b2da      	uxtb	r2, r3
 800c330:	4b1e      	ldr	r3, [pc, #120]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c332:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 800c334:	4b1d      	ldr	r3, [pc, #116]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c336:	7bdb      	ldrb	r3, [r3, #15]
 800c338:	f023 0302 	bic.w	r3, r3, #2
 800c33c:	b2da      	uxtb	r2, r3
 800c33e:	4b1b      	ldr	r3, [pc, #108]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c340:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 800c342:	4b1a      	ldr	r3, [pc, #104]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c344:	781b      	ldrb	r3, [r3, #0]
 800c346:	f023 0302 	bic.w	r3, r3, #2
 800c34a:	b2da      	uxtb	r2, r3
 800c34c:	4b17      	ldr	r3, [pc, #92]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c34e:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 800c350:	4b16      	ldr	r3, [pc, #88]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c352:	795b      	ldrb	r3, [r3, #5]
 800c354:	f023 0302 	bic.w	r3, r3, #2
 800c358:	b2da      	uxtb	r2, r3
 800c35a:	4b14      	ldr	r3, [pc, #80]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c35c:	715a      	strb	r2, [r3, #5]
        break;
 800c35e:	e01d      	b.n	800c39c <lcd_clear_vol_unit+0x3e0>
        case NOTHING:
            g_lcd_map[REG_15] &= ~(1 << BIT_2);
 800c360:	4b12      	ldr	r3, [pc, #72]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c362:	7bdb      	ldrb	r3, [r3, #15]
 800c364:	f023 0304 	bic.w	r3, r3, #4
 800c368:	b2da      	uxtb	r2, r3
 800c36a:	4b10      	ldr	r3, [pc, #64]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c36c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 800c36e:	4b0f      	ldr	r3, [pc, #60]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	f023 0310 	bic.w	r3, r3, #16
 800c376:	b2da      	uxtb	r2, r3
 800c378:	4b0c      	ldr	r3, [pc, #48]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c37a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_19] &= ~(1 << BIT_6);
 800c37c:	4b0b      	ldr	r3, [pc, #44]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c37e:	7cdb      	ldrb	r3, [r3, #19]
 800c380:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c384:	b2da      	uxtb	r2, r3
 800c386:	4b09      	ldr	r3, [pc, #36]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c388:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 800c38a:	4b08      	ldr	r3, [pc, #32]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c38c:	781b      	ldrb	r3, [r3, #0]
 800c38e:	f023 0301 	bic.w	r3, r3, #1
 800c392:	b2da      	uxtb	r2, r3
 800c394:	4b05      	ldr	r3, [pc, #20]	; (800c3ac <lcd_clear_vol_unit+0x3f0>)
 800c396:	701a      	strb	r2, [r3, #0]
        break;
 800c398:	e000      	b.n	800c39c <lcd_clear_vol_unit+0x3e0>
        default:
        break;
 800c39a:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 800c39c:	79bb      	ldrb	r3, [r7, #6]
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f001 f904 	bl	800d5ac <pcf8553_blink>
}
 800c3a4:	bf00      	nop
 800c3a6:	3708      	adds	r7, #8
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}
 800c3ac:	20001d38 	.word	0x20001d38

0800c3b0 <lcd_init>:
 * borrándola.
 * @param  None
 * @retval None
 */
void lcd_init()
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	af00      	add	r7, sp, #0
    pcf8553_init();
 800c3b4:	f001 f96c 	bl	800d690 <pcf8553_init>
}
 800c3b8:	bf00      	nop
 800c3ba:	bd80      	pop	{r7, pc}

0800c3bc <lcd_put_char>:
 * elegida.
 * @param caracter a escribir tipo char, columna y fila de tipo uint8_t
 * @retval None
 */
void lcd_put_char(char c, uint8_t col, uint8_t row)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b082      	sub	sp, #8
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	71fb      	strb	r3, [r7, #7]
 800c3c6:	460b      	mov	r3, r1
 800c3c8:	71bb      	strb	r3, [r7, #6]
 800c3ca:	4613      	mov	r3, r2
 800c3cc:	717b      	strb	r3, [r7, #5]
    g_row = row + 1;
 800c3ce:	797b      	ldrb	r3, [r7, #5]
 800c3d0:	3301      	adds	r3, #1
 800c3d2:	b2da      	uxtb	r2, r3
 800c3d4:	4beb      	ldr	r3, [pc, #940]	; (800c784 <lcd_put_char+0x3c8>)
 800c3d6:	701a      	strb	r2, [r3, #0]
//    if (g_buf[row][col] == c)
//    {
//        return;
//    }

    g_buf[row][col] = c;
 800c3d8:	797a      	ldrb	r2, [r7, #5]
 800c3da:	79bb      	ldrb	r3, [r7, #6]
 800c3dc:	49ea      	ldr	r1, [pc, #936]	; (800c788 <lcd_put_char+0x3cc>)
 800c3de:	00d2      	lsls	r2, r2, #3
 800c3e0:	440a      	add	r2, r1
 800c3e2:	4413      	add	r3, r2
 800c3e4:	79fa      	ldrb	r2, [r7, #7]
 800c3e6:	701a      	strb	r2, [r3, #0]

    switch (row)
 800c3e8:	797b      	ldrb	r3, [r7, #5]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d002      	beq.n	800c3f4 <lcd_put_char+0x38>
 800c3ee:	2b01      	cmp	r3, #1
 800c3f0:	d008      	beq.n	800c404 <lcd_put_char+0x48>
                return;
            }

        break;
        default:
            return;
 800c3f2:	e1c4      	b.n	800c77e <lcd_put_char+0x3c2>
            if (col < LINE_0_DIGITS - 1)
 800c3f4:	79bb      	ldrb	r3, [r7, #6]
 800c3f6:	2b07      	cmp	r3, #7
 800c3f8:	f200 81bc 	bhi.w	800c774 <lcd_put_char+0x3b8>
                g_col = col;
 800c3fc:	4ae3      	ldr	r2, [pc, #908]	; (800c78c <lcd_put_char+0x3d0>)
 800c3fe:	79bb      	ldrb	r3, [r7, #6]
 800c400:	7013      	strb	r3, [r2, #0]
        break;
 800c402:	e00a      	b.n	800c41a <lcd_put_char+0x5e>
            if (col < LINE_1_DIGITS - 1)
 800c404:	79bb      	ldrb	r3, [r7, #6]
 800c406:	2b06      	cmp	r3, #6
 800c408:	f200 81b6 	bhi.w	800c778 <lcd_put_char+0x3bc>
                g_col = 6 - col; // @suppress("Avoid magic numbers")
 800c40c:	79bb      	ldrb	r3, [r7, #6]
 800c40e:	f1c3 0306 	rsb	r3, r3, #6
 800c412:	b2da      	uxtb	r2, r3
 800c414:	4bdd      	ldr	r3, [pc, #884]	; (800c78c <lcd_put_char+0x3d0>)
 800c416:	701a      	strb	r2, [r3, #0]
        break;
 800c418:	bf00      	nop
        break;
    }

    switch (c)
 800c41a:	79fb      	ldrb	r3, [r7, #7]
 800c41c:	3b20      	subs	r3, #32
 800c41e:	2b19      	cmp	r3, #25
 800c420:	f200 81ac 	bhi.w	800c77c <lcd_put_char+0x3c0>
 800c424:	a201      	add	r2, pc, #4	; (adr r2, 800c42c <lcd_put_char+0x70>)
 800c426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c42a:	bf00      	nop
 800c42c:	0800c495 	.word	0x0800c495
 800c430:	0800c77d 	.word	0x0800c77d
 800c434:	0800c77d 	.word	0x0800c77d
 800c438:	0800c77d 	.word	0x0800c77d
 800c43c:	0800c77d 	.word	0x0800c77d
 800c440:	0800c77d 	.word	0x0800c77d
 800c444:	0800c77d 	.word	0x0800c77d
 800c448:	0800c77d 	.word	0x0800c77d
 800c44c:	0800c77d 	.word	0x0800c77d
 800c450:	0800c77d 	.word	0x0800c77d
 800c454:	0800c77d 	.word	0x0800c77d
 800c458:	0800c77d 	.word	0x0800c77d
 800c45c:	0800c77d 	.word	0x0800c77d
 800c460:	0800c77d 	.word	0x0800c77d
 800c464:	0800c4d7 	.word	0x0800c4d7
 800c468:	0800c77d 	.word	0x0800c77d
 800c46c:	0800c4e1 	.word	0x0800c4e1
 800c470:	0800c523 	.word	0x0800c523
 800c474:	0800c565 	.word	0x0800c565
 800c478:	0800c5a7 	.word	0x0800c5a7
 800c47c:	0800c5e9 	.word	0x0800c5e9
 800c480:	0800c62b 	.word	0x0800c62b
 800c484:	0800c66d 	.word	0x0800c66d
 800c488:	0800c6af 	.word	0x0800c6af
 800c48c:	0800c6f1 	.word	0x0800c6f1
 800c490:	0800c733 	.word	0x0800c733
    {
        case ' ':
            lcd_write_line(SEG_A, 0);
 800c494:	2100      	movs	r1, #0
 800c496:	2000      	movs	r0, #0
 800c498:	f000 ffaa 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 800c49c:	2100      	movs	r1, #0
 800c49e:	2001      	movs	r0, #1
 800c4a0:	f000 ffa6 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_C, 0);
 800c4a4:	2100      	movs	r1, #0
 800c4a6:	2002      	movs	r0, #2
 800c4a8:	f000 ffa2 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 800c4ac:	2100      	movs	r1, #0
 800c4ae:	2003      	movs	r0, #3
 800c4b0:	f000 ff9e 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 800c4b4:	2100      	movs	r1, #0
 800c4b6:	2004      	movs	r0, #4
 800c4b8:	f000 ff9a 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_F, 0);
 800c4bc:	2100      	movs	r1, #0
 800c4be:	2005      	movs	r0, #5
 800c4c0:	f000 ff96 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_G, 0);
 800c4c4:	2100      	movs	r1, #0
 800c4c6:	2006      	movs	r0, #6
 800c4c8:	f000 ff92 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 800c4cc:	2100      	movs	r1, #0
 800c4ce:	2007      	movs	r0, #7
 800c4d0:	f000 ff8e 	bl	800d3f0 <lcd_write_line>
        break;
 800c4d4:	e153      	b.n	800c77e <lcd_put_char+0x3c2>
        case '.':
            lcd_write_line(SEG_H, 1);
 800c4d6:	2101      	movs	r1, #1
 800c4d8:	2007      	movs	r0, #7
 800c4da:	f000 ff89 	bl	800d3f0 <lcd_write_line>
        break;
 800c4de:	e14e      	b.n	800c77e <lcd_put_char+0x3c2>
        case '0':
            lcd_write_line(SEG_A, 1);
 800c4e0:	2101      	movs	r1, #1
 800c4e2:	2000      	movs	r0, #0
 800c4e4:	f000 ff84 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 800c4e8:	2101      	movs	r1, #1
 800c4ea:	2001      	movs	r0, #1
 800c4ec:	f000 ff80 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 800c4f0:	2101      	movs	r1, #1
 800c4f2:	2002      	movs	r0, #2
 800c4f4:	f000 ff7c 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 800c4f8:	2100      	movs	r1, #0
 800c4fa:	2003      	movs	r0, #3
 800c4fc:	f000 ff78 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 800c500:	2101      	movs	r1, #1
 800c502:	2004      	movs	r0, #4
 800c504:	f000 ff74 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 800c508:	2101      	movs	r1, #1
 800c50a:	2005      	movs	r0, #5
 800c50c:	f000 ff70 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 800c510:	2101      	movs	r1, #1
 800c512:	2006      	movs	r0, #6
 800c514:	f000 ff6c 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 800c518:	2100      	movs	r1, #0
 800c51a:	2007      	movs	r0, #7
 800c51c:	f000 ff68 	bl	800d3f0 <lcd_write_line>
        break;
 800c520:	e12d      	b.n	800c77e <lcd_put_char+0x3c2>
        case '1':
            lcd_write_line(SEG_A, 0);
 800c522:	2100      	movs	r1, #0
 800c524:	2000      	movs	r0, #0
 800c526:	f000 ff63 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 800c52a:	2100      	movs	r1, #0
 800c52c:	2001      	movs	r0, #1
 800c52e:	f000 ff5f 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 800c532:	2101      	movs	r1, #1
 800c534:	2002      	movs	r0, #2
 800c536:	f000 ff5b 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 800c53a:	2100      	movs	r1, #0
 800c53c:	2003      	movs	r0, #3
 800c53e:	f000 ff57 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 800c542:	2100      	movs	r1, #0
 800c544:	2004      	movs	r0, #4
 800c546:	f000 ff53 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 800c54a:	2101      	movs	r1, #1
 800c54c:	2005      	movs	r0, #5
 800c54e:	f000 ff4f 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_G, 0);
 800c552:	2100      	movs	r1, #0
 800c554:	2006      	movs	r0, #6
 800c556:	f000 ff4b 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 800c55a:	2100      	movs	r1, #0
 800c55c:	2007      	movs	r0, #7
 800c55e:	f000 ff47 	bl	800d3f0 <lcd_write_line>
        break;
 800c562:	e10c      	b.n	800c77e <lcd_put_char+0x3c2>
        case '2':
            lcd_write_line(SEG_A, 1);
 800c564:	2101      	movs	r1, #1
 800c566:	2000      	movs	r0, #0
 800c568:	f000 ff42 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 800c56c:	2101      	movs	r1, #1
 800c56e:	2001      	movs	r0, #1
 800c570:	f000 ff3e 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_C, 0);
 800c574:	2100      	movs	r1, #0
 800c576:	2002      	movs	r0, #2
 800c578:	f000 ff3a 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 800c57c:	2101      	movs	r1, #1
 800c57e:	2003      	movs	r0, #3
 800c580:	f000 ff36 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 800c584:	2100      	movs	r1, #0
 800c586:	2004      	movs	r0, #4
 800c588:	f000 ff32 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 800c58c:	2101      	movs	r1, #1
 800c58e:	2005      	movs	r0, #5
 800c590:	f000 ff2e 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 800c594:	2101      	movs	r1, #1
 800c596:	2006      	movs	r0, #6
 800c598:	f000 ff2a 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 800c59c:	2100      	movs	r1, #0
 800c59e:	2007      	movs	r0, #7
 800c5a0:	f000 ff26 	bl	800d3f0 <lcd_write_line>
        break;
 800c5a4:	e0eb      	b.n	800c77e <lcd_put_char+0x3c2>
        case '3':
            lcd_write_line(SEG_A, 1);
 800c5a6:	2101      	movs	r1, #1
 800c5a8:	2000      	movs	r0, #0
 800c5aa:	f000 ff21 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 800c5ae:	2100      	movs	r1, #0
 800c5b0:	2001      	movs	r0, #1
 800c5b2:	f000 ff1d 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 800c5b6:	2101      	movs	r1, #1
 800c5b8:	2002      	movs	r0, #2
 800c5ba:	f000 ff19 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 800c5be:	2101      	movs	r1, #1
 800c5c0:	2003      	movs	r0, #3
 800c5c2:	f000 ff15 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 800c5c6:	2100      	movs	r1, #0
 800c5c8:	2004      	movs	r0, #4
 800c5ca:	f000 ff11 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 800c5ce:	2101      	movs	r1, #1
 800c5d0:	2005      	movs	r0, #5
 800c5d2:	f000 ff0d 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 800c5d6:	2101      	movs	r1, #1
 800c5d8:	2006      	movs	r0, #6
 800c5da:	f000 ff09 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 800c5de:	2100      	movs	r1, #0
 800c5e0:	2007      	movs	r0, #7
 800c5e2:	f000 ff05 	bl	800d3f0 <lcd_write_line>
        break;
 800c5e6:	e0ca      	b.n	800c77e <lcd_put_char+0x3c2>
        case '4':
            lcd_write_line(SEG_A, 0);
 800c5e8:	2100      	movs	r1, #0
 800c5ea:	2000      	movs	r0, #0
 800c5ec:	f000 ff00 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 800c5f0:	2100      	movs	r1, #0
 800c5f2:	2001      	movs	r0, #1
 800c5f4:	f000 fefc 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 800c5f8:	2101      	movs	r1, #1
 800c5fa:	2002      	movs	r0, #2
 800c5fc:	f000 fef8 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 800c600:	2101      	movs	r1, #1
 800c602:	2003      	movs	r0, #3
 800c604:	f000 fef4 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 800c608:	2101      	movs	r1, #1
 800c60a:	2004      	movs	r0, #4
 800c60c:	f000 fef0 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 800c610:	2101      	movs	r1, #1
 800c612:	2005      	movs	r0, #5
 800c614:	f000 feec 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_G, 0);
 800c618:	2100      	movs	r1, #0
 800c61a:	2006      	movs	r0, #6
 800c61c:	f000 fee8 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 800c620:	2100      	movs	r1, #0
 800c622:	2007      	movs	r0, #7
 800c624:	f000 fee4 	bl	800d3f0 <lcd_write_line>
        break;
 800c628:	e0a9      	b.n	800c77e <lcd_put_char+0x3c2>
        case '5':
            lcd_write_line(SEG_A, 1);
 800c62a:	2101      	movs	r1, #1
 800c62c:	2000      	movs	r0, #0
 800c62e:	f000 fedf 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 800c632:	2100      	movs	r1, #0
 800c634:	2001      	movs	r0, #1
 800c636:	f000 fedb 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 800c63a:	2101      	movs	r1, #1
 800c63c:	2002      	movs	r0, #2
 800c63e:	f000 fed7 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 800c642:	2101      	movs	r1, #1
 800c644:	2003      	movs	r0, #3
 800c646:	f000 fed3 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 800c64a:	2101      	movs	r1, #1
 800c64c:	2004      	movs	r0, #4
 800c64e:	f000 fecf 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_F, 0);
 800c652:	2100      	movs	r1, #0
 800c654:	2005      	movs	r0, #5
 800c656:	f000 fecb 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 800c65a:	2101      	movs	r1, #1
 800c65c:	2006      	movs	r0, #6
 800c65e:	f000 fec7 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 800c662:	2100      	movs	r1, #0
 800c664:	2007      	movs	r0, #7
 800c666:	f000 fec3 	bl	800d3f0 <lcd_write_line>
        break;
 800c66a:	e088      	b.n	800c77e <lcd_put_char+0x3c2>
        case '6':
            lcd_write_line(SEG_A, 1);
 800c66c:	2101      	movs	r1, #1
 800c66e:	2000      	movs	r0, #0
 800c670:	f000 febe 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 800c674:	2101      	movs	r1, #1
 800c676:	2001      	movs	r0, #1
 800c678:	f000 feba 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 800c67c:	2101      	movs	r1, #1
 800c67e:	2002      	movs	r0, #2
 800c680:	f000 feb6 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 800c684:	2101      	movs	r1, #1
 800c686:	2003      	movs	r0, #3
 800c688:	f000 feb2 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 800c68c:	2101      	movs	r1, #1
 800c68e:	2004      	movs	r0, #4
 800c690:	f000 feae 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_F, 0);
 800c694:	2100      	movs	r1, #0
 800c696:	2005      	movs	r0, #5
 800c698:	f000 feaa 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 800c69c:	2101      	movs	r1, #1
 800c69e:	2006      	movs	r0, #6
 800c6a0:	f000 fea6 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 800c6a4:	2100      	movs	r1, #0
 800c6a6:	2007      	movs	r0, #7
 800c6a8:	f000 fea2 	bl	800d3f0 <lcd_write_line>
        break;
 800c6ac:	e067      	b.n	800c77e <lcd_put_char+0x3c2>
        case '7':
            lcd_write_line(SEG_A, 0);
 800c6ae:	2100      	movs	r1, #0
 800c6b0:	2000      	movs	r0, #0
 800c6b2:	f000 fe9d 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 800c6b6:	2100      	movs	r1, #0
 800c6b8:	2001      	movs	r0, #1
 800c6ba:	f000 fe99 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 800c6be:	2101      	movs	r1, #1
 800c6c0:	2002      	movs	r0, #2
 800c6c2:	f000 fe95 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 800c6c6:	2100      	movs	r1, #0
 800c6c8:	2003      	movs	r0, #3
 800c6ca:	f000 fe91 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 800c6ce:	2100      	movs	r1, #0
 800c6d0:	2004      	movs	r0, #4
 800c6d2:	f000 fe8d 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 800c6d6:	2101      	movs	r1, #1
 800c6d8:	2005      	movs	r0, #5
 800c6da:	f000 fe89 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 800c6de:	2101      	movs	r1, #1
 800c6e0:	2006      	movs	r0, #6
 800c6e2:	f000 fe85 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 800c6e6:	2100      	movs	r1, #0
 800c6e8:	2007      	movs	r0, #7
 800c6ea:	f000 fe81 	bl	800d3f0 <lcd_write_line>
        break;
 800c6ee:	e046      	b.n	800c77e <lcd_put_char+0x3c2>
        case '8':
            lcd_write_line(SEG_A, 1);
 800c6f0:	2101      	movs	r1, #1
 800c6f2:	2000      	movs	r0, #0
 800c6f4:	f000 fe7c 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 800c6f8:	2101      	movs	r1, #1
 800c6fa:	2001      	movs	r0, #1
 800c6fc:	f000 fe78 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 800c700:	2101      	movs	r1, #1
 800c702:	2002      	movs	r0, #2
 800c704:	f000 fe74 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 800c708:	2101      	movs	r1, #1
 800c70a:	2003      	movs	r0, #3
 800c70c:	f000 fe70 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 800c710:	2101      	movs	r1, #1
 800c712:	2004      	movs	r0, #4
 800c714:	f000 fe6c 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 800c718:	2101      	movs	r1, #1
 800c71a:	2005      	movs	r0, #5
 800c71c:	f000 fe68 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 800c720:	2101      	movs	r1, #1
 800c722:	2006      	movs	r0, #6
 800c724:	f000 fe64 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 800c728:	2100      	movs	r1, #0
 800c72a:	2007      	movs	r0, #7
 800c72c:	f000 fe60 	bl	800d3f0 <lcd_write_line>
        break;
 800c730:	e025      	b.n	800c77e <lcd_put_char+0x3c2>
        case '9':
            lcd_write_line(SEG_A, 0);
 800c732:	2100      	movs	r1, #0
 800c734:	2000      	movs	r0, #0
 800c736:	f000 fe5b 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 800c73a:	2100      	movs	r1, #0
 800c73c:	2001      	movs	r0, #1
 800c73e:	f000 fe57 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 800c742:	2101      	movs	r1, #1
 800c744:	2002      	movs	r0, #2
 800c746:	f000 fe53 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 800c74a:	2101      	movs	r1, #1
 800c74c:	2003      	movs	r0, #3
 800c74e:	f000 fe4f 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 800c752:	2101      	movs	r1, #1
 800c754:	2004      	movs	r0, #4
 800c756:	f000 fe4b 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 800c75a:	2101      	movs	r1, #1
 800c75c:	2005      	movs	r0, #5
 800c75e:	f000 fe47 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 800c762:	2101      	movs	r1, #1
 800c764:	2006      	movs	r0, #6
 800c766:	f000 fe43 	bl	800d3f0 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 800c76a:	2100      	movs	r1, #0
 800c76c:	2007      	movs	r0, #7
 800c76e:	f000 fe3f 	bl	800d3f0 <lcd_write_line>
        break;
 800c772:	e004      	b.n	800c77e <lcd_put_char+0x3c2>
                return;
 800c774:	bf00      	nop
 800c776:	e002      	b.n	800c77e <lcd_put_char+0x3c2>
                return;
 800c778:	bf00      	nop
 800c77a:	e000      	b.n	800c77e <lcd_put_char+0x3c2>
        default:
        break;
 800c77c:	bf00      	nop
    }
}
 800c77e:	3708      	adds	r7, #8
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}
 800c784:	20001cd1 	.word	0x20001cd1
 800c788:	20001cc0 	.word	0x20001cc0
 800c78c:	20001cd0 	.word	0x20001cd0

0800c790 <lcd_refresh>:
 * enviar en dicho buffer y luego escribir todo junto.
 * @param Enumeraciones rows_t y point_t de lcd.h
 * @retval None
 */
void lcd_refresh()
{
 800c790:	b580      	push	{r7, lr}
 800c792:	af00      	add	r7, sp, #0
    pcf8553_dump();
 800c794:	f000 ff50 	bl	800d638 <pcf8553_dump>
}
 800c798:	bf00      	nop
 800c79a:	bd80      	pop	{r7, pc}

0800c79c <lcd_set_point>:
 * @brief Función que escribe un punto en específico en la pantalla.
 * @param Enumeraciones rows_t y point_t de lcd.h
 * @retval None
 */
void lcd_set_point(rows_t line, point_t point)
{
 800c79c:	b480      	push	{r7}
 800c79e:	b083      	sub	sp, #12
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	460a      	mov	r2, r1
 800c7a6:	71fb      	strb	r3, [r7, #7]
 800c7a8:	4613      	mov	r3, r2
 800c7aa:	71bb      	strb	r3, [r7, #6]
    if (line == HIGH_ROW)
 800c7ac:	79fb      	ldrb	r3, [r7, #7]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d14c      	bne.n	800c84c <lcd_set_point+0xb0>
    {
        switch (point)
 800c7b2:	79bb      	ldrb	r3, [r7, #6]
 800c7b4:	2b06      	cmp	r3, #6
 800c7b6:	f200 808f 	bhi.w	800c8d8 <lcd_set_point+0x13c>
 800c7ba:	a201      	add	r2, pc, #4	; (adr r2, 800c7c0 <lcd_set_point+0x24>)
 800c7bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7c0:	0800c7dd 	.word	0x0800c7dd
 800c7c4:	0800c7ed 	.word	0x0800c7ed
 800c7c8:	0800c7fd 	.word	0x0800c7fd
 800c7cc:	0800c80d 	.word	0x0800c80d
 800c7d0:	0800c81d 	.word	0x0800c81d
 800c7d4:	0800c82d 	.word	0x0800c82d
 800c7d8:	0800c83d 	.word	0x0800c83d
        {
            case PNT_0:
                g_lcd_map[REG_7] |= (1 << BIT_7);
 800c7dc:	4b44      	ldr	r3, [pc, #272]	; (800c8f0 <lcd_set_point+0x154>)
 800c7de:	79db      	ldrb	r3, [r3, #7]
 800c7e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c7e4:	b2da      	uxtb	r2, r3
 800c7e6:	4b42      	ldr	r3, [pc, #264]	; (800c8f0 <lcd_set_point+0x154>)
 800c7e8:	71da      	strb	r2, [r3, #7]
            break;
 800c7ea:	e07a      	b.n	800c8e2 <lcd_set_point+0x146>
            case PNT_1:
                g_lcd_map[REG_8] |= (1 << BIT_1);
 800c7ec:	4b40      	ldr	r3, [pc, #256]	; (800c8f0 <lcd_set_point+0x154>)
 800c7ee:	7a1b      	ldrb	r3, [r3, #8]
 800c7f0:	f043 0302 	orr.w	r3, r3, #2
 800c7f4:	b2da      	uxtb	r2, r3
 800c7f6:	4b3e      	ldr	r3, [pc, #248]	; (800c8f0 <lcd_set_point+0x154>)
 800c7f8:	721a      	strb	r2, [r3, #8]
            break;
 800c7fa:	e072      	b.n	800c8e2 <lcd_set_point+0x146>
            case PNT_2:
                g_lcd_map[REG_8] |= (1 << BIT_3);
 800c7fc:	4b3c      	ldr	r3, [pc, #240]	; (800c8f0 <lcd_set_point+0x154>)
 800c7fe:	7a1b      	ldrb	r3, [r3, #8]
 800c800:	f043 0308 	orr.w	r3, r3, #8
 800c804:	b2da      	uxtb	r2, r3
 800c806:	4b3a      	ldr	r3, [pc, #232]	; (800c8f0 <lcd_set_point+0x154>)
 800c808:	721a      	strb	r2, [r3, #8]
            break;
 800c80a:	e06a      	b.n	800c8e2 <lcd_set_point+0x146>
            case PNT_3:
                g_lcd_map[REG_8] |= (1 << BIT_5);
 800c80c:	4b38      	ldr	r3, [pc, #224]	; (800c8f0 <lcd_set_point+0x154>)
 800c80e:	7a1b      	ldrb	r3, [r3, #8]
 800c810:	f043 0320 	orr.w	r3, r3, #32
 800c814:	b2da      	uxtb	r2, r3
 800c816:	4b36      	ldr	r3, [pc, #216]	; (800c8f0 <lcd_set_point+0x154>)
 800c818:	721a      	strb	r2, [r3, #8]
            break;
 800c81a:	e062      	b.n	800c8e2 <lcd_set_point+0x146>
            case PNT_4:
                g_lcd_map[REG_8] |= (1 << BIT_7);
 800c81c:	4b34      	ldr	r3, [pc, #208]	; (800c8f0 <lcd_set_point+0x154>)
 800c81e:	7a1b      	ldrb	r3, [r3, #8]
 800c820:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c824:	b2da      	uxtb	r2, r3
 800c826:	4b32      	ldr	r3, [pc, #200]	; (800c8f0 <lcd_set_point+0x154>)
 800c828:	721a      	strb	r2, [r3, #8]
            break;
 800c82a:	e05a      	b.n	800c8e2 <lcd_set_point+0x146>
            case PNT_5:
                g_lcd_map[REG_9] |= (1 << BIT_1);
 800c82c:	4b30      	ldr	r3, [pc, #192]	; (800c8f0 <lcd_set_point+0x154>)
 800c82e:	7a5b      	ldrb	r3, [r3, #9]
 800c830:	f043 0302 	orr.w	r3, r3, #2
 800c834:	b2da      	uxtb	r2, r3
 800c836:	4b2e      	ldr	r3, [pc, #184]	; (800c8f0 <lcd_set_point+0x154>)
 800c838:	725a      	strb	r2, [r3, #9]
            break;
 800c83a:	e052      	b.n	800c8e2 <lcd_set_point+0x146>
            case PNT_6:
                g_lcd_map[REG_9] |= (1 << BIT_3);
 800c83c:	4b2c      	ldr	r3, [pc, #176]	; (800c8f0 <lcd_set_point+0x154>)
 800c83e:	7a5b      	ldrb	r3, [r3, #9]
 800c840:	f043 0308 	orr.w	r3, r3, #8
 800c844:	b2da      	uxtb	r2, r3
 800c846:	4b2a      	ldr	r3, [pc, #168]	; (800c8f0 <lcd_set_point+0x154>)
 800c848:	725a      	strb	r2, [r3, #9]
            break;
 800c84a:	e04a      	b.n	800c8e2 <lcd_set_point+0x146>
            default:
            break;
        }
    }
    else if (line == LOW_ROW)
 800c84c:	79fb      	ldrb	r3, [r7, #7]
 800c84e:	2b01      	cmp	r3, #1
 800c850:	d144      	bne.n	800c8dc <lcd_set_point+0x140>
    {
        switch (point)
 800c852:	79bb      	ldrb	r3, [r7, #6]
 800c854:	2b05      	cmp	r3, #5
 800c856:	d843      	bhi.n	800c8e0 <lcd_set_point+0x144>
 800c858:	a201      	add	r2, pc, #4	; (adr r2, 800c860 <lcd_set_point+0xc4>)
 800c85a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c85e:	bf00      	nop
 800c860:	0800c879 	.word	0x0800c879
 800c864:	0800c889 	.word	0x0800c889
 800c868:	0800c899 	.word	0x0800c899
 800c86c:	0800c8a9 	.word	0x0800c8a9
 800c870:	0800c8b9 	.word	0x0800c8b9
 800c874:	0800c8c9 	.word	0x0800c8c9
        {
            case PNT_0:
                g_lcd_map[REG_7] |= (1 << BIT_2);
 800c878:	4b1d      	ldr	r3, [pc, #116]	; (800c8f0 <lcd_set_point+0x154>)
 800c87a:	79db      	ldrb	r3, [r3, #7]
 800c87c:	f043 0304 	orr.w	r3, r3, #4
 800c880:	b2da      	uxtb	r2, r3
 800c882:	4b1b      	ldr	r3, [pc, #108]	; (800c8f0 <lcd_set_point+0x154>)
 800c884:	71da      	strb	r2, [r3, #7]
            break;
 800c886:	e02c      	b.n	800c8e2 <lcd_set_point+0x146>
            case PNT_1:
                g_lcd_map[REG_7] |= (1 << BIT_0);
 800c888:	4b19      	ldr	r3, [pc, #100]	; (800c8f0 <lcd_set_point+0x154>)
 800c88a:	79db      	ldrb	r3, [r3, #7]
 800c88c:	f043 0301 	orr.w	r3, r3, #1
 800c890:	b2da      	uxtb	r2, r3
 800c892:	4b17      	ldr	r3, [pc, #92]	; (800c8f0 <lcd_set_point+0x154>)
 800c894:	71da      	strb	r2, [r3, #7]
            break;
 800c896:	e024      	b.n	800c8e2 <lcd_set_point+0x146>
            case PNT_2:
                g_lcd_map[REG_6] |= (1 << BIT_6);
 800c898:	4b15      	ldr	r3, [pc, #84]	; (800c8f0 <lcd_set_point+0x154>)
 800c89a:	799b      	ldrb	r3, [r3, #6]
 800c89c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8a0:	b2da      	uxtb	r2, r3
 800c8a2:	4b13      	ldr	r3, [pc, #76]	; (800c8f0 <lcd_set_point+0x154>)
 800c8a4:	719a      	strb	r2, [r3, #6]
            break;
 800c8a6:	e01c      	b.n	800c8e2 <lcd_set_point+0x146>
            case PNT_3:
                g_lcd_map[REG_6] |= (1 << BIT_4);
 800c8a8:	4b11      	ldr	r3, [pc, #68]	; (800c8f0 <lcd_set_point+0x154>)
 800c8aa:	799b      	ldrb	r3, [r3, #6]
 800c8ac:	f043 0310 	orr.w	r3, r3, #16
 800c8b0:	b2da      	uxtb	r2, r3
 800c8b2:	4b0f      	ldr	r3, [pc, #60]	; (800c8f0 <lcd_set_point+0x154>)
 800c8b4:	719a      	strb	r2, [r3, #6]
            break;
 800c8b6:	e014      	b.n	800c8e2 <lcd_set_point+0x146>
            case PNT_4:
                g_lcd_map[REG_6] |= (1 << BIT_2);
 800c8b8:	4b0d      	ldr	r3, [pc, #52]	; (800c8f0 <lcd_set_point+0x154>)
 800c8ba:	799b      	ldrb	r3, [r3, #6]
 800c8bc:	f043 0304 	orr.w	r3, r3, #4
 800c8c0:	b2da      	uxtb	r2, r3
 800c8c2:	4b0b      	ldr	r3, [pc, #44]	; (800c8f0 <lcd_set_point+0x154>)
 800c8c4:	719a      	strb	r2, [r3, #6]
            break;
 800c8c6:	e00c      	b.n	800c8e2 <lcd_set_point+0x146>
            case PNT_5:
                g_lcd_map[REG_6] |= (1 << BIT_0);
 800c8c8:	4b09      	ldr	r3, [pc, #36]	; (800c8f0 <lcd_set_point+0x154>)
 800c8ca:	799b      	ldrb	r3, [r3, #6]
 800c8cc:	f043 0301 	orr.w	r3, r3, #1
 800c8d0:	b2da      	uxtb	r2, r3
 800c8d2:	4b07      	ldr	r3, [pc, #28]	; (800c8f0 <lcd_set_point+0x154>)
 800c8d4:	719a      	strb	r2, [r3, #6]
            break;
 800c8d6:	e004      	b.n	800c8e2 <lcd_set_point+0x146>
            break;
 800c8d8:	bf00      	nop
 800c8da:	e002      	b.n	800c8e2 <lcd_set_point+0x146>
            default:
            break;
        }
    }
 800c8dc:	bf00      	nop
 800c8de:	e000      	b.n	800c8e2 <lcd_set_point+0x146>
            break;
 800c8e0:	bf00      	nop
}
 800c8e2:	bf00      	nop
 800c8e4:	370c      	adds	r7, #12
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ec:	4770      	bx	lr
 800c8ee:	bf00      	nop
 800c8f0:	20001d38 	.word	0x20001d38

0800c8f4 <lcd_set_symbol>:
 * @brief Función que escribe un símbolo en específico en la pantalla.
 * @param Enumeraciones symbols_t y blink_t de lcd.h
 * @retval None
 */
void lcd_set_symbol(symbols_t symbol, blink_t blink_speed)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b082      	sub	sp, #8
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	460a      	mov	r2, r1
 800c8fe:	71fb      	strb	r3, [r7, #7]
 800c900:	4613      	mov	r3, r2
 800c902:	71bb      	strb	r3, [r7, #6]
    switch (symbol)
 800c904:	79fb      	ldrb	r3, [r7, #7]
 800c906:	2b15      	cmp	r3, #21
 800c908:	f200 832b 	bhi.w	800cf62 <lcd_set_symbol+0x66e>
 800c90c:	a201      	add	r2, pc, #4	; (adr r2, 800c914 <lcd_set_symbol+0x20>)
 800c90e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c912:	bf00      	nop
 800c914:	0800c97d 	.word	0x0800c97d
 800c918:	0800c96d 	.word	0x0800c96d
 800c91c:	0800c99d 	.word	0x0800c99d
 800c920:	0800c9ad 	.word	0x0800c9ad
 800c924:	0800c98d 	.word	0x0800c98d
 800c928:	0800c9dd 	.word	0x0800c9dd
 800c92c:	0800c9cd 	.word	0x0800c9cd
 800c930:	0800c9ed 	.word	0x0800c9ed
 800c934:	0800c9bd 	.word	0x0800c9bd
 800c938:	0800c9fd 	.word	0x0800c9fd
 800c93c:	0800ca8b 	.word	0x0800ca8b
 800c940:	0800cbb9 	.word	0x0800cbb9
 800c944:	0800cc01 	.word	0x0800cc01
 800c948:	0800cc8f 	.word	0x0800cc8f
 800c94c:	0800ccf3 	.word	0x0800ccf3
 800c950:	0800cd57 	.word	0x0800cd57
 800c954:	0800cdbb 	.word	0x0800cdbb
 800c958:	0800cdf5 	.word	0x0800cdf5
 800c95c:	0800ce19 	.word	0x0800ce19
 800c960:	0800ce6f 	.word	0x0800ce6f
 800c964:	0800cec5 	.word	0x0800cec5
 800c968:	0800cf0d 	.word	0x0800cf0d
    {
        case POWER:
            g_lcd_map[REG_2] |= (1 << BIT_5);
 800c96c:	4b91      	ldr	r3, [pc, #580]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800c96e:	789b      	ldrb	r3, [r3, #2]
 800c970:	f043 0320 	orr.w	r3, r3, #32
 800c974:	b2da      	uxtb	r2, r3
 800c976:	4b8f      	ldr	r3, [pc, #572]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800c978:	709a      	strb	r2, [r3, #2]
        break;
 800c97a:	e2f3      	b.n	800cf64 <lcd_set_symbol+0x670>
        case BATTERY:
            g_lcd_map[REG_7] |= (1 << BIT_5);
 800c97c:	4b8d      	ldr	r3, [pc, #564]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800c97e:	79db      	ldrb	r3, [r3, #7]
 800c980:	f043 0320 	orr.w	r3, r3, #32
 800c984:	b2da      	uxtb	r2, r3
 800c986:	4b8b      	ldr	r3, [pc, #556]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800c988:	71da      	strb	r2, [r3, #7]
        break;
 800c98a:	e2eb      	b.n	800cf64 <lcd_set_symbol+0x670>
        case BATCH:
            g_lcd_map[REG_12] |= (1 << BIT_5);
 800c98c:	4b89      	ldr	r3, [pc, #548]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800c98e:	7b1b      	ldrb	r3, [r3, #12]
 800c990:	f043 0320 	orr.w	r3, r3, #32
 800c994:	b2da      	uxtb	r2, r3
 800c996:	4b87      	ldr	r3, [pc, #540]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800c998:	731a      	strb	r2, [r3, #12]
        break;
 800c99a:	e2e3      	b.n	800cf64 <lcd_set_symbol+0x670>
        case RATE:
            g_lcd_map[REG_17] |= (1 << BIT_5);
 800c99c:	4b85      	ldr	r3, [pc, #532]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800c99e:	7c5b      	ldrb	r3, [r3, #17]
 800c9a0:	f043 0320 	orr.w	r3, r3, #32
 800c9a4:	b2da      	uxtb	r2, r3
 800c9a6:	4b83      	ldr	r3, [pc, #524]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800c9a8:	745a      	strb	r2, [r3, #17]
        break;
 800c9aa:	e2db      	b.n	800cf64 <lcd_set_symbol+0x670>
        case E:
            g_lcd_map[REG_2] |= (1 << BIT_4);
 800c9ac:	4b81      	ldr	r3, [pc, #516]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800c9ae:	789b      	ldrb	r3, [r3, #2]
 800c9b0:	f043 0310 	orr.w	r3, r3, #16
 800c9b4:	b2da      	uxtb	r2, r3
 800c9b6:	4b7f      	ldr	r3, [pc, #508]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800c9b8:	709a      	strb	r2, [r3, #2]
        break;
 800c9ba:	e2d3      	b.n	800cf64 <lcd_set_symbol+0x670>
        case POINT:
            g_lcd_map[REG_7] |= (1 << BIT_4);
 800c9bc:	4b7d      	ldr	r3, [pc, #500]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800c9be:	79db      	ldrb	r3, [r3, #7]
 800c9c0:	f043 0310 	orr.w	r3, r3, #16
 800c9c4:	b2da      	uxtb	r2, r3
 800c9c6:	4b7b      	ldr	r3, [pc, #492]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800c9c8:	71da      	strb	r2, [r3, #7]
        break;
 800c9ca:	e2cb      	b.n	800cf64 <lcd_set_symbol+0x670>
        case ACM:
            g_lcd_map[REG_12] |= (1 << BIT_4);
 800c9cc:	4b79      	ldr	r3, [pc, #484]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800c9ce:	7b1b      	ldrb	r3, [r3, #12]
 800c9d0:	f043 0310 	orr.w	r3, r3, #16
 800c9d4:	b2da      	uxtb	r2, r3
 800c9d6:	4b77      	ldr	r3, [pc, #476]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800c9d8:	731a      	strb	r2, [r3, #12]
        break;
 800c9da:	e2c3      	b.n	800cf64 <lcd_set_symbol+0x670>
        case TTL:
            g_lcd_map[REG_17] |= (1 << BIT_4);
 800c9dc:	4b75      	ldr	r3, [pc, #468]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800c9de:	7c5b      	ldrb	r3, [r3, #17]
 800c9e0:	f043 0310 	orr.w	r3, r3, #16
 800c9e4:	b2da      	uxtb	r2, r3
 800c9e6:	4b73      	ldr	r3, [pc, #460]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800c9e8:	745a      	strb	r2, [r3, #17]
        break;
 800c9ea:	e2bb      	b.n	800cf64 <lcd_set_symbol+0x670>
        case BACKSLASH:
            g_lcd_map[REG_10] |= (1 << BIT_1);
 800c9ec:	4b71      	ldr	r3, [pc, #452]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800c9ee:	7a9b      	ldrb	r3, [r3, #10]
 800c9f0:	f043 0302 	orr.w	r3, r3, #2
 800c9f4:	b2da      	uxtb	r2, r3
 800c9f6:	4b6f      	ldr	r3, [pc, #444]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800c9f8:	729a      	strb	r2, [r3, #10]
        break;
 800c9fa:	e2b3      	b.n	800cf64 <lcd_set_symbol+0x670>
        case VE:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 800c9fc:	4b6d      	ldr	r3, [pc, #436]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800c9fe:	7bdb      	ldrb	r3, [r3, #15]
 800ca00:	f043 0320 	orr.w	r3, r3, #32
 800ca04:	b2da      	uxtb	r2, r3
 800ca06:	4b6b      	ldr	r3, [pc, #428]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800ca08:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 800ca0a:	4b6a      	ldr	r3, [pc, #424]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800ca0c:	7bdb      	ldrb	r3, [r3, #15]
 800ca0e:	f043 0310 	orr.w	r3, r3, #16
 800ca12:	b2da      	uxtb	r2, r3
 800ca14:	4b67      	ldr	r3, [pc, #412]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800ca16:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 800ca18:	4b66      	ldr	r3, [pc, #408]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800ca1a:	781b      	ldrb	r3, [r3, #0]
 800ca1c:	f043 0320 	orr.w	r3, r3, #32
 800ca20:	b2da      	uxtb	r2, r3
 800ca22:	4b64      	ldr	r3, [pc, #400]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800ca24:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_2);
 800ca26:	4b63      	ldr	r3, [pc, #396]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800ca28:	781b      	ldrb	r3, [r3, #0]
 800ca2a:	f043 0304 	orr.w	r3, r3, #4
 800ca2e:	b2da      	uxtb	r2, r3
 800ca30:	4b60      	ldr	r3, [pc, #384]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800ca32:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 800ca34:	4b5f      	ldr	r3, [pc, #380]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800ca36:	7b9b      	ldrb	r3, [r3, #14]
 800ca38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ca3c:	b2da      	uxtb	r2, r3
 800ca3e:	4b5d      	ldr	r3, [pc, #372]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800ca40:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 800ca42:	4b5c      	ldr	r3, [pc, #368]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800ca44:	7bdb      	ldrb	r3, [r3, #15]
 800ca46:	f043 0302 	orr.w	r3, r3, #2
 800ca4a:	b2da      	uxtb	r2, r3
 800ca4c:	4b59      	ldr	r3, [pc, #356]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800ca4e:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 800ca50:	4b58      	ldr	r3, [pc, #352]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800ca52:	7cdb      	ldrb	r3, [r3, #19]
 800ca54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca58:	b2da      	uxtb	r2, r3
 800ca5a:	4b56      	ldr	r3, [pc, #344]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800ca5c:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 800ca5e:	4b55      	ldr	r3, [pc, #340]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800ca60:	781b      	ldrb	r3, [r3, #0]
 800ca62:	f043 0301 	orr.w	r3, r3, #1
 800ca66:	b2da      	uxtb	r2, r3
 800ca68:	4b52      	ldr	r3, [pc, #328]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800ca6a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 800ca6c:	4b51      	ldr	r3, [pc, #324]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800ca6e:	781b      	ldrb	r3, [r3, #0]
 800ca70:	f043 0302 	orr.w	r3, r3, #2
 800ca74:	b2da      	uxtb	r2, r3
 800ca76:	4b4f      	ldr	r3, [pc, #316]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800ca78:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 800ca7a:	4b4e      	ldr	r3, [pc, #312]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800ca7c:	795b      	ldrb	r3, [r3, #5]
 800ca7e:	f043 0302 	orr.w	r3, r3, #2
 800ca82:	b2da      	uxtb	r2, r3
 800ca84:	4b4b      	ldr	r3, [pc, #300]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800ca86:	715a      	strb	r2, [r3, #5]
        break;
 800ca88:	e26c      	b.n	800cf64 <lcd_set_symbol+0x670>
        case PASS:
            g_lcd_map[REG_13] |= (1 << BIT_1);
 800ca8a:	4b4a      	ldr	r3, [pc, #296]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800ca8c:	7b5b      	ldrb	r3, [r3, #13]
 800ca8e:	f043 0302 	orr.w	r3, r3, #2
 800ca92:	b2da      	uxtb	r2, r3
 800ca94:	4b47      	ldr	r3, [pc, #284]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800ca96:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_0);
 800ca98:	4b46      	ldr	r3, [pc, #280]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800ca9a:	7b5b      	ldrb	r3, [r3, #13]
 800ca9c:	f043 0301 	orr.w	r3, r3, #1
 800caa0:	b2da      	uxtb	r2, r3
 800caa2:	4b44      	ldr	r3, [pc, #272]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800caa4:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_1);
 800caa6:	4b43      	ldr	r3, [pc, #268]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800caa8:	7c9b      	ldrb	r3, [r3, #18]
 800caaa:	f043 0302 	orr.w	r3, r3, #2
 800caae:	b2da      	uxtb	r2, r3
 800cab0:	4b40      	ldr	r3, [pc, #256]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800cab2:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_18] |= (1 << BIT_0);
 800cab4:	4b3f      	ldr	r3, [pc, #252]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800cab6:	7c9b      	ldrb	r3, [r3, #18]
 800cab8:	f043 0301 	orr.w	r3, r3, #1
 800cabc:	b2da      	uxtb	r2, r3
 800cabe:	4b3d      	ldr	r3, [pc, #244]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800cac0:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_0);
 800cac2:	4b3c      	ldr	r3, [pc, #240]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800cac4:	78db      	ldrb	r3, [r3, #3]
 800cac6:	f043 0301 	orr.w	r3, r3, #1
 800caca:	b2da      	uxtb	r2, r3
 800cacc:	4b39      	ldr	r3, [pc, #228]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800cace:	70da      	strb	r2, [r3, #3]

            g_lcd_map[REG_13] |= (1 << BIT_3);
 800cad0:	4b38      	ldr	r3, [pc, #224]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800cad2:	7b5b      	ldrb	r3, [r3, #13]
 800cad4:	f043 0308 	orr.w	r3, r3, #8
 800cad8:	b2da      	uxtb	r2, r3
 800cada:	4b36      	ldr	r3, [pc, #216]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800cadc:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_2);
 800cade:	4b35      	ldr	r3, [pc, #212]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800cae0:	7b5b      	ldrb	r3, [r3, #13]
 800cae2:	f043 0304 	orr.w	r3, r3, #4
 800cae6:	b2da      	uxtb	r2, r3
 800cae8:	4b32      	ldr	r3, [pc, #200]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800caea:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_3);
 800caec:	4b31      	ldr	r3, [pc, #196]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800caee:	7c9b      	ldrb	r3, [r3, #18]
 800caf0:	f043 0308 	orr.w	r3, r3, #8
 800caf4:	b2da      	uxtb	r2, r3
 800caf6:	4b2f      	ldr	r3, [pc, #188]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800caf8:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_18] |= (1 << BIT_2);
 800cafa:	4b2e      	ldr	r3, [pc, #184]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800cafc:	7c9b      	ldrb	r3, [r3, #18]
 800cafe:	f043 0304 	orr.w	r3, r3, #4
 800cb02:	b2da      	uxtb	r2, r3
 800cb04:	4b2b      	ldr	r3, [pc, #172]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800cb06:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_2);
 800cb08:	4b2a      	ldr	r3, [pc, #168]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800cb0a:	78db      	ldrb	r3, [r3, #3]
 800cb0c:	f043 0304 	orr.w	r3, r3, #4
 800cb10:	b2da      	uxtb	r2, r3
 800cb12:	4b28      	ldr	r3, [pc, #160]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800cb14:	70da      	strb	r2, [r3, #3]
            g_lcd_map[REG_3] |= (1 << BIT_3);
 800cb16:	4b27      	ldr	r3, [pc, #156]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800cb18:	78db      	ldrb	r3, [r3, #3]
 800cb1a:	f043 0308 	orr.w	r3, r3, #8
 800cb1e:	b2da      	uxtb	r2, r3
 800cb20:	4b24      	ldr	r3, [pc, #144]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800cb22:	70da      	strb	r2, [r3, #3]

            g_lcd_map[REG_13] |= (1 << BIT_5);
 800cb24:	4b23      	ldr	r3, [pc, #140]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800cb26:	7b5b      	ldrb	r3, [r3, #13]
 800cb28:	f043 0320 	orr.w	r3, r3, #32
 800cb2c:	b2da      	uxtb	r2, r3
 800cb2e:	4b21      	ldr	r3, [pc, #132]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800cb30:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_4);
 800cb32:	4b20      	ldr	r3, [pc, #128]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800cb34:	7b5b      	ldrb	r3, [r3, #13]
 800cb36:	f043 0310 	orr.w	r3, r3, #16
 800cb3a:	b2da      	uxtb	r2, r3
 800cb3c:	4b1d      	ldr	r3, [pc, #116]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800cb3e:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_4);
 800cb40:	4b1c      	ldr	r3, [pc, #112]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800cb42:	7c9b      	ldrb	r3, [r3, #18]
 800cb44:	f043 0310 	orr.w	r3, r3, #16
 800cb48:	b2da      	uxtb	r2, r3
 800cb4a:	4b1a      	ldr	r3, [pc, #104]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800cb4c:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_5);
 800cb4e:	4b19      	ldr	r3, [pc, #100]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800cb50:	78db      	ldrb	r3, [r3, #3]
 800cb52:	f043 0320 	orr.w	r3, r3, #32
 800cb56:	b2da      	uxtb	r2, r3
 800cb58:	4b16      	ldr	r3, [pc, #88]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800cb5a:	70da      	strb	r2, [r3, #3]
            g_lcd_map[REG_8] |= (1 << BIT_4);
 800cb5c:	4b15      	ldr	r3, [pc, #84]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800cb5e:	7a1b      	ldrb	r3, [r3, #8]
 800cb60:	f043 0310 	orr.w	r3, r3, #16
 800cb64:	b2da      	uxtb	r2, r3
 800cb66:	4b13      	ldr	r3, [pc, #76]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800cb68:	721a      	strb	r2, [r3, #8]

            g_lcd_map[REG_13] |= (1 << BIT_7);
 800cb6a:	4b12      	ldr	r3, [pc, #72]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800cb6c:	7b5b      	ldrb	r3, [r3, #13]
 800cb6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cb72:	b2da      	uxtb	r2, r3
 800cb74:	4b0f      	ldr	r3, [pc, #60]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800cb76:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_6);
 800cb78:	4b0e      	ldr	r3, [pc, #56]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800cb7a:	7b5b      	ldrb	r3, [r3, #13]
 800cb7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb80:	b2da      	uxtb	r2, r3
 800cb82:	4b0c      	ldr	r3, [pc, #48]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800cb84:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_6);
 800cb86:	4b0b      	ldr	r3, [pc, #44]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800cb88:	7c9b      	ldrb	r3, [r3, #18]
 800cb8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb8e:	b2da      	uxtb	r2, r3
 800cb90:	4b08      	ldr	r3, [pc, #32]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800cb92:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_7);
 800cb94:	4b07      	ldr	r3, [pc, #28]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800cb96:	78db      	ldrb	r3, [r3, #3]
 800cb98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cb9c:	b2da      	uxtb	r2, r3
 800cb9e:	4b05      	ldr	r3, [pc, #20]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800cba0:	70da      	strb	r2, [r3, #3]
            g_lcd_map[REG_8] |= (1 << BIT_6);
 800cba2:	4b04      	ldr	r3, [pc, #16]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800cba4:	7a1b      	ldrb	r3, [r3, #8]
 800cba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbaa:	b2da      	uxtb	r2, r3
 800cbac:	4b01      	ldr	r3, [pc, #4]	; (800cbb4 <lcd_set_symbol+0x2c0>)
 800cbae:	721a      	strb	r2, [r3, #8]

        break;
 800cbb0:	e1d8      	b.n	800cf64 <lcd_set_symbol+0x670>
 800cbb2:	bf00      	nop
 800cbb4:	20001d38 	.word	0x20001d38
        case K:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 800cbb8:	4b96      	ldr	r3, [pc, #600]	; (800ce14 <lcd_set_symbol+0x520>)
 800cbba:	7bdb      	ldrb	r3, [r3, #15]
 800cbbc:	f043 0320 	orr.w	r3, r3, #32
 800cbc0:	b2da      	uxtb	r2, r3
 800cbc2:	4b94      	ldr	r3, [pc, #592]	; (800ce14 <lcd_set_symbol+0x520>)
 800cbc4:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 800cbc6:	4b93      	ldr	r3, [pc, #588]	; (800ce14 <lcd_set_symbol+0x520>)
 800cbc8:	7bdb      	ldrb	r3, [r3, #15]
 800cbca:	f043 0310 	orr.w	r3, r3, #16
 800cbce:	b2da      	uxtb	r2, r3
 800cbd0:	4b90      	ldr	r3, [pc, #576]	; (800ce14 <lcd_set_symbol+0x520>)
 800cbd2:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 800cbd4:	4b8f      	ldr	r3, [pc, #572]	; (800ce14 <lcd_set_symbol+0x520>)
 800cbd6:	7bdb      	ldrb	r3, [r3, #15]
 800cbd8:	f043 0304 	orr.w	r3, r3, #4
 800cbdc:	b2da      	uxtb	r2, r3
 800cbde:	4b8d      	ldr	r3, [pc, #564]	; (800ce14 <lcd_set_symbol+0x520>)
 800cbe0:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 800cbe2:	4b8c      	ldr	r3, [pc, #560]	; (800ce14 <lcd_set_symbol+0x520>)
 800cbe4:	781b      	ldrb	r3, [r3, #0]
 800cbe6:	f043 0320 	orr.w	r3, r3, #32
 800cbea:	b2da      	uxtb	r2, r3
 800cbec:	4b89      	ldr	r3, [pc, #548]	; (800ce14 <lcd_set_symbol+0x520>)
 800cbee:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_4);
 800cbf0:	4b88      	ldr	r3, [pc, #544]	; (800ce14 <lcd_set_symbol+0x520>)
 800cbf2:	795b      	ldrb	r3, [r3, #5]
 800cbf4:	f043 0310 	orr.w	r3, r3, #16
 800cbf8:	b2da      	uxtb	r2, r3
 800cbfa:	4b86      	ldr	r3, [pc, #536]	; (800ce14 <lcd_set_symbol+0x520>)
 800cbfc:	715a      	strb	r2, [r3, #5]
        break;
 800cbfe:	e1b1      	b.n	800cf64 <lcd_set_symbol+0x670>
        case KO:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 800cc00:	4b84      	ldr	r3, [pc, #528]	; (800ce14 <lcd_set_symbol+0x520>)
 800cc02:	7bdb      	ldrb	r3, [r3, #15]
 800cc04:	f043 0320 	orr.w	r3, r3, #32
 800cc08:	b2da      	uxtb	r2, r3
 800cc0a:	4b82      	ldr	r3, [pc, #520]	; (800ce14 <lcd_set_symbol+0x520>)
 800cc0c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 800cc0e:	4b81      	ldr	r3, [pc, #516]	; (800ce14 <lcd_set_symbol+0x520>)
 800cc10:	7bdb      	ldrb	r3, [r3, #15]
 800cc12:	f043 0310 	orr.w	r3, r3, #16
 800cc16:	b2da      	uxtb	r2, r3
 800cc18:	4b7e      	ldr	r3, [pc, #504]	; (800ce14 <lcd_set_symbol+0x520>)
 800cc1a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 800cc1c:	4b7d      	ldr	r3, [pc, #500]	; (800ce14 <lcd_set_symbol+0x520>)
 800cc1e:	7bdb      	ldrb	r3, [r3, #15]
 800cc20:	f043 0304 	orr.w	r3, r3, #4
 800cc24:	b2da      	uxtb	r2, r3
 800cc26:	4b7b      	ldr	r3, [pc, #492]	; (800ce14 <lcd_set_symbol+0x520>)
 800cc28:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 800cc2a:	4b7a      	ldr	r3, [pc, #488]	; (800ce14 <lcd_set_symbol+0x520>)
 800cc2c:	781b      	ldrb	r3, [r3, #0]
 800cc2e:	f043 0320 	orr.w	r3, r3, #32
 800cc32:	b2da      	uxtb	r2, r3
 800cc34:	4b77      	ldr	r3, [pc, #476]	; (800ce14 <lcd_set_symbol+0x520>)
 800cc36:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_4);
 800cc38:	4b76      	ldr	r3, [pc, #472]	; (800ce14 <lcd_set_symbol+0x520>)
 800cc3a:	795b      	ldrb	r3, [r3, #5]
 800cc3c:	f043 0310 	orr.w	r3, r3, #16
 800cc40:	b2da      	uxtb	r2, r3
 800cc42:	4b74      	ldr	r3, [pc, #464]	; (800ce14 <lcd_set_symbol+0x520>)
 800cc44:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_19] |= (1 << BIT_6);
 800cc46:	4b73      	ldr	r3, [pc, #460]	; (800ce14 <lcd_set_symbol+0x520>)
 800cc48:	7cdb      	ldrb	r3, [r3, #19]
 800cc4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc4e:	b2da      	uxtb	r2, r3
 800cc50:	4b70      	ldr	r3, [pc, #448]	; (800ce14 <lcd_set_symbol+0x520>)
 800cc52:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 800cc54:	4b6f      	ldr	r3, [pc, #444]	; (800ce14 <lcd_set_symbol+0x520>)
 800cc56:	781b      	ldrb	r3, [r3, #0]
 800cc58:	f043 0301 	orr.w	r3, r3, #1
 800cc5c:	b2da      	uxtb	r2, r3
 800cc5e:	4b6d      	ldr	r3, [pc, #436]	; (800ce14 <lcd_set_symbol+0x520>)
 800cc60:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 800cc62:	4b6c      	ldr	r3, [pc, #432]	; (800ce14 <lcd_set_symbol+0x520>)
 800cc64:	781b      	ldrb	r3, [r3, #0]
 800cc66:	f043 0302 	orr.w	r3, r3, #2
 800cc6a:	b2da      	uxtb	r2, r3
 800cc6c:	4b69      	ldr	r3, [pc, #420]	; (800ce14 <lcd_set_symbol+0x520>)
 800cc6e:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_7);
 800cc70:	4b68      	ldr	r3, [pc, #416]	; (800ce14 <lcd_set_symbol+0x520>)
 800cc72:	791b      	ldrb	r3, [r3, #4]
 800cc74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cc78:	b2da      	uxtb	r2, r3
 800cc7a:	4b66      	ldr	r3, [pc, #408]	; (800ce14 <lcd_set_symbol+0x520>)
 800cc7c:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 800cc7e:	4b65      	ldr	r3, [pc, #404]	; (800ce14 <lcd_set_symbol+0x520>)
 800cc80:	795b      	ldrb	r3, [r3, #5]
 800cc82:	f043 0302 	orr.w	r3, r3, #2
 800cc86:	b2da      	uxtb	r2, r3
 800cc88:	4b62      	ldr	r3, [pc, #392]	; (800ce14 <lcd_set_symbol+0x520>)
 800cc8a:	715a      	strb	r2, [r3, #5]
        break;
 800cc8c:	e16a      	b.n	800cf64 <lcd_set_symbol+0x670>
        case PASS1:
            g_lcd_map[REG_12] |= (1 << BIT_0);
 800cc8e:	4b61      	ldr	r3, [pc, #388]	; (800ce14 <lcd_set_symbol+0x520>)
 800cc90:	7b1b      	ldrb	r3, [r3, #12]
 800cc92:	f043 0301 	orr.w	r3, r3, #1
 800cc96:	b2da      	uxtb	r2, r3
 800cc98:	4b5e      	ldr	r3, [pc, #376]	; (800ce14 <lcd_set_symbol+0x520>)
 800cc9a:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_12] |= (1 << BIT_1);
 800cc9c:	4b5d      	ldr	r3, [pc, #372]	; (800ce14 <lcd_set_symbol+0x520>)
 800cc9e:	7b1b      	ldrb	r3, [r3, #12]
 800cca0:	f043 0302 	orr.w	r3, r3, #2
 800cca4:	b2da      	uxtb	r2, r3
 800cca6:	4b5b      	ldr	r3, [pc, #364]	; (800ce14 <lcd_set_symbol+0x520>)
 800cca8:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_0);
 800ccaa:	4b5a      	ldr	r3, [pc, #360]	; (800ce14 <lcd_set_symbol+0x520>)
 800ccac:	7c5b      	ldrb	r3, [r3, #17]
 800ccae:	f043 0301 	orr.w	r3, r3, #1
 800ccb2:	b2da      	uxtb	r2, r3
 800ccb4:	4b57      	ldr	r3, [pc, #348]	; (800ce14 <lcd_set_symbol+0x520>)
 800ccb6:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_17] |= (1 << BIT_1);
 800ccb8:	4b56      	ldr	r3, [pc, #344]	; (800ce14 <lcd_set_symbol+0x520>)
 800ccba:	7c5b      	ldrb	r3, [r3, #17]
 800ccbc:	f043 0302 	orr.w	r3, r3, #2
 800ccc0:	b2da      	uxtb	r2, r3
 800ccc2:	4b54      	ldr	r3, [pc, #336]	; (800ce14 <lcd_set_symbol+0x520>)
 800ccc4:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_1);
 800ccc6:	4b53      	ldr	r3, [pc, #332]	; (800ce14 <lcd_set_symbol+0x520>)
 800ccc8:	789b      	ldrb	r3, [r3, #2]
 800ccca:	f043 0302 	orr.w	r3, r3, #2
 800ccce:	b2da      	uxtb	r2, r3
 800ccd0:	4b50      	ldr	r3, [pc, #320]	; (800ce14 <lcd_set_symbol+0x520>)
 800ccd2:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_2] |= (1 << BIT_0);
 800ccd4:	4b4f      	ldr	r3, [pc, #316]	; (800ce14 <lcd_set_symbol+0x520>)
 800ccd6:	789b      	ldrb	r3, [r3, #2]
 800ccd8:	f043 0301 	orr.w	r3, r3, #1
 800ccdc:	b2da      	uxtb	r2, r3
 800ccde:	4b4d      	ldr	r3, [pc, #308]	; (800ce14 <lcd_set_symbol+0x520>)
 800cce0:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_7] |= (1 << BIT_1);
 800cce2:	4b4c      	ldr	r3, [pc, #304]	; (800ce14 <lcd_set_symbol+0x520>)
 800cce4:	79db      	ldrb	r3, [r3, #7]
 800cce6:	f043 0302 	orr.w	r3, r3, #2
 800ccea:	b2da      	uxtb	r2, r3
 800ccec:	4b49      	ldr	r3, [pc, #292]	; (800ce14 <lcd_set_symbol+0x520>)
 800ccee:	71da      	strb	r2, [r3, #7]
        break;
 800ccf0:	e138      	b.n	800cf64 <lcd_set_symbol+0x670>
        case PASS2:
            g_lcd_map[REG_11] |= (1 << BIT_6);
 800ccf2:	4b48      	ldr	r3, [pc, #288]	; (800ce14 <lcd_set_symbol+0x520>)
 800ccf4:	7adb      	ldrb	r3, [r3, #11]
 800ccf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccfa:	b2da      	uxtb	r2, r3
 800ccfc:	4b45      	ldr	r3, [pc, #276]	; (800ce14 <lcd_set_symbol+0x520>)
 800ccfe:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_11] |= (1 << BIT_7);
 800cd00:	4b44      	ldr	r3, [pc, #272]	; (800ce14 <lcd_set_symbol+0x520>)
 800cd02:	7adb      	ldrb	r3, [r3, #11]
 800cd04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cd08:	b2da      	uxtb	r2, r3
 800cd0a:	4b42      	ldr	r3, [pc, #264]	; (800ce14 <lcd_set_symbol+0x520>)
 800cd0c:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_16] |= (1 << BIT_6);
 800cd0e:	4b41      	ldr	r3, [pc, #260]	; (800ce14 <lcd_set_symbol+0x520>)
 800cd10:	7c1b      	ldrb	r3, [r3, #16]
 800cd12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd16:	b2da      	uxtb	r2, r3
 800cd18:	4b3e      	ldr	r3, [pc, #248]	; (800ce14 <lcd_set_symbol+0x520>)
 800cd1a:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_16] |= (1 << BIT_7);
 800cd1c:	4b3d      	ldr	r3, [pc, #244]	; (800ce14 <lcd_set_symbol+0x520>)
 800cd1e:	7c1b      	ldrb	r3, [r3, #16]
 800cd20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cd24:	b2da      	uxtb	r2, r3
 800cd26:	4b3b      	ldr	r3, [pc, #236]	; (800ce14 <lcd_set_symbol+0x520>)
 800cd28:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_1] |= (1 << BIT_7);
 800cd2a:	4b3a      	ldr	r3, [pc, #232]	; (800ce14 <lcd_set_symbol+0x520>)
 800cd2c:	785b      	ldrb	r3, [r3, #1]
 800cd2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cd32:	b2da      	uxtb	r2, r3
 800cd34:	4b37      	ldr	r3, [pc, #220]	; (800ce14 <lcd_set_symbol+0x520>)
 800cd36:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_1] |= (1 << BIT_6);
 800cd38:	4b36      	ldr	r3, [pc, #216]	; (800ce14 <lcd_set_symbol+0x520>)
 800cd3a:	785b      	ldrb	r3, [r3, #1]
 800cd3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd40:	b2da      	uxtb	r2, r3
 800cd42:	4b34      	ldr	r3, [pc, #208]	; (800ce14 <lcd_set_symbol+0x520>)
 800cd44:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_6] |= (1 << BIT_7);
 800cd46:	4b33      	ldr	r3, [pc, #204]	; (800ce14 <lcd_set_symbol+0x520>)
 800cd48:	799b      	ldrb	r3, [r3, #6]
 800cd4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cd4e:	b2da      	uxtb	r2, r3
 800cd50:	4b30      	ldr	r3, [pc, #192]	; (800ce14 <lcd_set_symbol+0x520>)
 800cd52:	719a      	strb	r2, [r3, #6]
        break;
 800cd54:	e106      	b.n	800cf64 <lcd_set_symbol+0x670>
        case PASS3:
            g_lcd_map[REG_11] |= (1 << BIT_4);
 800cd56:	4b2f      	ldr	r3, [pc, #188]	; (800ce14 <lcd_set_symbol+0x520>)
 800cd58:	7adb      	ldrb	r3, [r3, #11]
 800cd5a:	f043 0310 	orr.w	r3, r3, #16
 800cd5e:	b2da      	uxtb	r2, r3
 800cd60:	4b2c      	ldr	r3, [pc, #176]	; (800ce14 <lcd_set_symbol+0x520>)
 800cd62:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_11] |= (1 << BIT_5);
 800cd64:	4b2b      	ldr	r3, [pc, #172]	; (800ce14 <lcd_set_symbol+0x520>)
 800cd66:	7adb      	ldrb	r3, [r3, #11]
 800cd68:	f043 0320 	orr.w	r3, r3, #32
 800cd6c:	b2da      	uxtb	r2, r3
 800cd6e:	4b29      	ldr	r3, [pc, #164]	; (800ce14 <lcd_set_symbol+0x520>)
 800cd70:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_16] |= (1 << BIT_4);
 800cd72:	4b28      	ldr	r3, [pc, #160]	; (800ce14 <lcd_set_symbol+0x520>)
 800cd74:	7c1b      	ldrb	r3, [r3, #16]
 800cd76:	f043 0310 	orr.w	r3, r3, #16
 800cd7a:	b2da      	uxtb	r2, r3
 800cd7c:	4b25      	ldr	r3, [pc, #148]	; (800ce14 <lcd_set_symbol+0x520>)
 800cd7e:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_16] |= (1 << BIT_5);
 800cd80:	4b24      	ldr	r3, [pc, #144]	; (800ce14 <lcd_set_symbol+0x520>)
 800cd82:	7c1b      	ldrb	r3, [r3, #16]
 800cd84:	f043 0320 	orr.w	r3, r3, #32
 800cd88:	b2da      	uxtb	r2, r3
 800cd8a:	4b22      	ldr	r3, [pc, #136]	; (800ce14 <lcd_set_symbol+0x520>)
 800cd8c:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_1] |= (1 << BIT_5);
 800cd8e:	4b21      	ldr	r3, [pc, #132]	; (800ce14 <lcd_set_symbol+0x520>)
 800cd90:	785b      	ldrb	r3, [r3, #1]
 800cd92:	f043 0320 	orr.w	r3, r3, #32
 800cd96:	b2da      	uxtb	r2, r3
 800cd98:	4b1e      	ldr	r3, [pc, #120]	; (800ce14 <lcd_set_symbol+0x520>)
 800cd9a:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_1] |= (1 << BIT_4);
 800cd9c:	4b1d      	ldr	r3, [pc, #116]	; (800ce14 <lcd_set_symbol+0x520>)
 800cd9e:	785b      	ldrb	r3, [r3, #1]
 800cda0:	f043 0310 	orr.w	r3, r3, #16
 800cda4:	b2da      	uxtb	r2, r3
 800cda6:	4b1b      	ldr	r3, [pc, #108]	; (800ce14 <lcd_set_symbol+0x520>)
 800cda8:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_6] |= (1 << BIT_5);
 800cdaa:	4b1a      	ldr	r3, [pc, #104]	; (800ce14 <lcd_set_symbol+0x520>)
 800cdac:	799b      	ldrb	r3, [r3, #6]
 800cdae:	f043 0320 	orr.w	r3, r3, #32
 800cdb2:	b2da      	uxtb	r2, r3
 800cdb4:	4b17      	ldr	r3, [pc, #92]	; (800ce14 <lcd_set_symbol+0x520>)
 800cdb6:	719a      	strb	r2, [r3, #6]
        break;
 800cdb8:	e0d4      	b.n	800cf64 <lcd_set_symbol+0x670>
        case F:
            g_lcd_map[REG_10] |= (1 << BIT_3);
 800cdba:	4b16      	ldr	r3, [pc, #88]	; (800ce14 <lcd_set_symbol+0x520>)
 800cdbc:	7a9b      	ldrb	r3, [r3, #10]
 800cdbe:	f043 0308 	orr.w	r3, r3, #8
 800cdc2:	b2da      	uxtb	r2, r3
 800cdc4:	4b13      	ldr	r3, [pc, #76]	; (800ce14 <lcd_set_symbol+0x520>)
 800cdc6:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_5);
 800cdc8:	4b12      	ldr	r3, [pc, #72]	; (800ce14 <lcd_set_symbol+0x520>)
 800cdca:	7bdb      	ldrb	r3, [r3, #15]
 800cdcc:	f043 0320 	orr.w	r3, r3, #32
 800cdd0:	b2da      	uxtb	r2, r3
 800cdd2:	4b10      	ldr	r3, [pc, #64]	; (800ce14 <lcd_set_symbol+0x520>)
 800cdd4:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 800cdd6:	4b0f      	ldr	r3, [pc, #60]	; (800ce14 <lcd_set_symbol+0x520>)
 800cdd8:	7bdb      	ldrb	r3, [r3, #15]
 800cdda:	f043 0304 	orr.w	r3, r3, #4
 800cdde:	b2da      	uxtb	r2, r3
 800cde0:	4b0c      	ldr	r3, [pc, #48]	; (800ce14 <lcd_set_symbol+0x520>)
 800cde2:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0]  |= (1 << BIT_5);
 800cde4:	4b0b      	ldr	r3, [pc, #44]	; (800ce14 <lcd_set_symbol+0x520>)
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	f043 0320 	orr.w	r3, r3, #32
 800cdec:	b2da      	uxtb	r2, r3
 800cdee:	4b09      	ldr	r3, [pc, #36]	; (800ce14 <lcd_set_symbol+0x520>)
 800cdf0:	701a      	strb	r2, [r3, #0]
        break;
 800cdf2:	e0b7      	b.n	800cf64 <lcd_set_symbol+0x670>
        case LIN_1:
            g_lcd_map[REG_15] |= (1 << BIT_1);
 800cdf4:	4b07      	ldr	r3, [pc, #28]	; (800ce14 <lcd_set_symbol+0x520>)
 800cdf6:	7bdb      	ldrb	r3, [r3, #15]
 800cdf8:	f043 0302 	orr.w	r3, r3, #2
 800cdfc:	b2da      	uxtb	r2, r3
 800cdfe:	4b05      	ldr	r3, [pc, #20]	; (800ce14 <lcd_set_symbol+0x520>)
 800ce00:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 800ce02:	4b04      	ldr	r3, [pc, #16]	; (800ce14 <lcd_set_symbol+0x520>)
 800ce04:	781b      	ldrb	r3, [r3, #0]
 800ce06:	f043 0302 	orr.w	r3, r3, #2
 800ce0a:	b2da      	uxtb	r2, r3
 800ce0c:	4b01      	ldr	r3, [pc, #4]	; (800ce14 <lcd_set_symbol+0x520>)
 800ce0e:	701a      	strb	r2, [r3, #0]
        break;
 800ce10:	e0a8      	b.n	800cf64 <lcd_set_symbol+0x670>
 800ce12:	bf00      	nop
 800ce14:	20001d38 	.word	0x20001d38
        case LIN_2:
            g_lcd_map[REG_14] |= (1 << BIT_7);
 800ce18:	4b56      	ldr	r3, [pc, #344]	; (800cf74 <lcd_set_symbol+0x680>)
 800ce1a:	7b9b      	ldrb	r3, [r3, #14]
 800ce1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ce20:	b2da      	uxtb	r2, r3
 800ce22:	4b54      	ldr	r3, [pc, #336]	; (800cf74 <lcd_set_symbol+0x680>)
 800ce24:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_19] |= (1 << BIT_7);
 800ce26:	4b53      	ldr	r3, [pc, #332]	; (800cf74 <lcd_set_symbol+0x680>)
 800ce28:	7cdb      	ldrb	r3, [r3, #19]
 800ce2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ce2e:	b2da      	uxtb	r2, r3
 800ce30:	4b50      	ldr	r3, [pc, #320]	; (800cf74 <lcd_set_symbol+0x680>)
 800ce32:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0]  |= (1 << BIT_0);
 800ce34:	4b4f      	ldr	r3, [pc, #316]	; (800cf74 <lcd_set_symbol+0x680>)
 800ce36:	781b      	ldrb	r3, [r3, #0]
 800ce38:	f043 0301 	orr.w	r3, r3, #1
 800ce3c:	b2da      	uxtb	r2, r3
 800ce3e:	4b4d      	ldr	r3, [pc, #308]	; (800cf74 <lcd_set_symbol+0x680>)
 800ce40:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 800ce42:	4b4c      	ldr	r3, [pc, #304]	; (800cf74 <lcd_set_symbol+0x680>)
 800ce44:	7cdb      	ldrb	r3, [r3, #19]
 800ce46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce4a:	b2da      	uxtb	r2, r3
 800ce4c:	4b49      	ldr	r3, [pc, #292]	; (800cf74 <lcd_set_symbol+0x680>)
 800ce4e:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0]  |= (1 << BIT_1);
 800ce50:	4b48      	ldr	r3, [pc, #288]	; (800cf74 <lcd_set_symbol+0x680>)
 800ce52:	781b      	ldrb	r3, [r3, #0]
 800ce54:	f043 0302 	orr.w	r3, r3, #2
 800ce58:	b2da      	uxtb	r2, r3
 800ce5a:	4b46      	ldr	r3, [pc, #280]	; (800cf74 <lcd_set_symbol+0x680>)
 800ce5c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5]  |= (1 << BIT_1);
 800ce5e:	4b45      	ldr	r3, [pc, #276]	; (800cf74 <lcd_set_symbol+0x680>)
 800ce60:	795b      	ldrb	r3, [r3, #5]
 800ce62:	f043 0302 	orr.w	r3, r3, #2
 800ce66:	b2da      	uxtb	r2, r3
 800ce68:	4b42      	ldr	r3, [pc, #264]	; (800cf74 <lcd_set_symbol+0x680>)
 800ce6a:	715a      	strb	r2, [r3, #5]
        break;
 800ce6c:	e07a      	b.n	800cf64 <lcd_set_symbol+0x670>
        case LIN_3:
            g_lcd_map[REG_14] |= (1 << BIT_7);
 800ce6e:	4b41      	ldr	r3, [pc, #260]	; (800cf74 <lcd_set_symbol+0x680>)
 800ce70:	7b9b      	ldrb	r3, [r3, #14]
 800ce72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ce76:	b2da      	uxtb	r2, r3
 800ce78:	4b3e      	ldr	r3, [pc, #248]	; (800cf74 <lcd_set_symbol+0x680>)
 800ce7a:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_19] |= (1 << BIT_7);
 800ce7c:	4b3d      	ldr	r3, [pc, #244]	; (800cf74 <lcd_set_symbol+0x680>)
 800ce7e:	7cdb      	ldrb	r3, [r3, #19]
 800ce80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ce84:	b2da      	uxtb	r2, r3
 800ce86:	4b3b      	ldr	r3, [pc, #236]	; (800cf74 <lcd_set_symbol+0x680>)
 800ce88:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0]  |= (1 << BIT_0);
 800ce8a:	4b3a      	ldr	r3, [pc, #232]	; (800cf74 <lcd_set_symbol+0x680>)
 800ce8c:	781b      	ldrb	r3, [r3, #0]
 800ce8e:	f043 0301 	orr.w	r3, r3, #1
 800ce92:	b2da      	uxtb	r2, r3
 800ce94:	4b37      	ldr	r3, [pc, #220]	; (800cf74 <lcd_set_symbol+0x680>)
 800ce96:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 800ce98:	4b36      	ldr	r3, [pc, #216]	; (800cf74 <lcd_set_symbol+0x680>)
 800ce9a:	7cdb      	ldrb	r3, [r3, #19]
 800ce9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cea0:	b2da      	uxtb	r2, r3
 800cea2:	4b34      	ldr	r3, [pc, #208]	; (800cf74 <lcd_set_symbol+0x680>)
 800cea4:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_4]  |= (1 << BIT_7);
 800cea6:	4b33      	ldr	r3, [pc, #204]	; (800cf74 <lcd_set_symbol+0x680>)
 800cea8:	791b      	ldrb	r3, [r3, #4]
 800ceaa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ceae:	b2da      	uxtb	r2, r3
 800ceb0:	4b30      	ldr	r3, [pc, #192]	; (800cf74 <lcd_set_symbol+0x680>)
 800ceb2:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5]  |= (1 << BIT_1);
 800ceb4:	4b2f      	ldr	r3, [pc, #188]	; (800cf74 <lcd_set_symbol+0x680>)
 800ceb6:	795b      	ldrb	r3, [r3, #5]
 800ceb8:	f043 0302 	orr.w	r3, r3, #2
 800cebc:	b2da      	uxtb	r2, r3
 800cebe:	4b2d      	ldr	r3, [pc, #180]	; (800cf74 <lcd_set_symbol+0x680>)
 800cec0:	715a      	strb	r2, [r3, #5]
        break;
 800cec2:	e04f      	b.n	800cf64 <lcd_set_symbol+0x670>
        case LIN_4:
            g_lcd_map[REG_15] |= (1 << BIT_1);
 800cec4:	4b2b      	ldr	r3, [pc, #172]	; (800cf74 <lcd_set_symbol+0x680>)
 800cec6:	7bdb      	ldrb	r3, [r3, #15]
 800cec8:	f043 0302 	orr.w	r3, r3, #2
 800cecc:	b2da      	uxtb	r2, r3
 800cece:	4b29      	ldr	r3, [pc, #164]	; (800cf74 <lcd_set_symbol+0x680>)
 800ced0:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] |= (1 << BIT_7);
 800ced2:	4b28      	ldr	r3, [pc, #160]	; (800cf74 <lcd_set_symbol+0x680>)
 800ced4:	7cdb      	ldrb	r3, [r3, #19]
 800ced6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ceda:	b2da      	uxtb	r2, r3
 800cedc:	4b25      	ldr	r3, [pc, #148]	; (800cf74 <lcd_set_symbol+0x680>)
 800cede:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0]  |= (1 << BIT_0);
 800cee0:	4b24      	ldr	r3, [pc, #144]	; (800cf74 <lcd_set_symbol+0x680>)
 800cee2:	781b      	ldrb	r3, [r3, #0]
 800cee4:	f043 0301 	orr.w	r3, r3, #1
 800cee8:	b2da      	uxtb	r2, r3
 800ceea:	4b22      	ldr	r3, [pc, #136]	; (800cf74 <lcd_set_symbol+0x680>)
 800ceec:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 800ceee:	4b21      	ldr	r3, [pc, #132]	; (800cf74 <lcd_set_symbol+0x680>)
 800cef0:	7cdb      	ldrb	r3, [r3, #19]
 800cef2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cef6:	b2da      	uxtb	r2, r3
 800cef8:	4b1e      	ldr	r3, [pc, #120]	; (800cf74 <lcd_set_symbol+0x680>)
 800cefa:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_4]  |= (1 << BIT_7);
 800cefc:	4b1d      	ldr	r3, [pc, #116]	; (800cf74 <lcd_set_symbol+0x680>)
 800cefe:	791b      	ldrb	r3, [r3, #4]
 800cf00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cf04:	b2da      	uxtb	r2, r3
 800cf06:	4b1b      	ldr	r3, [pc, #108]	; (800cf74 <lcd_set_symbol+0x680>)
 800cf08:	711a      	strb	r2, [r3, #4]
        break;
 800cf0a:	e02b      	b.n	800cf64 <lcd_set_symbol+0x670>
        case LIN_5:
            g_lcd_map[REG_14] |= (1 << BIT_7);
 800cf0c:	4b19      	ldr	r3, [pc, #100]	; (800cf74 <lcd_set_symbol+0x680>)
 800cf0e:	7b9b      	ldrb	r3, [r3, #14]
 800cf10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cf14:	b2da      	uxtb	r2, r3
 800cf16:	4b17      	ldr	r3, [pc, #92]	; (800cf74 <lcd_set_symbol+0x680>)
 800cf18:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 800cf1a:	4b16      	ldr	r3, [pc, #88]	; (800cf74 <lcd_set_symbol+0x680>)
 800cf1c:	7bdb      	ldrb	r3, [r3, #15]
 800cf1e:	f043 0302 	orr.w	r3, r3, #2
 800cf22:	b2da      	uxtb	r2, r3
 800cf24:	4b13      	ldr	r3, [pc, #76]	; (800cf74 <lcd_set_symbol+0x680>)
 800cf26:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0]  |= (1 << BIT_0);
 800cf28:	4b12      	ldr	r3, [pc, #72]	; (800cf74 <lcd_set_symbol+0x680>)
 800cf2a:	781b      	ldrb	r3, [r3, #0]
 800cf2c:	f043 0301 	orr.w	r3, r3, #1
 800cf30:	b2da      	uxtb	r2, r3
 800cf32:	4b10      	ldr	r3, [pc, #64]	; (800cf74 <lcd_set_symbol+0x680>)
 800cf34:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 800cf36:	4b0f      	ldr	r3, [pc, #60]	; (800cf74 <lcd_set_symbol+0x680>)
 800cf38:	7cdb      	ldrb	r3, [r3, #19]
 800cf3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf3e:	b2da      	uxtb	r2, r3
 800cf40:	4b0c      	ldr	r3, [pc, #48]	; (800cf74 <lcd_set_symbol+0x680>)
 800cf42:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_4]  |= (1 << BIT_7);
 800cf44:	4b0b      	ldr	r3, [pc, #44]	; (800cf74 <lcd_set_symbol+0x680>)
 800cf46:	791b      	ldrb	r3, [r3, #4]
 800cf48:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cf4c:	b2da      	uxtb	r2, r3
 800cf4e:	4b09      	ldr	r3, [pc, #36]	; (800cf74 <lcd_set_symbol+0x680>)
 800cf50:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5]  |= (1 << BIT_1);
 800cf52:	4b08      	ldr	r3, [pc, #32]	; (800cf74 <lcd_set_symbol+0x680>)
 800cf54:	795b      	ldrb	r3, [r3, #5]
 800cf56:	f043 0302 	orr.w	r3, r3, #2
 800cf5a:	b2da      	uxtb	r2, r3
 800cf5c:	4b05      	ldr	r3, [pc, #20]	; (800cf74 <lcd_set_symbol+0x680>)
 800cf5e:	715a      	strb	r2, [r3, #5]
        break;
 800cf60:	e000      	b.n	800cf64 <lcd_set_symbol+0x670>
        default:
        break;
 800cf62:	bf00      	nop
    }

    pcf8553_blink(blink_speed);
 800cf64:	79bb      	ldrb	r3, [r7, #6]
 800cf66:	4618      	mov	r0, r3
 800cf68:	f000 fb20 	bl	800d5ac <pcf8553_blink>
}
 800cf6c:	bf00      	nop
 800cf6e:	3708      	adds	r7, #8
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}
 800cf74:	20001d38 	.word	0x20001d38

0800cf78 <lcd_set_time_unit>:
 * pantalla LCD custom.
 * @param Unidad a imprimir y velocidad de parpadeo.
 * @retval None
 */
void lcd_set_time_unit(fmc_unit_time_t time_unit, blink_t blink_speed)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b082      	sub	sp, #8
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	4603      	mov	r3, r0
 800cf80:	460a      	mov	r2, r1
 800cf82:	71fb      	strb	r3, [r7, #7]
 800cf84:	4613      	mov	r3, r2
 800cf86:	71bb      	strb	r3, [r7, #6]
    switch (time_unit)
 800cf88:	79fb      	ldrb	r3, [r7, #7]
 800cf8a:	2b03      	cmp	r3, #3
 800cf8c:	d82a      	bhi.n	800cfe4 <lcd_set_time_unit+0x6c>
 800cf8e:	a201      	add	r2, pc, #4	; (adr r2, 800cf94 <lcd_set_time_unit+0x1c>)
 800cf90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf94:	0800cfa5 	.word	0x0800cfa5
 800cf98:	0800cfb5 	.word	0x0800cfb5
 800cf9c:	0800cfc5 	.word	0x0800cfc5
 800cfa0:	0800cfd5 	.word	0x0800cfd5
    {
        case H:
            g_lcd_map[REG_5] |= (1 << BIT_6);
 800cfa4:	4b14      	ldr	r3, [pc, #80]	; (800cff8 <lcd_set_time_unit+0x80>)
 800cfa6:	795b      	ldrb	r3, [r3, #5]
 800cfa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfac:	b2da      	uxtb	r2, r3
 800cfae:	4b12      	ldr	r3, [pc, #72]	; (800cff8 <lcd_set_time_unit+0x80>)
 800cfb0:	715a      	strb	r2, [r3, #5]
        break;
 800cfb2:	e018      	b.n	800cfe6 <lcd_set_time_unit+0x6e>
        case D:
            g_lcd_map[REG_9] |= (1 << BIT_5);
 800cfb4:	4b10      	ldr	r3, [pc, #64]	; (800cff8 <lcd_set_time_unit+0x80>)
 800cfb6:	7a5b      	ldrb	r3, [r3, #9]
 800cfb8:	f043 0320 	orr.w	r3, r3, #32
 800cfbc:	b2da      	uxtb	r2, r3
 800cfbe:	4b0e      	ldr	r3, [pc, #56]	; (800cff8 <lcd_set_time_unit+0x80>)
 800cfc0:	725a      	strb	r2, [r3, #9]
        break;
 800cfc2:	e010      	b.n	800cfe6 <lcd_set_time_unit+0x6e>
        case S:
            g_lcd_map[REG_10] |= (1 << BIT_5);
 800cfc4:	4b0c      	ldr	r3, [pc, #48]	; (800cff8 <lcd_set_time_unit+0x80>)
 800cfc6:	7a9b      	ldrb	r3, [r3, #10]
 800cfc8:	f043 0320 	orr.w	r3, r3, #32
 800cfcc:	b2da      	uxtb	r2, r3
 800cfce:	4b0a      	ldr	r3, [pc, #40]	; (800cff8 <lcd_set_time_unit+0x80>)
 800cfd0:	729a      	strb	r2, [r3, #10]
        break;
 800cfd2:	e008      	b.n	800cfe6 <lcd_set_time_unit+0x6e>
        case M:
            g_lcd_map[REG_9] |= (1 << BIT_7);
 800cfd4:	4b08      	ldr	r3, [pc, #32]	; (800cff8 <lcd_set_time_unit+0x80>)
 800cfd6:	7a5b      	ldrb	r3, [r3, #9]
 800cfd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cfdc:	b2da      	uxtb	r2, r3
 800cfde:	4b06      	ldr	r3, [pc, #24]	; (800cff8 <lcd_set_time_unit+0x80>)
 800cfe0:	725a      	strb	r2, [r3, #9]
        break;
 800cfe2:	e000      	b.n	800cfe6 <lcd_set_time_unit+0x6e>
        default:
        break;
 800cfe4:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 800cfe6:	79bb      	ldrb	r3, [r7, #6]
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f000 fadf 	bl	800d5ac <pcf8553_blink>
}
 800cfee:	bf00      	nop
 800cff0:	3708      	adds	r7, #8
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
 800cff6:	bf00      	nop
 800cff8:	20001d38 	.word	0x20001d38

0800cffc <lcd_set_vol_unit>:
 * @brief Función que imprime la unidad de volumen a utilizar.
 * @param Unidad a imprimir y velocidad de parpadeo.
 * @retval None
 */
void lcd_set_vol_unit(fmc_unit_volume_t vol_unit, blink_t blink_speed)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b082      	sub	sp, #8
 800d000:	af00      	add	r7, sp, #0
 800d002:	4603      	mov	r3, r0
 800d004:	460a      	mov	r2, r1
 800d006:	71fb      	strb	r3, [r7, #7]
 800d008:	4613      	mov	r3, r2
 800d00a:	71bb      	strb	r3, [r7, #6]
    switch (vol_unit)
 800d00c:	79fb      	ldrb	r3, [r7, #7]
 800d00e:	2b06      	cmp	r3, #6
 800d010:	f200 81e3 	bhi.w	800d3da <lcd_set_vol_unit+0x3de>
 800d014:	a201      	add	r2, pc, #4	; (adr r2, 800d01c <lcd_set_vol_unit+0x20>)
 800d016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d01a:	bf00      	nop
 800d01c:	0800d039 	.word	0x0800d039
 800d020:	0800d12b 	.word	0x0800d12b
 800d024:	0800d08f 	.word	0x0800d08f
 800d028:	0800d2a1 	.word	0x0800d2a1
 800d02c:	0800d1d5 	.word	0x0800d1d5
 800d030:	0800d321 	.word	0x0800d321
 800d034:	0800d3a1 	.word	0x0800d3a1
    {
        case LT:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 800d038:	4b98      	ldr	r3, [pc, #608]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d03a:	7bdb      	ldrb	r3, [r3, #15]
 800d03c:	f043 0320 	orr.w	r3, r3, #32
 800d040:	b2da      	uxtb	r2, r3
 800d042:	4b96      	ldr	r3, [pc, #600]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d044:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 800d046:	4b95      	ldr	r3, [pc, #596]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d048:	781b      	ldrb	r3, [r3, #0]
 800d04a:	f043 0320 	orr.w	r3, r3, #32
 800d04e:	b2da      	uxtb	r2, r3
 800d050:	4b92      	ldr	r3, [pc, #584]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d052:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_5);
 800d054:	4b91      	ldr	r3, [pc, #580]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d056:	795b      	ldrb	r3, [r3, #5]
 800d058:	f043 0320 	orr.w	r3, r3, #32
 800d05c:	b2da      	uxtb	r2, r3
 800d05e:	4b8f      	ldr	r3, [pc, #572]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d060:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 800d062:	4b8e      	ldr	r3, [pc, #568]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d064:	7b9b      	ldrb	r3, [r3, #14]
 800d066:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d06a:	b2da      	uxtb	r2, r3
 800d06c:	4b8b      	ldr	r3, [pc, #556]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d06e:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_10] |= (1 << BIT_0);
 800d070:	4b8a      	ldr	r3, [pc, #552]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d072:	7a9b      	ldrb	r3, [r3, #10]
 800d074:	f043 0301 	orr.w	r3, r3, #1
 800d078:	b2da      	uxtb	r2, r3
 800d07a:	4b88      	ldr	r3, [pc, #544]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d07c:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_9] |= (1 << BIT_6);
 800d07e:	4b87      	ldr	r3, [pc, #540]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d080:	7a5b      	ldrb	r3, [r3, #9]
 800d082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d086:	b2da      	uxtb	r2, r3
 800d088:	4b84      	ldr	r3, [pc, #528]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d08a:	725a      	strb	r2, [r3, #9]
        break;
 800d08c:	e1a6      	b.n	800d3dc <lcd_set_vol_unit+0x3e0>
        case KG:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 800d08e:	4b83      	ldr	r3, [pc, #524]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d090:	7bdb      	ldrb	r3, [r3, #15]
 800d092:	f043 0320 	orr.w	r3, r3, #32
 800d096:	b2da      	uxtb	r2, r3
 800d098:	4b80      	ldr	r3, [pc, #512]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d09a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 800d09c:	4b7f      	ldr	r3, [pc, #508]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d09e:	7bdb      	ldrb	r3, [r3, #15]
 800d0a0:	f043 0310 	orr.w	r3, r3, #16
 800d0a4:	b2da      	uxtb	r2, r3
 800d0a6:	4b7d      	ldr	r3, [pc, #500]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d0a8:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 800d0aa:	4b7c      	ldr	r3, [pc, #496]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d0ac:	7bdb      	ldrb	r3, [r3, #15]
 800d0ae:	f043 0304 	orr.w	r3, r3, #4
 800d0b2:	b2da      	uxtb	r2, r3
 800d0b4:	4b79      	ldr	r3, [pc, #484]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d0b6:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 800d0b8:	4b78      	ldr	r3, [pc, #480]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d0ba:	781b      	ldrb	r3, [r3, #0]
 800d0bc:	f043 0320 	orr.w	r3, r3, #32
 800d0c0:	b2da      	uxtb	r2, r3
 800d0c2:	4b76      	ldr	r3, [pc, #472]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d0c4:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_4);
 800d0c6:	4b75      	ldr	r3, [pc, #468]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d0c8:	795b      	ldrb	r3, [r3, #5]
 800d0ca:	f043 0310 	orr.w	r3, r3, #16
 800d0ce:	b2da      	uxtb	r2, r3
 800d0d0:	4b72      	ldr	r3, [pc, #456]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d0d2:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 800d0d4:	4b71      	ldr	r3, [pc, #452]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d0d6:	7b9b      	ldrb	r3, [r3, #14]
 800d0d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d0dc:	b2da      	uxtb	r2, r3
 800d0de:	4b6f      	ldr	r3, [pc, #444]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d0e0:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 800d0e2:	4b6e      	ldr	r3, [pc, #440]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d0e4:	7bdb      	ldrb	r3, [r3, #15]
 800d0e6:	f043 0302 	orr.w	r3, r3, #2
 800d0ea:	b2da      	uxtb	r2, r3
 800d0ec:	4b6b      	ldr	r3, [pc, #428]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d0ee:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 800d0f0:	4b6a      	ldr	r3, [pc, #424]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d0f2:	781b      	ldrb	r3, [r3, #0]
 800d0f4:	f043 0301 	orr.w	r3, r3, #1
 800d0f8:	b2da      	uxtb	r2, r3
 800d0fa:	4b68      	ldr	r3, [pc, #416]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d0fc:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 800d0fe:	4b67      	ldr	r3, [pc, #412]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d100:	781b      	ldrb	r3, [r3, #0]
 800d102:	f043 0302 	orr.w	r3, r3, #2
 800d106:	b2da      	uxtb	r2, r3
 800d108:	4b64      	ldr	r3, [pc, #400]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d10a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_7);
 800d10c:	4b63      	ldr	r3, [pc, #396]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d10e:	791b      	ldrb	r3, [r3, #4]
 800d110:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d114:	b2da      	uxtb	r2, r3
 800d116:	4b61      	ldr	r3, [pc, #388]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d118:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 800d11a:	4b60      	ldr	r3, [pc, #384]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d11c:	795b      	ldrb	r3, [r3, #5]
 800d11e:	f043 0302 	orr.w	r3, r3, #2
 800d122:	b2da      	uxtb	r2, r3
 800d124:	4b5d      	ldr	r3, [pc, #372]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d126:	715a      	strb	r2, [r3, #5]
        break;
 800d128:	e158      	b.n	800d3dc <lcd_set_vol_unit+0x3e0>
        case M3:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 800d12a:	4b5c      	ldr	r3, [pc, #368]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d12c:	7bdb      	ldrb	r3, [r3, #15]
 800d12e:	f043 0320 	orr.w	r3, r3, #32
 800d132:	b2da      	uxtb	r2, r3
 800d134:	4b59      	ldr	r3, [pc, #356]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d136:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_10] |= (1 << BIT_2);
 800d138:	4b58      	ldr	r3, [pc, #352]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d13a:	7a9b      	ldrb	r3, [r3, #10]
 800d13c:	f043 0304 	orr.w	r3, r3, #4
 800d140:	b2da      	uxtb	r2, r3
 800d142:	4b56      	ldr	r3, [pc, #344]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d144:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 800d146:	4b55      	ldr	r3, [pc, #340]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d148:	7bdb      	ldrb	r3, [r3, #15]
 800d14a:	f043 0310 	orr.w	r3, r3, #16
 800d14e:	b2da      	uxtb	r2, r3
 800d150:	4b52      	ldr	r3, [pc, #328]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d152:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 800d154:	4b51      	ldr	r3, [pc, #324]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d156:	7bdb      	ldrb	r3, [r3, #15]
 800d158:	f043 0308 	orr.w	r3, r3, #8
 800d15c:	b2da      	uxtb	r2, r3
 800d15e:	4b4f      	ldr	r3, [pc, #316]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d160:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 800d162:	4b4e      	ldr	r3, [pc, #312]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d164:	781b      	ldrb	r3, [r3, #0]
 800d166:	f043 0320 	orr.w	r3, r3, #32
 800d16a:	b2da      	uxtb	r2, r3
 800d16c:	4b4b      	ldr	r3, [pc, #300]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d16e:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 800d170:	4b4a      	ldr	r3, [pc, #296]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d172:	781b      	ldrb	r3, [r3, #0]
 800d174:	f043 0308 	orr.w	r3, r3, #8
 800d178:	b2da      	uxtb	r2, r3
 800d17a:	4b48      	ldr	r3, [pc, #288]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d17c:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 800d17e:	4b47      	ldr	r3, [pc, #284]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d180:	7b9b      	ldrb	r3, [r3, #14]
 800d182:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d186:	b2da      	uxtb	r2, r3
 800d188:	4b44      	ldr	r3, [pc, #272]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d18a:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_19] |= (1 << BIT_7);
 800d18c:	4b43      	ldr	r3, [pc, #268]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d18e:	7cdb      	ldrb	r3, [r3, #19]
 800d190:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d194:	b2da      	uxtb	r2, r3
 800d196:	4b41      	ldr	r3, [pc, #260]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d198:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 800d19a:	4b40      	ldr	r3, [pc, #256]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d19c:	7cdb      	ldrb	r3, [r3, #19]
 800d19e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1a2:	b2da      	uxtb	r2, r3
 800d1a4:	4b3d      	ldr	r3, [pc, #244]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d1a6:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 800d1a8:	4b3c      	ldr	r3, [pc, #240]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d1aa:	781b      	ldrb	r3, [r3, #0]
 800d1ac:	f043 0301 	orr.w	r3, r3, #1
 800d1b0:	b2da      	uxtb	r2, r3
 800d1b2:	4b3a      	ldr	r3, [pc, #232]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d1b4:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_7);
 800d1b6:	4b39      	ldr	r3, [pc, #228]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d1b8:	791b      	ldrb	r3, [r3, #4]
 800d1ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d1be:	b2da      	uxtb	r2, r3
 800d1c0:	4b36      	ldr	r3, [pc, #216]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d1c2:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 800d1c4:	4b35      	ldr	r3, [pc, #212]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d1c6:	795b      	ldrb	r3, [r3, #5]
 800d1c8:	f043 0302 	orr.w	r3, r3, #2
 800d1cc:	b2da      	uxtb	r2, r3
 800d1ce:	4b33      	ldr	r3, [pc, #204]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d1d0:	715a      	strb	r2, [r3, #5]
        break;
 800d1d2:	e103      	b.n	800d3dc <lcd_set_vol_unit+0x3e0>
        case BR:
            g_lcd_map[REG_10] |= (1 << BIT_3);
 800d1d4:	4b31      	ldr	r3, [pc, #196]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d1d6:	7a9b      	ldrb	r3, [r3, #10]
 800d1d8:	f043 0308 	orr.w	r3, r3, #8
 800d1dc:	b2da      	uxtb	r2, r3
 800d1de:	4b2f      	ldr	r3, [pc, #188]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d1e0:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_10] |= (1 << BIT_4);
 800d1e2:	4b2e      	ldr	r3, [pc, #184]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d1e4:	7a9b      	ldrb	r3, [r3, #10]
 800d1e6:	f043 0310 	orr.w	r3, r3, #16
 800d1ea:	b2da      	uxtb	r2, r3
 800d1ec:	4b2b      	ldr	r3, [pc, #172]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d1ee:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 800d1f0:	4b2a      	ldr	r3, [pc, #168]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d1f2:	7bdb      	ldrb	r3, [r3, #15]
 800d1f4:	f043 0308 	orr.w	r3, r3, #8
 800d1f8:	b2da      	uxtb	r2, r3
 800d1fa:	4b28      	ldr	r3, [pc, #160]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d1fc:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 800d1fe:	4b27      	ldr	r3, [pc, #156]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d200:	781b      	ldrb	r3, [r3, #0]
 800d202:	f043 0310 	orr.w	r3, r3, #16
 800d206:	b2da      	uxtb	r2, r3
 800d208:	4b24      	ldr	r3, [pc, #144]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d20a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_2);
 800d20c:	4b23      	ldr	r3, [pc, #140]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d20e:	795b      	ldrb	r3, [r3, #5]
 800d210:	f043 0304 	orr.w	r3, r3, #4
 800d214:	b2da      	uxtb	r2, r3
 800d216:	4b21      	ldr	r3, [pc, #132]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d218:	715a      	strb	r2, [r3, #5]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 800d21a:	4b20      	ldr	r3, [pc, #128]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	f043 0308 	orr.w	r3, r3, #8
 800d222:	b2da      	uxtb	r2, r3
 800d224:	4b1d      	ldr	r3, [pc, #116]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d226:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_5);
 800d228:	4b1c      	ldr	r3, [pc, #112]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d22a:	795b      	ldrb	r3, [r3, #5]
 800d22c:	f043 0320 	orr.w	r3, r3, #32
 800d230:	b2da      	uxtb	r2, r3
 800d232:	4b1a      	ldr	r3, [pc, #104]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d234:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 800d236:	4b19      	ldr	r3, [pc, #100]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d238:	7b9b      	ldrb	r3, [r3, #14]
 800d23a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d23e:	b2da      	uxtb	r2, r3
 800d240:	4b16      	ldr	r3, [pc, #88]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d242:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 800d244:	4b15      	ldr	r3, [pc, #84]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d246:	7bdb      	ldrb	r3, [r3, #15]
 800d248:	f043 0302 	orr.w	r3, r3, #2
 800d24c:	b2da      	uxtb	r2, r3
 800d24e:	4b13      	ldr	r3, [pc, #76]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d250:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] |= (1 << BIT_7);
 800d252:	4b12      	ldr	r3, [pc, #72]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d254:	7cdb      	ldrb	r3, [r3, #19]
 800d256:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d25a:	b2da      	uxtb	r2, r3
 800d25c:	4b0f      	ldr	r3, [pc, #60]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d25e:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 800d260:	4b0e      	ldr	r3, [pc, #56]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d262:	7cdb      	ldrb	r3, [r3, #19]
 800d264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d268:	b2da      	uxtb	r2, r3
 800d26a:	4b0c      	ldr	r3, [pc, #48]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d26c:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 800d26e:	4b0b      	ldr	r3, [pc, #44]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d270:	781b      	ldrb	r3, [r3, #0]
 800d272:	f043 0301 	orr.w	r3, r3, #1
 800d276:	b2da      	uxtb	r2, r3
 800d278:	4b08      	ldr	r3, [pc, #32]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d27a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 800d27c:	4b07      	ldr	r3, [pc, #28]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d27e:	781b      	ldrb	r3, [r3, #0]
 800d280:	f043 0302 	orr.w	r3, r3, #2
 800d284:	b2da      	uxtb	r2, r3
 800d286:	4b05      	ldr	r3, [pc, #20]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d288:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_0);
 800d28a:	4b04      	ldr	r3, [pc, #16]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d28c:	795b      	ldrb	r3, [r3, #5]
 800d28e:	f043 0301 	orr.w	r3, r3, #1
 800d292:	b2da      	uxtb	r2, r3
 800d294:	4b01      	ldr	r3, [pc, #4]	; (800d29c <lcd_set_vol_unit+0x2a0>)
 800d296:	715a      	strb	r2, [r3, #5]
        break;
 800d298:	e0a0      	b.n	800d3dc <lcd_set_vol_unit+0x3e0>
 800d29a:	bf00      	nop
 800d29c:	20001d38 	.word	0x20001d38
        case GL:
            g_lcd_map[REG_10] |= (1 << BIT_3);
 800d2a0:	4b52      	ldr	r3, [pc, #328]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d2a2:	7a9b      	ldrb	r3, [r3, #10]
 800d2a4:	f043 0308 	orr.w	r3, r3, #8
 800d2a8:	b2da      	uxtb	r2, r3
 800d2aa:	4b50      	ldr	r3, [pc, #320]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d2ac:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_5);
 800d2ae:	4b4f      	ldr	r3, [pc, #316]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d2b0:	7bdb      	ldrb	r3, [r3, #15]
 800d2b2:	f043 0320 	orr.w	r3, r3, #32
 800d2b6:	b2da      	uxtb	r2, r3
 800d2b8:	4b4c      	ldr	r3, [pc, #304]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d2ba:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 800d2bc:	4b4b      	ldr	r3, [pc, #300]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d2be:	781b      	ldrb	r3, [r3, #0]
 800d2c0:	f043 0310 	orr.w	r3, r3, #16
 800d2c4:	b2da      	uxtb	r2, r3
 800d2c6:	4b49      	ldr	r3, [pc, #292]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d2c8:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 800d2ca:	4b48      	ldr	r3, [pc, #288]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d2cc:	781b      	ldrb	r3, [r3, #0]
 800d2ce:	f043 0320 	orr.w	r3, r3, #32
 800d2d2:	b2da      	uxtb	r2, r3
 800d2d4:	4b45      	ldr	r3, [pc, #276]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d2d6:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 800d2d8:	4b44      	ldr	r3, [pc, #272]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d2da:	781b      	ldrb	r3, [r3, #0]
 800d2dc:	f043 0308 	orr.w	r3, r3, #8
 800d2e0:	b2da      	uxtb	r2, r3
 800d2e2:	4b42      	ldr	r3, [pc, #264]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d2e4:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_5);
 800d2e6:	4b41      	ldr	r3, [pc, #260]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d2e8:	795b      	ldrb	r3, [r3, #5]
 800d2ea:	f043 0320 	orr.w	r3, r3, #32
 800d2ee:	b2da      	uxtb	r2, r3
 800d2f0:	4b3e      	ldr	r3, [pc, #248]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d2f2:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_15] |= (1 << BIT_1);
 800d2f4:	4b3d      	ldr	r3, [pc, #244]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d2f6:	7bdb      	ldrb	r3, [r3, #15]
 800d2f8:	f043 0302 	orr.w	r3, r3, #2
 800d2fc:	b2da      	uxtb	r2, r3
 800d2fe:	4b3b      	ldr	r3, [pc, #236]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d300:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 800d302:	4b3a      	ldr	r3, [pc, #232]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d304:	781b      	ldrb	r3, [r3, #0]
 800d306:	f043 0302 	orr.w	r3, r3, #2
 800d30a:	b2da      	uxtb	r2, r3
 800d30c:	4b37      	ldr	r3, [pc, #220]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d30e:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 800d310:	4b36      	ldr	r3, [pc, #216]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d312:	795b      	ldrb	r3, [r3, #5]
 800d314:	f043 0302 	orr.w	r3, r3, #2
 800d318:	b2da      	uxtb	r2, r3
 800d31a:	4b34      	ldr	r3, [pc, #208]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d31c:	715a      	strb	r2, [r3, #5]
        break;
 800d31e:	e05d      	b.n	800d3dc <lcd_set_vol_unit+0x3e0>
        case CELSIUS:
            g_lcd_map[REG_10] |= (1 << BIT_3);
 800d320:	4b32      	ldr	r3, [pc, #200]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d322:	7a9b      	ldrb	r3, [r3, #10]
 800d324:	f043 0308 	orr.w	r3, r3, #8
 800d328:	b2da      	uxtb	r2, r3
 800d32a:	4b30      	ldr	r3, [pc, #192]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d32c:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_5);
 800d32e:	4b2f      	ldr	r3, [pc, #188]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d330:	7bdb      	ldrb	r3, [r3, #15]
 800d332:	f043 0320 	orr.w	r3, r3, #32
 800d336:	b2da      	uxtb	r2, r3
 800d338:	4b2c      	ldr	r3, [pc, #176]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d33a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 800d33c:	4b2b      	ldr	r3, [pc, #172]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d33e:	7bdb      	ldrb	r3, [r3, #15]
 800d340:	f043 0308 	orr.w	r3, r3, #8
 800d344:	b2da      	uxtb	r2, r3
 800d346:	4b29      	ldr	r3, [pc, #164]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d348:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 800d34a:	4b28      	ldr	r3, [pc, #160]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d34c:	7bdb      	ldrb	r3, [r3, #15]
 800d34e:	f043 0304 	orr.w	r3, r3, #4
 800d352:	b2da      	uxtb	r2, r3
 800d354:	4b25      	ldr	r3, [pc, #148]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d356:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 800d358:	4b24      	ldr	r3, [pc, #144]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d35a:	781b      	ldrb	r3, [r3, #0]
 800d35c:	f043 0310 	orr.w	r3, r3, #16
 800d360:	b2da      	uxtb	r2, r3
 800d362:	4b22      	ldr	r3, [pc, #136]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d364:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 800d366:	4b21      	ldr	r3, [pc, #132]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d368:	7b9b      	ldrb	r3, [r3, #14]
 800d36a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d36e:	b2da      	uxtb	r2, r3
 800d370:	4b1e      	ldr	r3, [pc, #120]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d372:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 800d374:	4b1d      	ldr	r3, [pc, #116]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d376:	7bdb      	ldrb	r3, [r3, #15]
 800d378:	f043 0302 	orr.w	r3, r3, #2
 800d37c:	b2da      	uxtb	r2, r3
 800d37e:	4b1b      	ldr	r3, [pc, #108]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d380:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 800d382:	4b1a      	ldr	r3, [pc, #104]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d384:	781b      	ldrb	r3, [r3, #0]
 800d386:	f043 0302 	orr.w	r3, r3, #2
 800d38a:	b2da      	uxtb	r2, r3
 800d38c:	4b17      	ldr	r3, [pc, #92]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d38e:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 800d390:	4b16      	ldr	r3, [pc, #88]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d392:	795b      	ldrb	r3, [r3, #5]
 800d394:	f043 0302 	orr.w	r3, r3, #2
 800d398:	b2da      	uxtb	r2, r3
 800d39a:	4b14      	ldr	r3, [pc, #80]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d39c:	715a      	strb	r2, [r3, #5]
        break;
 800d39e:	e01d      	b.n	800d3dc <lcd_set_vol_unit+0x3e0>
        case NOTHING:
            g_lcd_map[REG_15] |= (1 << BIT_2);
 800d3a0:	4b12      	ldr	r3, [pc, #72]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d3a2:	7bdb      	ldrb	r3, [r3, #15]
 800d3a4:	f043 0304 	orr.w	r3, r3, #4
 800d3a8:	b2da      	uxtb	r2, r3
 800d3aa:	4b10      	ldr	r3, [pc, #64]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d3ac:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 800d3ae:	4b0f      	ldr	r3, [pc, #60]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d3b0:	781b      	ldrb	r3, [r3, #0]
 800d3b2:	f043 0310 	orr.w	r3, r3, #16
 800d3b6:	b2da      	uxtb	r2, r3
 800d3b8:	4b0c      	ldr	r3, [pc, #48]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d3ba:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 800d3bc:	4b0b      	ldr	r3, [pc, #44]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d3be:	7cdb      	ldrb	r3, [r3, #19]
 800d3c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3c4:	b2da      	uxtb	r2, r3
 800d3c6:	4b09      	ldr	r3, [pc, #36]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d3c8:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 800d3ca:	4b08      	ldr	r3, [pc, #32]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d3cc:	781b      	ldrb	r3, [r3, #0]
 800d3ce:	f043 0301 	orr.w	r3, r3, #1
 800d3d2:	b2da      	uxtb	r2, r3
 800d3d4:	4b05      	ldr	r3, [pc, #20]	; (800d3ec <lcd_set_vol_unit+0x3f0>)
 800d3d6:	701a      	strb	r2, [r3, #0]
        break;
 800d3d8:	e000      	b.n	800d3dc <lcd_set_vol_unit+0x3e0>
        default:
        break;
 800d3da:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 800d3dc:	79bb      	ldrb	r3, [r7, #6]
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f000 f8e4 	bl	800d5ac <pcf8553_blink>
}
 800d3e4:	bf00      	nop
 800d3e6:	3708      	adds	r7, #8
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}
 800d3ec:	20001d38 	.word	0x20001d38

0800d3f0 <lcd_write_line>:
 * la primera posicion de cada linea.
 * @param
 * @retval None
 */
void lcd_write_line(uint8_t seg, uint8_t data)
{
 800d3f0:	b480      	push	{r7}
 800d3f2:	b085      	sub	sp, #20
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	460a      	mov	r2, r1
 800d3fa:	71fb      	strb	r3, [r7, #7]
 800d3fc:	4613      	mov	r3, r2
 800d3fe:	71bb      	strb	r3, [r7, #6]
    uint8_t reg = 0;
 800d400:	2300      	movs	r3, #0
 800d402:	73fb      	strb	r3, [r7, #15]
    uint8_t pos = 0;
 800d404:	2300      	movs	r3, #0
 800d406:	73bb      	strb	r3, [r7, #14]

    /*
     *
     *
     */
    switch (g_row)
 800d408:	4b33      	ldr	r3, [pc, #204]	; (800d4d8 <lcd_write_line+0xe8>)
 800d40a:	781b      	ldrb	r3, [r3, #0]
 800d40c:	2b01      	cmp	r3, #1
 800d40e:	d002      	beq.n	800d416 <lcd_write_line+0x26>
 800d410:	2b02      	cmp	r3, #2
 800d412:	d01b      	beq.n	800d44c <lcd_write_line+0x5c>
            pos += g_col * 2;
            reg = (pos / 8) + octal_2[seg].reg; // @suppress("Avoid magic numbers")
            pos = pos % 8; // @suppress("Avoid magic numbers")
        break;
        default:
        break;
 800d414:	e035      	b.n	800d482 <lcd_write_line+0x92>
            pos = octal_1[seg].pos;
 800d416:	79fb      	ldrb	r3, [r7, #7]
 800d418:	4a30      	ldr	r2, [pc, #192]	; (800d4dc <lcd_write_line+0xec>)
 800d41a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d41e:	73bb      	strb	r3, [r7, #14]
            pos += g_col * 2;
 800d420:	4b2f      	ldr	r3, [pc, #188]	; (800d4e0 <lcd_write_line+0xf0>)
 800d422:	781b      	ldrb	r3, [r3, #0]
 800d424:	005b      	lsls	r3, r3, #1
 800d426:	b2da      	uxtb	r2, r3
 800d428:	7bbb      	ldrb	r3, [r7, #14]
 800d42a:	4413      	add	r3, r2
 800d42c:	73bb      	strb	r3, [r7, #14]
            reg = (pos / 8) + octal_1[seg].reg; // @suppress("Avoid magic numbers")
 800d42e:	7bbb      	ldrb	r3, [r7, #14]
 800d430:	08db      	lsrs	r3, r3, #3
 800d432:	b2da      	uxtb	r2, r3
 800d434:	79fb      	ldrb	r3, [r7, #7]
 800d436:	4929      	ldr	r1, [pc, #164]	; (800d4dc <lcd_write_line+0xec>)
 800d438:	005b      	lsls	r3, r3, #1
 800d43a:	440b      	add	r3, r1
 800d43c:	785b      	ldrb	r3, [r3, #1]
 800d43e:	4413      	add	r3, r2
 800d440:	73fb      	strb	r3, [r7, #15]
            pos = pos % 8; // @suppress("Avoid magic numbers")
 800d442:	7bbb      	ldrb	r3, [r7, #14]
 800d444:	f003 0307 	and.w	r3, r3, #7
 800d448:	73bb      	strb	r3, [r7, #14]
        break;
 800d44a:	e01a      	b.n	800d482 <lcd_write_line+0x92>
            pos = octal_2[seg].pos;
 800d44c:	79fb      	ldrb	r3, [r7, #7]
 800d44e:	4a25      	ldr	r2, [pc, #148]	; (800d4e4 <lcd_write_line+0xf4>)
 800d450:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d454:	73bb      	strb	r3, [r7, #14]
            pos += g_col * 2;
 800d456:	4b22      	ldr	r3, [pc, #136]	; (800d4e0 <lcd_write_line+0xf0>)
 800d458:	781b      	ldrb	r3, [r3, #0]
 800d45a:	005b      	lsls	r3, r3, #1
 800d45c:	b2da      	uxtb	r2, r3
 800d45e:	7bbb      	ldrb	r3, [r7, #14]
 800d460:	4413      	add	r3, r2
 800d462:	73bb      	strb	r3, [r7, #14]
            reg = (pos / 8) + octal_2[seg].reg; // @suppress("Avoid magic numbers")
 800d464:	7bbb      	ldrb	r3, [r7, #14]
 800d466:	08db      	lsrs	r3, r3, #3
 800d468:	b2da      	uxtb	r2, r3
 800d46a:	79fb      	ldrb	r3, [r7, #7]
 800d46c:	491d      	ldr	r1, [pc, #116]	; (800d4e4 <lcd_write_line+0xf4>)
 800d46e:	005b      	lsls	r3, r3, #1
 800d470:	440b      	add	r3, r1
 800d472:	785b      	ldrb	r3, [r3, #1]
 800d474:	4413      	add	r3, r2
 800d476:	73fb      	strb	r3, [r7, #15]
            pos = pos % 8; // @suppress("Avoid magic numbers")
 800d478:	7bbb      	ldrb	r3, [r7, #14]
 800d47a:	f003 0307 	and.w	r3, r3, #7
 800d47e:	73bb      	strb	r3, [r7, #14]
        break;
 800d480:	bf00      	nop
    }

    if (data)
 800d482:	79bb      	ldrb	r3, [r7, #6]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d00f      	beq.n	800d4a8 <lcd_write_line+0xb8>
    {
        g_lcd_map[reg] |= 1 << pos;
 800d488:	7bfb      	ldrb	r3, [r7, #15]
 800d48a:	4a17      	ldr	r2, [pc, #92]	; (800d4e8 <lcd_write_line+0xf8>)
 800d48c:	5cd3      	ldrb	r3, [r2, r3]
 800d48e:	b25a      	sxtb	r2, r3
 800d490:	7bbb      	ldrb	r3, [r7, #14]
 800d492:	2101      	movs	r1, #1
 800d494:	fa01 f303 	lsl.w	r3, r1, r3
 800d498:	b25b      	sxtb	r3, r3
 800d49a:	4313      	orrs	r3, r2
 800d49c:	b25a      	sxtb	r2, r3
 800d49e:	7bfb      	ldrb	r3, [r7, #15]
 800d4a0:	b2d1      	uxtb	r1, r2
 800d4a2:	4a11      	ldr	r2, [pc, #68]	; (800d4e8 <lcd_write_line+0xf8>)
 800d4a4:	54d1      	strb	r1, [r2, r3]
    }
    else
    {
        g_lcd_map[reg] &= ~(1 << pos);
    }
}
 800d4a6:	e010      	b.n	800d4ca <lcd_write_line+0xda>
        g_lcd_map[reg] &= ~(1 << pos);
 800d4a8:	7bfb      	ldrb	r3, [r7, #15]
 800d4aa:	4a0f      	ldr	r2, [pc, #60]	; (800d4e8 <lcd_write_line+0xf8>)
 800d4ac:	5cd3      	ldrb	r3, [r2, r3]
 800d4ae:	b25a      	sxtb	r2, r3
 800d4b0:	7bbb      	ldrb	r3, [r7, #14]
 800d4b2:	2101      	movs	r1, #1
 800d4b4:	fa01 f303 	lsl.w	r3, r1, r3
 800d4b8:	b25b      	sxtb	r3, r3
 800d4ba:	43db      	mvns	r3, r3
 800d4bc:	b25b      	sxtb	r3, r3
 800d4be:	4013      	ands	r3, r2
 800d4c0:	b25a      	sxtb	r2, r3
 800d4c2:	7bfb      	ldrb	r3, [r7, #15]
 800d4c4:	b2d1      	uxtb	r1, r2
 800d4c6:	4a08      	ldr	r2, [pc, #32]	; (800d4e8 <lcd_write_line+0xf8>)
 800d4c8:	54d1      	strb	r1, [r2, r3]
}
 800d4ca:	bf00      	nop
 800d4cc:	3714      	adds	r7, #20
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d4:	4770      	bx	lr
 800d4d6:	bf00      	nop
 800d4d8:	20001cd1 	.word	0x20001cd1
 800d4dc:	20000120 	.word	0x20000120
 800d4e0:	20001cd0 	.word	0x20001cd0
 800d4e4:	20000130 	.word	0x20000130
 800d4e8:	20001d38 	.word	0x20001d38

0800d4ec <prepare_to_send>:
 * COM_0_ADDRESS
 * COM_1_ADDRESS
 *
 */
void static prepare_to_send(uint8_t add)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b084      	sub	sp, #16
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	71fb      	strb	r3, [r7, #7]
    register_address_t reg;
    reg.bits.address = add;
 800d4f6:	79fb      	ldrb	r3, [r7, #7]
 800d4f8:	f003 031f 	and.w	r3, r3, #31
 800d4fc:	b2da      	uxtb	r2, r3
 800d4fe:	7b3b      	ldrb	r3, [r7, #12]
 800d500:	f362 0304 	bfi	r3, r2, #0, #5
 800d504:	733b      	strb	r3, [r7, #12]
    reg.bits.not_used = 0;
 800d506:	7b3b      	ldrb	r3, [r7, #12]
 800d508:	f36f 1346 	bfc	r3, #5, #2
 800d50c:	733b      	strb	r3, [r7, #12]
    reg.bits.read_write = WRITE_DATA;
 800d50e:	7b3b      	ldrb	r3, [r7, #12]
 800d510:	f36f 13c7 	bfc	r3, #7, #1
 800d514:	733b      	strb	r3, [r7, #12]
    HAL_SPI_Transmit(&h_spi1, &(reg.data), 1, DEFAULT_DELAY);
 800d516:	2314      	movs	r3, #20
 800d518:	f107 010c 	add.w	r1, r7, #12
 800d51c:	2201      	movs	r2, #1
 800d51e:	4803      	ldr	r0, [pc, #12]	; (800d52c <prepare_to_send+0x40>)
 800d520:	f7f7 fe57 	bl	80051d2 <HAL_SPI_Transmit>
}
 800d524:	bf00      	nop
 800d526:	3710      	adds	r7, #16
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}
 800d52c:	20001cd4 	.word	0x20001cd4

0800d530 <spi1_init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void spi1_init(void)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	af00      	add	r7, sp, #0
    h_spi1.Instance = SPI1;
 800d534:	4b1b      	ldr	r3, [pc, #108]	; (800d5a4 <spi1_init+0x74>)
 800d536:	4a1c      	ldr	r2, [pc, #112]	; (800d5a8 <spi1_init+0x78>)
 800d538:	601a      	str	r2, [r3, #0]
    h_spi1.Init.Mode = SPI_MODE_MASTER;
 800d53a:	4b1a      	ldr	r3, [pc, #104]	; (800d5a4 <spi1_init+0x74>)
 800d53c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800d540:	605a      	str	r2, [r3, #4]
    h_spi1.Init.Direction = SPI_DIRECTION_1LINE;
 800d542:	4b18      	ldr	r3, [pc, #96]	; (800d5a4 <spi1_init+0x74>)
 800d544:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d548:	609a      	str	r2, [r3, #8]
    h_spi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800d54a:	4b16      	ldr	r3, [pc, #88]	; (800d5a4 <spi1_init+0x74>)
 800d54c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800d550:	60da      	str	r2, [r3, #12]
    h_spi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d552:	4b14      	ldr	r3, [pc, #80]	; (800d5a4 <spi1_init+0x74>)
 800d554:	2200      	movs	r2, #0
 800d556:	611a      	str	r2, [r3, #16]
    h_spi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d558:	4b12      	ldr	r3, [pc, #72]	; (800d5a4 <spi1_init+0x74>)
 800d55a:	2200      	movs	r2, #0
 800d55c:	615a      	str	r2, [r3, #20]
    h_spi1.Init.NSS = SPI_NSS_SOFT;
 800d55e:	4b11      	ldr	r3, [pc, #68]	; (800d5a4 <spi1_init+0x74>)
 800d560:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d564:	619a      	str	r2, [r3, #24]
    h_spi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800d566:	4b0f      	ldr	r3, [pc, #60]	; (800d5a4 <spi1_init+0x74>)
 800d568:	2218      	movs	r2, #24
 800d56a:	61da      	str	r2, [r3, #28]
    h_spi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d56c:	4b0d      	ldr	r3, [pc, #52]	; (800d5a4 <spi1_init+0x74>)
 800d56e:	2200      	movs	r2, #0
 800d570:	621a      	str	r2, [r3, #32]
    h_spi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800d572:	4b0c      	ldr	r3, [pc, #48]	; (800d5a4 <spi1_init+0x74>)
 800d574:	2200      	movs	r2, #0
 800d576:	625a      	str	r2, [r3, #36]	; 0x24
    h_spi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d578:	4b0a      	ldr	r3, [pc, #40]	; (800d5a4 <spi1_init+0x74>)
 800d57a:	2200      	movs	r2, #0
 800d57c:	629a      	str	r2, [r3, #40]	; 0x28
    h_spi1.Init.CRCPolynomial = 7; // @suppress("Avoid magic numbers")
 800d57e:	4b09      	ldr	r3, [pc, #36]	; (800d5a4 <spi1_init+0x74>)
 800d580:	2207      	movs	r2, #7
 800d582:	62da      	str	r2, [r3, #44]	; 0x2c
    h_spi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800d584:	4b07      	ldr	r3, [pc, #28]	; (800d5a4 <spi1_init+0x74>)
 800d586:	2200      	movs	r2, #0
 800d588:	631a      	str	r2, [r3, #48]	; 0x30
    h_spi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800d58a:	4b06      	ldr	r3, [pc, #24]	; (800d5a4 <spi1_init+0x74>)
 800d58c:	2200      	movs	r2, #0
 800d58e:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_SPI_Init(&h_spi1) != HAL_OK)
 800d590:	4804      	ldr	r0, [pc, #16]	; (800d5a4 <spi1_init+0x74>)
 800d592:	f7f7 fd7b 	bl	800508c <HAL_SPI_Init>
 800d596:	4603      	mov	r3, r0
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d001      	beq.n	800d5a0 <spi1_init+0x70>
    {
        Error_Handler();
 800d59c:	f7f3 fd16 	bl	8000fcc <Error_Handler>
    }
}
 800d5a0:	bf00      	nop
 800d5a2:	bd80      	pop	{r7, pc}
 800d5a4:	20001cd4 	.word	0x20001cd4
 800d5a8:	40013000 	.word	0x40013000

0800d5ac <pcf8553_blink>:
 * PCF_BLINK_ONE_SECOND,
 * PCF_BLINK_HALF_SECOND
 * @retval None
 */
void pcf8553_blink(blink_t mode)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b082      	sub	sp, #8
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_RESET);
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	2110      	movs	r1, #16
 800d5ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d5be:	f7f5 fd75 	bl	80030ac <HAL_GPIO_WritePin>
    g_display_ctrl_2.reg_bits.blink = mode;
 800d5c2:	79fb      	ldrb	r3, [r7, #7]
 800d5c4:	f003 0303 	and.w	r3, r3, #3
 800d5c8:	b2d9      	uxtb	r1, r3
 800d5ca:	4a0c      	ldr	r2, [pc, #48]	; (800d5fc <pcf8553_blink+0x50>)
 800d5cc:	7813      	ldrb	r3, [r2, #0]
 800d5ce:	f361 0342 	bfi	r3, r1, #1, #2
 800d5d2:	7013      	strb	r3, [r2, #0]
    prepare_to_send(DISPLAY_CTRL_2_ADDRESS);
 800d5d4:	2003      	movs	r0, #3
 800d5d6:	f7ff ff89 	bl	800d4ec <prepare_to_send>
    HAL_SPI_Transmit(&h_spi1, &(g_display_ctrl_2.reg_data), 1, DEFAULT_DELAY);
 800d5da:	2314      	movs	r3, #20
 800d5dc:	2201      	movs	r2, #1
 800d5de:	4907      	ldr	r1, [pc, #28]	; (800d5fc <pcf8553_blink+0x50>)
 800d5e0:	4807      	ldr	r0, [pc, #28]	; (800d600 <pcf8553_blink+0x54>)
 800d5e2:	f7f7 fdf6 	bl	80051d2 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_SET);
 800d5e6:	2201      	movs	r2, #1
 800d5e8:	2110      	movs	r1, #16
 800d5ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d5ee:	f7f5 fd5d 	bl	80030ac <HAL_GPIO_WritePin>
}
 800d5f2:	bf00      	nop
 800d5f4:	3708      	adds	r7, #8
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}
 800d5fa:	bf00      	nop
 800d5fc:	20001d50 	.word	0x20001d50
 800d600:	20001cd4 	.word	0x20001cd4

0800d604 <pcf8553_clear_buff>:

void pcf8553_clear_buff()
{
 800d604:	b480      	push	{r7}
 800d606:	b083      	sub	sp, #12
 800d608:	af00      	add	r7, sp, #0
    /*
     * Limpia el buffer final, que es mandado directamente al controlador de la
     * pantalla LCD.
     */
    for (int cont_buff_t = 0; cont_buff_t < PCF8553_DATA_SIZE; cont_buff_t++)
 800d60a:	2300      	movs	r3, #0
 800d60c:	607b      	str	r3, [r7, #4]
 800d60e:	e007      	b.n	800d620 <pcf8553_clear_buff+0x1c>
    {
        g_lcd_map[cont_buff_t] = 0;
 800d610:	4a08      	ldr	r2, [pc, #32]	; (800d634 <pcf8553_clear_buff+0x30>)
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	4413      	add	r3, r2
 800d616:	2200      	movs	r2, #0
 800d618:	701a      	strb	r2, [r3, #0]
    for (int cont_buff_t = 0; cont_buff_t < PCF8553_DATA_SIZE; cont_buff_t++)
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	3301      	adds	r3, #1
 800d61e:	607b      	str	r3, [r7, #4]
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2b13      	cmp	r3, #19
 800d624:	ddf4      	ble.n	800d610 <pcf8553_clear_buff+0xc>
    }
}
 800d626:	bf00      	nop
 800d628:	bf00      	nop
 800d62a:	370c      	adds	r7, #12
 800d62c:	46bd      	mov	sp, r7
 800d62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d632:	4770      	bx	lr
 800d634:	20001d38 	.word	0x20001d38

0800d638 <pcf8553_dump>:
 *
 * @param None
 * @retval None
 */
void pcf8553_dump()
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b082      	sub	sp, #8
 800d63c:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_RESET);
 800d63e:	2200      	movs	r2, #0
 800d640:	2110      	movs	r1, #16
 800d642:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d646:	f7f5 fd31 	bl	80030ac <HAL_GPIO_WritePin>
    prepare_to_send(DATA_ADDRESS);
 800d64a:	2004      	movs	r0, #4
 800d64c:	f7ff ff4e 	bl	800d4ec <prepare_to_send>
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 800d650:	2300      	movs	r3, #0
 800d652:	607b      	str	r3, [r7, #4]
 800d654:	e00a      	b.n	800d66c <pcf8553_dump+0x34>
    {
        HAL_SPI_Transmit(&h_spi1, g_lcd_map + i, 1, DEFAULT_DELAY);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	4a0b      	ldr	r2, [pc, #44]	; (800d688 <pcf8553_dump+0x50>)
 800d65a:	1899      	adds	r1, r3, r2
 800d65c:	2314      	movs	r3, #20
 800d65e:	2201      	movs	r2, #1
 800d660:	480a      	ldr	r0, [pc, #40]	; (800d68c <pcf8553_dump+0x54>)
 800d662:	f7f7 fdb6 	bl	80051d2 <HAL_SPI_Transmit>
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	3301      	adds	r3, #1
 800d66a:	607b      	str	r3, [r7, #4]
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2b13      	cmp	r3, #19
 800d670:	ddf1      	ble.n	800d656 <pcf8553_dump+0x1e>
    }
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_SET);
 800d672:	2201      	movs	r2, #1
 800d674:	2110      	movs	r1, #16
 800d676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d67a:	f7f5 fd17 	bl	80030ac <HAL_GPIO_WritePin>
}
 800d67e:	bf00      	nop
 800d680:	3708      	adds	r7, #8
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}
 800d686:	bf00      	nop
 800d688:	20001d38 	.word	0x20001d38
 800d68c:	20001cd4 	.word	0x20001cd4

0800d690 <pcf8553_init>:
 * @brief Llamar a esta función antes de empezar a trabajar con el driver.
 * @param None
 * @retval None
 */
void pcf8553_init()
{
 800d690:	b580      	push	{r7, lr}
 800d692:	af00      	add	r7, sp, #0
    spi1_init();
 800d694:	f7ff ff4c 	bl	800d530 <spi1_init>
    pcf8553_reset();
 800d698:	f000 f830 	bl	800d6fc <pcf8553_reset>
    HAL_Delay(DEFAULT_DELAY);
 800d69c:	2314      	movs	r3, #20
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f7f3 ff82 	bl	80015a8 <HAL_Delay>
     * @brief El pcf8553 tiene un pin de chip select, la siguiente instruccion
     * habilita el chip, el parametro GPIO_PIN_RESET es muy parecido a un
     * numero magico, se debe buscar una mejor solucion.
     *
     */
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_RESET);
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	2110      	movs	r1, #16
 800d6a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d6ac:	f7f5 fcfe 	bl	80030ac <HAL_GPIO_WritePin>
     *  Display_crtl_2 = 1 to enable display.
     *  Luego de un tiempo olvidé porque hice este comentario, no parece
     *  tener sentido.
     *
     */
    prepare_to_send(0x1);
 800d6b0:	2001      	movs	r0, #1
 800d6b2:	f7ff ff1b 	bl	800d4ec <prepare_to_send>
    HAL_SPI_Transmit(&h_spi1, &(g_device_ctrl.reg_data), 1, DEFAULT_DELAY);
 800d6b6:	2314      	movs	r3, #20
 800d6b8:	2201      	movs	r2, #1
 800d6ba:	490c      	ldr	r1, [pc, #48]	; (800d6ec <pcf8553_init+0x5c>)
 800d6bc:	480c      	ldr	r0, [pc, #48]	; (800d6f0 <pcf8553_init+0x60>)
 800d6be:	f7f7 fd88 	bl	80051d2 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&h_spi1, &(g_display_ctrl_1.reg_data), 1, DEFAULT_DELAY);
 800d6c2:	2314      	movs	r3, #20
 800d6c4:	2201      	movs	r2, #1
 800d6c6:	490b      	ldr	r1, [pc, #44]	; (800d6f4 <pcf8553_init+0x64>)
 800d6c8:	4809      	ldr	r0, [pc, #36]	; (800d6f0 <pcf8553_init+0x60>)
 800d6ca:	f7f7 fd82 	bl	80051d2 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&h_spi1, &(g_display_ctrl_2.reg_data), 1, DEFAULT_DELAY);
 800d6ce:	2314      	movs	r3, #20
 800d6d0:	2201      	movs	r2, #1
 800d6d2:	4909      	ldr	r1, [pc, #36]	; (800d6f8 <pcf8553_init+0x68>)
 800d6d4:	4806      	ldr	r0, [pc, #24]	; (800d6f0 <pcf8553_init+0x60>)
 800d6d6:	f7f7 fd7c 	bl	80051d2 <HAL_SPI_Transmit>

    /*
     *  Chip disable.
     *
     */
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_SET);
 800d6da:	2201      	movs	r2, #1
 800d6dc:	2110      	movs	r1, #16
 800d6de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d6e2:	f7f5 fce3 	bl	80030ac <HAL_GPIO_WritePin>
}
 800d6e6:	bf00      	nop
 800d6e8:	bd80      	pop	{r7, pc}
 800d6ea:	bf00      	nop
 800d6ec:	20001d4c 	.word	0x20001d4c
 800d6f0:	20001cd4 	.word	0x20001cd4
 800d6f4:	20000140 	.word	0x20000140
 800d6f8:	20001d50 	.word	0x20001d50

0800d6fc <pcf8553_reset>:
 * at least 10 μs.
 * @param  None
 * @retval None
 */
void pcf8553_reset()
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PCF8553_RESET_PORT, PCF8553_RESET_PIN, GPIO_PIN_RESET);
 800d700:	2200      	movs	r2, #0
 800d702:	2120      	movs	r1, #32
 800d704:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d708:	f7f5 fcd0 	bl	80030ac <HAL_GPIO_WritePin>
    HAL_Delay(DEFAULT_DELAY);
 800d70c:	2314      	movs	r3, #20
 800d70e:	4618      	mov	r0, r3
 800d710:	f7f3 ff4a 	bl	80015a8 <HAL_Delay>
    HAL_GPIO_WritePin(PCF8553_RESET_PORT, PCF8553_RESET_Pin, GPIO_PIN_SET);
 800d714:	2201      	movs	r2, #1
 800d716:	2140      	movs	r1, #64	; 0x40
 800d718:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d71c:	f7f5 fcc6 	bl	80030ac <HAL_GPIO_WritePin>
}
 800d720:	bf00      	nop
 800d722:	bd80      	pop	{r7, pc}

0800d724 <pcf8553_write_all>:
 * futuro se hará con una enumeración que lo deje claro, ya sea en esta función
 * o en una de mas alto nivel.
 * @retval None
 */
void pcf8553_write_all(uint8_t data)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b084      	sub	sp, #16
 800d728:	af00      	add	r7, sp, #0
 800d72a:	4603      	mov	r3, r0
 800d72c:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 800d72e:	2300      	movs	r3, #0
 800d730:	60fb      	str	r3, [r7, #12]
 800d732:	e007      	b.n	800d744 <pcf8553_write_all+0x20>
    {
        g_lcd_map[i] = data;
 800d734:	4a08      	ldr	r2, [pc, #32]	; (800d758 <pcf8553_write_all+0x34>)
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	4413      	add	r3, r2
 800d73a:	79fa      	ldrb	r2, [r7, #7]
 800d73c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	3301      	adds	r3, #1
 800d742:	60fb      	str	r3, [r7, #12]
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	2b13      	cmp	r3, #19
 800d748:	ddf4      	ble.n	800d734 <pcf8553_write_all+0x10>
    }
    pcf8553_dump();
 800d74a:	f7ff ff75 	bl	800d638 <pcf8553_dump>
}
 800d74e:	bf00      	nop
 800d750:	3710      	adds	r7, #16
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}
 800d756:	bf00      	nop
 800d758:	20001d38 	.word	0x20001d38

0800d75c <fm_menu_config_date_hour>:
 * @brief Función que imprime el menú de configuración de fecha y hora.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_date_hour(fm_event_t event_id)
{
 800d75c:	b5b0      	push	{r4, r5, r7, lr}
 800d75e:	b0b4      	sub	sp, #208	; 0xd0
 800d760:	af00      	add	r7, sp, #0
 800d762:	4603      	mov	r3, r0
 800d764:	71fb      	strb	r3, [r7, #7]
    static sel_second second_enum;
    RTC_TimeTypeDef time_final;
    RTC_DateTypeDef date_final;
    extern RTC_HandleTypeDef hrtc;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_date_hour;
 800d766:	4b9d      	ldr	r3, [pc, #628]	; (800d9dc <fm_menu_config_date_hour+0x280>)
 800d768:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    fm_event_t event_now;

    if (new_entry == 1)
 800d76c:	4b9c      	ldr	r3, [pc, #624]	; (800d9e0 <fm_menu_config_date_hour+0x284>)
 800d76e:	781b      	ldrb	r3, [r3, #0]
 800d770:	2b01      	cmp	r3, #1
 800d772:	d107      	bne.n	800d784 <fm_menu_config_date_hour+0x28>
    {
        field = DAY;
 800d774:	4b9b      	ldr	r3, [pc, #620]	; (800d9e4 <fm_menu_config_date_hour+0x288>)
 800d776:	2200      	movs	r2, #0
 800d778:	701a      	strb	r2, [r3, #0]
        fm_lcd_clear();
 800d77a:	f7fd faf6 	bl	800ad6a <fm_lcd_clear>
        new_entry = 0;
 800d77e:	4b98      	ldr	r3, [pc, #608]	; (800d9e0 <fm_menu_config_date_hour+0x284>)
 800d780:	2200      	movs	r2, #0
 800d782:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_date_hour(CONFIGURATION, event_id, field);
 800d784:	4b97      	ldr	r3, [pc, #604]	; (800d9e4 <fm_menu_config_date_hour+0x288>)
 800d786:	781a      	ldrb	r2, [r3, #0]
 800d788:	79fb      	ldrb	r3, [r7, #7]
 800d78a:	4619      	mov	r1, r3
 800d78c:	2001      	movs	r0, #1
 800d78e:	f7fd faf3 	bl	800ad78 <fm_lcd_date_hour>
    fm_lcd_refresh();
 800d792:	f7fd fe08 	bl	800b3a6 <fm_lcd_refresh>

    day_enum = fm_factory_get_date_time().day;
 800d796:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d79a:	4618      	mov	r0, r3
 800d79c:	f7fc fda4 	bl	800a2e8 <fm_factory_get_date_time>
 800d7a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7a2:	b2da      	uxtb	r2, r3
 800d7a4:	4b90      	ldr	r3, [pc, #576]	; (800d9e8 <fm_menu_config_date_hour+0x28c>)
 800d7a6:	701a      	strb	r2, [r3, #0]
    month_enum = fm_factory_get_date_time().month;
 800d7a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	f7fc fd9b 	bl	800a2e8 <fm_factory_get_date_time>
 800d7b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d7b4:	b2da      	uxtb	r2, r3
 800d7b6:	4b8d      	ldr	r3, [pc, #564]	; (800d9ec <fm_menu_config_date_hour+0x290>)
 800d7b8:	701a      	strb	r2, [r3, #0]
    year_enum = fm_factory_get_date_time().year;
 800d7ba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f7fc fd92 	bl	800a2e8 <fm_factory_get_date_time>
 800d7c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d7c6:	b2da      	uxtb	r2, r3
 800d7c8:	4b89      	ldr	r3, [pc, #548]	; (800d9f0 <fm_menu_config_date_hour+0x294>)
 800d7ca:	701a      	strb	r2, [r3, #0]
    hour_enum = fm_factory_get_date_time().hour;
 800d7cc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f7fc fd89 	bl	800a2e8 <fm_factory_get_date_time>
 800d7d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d7da:	b2da      	uxtb	r2, r3
 800d7dc:	4b85      	ldr	r3, [pc, #532]	; (800d9f4 <fm_menu_config_date_hour+0x298>)
 800d7de:	701a      	strb	r2, [r3, #0]
    minute_enum = fm_factory_get_date_time().minute;
 800d7e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f7fc fd7f 	bl	800a2e8 <fm_factory_get_date_time>
 800d7ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d7ee:	b2da      	uxtb	r2, r3
 800d7f0:	4b81      	ldr	r3, [pc, #516]	; (800d9f8 <fm_menu_config_date_hour+0x29c>)
 800d7f2:	701a      	strb	r2, [r3, #0]
    second_enum = fm_factory_get_date_time().second;
 800d7f4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	f7fc fd75 	bl	800a2e8 <fm_factory_get_date_time>
 800d7fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d802:	b2da      	uxtb	r2, r3
 800d804:	4b7d      	ldr	r3, [pc, #500]	; (800d9fc <fm_menu_config_date_hour+0x2a0>)
 800d806:	701a      	strb	r2, [r3, #0]

    switch (event_id)
 800d808:	79fb      	ldrb	r3, [r7, #7]
 800d80a:	3b01      	subs	r3, #1
 800d80c:	2b04      	cmp	r3, #4
 800d80e:	f200 83be 	bhi.w	800df8e <fm_menu_config_date_hour+0x832>
 800d812:	a201      	add	r2, pc, #4	; (adr r2, 800d818 <fm_menu_config_date_hour+0xbc>)
 800d814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d818:	0800df8f 	.word	0x0800df8f
 800d81c:	0800d82d 	.word	0x0800d82d
 800d820:	0800db81 	.word	0x0800db81
 800d824:	0800def1 	.word	0x0800def1
 800d828:	0800df6d 	.word	0x0800df6d
    {
        case EVENT_KEY_UP:
            if(correct_password)
 800d82c:	4b74      	ldr	r3, [pc, #464]	; (800da00 <fm_menu_config_date_hour+0x2a4>)
 800d82e:	781b      	ldrb	r3, [r3, #0]
 800d830:	2b00      	cmp	r3, #0
 800d832:	f000 83ae 	beq.w	800df92 <fm_menu_config_date_hour+0x836>
                 * en cuenta la cantidad de días de cada mes, si es un año
                 * bisiesto o no, y que al pasarse del valor máximo o mínimo de
                 * cada parámetro, se vuelva a iniciar desde el valor mínimo o
                 * máximo respectivamente.
                 */
                if(field == DAY)
 800d836:	4b6b      	ldr	r3, [pc, #428]	; (800d9e4 <fm_menu_config_date_hour+0x288>)
 800d838:	781b      	ldrb	r3, [r3, #0]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	f040 809b 	bne.w	800d976 <fm_menu_config_date_hour+0x21a>
                {
                    if(month_enum == JANUARY ||
 800d840:	4b6a      	ldr	r3, [pc, #424]	; (800d9ec <fm_menu_config_date_hour+0x290>)
 800d842:	781b      	ldrb	r3, [r3, #0]
 800d844:	2b01      	cmp	r3, #1
 800d846:	d017      	beq.n	800d878 <fm_menu_config_date_hour+0x11c>
                    month_enum == MARCH      ||
 800d848:	4b68      	ldr	r3, [pc, #416]	; (800d9ec <fm_menu_config_date_hour+0x290>)
 800d84a:	781b      	ldrb	r3, [r3, #0]
                    if(month_enum == JANUARY ||
 800d84c:	2b03      	cmp	r3, #3
 800d84e:	d013      	beq.n	800d878 <fm_menu_config_date_hour+0x11c>
                    month_enum == MAY        ||
 800d850:	4b66      	ldr	r3, [pc, #408]	; (800d9ec <fm_menu_config_date_hour+0x290>)
 800d852:	781b      	ldrb	r3, [r3, #0]
                    month_enum == MARCH      ||
 800d854:	2b05      	cmp	r3, #5
 800d856:	d00f      	beq.n	800d878 <fm_menu_config_date_hour+0x11c>
                    month_enum == JULY       ||
 800d858:	4b64      	ldr	r3, [pc, #400]	; (800d9ec <fm_menu_config_date_hour+0x290>)
 800d85a:	781b      	ldrb	r3, [r3, #0]
                    month_enum == MAY        ||
 800d85c:	2b07      	cmp	r3, #7
 800d85e:	d00b      	beq.n	800d878 <fm_menu_config_date_hour+0x11c>
                    month_enum == AUGUST     ||
 800d860:	4b62      	ldr	r3, [pc, #392]	; (800d9ec <fm_menu_config_date_hour+0x290>)
 800d862:	781b      	ldrb	r3, [r3, #0]
                    month_enum == JULY       ||
 800d864:	2b08      	cmp	r3, #8
 800d866:	d007      	beq.n	800d878 <fm_menu_config_date_hour+0x11c>
                    month_enum == OCTOBER    ||
 800d868:	4b60      	ldr	r3, [pc, #384]	; (800d9ec <fm_menu_config_date_hour+0x290>)
 800d86a:	781b      	ldrb	r3, [r3, #0]
                    month_enum == AUGUST     ||
 800d86c:	2b0a      	cmp	r3, #10
 800d86e:	d003      	beq.n	800d878 <fm_menu_config_date_hour+0x11c>
                    month_enum == DECEMBER)
 800d870:	4b5e      	ldr	r3, [pc, #376]	; (800d9ec <fm_menu_config_date_hour+0x290>)
 800d872:	781b      	ldrb	r3, [r3, #0]
                    month_enum == OCTOBER    ||
 800d874:	2b0c      	cmp	r3, #12
 800d876:	d119      	bne.n	800d8ac <fm_menu_config_date_hour+0x150>
                    {
                        if(day_enum < DAY_31)
 800d878:	4b5b      	ldr	r3, [pc, #364]	; (800d9e8 <fm_menu_config_date_hour+0x28c>)
 800d87a:	781b      	ldrb	r3, [r3, #0]
 800d87c:	2b1e      	cmp	r3, #30
 800d87e:	d80b      	bhi.n	800d898 <fm_menu_config_date_hour+0x13c>
                        {
                            fm_factory_modify_date(day_enum +
 800d880:	4b59      	ldr	r3, [pc, #356]	; (800d9e8 <fm_menu_config_date_hour+0x28c>)
 800d882:	781b      	ldrb	r3, [r3, #0]
 800d884:	3301      	adds	r3, #1
 800d886:	4a59      	ldr	r2, [pc, #356]	; (800d9ec <fm_menu_config_date_hour+0x290>)
 800d888:	7812      	ldrb	r2, [r2, #0]
 800d88a:	4611      	mov	r1, r2
 800d88c:	4a58      	ldr	r2, [pc, #352]	; (800d9f0 <fm_menu_config_date_hour+0x294>)
 800d88e:	7812      	ldrb	r2, [r2, #0]
 800d890:	4618      	mov	r0, r3
 800d892:	f7fc fda7 	bl	800a3e4 <fm_factory_modify_date>
                        if(day_enum < DAY_31)
 800d896:	e168      	b.n	800db6a <fm_menu_config_date_hour+0x40e>
                            1, month_enum,
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_1,
 800d898:	4b54      	ldr	r3, [pc, #336]	; (800d9ec <fm_menu_config_date_hour+0x290>)
 800d89a:	781b      	ldrb	r3, [r3, #0]
 800d89c:	4619      	mov	r1, r3
 800d89e:	4b54      	ldr	r3, [pc, #336]	; (800d9f0 <fm_menu_config_date_hour+0x294>)
 800d8a0:	781b      	ldrb	r3, [r3, #0]
 800d8a2:	461a      	mov	r2, r3
 800d8a4:	2001      	movs	r0, #1
 800d8a6:	f7fc fd9d 	bl	800a3e4 <fm_factory_modify_date>
                        if(day_enum < DAY_31)
 800d8aa:	e15e      	b.n	800db6a <fm_menu_config_date_hour+0x40e>
                            month_enum,
                            year_enum);
                        }
                    }
                    else if(month_enum == APRIL ||
 800d8ac:	4b4f      	ldr	r3, [pc, #316]	; (800d9ec <fm_menu_config_date_hour+0x290>)
 800d8ae:	781b      	ldrb	r3, [r3, #0]
 800d8b0:	2b04      	cmp	r3, #4
 800d8b2:	d00b      	beq.n	800d8cc <fm_menu_config_date_hour+0x170>
                    month_enum == JUNE          ||
 800d8b4:	4b4d      	ldr	r3, [pc, #308]	; (800d9ec <fm_menu_config_date_hour+0x290>)
 800d8b6:	781b      	ldrb	r3, [r3, #0]
                    else if(month_enum == APRIL ||
 800d8b8:	2b06      	cmp	r3, #6
 800d8ba:	d007      	beq.n	800d8cc <fm_menu_config_date_hour+0x170>
                    month_enum == SEPTEMBER     ||
 800d8bc:	4b4b      	ldr	r3, [pc, #300]	; (800d9ec <fm_menu_config_date_hour+0x290>)
 800d8be:	781b      	ldrb	r3, [r3, #0]
                    month_enum == JUNE          ||
 800d8c0:	2b09      	cmp	r3, #9
 800d8c2:	d003      	beq.n	800d8cc <fm_menu_config_date_hour+0x170>
                    month_enum == NOVEMBER)
 800d8c4:	4b49      	ldr	r3, [pc, #292]	; (800d9ec <fm_menu_config_date_hour+0x290>)
 800d8c6:	781b      	ldrb	r3, [r3, #0]
                    month_enum == SEPTEMBER     ||
 800d8c8:	2b0b      	cmp	r3, #11
 800d8ca:	d119      	bne.n	800d900 <fm_menu_config_date_hour+0x1a4>
                    {
                        if(day_enum < DAY_30)
 800d8cc:	4b46      	ldr	r3, [pc, #280]	; (800d9e8 <fm_menu_config_date_hour+0x28c>)
 800d8ce:	781b      	ldrb	r3, [r3, #0]
 800d8d0:	2b1d      	cmp	r3, #29
 800d8d2:	d80b      	bhi.n	800d8ec <fm_menu_config_date_hour+0x190>
                        {
                            fm_factory_modify_date(day_enum + 1, month_enum,
 800d8d4:	4b44      	ldr	r3, [pc, #272]	; (800d9e8 <fm_menu_config_date_hour+0x28c>)
 800d8d6:	781b      	ldrb	r3, [r3, #0]
 800d8d8:	3301      	adds	r3, #1
 800d8da:	4a44      	ldr	r2, [pc, #272]	; (800d9ec <fm_menu_config_date_hour+0x290>)
 800d8dc:	7812      	ldrb	r2, [r2, #0]
 800d8de:	4611      	mov	r1, r2
 800d8e0:	4a43      	ldr	r2, [pc, #268]	; (800d9f0 <fm_menu_config_date_hour+0x294>)
 800d8e2:	7812      	ldrb	r2, [r2, #0]
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	f7fc fd7d 	bl	800a3e4 <fm_factory_modify_date>
                        if(day_enum < DAY_30)
 800d8ea:	e13e      	b.n	800db6a <fm_menu_config_date_hour+0x40e>
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_1, month_enum,
 800d8ec:	4b3f      	ldr	r3, [pc, #252]	; (800d9ec <fm_menu_config_date_hour+0x290>)
 800d8ee:	781b      	ldrb	r3, [r3, #0]
 800d8f0:	4619      	mov	r1, r3
 800d8f2:	4b3f      	ldr	r3, [pc, #252]	; (800d9f0 <fm_menu_config_date_hour+0x294>)
 800d8f4:	781b      	ldrb	r3, [r3, #0]
 800d8f6:	461a      	mov	r2, r3
 800d8f8:	2001      	movs	r0, #1
 800d8fa:	f7fc fd73 	bl	800a3e4 <fm_factory_modify_date>
                        if(day_enum < DAY_30)
 800d8fe:	e134      	b.n	800db6a <fm_menu_config_date_hour+0x40e>
                            year_enum);
                        }
                    }
                    else
                    {
                        if(year_enum % YEAR_4 == 0)
 800d900:	4b3b      	ldr	r3, [pc, #236]	; (800d9f0 <fm_menu_config_date_hour+0x294>)
 800d902:	781b      	ldrb	r3, [r3, #0]
 800d904:	f003 0303 	and.w	r3, r3, #3
 800d908:	b2db      	uxtb	r3, r3
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d119      	bne.n	800d942 <fm_menu_config_date_hour+0x1e6>
                        {
                            if(day_enum < DAY_29)
 800d90e:	4b36      	ldr	r3, [pc, #216]	; (800d9e8 <fm_menu_config_date_hour+0x28c>)
 800d910:	781b      	ldrb	r3, [r3, #0]
 800d912:	2b1c      	cmp	r3, #28
 800d914:	d80b      	bhi.n	800d92e <fm_menu_config_date_hour+0x1d2>
                            {
                                fm_factory_modify_date(day_enum + 1, month_enum,
 800d916:	4b34      	ldr	r3, [pc, #208]	; (800d9e8 <fm_menu_config_date_hour+0x28c>)
 800d918:	781b      	ldrb	r3, [r3, #0]
 800d91a:	3301      	adds	r3, #1
 800d91c:	4a33      	ldr	r2, [pc, #204]	; (800d9ec <fm_menu_config_date_hour+0x290>)
 800d91e:	7812      	ldrb	r2, [r2, #0]
 800d920:	4611      	mov	r1, r2
 800d922:	4a33      	ldr	r2, [pc, #204]	; (800d9f0 <fm_menu_config_date_hour+0x294>)
 800d924:	7812      	ldrb	r2, [r2, #0]
 800d926:	4618      	mov	r0, r3
 800d928:	f7fc fd5c 	bl	800a3e4 <fm_factory_modify_date>
 800d92c:	e11d      	b.n	800db6a <fm_menu_config_date_hour+0x40e>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_1, month_enum,
 800d92e:	4b2f      	ldr	r3, [pc, #188]	; (800d9ec <fm_menu_config_date_hour+0x290>)
 800d930:	781b      	ldrb	r3, [r3, #0]
 800d932:	4619      	mov	r1, r3
 800d934:	4b2e      	ldr	r3, [pc, #184]	; (800d9f0 <fm_menu_config_date_hour+0x294>)
 800d936:	781b      	ldrb	r3, [r3, #0]
 800d938:	461a      	mov	r2, r3
 800d93a:	2001      	movs	r0, #1
 800d93c:	f7fc fd52 	bl	800a3e4 <fm_factory_modify_date>
 800d940:	e113      	b.n	800db6a <fm_menu_config_date_hour+0x40e>
                                year_enum);
                            }
                        }
                        else
                        {
                            if(day_enum < DAY_28)
 800d942:	4b29      	ldr	r3, [pc, #164]	; (800d9e8 <fm_menu_config_date_hour+0x28c>)
 800d944:	781b      	ldrb	r3, [r3, #0]
 800d946:	2b1b      	cmp	r3, #27
 800d948:	d80b      	bhi.n	800d962 <fm_menu_config_date_hour+0x206>
                            {
                                fm_factory_modify_date(day_enum + 1, month_enum,
 800d94a:	4b27      	ldr	r3, [pc, #156]	; (800d9e8 <fm_menu_config_date_hour+0x28c>)
 800d94c:	781b      	ldrb	r3, [r3, #0]
 800d94e:	3301      	adds	r3, #1
 800d950:	4a26      	ldr	r2, [pc, #152]	; (800d9ec <fm_menu_config_date_hour+0x290>)
 800d952:	7812      	ldrb	r2, [r2, #0]
 800d954:	4611      	mov	r1, r2
 800d956:	4a26      	ldr	r2, [pc, #152]	; (800d9f0 <fm_menu_config_date_hour+0x294>)
 800d958:	7812      	ldrb	r2, [r2, #0]
 800d95a:	4618      	mov	r0, r3
 800d95c:	f7fc fd42 	bl	800a3e4 <fm_factory_modify_date>
 800d960:	e103      	b.n	800db6a <fm_menu_config_date_hour+0x40e>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_1, month_enum,
 800d962:	4b22      	ldr	r3, [pc, #136]	; (800d9ec <fm_menu_config_date_hour+0x290>)
 800d964:	781b      	ldrb	r3, [r3, #0]
 800d966:	4619      	mov	r1, r3
 800d968:	4b21      	ldr	r3, [pc, #132]	; (800d9f0 <fm_menu_config_date_hour+0x294>)
 800d96a:	781b      	ldrb	r3, [r3, #0]
 800d96c:	461a      	mov	r2, r3
 800d96e:	2001      	movs	r0, #1
 800d970:	f7fc fd38 	bl	800a3e4 <fm_factory_modify_date>
 800d974:	e0f9      	b.n	800db6a <fm_menu_config_date_hour+0x40e>
                                year_enum);
                            }
                        }
                    }
                }
                else if(field == MONTH)
 800d976:	4b1b      	ldr	r3, [pc, #108]	; (800d9e4 <fm_menu_config_date_hour+0x288>)
 800d978:	781b      	ldrb	r3, [r3, #0]
 800d97a:	2b01      	cmp	r3, #1
 800d97c:	d16a      	bne.n	800da54 <fm_menu_config_date_hour+0x2f8>
                {
                    if(month_enum < DECEMBER)
 800d97e:	4b1b      	ldr	r3, [pc, #108]	; (800d9ec <fm_menu_config_date_hour+0x290>)
 800d980:	781b      	ldrb	r3, [r3, #0]
 800d982:	2b0b      	cmp	r3, #11
 800d984:	d85c      	bhi.n	800da40 <fm_menu_config_date_hour+0x2e4>
                    {
                        if((month_enum + 1 == APRIL ||
 800d986:	4b19      	ldr	r3, [pc, #100]	; (800d9ec <fm_menu_config_date_hour+0x290>)
 800d988:	781b      	ldrb	r3, [r3, #0]
 800d98a:	2b03      	cmp	r3, #3
 800d98c:	d00b      	beq.n	800d9a6 <fm_menu_config_date_hour+0x24a>
                        month_enum + 1 == JUNE      ||
 800d98e:	4b17      	ldr	r3, [pc, #92]	; (800d9ec <fm_menu_config_date_hour+0x290>)
 800d990:	781b      	ldrb	r3, [r3, #0]
                        if((month_enum + 1 == APRIL ||
 800d992:	2b05      	cmp	r3, #5
 800d994:	d007      	beq.n	800d9a6 <fm_menu_config_date_hour+0x24a>
                        month_enum + 1 == SEPTEMBER ||
 800d996:	4b15      	ldr	r3, [pc, #84]	; (800d9ec <fm_menu_config_date_hour+0x290>)
 800d998:	781b      	ldrb	r3, [r3, #0]
                        month_enum + 1 == JUNE      ||
 800d99a:	2b08      	cmp	r3, #8
 800d99c:	d003      	beq.n	800d9a6 <fm_menu_config_date_hour+0x24a>
                        month_enum + 1 == NOVEMBER)
 800d99e:	4b13      	ldr	r3, [pc, #76]	; (800d9ec <fm_menu_config_date_hour+0x290>)
 800d9a0:	781b      	ldrb	r3, [r3, #0]
                        month_enum + 1 == SEPTEMBER ||
 800d9a2:	2b0a      	cmp	r3, #10
 800d9a4:	d107      	bne.n	800d9b6 <fm_menu_config_date_hour+0x25a>
                        && (day_enum > DAY_30))
 800d9a6:	4b10      	ldr	r3, [pc, #64]	; (800d9e8 <fm_menu_config_date_hour+0x28c>)
 800d9a8:	781b      	ldrb	r3, [r3, #0]
 800d9aa:	2b1e      	cmp	r3, #30
 800d9ac:	d903      	bls.n	800d9b6 <fm_menu_config_date_hour+0x25a>
                        {
                            day_enum = DAY_30;
 800d9ae:	4b0e      	ldr	r3, [pc, #56]	; (800d9e8 <fm_menu_config_date_hour+0x28c>)
 800d9b0:	221e      	movs	r2, #30
 800d9b2:	701a      	strb	r2, [r3, #0]
 800d9b4:	e038      	b.n	800da28 <fm_menu_config_date_hour+0x2cc>
                        }
                        else if((month_enum + 1 == FEBRUARY) &&
 800d9b6:	4b0d      	ldr	r3, [pc, #52]	; (800d9ec <fm_menu_config_date_hour+0x290>)
 800d9b8:	781b      	ldrb	r3, [r3, #0]
 800d9ba:	2b01      	cmp	r3, #1
 800d9bc:	d122      	bne.n	800da04 <fm_menu_config_date_hour+0x2a8>
                        (year_enum % YEAR_4 == 0) &&
 800d9be:	4b0c      	ldr	r3, [pc, #48]	; (800d9f0 <fm_menu_config_date_hour+0x294>)
 800d9c0:	781b      	ldrb	r3, [r3, #0]
 800d9c2:	f003 0303 	and.w	r3, r3, #3
 800d9c6:	b2db      	uxtb	r3, r3
                        else if((month_enum + 1 == FEBRUARY) &&
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d11b      	bne.n	800da04 <fm_menu_config_date_hour+0x2a8>
                        (day_enum > DAY_29))
 800d9cc:	4b06      	ldr	r3, [pc, #24]	; (800d9e8 <fm_menu_config_date_hour+0x28c>)
 800d9ce:	781b      	ldrb	r3, [r3, #0]
                        (year_enum % YEAR_4 == 0) &&
 800d9d0:	2b1d      	cmp	r3, #29
 800d9d2:	d917      	bls.n	800da04 <fm_menu_config_date_hour+0x2a8>
                        {
                            day_enum = DAY_29;
 800d9d4:	4b04      	ldr	r3, [pc, #16]	; (800d9e8 <fm_menu_config_date_hour+0x28c>)
 800d9d6:	221d      	movs	r2, #29
 800d9d8:	701a      	strb	r2, [r3, #0]
 800d9da:	e025      	b.n	800da28 <fm_menu_config_date_hour+0x2cc>
 800d9dc:	0800d75d 	.word	0x0800d75d
 800d9e0:	20000141 	.word	0x20000141
 800d9e4:	20001d53 	.word	0x20001d53
 800d9e8:	20001d54 	.word	0x20001d54
 800d9ec:	20001d55 	.word	0x20001d55
 800d9f0:	20001d56 	.word	0x20001d56
 800d9f4:	20001d57 	.word	0x20001d57
 800d9f8:	20001d58 	.word	0x20001d58
 800d9fc:	20001d59 	.word	0x20001d59
 800da00:	20001d52 	.word	0x20001d52
                        }
                        else if((month_enum + 1 == FEBRUARY) &&
 800da04:	4b93      	ldr	r3, [pc, #588]	; (800dc54 <fm_menu_config_date_hour+0x4f8>)
 800da06:	781b      	ldrb	r3, [r3, #0]
 800da08:	2b01      	cmp	r3, #1
 800da0a:	d10d      	bne.n	800da28 <fm_menu_config_date_hour+0x2cc>
                        (year_enum % YEAR_4 != 0) &&
 800da0c:	4b92      	ldr	r3, [pc, #584]	; (800dc58 <fm_menu_config_date_hour+0x4fc>)
 800da0e:	781b      	ldrb	r3, [r3, #0]
 800da10:	f003 0303 	and.w	r3, r3, #3
 800da14:	b2db      	uxtb	r3, r3
                        else if((month_enum + 1 == FEBRUARY) &&
 800da16:	2b00      	cmp	r3, #0
 800da18:	d006      	beq.n	800da28 <fm_menu_config_date_hour+0x2cc>
                        (day_enum > DAY_28))
 800da1a:	4b90      	ldr	r3, [pc, #576]	; (800dc5c <fm_menu_config_date_hour+0x500>)
 800da1c:	781b      	ldrb	r3, [r3, #0]
                        (year_enum % YEAR_4 != 0) &&
 800da1e:	2b1c      	cmp	r3, #28
 800da20:	d902      	bls.n	800da28 <fm_menu_config_date_hour+0x2cc>
                        {
                            day_enum = DAY_28;
 800da22:	4b8e      	ldr	r3, [pc, #568]	; (800dc5c <fm_menu_config_date_hour+0x500>)
 800da24:	221c      	movs	r2, #28
 800da26:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum + 1,
 800da28:	4b8c      	ldr	r3, [pc, #560]	; (800dc5c <fm_menu_config_date_hour+0x500>)
 800da2a:	781b      	ldrb	r3, [r3, #0]
 800da2c:	4618      	mov	r0, r3
 800da2e:	4b89      	ldr	r3, [pc, #548]	; (800dc54 <fm_menu_config_date_hour+0x4f8>)
 800da30:	781b      	ldrb	r3, [r3, #0]
 800da32:	3301      	adds	r3, #1
 800da34:	4a88      	ldr	r2, [pc, #544]	; (800dc58 <fm_menu_config_date_hour+0x4fc>)
 800da36:	7812      	ldrb	r2, [r2, #0]
 800da38:	4619      	mov	r1, r3
 800da3a:	f7fc fcd3 	bl	800a3e4 <fm_factory_modify_date>
 800da3e:	e094      	b.n	800db6a <fm_menu_config_date_hour+0x40e>
                        year_enum);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, JANUARY, year_enum);
 800da40:	4b86      	ldr	r3, [pc, #536]	; (800dc5c <fm_menu_config_date_hour+0x500>)
 800da42:	781b      	ldrb	r3, [r3, #0]
 800da44:	4618      	mov	r0, r3
 800da46:	4b84      	ldr	r3, [pc, #528]	; (800dc58 <fm_menu_config_date_hour+0x4fc>)
 800da48:	781b      	ldrb	r3, [r3, #0]
 800da4a:	461a      	mov	r2, r3
 800da4c:	2101      	movs	r1, #1
 800da4e:	f7fc fcc9 	bl	800a3e4 <fm_factory_modify_date>
 800da52:	e08a      	b.n	800db6a <fm_menu_config_date_hour+0x40e>
                    }
                }
                else if(field == YEAR)
 800da54:	4b82      	ldr	r3, [pc, #520]	; (800dc60 <fm_menu_config_date_hour+0x504>)
 800da56:	781b      	ldrb	r3, [r3, #0]
 800da58:	2b02      	cmp	r3, #2
 800da5a:	d12c      	bne.n	800dab6 <fm_menu_config_date_hour+0x35a>
                {
                    if(year_enum < YEAR_99)
 800da5c:	4b7e      	ldr	r3, [pc, #504]	; (800dc58 <fm_menu_config_date_hour+0x4fc>)
 800da5e:	781b      	ldrb	r3, [r3, #0]
 800da60:	2b62      	cmp	r3, #98	; 0x62
 800da62:	d81e      	bhi.n	800daa2 <fm_menu_config_date_hour+0x346>
                    {
                        if(((year_enum + 1) % YEAR_4 != YEAR_0) &&
 800da64:	4b7c      	ldr	r3, [pc, #496]	; (800dc58 <fm_menu_config_date_hour+0x4fc>)
 800da66:	781b      	ldrb	r3, [r3, #0]
 800da68:	3301      	adds	r3, #1
 800da6a:	f003 0303 	and.w	r3, r3, #3
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d00a      	beq.n	800da88 <fm_menu_config_date_hour+0x32c>
                        (month_enum == FEBRUARY) &&
 800da72:	4b78      	ldr	r3, [pc, #480]	; (800dc54 <fm_menu_config_date_hour+0x4f8>)
 800da74:	781b      	ldrb	r3, [r3, #0]
                        if(((year_enum + 1) % YEAR_4 != YEAR_0) &&
 800da76:	2b02      	cmp	r3, #2
 800da78:	d106      	bne.n	800da88 <fm_menu_config_date_hour+0x32c>
                        (day_enum > DAY_28))
 800da7a:	4b78      	ldr	r3, [pc, #480]	; (800dc5c <fm_menu_config_date_hour+0x500>)
 800da7c:	781b      	ldrb	r3, [r3, #0]
                        (month_enum == FEBRUARY) &&
 800da7e:	2b1c      	cmp	r3, #28
 800da80:	d902      	bls.n	800da88 <fm_menu_config_date_hour+0x32c>
                        {
                            day_enum = DAY_28;
 800da82:	4b76      	ldr	r3, [pc, #472]	; (800dc5c <fm_menu_config_date_hour+0x500>)
 800da84:	221c      	movs	r2, #28
 800da86:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum, year_enum
 800da88:	4b74      	ldr	r3, [pc, #464]	; (800dc5c <fm_menu_config_date_hour+0x500>)
 800da8a:	781b      	ldrb	r3, [r3, #0]
 800da8c:	4618      	mov	r0, r3
 800da8e:	4b71      	ldr	r3, [pc, #452]	; (800dc54 <fm_menu_config_date_hour+0x4f8>)
 800da90:	781b      	ldrb	r3, [r3, #0]
 800da92:	4619      	mov	r1, r3
 800da94:	4b70      	ldr	r3, [pc, #448]	; (800dc58 <fm_menu_config_date_hour+0x4fc>)
 800da96:	781b      	ldrb	r3, [r3, #0]
 800da98:	3301      	adds	r3, #1
 800da9a:	461a      	mov	r2, r3
 800da9c:	f7fc fca2 	bl	800a3e4 <fm_factory_modify_date>
 800daa0:	e063      	b.n	800db6a <fm_menu_config_date_hour+0x40e>
                        + 1);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, month_enum, YEAR_0);
 800daa2:	4b6e      	ldr	r3, [pc, #440]	; (800dc5c <fm_menu_config_date_hour+0x500>)
 800daa4:	781b      	ldrb	r3, [r3, #0]
 800daa6:	4618      	mov	r0, r3
 800daa8:	4b6a      	ldr	r3, [pc, #424]	; (800dc54 <fm_menu_config_date_hour+0x4f8>)
 800daaa:	781b      	ldrb	r3, [r3, #0]
 800daac:	2200      	movs	r2, #0
 800daae:	4619      	mov	r1, r3
 800dab0:	f7fc fc98 	bl	800a3e4 <fm_factory_modify_date>
 800dab4:	e059      	b.n	800db6a <fm_menu_config_date_hour+0x40e>
                    }
                }
                else if(field == HOUR)
 800dab6:	4b6a      	ldr	r3, [pc, #424]	; (800dc60 <fm_menu_config_date_hour+0x504>)
 800dab8:	781b      	ldrb	r3, [r3, #0]
 800daba:	2b03      	cmp	r3, #3
 800dabc:	d119      	bne.n	800daf2 <fm_menu_config_date_hour+0x396>
                {
                    if(hour_enum < HOUR_23)
 800dabe:	4b69      	ldr	r3, [pc, #420]	; (800dc64 <fm_menu_config_date_hour+0x508>)
 800dac0:	781b      	ldrb	r3, [r3, #0]
 800dac2:	2b16      	cmp	r3, #22
 800dac4:	d80b      	bhi.n	800dade <fm_menu_config_date_hour+0x382>
                    {
                        fm_factory_modify_time(hour_enum + 1,
 800dac6:	4b67      	ldr	r3, [pc, #412]	; (800dc64 <fm_menu_config_date_hour+0x508>)
 800dac8:	781b      	ldrb	r3, [r3, #0]
 800daca:	3301      	adds	r3, #1
 800dacc:	4a66      	ldr	r2, [pc, #408]	; (800dc68 <fm_menu_config_date_hour+0x50c>)
 800dace:	7812      	ldrb	r2, [r2, #0]
 800dad0:	4611      	mov	r1, r2
 800dad2:	4a66      	ldr	r2, [pc, #408]	; (800dc6c <fm_menu_config_date_hour+0x510>)
 800dad4:	7812      	ldrb	r2, [r2, #0]
 800dad6:	4618      	mov	r0, r3
 800dad8:	f7fc fcb0 	bl	800a43c <fm_factory_modify_time>
 800dadc:	e045      	b.n	800db6a <fm_menu_config_date_hour+0x40e>
                        minute_enum,
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(HOUR_0, minute_enum,
 800dade:	4b62      	ldr	r3, [pc, #392]	; (800dc68 <fm_menu_config_date_hour+0x50c>)
 800dae0:	781b      	ldrb	r3, [r3, #0]
 800dae2:	4619      	mov	r1, r3
 800dae4:	4b61      	ldr	r3, [pc, #388]	; (800dc6c <fm_menu_config_date_hour+0x510>)
 800dae6:	781b      	ldrb	r3, [r3, #0]
 800dae8:	461a      	mov	r2, r3
 800daea:	2000      	movs	r0, #0
 800daec:	f7fc fca6 	bl	800a43c <fm_factory_modify_time>
 800daf0:	e03b      	b.n	800db6a <fm_menu_config_date_hour+0x40e>
                        second_enum);
                    }
                }
                else if(field == MINUTE)
 800daf2:	4b5b      	ldr	r3, [pc, #364]	; (800dc60 <fm_menu_config_date_hour+0x504>)
 800daf4:	781b      	ldrb	r3, [r3, #0]
 800daf6:	2b04      	cmp	r3, #4
 800daf8:	d119      	bne.n	800db2e <fm_menu_config_date_hour+0x3d2>
                {
                    if(minute_enum < MINU_59)
 800dafa:	4b5b      	ldr	r3, [pc, #364]	; (800dc68 <fm_menu_config_date_hour+0x50c>)
 800dafc:	781b      	ldrb	r3, [r3, #0]
 800dafe:	2b3a      	cmp	r3, #58	; 0x3a
 800db00:	d80b      	bhi.n	800db1a <fm_menu_config_date_hour+0x3be>
                    {
                        fm_factory_modify_time(hour_enum,
 800db02:	4b58      	ldr	r3, [pc, #352]	; (800dc64 <fm_menu_config_date_hour+0x508>)
 800db04:	781b      	ldrb	r3, [r3, #0]
 800db06:	4618      	mov	r0, r3
 800db08:	4b57      	ldr	r3, [pc, #348]	; (800dc68 <fm_menu_config_date_hour+0x50c>)
 800db0a:	781b      	ldrb	r3, [r3, #0]
 800db0c:	3301      	adds	r3, #1
 800db0e:	4a57      	ldr	r2, [pc, #348]	; (800dc6c <fm_menu_config_date_hour+0x510>)
 800db10:	7812      	ldrb	r2, [r2, #0]
 800db12:	4619      	mov	r1, r3
 800db14:	f7fc fc92 	bl	800a43c <fm_factory_modify_time>
 800db18:	e027      	b.n	800db6a <fm_menu_config_date_hour+0x40e>
                        minute_enum + 1,
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum,
 800db1a:	4b52      	ldr	r3, [pc, #328]	; (800dc64 <fm_menu_config_date_hour+0x508>)
 800db1c:	781b      	ldrb	r3, [r3, #0]
 800db1e:	4618      	mov	r0, r3
 800db20:	4b52      	ldr	r3, [pc, #328]	; (800dc6c <fm_menu_config_date_hour+0x510>)
 800db22:	781b      	ldrb	r3, [r3, #0]
 800db24:	461a      	mov	r2, r3
 800db26:	2100      	movs	r1, #0
 800db28:	f7fc fc88 	bl	800a43c <fm_factory_modify_time>
 800db2c:	e01d      	b.n	800db6a <fm_menu_config_date_hour+0x40e>
                        MINU_0, second_enum);
                    }
                }
                else if(field == SECOND)
 800db2e:	4b4c      	ldr	r3, [pc, #304]	; (800dc60 <fm_menu_config_date_hour+0x504>)
 800db30:	781b      	ldrb	r3, [r3, #0]
 800db32:	2b05      	cmp	r3, #5
 800db34:	d119      	bne.n	800db6a <fm_menu_config_date_hour+0x40e>
                {
                    if(second_enum < SEC_59)
 800db36:	4b4d      	ldr	r3, [pc, #308]	; (800dc6c <fm_menu_config_date_hour+0x510>)
 800db38:	781b      	ldrb	r3, [r3, #0]
 800db3a:	2b3a      	cmp	r3, #58	; 0x3a
 800db3c:	d80c      	bhi.n	800db58 <fm_menu_config_date_hour+0x3fc>
                    {
                        fm_factory_modify_time(hour_enum,
 800db3e:	4b49      	ldr	r3, [pc, #292]	; (800dc64 <fm_menu_config_date_hour+0x508>)
 800db40:	781b      	ldrb	r3, [r3, #0]
 800db42:	4618      	mov	r0, r3
 800db44:	4b48      	ldr	r3, [pc, #288]	; (800dc68 <fm_menu_config_date_hour+0x50c>)
 800db46:	781b      	ldrb	r3, [r3, #0]
 800db48:	4619      	mov	r1, r3
 800db4a:	4b48      	ldr	r3, [pc, #288]	; (800dc6c <fm_menu_config_date_hour+0x510>)
 800db4c:	781b      	ldrb	r3, [r3, #0]
 800db4e:	3301      	adds	r3, #1
 800db50:	461a      	mov	r2, r3
 800db52:	f7fc fc73 	bl	800a43c <fm_factory_modify_time>
 800db56:	e008      	b.n	800db6a <fm_menu_config_date_hour+0x40e>
                        minute_enum,
                        second_enum + 1);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum,
 800db58:	4b42      	ldr	r3, [pc, #264]	; (800dc64 <fm_menu_config_date_hour+0x508>)
 800db5a:	781b      	ldrb	r3, [r3, #0]
 800db5c:	4618      	mov	r0, r3
 800db5e:	4b42      	ldr	r3, [pc, #264]	; (800dc68 <fm_menu_config_date_hour+0x50c>)
 800db60:	781b      	ldrb	r3, [r3, #0]
 800db62:	2200      	movs	r2, #0
 800db64:	4619      	mov	r1, r3
 800db66:	f7fc fc69 	bl	800a43c <fm_factory_modify_time>
                        minute_enum,
                        SEC_0);
                    }
                }
                event_now = EVENT_LCD_REFRESH;
 800db6a:	2301      	movs	r3, #1
 800db6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800db70:	f107 0323 	add.w	r3, r7, #35	; 0x23
 800db74:	2200      	movs	r2, #0
 800db76:	4619      	mov	r1, r3
 800db78:	483d      	ldr	r0, [pc, #244]	; (800dc70 <fm_menu_config_date_hour+0x514>)
 800db7a:	f7fb fe39 	bl	80097f0 <_txe_queue_send>
            }
        break;
 800db7e:	e208      	b.n	800df92 <fm_menu_config_date_hour+0x836>
        case EVENT_KEY_DOWN:
            if(correct_password)
 800db80:	4b3c      	ldr	r3, [pc, #240]	; (800dc74 <fm_menu_config_date_hour+0x518>)
 800db82:	781b      	ldrb	r3, [r3, #0]
 800db84:	2b00      	cmp	r3, #0
 800db86:	f000 8206 	beq.w	800df96 <fm_menu_config_date_hour+0x83a>
                 * en cuenta la cantidad de días de cada mes, si es un año
                 * bisiesto o no, y que al pasarse del valor máximo o mínimo de
                 * cada parámetro, se vuelva a iniciar desde el valor mínimo o
                 * máximo respectivamente.
                 */
                if(field == DAY)
 800db8a:	4b35      	ldr	r3, [pc, #212]	; (800dc60 <fm_menu_config_date_hour+0x504>)
 800db8c:	781b      	ldrb	r3, [r3, #0]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	f040 80ad 	bne.w	800dcee <fm_menu_config_date_hour+0x592>
                {
                    if(month_enum == JANUARY || month_enum == MARCH   ||
 800db94:	4b2f      	ldr	r3, [pc, #188]	; (800dc54 <fm_menu_config_date_hour+0x4f8>)
 800db96:	781b      	ldrb	r3, [r3, #0]
 800db98:	2b01      	cmp	r3, #1
 800db9a:	d017      	beq.n	800dbcc <fm_menu_config_date_hour+0x470>
 800db9c:	4b2d      	ldr	r3, [pc, #180]	; (800dc54 <fm_menu_config_date_hour+0x4f8>)
 800db9e:	781b      	ldrb	r3, [r3, #0]
 800dba0:	2b03      	cmp	r3, #3
 800dba2:	d013      	beq.n	800dbcc <fm_menu_config_date_hour+0x470>
                    month_enum == MAY        || month_enum == JULY    ||
 800dba4:	4b2b      	ldr	r3, [pc, #172]	; (800dc54 <fm_menu_config_date_hour+0x4f8>)
 800dba6:	781b      	ldrb	r3, [r3, #0]
                    if(month_enum == JANUARY || month_enum == MARCH   ||
 800dba8:	2b05      	cmp	r3, #5
 800dbaa:	d00f      	beq.n	800dbcc <fm_menu_config_date_hour+0x470>
                    month_enum == MAY        || month_enum == JULY    ||
 800dbac:	4b29      	ldr	r3, [pc, #164]	; (800dc54 <fm_menu_config_date_hour+0x4f8>)
 800dbae:	781b      	ldrb	r3, [r3, #0]
 800dbb0:	2b07      	cmp	r3, #7
 800dbb2:	d00b      	beq.n	800dbcc <fm_menu_config_date_hour+0x470>
                    month_enum == AUGUST     || month_enum == OCTOBER ||
 800dbb4:	4b27      	ldr	r3, [pc, #156]	; (800dc54 <fm_menu_config_date_hour+0x4f8>)
 800dbb6:	781b      	ldrb	r3, [r3, #0]
                    month_enum == MAY        || month_enum == JULY    ||
 800dbb8:	2b08      	cmp	r3, #8
 800dbba:	d007      	beq.n	800dbcc <fm_menu_config_date_hour+0x470>
                    month_enum == AUGUST     || month_enum == OCTOBER ||
 800dbbc:	4b25      	ldr	r3, [pc, #148]	; (800dc54 <fm_menu_config_date_hour+0x4f8>)
 800dbbe:	781b      	ldrb	r3, [r3, #0]
 800dbc0:	2b0a      	cmp	r3, #10
 800dbc2:	d003      	beq.n	800dbcc <fm_menu_config_date_hour+0x470>
                    month_enum == DECEMBER)
 800dbc4:	4b23      	ldr	r3, [pc, #140]	; (800dc54 <fm_menu_config_date_hour+0x4f8>)
 800dbc6:	781b      	ldrb	r3, [r3, #0]
                    month_enum == AUGUST     || month_enum == OCTOBER ||
 800dbc8:	2b0c      	cmp	r3, #12
 800dbca:	d119      	bne.n	800dc00 <fm_menu_config_date_hour+0x4a4>
                    {
                        if(day_enum > DAY_1)
 800dbcc:	4b23      	ldr	r3, [pc, #140]	; (800dc5c <fm_menu_config_date_hour+0x500>)
 800dbce:	781b      	ldrb	r3, [r3, #0]
 800dbd0:	2b01      	cmp	r3, #1
 800dbd2:	d90b      	bls.n	800dbec <fm_menu_config_date_hour+0x490>
                        {
                            fm_factory_modify_date(day_enum - 1, month_enum,
 800dbd4:	4b21      	ldr	r3, [pc, #132]	; (800dc5c <fm_menu_config_date_hour+0x500>)
 800dbd6:	781b      	ldrb	r3, [r3, #0]
 800dbd8:	3b01      	subs	r3, #1
 800dbda:	4a1e      	ldr	r2, [pc, #120]	; (800dc54 <fm_menu_config_date_hour+0x4f8>)
 800dbdc:	7812      	ldrb	r2, [r2, #0]
 800dbde:	4611      	mov	r1, r2
 800dbe0:	4a1d      	ldr	r2, [pc, #116]	; (800dc58 <fm_menu_config_date_hour+0x4fc>)
 800dbe2:	7812      	ldrb	r2, [r2, #0]
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	f7fc fbfd 	bl	800a3e4 <fm_factory_modify_date>
                        if(day_enum > DAY_1)
 800dbea:	e166      	b.n	800deba <fm_menu_config_date_hour+0x75e>
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_31, month_enum,
 800dbec:	4b19      	ldr	r3, [pc, #100]	; (800dc54 <fm_menu_config_date_hour+0x4f8>)
 800dbee:	781b      	ldrb	r3, [r3, #0]
 800dbf0:	4619      	mov	r1, r3
 800dbf2:	4b19      	ldr	r3, [pc, #100]	; (800dc58 <fm_menu_config_date_hour+0x4fc>)
 800dbf4:	781b      	ldrb	r3, [r3, #0]
 800dbf6:	461a      	mov	r2, r3
 800dbf8:	201f      	movs	r0, #31
 800dbfa:	f7fc fbf3 	bl	800a3e4 <fm_factory_modify_date>
                        if(day_enum > DAY_1)
 800dbfe:	e15c      	b.n	800deba <fm_menu_config_date_hour+0x75e>
                            year_enum);
                        }
                    }
                    else if(month_enum == APRIL || month_enum == JUNE ||
 800dc00:	4b14      	ldr	r3, [pc, #80]	; (800dc54 <fm_menu_config_date_hour+0x4f8>)
 800dc02:	781b      	ldrb	r3, [r3, #0]
 800dc04:	2b04      	cmp	r3, #4
 800dc06:	d00b      	beq.n	800dc20 <fm_menu_config_date_hour+0x4c4>
 800dc08:	4b12      	ldr	r3, [pc, #72]	; (800dc54 <fm_menu_config_date_hour+0x4f8>)
 800dc0a:	781b      	ldrb	r3, [r3, #0]
 800dc0c:	2b06      	cmp	r3, #6
 800dc0e:	d007      	beq.n	800dc20 <fm_menu_config_date_hour+0x4c4>
                    month_enum == SEPTEMBER     || month_enum == NOVEMBER)
 800dc10:	4b10      	ldr	r3, [pc, #64]	; (800dc54 <fm_menu_config_date_hour+0x4f8>)
 800dc12:	781b      	ldrb	r3, [r3, #0]
                    else if(month_enum == APRIL || month_enum == JUNE ||
 800dc14:	2b09      	cmp	r3, #9
 800dc16:	d003      	beq.n	800dc20 <fm_menu_config_date_hour+0x4c4>
                    month_enum == SEPTEMBER     || month_enum == NOVEMBER)
 800dc18:	4b0e      	ldr	r3, [pc, #56]	; (800dc54 <fm_menu_config_date_hour+0x4f8>)
 800dc1a:	781b      	ldrb	r3, [r3, #0]
 800dc1c:	2b0b      	cmp	r3, #11
 800dc1e:	d12b      	bne.n	800dc78 <fm_menu_config_date_hour+0x51c>
                    {
                        if(day_enum > DAY_1)
 800dc20:	4b0e      	ldr	r3, [pc, #56]	; (800dc5c <fm_menu_config_date_hour+0x500>)
 800dc22:	781b      	ldrb	r3, [r3, #0]
 800dc24:	2b01      	cmp	r3, #1
 800dc26:	d90b      	bls.n	800dc40 <fm_menu_config_date_hour+0x4e4>
                        {
                            fm_factory_modify_date(day_enum - 1, month_enum,
 800dc28:	4b0c      	ldr	r3, [pc, #48]	; (800dc5c <fm_menu_config_date_hour+0x500>)
 800dc2a:	781b      	ldrb	r3, [r3, #0]
 800dc2c:	3b01      	subs	r3, #1
 800dc2e:	4a09      	ldr	r2, [pc, #36]	; (800dc54 <fm_menu_config_date_hour+0x4f8>)
 800dc30:	7812      	ldrb	r2, [r2, #0]
 800dc32:	4611      	mov	r1, r2
 800dc34:	4a08      	ldr	r2, [pc, #32]	; (800dc58 <fm_menu_config_date_hour+0x4fc>)
 800dc36:	7812      	ldrb	r2, [r2, #0]
 800dc38:	4618      	mov	r0, r3
 800dc3a:	f7fc fbd3 	bl	800a3e4 <fm_factory_modify_date>
                        if(day_enum > DAY_1)
 800dc3e:	e13c      	b.n	800deba <fm_menu_config_date_hour+0x75e>
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_30, month_enum,
 800dc40:	4b04      	ldr	r3, [pc, #16]	; (800dc54 <fm_menu_config_date_hour+0x4f8>)
 800dc42:	781b      	ldrb	r3, [r3, #0]
 800dc44:	4619      	mov	r1, r3
 800dc46:	4b04      	ldr	r3, [pc, #16]	; (800dc58 <fm_menu_config_date_hour+0x4fc>)
 800dc48:	781b      	ldrb	r3, [r3, #0]
 800dc4a:	461a      	mov	r2, r3
 800dc4c:	201e      	movs	r0, #30
 800dc4e:	f7fc fbc9 	bl	800a3e4 <fm_factory_modify_date>
                        if(day_enum > DAY_1)
 800dc52:	e132      	b.n	800deba <fm_menu_config_date_hour+0x75e>
 800dc54:	20001d55 	.word	0x20001d55
 800dc58:	20001d56 	.word	0x20001d56
 800dc5c:	20001d54 	.word	0x20001d54
 800dc60:	20001d53 	.word	0x20001d53
 800dc64:	20001d57 	.word	0x20001d57
 800dc68:	20001d58 	.word	0x20001d58
 800dc6c:	20001d59 	.word	0x20001d59
 800dc70:	20001368 	.word	0x20001368
 800dc74:	20001d52 	.word	0x20001d52
                            year_enum);
                        }
                    }
                    else
                    {
                        if(year_enum % YEAR_4 == 0)
 800dc78:	4b95      	ldr	r3, [pc, #596]	; (800ded0 <fm_menu_config_date_hour+0x774>)
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	f003 0303 	and.w	r3, r3, #3
 800dc80:	b2db      	uxtb	r3, r3
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d119      	bne.n	800dcba <fm_menu_config_date_hour+0x55e>
                        {
                            if(day_enum > DAY_1)
 800dc86:	4b93      	ldr	r3, [pc, #588]	; (800ded4 <fm_menu_config_date_hour+0x778>)
 800dc88:	781b      	ldrb	r3, [r3, #0]
 800dc8a:	2b01      	cmp	r3, #1
 800dc8c:	d90b      	bls.n	800dca6 <fm_menu_config_date_hour+0x54a>
                            {
                                fm_factory_modify_date(day_enum - 1, month_enum,
 800dc8e:	4b91      	ldr	r3, [pc, #580]	; (800ded4 <fm_menu_config_date_hour+0x778>)
 800dc90:	781b      	ldrb	r3, [r3, #0]
 800dc92:	3b01      	subs	r3, #1
 800dc94:	4a90      	ldr	r2, [pc, #576]	; (800ded8 <fm_menu_config_date_hour+0x77c>)
 800dc96:	7812      	ldrb	r2, [r2, #0]
 800dc98:	4611      	mov	r1, r2
 800dc9a:	4a8d      	ldr	r2, [pc, #564]	; (800ded0 <fm_menu_config_date_hour+0x774>)
 800dc9c:	7812      	ldrb	r2, [r2, #0]
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f7fc fba0 	bl	800a3e4 <fm_factory_modify_date>
 800dca4:	e109      	b.n	800deba <fm_menu_config_date_hour+0x75e>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_29, month_enum,
 800dca6:	4b8c      	ldr	r3, [pc, #560]	; (800ded8 <fm_menu_config_date_hour+0x77c>)
 800dca8:	781b      	ldrb	r3, [r3, #0]
 800dcaa:	4619      	mov	r1, r3
 800dcac:	4b88      	ldr	r3, [pc, #544]	; (800ded0 <fm_menu_config_date_hour+0x774>)
 800dcae:	781b      	ldrb	r3, [r3, #0]
 800dcb0:	461a      	mov	r2, r3
 800dcb2:	201d      	movs	r0, #29
 800dcb4:	f7fc fb96 	bl	800a3e4 <fm_factory_modify_date>
 800dcb8:	e0ff      	b.n	800deba <fm_menu_config_date_hour+0x75e>
                                year_enum);
                            }
                        }
                        else
                        {
                            if(day_enum > DAY_1)
 800dcba:	4b86      	ldr	r3, [pc, #536]	; (800ded4 <fm_menu_config_date_hour+0x778>)
 800dcbc:	781b      	ldrb	r3, [r3, #0]
 800dcbe:	2b01      	cmp	r3, #1
 800dcc0:	d90b      	bls.n	800dcda <fm_menu_config_date_hour+0x57e>
                            {
                                fm_factory_modify_date(day_enum - 1, month_enum,
 800dcc2:	4b84      	ldr	r3, [pc, #528]	; (800ded4 <fm_menu_config_date_hour+0x778>)
 800dcc4:	781b      	ldrb	r3, [r3, #0]
 800dcc6:	3b01      	subs	r3, #1
 800dcc8:	4a83      	ldr	r2, [pc, #524]	; (800ded8 <fm_menu_config_date_hour+0x77c>)
 800dcca:	7812      	ldrb	r2, [r2, #0]
 800dccc:	4611      	mov	r1, r2
 800dcce:	4a80      	ldr	r2, [pc, #512]	; (800ded0 <fm_menu_config_date_hour+0x774>)
 800dcd0:	7812      	ldrb	r2, [r2, #0]
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f7fc fb86 	bl	800a3e4 <fm_factory_modify_date>
 800dcd8:	e0ef      	b.n	800deba <fm_menu_config_date_hour+0x75e>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_28, month_enum,
 800dcda:	4b7f      	ldr	r3, [pc, #508]	; (800ded8 <fm_menu_config_date_hour+0x77c>)
 800dcdc:	781b      	ldrb	r3, [r3, #0]
 800dcde:	4619      	mov	r1, r3
 800dce0:	4b7b      	ldr	r3, [pc, #492]	; (800ded0 <fm_menu_config_date_hour+0x774>)
 800dce2:	781b      	ldrb	r3, [r3, #0]
 800dce4:	461a      	mov	r2, r3
 800dce6:	201c      	movs	r0, #28
 800dce8:	f7fc fb7c 	bl	800a3e4 <fm_factory_modify_date>
 800dcec:	e0e5      	b.n	800deba <fm_menu_config_date_hour+0x75e>
                                year_enum);
                            }
                        }
                    }
                }
                else if(field == MONTH)
 800dcee:	4b7b      	ldr	r3, [pc, #492]	; (800dedc <fm_menu_config_date_hour+0x780>)
 800dcf0:	781b      	ldrb	r3, [r3, #0]
 800dcf2:	2b01      	cmp	r3, #1
 800dcf4:	d156      	bne.n	800dda4 <fm_menu_config_date_hour+0x648>
                {
                    if(month_enum > JANUARY)
 800dcf6:	4b78      	ldr	r3, [pc, #480]	; (800ded8 <fm_menu_config_date_hour+0x77c>)
 800dcf8:	781b      	ldrb	r3, [r3, #0]
 800dcfa:	2b01      	cmp	r3, #1
 800dcfc:	d948      	bls.n	800dd90 <fm_menu_config_date_hour+0x634>
                    {
                        if((month_enum - 1 == APRIL ||
 800dcfe:	4b76      	ldr	r3, [pc, #472]	; (800ded8 <fm_menu_config_date_hour+0x77c>)
 800dd00:	781b      	ldrb	r3, [r3, #0]
 800dd02:	2b05      	cmp	r3, #5
 800dd04:	d00b      	beq.n	800dd1e <fm_menu_config_date_hour+0x5c2>
                        month_enum - 1 == JUNE      ||
 800dd06:	4b74      	ldr	r3, [pc, #464]	; (800ded8 <fm_menu_config_date_hour+0x77c>)
 800dd08:	781b      	ldrb	r3, [r3, #0]
                        if((month_enum - 1 == APRIL ||
 800dd0a:	2b07      	cmp	r3, #7
 800dd0c:	d007      	beq.n	800dd1e <fm_menu_config_date_hour+0x5c2>
                        month_enum - 1 == SEPTEMBER ||
 800dd0e:	4b72      	ldr	r3, [pc, #456]	; (800ded8 <fm_menu_config_date_hour+0x77c>)
 800dd10:	781b      	ldrb	r3, [r3, #0]
                        month_enum - 1 == JUNE      ||
 800dd12:	2b0a      	cmp	r3, #10
 800dd14:	d003      	beq.n	800dd1e <fm_menu_config_date_hour+0x5c2>
                        month_enum - 1 == NOVEMBER) && (day_enum > DAY_30))
 800dd16:	4b70      	ldr	r3, [pc, #448]	; (800ded8 <fm_menu_config_date_hour+0x77c>)
 800dd18:	781b      	ldrb	r3, [r3, #0]
                        month_enum - 1 == SEPTEMBER ||
 800dd1a:	2b0c      	cmp	r3, #12
 800dd1c:	d107      	bne.n	800dd2e <fm_menu_config_date_hour+0x5d2>
                        month_enum - 1 == NOVEMBER) && (day_enum > DAY_30))
 800dd1e:	4b6d      	ldr	r3, [pc, #436]	; (800ded4 <fm_menu_config_date_hour+0x778>)
 800dd20:	781b      	ldrb	r3, [r3, #0]
 800dd22:	2b1e      	cmp	r3, #30
 800dd24:	d903      	bls.n	800dd2e <fm_menu_config_date_hour+0x5d2>
                        {
                            day_enum = DAY_30;
 800dd26:	4b6b      	ldr	r3, [pc, #428]	; (800ded4 <fm_menu_config_date_hour+0x778>)
 800dd28:	221e      	movs	r2, #30
 800dd2a:	701a      	strb	r2, [r3, #0]
 800dd2c:	e024      	b.n	800dd78 <fm_menu_config_date_hour+0x61c>
                        }
                        else if((month_enum - 1 == FEBRUARY) &&
 800dd2e:	4b6a      	ldr	r3, [pc, #424]	; (800ded8 <fm_menu_config_date_hour+0x77c>)
 800dd30:	781b      	ldrb	r3, [r3, #0]
 800dd32:	2b03      	cmp	r3, #3
 800dd34:	d10e      	bne.n	800dd54 <fm_menu_config_date_hour+0x5f8>
                        (year_enum % YEAR_4 == 0) &&
 800dd36:	4b66      	ldr	r3, [pc, #408]	; (800ded0 <fm_menu_config_date_hour+0x774>)
 800dd38:	781b      	ldrb	r3, [r3, #0]
 800dd3a:	f003 0303 	and.w	r3, r3, #3
 800dd3e:	b2db      	uxtb	r3, r3
                        else if((month_enum - 1 == FEBRUARY) &&
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d107      	bne.n	800dd54 <fm_menu_config_date_hour+0x5f8>
                        (day_enum > DAY_29))
 800dd44:	4b63      	ldr	r3, [pc, #396]	; (800ded4 <fm_menu_config_date_hour+0x778>)
 800dd46:	781b      	ldrb	r3, [r3, #0]
                        (year_enum % YEAR_4 == 0) &&
 800dd48:	2b1d      	cmp	r3, #29
 800dd4a:	d903      	bls.n	800dd54 <fm_menu_config_date_hour+0x5f8>
                        {
                            day_enum = DAY_29;
 800dd4c:	4b61      	ldr	r3, [pc, #388]	; (800ded4 <fm_menu_config_date_hour+0x778>)
 800dd4e:	221d      	movs	r2, #29
 800dd50:	701a      	strb	r2, [r3, #0]
 800dd52:	e011      	b.n	800dd78 <fm_menu_config_date_hour+0x61c>
                        }
                        else if((month_enum - 1 == FEBRUARY) &&
 800dd54:	4b60      	ldr	r3, [pc, #384]	; (800ded8 <fm_menu_config_date_hour+0x77c>)
 800dd56:	781b      	ldrb	r3, [r3, #0]
 800dd58:	2b03      	cmp	r3, #3
 800dd5a:	d10d      	bne.n	800dd78 <fm_menu_config_date_hour+0x61c>
                        (year_enum % YEAR_4 != 0) &&
 800dd5c:	4b5c      	ldr	r3, [pc, #368]	; (800ded0 <fm_menu_config_date_hour+0x774>)
 800dd5e:	781b      	ldrb	r3, [r3, #0]
 800dd60:	f003 0303 	and.w	r3, r3, #3
 800dd64:	b2db      	uxtb	r3, r3
                        else if((month_enum - 1 == FEBRUARY) &&
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d006      	beq.n	800dd78 <fm_menu_config_date_hour+0x61c>
                        (day_enum > DAY_28))
 800dd6a:	4b5a      	ldr	r3, [pc, #360]	; (800ded4 <fm_menu_config_date_hour+0x778>)
 800dd6c:	781b      	ldrb	r3, [r3, #0]
                        (year_enum % YEAR_4 != 0) &&
 800dd6e:	2b1c      	cmp	r3, #28
 800dd70:	d902      	bls.n	800dd78 <fm_menu_config_date_hour+0x61c>
                        {
                            day_enum = DAY_28;
 800dd72:	4b58      	ldr	r3, [pc, #352]	; (800ded4 <fm_menu_config_date_hour+0x778>)
 800dd74:	221c      	movs	r2, #28
 800dd76:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum - 1,
 800dd78:	4b56      	ldr	r3, [pc, #344]	; (800ded4 <fm_menu_config_date_hour+0x778>)
 800dd7a:	781b      	ldrb	r3, [r3, #0]
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	4b56      	ldr	r3, [pc, #344]	; (800ded8 <fm_menu_config_date_hour+0x77c>)
 800dd80:	781b      	ldrb	r3, [r3, #0]
 800dd82:	3b01      	subs	r3, #1
 800dd84:	4a52      	ldr	r2, [pc, #328]	; (800ded0 <fm_menu_config_date_hour+0x774>)
 800dd86:	7812      	ldrb	r2, [r2, #0]
 800dd88:	4619      	mov	r1, r3
 800dd8a:	f7fc fb2b 	bl	800a3e4 <fm_factory_modify_date>
 800dd8e:	e094      	b.n	800deba <fm_menu_config_date_hour+0x75e>
                        year_enum);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, DECEMBER, year_enum);
 800dd90:	4b50      	ldr	r3, [pc, #320]	; (800ded4 <fm_menu_config_date_hour+0x778>)
 800dd92:	781b      	ldrb	r3, [r3, #0]
 800dd94:	4618      	mov	r0, r3
 800dd96:	4b4e      	ldr	r3, [pc, #312]	; (800ded0 <fm_menu_config_date_hour+0x774>)
 800dd98:	781b      	ldrb	r3, [r3, #0]
 800dd9a:	461a      	mov	r2, r3
 800dd9c:	210c      	movs	r1, #12
 800dd9e:	f7fc fb21 	bl	800a3e4 <fm_factory_modify_date>
 800dda2:	e08a      	b.n	800deba <fm_menu_config_date_hour+0x75e>
                    }
                }
                else if(field == YEAR)
 800dda4:	4b4d      	ldr	r3, [pc, #308]	; (800dedc <fm_menu_config_date_hour+0x780>)
 800dda6:	781b      	ldrb	r3, [r3, #0]
 800dda8:	2b02      	cmp	r3, #2
 800ddaa:	d12c      	bne.n	800de06 <fm_menu_config_date_hour+0x6aa>
                {
                    if(year_enum > YEAR_0)
 800ddac:	4b48      	ldr	r3, [pc, #288]	; (800ded0 <fm_menu_config_date_hour+0x774>)
 800ddae:	781b      	ldrb	r3, [r3, #0]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d01e      	beq.n	800ddf2 <fm_menu_config_date_hour+0x696>
                    {
                        if(((year_enum - 1) % YEAR_4 != YEAR_0) &&
 800ddb4:	4b46      	ldr	r3, [pc, #280]	; (800ded0 <fm_menu_config_date_hour+0x774>)
 800ddb6:	781b      	ldrb	r3, [r3, #0]
 800ddb8:	3b01      	subs	r3, #1
 800ddba:	f003 0303 	and.w	r3, r3, #3
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d00a      	beq.n	800ddd8 <fm_menu_config_date_hour+0x67c>
                        (month_enum == FEBRUARY) &&
 800ddc2:	4b45      	ldr	r3, [pc, #276]	; (800ded8 <fm_menu_config_date_hour+0x77c>)
 800ddc4:	781b      	ldrb	r3, [r3, #0]
                        if(((year_enum - 1) % YEAR_4 != YEAR_0) &&
 800ddc6:	2b02      	cmp	r3, #2
 800ddc8:	d106      	bne.n	800ddd8 <fm_menu_config_date_hour+0x67c>
                        (day_enum > DAY_28))
 800ddca:	4b42      	ldr	r3, [pc, #264]	; (800ded4 <fm_menu_config_date_hour+0x778>)
 800ddcc:	781b      	ldrb	r3, [r3, #0]
                        (month_enum == FEBRUARY) &&
 800ddce:	2b1c      	cmp	r3, #28
 800ddd0:	d902      	bls.n	800ddd8 <fm_menu_config_date_hour+0x67c>
                        {
                            day_enum = DAY_28;
 800ddd2:	4b40      	ldr	r3, [pc, #256]	; (800ded4 <fm_menu_config_date_hour+0x778>)
 800ddd4:	221c      	movs	r2, #28
 800ddd6:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum,
 800ddd8:	4b3e      	ldr	r3, [pc, #248]	; (800ded4 <fm_menu_config_date_hour+0x778>)
 800ddda:	781b      	ldrb	r3, [r3, #0]
 800dddc:	4618      	mov	r0, r3
 800ddde:	4b3e      	ldr	r3, [pc, #248]	; (800ded8 <fm_menu_config_date_hour+0x77c>)
 800dde0:	781b      	ldrb	r3, [r3, #0]
 800dde2:	4619      	mov	r1, r3
 800dde4:	4b3a      	ldr	r3, [pc, #232]	; (800ded0 <fm_menu_config_date_hour+0x774>)
 800dde6:	781b      	ldrb	r3, [r3, #0]
 800dde8:	3b01      	subs	r3, #1
 800ddea:	461a      	mov	r2, r3
 800ddec:	f7fc fafa 	bl	800a3e4 <fm_factory_modify_date>
 800ddf0:	e063      	b.n	800deba <fm_menu_config_date_hour+0x75e>
                        year_enum - 1);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, month_enum, YEAR_99);
 800ddf2:	4b38      	ldr	r3, [pc, #224]	; (800ded4 <fm_menu_config_date_hour+0x778>)
 800ddf4:	781b      	ldrb	r3, [r3, #0]
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	4b37      	ldr	r3, [pc, #220]	; (800ded8 <fm_menu_config_date_hour+0x77c>)
 800ddfa:	781b      	ldrb	r3, [r3, #0]
 800ddfc:	2263      	movs	r2, #99	; 0x63
 800ddfe:	4619      	mov	r1, r3
 800de00:	f7fc faf0 	bl	800a3e4 <fm_factory_modify_date>
 800de04:	e059      	b.n	800deba <fm_menu_config_date_hour+0x75e>
                    }
                }
                else if(field == HOUR)
 800de06:	4b35      	ldr	r3, [pc, #212]	; (800dedc <fm_menu_config_date_hour+0x780>)
 800de08:	781b      	ldrb	r3, [r3, #0]
 800de0a:	2b03      	cmp	r3, #3
 800de0c:	d119      	bne.n	800de42 <fm_menu_config_date_hour+0x6e6>
                {
                    if(hour_enum > HOUR_0)
 800de0e:	4b34      	ldr	r3, [pc, #208]	; (800dee0 <fm_menu_config_date_hour+0x784>)
 800de10:	781b      	ldrb	r3, [r3, #0]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d00b      	beq.n	800de2e <fm_menu_config_date_hour+0x6d2>
                    {
                        fm_factory_modify_time(hour_enum - 1, minute_enum,
 800de16:	4b32      	ldr	r3, [pc, #200]	; (800dee0 <fm_menu_config_date_hour+0x784>)
 800de18:	781b      	ldrb	r3, [r3, #0]
 800de1a:	3b01      	subs	r3, #1
 800de1c:	4a31      	ldr	r2, [pc, #196]	; (800dee4 <fm_menu_config_date_hour+0x788>)
 800de1e:	7812      	ldrb	r2, [r2, #0]
 800de20:	4611      	mov	r1, r2
 800de22:	4a31      	ldr	r2, [pc, #196]	; (800dee8 <fm_menu_config_date_hour+0x78c>)
 800de24:	7812      	ldrb	r2, [r2, #0]
 800de26:	4618      	mov	r0, r3
 800de28:	f7fc fb08 	bl	800a43c <fm_factory_modify_time>
 800de2c:	e045      	b.n	800deba <fm_menu_config_date_hour+0x75e>
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(HOUR_23, minute_enum,
 800de2e:	4b2d      	ldr	r3, [pc, #180]	; (800dee4 <fm_menu_config_date_hour+0x788>)
 800de30:	781b      	ldrb	r3, [r3, #0]
 800de32:	4619      	mov	r1, r3
 800de34:	4b2c      	ldr	r3, [pc, #176]	; (800dee8 <fm_menu_config_date_hour+0x78c>)
 800de36:	781b      	ldrb	r3, [r3, #0]
 800de38:	461a      	mov	r2, r3
 800de3a:	2017      	movs	r0, #23
 800de3c:	f7fc fafe 	bl	800a43c <fm_factory_modify_time>
 800de40:	e03b      	b.n	800deba <fm_menu_config_date_hour+0x75e>
                        second_enum);
                    }
                }
                else if(field == MINUTE)
 800de42:	4b26      	ldr	r3, [pc, #152]	; (800dedc <fm_menu_config_date_hour+0x780>)
 800de44:	781b      	ldrb	r3, [r3, #0]
 800de46:	2b04      	cmp	r3, #4
 800de48:	d119      	bne.n	800de7e <fm_menu_config_date_hour+0x722>
                {
                    if(minute_enum > MINU_0)
 800de4a:	4b26      	ldr	r3, [pc, #152]	; (800dee4 <fm_menu_config_date_hour+0x788>)
 800de4c:	781b      	ldrb	r3, [r3, #0]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d00b      	beq.n	800de6a <fm_menu_config_date_hour+0x70e>
                    {
                        fm_factory_modify_time(hour_enum, minute_enum - 1,
 800de52:	4b23      	ldr	r3, [pc, #140]	; (800dee0 <fm_menu_config_date_hour+0x784>)
 800de54:	781b      	ldrb	r3, [r3, #0]
 800de56:	4618      	mov	r0, r3
 800de58:	4b22      	ldr	r3, [pc, #136]	; (800dee4 <fm_menu_config_date_hour+0x788>)
 800de5a:	781b      	ldrb	r3, [r3, #0]
 800de5c:	3b01      	subs	r3, #1
 800de5e:	4a22      	ldr	r2, [pc, #136]	; (800dee8 <fm_menu_config_date_hour+0x78c>)
 800de60:	7812      	ldrb	r2, [r2, #0]
 800de62:	4619      	mov	r1, r3
 800de64:	f7fc faea 	bl	800a43c <fm_factory_modify_time>
 800de68:	e027      	b.n	800deba <fm_menu_config_date_hour+0x75e>
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum, MINU_59, second_enum);
 800de6a:	4b1d      	ldr	r3, [pc, #116]	; (800dee0 <fm_menu_config_date_hour+0x784>)
 800de6c:	781b      	ldrb	r3, [r3, #0]
 800de6e:	4618      	mov	r0, r3
 800de70:	4b1d      	ldr	r3, [pc, #116]	; (800dee8 <fm_menu_config_date_hour+0x78c>)
 800de72:	781b      	ldrb	r3, [r3, #0]
 800de74:	461a      	mov	r2, r3
 800de76:	213b      	movs	r1, #59	; 0x3b
 800de78:	f7fc fae0 	bl	800a43c <fm_factory_modify_time>
 800de7c:	e01d      	b.n	800deba <fm_menu_config_date_hour+0x75e>
                    }
                }
                else if(field == SECOND)
 800de7e:	4b17      	ldr	r3, [pc, #92]	; (800dedc <fm_menu_config_date_hour+0x780>)
 800de80:	781b      	ldrb	r3, [r3, #0]
 800de82:	2b05      	cmp	r3, #5
 800de84:	d119      	bne.n	800deba <fm_menu_config_date_hour+0x75e>
                {
                    if(second_enum > SEC_0)
 800de86:	4b18      	ldr	r3, [pc, #96]	; (800dee8 <fm_menu_config_date_hour+0x78c>)
 800de88:	781b      	ldrb	r3, [r3, #0]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d00c      	beq.n	800dea8 <fm_menu_config_date_hour+0x74c>
                    {
                        fm_factory_modify_time(hour_enum, minute_enum,
 800de8e:	4b14      	ldr	r3, [pc, #80]	; (800dee0 <fm_menu_config_date_hour+0x784>)
 800de90:	781b      	ldrb	r3, [r3, #0]
 800de92:	4618      	mov	r0, r3
 800de94:	4b13      	ldr	r3, [pc, #76]	; (800dee4 <fm_menu_config_date_hour+0x788>)
 800de96:	781b      	ldrb	r3, [r3, #0]
 800de98:	4619      	mov	r1, r3
 800de9a:	4b13      	ldr	r3, [pc, #76]	; (800dee8 <fm_menu_config_date_hour+0x78c>)
 800de9c:	781b      	ldrb	r3, [r3, #0]
 800de9e:	3b01      	subs	r3, #1
 800dea0:	461a      	mov	r2, r3
 800dea2:	f7fc facb 	bl	800a43c <fm_factory_modify_time>
 800dea6:	e008      	b.n	800deba <fm_menu_config_date_hour+0x75e>
                        second_enum - 1);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum, minute_enum, SEC_59);
 800dea8:	4b0d      	ldr	r3, [pc, #52]	; (800dee0 <fm_menu_config_date_hour+0x784>)
 800deaa:	781b      	ldrb	r3, [r3, #0]
 800deac:	4618      	mov	r0, r3
 800deae:	4b0d      	ldr	r3, [pc, #52]	; (800dee4 <fm_menu_config_date_hour+0x788>)
 800deb0:	781b      	ldrb	r3, [r3, #0]
 800deb2:	223b      	movs	r2, #59	; 0x3b
 800deb4:	4619      	mov	r1, r3
 800deb6:	f7fc fac1 	bl	800a43c <fm_factory_modify_time>
                    }
                }
                event_now = EVENT_LCD_REFRESH;
 800deba:	2301      	movs	r3, #1
 800debc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800dec0:	f107 0323 	add.w	r3, r7, #35	; 0x23
 800dec4:	2200      	movs	r2, #0
 800dec6:	4619      	mov	r1, r3
 800dec8:	4808      	ldr	r0, [pc, #32]	; (800deec <fm_menu_config_date_hour+0x790>)
 800deca:	f7fb fc91 	bl	80097f0 <_txe_queue_send>
            }
        break;
 800dece:	e062      	b.n	800df96 <fm_menu_config_date_hour+0x83a>
 800ded0:	20001d56 	.word	0x20001d56
 800ded4:	20001d54 	.word	0x20001d54
 800ded8:	20001d55 	.word	0x20001d55
 800dedc:	20001d53 	.word	0x20001d53
 800dee0:	20001d57 	.word	0x20001d57
 800dee4:	20001d58 	.word	0x20001d58
 800dee8:	20001d59 	.word	0x20001d59
 800deec:	20001368 	.word	0x20001368
        case EVENT_KEY_ENTER:
            if(correct_password)
 800def0:	4b58      	ldr	r3, [pc, #352]	; (800e054 <fm_menu_config_date_hour+0x8f8>)
 800def2:	781b      	ldrb	r3, [r3, #0]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d050      	beq.n	800df9a <fm_menu_config_date_hour+0x83e>
            {
                /*
                 * Se cambia qué parámetro se va a modificar según cual estaba
                 * seleccionado para modificarse actualmente.
                 */
                if(field == DAY)
 800def8:	4b57      	ldr	r3, [pc, #348]	; (800e058 <fm_menu_config_date_hour+0x8fc>)
 800defa:	781b      	ldrb	r3, [r3, #0]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d103      	bne.n	800df08 <fm_menu_config_date_hour+0x7ac>
                {
                    field = MONTH;
 800df00:	4b55      	ldr	r3, [pc, #340]	; (800e058 <fm_menu_config_date_hour+0x8fc>)
 800df02:	2201      	movs	r2, #1
 800df04:	701a      	strb	r2, [r3, #0]
 800df06:	e026      	b.n	800df56 <fm_menu_config_date_hour+0x7fa>
                }
                else if(field == MONTH)
 800df08:	4b53      	ldr	r3, [pc, #332]	; (800e058 <fm_menu_config_date_hour+0x8fc>)
 800df0a:	781b      	ldrb	r3, [r3, #0]
 800df0c:	2b01      	cmp	r3, #1
 800df0e:	d103      	bne.n	800df18 <fm_menu_config_date_hour+0x7bc>
                {
                    field = YEAR;
 800df10:	4b51      	ldr	r3, [pc, #324]	; (800e058 <fm_menu_config_date_hour+0x8fc>)
 800df12:	2202      	movs	r2, #2
 800df14:	701a      	strb	r2, [r3, #0]
 800df16:	e01e      	b.n	800df56 <fm_menu_config_date_hour+0x7fa>
                }
                else if(field == YEAR)
 800df18:	4b4f      	ldr	r3, [pc, #316]	; (800e058 <fm_menu_config_date_hour+0x8fc>)
 800df1a:	781b      	ldrb	r3, [r3, #0]
 800df1c:	2b02      	cmp	r3, #2
 800df1e:	d103      	bne.n	800df28 <fm_menu_config_date_hour+0x7cc>
                {
                    field = HOUR;
 800df20:	4b4d      	ldr	r3, [pc, #308]	; (800e058 <fm_menu_config_date_hour+0x8fc>)
 800df22:	2203      	movs	r2, #3
 800df24:	701a      	strb	r2, [r3, #0]
 800df26:	e016      	b.n	800df56 <fm_menu_config_date_hour+0x7fa>
                }
                else if(field == HOUR)
 800df28:	4b4b      	ldr	r3, [pc, #300]	; (800e058 <fm_menu_config_date_hour+0x8fc>)
 800df2a:	781b      	ldrb	r3, [r3, #0]
 800df2c:	2b03      	cmp	r3, #3
 800df2e:	d103      	bne.n	800df38 <fm_menu_config_date_hour+0x7dc>
                {
                    field = MINUTE;
 800df30:	4b49      	ldr	r3, [pc, #292]	; (800e058 <fm_menu_config_date_hour+0x8fc>)
 800df32:	2204      	movs	r2, #4
 800df34:	701a      	strb	r2, [r3, #0]
 800df36:	e00e      	b.n	800df56 <fm_menu_config_date_hour+0x7fa>
                }
                else if(field == MINUTE)
 800df38:	4b47      	ldr	r3, [pc, #284]	; (800e058 <fm_menu_config_date_hour+0x8fc>)
 800df3a:	781b      	ldrb	r3, [r3, #0]
 800df3c:	2b04      	cmp	r3, #4
 800df3e:	d103      	bne.n	800df48 <fm_menu_config_date_hour+0x7ec>
                {
                    field = SECOND;
 800df40:	4b45      	ldr	r3, [pc, #276]	; (800e058 <fm_menu_config_date_hour+0x8fc>)
 800df42:	2205      	movs	r2, #5
 800df44:	701a      	strb	r2, [r3, #0]
 800df46:	e006      	b.n	800df56 <fm_menu_config_date_hour+0x7fa>
                }
                else if(field == SECOND)
 800df48:	4b43      	ldr	r3, [pc, #268]	; (800e058 <fm_menu_config_date_hour+0x8fc>)
 800df4a:	781b      	ldrb	r3, [r3, #0]
 800df4c:	2b05      	cmp	r3, #5
 800df4e:	d102      	bne.n	800df56 <fm_menu_config_date_hour+0x7fa>
                {
                    field = DAY;
 800df50:	4b41      	ldr	r3, [pc, #260]	; (800e058 <fm_menu_config_date_hour+0x8fc>)
 800df52:	2200      	movs	r2, #0
 800df54:	701a      	strb	r2, [r3, #0]
                }
                event_now = EVENT_LCD_REFRESH;
 800df56:	2301      	movs	r3, #1
 800df58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800df5c:	f107 0323 	add.w	r3, r7, #35	; 0x23
 800df60:	2200      	movs	r2, #0
 800df62:	4619      	mov	r1, r3
 800df64:	483d      	ldr	r0, [pc, #244]	; (800e05c <fm_menu_config_date_hour+0x900>)
 800df66:	f7fb fc43 	bl	80097f0 <_txe_queue_send>
            }
        break;
 800df6a:	e016      	b.n	800df9a <fm_menu_config_date_hour+0x83e>
        case EVENT_KEY_ESC:
            new_exit = 1;
 800df6c:	4b3c      	ldr	r3, [pc, #240]	; (800e060 <fm_menu_config_date_hour+0x904>)
 800df6e:	2201      	movs	r2, #1
 800df70:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_init;
 800df72:	4b3c      	ldr	r3, [pc, #240]	; (800e064 <fm_menu_config_date_hour+0x908>)
 800df74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            event_now = EVENT_LCD_REFRESH;
 800df78:	2301      	movs	r3, #1
 800df7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800df7e:	f107 0323 	add.w	r3, r7, #35	; 0x23
 800df82:	2200      	movs	r2, #0
 800df84:	4619      	mov	r1, r3
 800df86:	4835      	ldr	r0, [pc, #212]	; (800e05c <fm_menu_config_date_hour+0x900>)
 800df88:	f7fb fc32 	bl	80097f0 <_txe_queue_send>
        break;
 800df8c:	e006      	b.n	800df9c <fm_menu_config_date_hour+0x840>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 800df8e:	bf00      	nop
 800df90:	e004      	b.n	800df9c <fm_menu_config_date_hour+0x840>
        break;
 800df92:	bf00      	nop
 800df94:	e002      	b.n	800df9c <fm_menu_config_date_hour+0x840>
        break;
 800df96:	bf00      	nop
 800df98:	e000      	b.n	800df9c <fm_menu_config_date_hour+0x840>
        break;
 800df9a:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar fecha y hora\n";
 800df9c:	4b32      	ldr	r3, [pc, #200]	; (800e068 <fm_menu_config_date_hour+0x90c>)
 800df9e:	f107 0408 	add.w	r4, r7, #8
 800dfa2:	461d      	mov	r5, r3
 800dfa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dfa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dfa8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dfac:	c403      	stmia	r4!, {r0, r1}
 800dfae:	7022      	strb	r2, [r4, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 800dfb0:	f107 0308 	add.w	r3, r7, #8
 800dfb4:	2119      	movs	r1, #25
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	f7fc f856 	bl	800a068 <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 800dfbc:	4b28      	ldr	r3, [pc, #160]	; (800e060 <fm_menu_config_date_hour+0x904>)
 800dfbe:	781b      	ldrb	r3, [r3, #0]
 800dfc0:	2b01      	cmp	r3, #1
 800dfc2:	d140      	bne.n	800e046 <fm_menu_config_date_hour+0x8ea>
    {
        if(correct_password)
 800dfc4:	4b23      	ldr	r3, [pc, #140]	; (800e054 <fm_menu_config_date_hour+0x8f8>)
 800dfc6:	781b      	ldrb	r3, [r3, #0]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d036      	beq.n	800e03a <fm_menu_config_date_hour+0x8de>
             * encuentren corrompidos y se lea cualquier cosa. Para mas info de
             * esto ver el link siguiente:
             *
             * http://www.efton.sk/STM32/gotcha/g113.html
             */
            date_final.Date = day_enum;
 800dfcc:	4b27      	ldr	r3, [pc, #156]	; (800e06c <fm_menu_config_date_hour+0x910>)
 800dfce:	781b      	ldrb	r3, [r3, #0]
 800dfd0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            date_final.Month = month_enum;
 800dfd4:	4b26      	ldr	r3, [pc, #152]	; (800e070 <fm_menu_config_date_hour+0x914>)
 800dfd6:	781b      	ldrb	r3, [r3, #0]
 800dfd8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            date_final.Year = year_enum;
 800dfdc:	4b25      	ldr	r3, [pc, #148]	; (800e074 <fm_menu_config_date_hour+0x918>)
 800dfde:	781b      	ldrb	r3, [r3, #0]
 800dfe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            date_final.WeekDay = RTC_WEEKDAY_FRIDAY;
 800dfe4:	2305      	movs	r3, #5
 800dfe6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

            HAL_RTC_SetDate(&hrtc, &date_final, RTC_FORMAT_BIN);
 800dfea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dfee:	2200      	movs	r2, #0
 800dff0:	4619      	mov	r1, r3
 800dff2:	4821      	ldr	r0, [pc, #132]	; (800e078 <fm_menu_config_date_hour+0x91c>)
 800dff4:	f7f6 fd8c 	bl	8004b10 <HAL_RTC_SetDate>

            /*
             * Idem que lo de la fecha escrito arriba, pero para la hora, y en
             * general siempre que se use la HAL completando estructuras.
             */
            time_final.Hours = hour_enum;
 800dff8:	4b20      	ldr	r3, [pc, #128]	; (800e07c <fm_menu_config_date_hour+0x920>)
 800dffa:	781b      	ldrb	r3, [r3, #0]
 800dffc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            time_final.Minutes = minute_enum;
 800e000:	4b1f      	ldr	r3, [pc, #124]	; (800e080 <fm_menu_config_date_hour+0x924>)
 800e002:	781b      	ldrb	r3, [r3, #0]
 800e004:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            time_final.Seconds = second_enum;
 800e008:	4b1e      	ldr	r3, [pc, #120]	; (800e084 <fm_menu_config_date_hour+0x928>)
 800e00a:	781b      	ldrb	r3, [r3, #0]
 800e00c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            time_final.SecondFraction = 0;
 800e010:	2300      	movs	r3, #0
 800e012:	633b      	str	r3, [r7, #48]	; 0x30
            time_final.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800e014:	2300      	movs	r3, #0
 800e016:	637b      	str	r3, [r7, #52]	; 0x34
            time_final.StoreOperation = RTC_STOREOPERATION_RESET;
 800e018:	2300      	movs	r3, #0
 800e01a:	63bb      	str	r3, [r7, #56]	; 0x38
            time_final.SubSeconds = 0;
 800e01c:	2300      	movs	r3, #0
 800e01e:	62fb      	str	r3, [r7, #44]	; 0x2c
            time_final.TimeFormat = RTC_HOURFORMAT12_AM;
 800e020:	2300      	movs	r3, #0
 800e022:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            HAL_RTC_SetTime(&hrtc, &time_final, RTC_FORMAT_BIN);
 800e026:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e02a:	2200      	movs	r2, #0
 800e02c:	4619      	mov	r1, r3
 800e02e:	4812      	ldr	r0, [pc, #72]	; (800e078 <fm_menu_config_date_hour+0x91c>)
 800e030:	f7f6 fc75 	bl	800491e <HAL_RTC_SetTime>

            correct_password = 0;
 800e034:	4b07      	ldr	r3, [pc, #28]	; (800e054 <fm_menu_config_date_hour+0x8f8>)
 800e036:	2200      	movs	r2, #0
 800e038:	701a      	strb	r2, [r3, #0]
        }

        new_entry = 1;
 800e03a:	4b13      	ldr	r3, [pc, #76]	; (800e088 <fm_menu_config_date_hour+0x92c>)
 800e03c:	2201      	movs	r2, #1
 800e03e:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800e040:	4b07      	ldr	r3, [pc, #28]	; (800e060 <fm_menu_config_date_hour+0x904>)
 800e042:	2200      	movs	r2, #0
 800e044:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800e046:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
}
 800e04a:	4618      	mov	r0, r3
 800e04c:	37d0      	adds	r7, #208	; 0xd0
 800e04e:	46bd      	mov	sp, r7
 800e050:	bdb0      	pop	{r4, r5, r7, pc}
 800e052:	bf00      	nop
 800e054:	20001d52 	.word	0x20001d52
 800e058:	20001d53 	.word	0x20001d53
 800e05c:	20001368 	.word	0x20001368
 800e060:	20001d5a 	.word	0x20001d5a
 800e064:	0800f365 	.word	0x0800f365
 800e068:	08010558 	.word	0x08010558
 800e06c:	20001d54 	.word	0x20001d54
 800e070:	20001d55 	.word	0x20001d55
 800e074:	20001d56 	.word	0x20001d56
 800e078:	20001464 	.word	0x20001464
 800e07c:	20001d57 	.word	0x20001d57
 800e080:	20001d58 	.word	0x20001d58
 800e084:	20001d59 	.word	0x20001d59
 800e088:	20000141 	.word	0x20000141

0800e08c <fm_menu_config_k_lin_1>:

    return (ret_menu);
}

ptr_ret_menu_t fm_menu_config_k_lin_1(fm_event_t event_id)
{
 800e08c:	b5b0      	push	{r4, r5, r7, lr}
 800e08e:	b08c      	sub	sp, #48	; 0x30
 800e090:	af00      	add	r7, sp, #0
 800e092:	4603      	mov	r3, r0
 800e094:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_1;
 800e096:	4b4f      	ldr	r3, [pc, #316]	; (800e1d4 <fm_menu_config_k_lin_1+0x148>)
 800e098:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 800e09a:	4b4f      	ldr	r3, [pc, #316]	; (800e1d8 <fm_menu_config_k_lin_1+0x14c>)
 800e09c:	781b      	ldrb	r3, [r3, #0]
 800e09e:	2b01      	cmp	r3, #1
 800e0a0:	d104      	bne.n	800e0ac <fm_menu_config_k_lin_1+0x20>
    {
        fm_lcd_clear();
 800e0a2:	f7fc fe62 	bl	800ad6a <fm_lcd_clear>
        new_entry = 0;
 800e0a6:	4b4c      	ldr	r3, [pc, #304]	; (800e1d8 <fm_menu_config_k_lin_1+0x14c>)
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_1, event_id, digit_lin_modify);
 800e0ac:	4b4b      	ldr	r3, [pc, #300]	; (800e1dc <fm_menu_config_k_lin_1+0x150>)
 800e0ae:	781a      	ldrb	r2, [r3, #0]
 800e0b0:	79fb      	ldrb	r3, [r7, #7]
 800e0b2:	4619      	mov	r1, r3
 800e0b4:	2001      	movs	r0, #1
 800e0b6:	f7fd f887 	bl	800b1c8 <fm_lcd_k_lin>
    fm_lcd_refresh();
 800e0ba:	f7fd f974 	bl	800b3a6 <fm_lcd_refresh>

    switch (event_id)
 800e0be:	79fb      	ldrb	r3, [r7, #7]
 800e0c0:	3b01      	subs	r3, #1
 800e0c2:	2b04      	cmp	r3, #4
 800e0c4:	d863      	bhi.n	800e18e <fm_menu_config_k_lin_1+0x102>
 800e0c6:	a201      	add	r2, pc, #4	; (adr r2, 800e0cc <fm_menu_config_k_lin_1+0x40>)
 800e0c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0cc:	0800e18f 	.word	0x0800e18f
 800e0d0:	0800e0e1 	.word	0x0800e0e1
 800e0d4:	0800e10b 	.word	0x0800e10b
 800e0d8:	0800e135 	.word	0x0800e135
 800e0dc:	0800e16f 	.word	0x0800e16f
    {
        case EVENT_KEY_UP:
            if (correct_password)
 800e0e0:	4b3f      	ldr	r3, [pc, #252]	; (800e1e0 <fm_menu_config_k_lin_1+0x154>)
 800e0e2:	781b      	ldrb	r3, [r3, #0]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d005      	beq.n	800e0f4 <fm_menu_config_k_lin_1+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_1);
 800e0e8:	4b3c      	ldr	r3, [pc, #240]	; (800e1dc <fm_menu_config_k_lin_1+0x150>)
 800e0ea:	781b      	ldrb	r3, [r3, #0]
 800e0ec:	2101      	movs	r1, #1
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	f7fc fa4c 	bl	800a58c <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 800e0f4:	2301      	movs	r3, #1
 800e0f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e0fa:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e0fe:	2200      	movs	r2, #0
 800e100:	4619      	mov	r1, r3
 800e102:	4838      	ldr	r0, [pc, #224]	; (800e1e4 <fm_menu_config_k_lin_1+0x158>)
 800e104:	f7fb fb74 	bl	80097f0 <_txe_queue_send>
        break;
 800e108:	e042      	b.n	800e190 <fm_menu_config_k_lin_1+0x104>
        case EVENT_KEY_DOWN:
            if (correct_password)
 800e10a:	4b35      	ldr	r3, [pc, #212]	; (800e1e0 <fm_menu_config_k_lin_1+0x154>)
 800e10c:	781b      	ldrb	r3, [r3, #0]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d005      	beq.n	800e11e <fm_menu_config_k_lin_1+0x92>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_1);
 800e112:	4b32      	ldr	r3, [pc, #200]	; (800e1dc <fm_menu_config_k_lin_1+0x150>)
 800e114:	781b      	ldrb	r3, [r3, #0]
 800e116:	2101      	movs	r1, #1
 800e118:	4618      	mov	r0, r3
 800e11a:	f7fc fb23 	bl	800a764 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 800e11e:	2301      	movs	r3, #1
 800e120:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e124:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e128:	2200      	movs	r2, #0
 800e12a:	4619      	mov	r1, r3
 800e12c:	482d      	ldr	r0, [pc, #180]	; (800e1e4 <fm_menu_config_k_lin_1+0x158>)
 800e12e:	f7fb fb5f 	bl	80097f0 <_txe_queue_send>
        break;
 800e132:	e02d      	b.n	800e190 <fm_menu_config_k_lin_1+0x104>
        case EVENT_KEY_ENTER:
            if (correct_password)
 800e134:	4b2a      	ldr	r3, [pc, #168]	; (800e1e0 <fm_menu_config_k_lin_1+0x154>)
 800e136:	781b      	ldrb	r3, [r3, #0]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d00d      	beq.n	800e158 <fm_menu_config_k_lin_1+0xcc>
            {
                if(digit_lin_modify < DIG_LIN_11)
 800e13c:	4b27      	ldr	r3, [pc, #156]	; (800e1dc <fm_menu_config_k_lin_1+0x150>)
 800e13e:	781b      	ldrb	r3, [r3, #0]
 800e140:	2b0a      	cmp	r3, #10
 800e142:	d806      	bhi.n	800e152 <fm_menu_config_k_lin_1+0xc6>
                {
                    digit_lin_modify++;
 800e144:	4b25      	ldr	r3, [pc, #148]	; (800e1dc <fm_menu_config_k_lin_1+0x150>)
 800e146:	781b      	ldrb	r3, [r3, #0]
 800e148:	3301      	adds	r3, #1
 800e14a:	b2da      	uxtb	r2, r3
 800e14c:	4b23      	ldr	r3, [pc, #140]	; (800e1dc <fm_menu_config_k_lin_1+0x150>)
 800e14e:	701a      	strb	r2, [r3, #0]
 800e150:	e002      	b.n	800e158 <fm_menu_config_k_lin_1+0xcc>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 800e152:	4b22      	ldr	r3, [pc, #136]	; (800e1dc <fm_menu_config_k_lin_1+0x150>)
 800e154:	2200      	movs	r2, #0
 800e156:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 800e158:	2301      	movs	r3, #1
 800e15a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e15e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e162:	2200      	movs	r2, #0
 800e164:	4619      	mov	r1, r3
 800e166:	481f      	ldr	r0, [pc, #124]	; (800e1e4 <fm_menu_config_k_lin_1+0x158>)
 800e168:	f7fb fb42 	bl	80097f0 <_txe_queue_send>
        break;
 800e16c:	e010      	b.n	800e190 <fm_menu_config_k_lin_1+0x104>
        case EVENT_KEY_ESC:
            new_exit = 1;
 800e16e:	4b1e      	ldr	r3, [pc, #120]	; (800e1e8 <fm_menu_config_k_lin_1+0x15c>)
 800e170:	2201      	movs	r2, #1
 800e172:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_2;
 800e174:	4b1d      	ldr	r3, [pc, #116]	; (800e1ec <fm_menu_config_k_lin_1+0x160>)
 800e176:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 800e178:	2301      	movs	r3, #1
 800e17a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e17e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e182:	2200      	movs	r2, #0
 800e184:	4619      	mov	r1, r3
 800e186:	4817      	ldr	r0, [pc, #92]	; (800e1e4 <fm_menu_config_k_lin_1+0x158>)
 800e188:	f7fb fb32 	bl	80097f0 <_txe_queue_send>
        break;
 800e18c:	e000      	b.n	800e190 <fm_menu_config_k_lin_1+0x104>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 800e18e:	bf00      	nop
    }

    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar parametro K_lin_1\n";
 800e190:	4b17      	ldr	r3, [pc, #92]	; (800e1f0 <fm_menu_config_k_lin_1+0x164>)
 800e192:	f107 040c 	add.w	r4, r7, #12
 800e196:	461d      	mov	r5, r3
 800e198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e19a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e19c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800e1a0:	c407      	stmia	r4!, {r0, r1, r2}
 800e1a2:	8023      	strh	r3, [r4, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 800e1a4:	f107 030c 	add.w	r3, r7, #12
 800e1a8:	211e      	movs	r1, #30
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	f7fb ff5c 	bl	800a068 <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 800e1b0:	4b0d      	ldr	r3, [pc, #52]	; (800e1e8 <fm_menu_config_k_lin_1+0x15c>)
 800e1b2:	781b      	ldrb	r3, [r3, #0]
 800e1b4:	2b01      	cmp	r3, #1
 800e1b6:	d108      	bne.n	800e1ca <fm_menu_config_k_lin_1+0x13e>
    {
        digit_lin_modify = DIG_LIN_0;
 800e1b8:	4b08      	ldr	r3, [pc, #32]	; (800e1dc <fm_menu_config_k_lin_1+0x150>)
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 800e1be:	4b06      	ldr	r3, [pc, #24]	; (800e1d8 <fm_menu_config_k_lin_1+0x14c>)
 800e1c0:	2201      	movs	r2, #1
 800e1c2:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800e1c4:	4b08      	ldr	r3, [pc, #32]	; (800e1e8 <fm_menu_config_k_lin_1+0x15c>)
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800e1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3730      	adds	r7, #48	; 0x30
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bdb0      	pop	{r4, r5, r7, pc}
 800e1d4:	0800e08d 	.word	0x0800e08d
 800e1d8:	20000142 	.word	0x20000142
 800e1dc:	20001d5b 	.word	0x20001d5b
 800e1e0:	20001d52 	.word	0x20001d52
 800e1e4:	20001368 	.word	0x20001368
 800e1e8:	20001d5c 	.word	0x20001d5c
 800e1ec:	0800e1f5 	.word	0x0800e1f5
 800e1f0:	08010594 	.word	0x08010594

0800e1f4 <fm_menu_config_k_lin_2>:

ptr_ret_menu_t fm_menu_config_k_lin_2(fm_event_t event_id)
{
 800e1f4:	b5b0      	push	{r4, r5, r7, lr}
 800e1f6:	b08c      	sub	sp, #48	; 0x30
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	4603      	mov	r3, r0
 800e1fc:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_2;
 800e1fe:	4b4f      	ldr	r3, [pc, #316]	; (800e33c <fm_menu_config_k_lin_2+0x148>)
 800e200:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 800e202:	4b4f      	ldr	r3, [pc, #316]	; (800e340 <fm_menu_config_k_lin_2+0x14c>)
 800e204:	781b      	ldrb	r3, [r3, #0]
 800e206:	2b01      	cmp	r3, #1
 800e208:	d104      	bne.n	800e214 <fm_menu_config_k_lin_2+0x20>
    {
        fm_lcd_clear();
 800e20a:	f7fc fdae 	bl	800ad6a <fm_lcd_clear>
        new_entry = 0;
 800e20e:	4b4c      	ldr	r3, [pc, #304]	; (800e340 <fm_menu_config_k_lin_2+0x14c>)
 800e210:	2200      	movs	r2, #0
 800e212:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_2, event_id, digit_lin_modify);
 800e214:	4b4b      	ldr	r3, [pc, #300]	; (800e344 <fm_menu_config_k_lin_2+0x150>)
 800e216:	781a      	ldrb	r2, [r3, #0]
 800e218:	79fb      	ldrb	r3, [r7, #7]
 800e21a:	4619      	mov	r1, r3
 800e21c:	2002      	movs	r0, #2
 800e21e:	f7fc ffd3 	bl	800b1c8 <fm_lcd_k_lin>
    fm_lcd_refresh();
 800e222:	f7fd f8c0 	bl	800b3a6 <fm_lcd_refresh>

    switch (event_id)
 800e226:	79fb      	ldrb	r3, [r7, #7]
 800e228:	3b01      	subs	r3, #1
 800e22a:	2b04      	cmp	r3, #4
 800e22c:	d863      	bhi.n	800e2f6 <fm_menu_config_k_lin_2+0x102>
 800e22e:	a201      	add	r2, pc, #4	; (adr r2, 800e234 <fm_menu_config_k_lin_2+0x40>)
 800e230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e234:	0800e2f7 	.word	0x0800e2f7
 800e238:	0800e249 	.word	0x0800e249
 800e23c:	0800e273 	.word	0x0800e273
 800e240:	0800e29d 	.word	0x0800e29d
 800e244:	0800e2d7 	.word	0x0800e2d7
    {
        case EVENT_KEY_UP:
            if (correct_password)
 800e248:	4b3f      	ldr	r3, [pc, #252]	; (800e348 <fm_menu_config_k_lin_2+0x154>)
 800e24a:	781b      	ldrb	r3, [r3, #0]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d005      	beq.n	800e25c <fm_menu_config_k_lin_2+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_2);
 800e250:	4b3c      	ldr	r3, [pc, #240]	; (800e344 <fm_menu_config_k_lin_2+0x150>)
 800e252:	781b      	ldrb	r3, [r3, #0]
 800e254:	2102      	movs	r1, #2
 800e256:	4618      	mov	r0, r3
 800e258:	f7fc f998 	bl	800a58c <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 800e25c:	2301      	movs	r3, #1
 800e25e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e262:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e266:	2200      	movs	r2, #0
 800e268:	4619      	mov	r1, r3
 800e26a:	4838      	ldr	r0, [pc, #224]	; (800e34c <fm_menu_config_k_lin_2+0x158>)
 800e26c:	f7fb fac0 	bl	80097f0 <_txe_queue_send>
        break;
 800e270:	e042      	b.n	800e2f8 <fm_menu_config_k_lin_2+0x104>
        case EVENT_KEY_DOWN:
            if (correct_password)
 800e272:	4b35      	ldr	r3, [pc, #212]	; (800e348 <fm_menu_config_k_lin_2+0x154>)
 800e274:	781b      	ldrb	r3, [r3, #0]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d005      	beq.n	800e286 <fm_menu_config_k_lin_2+0x92>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_2);
 800e27a:	4b32      	ldr	r3, [pc, #200]	; (800e344 <fm_menu_config_k_lin_2+0x150>)
 800e27c:	781b      	ldrb	r3, [r3, #0]
 800e27e:	2102      	movs	r1, #2
 800e280:	4618      	mov	r0, r3
 800e282:	f7fc fa6f 	bl	800a764 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 800e286:	2301      	movs	r3, #1
 800e288:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e28c:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e290:	2200      	movs	r2, #0
 800e292:	4619      	mov	r1, r3
 800e294:	482d      	ldr	r0, [pc, #180]	; (800e34c <fm_menu_config_k_lin_2+0x158>)
 800e296:	f7fb faab 	bl	80097f0 <_txe_queue_send>
        break;
 800e29a:	e02d      	b.n	800e2f8 <fm_menu_config_k_lin_2+0x104>
        case EVENT_KEY_ENTER:
            if (correct_password)
 800e29c:	4b2a      	ldr	r3, [pc, #168]	; (800e348 <fm_menu_config_k_lin_2+0x154>)
 800e29e:	781b      	ldrb	r3, [r3, #0]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d00d      	beq.n	800e2c0 <fm_menu_config_k_lin_2+0xcc>
            {
                if(digit_lin_modify < DIG_LIN_11)
 800e2a4:	4b27      	ldr	r3, [pc, #156]	; (800e344 <fm_menu_config_k_lin_2+0x150>)
 800e2a6:	781b      	ldrb	r3, [r3, #0]
 800e2a8:	2b0a      	cmp	r3, #10
 800e2aa:	d806      	bhi.n	800e2ba <fm_menu_config_k_lin_2+0xc6>
                {
                    digit_lin_modify++;
 800e2ac:	4b25      	ldr	r3, [pc, #148]	; (800e344 <fm_menu_config_k_lin_2+0x150>)
 800e2ae:	781b      	ldrb	r3, [r3, #0]
 800e2b0:	3301      	adds	r3, #1
 800e2b2:	b2da      	uxtb	r2, r3
 800e2b4:	4b23      	ldr	r3, [pc, #140]	; (800e344 <fm_menu_config_k_lin_2+0x150>)
 800e2b6:	701a      	strb	r2, [r3, #0]
 800e2b8:	e002      	b.n	800e2c0 <fm_menu_config_k_lin_2+0xcc>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 800e2ba:	4b22      	ldr	r3, [pc, #136]	; (800e344 <fm_menu_config_k_lin_2+0x150>)
 800e2bc:	2200      	movs	r2, #0
 800e2be:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 800e2c0:	2301      	movs	r3, #1
 800e2c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e2c6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	4619      	mov	r1, r3
 800e2ce:	481f      	ldr	r0, [pc, #124]	; (800e34c <fm_menu_config_k_lin_2+0x158>)
 800e2d0:	f7fb fa8e 	bl	80097f0 <_txe_queue_send>
        break;
 800e2d4:	e010      	b.n	800e2f8 <fm_menu_config_k_lin_2+0x104>
        case EVENT_KEY_ESC:
            new_exit = 1;
 800e2d6:	4b1e      	ldr	r3, [pc, #120]	; (800e350 <fm_menu_config_k_lin_2+0x15c>)
 800e2d8:	2201      	movs	r2, #1
 800e2da:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_3;
 800e2dc:	4b1d      	ldr	r3, [pc, #116]	; (800e354 <fm_menu_config_k_lin_2+0x160>)
 800e2de:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e2e6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	4619      	mov	r1, r3
 800e2ee:	4817      	ldr	r0, [pc, #92]	; (800e34c <fm_menu_config_k_lin_2+0x158>)
 800e2f0:	f7fb fa7e 	bl	80097f0 <_txe_queue_send>
        break;
 800e2f4:	e000      	b.n	800e2f8 <fm_menu_config_k_lin_2+0x104>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 800e2f6:	bf00      	nop
    }

    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar parametro K_lin_2\n";
 800e2f8:	4b17      	ldr	r3, [pc, #92]	; (800e358 <fm_menu_config_k_lin_2+0x164>)
 800e2fa:	f107 040c 	add.w	r4, r7, #12
 800e2fe:	461d      	mov	r5, r3
 800e300:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e304:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800e308:	c407      	stmia	r4!, {r0, r1, r2}
 800e30a:	8023      	strh	r3, [r4, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 800e30c:	f107 030c 	add.w	r3, r7, #12
 800e310:	211e      	movs	r1, #30
 800e312:	4618      	mov	r0, r3
 800e314:	f7fb fea8 	bl	800a068 <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 800e318:	4b0d      	ldr	r3, [pc, #52]	; (800e350 <fm_menu_config_k_lin_2+0x15c>)
 800e31a:	781b      	ldrb	r3, [r3, #0]
 800e31c:	2b01      	cmp	r3, #1
 800e31e:	d108      	bne.n	800e332 <fm_menu_config_k_lin_2+0x13e>
    {
        digit_lin_modify = DIG_LIN_0;
 800e320:	4b08      	ldr	r3, [pc, #32]	; (800e344 <fm_menu_config_k_lin_2+0x150>)
 800e322:	2200      	movs	r2, #0
 800e324:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 800e326:	4b06      	ldr	r3, [pc, #24]	; (800e340 <fm_menu_config_k_lin_2+0x14c>)
 800e328:	2201      	movs	r2, #1
 800e32a:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800e32c:	4b08      	ldr	r3, [pc, #32]	; (800e350 <fm_menu_config_k_lin_2+0x15c>)
 800e32e:	2200      	movs	r2, #0
 800e330:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800e332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e334:	4618      	mov	r0, r3
 800e336:	3730      	adds	r7, #48	; 0x30
 800e338:	46bd      	mov	sp, r7
 800e33a:	bdb0      	pop	{r4, r5, r7, pc}
 800e33c:	0800e1f5 	.word	0x0800e1f5
 800e340:	20000143 	.word	0x20000143
 800e344:	20001d5d 	.word	0x20001d5d
 800e348:	20001d52 	.word	0x20001d52
 800e34c:	20001368 	.word	0x20001368
 800e350:	20001d5e 	.word	0x20001d5e
 800e354:	0800e35d 	.word	0x0800e35d
 800e358:	080105b4 	.word	0x080105b4

0800e35c <fm_menu_config_k_lin_3>:

ptr_ret_menu_t fm_menu_config_k_lin_3(fm_event_t event_id)
{
 800e35c:	b5b0      	push	{r4, r5, r7, lr}
 800e35e:	b08c      	sub	sp, #48	; 0x30
 800e360:	af00      	add	r7, sp, #0
 800e362:	4603      	mov	r3, r0
 800e364:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_3;
 800e366:	4b4f      	ldr	r3, [pc, #316]	; (800e4a4 <fm_menu_config_k_lin_3+0x148>)
 800e368:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 800e36a:	4b4f      	ldr	r3, [pc, #316]	; (800e4a8 <fm_menu_config_k_lin_3+0x14c>)
 800e36c:	781b      	ldrb	r3, [r3, #0]
 800e36e:	2b01      	cmp	r3, #1
 800e370:	d104      	bne.n	800e37c <fm_menu_config_k_lin_3+0x20>
    {
        fm_lcd_clear();
 800e372:	f7fc fcfa 	bl	800ad6a <fm_lcd_clear>
        new_entry = 0;
 800e376:	4b4c      	ldr	r3, [pc, #304]	; (800e4a8 <fm_menu_config_k_lin_3+0x14c>)
 800e378:	2200      	movs	r2, #0
 800e37a:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_3, event_id, digit_lin_modify);
 800e37c:	4b4b      	ldr	r3, [pc, #300]	; (800e4ac <fm_menu_config_k_lin_3+0x150>)
 800e37e:	781a      	ldrb	r2, [r3, #0]
 800e380:	79fb      	ldrb	r3, [r7, #7]
 800e382:	4619      	mov	r1, r3
 800e384:	2003      	movs	r0, #3
 800e386:	f7fc ff1f 	bl	800b1c8 <fm_lcd_k_lin>
    fm_lcd_refresh();
 800e38a:	f7fd f80c 	bl	800b3a6 <fm_lcd_refresh>

    switch (event_id)
 800e38e:	79fb      	ldrb	r3, [r7, #7]
 800e390:	3b01      	subs	r3, #1
 800e392:	2b04      	cmp	r3, #4
 800e394:	d863      	bhi.n	800e45e <fm_menu_config_k_lin_3+0x102>
 800e396:	a201      	add	r2, pc, #4	; (adr r2, 800e39c <fm_menu_config_k_lin_3+0x40>)
 800e398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e39c:	0800e45f 	.word	0x0800e45f
 800e3a0:	0800e3b1 	.word	0x0800e3b1
 800e3a4:	0800e3db 	.word	0x0800e3db
 800e3a8:	0800e405 	.word	0x0800e405
 800e3ac:	0800e43f 	.word	0x0800e43f
    {
        case EVENT_KEY_UP:
            if (correct_password)
 800e3b0:	4b3f      	ldr	r3, [pc, #252]	; (800e4b0 <fm_menu_config_k_lin_3+0x154>)
 800e3b2:	781b      	ldrb	r3, [r3, #0]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d005      	beq.n	800e3c4 <fm_menu_config_k_lin_3+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_3);
 800e3b8:	4b3c      	ldr	r3, [pc, #240]	; (800e4ac <fm_menu_config_k_lin_3+0x150>)
 800e3ba:	781b      	ldrb	r3, [r3, #0]
 800e3bc:	2103      	movs	r1, #3
 800e3be:	4618      	mov	r0, r3
 800e3c0:	f7fc f8e4 	bl	800a58c <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 800e3c4:	2301      	movs	r3, #1
 800e3c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e3ca:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	4619      	mov	r1, r3
 800e3d2:	4838      	ldr	r0, [pc, #224]	; (800e4b4 <fm_menu_config_k_lin_3+0x158>)
 800e3d4:	f7fb fa0c 	bl	80097f0 <_txe_queue_send>
        break;
 800e3d8:	e042      	b.n	800e460 <fm_menu_config_k_lin_3+0x104>
        case EVENT_KEY_DOWN:
            if (correct_password)
 800e3da:	4b35      	ldr	r3, [pc, #212]	; (800e4b0 <fm_menu_config_k_lin_3+0x154>)
 800e3dc:	781b      	ldrb	r3, [r3, #0]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d005      	beq.n	800e3ee <fm_menu_config_k_lin_3+0x92>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_3);
 800e3e2:	4b32      	ldr	r3, [pc, #200]	; (800e4ac <fm_menu_config_k_lin_3+0x150>)
 800e3e4:	781b      	ldrb	r3, [r3, #0]
 800e3e6:	2103      	movs	r1, #3
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	f7fc f9bb 	bl	800a764 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e3f4:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	4619      	mov	r1, r3
 800e3fc:	482d      	ldr	r0, [pc, #180]	; (800e4b4 <fm_menu_config_k_lin_3+0x158>)
 800e3fe:	f7fb f9f7 	bl	80097f0 <_txe_queue_send>
        break;
 800e402:	e02d      	b.n	800e460 <fm_menu_config_k_lin_3+0x104>
        case EVENT_KEY_ENTER:
            if (correct_password)
 800e404:	4b2a      	ldr	r3, [pc, #168]	; (800e4b0 <fm_menu_config_k_lin_3+0x154>)
 800e406:	781b      	ldrb	r3, [r3, #0]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d00d      	beq.n	800e428 <fm_menu_config_k_lin_3+0xcc>
            {
                if(digit_lin_modify < DIG_LIN_11)
 800e40c:	4b27      	ldr	r3, [pc, #156]	; (800e4ac <fm_menu_config_k_lin_3+0x150>)
 800e40e:	781b      	ldrb	r3, [r3, #0]
 800e410:	2b0a      	cmp	r3, #10
 800e412:	d806      	bhi.n	800e422 <fm_menu_config_k_lin_3+0xc6>
                {
                    digit_lin_modify++;
 800e414:	4b25      	ldr	r3, [pc, #148]	; (800e4ac <fm_menu_config_k_lin_3+0x150>)
 800e416:	781b      	ldrb	r3, [r3, #0]
 800e418:	3301      	adds	r3, #1
 800e41a:	b2da      	uxtb	r2, r3
 800e41c:	4b23      	ldr	r3, [pc, #140]	; (800e4ac <fm_menu_config_k_lin_3+0x150>)
 800e41e:	701a      	strb	r2, [r3, #0]
 800e420:	e002      	b.n	800e428 <fm_menu_config_k_lin_3+0xcc>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 800e422:	4b22      	ldr	r3, [pc, #136]	; (800e4ac <fm_menu_config_k_lin_3+0x150>)
 800e424:	2200      	movs	r2, #0
 800e426:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 800e428:	2301      	movs	r3, #1
 800e42a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e42e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e432:	2200      	movs	r2, #0
 800e434:	4619      	mov	r1, r3
 800e436:	481f      	ldr	r0, [pc, #124]	; (800e4b4 <fm_menu_config_k_lin_3+0x158>)
 800e438:	f7fb f9da 	bl	80097f0 <_txe_queue_send>
        break;
 800e43c:	e010      	b.n	800e460 <fm_menu_config_k_lin_3+0x104>
        case EVENT_KEY_ESC:
            new_exit = 1;
 800e43e:	4b1e      	ldr	r3, [pc, #120]	; (800e4b8 <fm_menu_config_k_lin_3+0x15c>)
 800e440:	2201      	movs	r2, #1
 800e442:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_4;
 800e444:	4b1d      	ldr	r3, [pc, #116]	; (800e4bc <fm_menu_config_k_lin_3+0x160>)
 800e446:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 800e448:	2301      	movs	r3, #1
 800e44a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e44e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e452:	2200      	movs	r2, #0
 800e454:	4619      	mov	r1, r3
 800e456:	4817      	ldr	r0, [pc, #92]	; (800e4b4 <fm_menu_config_k_lin_3+0x158>)
 800e458:	f7fb f9ca 	bl	80097f0 <_txe_queue_send>
        break;
 800e45c:	e000      	b.n	800e460 <fm_menu_config_k_lin_3+0x104>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 800e45e:	bf00      	nop
    }

    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar parametro K_lin_3\n";
 800e460:	4b17      	ldr	r3, [pc, #92]	; (800e4c0 <fm_menu_config_k_lin_3+0x164>)
 800e462:	f107 040c 	add.w	r4, r7, #12
 800e466:	461d      	mov	r5, r3
 800e468:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e46a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e46c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800e470:	c407      	stmia	r4!, {r0, r1, r2}
 800e472:	8023      	strh	r3, [r4, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 800e474:	f107 030c 	add.w	r3, r7, #12
 800e478:	211e      	movs	r1, #30
 800e47a:	4618      	mov	r0, r3
 800e47c:	f7fb fdf4 	bl	800a068 <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 800e480:	4b0d      	ldr	r3, [pc, #52]	; (800e4b8 <fm_menu_config_k_lin_3+0x15c>)
 800e482:	781b      	ldrb	r3, [r3, #0]
 800e484:	2b01      	cmp	r3, #1
 800e486:	d108      	bne.n	800e49a <fm_menu_config_k_lin_3+0x13e>
    {
        digit_lin_modify = DIG_LIN_0;
 800e488:	4b08      	ldr	r3, [pc, #32]	; (800e4ac <fm_menu_config_k_lin_3+0x150>)
 800e48a:	2200      	movs	r2, #0
 800e48c:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 800e48e:	4b06      	ldr	r3, [pc, #24]	; (800e4a8 <fm_menu_config_k_lin_3+0x14c>)
 800e490:	2201      	movs	r2, #1
 800e492:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800e494:	4b08      	ldr	r3, [pc, #32]	; (800e4b8 <fm_menu_config_k_lin_3+0x15c>)
 800e496:	2200      	movs	r2, #0
 800e498:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800e49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e49c:	4618      	mov	r0, r3
 800e49e:	3730      	adds	r7, #48	; 0x30
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bdb0      	pop	{r4, r5, r7, pc}
 800e4a4:	0800e35d 	.word	0x0800e35d
 800e4a8:	20000144 	.word	0x20000144
 800e4ac:	20001d5f 	.word	0x20001d5f
 800e4b0:	20001d52 	.word	0x20001d52
 800e4b4:	20001368 	.word	0x20001368
 800e4b8:	20001d60 	.word	0x20001d60
 800e4bc:	0800e4c5 	.word	0x0800e4c5
 800e4c0:	080105d4 	.word	0x080105d4

0800e4c4 <fm_menu_config_k_lin_4>:

ptr_ret_menu_t fm_menu_config_k_lin_4(fm_event_t event_id)
{
 800e4c4:	b5b0      	push	{r4, r5, r7, lr}
 800e4c6:	b08c      	sub	sp, #48	; 0x30
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_4;
 800e4ce:	4b4f      	ldr	r3, [pc, #316]	; (800e60c <fm_menu_config_k_lin_4+0x148>)
 800e4d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 800e4d2:	4b4f      	ldr	r3, [pc, #316]	; (800e610 <fm_menu_config_k_lin_4+0x14c>)
 800e4d4:	781b      	ldrb	r3, [r3, #0]
 800e4d6:	2b01      	cmp	r3, #1
 800e4d8:	d104      	bne.n	800e4e4 <fm_menu_config_k_lin_4+0x20>
    {
        fm_lcd_clear();
 800e4da:	f7fc fc46 	bl	800ad6a <fm_lcd_clear>
        new_entry = 0;
 800e4de:	4b4c      	ldr	r3, [pc, #304]	; (800e610 <fm_menu_config_k_lin_4+0x14c>)
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_4, event_id, digit_lin_modify);
 800e4e4:	4b4b      	ldr	r3, [pc, #300]	; (800e614 <fm_menu_config_k_lin_4+0x150>)
 800e4e6:	781a      	ldrb	r2, [r3, #0]
 800e4e8:	79fb      	ldrb	r3, [r7, #7]
 800e4ea:	4619      	mov	r1, r3
 800e4ec:	2004      	movs	r0, #4
 800e4ee:	f7fc fe6b 	bl	800b1c8 <fm_lcd_k_lin>
    fm_lcd_refresh();
 800e4f2:	f7fc ff58 	bl	800b3a6 <fm_lcd_refresh>

    switch (event_id)
 800e4f6:	79fb      	ldrb	r3, [r7, #7]
 800e4f8:	3b01      	subs	r3, #1
 800e4fa:	2b04      	cmp	r3, #4
 800e4fc:	d863      	bhi.n	800e5c6 <fm_menu_config_k_lin_4+0x102>
 800e4fe:	a201      	add	r2, pc, #4	; (adr r2, 800e504 <fm_menu_config_k_lin_4+0x40>)
 800e500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e504:	0800e5c7 	.word	0x0800e5c7
 800e508:	0800e519 	.word	0x0800e519
 800e50c:	0800e543 	.word	0x0800e543
 800e510:	0800e56d 	.word	0x0800e56d
 800e514:	0800e5a7 	.word	0x0800e5a7
    {
        case EVENT_KEY_UP:
            if (correct_password)
 800e518:	4b3f      	ldr	r3, [pc, #252]	; (800e618 <fm_menu_config_k_lin_4+0x154>)
 800e51a:	781b      	ldrb	r3, [r3, #0]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d005      	beq.n	800e52c <fm_menu_config_k_lin_4+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_4);
 800e520:	4b3c      	ldr	r3, [pc, #240]	; (800e614 <fm_menu_config_k_lin_4+0x150>)
 800e522:	781b      	ldrb	r3, [r3, #0]
 800e524:	2104      	movs	r1, #4
 800e526:	4618      	mov	r0, r3
 800e528:	f7fc f830 	bl	800a58c <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 800e52c:	2301      	movs	r3, #1
 800e52e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e532:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e536:	2200      	movs	r2, #0
 800e538:	4619      	mov	r1, r3
 800e53a:	4838      	ldr	r0, [pc, #224]	; (800e61c <fm_menu_config_k_lin_4+0x158>)
 800e53c:	f7fb f958 	bl	80097f0 <_txe_queue_send>
        break;
 800e540:	e042      	b.n	800e5c8 <fm_menu_config_k_lin_4+0x104>
        case EVENT_KEY_DOWN:
            if (correct_password)
 800e542:	4b35      	ldr	r3, [pc, #212]	; (800e618 <fm_menu_config_k_lin_4+0x154>)
 800e544:	781b      	ldrb	r3, [r3, #0]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d005      	beq.n	800e556 <fm_menu_config_k_lin_4+0x92>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_4);
 800e54a:	4b32      	ldr	r3, [pc, #200]	; (800e614 <fm_menu_config_k_lin_4+0x150>)
 800e54c:	781b      	ldrb	r3, [r3, #0]
 800e54e:	2104      	movs	r1, #4
 800e550:	4618      	mov	r0, r3
 800e552:	f7fc f907 	bl	800a764 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 800e556:	2301      	movs	r3, #1
 800e558:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e55c:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e560:	2200      	movs	r2, #0
 800e562:	4619      	mov	r1, r3
 800e564:	482d      	ldr	r0, [pc, #180]	; (800e61c <fm_menu_config_k_lin_4+0x158>)
 800e566:	f7fb f943 	bl	80097f0 <_txe_queue_send>
        break;
 800e56a:	e02d      	b.n	800e5c8 <fm_menu_config_k_lin_4+0x104>
        case EVENT_KEY_ENTER:
            if (correct_password)
 800e56c:	4b2a      	ldr	r3, [pc, #168]	; (800e618 <fm_menu_config_k_lin_4+0x154>)
 800e56e:	781b      	ldrb	r3, [r3, #0]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d00d      	beq.n	800e590 <fm_menu_config_k_lin_4+0xcc>
            {
                if(digit_lin_modify < DIG_LIN_11)
 800e574:	4b27      	ldr	r3, [pc, #156]	; (800e614 <fm_menu_config_k_lin_4+0x150>)
 800e576:	781b      	ldrb	r3, [r3, #0]
 800e578:	2b0a      	cmp	r3, #10
 800e57a:	d806      	bhi.n	800e58a <fm_menu_config_k_lin_4+0xc6>
                {
                    digit_lin_modify++;
 800e57c:	4b25      	ldr	r3, [pc, #148]	; (800e614 <fm_menu_config_k_lin_4+0x150>)
 800e57e:	781b      	ldrb	r3, [r3, #0]
 800e580:	3301      	adds	r3, #1
 800e582:	b2da      	uxtb	r2, r3
 800e584:	4b23      	ldr	r3, [pc, #140]	; (800e614 <fm_menu_config_k_lin_4+0x150>)
 800e586:	701a      	strb	r2, [r3, #0]
 800e588:	e002      	b.n	800e590 <fm_menu_config_k_lin_4+0xcc>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 800e58a:	4b22      	ldr	r3, [pc, #136]	; (800e614 <fm_menu_config_k_lin_4+0x150>)
 800e58c:	2200      	movs	r2, #0
 800e58e:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 800e590:	2301      	movs	r3, #1
 800e592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e596:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e59a:	2200      	movs	r2, #0
 800e59c:	4619      	mov	r1, r3
 800e59e:	481f      	ldr	r0, [pc, #124]	; (800e61c <fm_menu_config_k_lin_4+0x158>)
 800e5a0:	f7fb f926 	bl	80097f0 <_txe_queue_send>
        break;
 800e5a4:	e010      	b.n	800e5c8 <fm_menu_config_k_lin_4+0x104>
        case EVENT_KEY_ESC:
            new_exit = 1;
 800e5a6:	4b1e      	ldr	r3, [pc, #120]	; (800e620 <fm_menu_config_k_lin_4+0x15c>)
 800e5a8:	2201      	movs	r2, #1
 800e5aa:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_5;
 800e5ac:	4b1d      	ldr	r3, [pc, #116]	; (800e624 <fm_menu_config_k_lin_4+0x160>)
 800e5ae:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 800e5b0:	2301      	movs	r3, #1
 800e5b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e5b6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	4619      	mov	r1, r3
 800e5be:	4817      	ldr	r0, [pc, #92]	; (800e61c <fm_menu_config_k_lin_4+0x158>)
 800e5c0:	f7fb f916 	bl	80097f0 <_txe_queue_send>
        break;
 800e5c4:	e000      	b.n	800e5c8 <fm_menu_config_k_lin_4+0x104>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 800e5c6:	bf00      	nop
    }

    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar parametro K_lin_4\n";
 800e5c8:	4b17      	ldr	r3, [pc, #92]	; (800e628 <fm_menu_config_k_lin_4+0x164>)
 800e5ca:	f107 040c 	add.w	r4, r7, #12
 800e5ce:	461d      	mov	r5, r3
 800e5d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e5d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e5d4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800e5d8:	c407      	stmia	r4!, {r0, r1, r2}
 800e5da:	8023      	strh	r3, [r4, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 800e5dc:	f107 030c 	add.w	r3, r7, #12
 800e5e0:	211e      	movs	r1, #30
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	f7fb fd40 	bl	800a068 <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 800e5e8:	4b0d      	ldr	r3, [pc, #52]	; (800e620 <fm_menu_config_k_lin_4+0x15c>)
 800e5ea:	781b      	ldrb	r3, [r3, #0]
 800e5ec:	2b01      	cmp	r3, #1
 800e5ee:	d108      	bne.n	800e602 <fm_menu_config_k_lin_4+0x13e>
    {
        digit_lin_modify = DIG_LIN_0;
 800e5f0:	4b08      	ldr	r3, [pc, #32]	; (800e614 <fm_menu_config_k_lin_4+0x150>)
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 800e5f6:	4b06      	ldr	r3, [pc, #24]	; (800e610 <fm_menu_config_k_lin_4+0x14c>)
 800e5f8:	2201      	movs	r2, #1
 800e5fa:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800e5fc:	4b08      	ldr	r3, [pc, #32]	; (800e620 <fm_menu_config_k_lin_4+0x15c>)
 800e5fe:	2200      	movs	r2, #0
 800e600:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800e602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e604:	4618      	mov	r0, r3
 800e606:	3730      	adds	r7, #48	; 0x30
 800e608:	46bd      	mov	sp, r7
 800e60a:	bdb0      	pop	{r4, r5, r7, pc}
 800e60c:	0800e4c5 	.word	0x0800e4c5
 800e610:	20000145 	.word	0x20000145
 800e614:	20001d61 	.word	0x20001d61
 800e618:	20001d52 	.word	0x20001d52
 800e61c:	20001368 	.word	0x20001368
 800e620:	20001d62 	.word	0x20001d62
 800e624:	0800e62d 	.word	0x0800e62d
 800e628:	080105f4 	.word	0x080105f4

0800e62c <fm_menu_config_k_lin_5>:

ptr_ret_menu_t fm_menu_config_k_lin_5(fm_event_t event_id)
{
 800e62c:	b5b0      	push	{r4, r5, r7, lr}
 800e62e:	b08c      	sub	sp, #48	; 0x30
 800e630:	af00      	add	r7, sp, #0
 800e632:	4603      	mov	r3, r0
 800e634:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_5;
 800e636:	4b4f      	ldr	r3, [pc, #316]	; (800e774 <fm_menu_config_k_lin_5+0x148>)
 800e638:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 800e63a:	4b4f      	ldr	r3, [pc, #316]	; (800e778 <fm_menu_config_k_lin_5+0x14c>)
 800e63c:	781b      	ldrb	r3, [r3, #0]
 800e63e:	2b01      	cmp	r3, #1
 800e640:	d104      	bne.n	800e64c <fm_menu_config_k_lin_5+0x20>
    {
        fm_lcd_clear();
 800e642:	f7fc fb92 	bl	800ad6a <fm_lcd_clear>
        new_entry = 0;
 800e646:	4b4c      	ldr	r3, [pc, #304]	; (800e778 <fm_menu_config_k_lin_5+0x14c>)
 800e648:	2200      	movs	r2, #0
 800e64a:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_5, event_id, digit_lin_modify);
 800e64c:	4b4b      	ldr	r3, [pc, #300]	; (800e77c <fm_menu_config_k_lin_5+0x150>)
 800e64e:	781a      	ldrb	r2, [r3, #0]
 800e650:	79fb      	ldrb	r3, [r7, #7]
 800e652:	4619      	mov	r1, r3
 800e654:	2005      	movs	r0, #5
 800e656:	f7fc fdb7 	bl	800b1c8 <fm_lcd_k_lin>
    fm_lcd_refresh();
 800e65a:	f7fc fea4 	bl	800b3a6 <fm_lcd_refresh>

    switch (event_id)
 800e65e:	79fb      	ldrb	r3, [r7, #7]
 800e660:	3b01      	subs	r3, #1
 800e662:	2b04      	cmp	r3, #4
 800e664:	d863      	bhi.n	800e72e <fm_menu_config_k_lin_5+0x102>
 800e666:	a201      	add	r2, pc, #4	; (adr r2, 800e66c <fm_menu_config_k_lin_5+0x40>)
 800e668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e66c:	0800e72f 	.word	0x0800e72f
 800e670:	0800e681 	.word	0x0800e681
 800e674:	0800e6ab 	.word	0x0800e6ab
 800e678:	0800e6d5 	.word	0x0800e6d5
 800e67c:	0800e70f 	.word	0x0800e70f
    {
        case EVENT_KEY_UP:
            if (correct_password)
 800e680:	4b3f      	ldr	r3, [pc, #252]	; (800e780 <fm_menu_config_k_lin_5+0x154>)
 800e682:	781b      	ldrb	r3, [r3, #0]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d005      	beq.n	800e694 <fm_menu_config_k_lin_5+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_5);
 800e688:	4b3c      	ldr	r3, [pc, #240]	; (800e77c <fm_menu_config_k_lin_5+0x150>)
 800e68a:	781b      	ldrb	r3, [r3, #0]
 800e68c:	2105      	movs	r1, #5
 800e68e:	4618      	mov	r0, r3
 800e690:	f7fb ff7c 	bl	800a58c <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 800e694:	2301      	movs	r3, #1
 800e696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e69a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e69e:	2200      	movs	r2, #0
 800e6a0:	4619      	mov	r1, r3
 800e6a2:	4838      	ldr	r0, [pc, #224]	; (800e784 <fm_menu_config_k_lin_5+0x158>)
 800e6a4:	f7fb f8a4 	bl	80097f0 <_txe_queue_send>
        break;
 800e6a8:	e042      	b.n	800e730 <fm_menu_config_k_lin_5+0x104>
        case EVENT_KEY_DOWN:
            if (correct_password)
 800e6aa:	4b35      	ldr	r3, [pc, #212]	; (800e780 <fm_menu_config_k_lin_5+0x154>)
 800e6ac:	781b      	ldrb	r3, [r3, #0]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d005      	beq.n	800e6be <fm_menu_config_k_lin_5+0x92>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_5);
 800e6b2:	4b32      	ldr	r3, [pc, #200]	; (800e77c <fm_menu_config_k_lin_5+0x150>)
 800e6b4:	781b      	ldrb	r3, [r3, #0]
 800e6b6:	2105      	movs	r1, #5
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f7fc f853 	bl	800a764 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 800e6be:	2301      	movs	r3, #1
 800e6c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e6c4:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	4619      	mov	r1, r3
 800e6cc:	482d      	ldr	r0, [pc, #180]	; (800e784 <fm_menu_config_k_lin_5+0x158>)
 800e6ce:	f7fb f88f 	bl	80097f0 <_txe_queue_send>
        break;
 800e6d2:	e02d      	b.n	800e730 <fm_menu_config_k_lin_5+0x104>
        case EVENT_KEY_ENTER:
            if (correct_password)
 800e6d4:	4b2a      	ldr	r3, [pc, #168]	; (800e780 <fm_menu_config_k_lin_5+0x154>)
 800e6d6:	781b      	ldrb	r3, [r3, #0]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d00d      	beq.n	800e6f8 <fm_menu_config_k_lin_5+0xcc>
            {
                if(digit_lin_modify < DIG_LIN_11)
 800e6dc:	4b27      	ldr	r3, [pc, #156]	; (800e77c <fm_menu_config_k_lin_5+0x150>)
 800e6de:	781b      	ldrb	r3, [r3, #0]
 800e6e0:	2b0a      	cmp	r3, #10
 800e6e2:	d806      	bhi.n	800e6f2 <fm_menu_config_k_lin_5+0xc6>
                {
                    digit_lin_modify++;
 800e6e4:	4b25      	ldr	r3, [pc, #148]	; (800e77c <fm_menu_config_k_lin_5+0x150>)
 800e6e6:	781b      	ldrb	r3, [r3, #0]
 800e6e8:	3301      	adds	r3, #1
 800e6ea:	b2da      	uxtb	r2, r3
 800e6ec:	4b23      	ldr	r3, [pc, #140]	; (800e77c <fm_menu_config_k_lin_5+0x150>)
 800e6ee:	701a      	strb	r2, [r3, #0]
 800e6f0:	e002      	b.n	800e6f8 <fm_menu_config_k_lin_5+0xcc>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 800e6f2:	4b22      	ldr	r3, [pc, #136]	; (800e77c <fm_menu_config_k_lin_5+0x150>)
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 800e6f8:	2301      	movs	r3, #1
 800e6fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e6fe:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e702:	2200      	movs	r2, #0
 800e704:	4619      	mov	r1, r3
 800e706:	481f      	ldr	r0, [pc, #124]	; (800e784 <fm_menu_config_k_lin_5+0x158>)
 800e708:	f7fb f872 	bl	80097f0 <_txe_queue_send>
        break;
 800e70c:	e010      	b.n	800e730 <fm_menu_config_k_lin_5+0x104>
        case EVENT_KEY_ESC:
            new_exit = 1;
 800e70e:	4b1e      	ldr	r3, [pc, #120]	; (800e788 <fm_menu_config_k_lin_5+0x15c>)
 800e710:	2201      	movs	r2, #1
 800e712:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_units_vol;
 800e714:	4b1d      	ldr	r3, [pc, #116]	; (800e78c <fm_menu_config_k_lin_5+0x160>)
 800e716:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 800e718:	2301      	movs	r3, #1
 800e71a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e71e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e722:	2200      	movs	r2, #0
 800e724:	4619      	mov	r1, r3
 800e726:	4817      	ldr	r0, [pc, #92]	; (800e784 <fm_menu_config_k_lin_5+0x158>)
 800e728:	f7fb f862 	bl	80097f0 <_txe_queue_send>
        break;
 800e72c:	e000      	b.n	800e730 <fm_menu_config_k_lin_5+0x104>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 800e72e:	bf00      	nop
    }

    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar parametro K_lin_5\n";
 800e730:	4b17      	ldr	r3, [pc, #92]	; (800e790 <fm_menu_config_k_lin_5+0x164>)
 800e732:	f107 040c 	add.w	r4, r7, #12
 800e736:	461d      	mov	r5, r3
 800e738:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e73a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e73c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800e740:	c407      	stmia	r4!, {r0, r1, r2}
 800e742:	8023      	strh	r3, [r4, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 800e744:	f107 030c 	add.w	r3, r7, #12
 800e748:	211e      	movs	r1, #30
 800e74a:	4618      	mov	r0, r3
 800e74c:	f7fb fc8c 	bl	800a068 <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 800e750:	4b0d      	ldr	r3, [pc, #52]	; (800e788 <fm_menu_config_k_lin_5+0x15c>)
 800e752:	781b      	ldrb	r3, [r3, #0]
 800e754:	2b01      	cmp	r3, #1
 800e756:	d108      	bne.n	800e76a <fm_menu_config_k_lin_5+0x13e>
    {
        digit_lin_modify = DIG_LIN_0;
 800e758:	4b08      	ldr	r3, [pc, #32]	; (800e77c <fm_menu_config_k_lin_5+0x150>)
 800e75a:	2200      	movs	r2, #0
 800e75c:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 800e75e:	4b06      	ldr	r3, [pc, #24]	; (800e778 <fm_menu_config_k_lin_5+0x14c>)
 800e760:	2201      	movs	r2, #1
 800e762:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800e764:	4b08      	ldr	r3, [pc, #32]	; (800e788 <fm_menu_config_k_lin_5+0x15c>)
 800e766:	2200      	movs	r2, #0
 800e768:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800e76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e76c:	4618      	mov	r0, r3
 800e76e:	3730      	adds	r7, #48	; 0x30
 800e770:	46bd      	mov	sp, r7
 800e772:	bdb0      	pop	{r4, r5, r7, pc}
 800e774:	0800e62d 	.word	0x0800e62d
 800e778:	20000146 	.word	0x20000146
 800e77c:	20001d63 	.word	0x20001d63
 800e780:	20001d52 	.word	0x20001d52
 800e784:	20001368 	.word	0x20001368
 800e788:	20001d64 	.word	0x20001d64
 800e78c:	0800ee19 	.word	0x0800ee19
 800e790:	08010614 	.word	0x08010614

0800e794 <fm_menu_config_k_param>:
 * K.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_k_param(fm_event_t event_id)
{
 800e794:	b5b0      	push	{r4, r5, r7, lr}
 800e796:	b08a      	sub	sp, #40	; 0x28
 800e798:	af00      	add	r7, sp, #0
 800e79a:	4603      	mov	r3, r0
 800e79c:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_t digit_modify = DIG_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
 800e79e:	4b68      	ldr	r3, [pc, #416]	; (800e940 <fm_menu_config_k_param+0x1ac>)
 800e7a0:	627b      	str	r3, [r7, #36]	; 0x24
    fm_event_t event_now;

    if (new_entry == 1)
 800e7a2:	4b68      	ldr	r3, [pc, #416]	; (800e944 <fm_menu_config_k_param+0x1b0>)
 800e7a4:	781b      	ldrb	r3, [r3, #0]
 800e7a6:	2b01      	cmp	r3, #1
 800e7a8:	d104      	bne.n	800e7b4 <fm_menu_config_k_param+0x20>
    {
        fm_lcd_clear();
 800e7aa:	f7fc fade 	bl	800ad6a <fm_lcd_clear>
        new_entry = 0;
 800e7ae:	4b65      	ldr	r3, [pc, #404]	; (800e944 <fm_menu_config_k_param+0x1b0>)
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_factor(event_id, digit_modify);
 800e7b4:	4b64      	ldr	r3, [pc, #400]	; (800e948 <fm_menu_config_k_param+0x1b4>)
 800e7b6:	781a      	ldrb	r2, [r3, #0]
 800e7b8:	79fb      	ldrb	r3, [r7, #7]
 800e7ba:	4611      	mov	r1, r2
 800e7bc:	4618      	mov	r0, r3
 800e7be:	f7fc fcb7 	bl	800b130 <fm_lcd_k_factor>
    fm_lcd_refresh();
 800e7c2:	f7fc fdf0 	bl	800b3a6 <fm_lcd_refresh>

    switch (event_id)
 800e7c6:	79fb      	ldrb	r3, [r7, #7]
 800e7c8:	3b01      	subs	r3, #1
 800e7ca:	2b04      	cmp	r3, #4
 800e7cc:	f200 8094 	bhi.w	800e8f8 <fm_menu_config_k_param+0x164>
 800e7d0:	a201      	add	r2, pc, #4	; (adr r2, 800e7d8 <fm_menu_config_k_param+0x44>)
 800e7d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7d6:	bf00      	nop
 800e7d8:	0800e8f9 	.word	0x0800e8f9
 800e7dc:	0800e7ed 	.word	0x0800e7ed
 800e7e0:	0800e815 	.word	0x0800e815
 800e7e4:	0800e83d 	.word	0x0800e83d
 800e7e8:	0800e8d9 	.word	0x0800e8d9
    {
        case EVENT_KEY_UP:
            if (correct_password)
 800e7ec:	4b57      	ldr	r3, [pc, #348]	; (800e94c <fm_menu_config_k_param+0x1b8>)
 800e7ee:	781b      	ldrb	r3, [r3, #0]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d004      	beq.n	800e7fe <fm_menu_config_k_param+0x6a>
            {
                fm_factory_modify_k_factor_add(digit_modify);
 800e7f4:	4b54      	ldr	r3, [pc, #336]	; (800e948 <fm_menu_config_k_param+0x1b4>)
 800e7f6:	781b      	ldrb	r3, [r3, #0]
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	f7fb fe47 	bl	800a48c <fm_factory_modify_k_factor_add>
            }
            event_now = EVENT_LCD_REFRESH;
 800e7fe:	2301      	movs	r3, #1
 800e800:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e804:	f107 0323 	add.w	r3, r7, #35	; 0x23
 800e808:	2200      	movs	r2, #0
 800e80a:	4619      	mov	r1, r3
 800e80c:	4850      	ldr	r0, [pc, #320]	; (800e950 <fm_menu_config_k_param+0x1bc>)
 800e80e:	f7fa ffef 	bl	80097f0 <_txe_queue_send>
        break;
 800e812:	e072      	b.n	800e8fa <fm_menu_config_k_param+0x166>
        case EVENT_KEY_DOWN:
            if (correct_password)
 800e814:	4b4d      	ldr	r3, [pc, #308]	; (800e94c <fm_menu_config_k_param+0x1b8>)
 800e816:	781b      	ldrb	r3, [r3, #0]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d004      	beq.n	800e826 <fm_menu_config_k_param+0x92>
            {
                fm_factory_modify_k_factor_subs(digit_modify);
 800e81c:	4b4a      	ldr	r3, [pc, #296]	; (800e948 <fm_menu_config_k_param+0x1b4>)
 800e81e:	781b      	ldrb	r3, [r3, #0]
 800e820:	4618      	mov	r0, r3
 800e822:	f7fb fe73 	bl	800a50c <fm_factory_modify_k_factor_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 800e826:	2301      	movs	r3, #1
 800e828:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e82c:	f107 0323 	add.w	r3, r7, #35	; 0x23
 800e830:	2200      	movs	r2, #0
 800e832:	4619      	mov	r1, r3
 800e834:	4846      	ldr	r0, [pc, #280]	; (800e950 <fm_menu_config_k_param+0x1bc>)
 800e836:	f7fa ffdb 	bl	80097f0 <_txe_queue_send>
        break;
 800e83a:	e05e      	b.n	800e8fa <fm_menu_config_k_param+0x166>
        case EVENT_KEY_ENTER:
            if (correct_password)
 800e83c:	4b43      	ldr	r3, [pc, #268]	; (800e94c <fm_menu_config_k_param+0x1b8>)
 800e83e:	781b      	ldrb	r3, [r3, #0]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d03e      	beq.n	800e8c2 <fm_menu_config_k_param+0x12e>
            {
                if (digit_modify == DIG_0)
 800e844:	4b40      	ldr	r3, [pc, #256]	; (800e948 <fm_menu_config_k_param+0x1b4>)
 800e846:	781b      	ldrb	r3, [r3, #0]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d103      	bne.n	800e854 <fm_menu_config_k_param+0xc0>
                {
                    digit_modify = DIG_1;
 800e84c:	4b3e      	ldr	r3, [pc, #248]	; (800e948 <fm_menu_config_k_param+0x1b4>)
 800e84e:	2201      	movs	r2, #1
 800e850:	701a      	strb	r2, [r3, #0]
 800e852:	e036      	b.n	800e8c2 <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_1)
 800e854:	4b3c      	ldr	r3, [pc, #240]	; (800e948 <fm_menu_config_k_param+0x1b4>)
 800e856:	781b      	ldrb	r3, [r3, #0]
 800e858:	2b01      	cmp	r3, #1
 800e85a:	d103      	bne.n	800e864 <fm_menu_config_k_param+0xd0>
                {
                    digit_modify = DIG_2;
 800e85c:	4b3a      	ldr	r3, [pc, #232]	; (800e948 <fm_menu_config_k_param+0x1b4>)
 800e85e:	2202      	movs	r2, #2
 800e860:	701a      	strb	r2, [r3, #0]
 800e862:	e02e      	b.n	800e8c2 <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_2)
 800e864:	4b38      	ldr	r3, [pc, #224]	; (800e948 <fm_menu_config_k_param+0x1b4>)
 800e866:	781b      	ldrb	r3, [r3, #0]
 800e868:	2b02      	cmp	r3, #2
 800e86a:	d103      	bne.n	800e874 <fm_menu_config_k_param+0xe0>
                {
                    digit_modify = DIG_3;
 800e86c:	4b36      	ldr	r3, [pc, #216]	; (800e948 <fm_menu_config_k_param+0x1b4>)
 800e86e:	2203      	movs	r2, #3
 800e870:	701a      	strb	r2, [r3, #0]
 800e872:	e026      	b.n	800e8c2 <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_3)
 800e874:	4b34      	ldr	r3, [pc, #208]	; (800e948 <fm_menu_config_k_param+0x1b4>)
 800e876:	781b      	ldrb	r3, [r3, #0]
 800e878:	2b03      	cmp	r3, #3
 800e87a:	d103      	bne.n	800e884 <fm_menu_config_k_param+0xf0>
                {
                    digit_modify = DIG_4;
 800e87c:	4b32      	ldr	r3, [pc, #200]	; (800e948 <fm_menu_config_k_param+0x1b4>)
 800e87e:	2204      	movs	r2, #4
 800e880:	701a      	strb	r2, [r3, #0]
 800e882:	e01e      	b.n	800e8c2 <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_4)
 800e884:	4b30      	ldr	r3, [pc, #192]	; (800e948 <fm_menu_config_k_param+0x1b4>)
 800e886:	781b      	ldrb	r3, [r3, #0]
 800e888:	2b04      	cmp	r3, #4
 800e88a:	d103      	bne.n	800e894 <fm_menu_config_k_param+0x100>
                {
                    digit_modify = DIG_5;
 800e88c:	4b2e      	ldr	r3, [pc, #184]	; (800e948 <fm_menu_config_k_param+0x1b4>)
 800e88e:	2205      	movs	r2, #5
 800e890:	701a      	strb	r2, [r3, #0]
 800e892:	e016      	b.n	800e8c2 <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_5)
 800e894:	4b2c      	ldr	r3, [pc, #176]	; (800e948 <fm_menu_config_k_param+0x1b4>)
 800e896:	781b      	ldrb	r3, [r3, #0]
 800e898:	2b05      	cmp	r3, #5
 800e89a:	d103      	bne.n	800e8a4 <fm_menu_config_k_param+0x110>
                {
                    digit_modify = DIG_6;
 800e89c:	4b2a      	ldr	r3, [pc, #168]	; (800e948 <fm_menu_config_k_param+0x1b4>)
 800e89e:	2206      	movs	r2, #6
 800e8a0:	701a      	strb	r2, [r3, #0]
 800e8a2:	e00e      	b.n	800e8c2 <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_6)
 800e8a4:	4b28      	ldr	r3, [pc, #160]	; (800e948 <fm_menu_config_k_param+0x1b4>)
 800e8a6:	781b      	ldrb	r3, [r3, #0]
 800e8a8:	2b06      	cmp	r3, #6
 800e8aa:	d103      	bne.n	800e8b4 <fm_menu_config_k_param+0x120>
                {
                    digit_modify = DIG_7;
 800e8ac:	4b26      	ldr	r3, [pc, #152]	; (800e948 <fm_menu_config_k_param+0x1b4>)
 800e8ae:	2207      	movs	r2, #7
 800e8b0:	701a      	strb	r2, [r3, #0]
 800e8b2:	e006      	b.n	800e8c2 <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_7)
 800e8b4:	4b24      	ldr	r3, [pc, #144]	; (800e948 <fm_menu_config_k_param+0x1b4>)
 800e8b6:	781b      	ldrb	r3, [r3, #0]
 800e8b8:	2b07      	cmp	r3, #7
 800e8ba:	d102      	bne.n	800e8c2 <fm_menu_config_k_param+0x12e>
                {
                    digit_modify = DIG_0;
 800e8bc:	4b22      	ldr	r3, [pc, #136]	; (800e948 <fm_menu_config_k_param+0x1b4>)
 800e8be:	2200      	movs	r2, #0
 800e8c0:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 800e8c2:	2301      	movs	r3, #1
 800e8c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e8c8:	f107 0323 	add.w	r3, r7, #35	; 0x23
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	4619      	mov	r1, r3
 800e8d0:	481f      	ldr	r0, [pc, #124]	; (800e950 <fm_menu_config_k_param+0x1bc>)
 800e8d2:	f7fa ff8d 	bl	80097f0 <_txe_queue_send>
        break;
 800e8d6:	e010      	b.n	800e8fa <fm_menu_config_k_param+0x166>
        case EVENT_KEY_ESC:
            new_exit = 1;
 800e8d8:	4b1e      	ldr	r3, [pc, #120]	; (800e954 <fm_menu_config_k_param+0x1c0>)
 800e8da:	2201      	movs	r2, #1
 800e8dc:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_1;
 800e8de:	4b1e      	ldr	r3, [pc, #120]	; (800e958 <fm_menu_config_k_param+0x1c4>)
 800e8e0:	627b      	str	r3, [r7, #36]	; 0x24
            event_now = EVENT_LCD_REFRESH;
 800e8e2:	2301      	movs	r3, #1
 800e8e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e8e8:	f107 0323 	add.w	r3, r7, #35	; 0x23
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	4619      	mov	r1, r3
 800e8f0:	4817      	ldr	r0, [pc, #92]	; (800e950 <fm_menu_config_k_param+0x1bc>)
 800e8f2:	f7fa ff7d 	bl	80097f0 <_txe_queue_send>
        break;
 800e8f6:	e000      	b.n	800e8fa <fm_menu_config_k_param+0x166>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 800e8f8:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar parametro K\n";
 800e8fa:	4b18      	ldr	r3, [pc, #96]	; (800e95c <fm_menu_config_k_param+0x1c8>)
 800e8fc:	f107 0408 	add.w	r4, r7, #8
 800e900:	461d      	mov	r5, r3
 800e902:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e904:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e906:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e90a:	e884 0003 	stmia.w	r4, {r0, r1}
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 800e90e:	f107 0308 	add.w	r3, r7, #8
 800e912:	2118      	movs	r1, #24
 800e914:	4618      	mov	r0, r3
 800e916:	f7fb fba7 	bl	800a068 <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 800e91a:	4b0e      	ldr	r3, [pc, #56]	; (800e954 <fm_menu_config_k_param+0x1c0>)
 800e91c:	781b      	ldrb	r3, [r3, #0]
 800e91e:	2b01      	cmp	r3, #1
 800e920:	d108      	bne.n	800e934 <fm_menu_config_k_param+0x1a0>
    {
        digit_modify = DIG_0;
 800e922:	4b09      	ldr	r3, [pc, #36]	; (800e948 <fm_menu_config_k_param+0x1b4>)
 800e924:	2200      	movs	r2, #0
 800e926:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 800e928:	4b06      	ldr	r3, [pc, #24]	; (800e944 <fm_menu_config_k_param+0x1b0>)
 800e92a:	2201      	movs	r2, #1
 800e92c:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800e92e:	4b09      	ldr	r3, [pc, #36]	; (800e954 <fm_menu_config_k_param+0x1c0>)
 800e930:	2200      	movs	r2, #0
 800e932:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800e934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e936:	4618      	mov	r0, r3
 800e938:	3728      	adds	r7, #40	; 0x28
 800e93a:	46bd      	mov	sp, r7
 800e93c:	bdb0      	pop	{r4, r5, r7, pc}
 800e93e:	bf00      	nop
 800e940:	0800e795 	.word	0x0800e795
 800e944:	20000147 	.word	0x20000147
 800e948:	20001d65 	.word	0x20001d65
 800e94c:	20001d52 	.word	0x20001d52
 800e950:	20001368 	.word	0x20001368
 800e954:	20001d66 	.word	0x20001d66
 800e958:	0800e08d 	.word	0x0800e08d
 800e95c:	08010634 	.word	0x08010634

0800e960 <fm_menu_config_pass>:
 * almacenada en memoria (DOWN -> UP -> UP -> ENTER).
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_pass(fm_event_t event_id)
{
 800e960:	b5b0      	push	{r4, r5, r7, lr}
 800e962:	b086      	sub	sp, #24
 800e964:	af00      	add	r7, sp, #0
 800e966:	4603      	mov	r3, r0
 800e968:	71fb      	strb	r3, [r7, #7]
        0,
        0
    };
    static uint8_t password_index = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 800e96a:	4ba1      	ldr	r3, [pc, #644]	; (800ebf0 <fm_menu_config_pass+0x290>)
 800e96c:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 800e96e:	4ba1      	ldr	r3, [pc, #644]	; (800ebf4 <fm_menu_config_pass+0x294>)
 800e970:	781b      	ldrb	r3, [r3, #0]
 800e972:	2b01      	cmp	r3, #1
 800e974:	d107      	bne.n	800e986 <fm_menu_config_pass+0x26>
    {
        correct_password = 0;
 800e976:	4ba0      	ldr	r3, [pc, #640]	; (800ebf8 <fm_menu_config_pass+0x298>)
 800e978:	2200      	movs	r2, #0
 800e97a:	701a      	strb	r2, [r3, #0]
        fm_lcd_clear();
 800e97c:	f7fc f9f5 	bl	800ad6a <fm_lcd_clear>
        new_entry = 0;
 800e980:	4b9c      	ldr	r3, [pc, #624]	; (800ebf4 <fm_menu_config_pass+0x294>)
 800e982:	2200      	movs	r2, #0
 800e984:	701a      	strb	r2, [r3, #0]
    }

    lcd_set_symbol(PASS, 0x00);
 800e986:	2100      	movs	r1, #0
 800e988:	200a      	movs	r0, #10
 800e98a:	f7fd ffb3 	bl	800c8f4 <lcd_set_symbol>
    /*
     * Cada vez que se introduce un dígito de la contraseña, aparece un 8 nuevo
     * en la pantalla, hasta 3 veces (luego de la cuarta vez, se pasa al menú
     * de configuración del factor K).
     */
    if (password_index == 1)
 800e98e:	4b9b      	ldr	r3, [pc, #620]	; (800ebfc <fm_menu_config_pass+0x29c>)
 800e990:	781b      	ldrb	r3, [r3, #0]
 800e992:	2b01      	cmp	r3, #1
 800e994:	d104      	bne.n	800e9a0 <fm_menu_config_pass+0x40>
    {
        lcd_set_symbol(PASS1, 0x00);
 800e996:	2100      	movs	r1, #0
 800e998:	200d      	movs	r0, #13
 800e99a:	f7fd ffab 	bl	800c8f4 <lcd_set_symbol>
 800e99e:	e010      	b.n	800e9c2 <fm_menu_config_pass+0x62>
    }
    else if (password_index == 2)
 800e9a0:	4b96      	ldr	r3, [pc, #600]	; (800ebfc <fm_menu_config_pass+0x29c>)
 800e9a2:	781b      	ldrb	r3, [r3, #0]
 800e9a4:	2b02      	cmp	r3, #2
 800e9a6:	d104      	bne.n	800e9b2 <fm_menu_config_pass+0x52>
    {
        lcd_set_symbol(PASS2, 0x00);
 800e9a8:	2100      	movs	r1, #0
 800e9aa:	200e      	movs	r0, #14
 800e9ac:	f7fd ffa2 	bl	800c8f4 <lcd_set_symbol>
 800e9b0:	e007      	b.n	800e9c2 <fm_menu_config_pass+0x62>
    }
    else if (password_index == PASSWORD_LENGTH - 1)
 800e9b2:	4b92      	ldr	r3, [pc, #584]	; (800ebfc <fm_menu_config_pass+0x29c>)
 800e9b4:	781b      	ldrb	r3, [r3, #0]
 800e9b6:	2b03      	cmp	r3, #3
 800e9b8:	d103      	bne.n	800e9c2 <fm_menu_config_pass+0x62>
    {
        lcd_set_symbol(PASS3, 0x00);
 800e9ba:	2100      	movs	r1, #0
 800e9bc:	200f      	movs	r0, #15
 800e9be:	f7fd ff99 	bl	800c8f4 <lcd_set_symbol>
    }
    fm_lcd_refresh();
 800e9c2:	f7fc fcf0 	bl	800b3a6 <fm_lcd_refresh>

    switch (event_id)
 800e9c6:	79fb      	ldrb	r3, [r7, #7]
 800e9c8:	3b01      	subs	r3, #1
 800e9ca:	2b04      	cmp	r3, #4
 800e9cc:	f200 80b2 	bhi.w	800eb34 <fm_menu_config_pass+0x1d4>
 800e9d0:	a201      	add	r2, pc, #4	; (adr r2, 800e9d8 <fm_menu_config_pass+0x78>)
 800e9d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9d6:	bf00      	nop
 800e9d8:	0800eb35 	.word	0x0800eb35
 800e9dc:	0800e9ed 	.word	0x0800e9ed
 800e9e0:	0800ea3f 	.word	0x0800ea3f
 800e9e4:	0800ea91 	.word	0x0800ea91
 800e9e8:	0800eae3 	.word	0x0800eae3
    {
        case EVENT_KEY_UP:
            password[password_index] = 1;
 800e9ec:	4b83      	ldr	r3, [pc, #524]	; (800ebfc <fm_menu_config_pass+0x29c>)
 800e9ee:	781b      	ldrb	r3, [r3, #0]
 800e9f0:	461a      	mov	r2, r3
 800e9f2:	4b83      	ldr	r3, [pc, #524]	; (800ec00 <fm_menu_config_pass+0x2a0>)
 800e9f4:	2101      	movs	r1, #1
 800e9f6:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 800e9f8:	4b80      	ldr	r3, [pc, #512]	; (800ebfc <fm_menu_config_pass+0x29c>)
 800e9fa:	781b      	ldrb	r3, [r3, #0]
 800e9fc:	2b02      	cmp	r3, #2
 800e9fe:	d80f      	bhi.n	800ea20 <fm_menu_config_pass+0xc0>
            {
                event_now = EVENT_LCD_REFRESH;
 800ea00:	2301      	movs	r3, #1
 800ea02:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800ea04:	f107 0313 	add.w	r3, r7, #19
 800ea08:	2200      	movs	r2, #0
 800ea0a:	4619      	mov	r1, r3
 800ea0c:	487d      	ldr	r0, [pc, #500]	; (800ec04 <fm_menu_config_pass+0x2a4>)
 800ea0e:	f7fa feef 	bl	80097f0 <_txe_queue_send>
                password_index++;
 800ea12:	4b7a      	ldr	r3, [pc, #488]	; (800ebfc <fm_menu_config_pass+0x29c>)
 800ea14:	781b      	ldrb	r3, [r3, #0]
 800ea16:	3301      	adds	r3, #1
 800ea18:	b2da      	uxtb	r2, r3
 800ea1a:	4b78      	ldr	r3, [pc, #480]	; (800ebfc <fm_menu_config_pass+0x29c>)
 800ea1c:	701a      	strb	r2, [r3, #0]
                new_exit = 1;
                ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
                event_now = EVENT_LCD_REFRESH;
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
            }
        break;
 800ea1e:	e08a      	b.n	800eb36 <fm_menu_config_pass+0x1d6>
                new_exit = 1;
 800ea20:	4b79      	ldr	r3, [pc, #484]	; (800ec08 <fm_menu_config_pass+0x2a8>)
 800ea22:	2201      	movs	r2, #1
 800ea24:	701a      	strb	r2, [r3, #0]
                ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
 800ea26:	4b79      	ldr	r3, [pc, #484]	; (800ec0c <fm_menu_config_pass+0x2ac>)
 800ea28:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 800ea2a:	2301      	movs	r3, #1
 800ea2c:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800ea2e:	f107 0313 	add.w	r3, r7, #19
 800ea32:	2200      	movs	r2, #0
 800ea34:	4619      	mov	r1, r3
 800ea36:	4873      	ldr	r0, [pc, #460]	; (800ec04 <fm_menu_config_pass+0x2a4>)
 800ea38:	f7fa feda 	bl	80097f0 <_txe_queue_send>
        break;
 800ea3c:	e07b      	b.n	800eb36 <fm_menu_config_pass+0x1d6>
        case EVENT_KEY_DOWN:
            password[password_index] = 2;
 800ea3e:	4b6f      	ldr	r3, [pc, #444]	; (800ebfc <fm_menu_config_pass+0x29c>)
 800ea40:	781b      	ldrb	r3, [r3, #0]
 800ea42:	461a      	mov	r2, r3
 800ea44:	4b6e      	ldr	r3, [pc, #440]	; (800ec00 <fm_menu_config_pass+0x2a0>)
 800ea46:	2102      	movs	r1, #2
 800ea48:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 800ea4a:	4b6c      	ldr	r3, [pc, #432]	; (800ebfc <fm_menu_config_pass+0x29c>)
 800ea4c:	781b      	ldrb	r3, [r3, #0]
 800ea4e:	2b02      	cmp	r3, #2
 800ea50:	d80f      	bhi.n	800ea72 <fm_menu_config_pass+0x112>
            {
                event_now = EVENT_LCD_REFRESH;
 800ea52:	2301      	movs	r3, #1
 800ea54:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800ea56:	f107 0313 	add.w	r3, r7, #19
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	4619      	mov	r1, r3
 800ea5e:	4869      	ldr	r0, [pc, #420]	; (800ec04 <fm_menu_config_pass+0x2a4>)
 800ea60:	f7fa fec6 	bl	80097f0 <_txe_queue_send>
                password_index++;
 800ea64:	4b65      	ldr	r3, [pc, #404]	; (800ebfc <fm_menu_config_pass+0x29c>)
 800ea66:	781b      	ldrb	r3, [r3, #0]
 800ea68:	3301      	adds	r3, #1
 800ea6a:	b2da      	uxtb	r2, r3
 800ea6c:	4b63      	ldr	r3, [pc, #396]	; (800ebfc <fm_menu_config_pass+0x29c>)
 800ea6e:	701a      	strb	r2, [r3, #0]
                new_exit = 1;
                ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
                event_now = EVENT_LCD_REFRESH;
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
            }
        break;
 800ea70:	e061      	b.n	800eb36 <fm_menu_config_pass+0x1d6>
                new_exit = 1;
 800ea72:	4b65      	ldr	r3, [pc, #404]	; (800ec08 <fm_menu_config_pass+0x2a8>)
 800ea74:	2201      	movs	r2, #1
 800ea76:	701a      	strb	r2, [r3, #0]
                ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
 800ea78:	4b64      	ldr	r3, [pc, #400]	; (800ec0c <fm_menu_config_pass+0x2ac>)
 800ea7a:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800ea80:	f107 0313 	add.w	r3, r7, #19
 800ea84:	2200      	movs	r2, #0
 800ea86:	4619      	mov	r1, r3
 800ea88:	485e      	ldr	r0, [pc, #376]	; (800ec04 <fm_menu_config_pass+0x2a4>)
 800ea8a:	f7fa feb1 	bl	80097f0 <_txe_queue_send>
        break;
 800ea8e:	e052      	b.n	800eb36 <fm_menu_config_pass+0x1d6>
        case EVENT_KEY_ENTER:
            password[password_index] = 3; // @suppress("Avoid magic numbers")
 800ea90:	4b5a      	ldr	r3, [pc, #360]	; (800ebfc <fm_menu_config_pass+0x29c>)
 800ea92:	781b      	ldrb	r3, [r3, #0]
 800ea94:	461a      	mov	r2, r3
 800ea96:	4b5a      	ldr	r3, [pc, #360]	; (800ec00 <fm_menu_config_pass+0x2a0>)
 800ea98:	2103      	movs	r1, #3
 800ea9a:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 800ea9c:	4b57      	ldr	r3, [pc, #348]	; (800ebfc <fm_menu_config_pass+0x29c>)
 800ea9e:	781b      	ldrb	r3, [r3, #0]
 800eaa0:	2b02      	cmp	r3, #2
 800eaa2:	d80f      	bhi.n	800eac4 <fm_menu_config_pass+0x164>
            {
                event_now = EVENT_LCD_REFRESH;
 800eaa4:	2301      	movs	r3, #1
 800eaa6:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800eaa8:	f107 0313 	add.w	r3, r7, #19
 800eaac:	2200      	movs	r2, #0
 800eaae:	4619      	mov	r1, r3
 800eab0:	4854      	ldr	r0, [pc, #336]	; (800ec04 <fm_menu_config_pass+0x2a4>)
 800eab2:	f7fa fe9d 	bl	80097f0 <_txe_queue_send>
                password_index++;
 800eab6:	4b51      	ldr	r3, [pc, #324]	; (800ebfc <fm_menu_config_pass+0x29c>)
 800eab8:	781b      	ldrb	r3, [r3, #0]
 800eaba:	3301      	adds	r3, #1
 800eabc:	b2da      	uxtb	r2, r3
 800eabe:	4b4f      	ldr	r3, [pc, #316]	; (800ebfc <fm_menu_config_pass+0x29c>)
 800eac0:	701a      	strb	r2, [r3, #0]
                new_exit = 1;
                ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
                event_now = EVENT_LCD_REFRESH;
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
            }
        break;
 800eac2:	e038      	b.n	800eb36 <fm_menu_config_pass+0x1d6>
                new_exit = 1;
 800eac4:	4b50      	ldr	r3, [pc, #320]	; (800ec08 <fm_menu_config_pass+0x2a8>)
 800eac6:	2201      	movs	r2, #1
 800eac8:	701a      	strb	r2, [r3, #0]
                ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
 800eaca:	4b50      	ldr	r3, [pc, #320]	; (800ec0c <fm_menu_config_pass+0x2ac>)
 800eacc:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 800eace:	2301      	movs	r3, #1
 800ead0:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800ead2:	f107 0313 	add.w	r3, r7, #19
 800ead6:	2200      	movs	r2, #0
 800ead8:	4619      	mov	r1, r3
 800eada:	484a      	ldr	r0, [pc, #296]	; (800ec04 <fm_menu_config_pass+0x2a4>)
 800eadc:	f7fa fe88 	bl	80097f0 <_txe_queue_send>
        break;
 800eae0:	e029      	b.n	800eb36 <fm_menu_config_pass+0x1d6>
        case EVENT_KEY_ESC:
            password[password_index] = 4; // @suppress("Avoid magic numbers")
 800eae2:	4b46      	ldr	r3, [pc, #280]	; (800ebfc <fm_menu_config_pass+0x29c>)
 800eae4:	781b      	ldrb	r3, [r3, #0]
 800eae6:	461a      	mov	r2, r3
 800eae8:	4b45      	ldr	r3, [pc, #276]	; (800ec00 <fm_menu_config_pass+0x2a0>)
 800eaea:	2104      	movs	r1, #4
 800eaec:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 800eaee:	4b43      	ldr	r3, [pc, #268]	; (800ebfc <fm_menu_config_pass+0x29c>)
 800eaf0:	781b      	ldrb	r3, [r3, #0]
 800eaf2:	2b02      	cmp	r3, #2
 800eaf4:	d80f      	bhi.n	800eb16 <fm_menu_config_pass+0x1b6>
            {
                event_now = EVENT_LCD_REFRESH;
 800eaf6:	2301      	movs	r3, #1
 800eaf8:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800eafa:	f107 0313 	add.w	r3, r7, #19
 800eafe:	2200      	movs	r2, #0
 800eb00:	4619      	mov	r1, r3
 800eb02:	4840      	ldr	r0, [pc, #256]	; (800ec04 <fm_menu_config_pass+0x2a4>)
 800eb04:	f7fa fe74 	bl	80097f0 <_txe_queue_send>
                password_index++;
 800eb08:	4b3c      	ldr	r3, [pc, #240]	; (800ebfc <fm_menu_config_pass+0x29c>)
 800eb0a:	781b      	ldrb	r3, [r3, #0]
 800eb0c:	3301      	adds	r3, #1
 800eb0e:	b2da      	uxtb	r2, r3
 800eb10:	4b3a      	ldr	r3, [pc, #232]	; (800ebfc <fm_menu_config_pass+0x29c>)
 800eb12:	701a      	strb	r2, [r3, #0]
                new_exit = 1;
                ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
                event_now = EVENT_LCD_REFRESH;
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
            }
        break;
 800eb14:	e00f      	b.n	800eb36 <fm_menu_config_pass+0x1d6>
                new_exit = 1;
 800eb16:	4b3c      	ldr	r3, [pc, #240]	; (800ec08 <fm_menu_config_pass+0x2a8>)
 800eb18:	2201      	movs	r2, #1
 800eb1a:	701a      	strb	r2, [r3, #0]
                ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
 800eb1c:	4b3b      	ldr	r3, [pc, #236]	; (800ec0c <fm_menu_config_pass+0x2ac>)
 800eb1e:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 800eb20:	2301      	movs	r3, #1
 800eb22:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800eb24:	f107 0313 	add.w	r3, r7, #19
 800eb28:	2200      	movs	r2, #0
 800eb2a:	4619      	mov	r1, r3
 800eb2c:	4835      	ldr	r0, [pc, #212]	; (800ec04 <fm_menu_config_pass+0x2a4>)
 800eb2e:	f7fa fe5f 	bl	80097f0 <_txe_queue_send>
        break;
 800eb32:	e000      	b.n	800eb36 <fm_menu_config_pass+0x1d6>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 800eb34:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Password\n";
 800eb36:	4a36      	ldr	r2, [pc, #216]	; (800ec10 <fm_menu_config_pass+0x2b0>)
 800eb38:	f107 0308 	add.w	r3, r7, #8
 800eb3c:	ca07      	ldmia	r2, {r0, r1, r2}
 800eb3e:	c303      	stmia	r3!, {r0, r1}
 800eb40:	801a      	strh	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 800eb42:	f107 0308 	add.w	r3, r7, #8
 800eb46:	210a      	movs	r1, #10
 800eb48:	4618      	mov	r0, r3
 800eb4a:	f7fb fa8d 	bl	800a068 <fm_debug_msg_uart>
#endif

    if (new_exit == 1 && password_index >= PASSWORD_LENGTH - 1)
 800eb4e:	4b2e      	ldr	r3, [pc, #184]	; (800ec08 <fm_menu_config_pass+0x2a8>)
 800eb50:	781b      	ldrb	r3, [r3, #0]
 800eb52:	2b01      	cmp	r3, #1
 800eb54:	d147      	bne.n	800ebe6 <fm_menu_config_pass+0x286>
 800eb56:	4b29      	ldr	r3, [pc, #164]	; (800ebfc <fm_menu_config_pass+0x29c>)
 800eb58:	781b      	ldrb	r3, [r3, #0]
 800eb5a:	2b02      	cmp	r3, #2
 800eb5c:	d943      	bls.n	800ebe6 <fm_menu_config_pass+0x286>
    {
        /*
         * Si la contraseña ingresada es correcta, se activa una flag global que
         * permite modificar los parámetros de los menús de configuración.
         */
        if (password[0] == 2 && password[1] == 1 && password[2] == 1
 800eb5e:	4b28      	ldr	r3, [pc, #160]	; (800ec00 <fm_menu_config_pass+0x2a0>)
 800eb60:	781b      	ldrb	r3, [r3, #0]
 800eb62:	2b02      	cmp	r3, #2
 800eb64:	d10e      	bne.n	800eb84 <fm_menu_config_pass+0x224>
 800eb66:	4b26      	ldr	r3, [pc, #152]	; (800ec00 <fm_menu_config_pass+0x2a0>)
 800eb68:	785b      	ldrb	r3, [r3, #1]
 800eb6a:	2b01      	cmp	r3, #1
 800eb6c:	d10a      	bne.n	800eb84 <fm_menu_config_pass+0x224>
 800eb6e:	4b24      	ldr	r3, [pc, #144]	; (800ec00 <fm_menu_config_pass+0x2a0>)
 800eb70:	789b      	ldrb	r3, [r3, #2]
 800eb72:	2b01      	cmp	r3, #1
 800eb74:	d106      	bne.n	800eb84 <fm_menu_config_pass+0x224>
        && password[PASSWORD_LENGTH - 1] == 3)
 800eb76:	4b22      	ldr	r3, [pc, #136]	; (800ec00 <fm_menu_config_pass+0x2a0>)
 800eb78:	78db      	ldrb	r3, [r3, #3]
 800eb7a:	2b03      	cmp	r3, #3
 800eb7c:	d102      	bne.n	800eb84 <fm_menu_config_pass+0x224>
        {
            correct_password = 1;
 800eb7e:	4b1e      	ldr	r3, [pc, #120]	; (800ebf8 <fm_menu_config_pass+0x298>)
 800eb80:	2201      	movs	r2, #1
 800eb82:	701a      	strb	r2, [r3, #0]
        }
        fm_factory_modify_date(fm_calendar_get_day(),
 800eb84:	f7fb fa06 	bl	8009f94 <fm_calendar_get_day>
 800eb88:	4604      	mov	r4, r0
 800eb8a:	f7fb fa0d 	bl	8009fa8 <fm_calendar_get_month>
 800eb8e:	4605      	mov	r5, r0
 800eb90:	f7fb fa14 	bl	8009fbc <fm_calendar_get_year>
 800eb94:	4603      	mov	r3, r0
 800eb96:	461a      	mov	r2, r3
 800eb98:	4629      	mov	r1, r5
 800eb9a:	4620      	mov	r0, r4
 800eb9c:	f7fb fc22 	bl	800a3e4 <fm_factory_modify_date>
        fm_calendar_get_month(), fm_calendar_get_year());

        fm_factory_modify_time(fm_calendar_get_hour(),
 800eba0:	f7fb f9da 	bl	8009f58 <fm_calendar_get_hour>
 800eba4:	4604      	mov	r4, r0
 800eba6:	f7fb f9e1 	bl	8009f6c <fm_calendar_get_minute>
 800ebaa:	4605      	mov	r5, r0
 800ebac:	f7fb f9e8 	bl	8009f80 <fm_calendar_get_second>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	461a      	mov	r2, r3
 800ebb4:	4629      	mov	r1, r5
 800ebb6:	4620      	mov	r0, r4
 800ebb8:	f7fb fc40 	bl	800a43c <fm_factory_modify_time>
        fm_calendar_get_minute(), fm_calendar_get_second());
        /*
         * Reinicio el arreglo de la contraseña ingresada.
         */
        password_index = 0;
 800ebbc:	4b0f      	ldr	r3, [pc, #60]	; (800ebfc <fm_menu_config_pass+0x29c>)
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	701a      	strb	r2, [r3, #0]
        password[0] = 0;
 800ebc2:	4b0f      	ldr	r3, [pc, #60]	; (800ec00 <fm_menu_config_pass+0x2a0>)
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	701a      	strb	r2, [r3, #0]
        password[1] = 0;
 800ebc8:	4b0d      	ldr	r3, [pc, #52]	; (800ec00 <fm_menu_config_pass+0x2a0>)
 800ebca:	2200      	movs	r2, #0
 800ebcc:	705a      	strb	r2, [r3, #1]
        password[2] = 0;
 800ebce:	4b0c      	ldr	r3, [pc, #48]	; (800ec00 <fm_menu_config_pass+0x2a0>)
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	709a      	strb	r2, [r3, #2]
        password[PASSWORD_LENGTH - 1] = 0;
 800ebd4:	4b0a      	ldr	r3, [pc, #40]	; (800ec00 <fm_menu_config_pass+0x2a0>)
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	70da      	strb	r2, [r3, #3]
        new_entry = 1;
 800ebda:	4b06      	ldr	r3, [pc, #24]	; (800ebf4 <fm_menu_config_pass+0x294>)
 800ebdc:	2201      	movs	r2, #1
 800ebde:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800ebe0:	4b09      	ldr	r3, [pc, #36]	; (800ec08 <fm_menu_config_pass+0x2a8>)
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800ebe6:	697b      	ldr	r3, [r7, #20]
}
 800ebe8:	4618      	mov	r0, r3
 800ebea:	3718      	adds	r7, #24
 800ebec:	46bd      	mov	sp, r7
 800ebee:	bdb0      	pop	{r4, r5, r7, pc}
 800ebf0:	0800e961 	.word	0x0800e961
 800ebf4:	20000148 	.word	0x20000148
 800ebf8:	20001d52 	.word	0x20001d52
 800ebfc:	20001d67 	.word	0x20001d67
 800ec00:	20001d68 	.word	0x20001d68
 800ec04:	20001368 	.word	0x20001368
 800ec08:	20001d6c 	.word	0x20001d6c
 800ec0c:	0800e795 	.word	0x0800e795
 800ec10:	08010668 	.word	0x08010668

0800ec14 <fm_menu_config_units_tim>:
 * volumen y tiempo, como de la resolución de las medidas.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_units_tim(fm_event_t event_id)
{
 800ec14:	b5b0      	push	{r4, r5, r7, lr}
 800ec16:	b0b8      	sub	sp, #224	; 0xe0
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_units_tim;
 800ec1e:	4b77      	ldr	r3, [pc, #476]	; (800edfc <fm_menu_config_units_tim+0x1e8>)
 800ec20:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    fm_event_t event_now;

    if (new_entry == 1)
 800ec24:	4b76      	ldr	r3, [pc, #472]	; (800ee00 <fm_menu_config_units_tim+0x1ec>)
 800ec26:	781b      	ldrb	r3, [r3, #0]
 800ec28:	2b01      	cmp	r3, #1
 800ec2a:	d104      	bne.n	800ec36 <fm_menu_config_units_tim+0x22>
    {
        fm_lcd_clear();
 800ec2c:	f7fc f89d 	bl	800ad6a <fm_lcd_clear>
        new_entry = 0;
 800ec30:	4b73      	ldr	r3, [pc, #460]	; (800ee00 <fm_menu_config_units_tim+0x1ec>)
 800ec32:	2200      	movs	r2, #0
 800ec34:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_units_tim(event_id);
 800ec36:	79fb      	ldrb	r3, [r7, #7]
 800ec38:	4618      	mov	r0, r3
 800ec3a:	f7fc fc25 	bl	800b488 <fm_lcd_units_tim>
    fm_lcd_refresh();
 800ec3e:	f7fc fbb2 	bl	800b3a6 <fm_lcd_refresh>

    switch (event_id)
 800ec42:	79fb      	ldrb	r3, [r7, #7]
 800ec44:	3b01      	subs	r3, #1
 800ec46:	2b04      	cmp	r3, #4
 800ec48:	f200 80b4 	bhi.w	800edb4 <fm_menu_config_units_tim+0x1a0>
 800ec4c:	a201      	add	r2, pc, #4	; (adr r2, 800ec54 <fm_menu_config_units_tim+0x40>)
 800ec4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec52:	bf00      	nop
 800ec54:	0800edb5 	.word	0x0800edb5
 800ec58:	0800ec69 	.word	0x0800ec69
 800ec5c:	0800ecf1 	.word	0x0800ecf1
 800ec60:	0800ed07 	.word	0x0800ed07
 800ec64:	0800ed93 	.word	0x0800ed93
    {
        case EVENT_KEY_UP:
            if (correct_password)
 800ec68:	4b66      	ldr	r3, [pc, #408]	; (800ee04 <fm_menu_config_units_tim+0x1f0>)
 800ec6a:	781b      	ldrb	r3, [r3, #0]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d034      	beq.n	800ecda <fm_menu_config_units_tim+0xc6>
            {
                if (fm_factory_get_rate().unit_time == H)
 800ec70:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ec74:	4618      	mov	r0, r3
 800ec76:	f7fb fa3f 	bl	800a0f8 <fm_factory_get_rate>
 800ec7a:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d103      	bne.n	800ec8a <fm_menu_config_units_tim+0x76>
                {
                    fm_factory_modify_time_units(D);
 800ec82:	2001      	movs	r0, #1
 800ec84:	f7fb fe90 	bl	800a9a8 <fm_factory_modify_time_units>
 800ec88:	e025      	b.n	800ecd6 <fm_menu_config_units_tim+0xc2>
                }
                else if (fm_factory_get_rate().unit_time == D)
 800ec8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ec8e:	4618      	mov	r0, r3
 800ec90:	f7fb fa32 	bl	800a0f8 <fm_factory_get_rate>
 800ec94:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 800ec98:	2b01      	cmp	r3, #1
 800ec9a:	d103      	bne.n	800eca4 <fm_menu_config_units_tim+0x90>
                {
                    fm_factory_modify_time_units(S);
 800ec9c:	2002      	movs	r0, #2
 800ec9e:	f7fb fe83 	bl	800a9a8 <fm_factory_modify_time_units>
 800eca2:	e018      	b.n	800ecd6 <fm_menu_config_units_tim+0xc2>
                }
                else if (fm_factory_get_rate().unit_time == S)
 800eca4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800eca8:	4618      	mov	r0, r3
 800ecaa:	f7fb fa25 	bl	800a0f8 <fm_factory_get_rate>
 800ecae:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 800ecb2:	2b02      	cmp	r3, #2
 800ecb4:	d103      	bne.n	800ecbe <fm_menu_config_units_tim+0xaa>
                {
                    fm_factory_modify_time_units(M);
 800ecb6:	2003      	movs	r0, #3
 800ecb8:	f7fb fe76 	bl	800a9a8 <fm_factory_modify_time_units>
 800ecbc:	e00b      	b.n	800ecd6 <fm_menu_config_units_tim+0xc2>
                }
                else if (fm_factory_get_rate().unit_time == M)
 800ecbe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	f7fb fa18 	bl	800a0f8 <fm_factory_get_rate>
 800ecc8:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 800eccc:	2b03      	cmp	r3, #3
 800ecce:	d102      	bne.n	800ecd6 <fm_menu_config_units_tim+0xc2>
                {
                    fm_factory_modify_time_units(H);
 800ecd0:	2000      	movs	r0, #0
 800ecd2:	f7fb fe69 	bl	800a9a8 <fm_factory_modify_time_units>
                }
                fm_lcd_clear();
 800ecd6:	f7fc f848 	bl	800ad6a <fm_lcd_clear>
            }
            event_now = EVENT_LCD_REFRESH;
 800ecda:	2301      	movs	r3, #1
 800ecdc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800ece0:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800ece4:	2200      	movs	r2, #0
 800ece6:	4619      	mov	r1, r3
 800ece8:	4847      	ldr	r0, [pc, #284]	; (800ee08 <fm_menu_config_units_tim+0x1f4>)
 800ecea:	f7fa fd81 	bl	80097f0 <_txe_queue_send>
        break;
 800ecee:	e062      	b.n	800edb6 <fm_menu_config_units_tim+0x1a2>
        case EVENT_KEY_DOWN:
            event_now = EVENT_LCD_REFRESH;
 800ecf0:	2301      	movs	r3, #1
 800ecf2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800ecf6:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	4619      	mov	r1, r3
 800ecfe:	4842      	ldr	r0, [pc, #264]	; (800ee08 <fm_menu_config_units_tim+0x1f4>)
 800ed00:	f7fa fd76 	bl	80097f0 <_txe_queue_send>
        break;
 800ed04:	e057      	b.n	800edb6 <fm_menu_config_units_tim+0x1a2>
        case EVENT_KEY_ENTER:
            if (correct_password)
 800ed06:	4b3f      	ldr	r3, [pc, #252]	; (800ee04 <fm_menu_config_units_tim+0x1f0>)
 800ed08:	781b      	ldrb	r3, [r3, #0]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d036      	beq.n	800ed7c <fm_menu_config_units_tim+0x168>
            {
                if (fm_factory_get_units_tim().res == RES_0)
 800ed0e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800ed12:	4618      	mov	r0, r3
 800ed14:	f7fb fa18 	bl	800a148 <fm_factory_get_units_tim>
 800ed18:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d104      	bne.n	800ed2a <fm_menu_config_units_tim+0x116>
                {
                    fm_factory_modify_res_rate(RES_1, RES_1);
 800ed20:	2101      	movs	r1, #1
 800ed22:	2001      	movs	r0, #1
 800ed24:	f7fb fe28 	bl	800a978 <fm_factory_modify_res_rate>
 800ed28:	e028      	b.n	800ed7c <fm_menu_config_units_tim+0x168>
                }
                else if (fm_factory_get_units_tim().res == RES_1)
 800ed2a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800ed2e:	4618      	mov	r0, r3
 800ed30:	f7fb fa0a 	bl	800a148 <fm_factory_get_units_tim>
 800ed34:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 800ed38:	2b01      	cmp	r3, #1
 800ed3a:	d104      	bne.n	800ed46 <fm_menu_config_units_tim+0x132>
                {
                    fm_factory_modify_res_rate(RES_2, RES_2);
 800ed3c:	2102      	movs	r1, #2
 800ed3e:	2002      	movs	r0, #2
 800ed40:	f7fb fe1a 	bl	800a978 <fm_factory_modify_res_rate>
 800ed44:	e01a      	b.n	800ed7c <fm_menu_config_units_tim+0x168>
                }
                else if (fm_factory_get_units_tim().res == RES_2)
 800ed46:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f7fb f9fc 	bl	800a148 <fm_factory_get_units_tim>
 800ed50:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
 800ed54:	2b02      	cmp	r3, #2
 800ed56:	d104      	bne.n	800ed62 <fm_menu_config_units_tim+0x14e>
                {
                    fm_factory_modify_res_rate(RES_3, RES_3);
 800ed58:	2103      	movs	r1, #3
 800ed5a:	2003      	movs	r0, #3
 800ed5c:	f7fb fe0c 	bl	800a978 <fm_factory_modify_res_rate>
 800ed60:	e00c      	b.n	800ed7c <fm_menu_config_units_tim+0x168>
                }
                else if (fm_factory_get_units_tim().res == RES_3)
 800ed62:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800ed66:	4618      	mov	r0, r3
 800ed68:	f7fb f9ee 	bl	800a148 <fm_factory_get_units_tim>
 800ed6c:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 800ed70:	2b03      	cmp	r3, #3
 800ed72:	d103      	bne.n	800ed7c <fm_menu_config_units_tim+0x168>
                {
                    fm_factory_modify_res_rate(RES_0, RES_0);
 800ed74:	2100      	movs	r1, #0
 800ed76:	2000      	movs	r0, #0
 800ed78:	f7fb fdfe 	bl	800a978 <fm_factory_modify_res_rate>
                }
            }
            event_now = EVENT_LCD_REFRESH;
 800ed7c:	2301      	movs	r3, #1
 800ed7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800ed82:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800ed86:	2200      	movs	r2, #0
 800ed88:	4619      	mov	r1, r3
 800ed8a:	481f      	ldr	r0, [pc, #124]	; (800ee08 <fm_menu_config_units_tim+0x1f4>)
 800ed8c:	f7fa fd30 	bl	80097f0 <_txe_queue_send>
        break;
 800ed90:	e011      	b.n	800edb6 <fm_menu_config_units_tim+0x1a2>
        case EVENT_KEY_ESC:
            new_exit = 1;
 800ed92:	4b1e      	ldr	r3, [pc, #120]	; (800ee0c <fm_menu_config_units_tim+0x1f8>)
 800ed94:	2201      	movs	r2, #1
 800ed96:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_date_hour;
 800ed98:	4b1d      	ldr	r3, [pc, #116]	; (800ee10 <fm_menu_config_units_tim+0x1fc>)
 800ed9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            event_now = EVENT_LCD_REFRESH;
 800ed9e:	2301      	movs	r3, #1
 800eda0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800eda4:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800eda8:	2200      	movs	r2, #0
 800edaa:	4619      	mov	r1, r3
 800edac:	4816      	ldr	r0, [pc, #88]	; (800ee08 <fm_menu_config_units_tim+0x1f4>)
 800edae:	f7fa fd1f 	bl	80097f0 <_txe_queue_send>
        break;
 800edb2:	e000      	b.n	800edb6 <fm_menu_config_units_tim+0x1a2>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 800edb4:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar unidades de tiempo y resolucion\n";
 800edb6:	4b17      	ldr	r3, [pc, #92]	; (800ee14 <fm_menu_config_units_tim+0x200>)
 800edb8:	f107 0408 	add.w	r4, r7, #8
 800edbc:	461d      	mov	r5, r3
 800edbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800edc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800edc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800edc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800edc6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800edca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 800edce:	f107 0308 	add.w	r3, r7, #8
 800edd2:	212c      	movs	r1, #44	; 0x2c
 800edd4:	4618      	mov	r0, r3
 800edd6:	f7fb f947 	bl	800a068 <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 800edda:	4b0c      	ldr	r3, [pc, #48]	; (800ee0c <fm_menu_config_units_tim+0x1f8>)
 800eddc:	781b      	ldrb	r3, [r3, #0]
 800edde:	2b01      	cmp	r3, #1
 800ede0:	d105      	bne.n	800edee <fm_menu_config_units_tim+0x1da>
    {
        new_entry = 1;
 800ede2:	4b07      	ldr	r3, [pc, #28]	; (800ee00 <fm_menu_config_units_tim+0x1ec>)
 800ede4:	2201      	movs	r2, #1
 800ede6:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800ede8:	4b08      	ldr	r3, [pc, #32]	; (800ee0c <fm_menu_config_units_tim+0x1f8>)
 800edea:	2200      	movs	r2, #0
 800edec:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800edee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
}
 800edf2:	4618      	mov	r0, r3
 800edf4:	37e0      	adds	r7, #224	; 0xe0
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bdb0      	pop	{r4, r5, r7, pc}
 800edfa:	bf00      	nop
 800edfc:	0800ec15 	.word	0x0800ec15
 800ee00:	20000149 	.word	0x20000149
 800ee04:	20001d52 	.word	0x20001d52
 800ee08:	20001368 	.word	0x20001368
 800ee0c:	20001d6d 	.word	0x20001d6d
 800ee10:	0800d75d 	.word	0x0800d75d
 800ee14:	08010688 	.word	0x08010688

0800ee18 <fm_menu_config_units_vol>:
 * volumen y tiempo, como de la resolución de las medidas.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_units_vol(fm_event_t event_id)
{
 800ee18:	b5b0      	push	{r4, r5, r7, lr}
 800ee1a:	b0c8      	sub	sp, #288	; 0x120
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	4602      	mov	r2, r0
 800ee20:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800ee24:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800ee28:	701a      	strb	r2, [r3, #0]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_units_vol;
 800ee2a:	4b8c      	ldr	r3, [pc, #560]	; (800f05c <fm_menu_config_units_vol+0x244>)
 800ee2c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    fm_event_t event_now;

    if (new_entry == 1)
 800ee30:	4b8b      	ldr	r3, [pc, #556]	; (800f060 <fm_menu_config_units_vol+0x248>)
 800ee32:	781b      	ldrb	r3, [r3, #0]
 800ee34:	2b01      	cmp	r3, #1
 800ee36:	d104      	bne.n	800ee42 <fm_menu_config_units_vol+0x2a>
    {
        fm_lcd_clear();
 800ee38:	f7fb ff97 	bl	800ad6a <fm_lcd_clear>
        new_entry = 0;
 800ee3c:	4b88      	ldr	r3, [pc, #544]	; (800f060 <fm_menu_config_units_vol+0x248>)
 800ee3e:	2200      	movs	r2, #0
 800ee40:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_units_vol(event_id);
 800ee42:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800ee46:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800ee4a:	781b      	ldrb	r3, [r3, #0]
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	f7fc fba7 	bl	800b5a0 <fm_lcd_units_vol>
    fm_lcd_refresh();
 800ee52:	f7fc faa8 	bl	800b3a6 <fm_lcd_refresh>

    switch (event_id)
 800ee56:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800ee5a:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800ee5e:	781b      	ldrb	r3, [r3, #0]
 800ee60:	3b01      	subs	r3, #1
 800ee62:	2b04      	cmp	r3, #4
 800ee64:	f200 80d2 	bhi.w	800f00c <fm_menu_config_units_vol+0x1f4>
 800ee68:	a201      	add	r2, pc, #4	; (adr r2, 800ee70 <fm_menu_config_units_vol+0x58>)
 800ee6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee6e:	bf00      	nop
 800ee70:	0800f00d 	.word	0x0800f00d
 800ee74:	0800ee85 	.word	0x0800ee85
 800ee78:	0800ef41 	.word	0x0800ef41
 800ee7c:	0800ef57 	.word	0x0800ef57
 800ee80:	0800efeb 	.word	0x0800efeb
    {
        case EVENT_KEY_UP:
            if (correct_password)
 800ee84:	4b77      	ldr	r3, [pc, #476]	; (800f064 <fm_menu_config_units_vol+0x24c>)
 800ee86:	781b      	ldrb	r3, [r3, #0]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d04e      	beq.n	800ef2a <fm_menu_config_units_vol+0x112>
            {
                if (fm_factory_get_acm().unit_volume == LT)
 800ee8c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ee90:	4618      	mov	r0, r3
 800ee92:	f7fb f905 	bl	800a0a0 <fm_factory_get_acm>
 800ee96:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d103      	bne.n	800eea6 <fm_menu_config_units_vol+0x8e>
                {
                    fm_factory_modify_volume_units(M3);
 800ee9e:	2001      	movs	r0, #1
 800eea0:	f7fb fd9c 	bl	800a9dc <fm_factory_modify_volume_units>
 800eea4:	e03f      	b.n	800ef26 <fm_menu_config_units_vol+0x10e>
                }
                else if (fm_factory_get_acm().unit_volume == M3)
 800eea6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800eeaa:	4618      	mov	r0, r3
 800eeac:	f7fb f8f8 	bl	800a0a0 <fm_factory_get_acm>
 800eeb0:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800eeb4:	2b01      	cmp	r3, #1
 800eeb6:	d103      	bne.n	800eec0 <fm_menu_config_units_vol+0xa8>
                {
                    fm_factory_modify_volume_units(KG);
 800eeb8:	2002      	movs	r0, #2
 800eeba:	f7fb fd8f 	bl	800a9dc <fm_factory_modify_volume_units>
 800eebe:	e032      	b.n	800ef26 <fm_menu_config_units_vol+0x10e>
                }
                else if (fm_factory_get_acm().unit_volume == KG)
 800eec0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800eec4:	4618      	mov	r0, r3
 800eec6:	f7fb f8eb 	bl	800a0a0 <fm_factory_get_acm>
 800eeca:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 800eece:	2b02      	cmp	r3, #2
 800eed0:	d103      	bne.n	800eeda <fm_menu_config_units_vol+0xc2>
                {
                    fm_factory_modify_volume_units(GL);
 800eed2:	2003      	movs	r0, #3
 800eed4:	f7fb fd82 	bl	800a9dc <fm_factory_modify_volume_units>
 800eed8:	e025      	b.n	800ef26 <fm_menu_config_units_vol+0x10e>
                }
                else if (fm_factory_get_acm().unit_volume == GL)
 800eeda:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800eede:	4618      	mov	r0, r3
 800eee0:	f7fb f8de 	bl	800a0a0 <fm_factory_get_acm>
 800eee4:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 800eee8:	2b03      	cmp	r3, #3
 800eeea:	d103      	bne.n	800eef4 <fm_menu_config_units_vol+0xdc>
                {
                    fm_factory_modify_volume_units(BR);
 800eeec:	2004      	movs	r0, #4
 800eeee:	f7fb fd75 	bl	800a9dc <fm_factory_modify_volume_units>
 800eef2:	e018      	b.n	800ef26 <fm_menu_config_units_vol+0x10e>
                }
                else if (fm_factory_get_acm().unit_volume == BR)
 800eef4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800eef8:	4618      	mov	r0, r3
 800eefa:	f7fb f8d1 	bl	800a0a0 <fm_factory_get_acm>
 800eefe:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
 800ef02:	2b04      	cmp	r3, #4
 800ef04:	d103      	bne.n	800ef0e <fm_menu_config_units_vol+0xf6>
                {
                    fm_factory_modify_volume_units(NOTHING);
 800ef06:	2006      	movs	r0, #6
 800ef08:	f7fb fd68 	bl	800a9dc <fm_factory_modify_volume_units>
 800ef0c:	e00b      	b.n	800ef26 <fm_menu_config_units_vol+0x10e>
                }
                else if (fm_factory_get_acm().unit_volume == NOTHING)
 800ef0e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800ef12:	4618      	mov	r0, r3
 800ef14:	f7fb f8c4 	bl	800a0a0 <fm_factory_get_acm>
 800ef18:	f897 30f0 	ldrb.w	r3, [r7, #240]	; 0xf0
 800ef1c:	2b06      	cmp	r3, #6
 800ef1e:	d102      	bne.n	800ef26 <fm_menu_config_units_vol+0x10e>
                {
                    fm_factory_modify_volume_units(LT);
 800ef20:	2000      	movs	r0, #0
 800ef22:	f7fb fd5b 	bl	800a9dc <fm_factory_modify_volume_units>
                }
                fm_lcd_clear();
 800ef26:	f7fb ff20 	bl	800ad6a <fm_lcd_clear>
            }
            event_now = EVENT_LCD_REFRESH;
 800ef2a:	2301      	movs	r3, #1
 800ef2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800ef30:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800ef34:	2200      	movs	r2, #0
 800ef36:	4619      	mov	r1, r3
 800ef38:	484b      	ldr	r0, [pc, #300]	; (800f068 <fm_menu_config_units_vol+0x250>)
 800ef3a:	f7fa fc59 	bl	80097f0 <_txe_queue_send>
        break;
 800ef3e:	e066      	b.n	800f00e <fm_menu_config_units_vol+0x1f6>
        case EVENT_KEY_DOWN:
            event_now = EVENT_LCD_REFRESH;
 800ef40:	2301      	movs	r3, #1
 800ef42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800ef46:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	4619      	mov	r1, r3
 800ef4e:	4846      	ldr	r0, [pc, #280]	; (800f068 <fm_menu_config_units_vol+0x250>)
 800ef50:	f7fa fc4e 	bl	80097f0 <_txe_queue_send>
        break;
 800ef54:	e05b      	b.n	800f00e <fm_menu_config_units_vol+0x1f6>
        case EVENT_KEY_ENTER:
            if (correct_password)
 800ef56:	4b43      	ldr	r3, [pc, #268]	; (800f064 <fm_menu_config_units_vol+0x24c>)
 800ef58:	781b      	ldrb	r3, [r3, #0]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d03a      	beq.n	800efd4 <fm_menu_config_units_vol+0x1bc>
            {
                if (fm_factory_get_units_vol().res == RES_0)
 800ef5e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800ef62:	4618      	mov	r0, r3
 800ef64:	f7fb f902 	bl	800a16c <fm_factory_get_units_vol>
 800ef68:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d105      	bne.n	800ef7c <fm_menu_config_units_vol+0x164>
                {
                    fm_factory_modify_res_acm_ttl(RES_1, RES_1, RES_1);
 800ef70:	2201      	movs	r2, #1
 800ef72:	2101      	movs	r1, #1
 800ef74:	2001      	movs	r0, #1
 800ef76:	f7fb fce1 	bl	800a93c <fm_factory_modify_res_acm_ttl>
 800ef7a:	e02b      	b.n	800efd4 <fm_menu_config_units_vol+0x1bc>
                }
                else if (fm_factory_get_units_vol().res == RES_1)
 800ef7c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800ef80:	4618      	mov	r0, r3
 800ef82:	f7fb f8f3 	bl	800a16c <fm_factory_get_units_vol>
 800ef86:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 800ef8a:	2b01      	cmp	r3, #1
 800ef8c:	d105      	bne.n	800ef9a <fm_menu_config_units_vol+0x182>
                {
                    fm_factory_modify_res_acm_ttl(RES_2, RES_2, RES_2);
 800ef8e:	2202      	movs	r2, #2
 800ef90:	2102      	movs	r1, #2
 800ef92:	2002      	movs	r0, #2
 800ef94:	f7fb fcd2 	bl	800a93c <fm_factory_modify_res_acm_ttl>
 800ef98:	e01c      	b.n	800efd4 <fm_menu_config_units_vol+0x1bc>
                }
                else if (fm_factory_get_units_vol().res == RES_2)
 800ef9a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f7fb f8e4 	bl	800a16c <fm_factory_get_units_vol>
 800efa4:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 800efa8:	2b02      	cmp	r3, #2
 800efaa:	d105      	bne.n	800efb8 <fm_menu_config_units_vol+0x1a0>
                {
                    fm_factory_modify_res_acm_ttl(RES_3, RES_3, RES_3);
 800efac:	2203      	movs	r2, #3
 800efae:	2103      	movs	r1, #3
 800efb0:	2003      	movs	r0, #3
 800efb2:	f7fb fcc3 	bl	800a93c <fm_factory_modify_res_acm_ttl>
 800efb6:	e00d      	b.n	800efd4 <fm_menu_config_units_vol+0x1bc>
                }
                else if (fm_factory_get_units_vol().res == RES_3)
 800efb8:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800efbc:	4618      	mov	r0, r3
 800efbe:	f7fb f8d5 	bl	800a16c <fm_factory_get_units_vol>
 800efc2:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 800efc6:	2b03      	cmp	r3, #3
 800efc8:	d104      	bne.n	800efd4 <fm_menu_config_units_vol+0x1bc>
                {
                    fm_factory_modify_res_acm_ttl(RES_0, RES_0, RES_0);
 800efca:	2200      	movs	r2, #0
 800efcc:	2100      	movs	r1, #0
 800efce:	2000      	movs	r0, #0
 800efd0:	f7fb fcb4 	bl	800a93c <fm_factory_modify_res_acm_ttl>
                }
            }
            event_now = EVENT_LCD_REFRESH;
 800efd4:	2301      	movs	r3, #1
 800efd6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800efda:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800efde:	2200      	movs	r2, #0
 800efe0:	4619      	mov	r1, r3
 800efe2:	4821      	ldr	r0, [pc, #132]	; (800f068 <fm_menu_config_units_vol+0x250>)
 800efe4:	f7fa fc04 	bl	80097f0 <_txe_queue_send>
        break;
 800efe8:	e011      	b.n	800f00e <fm_menu_config_units_vol+0x1f6>
        case EVENT_KEY_ESC:
            new_exit = 1;
 800efea:	4b20      	ldr	r3, [pc, #128]	; (800f06c <fm_menu_config_units_vol+0x254>)
 800efec:	2201      	movs	r2, #1
 800efee:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_units_tim;
 800eff0:	4b1f      	ldr	r3, [pc, #124]	; (800f070 <fm_menu_config_units_vol+0x258>)
 800eff2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            event_now = EVENT_LCD_REFRESH;
 800eff6:	2301      	movs	r3, #1
 800eff8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800effc:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800f000:	2200      	movs	r2, #0
 800f002:	4619      	mov	r1, r3
 800f004:	4818      	ldr	r0, [pc, #96]	; (800f068 <fm_menu_config_units_vol+0x250>)
 800f006:	f7fa fbf3 	bl	80097f0 <_txe_queue_send>
        break;
 800f00a:	e000      	b.n	800f00e <fm_menu_config_units_vol+0x1f6>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 800f00c:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar unidades de volumen y resolucion\n";
 800f00e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800f012:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800f016:	4a17      	ldr	r2, [pc, #92]	; (800f074 <fm_menu_config_units_vol+0x25c>)
 800f018:	461c      	mov	r4, r3
 800f01a:	4615      	mov	r5, r2
 800f01c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f01e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f020:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f022:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f024:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f028:	c407      	stmia	r4!, {r0, r1, r2}
 800f02a:	7023      	strb	r3, [r4, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 800f02c:	f107 0308 	add.w	r3, r7, #8
 800f030:	212d      	movs	r1, #45	; 0x2d
 800f032:	4618      	mov	r0, r3
 800f034:	f7fb f818 	bl	800a068 <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 800f038:	4b0c      	ldr	r3, [pc, #48]	; (800f06c <fm_menu_config_units_vol+0x254>)
 800f03a:	781b      	ldrb	r3, [r3, #0]
 800f03c:	2b01      	cmp	r3, #1
 800f03e:	d105      	bne.n	800f04c <fm_menu_config_units_vol+0x234>
    {
        new_entry = 1;
 800f040:	4b07      	ldr	r3, [pc, #28]	; (800f060 <fm_menu_config_units_vol+0x248>)
 800f042:	2201      	movs	r2, #1
 800f044:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800f046:	4b09      	ldr	r3, [pc, #36]	; (800f06c <fm_menu_config_units_vol+0x254>)
 800f048:	2200      	movs	r2, #0
 800f04a:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800f04c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
}
 800f050:	4618      	mov	r0, r3
 800f052:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800f056:	46bd      	mov	sp, r7
 800f058:	bdb0      	pop	{r4, r5, r7, pc}
 800f05a:	bf00      	nop
 800f05c:	0800ee19 	.word	0x0800ee19
 800f060:	2000014a 	.word	0x2000014a
 800f064:	20001d52 	.word	0x20001d52
 800f068:	20001368 	.word	0x20001368
 800f06c:	20001d6e 	.word	0x20001d6e
 800f070:	0800ec15 	.word	0x0800ec15
 800f074:	080106b4 	.word	0x080106b4

0800f078 <fm_menu_show_acm_rate>:
 * unidades y puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_acm_rate(fm_event_t event_id)
{
 800f078:	b580      	push	{r7, lr}
 800f07a:	b086      	sub	sp, #24
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	4603      	mov	r3, r0
 800f080:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_rate;
 800f082:	4b35      	ldr	r3, [pc, #212]	; (800f158 <fm_menu_show_acm_rate+0xe0>)
 800f084:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 800f086:	4b35      	ldr	r3, [pc, #212]	; (800f15c <fm_menu_show_acm_rate+0xe4>)
 800f088:	781b      	ldrb	r3, [r3, #0]
 800f08a:	2b01      	cmp	r3, #1
 800f08c:	d104      	bne.n	800f098 <fm_menu_show_acm_rate+0x20>
    {
        fm_lcd_clear();
 800f08e:	f7fb fe6c 	bl	800ad6a <fm_lcd_clear>
        new_entry = 0;
 800f092:	4b32      	ldr	r3, [pc, #200]	; (800f15c <fm_menu_show_acm_rate+0xe4>)
 800f094:	2200      	movs	r2, #0
 800f096:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_acm_rate();
 800f098:	f7fb fda4 	bl	800abe4 <fm_lcd_acm_rate>
    fm_lcd_refresh();
 800f09c:	f7fc f983 	bl	800b3a6 <fm_lcd_refresh>

    switch (event_id)
 800f0a0:	79fb      	ldrb	r3, [r7, #7]
 800f0a2:	3b01      	subs	r3, #1
 800f0a4:	2b04      	cmp	r3, #4
 800f0a6:	d83a      	bhi.n	800f11e <fm_menu_show_acm_rate+0xa6>
 800f0a8:	a201      	add	r2, pc, #4	; (adr r2, 800f0b0 <fm_menu_show_acm_rate+0x38>)
 800f0aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0ae:	bf00      	nop
 800f0b0:	0800f11f 	.word	0x0800f11f
 800f0b4:	0800f0c5 	.word	0x0800f0c5
 800f0b8:	0800f0e3 	.word	0x0800f0e3
 800f0bc:	0800f11f 	.word	0x0800f11f
 800f0c0:	0800f101 	.word	0x0800f101
    {
        case EVENT_KEY_UP:
            new_exit = 1;
 800f0c4:	4b26      	ldr	r3, [pc, #152]	; (800f160 <fm_menu_show_acm_rate+0xe8>)
 800f0c6:	2201      	movs	r2, #1
 800f0c8:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 800f0ca:	4b26      	ldr	r3, [pc, #152]	; (800f164 <fm_menu_show_acm_rate+0xec>)
 800f0cc:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 800f0ce:	2301      	movs	r3, #1
 800f0d0:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800f0d2:	f107 0313 	add.w	r3, r7, #19
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	4619      	mov	r1, r3
 800f0da:	4823      	ldr	r0, [pc, #140]	; (800f168 <fm_menu_show_acm_rate+0xf0>)
 800f0dc:	f7fa fb88 	bl	80097f0 <_txe_queue_send>
        break;
 800f0e0:	e01e      	b.n	800f120 <fm_menu_show_acm_rate+0xa8>
        case EVENT_KEY_DOWN:
            new_exit = 1;
 800f0e2:	4b1f      	ldr	r3, [pc, #124]	; (800f160 <fm_menu_show_acm_rate+0xe8>)
 800f0e4:	2201      	movs	r2, #1
 800f0e6:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_temp;
 800f0e8:	4b20      	ldr	r3, [pc, #128]	; (800f16c <fm_menu_show_acm_rate+0xf4>)
 800f0ea:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 800f0ec:	2301      	movs	r3, #1
 800f0ee:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800f0f0:	f107 0313 	add.w	r3, r7, #19
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	4619      	mov	r1, r3
 800f0f8:	481b      	ldr	r0, [pc, #108]	; (800f168 <fm_menu_show_acm_rate+0xf0>)
 800f0fa:	f7fa fb79 	bl	80097f0 <_txe_queue_send>
        break;
 800f0fe:	e00f      	b.n	800f120 <fm_menu_show_acm_rate+0xa8>
        case EVENT_KEY_ENTER:
        break;
        case EVENT_KEY_ESC:
            new_exit = 1;
 800f100:	4b17      	ldr	r3, [pc, #92]	; (800f160 <fm_menu_show_acm_rate+0xe8>)
 800f102:	2201      	movs	r2, #1
 800f104:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 800f106:	4b1a      	ldr	r3, [pc, #104]	; (800f170 <fm_menu_show_acm_rate+0xf8>)
 800f108:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 800f10a:	2301      	movs	r3, #1
 800f10c:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800f10e:	f107 0313 	add.w	r3, r7, #19
 800f112:	2200      	movs	r2, #0
 800f114:	4619      	mov	r1, r3
 800f116:	4814      	ldr	r0, [pc, #80]	; (800f168 <fm_menu_show_acm_rate+0xf0>)
 800f118:	f7fa fb6a 	bl	80097f0 <_txe_queue_send>
        break;
 800f11c:	e000      	b.n	800f120 <fm_menu_show_acm_rate+0xa8>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 800f11e:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "acm_rate\n";
 800f120:	4a14      	ldr	r2, [pc, #80]	; (800f174 <fm_menu_show_acm_rate+0xfc>)
 800f122:	f107 0308 	add.w	r3, r7, #8
 800f126:	ca07      	ldmia	r2, {r0, r1, r2}
 800f128:	c303      	stmia	r3!, {r0, r1}
 800f12a:	801a      	strh	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 800f12c:	f107 0308 	add.w	r3, r7, #8
 800f130:	210a      	movs	r1, #10
 800f132:	4618      	mov	r0, r3
 800f134:	f7fa ff98 	bl	800a068 <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 800f138:	4b09      	ldr	r3, [pc, #36]	; (800f160 <fm_menu_show_acm_rate+0xe8>)
 800f13a:	781b      	ldrb	r3, [r3, #0]
 800f13c:	2b01      	cmp	r3, #1
 800f13e:	d105      	bne.n	800f14c <fm_menu_show_acm_rate+0xd4>
    {
        new_entry = 1;
 800f140:	4b06      	ldr	r3, [pc, #24]	; (800f15c <fm_menu_show_acm_rate+0xe4>)
 800f142:	2201      	movs	r2, #1
 800f144:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800f146:	4b06      	ldr	r3, [pc, #24]	; (800f160 <fm_menu_show_acm_rate+0xe8>)
 800f148:	2200      	movs	r2, #0
 800f14a:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800f14c:	697b      	ldr	r3, [r7, #20]
}
 800f14e:	4618      	mov	r0, r3
 800f150:	3718      	adds	r7, #24
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}
 800f156:	bf00      	nop
 800f158:	0800f079 	.word	0x0800f079
 800f15c:	2000014b 	.word	0x2000014b
 800f160:	20001d6f 	.word	0x20001d6f
 800f164:	0800f48d 	.word	0x0800f48d
 800f168:	20001368 	.word	0x20001368
 800f16c:	0800f179 	.word	0x0800f179
 800f170:	0800e961 	.word	0x0800e961
 800f174:	080106e4 	.word	0x080106e4

0800f178 <fm_menu_show_acm_temp>:
 * la pantalla.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_acm_temp(fm_event_t event_id)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b086      	sub	sp, #24
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	4603      	mov	r3, r0
 800f180:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_temp;
 800f182:	4b35      	ldr	r3, [pc, #212]	; (800f258 <fm_menu_show_acm_temp+0xe0>)
 800f184:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 800f186:	4b35      	ldr	r3, [pc, #212]	; (800f25c <fm_menu_show_acm_temp+0xe4>)
 800f188:	781b      	ldrb	r3, [r3, #0]
 800f18a:	2b01      	cmp	r3, #1
 800f18c:	d104      	bne.n	800f198 <fm_menu_show_acm_temp+0x20>
    {
        fm_lcd_clear();
 800f18e:	f7fb fdec 	bl	800ad6a <fm_lcd_clear>
        new_entry = 0;
 800f192:	4b32      	ldr	r3, [pc, #200]	; (800f25c <fm_menu_show_acm_temp+0xe4>)
 800f194:	2200      	movs	r2, #0
 800f196:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_acm_temp();
 800f198:	f7fb fd8f 	bl	800acba <fm_lcd_acm_temp>
    fm_lcd_refresh();
 800f19c:	f7fc f903 	bl	800b3a6 <fm_lcd_refresh>

    switch (event_id)
 800f1a0:	79fb      	ldrb	r3, [r7, #7]
 800f1a2:	3b01      	subs	r3, #1
 800f1a4:	2b04      	cmp	r3, #4
 800f1a6:	d83a      	bhi.n	800f21e <fm_menu_show_acm_temp+0xa6>
 800f1a8:	a201      	add	r2, pc, #4	; (adr r2, 800f1b0 <fm_menu_show_acm_temp+0x38>)
 800f1aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1ae:	bf00      	nop
 800f1b0:	0800f21f 	.word	0x0800f21f
 800f1b4:	0800f1c5 	.word	0x0800f1c5
 800f1b8:	0800f1e3 	.word	0x0800f1e3
 800f1bc:	0800f21f 	.word	0x0800f21f
 800f1c0:	0800f201 	.word	0x0800f201
    {
        case EVENT_KEY_UP:
            new_exit = 1;
 800f1c4:	4b26      	ldr	r3, [pc, #152]	; (800f260 <fm_menu_show_acm_temp+0xe8>)
 800f1c6:	2201      	movs	r2, #1
 800f1c8:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_rate;
 800f1ca:	4b26      	ldr	r3, [pc, #152]	; (800f264 <fm_menu_show_acm_temp+0xec>)
 800f1cc:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 800f1ce:	2301      	movs	r3, #1
 800f1d0:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800f1d2:	f107 0313 	add.w	r3, r7, #19
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	4619      	mov	r1, r3
 800f1da:	4823      	ldr	r0, [pc, #140]	; (800f268 <fm_menu_show_acm_temp+0xf0>)
 800f1dc:	f7fa fb08 	bl	80097f0 <_txe_queue_send>
        break;
 800f1e0:	e01e      	b.n	800f220 <fm_menu_show_acm_temp+0xa8>
        case EVENT_KEY_DOWN:
            new_exit = 1;
 800f1e2:	4b1f      	ldr	r3, [pc, #124]	; (800f260 <fm_menu_show_acm_temp+0xe8>)
 800f1e4:	2201      	movs	r2, #1
 800f1e6:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_date_hour;
 800f1e8:	4b20      	ldr	r3, [pc, #128]	; (800f26c <fm_menu_show_acm_temp+0xf4>)
 800f1ea:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 800f1ec:	2301      	movs	r3, #1
 800f1ee:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800f1f0:	f107 0313 	add.w	r3, r7, #19
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	4619      	mov	r1, r3
 800f1f8:	481b      	ldr	r0, [pc, #108]	; (800f268 <fm_menu_show_acm_temp+0xf0>)
 800f1fa:	f7fa faf9 	bl	80097f0 <_txe_queue_send>
        break;
 800f1fe:	e00f      	b.n	800f220 <fm_menu_show_acm_temp+0xa8>
        case EVENT_KEY_ENTER:
        break;
        case EVENT_KEY_ESC:
            new_exit = 1;
 800f200:	4b17      	ldr	r3, [pc, #92]	; (800f260 <fm_menu_show_acm_temp+0xe8>)
 800f202:	2201      	movs	r2, #1
 800f204:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 800f206:	4b1a      	ldr	r3, [pc, #104]	; (800f270 <fm_menu_show_acm_temp+0xf8>)
 800f208:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 800f20a:	2301      	movs	r3, #1
 800f20c:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800f20e:	f107 0313 	add.w	r3, r7, #19
 800f212:	2200      	movs	r2, #0
 800f214:	4619      	mov	r1, r3
 800f216:	4814      	ldr	r0, [pc, #80]	; (800f268 <fm_menu_show_acm_temp+0xf0>)
 800f218:	f7fa faea 	bl	80097f0 <_txe_queue_send>
        break;
 800f21c:	e000      	b.n	800f220 <fm_menu_show_acm_temp+0xa8>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 800f21e:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "acm_temp\n";
 800f220:	4a14      	ldr	r2, [pc, #80]	; (800f274 <fm_menu_show_acm_temp+0xfc>)
 800f222:	f107 0308 	add.w	r3, r7, #8
 800f226:	ca07      	ldmia	r2, {r0, r1, r2}
 800f228:	c303      	stmia	r3!, {r0, r1}
 800f22a:	801a      	strh	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 800f22c:	f107 0308 	add.w	r3, r7, #8
 800f230:	210a      	movs	r1, #10
 800f232:	4618      	mov	r0, r3
 800f234:	f7fa ff18 	bl	800a068 <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 800f238:	4b09      	ldr	r3, [pc, #36]	; (800f260 <fm_menu_show_acm_temp+0xe8>)
 800f23a:	781b      	ldrb	r3, [r3, #0]
 800f23c:	2b01      	cmp	r3, #1
 800f23e:	d105      	bne.n	800f24c <fm_menu_show_acm_temp+0xd4>
    {
        new_entry = 1;
 800f240:	4b06      	ldr	r3, [pc, #24]	; (800f25c <fm_menu_show_acm_temp+0xe4>)
 800f242:	2201      	movs	r2, #1
 800f244:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800f246:	4b06      	ldr	r3, [pc, #24]	; (800f260 <fm_menu_show_acm_temp+0xe8>)
 800f248:	2200      	movs	r2, #0
 800f24a:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800f24c:	697b      	ldr	r3, [r7, #20]
}
 800f24e:	4618      	mov	r0, r3
 800f250:	3718      	adds	r7, #24
 800f252:	46bd      	mov	sp, r7
 800f254:	bd80      	pop	{r7, pc}
 800f256:	bf00      	nop
 800f258:	0800f179 	.word	0x0800f179
 800f25c:	2000014c 	.word	0x2000014c
 800f260:	20001d70 	.word	0x20001d70
 800f264:	0800f079 	.word	0x0800f079
 800f268:	20001368 	.word	0x20001368
 800f26c:	0800f279 	.word	0x0800f279
 800f270:	0800e961 	.word	0x0800e961
 800f274:	080106f0 	.word	0x080106f0

0800f278 <fm_menu_show_date_hour>:
 * unidades y puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_date_hour(fm_event_t event_id)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b086      	sub	sp, #24
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	4603      	mov	r3, r0
 800f280:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_date_hour;
 800f282:	4b31      	ldr	r3, [pc, #196]	; (800f348 <fm_menu_show_date_hour+0xd0>)
 800f284:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 800f286:	4b31      	ldr	r3, [pc, #196]	; (800f34c <fm_menu_show_date_hour+0xd4>)
 800f288:	781b      	ldrb	r3, [r3, #0]
 800f28a:	2b01      	cmp	r3, #1
 800f28c:	d104      	bne.n	800f298 <fm_menu_show_date_hour+0x20>
    {
        fm_lcd_clear();
 800f28e:	f7fb fd6c 	bl	800ad6a <fm_lcd_clear>
        new_entry = 0;
 800f292:	4b2e      	ldr	r3, [pc, #184]	; (800f34c <fm_menu_show_date_hour+0xd4>)
 800f294:	2200      	movs	r2, #0
 800f296:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_date_hour(USER, event_id, DAY);
 800f298:	79fb      	ldrb	r3, [r7, #7]
 800f29a:	2200      	movs	r2, #0
 800f29c:	4619      	mov	r1, r3
 800f29e:	2000      	movs	r0, #0
 800f2a0:	f7fb fd6a 	bl	800ad78 <fm_lcd_date_hour>

    fm_lcd_refresh();
 800f2a4:	f7fc f87f 	bl	800b3a6 <fm_lcd_refresh>

    switch (event_id)
 800f2a8:	79fb      	ldrb	r3, [r7, #7]
 800f2aa:	3b01      	subs	r3, #1
 800f2ac:	2b04      	cmp	r3, #4
 800f2ae:	d82b      	bhi.n	800f308 <fm_menu_show_date_hour+0x90>
 800f2b0:	a201      	add	r2, pc, #4	; (adr r2, 800f2b8 <fm_menu_show_date_hour+0x40>)
 800f2b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2b6:	bf00      	nop
 800f2b8:	0800f309 	.word	0x0800f309
 800f2bc:	0800f2cd 	.word	0x0800f2cd
 800f2c0:	0800f309 	.word	0x0800f309
 800f2c4:	0800f309 	.word	0x0800f309
 800f2c8:	0800f2eb 	.word	0x0800f2eb
    {
        case EVENT_KEY_UP:
            new_exit = 1;
 800f2cc:	4b20      	ldr	r3, [pc, #128]	; (800f350 <fm_menu_show_date_hour+0xd8>)
 800f2ce:	2201      	movs	r2, #1
 800f2d0:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_temp;
 800f2d2:	4b20      	ldr	r3, [pc, #128]	; (800f354 <fm_menu_show_date_hour+0xdc>)
 800f2d4:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 800f2d6:	2301      	movs	r3, #1
 800f2d8:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800f2da:	f107 0313 	add.w	r3, r7, #19
 800f2de:	2200      	movs	r2, #0
 800f2e0:	4619      	mov	r1, r3
 800f2e2:	481d      	ldr	r0, [pc, #116]	; (800f358 <fm_menu_show_date_hour+0xe0>)
 800f2e4:	f7fa fa84 	bl	80097f0 <_txe_queue_send>
        break;
 800f2e8:	e00f      	b.n	800f30a <fm_menu_show_date_hour+0x92>
        case EVENT_KEY_DOWN:
        break;
        case EVENT_KEY_ENTER:
        break;
        case EVENT_KEY_ESC:
            new_exit = 1;
 800f2ea:	4b19      	ldr	r3, [pc, #100]	; (800f350 <fm_menu_show_date_hour+0xd8>)
 800f2ec:	2201      	movs	r2, #1
 800f2ee:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 800f2f0:	4b1a      	ldr	r3, [pc, #104]	; (800f35c <fm_menu_show_date_hour+0xe4>)
 800f2f2:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 800f2f4:	2301      	movs	r3, #1
 800f2f6:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800f2f8:	f107 0313 	add.w	r3, r7, #19
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	4619      	mov	r1, r3
 800f300:	4815      	ldr	r0, [pc, #84]	; (800f358 <fm_menu_show_date_hour+0xe0>)
 800f302:	f7fa fa75 	bl	80097f0 <_txe_queue_send>
        break;
 800f306:	e000      	b.n	800f30a <fm_menu_show_date_hour+0x92>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 800f308:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer3[] = "date_hour\n";
 800f30a:	4a15      	ldr	r2, [pc, #84]	; (800f360 <fm_menu_show_date_hour+0xe8>)
 800f30c:	f107 0308 	add.w	r3, r7, #8
 800f310:	ca07      	ldmia	r2, {r0, r1, r2}
 800f312:	c303      	stmia	r3!, {r0, r1}
 800f314:	801a      	strh	r2, [r3, #0]
 800f316:	3302      	adds	r3, #2
 800f318:	0c12      	lsrs	r2, r2, #16
 800f31a:	701a      	strb	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer3, sizeof(msg_buffer3));
 800f31c:	f107 0308 	add.w	r3, r7, #8
 800f320:	210b      	movs	r1, #11
 800f322:	4618      	mov	r0, r3
 800f324:	f7fa fea0 	bl	800a068 <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 800f328:	4b09      	ldr	r3, [pc, #36]	; (800f350 <fm_menu_show_date_hour+0xd8>)
 800f32a:	781b      	ldrb	r3, [r3, #0]
 800f32c:	2b01      	cmp	r3, #1
 800f32e:	d105      	bne.n	800f33c <fm_menu_show_date_hour+0xc4>
    {
        new_entry = 1;
 800f330:	4b06      	ldr	r3, [pc, #24]	; (800f34c <fm_menu_show_date_hour+0xd4>)
 800f332:	2201      	movs	r2, #1
 800f334:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800f336:	4b06      	ldr	r3, [pc, #24]	; (800f350 <fm_menu_show_date_hour+0xd8>)
 800f338:	2200      	movs	r2, #0
 800f33a:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800f33c:	697b      	ldr	r3, [r7, #20]
}
 800f33e:	4618      	mov	r0, r3
 800f340:	3718      	adds	r7, #24
 800f342:	46bd      	mov	sp, r7
 800f344:	bd80      	pop	{r7, pc}
 800f346:	bf00      	nop
 800f348:	0800f279 	.word	0x0800f279
 800f34c:	2000014d 	.word	0x2000014d
 800f350:	20001d71 	.word	0x20001d71
 800f354:	0800f179 	.word	0x0800f179
 800f358:	20001368 	.word	0x20001368
 800f35c:	0800e961 	.word	0x0800e961
 800f360:	080106fc 	.word	0x080106fc

0800f364 <fm_menu_show_init>:

ptr_ret_menu_t fm_menu_show_init(fm_event_t event_id)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b086      	sub	sp, #24
 800f368:	af00      	add	r7, sp, #0
 800f36a:	4603      	mov	r3, r0
 800f36c:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static uint8_t counter = 0;
    const  uint8_t counter_max = 30;
 800f36e:	231e      	movs	r3, #30
 800f370:	74fb      	strb	r3, [r7, #19]

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_init;
 800f372:	4b3f      	ldr	r3, [pc, #252]	; (800f470 <fm_menu_show_init+0x10c>)
 800f374:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 800f376:	4b3f      	ldr	r3, [pc, #252]	; (800f474 <fm_menu_show_init+0x110>)
 800f378:	781b      	ldrb	r3, [r3, #0]
 800f37a:	2b01      	cmp	r3, #1
 800f37c:	d106      	bne.n	800f38c <fm_menu_show_init+0x28>
    {
        fm_lcd_init();
 800f37e:	f7fb fecf 	bl	800b120 <fm_lcd_init>
        fm_lcd_clear();
 800f382:	f7fb fcf2 	bl	800ad6a <fm_lcd_clear>
        new_entry = 0;
 800f386:	4b3b      	ldr	r3, [pc, #236]	; (800f474 <fm_menu_show_init+0x110>)
 800f388:	2200      	movs	r2, #0
 800f38a:	701a      	strb	r2, [r3, #0]
    }

    pcf8553_write_all(0xFF); // @suppress("Avoid magic numbers")
 800f38c:	20ff      	movs	r0, #255	; 0xff
 800f38e:	f7fe f9c9 	bl	800d724 <pcf8553_write_all>

    switch (event_id)
 800f392:	79fb      	ldrb	r3, [r7, #7]
 800f394:	3b01      	subs	r3, #1
 800f396:	2b04      	cmp	r3, #4
 800f398:	d848      	bhi.n	800f42c <fm_menu_show_init+0xc8>
 800f39a:	a201      	add	r2, pc, #4	; (adr r2, 800f3a0 <fm_menu_show_init+0x3c>)
 800f39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3a0:	0800f3d9 	.word	0x0800f3d9
 800f3a4:	0800f42d 	.word	0x0800f42d
 800f3a8:	0800f42d 	.word	0x0800f42d
 800f3ac:	0800f3b5 	.word	0x0800f3b5
 800f3b0:	0800f42d 	.word	0x0800f42d
        case EVENT_KEY_UP:
        break;
        case EVENT_KEY_DOWN:
        break;
        case EVENT_KEY_ENTER:
            tx_queue_flush(&event_queue_ptr);
 800f3b4:	4830      	ldr	r0, [pc, #192]	; (800f478 <fm_menu_show_init+0x114>)
 800f3b6:	f7fa f9b3 	bl	8009720 <_txe_queue_flush>
            ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
 800f3ba:	4b30      	ldr	r3, [pc, #192]	; (800f47c <fm_menu_show_init+0x118>)
 800f3bc:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 800f3be:	2301      	movs	r3, #1
 800f3c0:	74bb      	strb	r3, [r7, #18]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800f3c2:	f107 0312 	add.w	r3, r7, #18
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	4619      	mov	r1, r3
 800f3ca:	482b      	ldr	r0, [pc, #172]	; (800f478 <fm_menu_show_init+0x114>)
 800f3cc:	f7fa fa10 	bl	80097f0 <_txe_queue_send>
            new_exit = 1;
 800f3d0:	4b2b      	ldr	r3, [pc, #172]	; (800f480 <fm_menu_show_init+0x11c>)
 800f3d2:	2201      	movs	r2, #1
 800f3d4:	701a      	strb	r2, [r3, #0]
        break;
 800f3d6:	e02a      	b.n	800f42e <fm_menu_show_init+0xca>
        case EVENT_KEY_ESC:
        break;
        case EVENT_LCD_REFRESH:
            if(counter < counter_max)
 800f3d8:	4b2a      	ldr	r3, [pc, #168]	; (800f484 <fm_menu_show_init+0x120>)
 800f3da:	781b      	ldrb	r3, [r3, #0]
 800f3dc:	7cfa      	ldrb	r2, [r7, #19]
 800f3de:	429a      	cmp	r2, r3
 800f3e0:	d912      	bls.n	800f408 <fm_menu_show_init+0xa4>
            {
                HAL_Delay(100); // @suppress("Avoid magic numbers")
 800f3e2:	2064      	movs	r0, #100	; 0x64
 800f3e4:	f7f2 f8e0 	bl	80015a8 <HAL_Delay>
                counter++;
 800f3e8:	4b26      	ldr	r3, [pc, #152]	; (800f484 <fm_menu_show_init+0x120>)
 800f3ea:	781b      	ldrb	r3, [r3, #0]
 800f3ec:	3301      	adds	r3, #1
 800f3ee:	b2da      	uxtb	r2, r3
 800f3f0:	4b24      	ldr	r3, [pc, #144]	; (800f484 <fm_menu_show_init+0x120>)
 800f3f2:	701a      	strb	r2, [r3, #0]
                event_now = EVENT_LCD_REFRESH;
 800f3f4:	2301      	movs	r3, #1
 800f3f6:	74bb      	strb	r3, [r7, #18]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800f3f8:	f107 0312 	add.w	r3, r7, #18
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	4619      	mov	r1, r3
 800f400:	481d      	ldr	r0, [pc, #116]	; (800f478 <fm_menu_show_init+0x114>)
 800f402:	f7fa f9f5 	bl	80097f0 <_txe_queue_send>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
                event_now = EVENT_LCD_REFRESH;
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
                new_exit = 1;
            }
        break;
 800f406:	e012      	b.n	800f42e <fm_menu_show_init+0xca>
                tx_queue_flush(&event_queue_ptr);
 800f408:	481b      	ldr	r0, [pc, #108]	; (800f478 <fm_menu_show_init+0x114>)
 800f40a:	f7fa f989 	bl	8009720 <_txe_queue_flush>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
 800f40e:	4b1b      	ldr	r3, [pc, #108]	; (800f47c <fm_menu_show_init+0x118>)
 800f410:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 800f412:	2301      	movs	r3, #1
 800f414:	74bb      	strb	r3, [r7, #18]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800f416:	f107 0312 	add.w	r3, r7, #18
 800f41a:	2200      	movs	r2, #0
 800f41c:	4619      	mov	r1, r3
 800f41e:	4816      	ldr	r0, [pc, #88]	; (800f478 <fm_menu_show_init+0x114>)
 800f420:	f7fa f9e6 	bl	80097f0 <_txe_queue_send>
                new_exit = 1;
 800f424:	4b16      	ldr	r3, [pc, #88]	; (800f480 <fm_menu_show_init+0x11c>)
 800f426:	2201      	movs	r2, #1
 800f428:	701a      	strb	r2, [r3, #0]
        break;
 800f42a:	e000      	b.n	800f42e <fm_menu_show_init+0xca>
        default:
        break;
 800f42c:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "INIT\n";
 800f42e:	4a16      	ldr	r2, [pc, #88]	; (800f488 <fm_menu_show_init+0x124>)
 800f430:	f107 030c 	add.w	r3, r7, #12
 800f434:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f438:	6018      	str	r0, [r3, #0]
 800f43a:	3304      	adds	r3, #4
 800f43c:	8019      	strh	r1, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 800f43e:	f107 030c 	add.w	r3, r7, #12
 800f442:	2106      	movs	r1, #6
 800f444:	4618      	mov	r0, r3
 800f446:	f7fa fe0f 	bl	800a068 <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 800f44a:	4b0d      	ldr	r3, [pc, #52]	; (800f480 <fm_menu_show_init+0x11c>)
 800f44c:	781b      	ldrb	r3, [r3, #0]
 800f44e:	2b01      	cmp	r3, #1
 800f450:	d108      	bne.n	800f464 <fm_menu_show_init+0x100>
    {
        counter = 0;
 800f452:	4b0c      	ldr	r3, [pc, #48]	; (800f484 <fm_menu_show_init+0x120>)
 800f454:	2200      	movs	r2, #0
 800f456:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 800f458:	4b06      	ldr	r3, [pc, #24]	; (800f474 <fm_menu_show_init+0x110>)
 800f45a:	2201      	movs	r2, #1
 800f45c:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800f45e:	4b08      	ldr	r3, [pc, #32]	; (800f480 <fm_menu_show_init+0x11c>)
 800f460:	2200      	movs	r2, #0
 800f462:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800f464:	697b      	ldr	r3, [r7, #20]
}
 800f466:	4618      	mov	r0, r3
 800f468:	3718      	adds	r7, #24
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}
 800f46e:	bf00      	nop
 800f470:	0800f365 	.word	0x0800f365
 800f474:	2000014e 	.word	0x2000014e
 800f478:	20001368 	.word	0x20001368
 800f47c:	0800f569 	.word	0x0800f569
 800f480:	20001d72 	.word	0x20001d72
 800f484:	20001d73 	.word	0x20001d73
 800f488:	08010708 	.word	0x08010708

0800f48c <fm_menu_show_ttl_rate>:
 * unidades y puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_ttl_rate(fm_event_t event_id)
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b086      	sub	sp, #24
 800f490:	af00      	add	r7, sp, #0
 800f492:	4603      	mov	r3, r0
 800f494:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 800f496:	4b2d      	ldr	r3, [pc, #180]	; (800f54c <fm_menu_show_ttl_rate+0xc0>)
 800f498:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 800f49a:	4b2d      	ldr	r3, [pc, #180]	; (800f550 <fm_menu_show_ttl_rate+0xc4>)
 800f49c:	781b      	ldrb	r3, [r3, #0]
 800f49e:	2b01      	cmp	r3, #1
 800f4a0:	d104      	bne.n	800f4ac <fm_menu_show_ttl_rate+0x20>
    {
        fm_lcd_clear();
 800f4a2:	f7fb fc62 	bl	800ad6a <fm_lcd_clear>
        new_entry = 0;
 800f4a6:	4b2a      	ldr	r3, [pc, #168]	; (800f550 <fm_menu_show_ttl_rate+0xc4>)
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_ttl_rate();
 800f4ac:	f7fb ff81 	bl	800b3b2 <fm_lcd_ttl_rate>
    fm_lcd_refresh();
 800f4b0:	f7fb ff79 	bl	800b3a6 <fm_lcd_refresh>

    switch (event_id)
 800f4b4:	79fb      	ldrb	r3, [r7, #7]
 800f4b6:	3b01      	subs	r3, #1
 800f4b8:	2b04      	cmp	r3, #4
 800f4ba:	d82b      	bhi.n	800f514 <fm_menu_show_ttl_rate+0x88>
 800f4bc:	a201      	add	r2, pc, #4	; (adr r2, 800f4c4 <fm_menu_show_ttl_rate+0x38>)
 800f4be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4c2:	bf00      	nop
 800f4c4:	0800f515 	.word	0x0800f515
 800f4c8:	0800f515 	.word	0x0800f515
 800f4cc:	0800f4d9 	.word	0x0800f4d9
 800f4d0:	0800f515 	.word	0x0800f515
 800f4d4:	0800f4f7 	.word	0x0800f4f7
    {
        case EVENT_KEY_UP:
        break;
        case EVENT_KEY_DOWN:
            new_exit = 1;
 800f4d8:	4b1e      	ldr	r3, [pc, #120]	; (800f554 <fm_menu_show_ttl_rate+0xc8>)
 800f4da:	2201      	movs	r2, #1
 800f4dc:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_rate;
 800f4de:	4b1e      	ldr	r3, [pc, #120]	; (800f558 <fm_menu_show_ttl_rate+0xcc>)
 800f4e0:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 800f4e2:	2301      	movs	r3, #1
 800f4e4:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800f4e6:	f107 0313 	add.w	r3, r7, #19
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	4619      	mov	r1, r3
 800f4ee:	481b      	ldr	r0, [pc, #108]	; (800f55c <fm_menu_show_ttl_rate+0xd0>)
 800f4f0:	f7fa f97e 	bl	80097f0 <_txe_queue_send>
        break;
 800f4f4:	e00f      	b.n	800f516 <fm_menu_show_ttl_rate+0x8a>
        case EVENT_KEY_ENTER:
        break;
        case EVENT_KEY_ESC:
            new_exit = 1;
 800f4f6:	4b17      	ldr	r3, [pc, #92]	; (800f554 <fm_menu_show_ttl_rate+0xc8>)
 800f4f8:	2201      	movs	r2, #1
 800f4fa:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 800f4fc:	4b18      	ldr	r3, [pc, #96]	; (800f560 <fm_menu_show_ttl_rate+0xd4>)
 800f4fe:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 800f500:	2301      	movs	r3, #1
 800f502:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800f504:	f107 0313 	add.w	r3, r7, #19
 800f508:	2200      	movs	r2, #0
 800f50a:	4619      	mov	r1, r3
 800f50c:	4813      	ldr	r0, [pc, #76]	; (800f55c <fm_menu_show_ttl_rate+0xd0>)
 800f50e:	f7fa f96f 	bl	80097f0 <_txe_queue_send>
        break;
 800f512:	e000      	b.n	800f516 <fm_menu_show_ttl_rate+0x8a>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 800f514:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "ttl_rate\n";
 800f516:	4a13      	ldr	r2, [pc, #76]	; (800f564 <fm_menu_show_ttl_rate+0xd8>)
 800f518:	f107 0308 	add.w	r3, r7, #8
 800f51c:	ca07      	ldmia	r2, {r0, r1, r2}
 800f51e:	c303      	stmia	r3!, {r0, r1}
 800f520:	801a      	strh	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 800f522:	f107 0308 	add.w	r3, r7, #8
 800f526:	210a      	movs	r1, #10
 800f528:	4618      	mov	r0, r3
 800f52a:	f7fa fd9d 	bl	800a068 <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 800f52e:	4b09      	ldr	r3, [pc, #36]	; (800f554 <fm_menu_show_ttl_rate+0xc8>)
 800f530:	781b      	ldrb	r3, [r3, #0]
 800f532:	2b01      	cmp	r3, #1
 800f534:	d105      	bne.n	800f542 <fm_menu_show_ttl_rate+0xb6>
    {
        new_entry = 1;
 800f536:	4b06      	ldr	r3, [pc, #24]	; (800f550 <fm_menu_show_ttl_rate+0xc4>)
 800f538:	2201      	movs	r2, #1
 800f53a:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800f53c:	4b05      	ldr	r3, [pc, #20]	; (800f554 <fm_menu_show_ttl_rate+0xc8>)
 800f53e:	2200      	movs	r2, #0
 800f540:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800f542:	697b      	ldr	r3, [r7, #20]
}
 800f544:	4618      	mov	r0, r3
 800f546:	3718      	adds	r7, #24
 800f548:	46bd      	mov	sp, r7
 800f54a:	bd80      	pop	{r7, pc}
 800f54c:	0800f48d 	.word	0x0800f48d
 800f550:	2000014f 	.word	0x2000014f
 800f554:	20001d74 	.word	0x20001d74
 800f558:	0800f079 	.word	0x0800f079
 800f55c:	20001368 	.word	0x20001368
 800f560:	0800e961 	.word	0x0800e961
 800f564:	08010710 	.word	0x08010710

0800f568 <fm_menu_show_version>:
 * pantalla, con puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_version(fm_event_t event_id)
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b086      	sub	sp, #24
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	4603      	mov	r3, r0
 800f570:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static uint8_t counter = 0;
    const  uint8_t counter_max = 30;
 800f572:	231e      	movs	r3, #30
 800f574:	74fb      	strb	r3, [r7, #19]

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
 800f576:	4b3f      	ldr	r3, [pc, #252]	; (800f674 <fm_menu_show_version+0x10c>)
 800f578:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 800f57a:	4b3f      	ldr	r3, [pc, #252]	; (800f678 <fm_menu_show_version+0x110>)
 800f57c:	781b      	ldrb	r3, [r3, #0]
 800f57e:	2b01      	cmp	r3, #1
 800f580:	d104      	bne.n	800f58c <fm_menu_show_version+0x24>
    {
        fm_lcd_clear();
 800f582:	f7fb fbf2 	bl	800ad6a <fm_lcd_clear>
        new_entry = 0;
 800f586:	4b3c      	ldr	r3, [pc, #240]	; (800f678 <fm_menu_show_version+0x110>)
 800f588:	2200      	movs	r2, #0
 800f58a:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_version(PNT_4, PNT_5);
 800f58c:	2105      	movs	r1, #5
 800f58e:	2004      	movs	r0, #4
 800f590:	f7fc f896 	bl	800b6c0 <fm_lcd_version>
    fm_lcd_refresh();
 800f594:	f7fb ff07 	bl	800b3a6 <fm_lcd_refresh>

    switch (event_id)
 800f598:	79fb      	ldrb	r3, [r7, #7]
 800f59a:	3b01      	subs	r3, #1
 800f59c:	2b04      	cmp	r3, #4
 800f59e:	d849      	bhi.n	800f634 <fm_menu_show_version+0xcc>
 800f5a0:	a201      	add	r2, pc, #4	; (adr r2, 800f5a8 <fm_menu_show_version+0x40>)
 800f5a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5a6:	bf00      	nop
 800f5a8:	0800f5e1 	.word	0x0800f5e1
 800f5ac:	0800f635 	.word	0x0800f635
 800f5b0:	0800f635 	.word	0x0800f635
 800f5b4:	0800f5bd 	.word	0x0800f5bd
 800f5b8:	0800f635 	.word	0x0800f635
        case EVENT_KEY_UP:
        break;
        case EVENT_KEY_DOWN:
        break;
        case EVENT_KEY_ENTER:
            tx_queue_flush(&event_queue_ptr);
 800f5bc:	482f      	ldr	r0, [pc, #188]	; (800f67c <fm_menu_show_version+0x114>)
 800f5be:	f7fa f8af 	bl	8009720 <_txe_queue_flush>
            ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 800f5c2:	4b2f      	ldr	r3, [pc, #188]	; (800f680 <fm_menu_show_version+0x118>)
 800f5c4:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 800f5c6:	2301      	movs	r3, #1
 800f5c8:	74bb      	strb	r3, [r7, #18]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800f5ca:	f107 0312 	add.w	r3, r7, #18
 800f5ce:	2200      	movs	r2, #0
 800f5d0:	4619      	mov	r1, r3
 800f5d2:	482a      	ldr	r0, [pc, #168]	; (800f67c <fm_menu_show_version+0x114>)
 800f5d4:	f7fa f90c 	bl	80097f0 <_txe_queue_send>
            new_exit = 1;
 800f5d8:	4b2a      	ldr	r3, [pc, #168]	; (800f684 <fm_menu_show_version+0x11c>)
 800f5da:	2201      	movs	r2, #1
 800f5dc:	701a      	strb	r2, [r3, #0]
        break;
 800f5de:	e02a      	b.n	800f636 <fm_menu_show_version+0xce>
        case EVENT_KEY_ESC:
        break;
        case EVENT_LCD_REFRESH:
            if(counter < counter_max)
 800f5e0:	4b29      	ldr	r3, [pc, #164]	; (800f688 <fm_menu_show_version+0x120>)
 800f5e2:	781b      	ldrb	r3, [r3, #0]
 800f5e4:	7cfa      	ldrb	r2, [r7, #19]
 800f5e6:	429a      	cmp	r2, r3
 800f5e8:	d912      	bls.n	800f610 <fm_menu_show_version+0xa8>
            {
                HAL_Delay(100); // @suppress("Avoid magic numbers")
 800f5ea:	2064      	movs	r0, #100	; 0x64
 800f5ec:	f7f1 ffdc 	bl	80015a8 <HAL_Delay>
                counter++;
 800f5f0:	4b25      	ldr	r3, [pc, #148]	; (800f688 <fm_menu_show_version+0x120>)
 800f5f2:	781b      	ldrb	r3, [r3, #0]
 800f5f4:	3301      	adds	r3, #1
 800f5f6:	b2da      	uxtb	r2, r3
 800f5f8:	4b23      	ldr	r3, [pc, #140]	; (800f688 <fm_menu_show_version+0x120>)
 800f5fa:	701a      	strb	r2, [r3, #0]
                event_now = EVENT_LCD_REFRESH;
 800f5fc:	2301      	movs	r3, #1
 800f5fe:	74bb      	strb	r3, [r7, #18]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800f600:	f107 0312 	add.w	r3, r7, #18
 800f604:	2200      	movs	r2, #0
 800f606:	4619      	mov	r1, r3
 800f608:	481c      	ldr	r0, [pc, #112]	; (800f67c <fm_menu_show_version+0x114>)
 800f60a:	f7fa f8f1 	bl	80097f0 <_txe_queue_send>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
                event_now = EVENT_LCD_REFRESH;
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
                new_exit = 1;
            }
        break;
 800f60e:	e012      	b.n	800f636 <fm_menu_show_version+0xce>
                tx_queue_flush(&event_queue_ptr);
 800f610:	481a      	ldr	r0, [pc, #104]	; (800f67c <fm_menu_show_version+0x114>)
 800f612:	f7fa f885 	bl	8009720 <_txe_queue_flush>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 800f616:	4b1a      	ldr	r3, [pc, #104]	; (800f680 <fm_menu_show_version+0x118>)
 800f618:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 800f61a:	2301      	movs	r3, #1
 800f61c:	74bb      	strb	r3, [r7, #18]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800f61e:	f107 0312 	add.w	r3, r7, #18
 800f622:	2200      	movs	r2, #0
 800f624:	4619      	mov	r1, r3
 800f626:	4815      	ldr	r0, [pc, #84]	; (800f67c <fm_menu_show_version+0x114>)
 800f628:	f7fa f8e2 	bl	80097f0 <_txe_queue_send>
                new_exit = 1;
 800f62c:	4b15      	ldr	r3, [pc, #84]	; (800f684 <fm_menu_show_version+0x11c>)
 800f62e:	2201      	movs	r2, #1
 800f630:	701a      	strb	r2, [r3, #0]
        break;
 800f632:	e000      	b.n	800f636 <fm_menu_show_version+0xce>
        default:
        break;
 800f634:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "version\n";
 800f636:	4a15      	ldr	r2, [pc, #84]	; (800f68c <fm_menu_show_version+0x124>)
 800f638:	f107 0308 	add.w	r3, r7, #8
 800f63c:	ca07      	ldmia	r2, {r0, r1, r2}
 800f63e:	c303      	stmia	r3!, {r0, r1}
 800f640:	701a      	strb	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 800f642:	f107 0308 	add.w	r3, r7, #8
 800f646:	2109      	movs	r1, #9
 800f648:	4618      	mov	r0, r3
 800f64a:	f7fa fd0d 	bl	800a068 <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 800f64e:	4b0d      	ldr	r3, [pc, #52]	; (800f684 <fm_menu_show_version+0x11c>)
 800f650:	781b      	ldrb	r3, [r3, #0]
 800f652:	2b01      	cmp	r3, #1
 800f654:	d108      	bne.n	800f668 <fm_menu_show_version+0x100>
    {
        counter = 0;
 800f656:	4b0c      	ldr	r3, [pc, #48]	; (800f688 <fm_menu_show_version+0x120>)
 800f658:	2200      	movs	r2, #0
 800f65a:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 800f65c:	4b06      	ldr	r3, [pc, #24]	; (800f678 <fm_menu_show_version+0x110>)
 800f65e:	2201      	movs	r2, #1
 800f660:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800f662:	4b08      	ldr	r3, [pc, #32]	; (800f684 <fm_menu_show_version+0x11c>)
 800f664:	2200      	movs	r2, #0
 800f666:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800f668:	697b      	ldr	r3, [r7, #20]
}
 800f66a:	4618      	mov	r0, r3
 800f66c:	3718      	adds	r7, #24
 800f66e:	46bd      	mov	sp, r7
 800f670:	bd80      	pop	{r7, pc}
 800f672:	bf00      	nop
 800f674:	0800f569 	.word	0x0800f569
 800f678:	20000150 	.word	0x20000150
 800f67c:	20001368 	.word	0x20001368
 800f680:	0800f48d 	.word	0x0800f48d
 800f684:	20001d75 	.word	0x20001d75
 800f688:	20001d76 	.word	0x20001d76
 800f68c:	0801071c 	.word	0x0801071c

0800f690 <fm_temp_stm32_get>:
// Private function bodies.

// Public function bodies.

void fm_temp_stm32_get()
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b082      	sub	sp, #8
 800f694:	af00      	add	r7, sp, #0
    const uint8_t poll_time = 100;
 800f696:	2364      	movs	r3, #100	; 0x64
 800f698:	71fb      	strb	r3, [r7, #7]

    HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800f69a:	217f      	movs	r1, #127	; 0x7f
 800f69c:	4808      	ldr	r0, [pc, #32]	; (800f6c0 <fm_temp_stm32_get+0x30>)
 800f69e:	f7f3 fa17 	bl	8002ad0 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start(&hadc1);
 800f6a2:	4807      	ldr	r0, [pc, #28]	; (800f6c0 <fm_temp_stm32_get+0x30>)
 800f6a4:	f7f2 fb18 	bl	8001cd8 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, poll_time);
 800f6a8:	79fb      	ldrb	r3, [r7, #7]
 800f6aa:	4619      	mov	r1, r3
 800f6ac:	4804      	ldr	r0, [pc, #16]	; (800f6c0 <fm_temp_stm32_get+0x30>)
 800f6ae:	f7f2 fba9 	bl	8001e04 <HAL_ADC_PollForConversion>
    HAL_ADC_Stop(&hadc1);
 800f6b2:	4803      	ldr	r0, [pc, #12]	; (800f6c0 <fm_temp_stm32_get+0x30>)
 800f6b4:	f7f2 fb73 	bl	8001d9e <HAL_ADC_Stop>
}
 800f6b8:	bf00      	nop
 800f6ba:	3708      	adds	r7, #8
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	bd80      	pop	{r7, pc}
 800f6c0:	200013c4 	.word	0x200013c4

0800f6c4 <fm_temp_stm32_format>:

int fm_temp_stm32_format()
{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b082      	sub	sp, #8
 800f6c8:	af00      	add	r7, sp, #0
    uint16_t raw_value;
    int temp_celcius;

    fm_temp_stm32_get();
 800f6ca:	f7ff ffe1 	bl	800f690 <fm_temp_stm32_get>
    raw_value = HAL_ADC_GetValue(&hadc1);
 800f6ce:	4812      	ldr	r0, [pc, #72]	; (800f718 <fm_temp_stm32_format+0x54>)
 800f6d0:	f7f2 fc27 	bl	8001f22 <HAL_ADC_GetValue>
 800f6d4:	4603      	mov	r3, r0
 800f6d6:	80fb      	strh	r3, [r7, #6]
    temp_celcius = __HAL_ADC_CALC_TEMPERATURE(3285, raw_value,
 800f6d8:	88fb      	ldrh	r3, [r7, #6]
 800f6da:	f640 42d5 	movw	r2, #3285	; 0xcd5
 800f6de:	fb02 f303 	mul.w	r3, r2, r3
 800f6e2:	461a      	mov	r2, r3
 800f6e4:	4b0d      	ldr	r3, [pc, #52]	; (800f71c <fm_temp_stm32_format+0x58>)
 800f6e6:	fba3 2302 	umull	r2, r3, r3, r2
 800f6ea:	099b      	lsrs	r3, r3, #6
 800f6ec:	461a      	mov	r2, r3
 800f6ee:	4b0c      	ldr	r3, [pc, #48]	; (800f720 <fm_temp_stm32_format+0x5c>)
 800f6f0:	881b      	ldrh	r3, [r3, #0]
 800f6f2:	1ad3      	subs	r3, r2, r3
 800f6f4:	2264      	movs	r2, #100	; 0x64
 800f6f6:	fb03 f202 	mul.w	r2, r3, r2
 800f6fa:	4b0a      	ldr	r3, [pc, #40]	; (800f724 <fm_temp_stm32_format+0x60>)
 800f6fc:	881b      	ldrh	r3, [r3, #0]
 800f6fe:	4619      	mov	r1, r3
 800f700:	4b07      	ldr	r3, [pc, #28]	; (800f720 <fm_temp_stm32_format+0x5c>)
 800f702:	881b      	ldrh	r3, [r3, #0]
 800f704:	1acb      	subs	r3, r1, r3
 800f706:	fb92 f3f3 	sdiv	r3, r2, r3
 800f70a:	331e      	adds	r3, #30
 800f70c:	603b      	str	r3, [r7, #0]
    ADC_RESOLUTION_12B);

    return (temp_celcius);
 800f70e:	683b      	ldr	r3, [r7, #0]
}
 800f710:	4618      	mov	r0, r3
 800f712:	3708      	adds	r7, #8
 800f714:	46bd      	mov	sp, r7
 800f716:	bd80      	pop	{r7, pc}
 800f718:	200013c4 	.word	0x200013c4
 800f71c:	057619f1 	.word	0x057619f1
 800f720:	1fff75a8 	.word	0x1fff75a8
 800f724:	1fff75ca 	.word	0x1fff75ca

0800f728 <fm_version_get>:
 * actualizado este valor.
 * @param None
 * @retval Número de versión en formato VRR.
 */
uint32_t fm_version_get()
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	b088      	sub	sp, #32
 800f72c:	af02      	add	r7, sp, #8
    uint32_t version = 0;
 800f72e:	2300      	movs	r3, #0
 800f730:	617b      	str	r3, [r7, #20]
    char version_arr[PCF8553_DATA_SIZE];

    sprintf(version_arr, "%d%d%d", VERSION, REVISION, RELEASE);
 800f732:	4638      	mov	r0, r7
 800f734:	2301      	movs	r3, #1
 800f736:	9300      	str	r3, [sp, #0]
 800f738:	2301      	movs	r3, #1
 800f73a:	2201      	movs	r2, #1
 800f73c:	4906      	ldr	r1, [pc, #24]	; (800f758 <fm_version_get+0x30>)
 800f73e:	f000 f9bb 	bl	800fab8 <siprintf>
    /*
     * Esta instrucción está de mas ya que después se vuelve a formatear el
     * entero en un arreglo, pero por ahora se va a quedar así hasta que se
     * elimine el formatter de la libreria fm_lcd.h
     */
    version = atoi(version_arr);
 800f742:	463b      	mov	r3, r7
 800f744:	4618      	mov	r0, r3
 800f746:	f000 f94d 	bl	800f9e4 <atoi>
 800f74a:	4603      	mov	r3, r0
 800f74c:	617b      	str	r3, [r7, #20]

    return (version);
 800f74e:	697b      	ldr	r3, [r7, #20]
}
 800f750:	4618      	mov	r0, r3
 800f752:	3718      	adds	r7, #24
 800f754:	46bd      	mov	sp, r7
 800f756:	bd80      	pop	{r7, pc}
 800f758:	08010728 	.word	0x08010728

0800f75c <fmc_get_acm>:
 * parámetro de retorno.
 * @param  None
 * @retval Volumen acumulado como estructura.
 */
fmc_totalizer_t fmc_get_acm()
{
 800f75c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f75e:	b093      	sub	sp, #76	; 0x4c
 800f760:	af06      	add	r7, sp, #24
 800f762:	62f8      	str	r0, [r7, #44]	; 0x2c
    acm = fm_factory_get_acm();
 800f764:	4c1c      	ldr	r4, [pc, #112]	; (800f7d8 <fmc_get_acm+0x7c>)
 800f766:	f107 0308 	add.w	r3, r7, #8
 800f76a:	4618      	mov	r0, r3
 800f76c:	f7fa fc98 	bl	800a0a0 <fm_factory_get_acm>
 800f770:	4625      	mov	r5, r4
 800f772:	f107 0408 	add.w	r4, r7, #8
 800f776:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f778:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f77a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f77e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    acm = fmc_totalizer_init(acm);
 800f782:	4b15      	ldr	r3, [pc, #84]	; (800f7d8 <fmc_get_acm+0x7c>)
 800f784:	607b      	str	r3, [r7, #4]
 800f786:	f107 0c08 	add.w	ip, r7, #8
 800f78a:	4e13      	ldr	r6, [pc, #76]	; (800f7d8 <fmc_get_acm+0x7c>)
 800f78c:	466d      	mov	r5, sp
 800f78e:	f106 0408 	add.w	r4, r6, #8
 800f792:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f794:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f796:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f79a:	e885 0003 	stmia.w	r5, {r0, r1}
 800f79e:	e896 000c 	ldmia.w	r6, {r2, r3}
 800f7a2:	4660      	mov	r0, ip
 800f7a4:	f000 f8c0 	bl	800f928 <fmc_totalizer_init>
 800f7a8:	687d      	ldr	r5, [r7, #4]
 800f7aa:	f107 0408 	add.w	r4, r7, #8
 800f7ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f7b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f7b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f7b6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    return (acm);
 800f7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7bc:	4a06      	ldr	r2, [pc, #24]	; (800f7d8 <fmc_get_acm+0x7c>)
 800f7be:	461c      	mov	r4, r3
 800f7c0:	4615      	mov	r5, r2
 800f7c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f7c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f7c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f7ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800f7ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f7d0:	3734      	adds	r7, #52	; 0x34
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7d6:	bf00      	nop
 800f7d8:	20001d78 	.word	0x20001d78

0800f7dc <fmc_get_stm32_temp>:
 * @retval temperatura interna del microcontrolador como una estructura que
 * contiene su valor, resolución y unidad.
 * global.
 */
fmc_temp_t fmc_get_stm32_temp()
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b088      	sub	sp, #32
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
    int_temperature.temperature.num = fm_temp_stm32_format();
 800f7e4:	f7ff ff6e 	bl	800f6c4 <fm_temp_stm32_format>
 800f7e8:	4603      	mov	r3, r0
 800f7ea:	461a      	mov	r2, r3
 800f7ec:	4b0d      	ldr	r3, [pc, #52]	; (800f824 <fmc_get_stm32_temp+0x48>)
 800f7ee:	601a      	str	r2, [r3, #0]
    int_temperature.temperature.res = fm_factory_get_temp().temperature.res;
 800f7f0:	f107 0308 	add.w	r3, r7, #8
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	f7fa fc95 	bl	800a124 <fm_factory_get_temp>
 800f7fa:	7b3a      	ldrb	r2, [r7, #12]
 800f7fc:	4b09      	ldr	r3, [pc, #36]	; (800f824 <fmc_get_stm32_temp+0x48>)
 800f7fe:	711a      	strb	r2, [r3, #4]
    int_temperature.unit_volume_temp = fm_factory_get_temp().unit_volume_temp;
 800f800:	f107 0314 	add.w	r3, r7, #20
 800f804:	4618      	mov	r0, r3
 800f806:	f7fa fc8d 	bl	800a124 <fm_factory_get_temp>
 800f80a:	7f3a      	ldrb	r2, [r7, #28]
 800f80c:	4b05      	ldr	r3, [pc, #20]	; (800f824 <fmc_get_stm32_temp+0x48>)
 800f80e:	721a      	strb	r2, [r3, #8]

    return (int_temperature);
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	4a04      	ldr	r2, [pc, #16]	; (800f824 <fmc_get_stm32_temp+0x48>)
 800f814:	ca07      	ldmia	r2, {r0, r1, r2}
 800f816:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800f81a:	6878      	ldr	r0, [r7, #4]
 800f81c:	3720      	adds	r7, #32
 800f81e:	46bd      	mov	sp, r7
 800f820:	bd80      	pop	{r7, pc}
 800f822:	bf00      	nop
 800f824:	20001dd8 	.word	0x20001dd8

0800f828 <fmc_get_rate>:
 * devuelve como parámetro de retorno.
 * @param  None
 * @retval caudal instantaneo como estructura.
 */
fmc_totalizer_t fmc_get_rate()
{
 800f828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f82a:	b093      	sub	sp, #76	; 0x4c
 800f82c:	af06      	add	r7, sp, #24
 800f82e:	62f8      	str	r0, [r7, #44]	; 0x2c
    rate = fm_factory_get_rate();
 800f830:	4c1c      	ldr	r4, [pc, #112]	; (800f8a4 <fmc_get_rate+0x7c>)
 800f832:	f107 0308 	add.w	r3, r7, #8
 800f836:	4618      	mov	r0, r3
 800f838:	f7fa fc5e 	bl	800a0f8 <fm_factory_get_rate>
 800f83c:	4625      	mov	r5, r4
 800f83e:	f107 0408 	add.w	r4, r7, #8
 800f842:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f844:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f846:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f84a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    rate = fmc_totalizer_init(rate);
 800f84e:	4b15      	ldr	r3, [pc, #84]	; (800f8a4 <fmc_get_rate+0x7c>)
 800f850:	607b      	str	r3, [r7, #4]
 800f852:	f107 0c08 	add.w	ip, r7, #8
 800f856:	4e13      	ldr	r6, [pc, #76]	; (800f8a4 <fmc_get_rate+0x7c>)
 800f858:	466d      	mov	r5, sp
 800f85a:	f106 0408 	add.w	r4, r6, #8
 800f85e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f860:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f862:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f866:	e885 0003 	stmia.w	r5, {r0, r1}
 800f86a:	e896 000c 	ldmia.w	r6, {r2, r3}
 800f86e:	4660      	mov	r0, ip
 800f870:	f000 f85a 	bl	800f928 <fmc_totalizer_init>
 800f874:	687d      	ldr	r5, [r7, #4]
 800f876:	f107 0408 	add.w	r4, r7, #8
 800f87a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f87c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f87e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f882:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    return (rate);
 800f886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f888:	4a06      	ldr	r2, [pc, #24]	; (800f8a4 <fmc_get_rate+0x7c>)
 800f88a:	461c      	mov	r4, r3
 800f88c:	4615      	mov	r5, r2
 800f88e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f890:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f892:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f896:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800f89a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f89c:	3734      	adds	r7, #52	; 0x34
 800f89e:	46bd      	mov	sp, r7
 800f8a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8a2:	bf00      	nop
 800f8a4:	20001d98 	.word	0x20001d98

0800f8a8 <fmc_get_ttl>:
 * parámetro de retorno.
 * @param  None
 * @retval volumen histórico como estructura.
 */
fmc_totalizer_t fmc_get_ttl()
{
 800f8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8aa:	b093      	sub	sp, #76	; 0x4c
 800f8ac:	af06      	add	r7, sp, #24
 800f8ae:	62f8      	str	r0, [r7, #44]	; 0x2c
    ttl = fm_factory_get_ttl();
 800f8b0:	4c1c      	ldr	r4, [pc, #112]	; (800f924 <fmc_get_ttl+0x7c>)
 800f8b2:	f107 0308 	add.w	r3, r7, #8
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f7fa fc08 	bl	800a0cc <fm_factory_get_ttl>
 800f8bc:	4625      	mov	r5, r4
 800f8be:	f107 0408 	add.w	r4, r7, #8
 800f8c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f8c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f8c6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f8ca:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    ttl = fmc_totalizer_init(ttl);
 800f8ce:	4b15      	ldr	r3, [pc, #84]	; (800f924 <fmc_get_ttl+0x7c>)
 800f8d0:	607b      	str	r3, [r7, #4]
 800f8d2:	f107 0c08 	add.w	ip, r7, #8
 800f8d6:	4e13      	ldr	r6, [pc, #76]	; (800f924 <fmc_get_ttl+0x7c>)
 800f8d8:	466d      	mov	r5, sp
 800f8da:	f106 0408 	add.w	r4, r6, #8
 800f8de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f8e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f8e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f8e6:	e885 0003 	stmia.w	r5, {r0, r1}
 800f8ea:	e896 000c 	ldmia.w	r6, {r2, r3}
 800f8ee:	4660      	mov	r0, ip
 800f8f0:	f000 f81a 	bl	800f928 <fmc_totalizer_init>
 800f8f4:	687d      	ldr	r5, [r7, #4]
 800f8f6:	f107 0408 	add.w	r4, r7, #8
 800f8fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f8fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f8fe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f902:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    return (ttl);
 800f906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f908:	4a06      	ldr	r2, [pc, #24]	; (800f924 <fmc_get_ttl+0x7c>)
 800f90a:	461c      	mov	r4, r3
 800f90c:	4615      	mov	r5, r2
 800f90e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f910:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f912:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f916:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800f91a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f91c:	3734      	adds	r7, #52	; 0x34
 800f91e:	46bd      	mov	sp, r7
 800f920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f922:	bf00      	nop
 800f924:	20001db8 	.word	0x20001db8

0800f928 <fmc_totalizer_init>:
 * @brief
 * @param
 * @retval None
 */
fmc_totalizer_t fmc_totalizer_init(fmc_totalizer_t totalizer)
{
 800f928:	b082      	sub	sp, #8
 800f92a:	b5b0      	push	{r4, r5, r7, lr}
 800f92c:	b082      	sub	sp, #8
 800f92e:	af00      	add	r7, sp, #0
 800f930:	6078      	str	r0, [r7, #4]
 800f932:	f107 0118 	add.w	r1, r7, #24
 800f936:	e881 000c 	stmia.w	r1, {r2, r3}
    fmc_totalizer_refresh(&totalizer);
 800f93a:	f107 0018 	add.w	r0, r7, #24
 800f93e:	f000 f811 	bl	800f964 <fmc_totalizer_refresh>

    return (totalizer);
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	461d      	mov	r5, r3
 800f946:	f107 0418 	add.w	r4, r7, #24
 800f94a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f94c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f94e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f952:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800f956:	6878      	ldr	r0, [r7, #4]
 800f958:	3708      	adds	r7, #8
 800f95a:	46bd      	mov	sp, r7
 800f95c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800f960:	b002      	add	sp, #8
 800f962:	4770      	bx	lr

0800f964 <fmc_totalizer_refresh>:
 * @param  puntero a estructura que contiene datos como la cantidad de pulsos
 * leidos, valor y resolución del caudal/volumen, entre otros.
 * @retval None
 */
void fmc_totalizer_refresh(fmc_totalizer_t *p_totalizer)
{
 800f964:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800f968:	b084      	sub	sp, #16
 800f96a:	af00      	add	r7, sp, #0
 800f96c:	6078      	str	r0, [r7, #4]
    uint64_t result;

    /*
     * result es la cantidad de pulsos almacenados en la estructura p_totalizer.
     */
    result = (uint64_t) p_totalizer->pulse;
 800f96e:	6879      	ldr	r1, [r7, #4]
 800f970:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f974:	e9c7 0102 	strd	r0, r1, [r7, #8]

    /*
     * Pulsos escalados en el factor y en la resolucion a mostrar.
     */
    result *= g_scalar[p_totalizer->factor.res + p_totalizer->volume.res];
 800f978:	6879      	ldr	r1, [r7, #4]
 800f97a:	7d09      	ldrb	r1, [r1, #20]
 800f97c:	4608      	mov	r0, r1
 800f97e:	6879      	ldr	r1, [r7, #4]
 800f980:	7b09      	ldrb	r1, [r1, #12]
 800f982:	4401      	add	r1, r0
 800f984:	4816      	ldr	r0, [pc, #88]	; (800f9e0 <fmc_totalizer_refresh+0x7c>)
 800f986:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800f98a:	2000      	movs	r0, #0
 800f98c:	460c      	mov	r4, r1
 800f98e:	4605      	mov	r5, r0
 800f990:	68f9      	ldr	r1, [r7, #12]
 800f992:	fb04 f001 	mul.w	r0, r4, r1
 800f996:	68b9      	ldr	r1, [r7, #8]
 800f998:	fb05 f101 	mul.w	r1, r5, r1
 800f99c:	4401      	add	r1, r0
 800f99e:	68b8      	ldr	r0, [r7, #8]
 800f9a0:	fba0 2304 	umull	r2, r3, r0, r4
 800f9a4:	4419      	add	r1, r3
 800f9a6:	460b      	mov	r3, r1
 800f9a8:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800f9ac:	e9c7 2302 	strd	r2, r3, [r7, #8]

    /*
     * Obtengo el valor numérico del volumen dividiendo los pulsos escalados
     * por el factor.
     */
    result /= p_totalizer->factor.num;
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	691b      	ldr	r3, [r3, #16]
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	4698      	mov	r8, r3
 800f9b8:	4691      	mov	r9, r2
 800f9ba:	4642      	mov	r2, r8
 800f9bc:	464b      	mov	r3, r9
 800f9be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f9c2:	f7f0 fd8d 	bl	80004e0 <__aeabi_uldivmod>
 800f9c6:	4602      	mov	r2, r0
 800f9c8:	460b      	mov	r3, r1
 800f9ca:	e9c7 2302 	strd	r2, r3, [r7, #8]

    p_totalizer->volume.num = (uint32_t) result;
 800f9ce:	68ba      	ldr	r2, [r7, #8]
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	609a      	str	r2, [r3, #8]

}
 800f9d4:	bf00      	nop
 800f9d6:	3710      	adds	r7, #16
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800f9de:	bf00      	nop
 800f9e0:	08010778 	.word	0x08010778

0800f9e4 <atoi>:
 800f9e4:	220a      	movs	r2, #10
 800f9e6:	2100      	movs	r1, #0
 800f9e8:	f000 b908 	b.w	800fbfc <strtol>

0800f9ec <__errno>:
 800f9ec:	4b01      	ldr	r3, [pc, #4]	; (800f9f4 <__errno+0x8>)
 800f9ee:	6818      	ldr	r0, [r3, #0]
 800f9f0:	4770      	bx	lr
 800f9f2:	bf00      	nop
 800f9f4:	20000154 	.word	0x20000154

0800f9f8 <__libc_init_array>:
 800f9f8:	b570      	push	{r4, r5, r6, lr}
 800f9fa:	4d0d      	ldr	r5, [pc, #52]	; (800fa30 <__libc_init_array+0x38>)
 800f9fc:	4c0d      	ldr	r4, [pc, #52]	; (800fa34 <__libc_init_array+0x3c>)
 800f9fe:	1b64      	subs	r4, r4, r5
 800fa00:	10a4      	asrs	r4, r4, #2
 800fa02:	2600      	movs	r6, #0
 800fa04:	42a6      	cmp	r6, r4
 800fa06:	d109      	bne.n	800fa1c <__libc_init_array+0x24>
 800fa08:	4d0b      	ldr	r5, [pc, #44]	; (800fa38 <__libc_init_array+0x40>)
 800fa0a:	4c0c      	ldr	r4, [pc, #48]	; (800fa3c <__libc_init_array+0x44>)
 800fa0c:	f000 fd4e 	bl	80104ac <_init>
 800fa10:	1b64      	subs	r4, r4, r5
 800fa12:	10a4      	asrs	r4, r4, #2
 800fa14:	2600      	movs	r6, #0
 800fa16:	42a6      	cmp	r6, r4
 800fa18:	d105      	bne.n	800fa26 <__libc_init_array+0x2e>
 800fa1a:	bd70      	pop	{r4, r5, r6, pc}
 800fa1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa20:	4798      	blx	r3
 800fa22:	3601      	adds	r6, #1
 800fa24:	e7ee      	b.n	800fa04 <__libc_init_array+0xc>
 800fa26:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa2a:	4798      	blx	r3
 800fa2c:	3601      	adds	r6, #1
 800fa2e:	e7f2      	b.n	800fa16 <__libc_init_array+0x1e>
 800fa30:	080108d0 	.word	0x080108d0
 800fa34:	080108d0 	.word	0x080108d0
 800fa38:	080108d0 	.word	0x080108d0
 800fa3c:	080108d4 	.word	0x080108d4

0800fa40 <memset>:
 800fa40:	4402      	add	r2, r0
 800fa42:	4603      	mov	r3, r0
 800fa44:	4293      	cmp	r3, r2
 800fa46:	d100      	bne.n	800fa4a <memset+0xa>
 800fa48:	4770      	bx	lr
 800fa4a:	f803 1b01 	strb.w	r1, [r3], #1
 800fa4e:	e7f9      	b.n	800fa44 <memset+0x4>

0800fa50 <sniprintf>:
 800fa50:	b40c      	push	{r2, r3}
 800fa52:	b530      	push	{r4, r5, lr}
 800fa54:	4b17      	ldr	r3, [pc, #92]	; (800fab4 <sniprintf+0x64>)
 800fa56:	1e0c      	subs	r4, r1, #0
 800fa58:	681d      	ldr	r5, [r3, #0]
 800fa5a:	b09d      	sub	sp, #116	; 0x74
 800fa5c:	da08      	bge.n	800fa70 <sniprintf+0x20>
 800fa5e:	238b      	movs	r3, #139	; 0x8b
 800fa60:	602b      	str	r3, [r5, #0]
 800fa62:	f04f 30ff 	mov.w	r0, #4294967295
 800fa66:	b01d      	add	sp, #116	; 0x74
 800fa68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fa6c:	b002      	add	sp, #8
 800fa6e:	4770      	bx	lr
 800fa70:	f44f 7302 	mov.w	r3, #520	; 0x208
 800fa74:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fa78:	bf14      	ite	ne
 800fa7a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fa7e:	4623      	moveq	r3, r4
 800fa80:	9304      	str	r3, [sp, #16]
 800fa82:	9307      	str	r3, [sp, #28]
 800fa84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fa88:	9002      	str	r0, [sp, #8]
 800fa8a:	9006      	str	r0, [sp, #24]
 800fa8c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fa90:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800fa92:	ab21      	add	r3, sp, #132	; 0x84
 800fa94:	a902      	add	r1, sp, #8
 800fa96:	4628      	mov	r0, r5
 800fa98:	9301      	str	r3, [sp, #4]
 800fa9a:	f000 f915 	bl	800fcc8 <_svfiprintf_r>
 800fa9e:	1c43      	adds	r3, r0, #1
 800faa0:	bfbc      	itt	lt
 800faa2:	238b      	movlt	r3, #139	; 0x8b
 800faa4:	602b      	strlt	r3, [r5, #0]
 800faa6:	2c00      	cmp	r4, #0
 800faa8:	d0dd      	beq.n	800fa66 <sniprintf+0x16>
 800faaa:	9b02      	ldr	r3, [sp, #8]
 800faac:	2200      	movs	r2, #0
 800faae:	701a      	strb	r2, [r3, #0]
 800fab0:	e7d9      	b.n	800fa66 <sniprintf+0x16>
 800fab2:	bf00      	nop
 800fab4:	20000154 	.word	0x20000154

0800fab8 <siprintf>:
 800fab8:	b40e      	push	{r1, r2, r3}
 800faba:	b500      	push	{lr}
 800fabc:	b09c      	sub	sp, #112	; 0x70
 800fabe:	ab1d      	add	r3, sp, #116	; 0x74
 800fac0:	9002      	str	r0, [sp, #8]
 800fac2:	9006      	str	r0, [sp, #24]
 800fac4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fac8:	4809      	ldr	r0, [pc, #36]	; (800faf0 <siprintf+0x38>)
 800faca:	9107      	str	r1, [sp, #28]
 800facc:	9104      	str	r1, [sp, #16]
 800face:	4909      	ldr	r1, [pc, #36]	; (800faf4 <siprintf+0x3c>)
 800fad0:	f853 2b04 	ldr.w	r2, [r3], #4
 800fad4:	9105      	str	r1, [sp, #20]
 800fad6:	6800      	ldr	r0, [r0, #0]
 800fad8:	9301      	str	r3, [sp, #4]
 800fada:	a902      	add	r1, sp, #8
 800fadc:	f000 f8f4 	bl	800fcc8 <_svfiprintf_r>
 800fae0:	9b02      	ldr	r3, [sp, #8]
 800fae2:	2200      	movs	r2, #0
 800fae4:	701a      	strb	r2, [r3, #0]
 800fae6:	b01c      	add	sp, #112	; 0x70
 800fae8:	f85d eb04 	ldr.w	lr, [sp], #4
 800faec:	b003      	add	sp, #12
 800faee:	4770      	bx	lr
 800faf0:	20000154 	.word	0x20000154
 800faf4:	ffff0208 	.word	0xffff0208

0800faf8 <_strtol_l.constprop.0>:
 800faf8:	2b01      	cmp	r3, #1
 800fafa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fafe:	d001      	beq.n	800fb04 <_strtol_l.constprop.0+0xc>
 800fb00:	2b24      	cmp	r3, #36	; 0x24
 800fb02:	d906      	bls.n	800fb12 <_strtol_l.constprop.0+0x1a>
 800fb04:	f7ff ff72 	bl	800f9ec <__errno>
 800fb08:	2316      	movs	r3, #22
 800fb0a:	6003      	str	r3, [r0, #0]
 800fb0c:	2000      	movs	r0, #0
 800fb0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb12:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800fbf8 <_strtol_l.constprop.0+0x100>
 800fb16:	460d      	mov	r5, r1
 800fb18:	462e      	mov	r6, r5
 800fb1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fb1e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800fb22:	f017 0708 	ands.w	r7, r7, #8
 800fb26:	d1f7      	bne.n	800fb18 <_strtol_l.constprop.0+0x20>
 800fb28:	2c2d      	cmp	r4, #45	; 0x2d
 800fb2a:	d132      	bne.n	800fb92 <_strtol_l.constprop.0+0x9a>
 800fb2c:	782c      	ldrb	r4, [r5, #0]
 800fb2e:	2701      	movs	r7, #1
 800fb30:	1cb5      	adds	r5, r6, #2
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d05b      	beq.n	800fbee <_strtol_l.constprop.0+0xf6>
 800fb36:	2b10      	cmp	r3, #16
 800fb38:	d109      	bne.n	800fb4e <_strtol_l.constprop.0+0x56>
 800fb3a:	2c30      	cmp	r4, #48	; 0x30
 800fb3c:	d107      	bne.n	800fb4e <_strtol_l.constprop.0+0x56>
 800fb3e:	782c      	ldrb	r4, [r5, #0]
 800fb40:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800fb44:	2c58      	cmp	r4, #88	; 0x58
 800fb46:	d14d      	bne.n	800fbe4 <_strtol_l.constprop.0+0xec>
 800fb48:	786c      	ldrb	r4, [r5, #1]
 800fb4a:	2310      	movs	r3, #16
 800fb4c:	3502      	adds	r5, #2
 800fb4e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800fb52:	f108 38ff 	add.w	r8, r8, #4294967295
 800fb56:	f04f 0c00 	mov.w	ip, #0
 800fb5a:	fbb8 f9f3 	udiv	r9, r8, r3
 800fb5e:	4666      	mov	r6, ip
 800fb60:	fb03 8a19 	mls	sl, r3, r9, r8
 800fb64:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800fb68:	f1be 0f09 	cmp.w	lr, #9
 800fb6c:	d816      	bhi.n	800fb9c <_strtol_l.constprop.0+0xa4>
 800fb6e:	4674      	mov	r4, lr
 800fb70:	42a3      	cmp	r3, r4
 800fb72:	dd24      	ble.n	800fbbe <_strtol_l.constprop.0+0xc6>
 800fb74:	f1bc 0f00 	cmp.w	ip, #0
 800fb78:	db1e      	blt.n	800fbb8 <_strtol_l.constprop.0+0xc0>
 800fb7a:	45b1      	cmp	r9, r6
 800fb7c:	d31c      	bcc.n	800fbb8 <_strtol_l.constprop.0+0xc0>
 800fb7e:	d101      	bne.n	800fb84 <_strtol_l.constprop.0+0x8c>
 800fb80:	45a2      	cmp	sl, r4
 800fb82:	db19      	blt.n	800fbb8 <_strtol_l.constprop.0+0xc0>
 800fb84:	fb06 4603 	mla	r6, r6, r3, r4
 800fb88:	f04f 0c01 	mov.w	ip, #1
 800fb8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fb90:	e7e8      	b.n	800fb64 <_strtol_l.constprop.0+0x6c>
 800fb92:	2c2b      	cmp	r4, #43	; 0x2b
 800fb94:	bf04      	itt	eq
 800fb96:	782c      	ldrbeq	r4, [r5, #0]
 800fb98:	1cb5      	addeq	r5, r6, #2
 800fb9a:	e7ca      	b.n	800fb32 <_strtol_l.constprop.0+0x3a>
 800fb9c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800fba0:	f1be 0f19 	cmp.w	lr, #25
 800fba4:	d801      	bhi.n	800fbaa <_strtol_l.constprop.0+0xb2>
 800fba6:	3c37      	subs	r4, #55	; 0x37
 800fba8:	e7e2      	b.n	800fb70 <_strtol_l.constprop.0+0x78>
 800fbaa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800fbae:	f1be 0f19 	cmp.w	lr, #25
 800fbb2:	d804      	bhi.n	800fbbe <_strtol_l.constprop.0+0xc6>
 800fbb4:	3c57      	subs	r4, #87	; 0x57
 800fbb6:	e7db      	b.n	800fb70 <_strtol_l.constprop.0+0x78>
 800fbb8:	f04f 3cff 	mov.w	ip, #4294967295
 800fbbc:	e7e6      	b.n	800fb8c <_strtol_l.constprop.0+0x94>
 800fbbe:	f1bc 0f00 	cmp.w	ip, #0
 800fbc2:	da05      	bge.n	800fbd0 <_strtol_l.constprop.0+0xd8>
 800fbc4:	2322      	movs	r3, #34	; 0x22
 800fbc6:	6003      	str	r3, [r0, #0]
 800fbc8:	4646      	mov	r6, r8
 800fbca:	b942      	cbnz	r2, 800fbde <_strtol_l.constprop.0+0xe6>
 800fbcc:	4630      	mov	r0, r6
 800fbce:	e79e      	b.n	800fb0e <_strtol_l.constprop.0+0x16>
 800fbd0:	b107      	cbz	r7, 800fbd4 <_strtol_l.constprop.0+0xdc>
 800fbd2:	4276      	negs	r6, r6
 800fbd4:	2a00      	cmp	r2, #0
 800fbd6:	d0f9      	beq.n	800fbcc <_strtol_l.constprop.0+0xd4>
 800fbd8:	f1bc 0f00 	cmp.w	ip, #0
 800fbdc:	d000      	beq.n	800fbe0 <_strtol_l.constprop.0+0xe8>
 800fbde:	1e69      	subs	r1, r5, #1
 800fbe0:	6011      	str	r1, [r2, #0]
 800fbe2:	e7f3      	b.n	800fbcc <_strtol_l.constprop.0+0xd4>
 800fbe4:	2430      	movs	r4, #48	; 0x30
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d1b1      	bne.n	800fb4e <_strtol_l.constprop.0+0x56>
 800fbea:	2308      	movs	r3, #8
 800fbec:	e7af      	b.n	800fb4e <_strtol_l.constprop.0+0x56>
 800fbee:	2c30      	cmp	r4, #48	; 0x30
 800fbf0:	d0a5      	beq.n	800fb3e <_strtol_l.constprop.0+0x46>
 800fbf2:	230a      	movs	r3, #10
 800fbf4:	e7ab      	b.n	800fb4e <_strtol_l.constprop.0+0x56>
 800fbf6:	bf00      	nop
 800fbf8:	08010795 	.word	0x08010795

0800fbfc <strtol>:
 800fbfc:	4613      	mov	r3, r2
 800fbfe:	460a      	mov	r2, r1
 800fc00:	4601      	mov	r1, r0
 800fc02:	4802      	ldr	r0, [pc, #8]	; (800fc0c <strtol+0x10>)
 800fc04:	6800      	ldr	r0, [r0, #0]
 800fc06:	f7ff bf77 	b.w	800faf8 <_strtol_l.constprop.0>
 800fc0a:	bf00      	nop
 800fc0c:	20000154 	.word	0x20000154

0800fc10 <__ssputs_r>:
 800fc10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc14:	688e      	ldr	r6, [r1, #8]
 800fc16:	429e      	cmp	r6, r3
 800fc18:	4682      	mov	sl, r0
 800fc1a:	460c      	mov	r4, r1
 800fc1c:	4690      	mov	r8, r2
 800fc1e:	461f      	mov	r7, r3
 800fc20:	d838      	bhi.n	800fc94 <__ssputs_r+0x84>
 800fc22:	898a      	ldrh	r2, [r1, #12]
 800fc24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fc28:	d032      	beq.n	800fc90 <__ssputs_r+0x80>
 800fc2a:	6825      	ldr	r5, [r4, #0]
 800fc2c:	6909      	ldr	r1, [r1, #16]
 800fc2e:	eba5 0901 	sub.w	r9, r5, r1
 800fc32:	6965      	ldr	r5, [r4, #20]
 800fc34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fc38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fc3c:	3301      	adds	r3, #1
 800fc3e:	444b      	add	r3, r9
 800fc40:	106d      	asrs	r5, r5, #1
 800fc42:	429d      	cmp	r5, r3
 800fc44:	bf38      	it	cc
 800fc46:	461d      	movcc	r5, r3
 800fc48:	0553      	lsls	r3, r2, #21
 800fc4a:	d531      	bpl.n	800fcb0 <__ssputs_r+0xa0>
 800fc4c:	4629      	mov	r1, r5
 800fc4e:	f000 fb63 	bl	8010318 <_malloc_r>
 800fc52:	4606      	mov	r6, r0
 800fc54:	b950      	cbnz	r0, 800fc6c <__ssputs_r+0x5c>
 800fc56:	230c      	movs	r3, #12
 800fc58:	f8ca 3000 	str.w	r3, [sl]
 800fc5c:	89a3      	ldrh	r3, [r4, #12]
 800fc5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc62:	81a3      	strh	r3, [r4, #12]
 800fc64:	f04f 30ff 	mov.w	r0, #4294967295
 800fc68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc6c:	6921      	ldr	r1, [r4, #16]
 800fc6e:	464a      	mov	r2, r9
 800fc70:	f000 fabe 	bl	80101f0 <memcpy>
 800fc74:	89a3      	ldrh	r3, [r4, #12]
 800fc76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fc7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc7e:	81a3      	strh	r3, [r4, #12]
 800fc80:	6126      	str	r6, [r4, #16]
 800fc82:	6165      	str	r5, [r4, #20]
 800fc84:	444e      	add	r6, r9
 800fc86:	eba5 0509 	sub.w	r5, r5, r9
 800fc8a:	6026      	str	r6, [r4, #0]
 800fc8c:	60a5      	str	r5, [r4, #8]
 800fc8e:	463e      	mov	r6, r7
 800fc90:	42be      	cmp	r6, r7
 800fc92:	d900      	bls.n	800fc96 <__ssputs_r+0x86>
 800fc94:	463e      	mov	r6, r7
 800fc96:	6820      	ldr	r0, [r4, #0]
 800fc98:	4632      	mov	r2, r6
 800fc9a:	4641      	mov	r1, r8
 800fc9c:	f000 fab6 	bl	801020c <memmove>
 800fca0:	68a3      	ldr	r3, [r4, #8]
 800fca2:	1b9b      	subs	r3, r3, r6
 800fca4:	60a3      	str	r3, [r4, #8]
 800fca6:	6823      	ldr	r3, [r4, #0]
 800fca8:	4433      	add	r3, r6
 800fcaa:	6023      	str	r3, [r4, #0]
 800fcac:	2000      	movs	r0, #0
 800fcae:	e7db      	b.n	800fc68 <__ssputs_r+0x58>
 800fcb0:	462a      	mov	r2, r5
 800fcb2:	f000 fba5 	bl	8010400 <_realloc_r>
 800fcb6:	4606      	mov	r6, r0
 800fcb8:	2800      	cmp	r0, #0
 800fcba:	d1e1      	bne.n	800fc80 <__ssputs_r+0x70>
 800fcbc:	6921      	ldr	r1, [r4, #16]
 800fcbe:	4650      	mov	r0, sl
 800fcc0:	f000 fabe 	bl	8010240 <_free_r>
 800fcc4:	e7c7      	b.n	800fc56 <__ssputs_r+0x46>
	...

0800fcc8 <_svfiprintf_r>:
 800fcc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fccc:	4698      	mov	r8, r3
 800fcce:	898b      	ldrh	r3, [r1, #12]
 800fcd0:	061b      	lsls	r3, r3, #24
 800fcd2:	b09d      	sub	sp, #116	; 0x74
 800fcd4:	4607      	mov	r7, r0
 800fcd6:	460d      	mov	r5, r1
 800fcd8:	4614      	mov	r4, r2
 800fcda:	d50e      	bpl.n	800fcfa <_svfiprintf_r+0x32>
 800fcdc:	690b      	ldr	r3, [r1, #16]
 800fcde:	b963      	cbnz	r3, 800fcfa <_svfiprintf_r+0x32>
 800fce0:	2140      	movs	r1, #64	; 0x40
 800fce2:	f000 fb19 	bl	8010318 <_malloc_r>
 800fce6:	6028      	str	r0, [r5, #0]
 800fce8:	6128      	str	r0, [r5, #16]
 800fcea:	b920      	cbnz	r0, 800fcf6 <_svfiprintf_r+0x2e>
 800fcec:	230c      	movs	r3, #12
 800fcee:	603b      	str	r3, [r7, #0]
 800fcf0:	f04f 30ff 	mov.w	r0, #4294967295
 800fcf4:	e0d1      	b.n	800fe9a <_svfiprintf_r+0x1d2>
 800fcf6:	2340      	movs	r3, #64	; 0x40
 800fcf8:	616b      	str	r3, [r5, #20]
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	9309      	str	r3, [sp, #36]	; 0x24
 800fcfe:	2320      	movs	r3, #32
 800fd00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fd04:	f8cd 800c 	str.w	r8, [sp, #12]
 800fd08:	2330      	movs	r3, #48	; 0x30
 800fd0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800feb4 <_svfiprintf_r+0x1ec>
 800fd0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fd12:	f04f 0901 	mov.w	r9, #1
 800fd16:	4623      	mov	r3, r4
 800fd18:	469a      	mov	sl, r3
 800fd1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd1e:	b10a      	cbz	r2, 800fd24 <_svfiprintf_r+0x5c>
 800fd20:	2a25      	cmp	r2, #37	; 0x25
 800fd22:	d1f9      	bne.n	800fd18 <_svfiprintf_r+0x50>
 800fd24:	ebba 0b04 	subs.w	fp, sl, r4
 800fd28:	d00b      	beq.n	800fd42 <_svfiprintf_r+0x7a>
 800fd2a:	465b      	mov	r3, fp
 800fd2c:	4622      	mov	r2, r4
 800fd2e:	4629      	mov	r1, r5
 800fd30:	4638      	mov	r0, r7
 800fd32:	f7ff ff6d 	bl	800fc10 <__ssputs_r>
 800fd36:	3001      	adds	r0, #1
 800fd38:	f000 80aa 	beq.w	800fe90 <_svfiprintf_r+0x1c8>
 800fd3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd3e:	445a      	add	r2, fp
 800fd40:	9209      	str	r2, [sp, #36]	; 0x24
 800fd42:	f89a 3000 	ldrb.w	r3, [sl]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	f000 80a2 	beq.w	800fe90 <_svfiprintf_r+0x1c8>
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	f04f 32ff 	mov.w	r2, #4294967295
 800fd52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd56:	f10a 0a01 	add.w	sl, sl, #1
 800fd5a:	9304      	str	r3, [sp, #16]
 800fd5c:	9307      	str	r3, [sp, #28]
 800fd5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fd62:	931a      	str	r3, [sp, #104]	; 0x68
 800fd64:	4654      	mov	r4, sl
 800fd66:	2205      	movs	r2, #5
 800fd68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd6c:	4851      	ldr	r0, [pc, #324]	; (800feb4 <_svfiprintf_r+0x1ec>)
 800fd6e:	f7f0 fb67 	bl	8000440 <memchr>
 800fd72:	9a04      	ldr	r2, [sp, #16]
 800fd74:	b9d8      	cbnz	r0, 800fdae <_svfiprintf_r+0xe6>
 800fd76:	06d0      	lsls	r0, r2, #27
 800fd78:	bf44      	itt	mi
 800fd7a:	2320      	movmi	r3, #32
 800fd7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd80:	0711      	lsls	r1, r2, #28
 800fd82:	bf44      	itt	mi
 800fd84:	232b      	movmi	r3, #43	; 0x2b
 800fd86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd8a:	f89a 3000 	ldrb.w	r3, [sl]
 800fd8e:	2b2a      	cmp	r3, #42	; 0x2a
 800fd90:	d015      	beq.n	800fdbe <_svfiprintf_r+0xf6>
 800fd92:	9a07      	ldr	r2, [sp, #28]
 800fd94:	4654      	mov	r4, sl
 800fd96:	2000      	movs	r0, #0
 800fd98:	f04f 0c0a 	mov.w	ip, #10
 800fd9c:	4621      	mov	r1, r4
 800fd9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fda2:	3b30      	subs	r3, #48	; 0x30
 800fda4:	2b09      	cmp	r3, #9
 800fda6:	d94e      	bls.n	800fe46 <_svfiprintf_r+0x17e>
 800fda8:	b1b0      	cbz	r0, 800fdd8 <_svfiprintf_r+0x110>
 800fdaa:	9207      	str	r2, [sp, #28]
 800fdac:	e014      	b.n	800fdd8 <_svfiprintf_r+0x110>
 800fdae:	eba0 0308 	sub.w	r3, r0, r8
 800fdb2:	fa09 f303 	lsl.w	r3, r9, r3
 800fdb6:	4313      	orrs	r3, r2
 800fdb8:	9304      	str	r3, [sp, #16]
 800fdba:	46a2      	mov	sl, r4
 800fdbc:	e7d2      	b.n	800fd64 <_svfiprintf_r+0x9c>
 800fdbe:	9b03      	ldr	r3, [sp, #12]
 800fdc0:	1d19      	adds	r1, r3, #4
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	9103      	str	r1, [sp, #12]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	bfbb      	ittet	lt
 800fdca:	425b      	neglt	r3, r3
 800fdcc:	f042 0202 	orrlt.w	r2, r2, #2
 800fdd0:	9307      	strge	r3, [sp, #28]
 800fdd2:	9307      	strlt	r3, [sp, #28]
 800fdd4:	bfb8      	it	lt
 800fdd6:	9204      	strlt	r2, [sp, #16]
 800fdd8:	7823      	ldrb	r3, [r4, #0]
 800fdda:	2b2e      	cmp	r3, #46	; 0x2e
 800fddc:	d10c      	bne.n	800fdf8 <_svfiprintf_r+0x130>
 800fdde:	7863      	ldrb	r3, [r4, #1]
 800fde0:	2b2a      	cmp	r3, #42	; 0x2a
 800fde2:	d135      	bne.n	800fe50 <_svfiprintf_r+0x188>
 800fde4:	9b03      	ldr	r3, [sp, #12]
 800fde6:	1d1a      	adds	r2, r3, #4
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	9203      	str	r2, [sp, #12]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	bfb8      	it	lt
 800fdf0:	f04f 33ff 	movlt.w	r3, #4294967295
 800fdf4:	3402      	adds	r4, #2
 800fdf6:	9305      	str	r3, [sp, #20]
 800fdf8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fec4 <_svfiprintf_r+0x1fc>
 800fdfc:	7821      	ldrb	r1, [r4, #0]
 800fdfe:	2203      	movs	r2, #3
 800fe00:	4650      	mov	r0, sl
 800fe02:	f7f0 fb1d 	bl	8000440 <memchr>
 800fe06:	b140      	cbz	r0, 800fe1a <_svfiprintf_r+0x152>
 800fe08:	2340      	movs	r3, #64	; 0x40
 800fe0a:	eba0 000a 	sub.w	r0, r0, sl
 800fe0e:	fa03 f000 	lsl.w	r0, r3, r0
 800fe12:	9b04      	ldr	r3, [sp, #16]
 800fe14:	4303      	orrs	r3, r0
 800fe16:	3401      	adds	r4, #1
 800fe18:	9304      	str	r3, [sp, #16]
 800fe1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe1e:	4826      	ldr	r0, [pc, #152]	; (800feb8 <_svfiprintf_r+0x1f0>)
 800fe20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fe24:	2206      	movs	r2, #6
 800fe26:	f7f0 fb0b 	bl	8000440 <memchr>
 800fe2a:	2800      	cmp	r0, #0
 800fe2c:	d038      	beq.n	800fea0 <_svfiprintf_r+0x1d8>
 800fe2e:	4b23      	ldr	r3, [pc, #140]	; (800febc <_svfiprintf_r+0x1f4>)
 800fe30:	bb1b      	cbnz	r3, 800fe7a <_svfiprintf_r+0x1b2>
 800fe32:	9b03      	ldr	r3, [sp, #12]
 800fe34:	3307      	adds	r3, #7
 800fe36:	f023 0307 	bic.w	r3, r3, #7
 800fe3a:	3308      	adds	r3, #8
 800fe3c:	9303      	str	r3, [sp, #12]
 800fe3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe40:	4433      	add	r3, r6
 800fe42:	9309      	str	r3, [sp, #36]	; 0x24
 800fe44:	e767      	b.n	800fd16 <_svfiprintf_r+0x4e>
 800fe46:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe4a:	460c      	mov	r4, r1
 800fe4c:	2001      	movs	r0, #1
 800fe4e:	e7a5      	b.n	800fd9c <_svfiprintf_r+0xd4>
 800fe50:	2300      	movs	r3, #0
 800fe52:	3401      	adds	r4, #1
 800fe54:	9305      	str	r3, [sp, #20]
 800fe56:	4619      	mov	r1, r3
 800fe58:	f04f 0c0a 	mov.w	ip, #10
 800fe5c:	4620      	mov	r0, r4
 800fe5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe62:	3a30      	subs	r2, #48	; 0x30
 800fe64:	2a09      	cmp	r2, #9
 800fe66:	d903      	bls.n	800fe70 <_svfiprintf_r+0x1a8>
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d0c5      	beq.n	800fdf8 <_svfiprintf_r+0x130>
 800fe6c:	9105      	str	r1, [sp, #20]
 800fe6e:	e7c3      	b.n	800fdf8 <_svfiprintf_r+0x130>
 800fe70:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe74:	4604      	mov	r4, r0
 800fe76:	2301      	movs	r3, #1
 800fe78:	e7f0      	b.n	800fe5c <_svfiprintf_r+0x194>
 800fe7a:	ab03      	add	r3, sp, #12
 800fe7c:	9300      	str	r3, [sp, #0]
 800fe7e:	462a      	mov	r2, r5
 800fe80:	4b0f      	ldr	r3, [pc, #60]	; (800fec0 <_svfiprintf_r+0x1f8>)
 800fe82:	a904      	add	r1, sp, #16
 800fe84:	4638      	mov	r0, r7
 800fe86:	f3af 8000 	nop.w
 800fe8a:	1c42      	adds	r2, r0, #1
 800fe8c:	4606      	mov	r6, r0
 800fe8e:	d1d6      	bne.n	800fe3e <_svfiprintf_r+0x176>
 800fe90:	89ab      	ldrh	r3, [r5, #12]
 800fe92:	065b      	lsls	r3, r3, #25
 800fe94:	f53f af2c 	bmi.w	800fcf0 <_svfiprintf_r+0x28>
 800fe98:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe9a:	b01d      	add	sp, #116	; 0x74
 800fe9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fea0:	ab03      	add	r3, sp, #12
 800fea2:	9300      	str	r3, [sp, #0]
 800fea4:	462a      	mov	r2, r5
 800fea6:	4b06      	ldr	r3, [pc, #24]	; (800fec0 <_svfiprintf_r+0x1f8>)
 800fea8:	a904      	add	r1, sp, #16
 800feaa:	4638      	mov	r0, r7
 800feac:	f000 f87a 	bl	800ffa4 <_printf_i>
 800feb0:	e7eb      	b.n	800fe8a <_svfiprintf_r+0x1c2>
 800feb2:	bf00      	nop
 800feb4:	08010895 	.word	0x08010895
 800feb8:	0801089f 	.word	0x0801089f
 800febc:	00000000 	.word	0x00000000
 800fec0:	0800fc11 	.word	0x0800fc11
 800fec4:	0801089b 	.word	0x0801089b

0800fec8 <_printf_common>:
 800fec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fecc:	4616      	mov	r6, r2
 800fece:	4699      	mov	r9, r3
 800fed0:	688a      	ldr	r2, [r1, #8]
 800fed2:	690b      	ldr	r3, [r1, #16]
 800fed4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fed8:	4293      	cmp	r3, r2
 800feda:	bfb8      	it	lt
 800fedc:	4613      	movlt	r3, r2
 800fede:	6033      	str	r3, [r6, #0]
 800fee0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fee4:	4607      	mov	r7, r0
 800fee6:	460c      	mov	r4, r1
 800fee8:	b10a      	cbz	r2, 800feee <_printf_common+0x26>
 800feea:	3301      	adds	r3, #1
 800feec:	6033      	str	r3, [r6, #0]
 800feee:	6823      	ldr	r3, [r4, #0]
 800fef0:	0699      	lsls	r1, r3, #26
 800fef2:	bf42      	ittt	mi
 800fef4:	6833      	ldrmi	r3, [r6, #0]
 800fef6:	3302      	addmi	r3, #2
 800fef8:	6033      	strmi	r3, [r6, #0]
 800fefa:	6825      	ldr	r5, [r4, #0]
 800fefc:	f015 0506 	ands.w	r5, r5, #6
 800ff00:	d106      	bne.n	800ff10 <_printf_common+0x48>
 800ff02:	f104 0a19 	add.w	sl, r4, #25
 800ff06:	68e3      	ldr	r3, [r4, #12]
 800ff08:	6832      	ldr	r2, [r6, #0]
 800ff0a:	1a9b      	subs	r3, r3, r2
 800ff0c:	42ab      	cmp	r3, r5
 800ff0e:	dc26      	bgt.n	800ff5e <_printf_common+0x96>
 800ff10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ff14:	1e13      	subs	r3, r2, #0
 800ff16:	6822      	ldr	r2, [r4, #0]
 800ff18:	bf18      	it	ne
 800ff1a:	2301      	movne	r3, #1
 800ff1c:	0692      	lsls	r2, r2, #26
 800ff1e:	d42b      	bmi.n	800ff78 <_printf_common+0xb0>
 800ff20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ff24:	4649      	mov	r1, r9
 800ff26:	4638      	mov	r0, r7
 800ff28:	47c0      	blx	r8
 800ff2a:	3001      	adds	r0, #1
 800ff2c:	d01e      	beq.n	800ff6c <_printf_common+0xa4>
 800ff2e:	6823      	ldr	r3, [r4, #0]
 800ff30:	68e5      	ldr	r5, [r4, #12]
 800ff32:	6832      	ldr	r2, [r6, #0]
 800ff34:	f003 0306 	and.w	r3, r3, #6
 800ff38:	2b04      	cmp	r3, #4
 800ff3a:	bf08      	it	eq
 800ff3c:	1aad      	subeq	r5, r5, r2
 800ff3e:	68a3      	ldr	r3, [r4, #8]
 800ff40:	6922      	ldr	r2, [r4, #16]
 800ff42:	bf0c      	ite	eq
 800ff44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ff48:	2500      	movne	r5, #0
 800ff4a:	4293      	cmp	r3, r2
 800ff4c:	bfc4      	itt	gt
 800ff4e:	1a9b      	subgt	r3, r3, r2
 800ff50:	18ed      	addgt	r5, r5, r3
 800ff52:	2600      	movs	r6, #0
 800ff54:	341a      	adds	r4, #26
 800ff56:	42b5      	cmp	r5, r6
 800ff58:	d11a      	bne.n	800ff90 <_printf_common+0xc8>
 800ff5a:	2000      	movs	r0, #0
 800ff5c:	e008      	b.n	800ff70 <_printf_common+0xa8>
 800ff5e:	2301      	movs	r3, #1
 800ff60:	4652      	mov	r2, sl
 800ff62:	4649      	mov	r1, r9
 800ff64:	4638      	mov	r0, r7
 800ff66:	47c0      	blx	r8
 800ff68:	3001      	adds	r0, #1
 800ff6a:	d103      	bne.n	800ff74 <_printf_common+0xac>
 800ff6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ff70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff74:	3501      	adds	r5, #1
 800ff76:	e7c6      	b.n	800ff06 <_printf_common+0x3e>
 800ff78:	18e1      	adds	r1, r4, r3
 800ff7a:	1c5a      	adds	r2, r3, #1
 800ff7c:	2030      	movs	r0, #48	; 0x30
 800ff7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ff82:	4422      	add	r2, r4
 800ff84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ff88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ff8c:	3302      	adds	r3, #2
 800ff8e:	e7c7      	b.n	800ff20 <_printf_common+0x58>
 800ff90:	2301      	movs	r3, #1
 800ff92:	4622      	mov	r2, r4
 800ff94:	4649      	mov	r1, r9
 800ff96:	4638      	mov	r0, r7
 800ff98:	47c0      	blx	r8
 800ff9a:	3001      	adds	r0, #1
 800ff9c:	d0e6      	beq.n	800ff6c <_printf_common+0xa4>
 800ff9e:	3601      	adds	r6, #1
 800ffa0:	e7d9      	b.n	800ff56 <_printf_common+0x8e>
	...

0800ffa4 <_printf_i>:
 800ffa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ffa8:	7e0f      	ldrb	r7, [r1, #24]
 800ffaa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ffac:	2f78      	cmp	r7, #120	; 0x78
 800ffae:	4691      	mov	r9, r2
 800ffb0:	4680      	mov	r8, r0
 800ffb2:	460c      	mov	r4, r1
 800ffb4:	469a      	mov	sl, r3
 800ffb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ffba:	d807      	bhi.n	800ffcc <_printf_i+0x28>
 800ffbc:	2f62      	cmp	r7, #98	; 0x62
 800ffbe:	d80a      	bhi.n	800ffd6 <_printf_i+0x32>
 800ffc0:	2f00      	cmp	r7, #0
 800ffc2:	f000 80d8 	beq.w	8010176 <_printf_i+0x1d2>
 800ffc6:	2f58      	cmp	r7, #88	; 0x58
 800ffc8:	f000 80a3 	beq.w	8010112 <_printf_i+0x16e>
 800ffcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ffd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ffd4:	e03a      	b.n	801004c <_printf_i+0xa8>
 800ffd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ffda:	2b15      	cmp	r3, #21
 800ffdc:	d8f6      	bhi.n	800ffcc <_printf_i+0x28>
 800ffde:	a101      	add	r1, pc, #4	; (adr r1, 800ffe4 <_printf_i+0x40>)
 800ffe0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ffe4:	0801003d 	.word	0x0801003d
 800ffe8:	08010051 	.word	0x08010051
 800ffec:	0800ffcd 	.word	0x0800ffcd
 800fff0:	0800ffcd 	.word	0x0800ffcd
 800fff4:	0800ffcd 	.word	0x0800ffcd
 800fff8:	0800ffcd 	.word	0x0800ffcd
 800fffc:	08010051 	.word	0x08010051
 8010000:	0800ffcd 	.word	0x0800ffcd
 8010004:	0800ffcd 	.word	0x0800ffcd
 8010008:	0800ffcd 	.word	0x0800ffcd
 801000c:	0800ffcd 	.word	0x0800ffcd
 8010010:	0801015d 	.word	0x0801015d
 8010014:	08010081 	.word	0x08010081
 8010018:	0801013f 	.word	0x0801013f
 801001c:	0800ffcd 	.word	0x0800ffcd
 8010020:	0800ffcd 	.word	0x0800ffcd
 8010024:	0801017f 	.word	0x0801017f
 8010028:	0800ffcd 	.word	0x0800ffcd
 801002c:	08010081 	.word	0x08010081
 8010030:	0800ffcd 	.word	0x0800ffcd
 8010034:	0800ffcd 	.word	0x0800ffcd
 8010038:	08010147 	.word	0x08010147
 801003c:	682b      	ldr	r3, [r5, #0]
 801003e:	1d1a      	adds	r2, r3, #4
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	602a      	str	r2, [r5, #0]
 8010044:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010048:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801004c:	2301      	movs	r3, #1
 801004e:	e0a3      	b.n	8010198 <_printf_i+0x1f4>
 8010050:	6820      	ldr	r0, [r4, #0]
 8010052:	6829      	ldr	r1, [r5, #0]
 8010054:	0606      	lsls	r6, r0, #24
 8010056:	f101 0304 	add.w	r3, r1, #4
 801005a:	d50a      	bpl.n	8010072 <_printf_i+0xce>
 801005c:	680e      	ldr	r6, [r1, #0]
 801005e:	602b      	str	r3, [r5, #0]
 8010060:	2e00      	cmp	r6, #0
 8010062:	da03      	bge.n	801006c <_printf_i+0xc8>
 8010064:	232d      	movs	r3, #45	; 0x2d
 8010066:	4276      	negs	r6, r6
 8010068:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801006c:	485e      	ldr	r0, [pc, #376]	; (80101e8 <_printf_i+0x244>)
 801006e:	230a      	movs	r3, #10
 8010070:	e019      	b.n	80100a6 <_printf_i+0x102>
 8010072:	680e      	ldr	r6, [r1, #0]
 8010074:	602b      	str	r3, [r5, #0]
 8010076:	f010 0f40 	tst.w	r0, #64	; 0x40
 801007a:	bf18      	it	ne
 801007c:	b236      	sxthne	r6, r6
 801007e:	e7ef      	b.n	8010060 <_printf_i+0xbc>
 8010080:	682b      	ldr	r3, [r5, #0]
 8010082:	6820      	ldr	r0, [r4, #0]
 8010084:	1d19      	adds	r1, r3, #4
 8010086:	6029      	str	r1, [r5, #0]
 8010088:	0601      	lsls	r1, r0, #24
 801008a:	d501      	bpl.n	8010090 <_printf_i+0xec>
 801008c:	681e      	ldr	r6, [r3, #0]
 801008e:	e002      	b.n	8010096 <_printf_i+0xf2>
 8010090:	0646      	lsls	r6, r0, #25
 8010092:	d5fb      	bpl.n	801008c <_printf_i+0xe8>
 8010094:	881e      	ldrh	r6, [r3, #0]
 8010096:	4854      	ldr	r0, [pc, #336]	; (80101e8 <_printf_i+0x244>)
 8010098:	2f6f      	cmp	r7, #111	; 0x6f
 801009a:	bf0c      	ite	eq
 801009c:	2308      	moveq	r3, #8
 801009e:	230a      	movne	r3, #10
 80100a0:	2100      	movs	r1, #0
 80100a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80100a6:	6865      	ldr	r5, [r4, #4]
 80100a8:	60a5      	str	r5, [r4, #8]
 80100aa:	2d00      	cmp	r5, #0
 80100ac:	bfa2      	ittt	ge
 80100ae:	6821      	ldrge	r1, [r4, #0]
 80100b0:	f021 0104 	bicge.w	r1, r1, #4
 80100b4:	6021      	strge	r1, [r4, #0]
 80100b6:	b90e      	cbnz	r6, 80100bc <_printf_i+0x118>
 80100b8:	2d00      	cmp	r5, #0
 80100ba:	d04d      	beq.n	8010158 <_printf_i+0x1b4>
 80100bc:	4615      	mov	r5, r2
 80100be:	fbb6 f1f3 	udiv	r1, r6, r3
 80100c2:	fb03 6711 	mls	r7, r3, r1, r6
 80100c6:	5dc7      	ldrb	r7, [r0, r7]
 80100c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80100cc:	4637      	mov	r7, r6
 80100ce:	42bb      	cmp	r3, r7
 80100d0:	460e      	mov	r6, r1
 80100d2:	d9f4      	bls.n	80100be <_printf_i+0x11a>
 80100d4:	2b08      	cmp	r3, #8
 80100d6:	d10b      	bne.n	80100f0 <_printf_i+0x14c>
 80100d8:	6823      	ldr	r3, [r4, #0]
 80100da:	07de      	lsls	r6, r3, #31
 80100dc:	d508      	bpl.n	80100f0 <_printf_i+0x14c>
 80100de:	6923      	ldr	r3, [r4, #16]
 80100e0:	6861      	ldr	r1, [r4, #4]
 80100e2:	4299      	cmp	r1, r3
 80100e4:	bfde      	ittt	le
 80100e6:	2330      	movle	r3, #48	; 0x30
 80100e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80100ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80100f0:	1b52      	subs	r2, r2, r5
 80100f2:	6122      	str	r2, [r4, #16]
 80100f4:	f8cd a000 	str.w	sl, [sp]
 80100f8:	464b      	mov	r3, r9
 80100fa:	aa03      	add	r2, sp, #12
 80100fc:	4621      	mov	r1, r4
 80100fe:	4640      	mov	r0, r8
 8010100:	f7ff fee2 	bl	800fec8 <_printf_common>
 8010104:	3001      	adds	r0, #1
 8010106:	d14c      	bne.n	80101a2 <_printf_i+0x1fe>
 8010108:	f04f 30ff 	mov.w	r0, #4294967295
 801010c:	b004      	add	sp, #16
 801010e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010112:	4835      	ldr	r0, [pc, #212]	; (80101e8 <_printf_i+0x244>)
 8010114:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010118:	6829      	ldr	r1, [r5, #0]
 801011a:	6823      	ldr	r3, [r4, #0]
 801011c:	f851 6b04 	ldr.w	r6, [r1], #4
 8010120:	6029      	str	r1, [r5, #0]
 8010122:	061d      	lsls	r5, r3, #24
 8010124:	d514      	bpl.n	8010150 <_printf_i+0x1ac>
 8010126:	07df      	lsls	r7, r3, #31
 8010128:	bf44      	itt	mi
 801012a:	f043 0320 	orrmi.w	r3, r3, #32
 801012e:	6023      	strmi	r3, [r4, #0]
 8010130:	b91e      	cbnz	r6, 801013a <_printf_i+0x196>
 8010132:	6823      	ldr	r3, [r4, #0]
 8010134:	f023 0320 	bic.w	r3, r3, #32
 8010138:	6023      	str	r3, [r4, #0]
 801013a:	2310      	movs	r3, #16
 801013c:	e7b0      	b.n	80100a0 <_printf_i+0xfc>
 801013e:	6823      	ldr	r3, [r4, #0]
 8010140:	f043 0320 	orr.w	r3, r3, #32
 8010144:	6023      	str	r3, [r4, #0]
 8010146:	2378      	movs	r3, #120	; 0x78
 8010148:	4828      	ldr	r0, [pc, #160]	; (80101ec <_printf_i+0x248>)
 801014a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801014e:	e7e3      	b.n	8010118 <_printf_i+0x174>
 8010150:	0659      	lsls	r1, r3, #25
 8010152:	bf48      	it	mi
 8010154:	b2b6      	uxthmi	r6, r6
 8010156:	e7e6      	b.n	8010126 <_printf_i+0x182>
 8010158:	4615      	mov	r5, r2
 801015a:	e7bb      	b.n	80100d4 <_printf_i+0x130>
 801015c:	682b      	ldr	r3, [r5, #0]
 801015e:	6826      	ldr	r6, [r4, #0]
 8010160:	6961      	ldr	r1, [r4, #20]
 8010162:	1d18      	adds	r0, r3, #4
 8010164:	6028      	str	r0, [r5, #0]
 8010166:	0635      	lsls	r5, r6, #24
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	d501      	bpl.n	8010170 <_printf_i+0x1cc>
 801016c:	6019      	str	r1, [r3, #0]
 801016e:	e002      	b.n	8010176 <_printf_i+0x1d2>
 8010170:	0670      	lsls	r0, r6, #25
 8010172:	d5fb      	bpl.n	801016c <_printf_i+0x1c8>
 8010174:	8019      	strh	r1, [r3, #0]
 8010176:	2300      	movs	r3, #0
 8010178:	6123      	str	r3, [r4, #16]
 801017a:	4615      	mov	r5, r2
 801017c:	e7ba      	b.n	80100f4 <_printf_i+0x150>
 801017e:	682b      	ldr	r3, [r5, #0]
 8010180:	1d1a      	adds	r2, r3, #4
 8010182:	602a      	str	r2, [r5, #0]
 8010184:	681d      	ldr	r5, [r3, #0]
 8010186:	6862      	ldr	r2, [r4, #4]
 8010188:	2100      	movs	r1, #0
 801018a:	4628      	mov	r0, r5
 801018c:	f7f0 f958 	bl	8000440 <memchr>
 8010190:	b108      	cbz	r0, 8010196 <_printf_i+0x1f2>
 8010192:	1b40      	subs	r0, r0, r5
 8010194:	6060      	str	r0, [r4, #4]
 8010196:	6863      	ldr	r3, [r4, #4]
 8010198:	6123      	str	r3, [r4, #16]
 801019a:	2300      	movs	r3, #0
 801019c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80101a0:	e7a8      	b.n	80100f4 <_printf_i+0x150>
 80101a2:	6923      	ldr	r3, [r4, #16]
 80101a4:	462a      	mov	r2, r5
 80101a6:	4649      	mov	r1, r9
 80101a8:	4640      	mov	r0, r8
 80101aa:	47d0      	blx	sl
 80101ac:	3001      	adds	r0, #1
 80101ae:	d0ab      	beq.n	8010108 <_printf_i+0x164>
 80101b0:	6823      	ldr	r3, [r4, #0]
 80101b2:	079b      	lsls	r3, r3, #30
 80101b4:	d413      	bmi.n	80101de <_printf_i+0x23a>
 80101b6:	68e0      	ldr	r0, [r4, #12]
 80101b8:	9b03      	ldr	r3, [sp, #12]
 80101ba:	4298      	cmp	r0, r3
 80101bc:	bfb8      	it	lt
 80101be:	4618      	movlt	r0, r3
 80101c0:	e7a4      	b.n	801010c <_printf_i+0x168>
 80101c2:	2301      	movs	r3, #1
 80101c4:	4632      	mov	r2, r6
 80101c6:	4649      	mov	r1, r9
 80101c8:	4640      	mov	r0, r8
 80101ca:	47d0      	blx	sl
 80101cc:	3001      	adds	r0, #1
 80101ce:	d09b      	beq.n	8010108 <_printf_i+0x164>
 80101d0:	3501      	adds	r5, #1
 80101d2:	68e3      	ldr	r3, [r4, #12]
 80101d4:	9903      	ldr	r1, [sp, #12]
 80101d6:	1a5b      	subs	r3, r3, r1
 80101d8:	42ab      	cmp	r3, r5
 80101da:	dcf2      	bgt.n	80101c2 <_printf_i+0x21e>
 80101dc:	e7eb      	b.n	80101b6 <_printf_i+0x212>
 80101de:	2500      	movs	r5, #0
 80101e0:	f104 0619 	add.w	r6, r4, #25
 80101e4:	e7f5      	b.n	80101d2 <_printf_i+0x22e>
 80101e6:	bf00      	nop
 80101e8:	080108a6 	.word	0x080108a6
 80101ec:	080108b7 	.word	0x080108b7

080101f0 <memcpy>:
 80101f0:	440a      	add	r2, r1
 80101f2:	4291      	cmp	r1, r2
 80101f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80101f8:	d100      	bne.n	80101fc <memcpy+0xc>
 80101fa:	4770      	bx	lr
 80101fc:	b510      	push	{r4, lr}
 80101fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010202:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010206:	4291      	cmp	r1, r2
 8010208:	d1f9      	bne.n	80101fe <memcpy+0xe>
 801020a:	bd10      	pop	{r4, pc}

0801020c <memmove>:
 801020c:	4288      	cmp	r0, r1
 801020e:	b510      	push	{r4, lr}
 8010210:	eb01 0402 	add.w	r4, r1, r2
 8010214:	d902      	bls.n	801021c <memmove+0x10>
 8010216:	4284      	cmp	r4, r0
 8010218:	4623      	mov	r3, r4
 801021a:	d807      	bhi.n	801022c <memmove+0x20>
 801021c:	1e43      	subs	r3, r0, #1
 801021e:	42a1      	cmp	r1, r4
 8010220:	d008      	beq.n	8010234 <memmove+0x28>
 8010222:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010226:	f803 2f01 	strb.w	r2, [r3, #1]!
 801022a:	e7f8      	b.n	801021e <memmove+0x12>
 801022c:	4402      	add	r2, r0
 801022e:	4601      	mov	r1, r0
 8010230:	428a      	cmp	r2, r1
 8010232:	d100      	bne.n	8010236 <memmove+0x2a>
 8010234:	bd10      	pop	{r4, pc}
 8010236:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801023a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801023e:	e7f7      	b.n	8010230 <memmove+0x24>

08010240 <_free_r>:
 8010240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010242:	2900      	cmp	r1, #0
 8010244:	d044      	beq.n	80102d0 <_free_r+0x90>
 8010246:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801024a:	9001      	str	r0, [sp, #4]
 801024c:	2b00      	cmp	r3, #0
 801024e:	f1a1 0404 	sub.w	r4, r1, #4
 8010252:	bfb8      	it	lt
 8010254:	18e4      	addlt	r4, r4, r3
 8010256:	f000 f913 	bl	8010480 <__malloc_lock>
 801025a:	4a1e      	ldr	r2, [pc, #120]	; (80102d4 <_free_r+0x94>)
 801025c:	9801      	ldr	r0, [sp, #4]
 801025e:	6813      	ldr	r3, [r2, #0]
 8010260:	b933      	cbnz	r3, 8010270 <_free_r+0x30>
 8010262:	6063      	str	r3, [r4, #4]
 8010264:	6014      	str	r4, [r2, #0]
 8010266:	b003      	add	sp, #12
 8010268:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801026c:	f000 b90e 	b.w	801048c <__malloc_unlock>
 8010270:	42a3      	cmp	r3, r4
 8010272:	d908      	bls.n	8010286 <_free_r+0x46>
 8010274:	6825      	ldr	r5, [r4, #0]
 8010276:	1961      	adds	r1, r4, r5
 8010278:	428b      	cmp	r3, r1
 801027a:	bf01      	itttt	eq
 801027c:	6819      	ldreq	r1, [r3, #0]
 801027e:	685b      	ldreq	r3, [r3, #4]
 8010280:	1949      	addeq	r1, r1, r5
 8010282:	6021      	streq	r1, [r4, #0]
 8010284:	e7ed      	b.n	8010262 <_free_r+0x22>
 8010286:	461a      	mov	r2, r3
 8010288:	685b      	ldr	r3, [r3, #4]
 801028a:	b10b      	cbz	r3, 8010290 <_free_r+0x50>
 801028c:	42a3      	cmp	r3, r4
 801028e:	d9fa      	bls.n	8010286 <_free_r+0x46>
 8010290:	6811      	ldr	r1, [r2, #0]
 8010292:	1855      	adds	r5, r2, r1
 8010294:	42a5      	cmp	r5, r4
 8010296:	d10b      	bne.n	80102b0 <_free_r+0x70>
 8010298:	6824      	ldr	r4, [r4, #0]
 801029a:	4421      	add	r1, r4
 801029c:	1854      	adds	r4, r2, r1
 801029e:	42a3      	cmp	r3, r4
 80102a0:	6011      	str	r1, [r2, #0]
 80102a2:	d1e0      	bne.n	8010266 <_free_r+0x26>
 80102a4:	681c      	ldr	r4, [r3, #0]
 80102a6:	685b      	ldr	r3, [r3, #4]
 80102a8:	6053      	str	r3, [r2, #4]
 80102aa:	4421      	add	r1, r4
 80102ac:	6011      	str	r1, [r2, #0]
 80102ae:	e7da      	b.n	8010266 <_free_r+0x26>
 80102b0:	d902      	bls.n	80102b8 <_free_r+0x78>
 80102b2:	230c      	movs	r3, #12
 80102b4:	6003      	str	r3, [r0, #0]
 80102b6:	e7d6      	b.n	8010266 <_free_r+0x26>
 80102b8:	6825      	ldr	r5, [r4, #0]
 80102ba:	1961      	adds	r1, r4, r5
 80102bc:	428b      	cmp	r3, r1
 80102be:	bf04      	itt	eq
 80102c0:	6819      	ldreq	r1, [r3, #0]
 80102c2:	685b      	ldreq	r3, [r3, #4]
 80102c4:	6063      	str	r3, [r4, #4]
 80102c6:	bf04      	itt	eq
 80102c8:	1949      	addeq	r1, r1, r5
 80102ca:	6021      	streq	r1, [r4, #0]
 80102cc:	6054      	str	r4, [r2, #4]
 80102ce:	e7ca      	b.n	8010266 <_free_r+0x26>
 80102d0:	b003      	add	sp, #12
 80102d2:	bd30      	pop	{r4, r5, pc}
 80102d4:	20001de4 	.word	0x20001de4

080102d8 <sbrk_aligned>:
 80102d8:	b570      	push	{r4, r5, r6, lr}
 80102da:	4e0e      	ldr	r6, [pc, #56]	; (8010314 <sbrk_aligned+0x3c>)
 80102dc:	460c      	mov	r4, r1
 80102de:	6831      	ldr	r1, [r6, #0]
 80102e0:	4605      	mov	r5, r0
 80102e2:	b911      	cbnz	r1, 80102ea <sbrk_aligned+0x12>
 80102e4:	f000 f8bc 	bl	8010460 <_sbrk_r>
 80102e8:	6030      	str	r0, [r6, #0]
 80102ea:	4621      	mov	r1, r4
 80102ec:	4628      	mov	r0, r5
 80102ee:	f000 f8b7 	bl	8010460 <_sbrk_r>
 80102f2:	1c43      	adds	r3, r0, #1
 80102f4:	d00a      	beq.n	801030c <sbrk_aligned+0x34>
 80102f6:	1cc4      	adds	r4, r0, #3
 80102f8:	f024 0403 	bic.w	r4, r4, #3
 80102fc:	42a0      	cmp	r0, r4
 80102fe:	d007      	beq.n	8010310 <sbrk_aligned+0x38>
 8010300:	1a21      	subs	r1, r4, r0
 8010302:	4628      	mov	r0, r5
 8010304:	f000 f8ac 	bl	8010460 <_sbrk_r>
 8010308:	3001      	adds	r0, #1
 801030a:	d101      	bne.n	8010310 <sbrk_aligned+0x38>
 801030c:	f04f 34ff 	mov.w	r4, #4294967295
 8010310:	4620      	mov	r0, r4
 8010312:	bd70      	pop	{r4, r5, r6, pc}
 8010314:	20001de8 	.word	0x20001de8

08010318 <_malloc_r>:
 8010318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801031c:	1ccd      	adds	r5, r1, #3
 801031e:	f025 0503 	bic.w	r5, r5, #3
 8010322:	3508      	adds	r5, #8
 8010324:	2d0c      	cmp	r5, #12
 8010326:	bf38      	it	cc
 8010328:	250c      	movcc	r5, #12
 801032a:	2d00      	cmp	r5, #0
 801032c:	4607      	mov	r7, r0
 801032e:	db01      	blt.n	8010334 <_malloc_r+0x1c>
 8010330:	42a9      	cmp	r1, r5
 8010332:	d905      	bls.n	8010340 <_malloc_r+0x28>
 8010334:	230c      	movs	r3, #12
 8010336:	603b      	str	r3, [r7, #0]
 8010338:	2600      	movs	r6, #0
 801033a:	4630      	mov	r0, r6
 801033c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010340:	4e2e      	ldr	r6, [pc, #184]	; (80103fc <_malloc_r+0xe4>)
 8010342:	f000 f89d 	bl	8010480 <__malloc_lock>
 8010346:	6833      	ldr	r3, [r6, #0]
 8010348:	461c      	mov	r4, r3
 801034a:	bb34      	cbnz	r4, 801039a <_malloc_r+0x82>
 801034c:	4629      	mov	r1, r5
 801034e:	4638      	mov	r0, r7
 8010350:	f7ff ffc2 	bl	80102d8 <sbrk_aligned>
 8010354:	1c43      	adds	r3, r0, #1
 8010356:	4604      	mov	r4, r0
 8010358:	d14d      	bne.n	80103f6 <_malloc_r+0xde>
 801035a:	6834      	ldr	r4, [r6, #0]
 801035c:	4626      	mov	r6, r4
 801035e:	2e00      	cmp	r6, #0
 8010360:	d140      	bne.n	80103e4 <_malloc_r+0xcc>
 8010362:	6823      	ldr	r3, [r4, #0]
 8010364:	4631      	mov	r1, r6
 8010366:	4638      	mov	r0, r7
 8010368:	eb04 0803 	add.w	r8, r4, r3
 801036c:	f000 f878 	bl	8010460 <_sbrk_r>
 8010370:	4580      	cmp	r8, r0
 8010372:	d13a      	bne.n	80103ea <_malloc_r+0xd2>
 8010374:	6821      	ldr	r1, [r4, #0]
 8010376:	3503      	adds	r5, #3
 8010378:	1a6d      	subs	r5, r5, r1
 801037a:	f025 0503 	bic.w	r5, r5, #3
 801037e:	3508      	adds	r5, #8
 8010380:	2d0c      	cmp	r5, #12
 8010382:	bf38      	it	cc
 8010384:	250c      	movcc	r5, #12
 8010386:	4629      	mov	r1, r5
 8010388:	4638      	mov	r0, r7
 801038a:	f7ff ffa5 	bl	80102d8 <sbrk_aligned>
 801038e:	3001      	adds	r0, #1
 8010390:	d02b      	beq.n	80103ea <_malloc_r+0xd2>
 8010392:	6823      	ldr	r3, [r4, #0]
 8010394:	442b      	add	r3, r5
 8010396:	6023      	str	r3, [r4, #0]
 8010398:	e00e      	b.n	80103b8 <_malloc_r+0xa0>
 801039a:	6822      	ldr	r2, [r4, #0]
 801039c:	1b52      	subs	r2, r2, r5
 801039e:	d41e      	bmi.n	80103de <_malloc_r+0xc6>
 80103a0:	2a0b      	cmp	r2, #11
 80103a2:	d916      	bls.n	80103d2 <_malloc_r+0xba>
 80103a4:	1961      	adds	r1, r4, r5
 80103a6:	42a3      	cmp	r3, r4
 80103a8:	6025      	str	r5, [r4, #0]
 80103aa:	bf18      	it	ne
 80103ac:	6059      	strne	r1, [r3, #4]
 80103ae:	6863      	ldr	r3, [r4, #4]
 80103b0:	bf08      	it	eq
 80103b2:	6031      	streq	r1, [r6, #0]
 80103b4:	5162      	str	r2, [r4, r5]
 80103b6:	604b      	str	r3, [r1, #4]
 80103b8:	4638      	mov	r0, r7
 80103ba:	f104 060b 	add.w	r6, r4, #11
 80103be:	f000 f865 	bl	801048c <__malloc_unlock>
 80103c2:	f026 0607 	bic.w	r6, r6, #7
 80103c6:	1d23      	adds	r3, r4, #4
 80103c8:	1af2      	subs	r2, r6, r3
 80103ca:	d0b6      	beq.n	801033a <_malloc_r+0x22>
 80103cc:	1b9b      	subs	r3, r3, r6
 80103ce:	50a3      	str	r3, [r4, r2]
 80103d0:	e7b3      	b.n	801033a <_malloc_r+0x22>
 80103d2:	6862      	ldr	r2, [r4, #4]
 80103d4:	42a3      	cmp	r3, r4
 80103d6:	bf0c      	ite	eq
 80103d8:	6032      	streq	r2, [r6, #0]
 80103da:	605a      	strne	r2, [r3, #4]
 80103dc:	e7ec      	b.n	80103b8 <_malloc_r+0xa0>
 80103de:	4623      	mov	r3, r4
 80103e0:	6864      	ldr	r4, [r4, #4]
 80103e2:	e7b2      	b.n	801034a <_malloc_r+0x32>
 80103e4:	4634      	mov	r4, r6
 80103e6:	6876      	ldr	r6, [r6, #4]
 80103e8:	e7b9      	b.n	801035e <_malloc_r+0x46>
 80103ea:	230c      	movs	r3, #12
 80103ec:	603b      	str	r3, [r7, #0]
 80103ee:	4638      	mov	r0, r7
 80103f0:	f000 f84c 	bl	801048c <__malloc_unlock>
 80103f4:	e7a1      	b.n	801033a <_malloc_r+0x22>
 80103f6:	6025      	str	r5, [r4, #0]
 80103f8:	e7de      	b.n	80103b8 <_malloc_r+0xa0>
 80103fa:	bf00      	nop
 80103fc:	20001de4 	.word	0x20001de4

08010400 <_realloc_r>:
 8010400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010404:	4680      	mov	r8, r0
 8010406:	4614      	mov	r4, r2
 8010408:	460e      	mov	r6, r1
 801040a:	b921      	cbnz	r1, 8010416 <_realloc_r+0x16>
 801040c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010410:	4611      	mov	r1, r2
 8010412:	f7ff bf81 	b.w	8010318 <_malloc_r>
 8010416:	b92a      	cbnz	r2, 8010424 <_realloc_r+0x24>
 8010418:	f7ff ff12 	bl	8010240 <_free_r>
 801041c:	4625      	mov	r5, r4
 801041e:	4628      	mov	r0, r5
 8010420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010424:	f000 f838 	bl	8010498 <_malloc_usable_size_r>
 8010428:	4284      	cmp	r4, r0
 801042a:	4607      	mov	r7, r0
 801042c:	d802      	bhi.n	8010434 <_realloc_r+0x34>
 801042e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010432:	d812      	bhi.n	801045a <_realloc_r+0x5a>
 8010434:	4621      	mov	r1, r4
 8010436:	4640      	mov	r0, r8
 8010438:	f7ff ff6e 	bl	8010318 <_malloc_r>
 801043c:	4605      	mov	r5, r0
 801043e:	2800      	cmp	r0, #0
 8010440:	d0ed      	beq.n	801041e <_realloc_r+0x1e>
 8010442:	42bc      	cmp	r4, r7
 8010444:	4622      	mov	r2, r4
 8010446:	4631      	mov	r1, r6
 8010448:	bf28      	it	cs
 801044a:	463a      	movcs	r2, r7
 801044c:	f7ff fed0 	bl	80101f0 <memcpy>
 8010450:	4631      	mov	r1, r6
 8010452:	4640      	mov	r0, r8
 8010454:	f7ff fef4 	bl	8010240 <_free_r>
 8010458:	e7e1      	b.n	801041e <_realloc_r+0x1e>
 801045a:	4635      	mov	r5, r6
 801045c:	e7df      	b.n	801041e <_realloc_r+0x1e>
	...

08010460 <_sbrk_r>:
 8010460:	b538      	push	{r3, r4, r5, lr}
 8010462:	4d06      	ldr	r5, [pc, #24]	; (801047c <_sbrk_r+0x1c>)
 8010464:	2300      	movs	r3, #0
 8010466:	4604      	mov	r4, r0
 8010468:	4608      	mov	r0, r1
 801046a:	602b      	str	r3, [r5, #0]
 801046c:	f7f0 fff2 	bl	8001454 <_sbrk>
 8010470:	1c43      	adds	r3, r0, #1
 8010472:	d102      	bne.n	801047a <_sbrk_r+0x1a>
 8010474:	682b      	ldr	r3, [r5, #0]
 8010476:	b103      	cbz	r3, 801047a <_sbrk_r+0x1a>
 8010478:	6023      	str	r3, [r4, #0]
 801047a:	bd38      	pop	{r3, r4, r5, pc}
 801047c:	20001dec 	.word	0x20001dec

08010480 <__malloc_lock>:
 8010480:	4801      	ldr	r0, [pc, #4]	; (8010488 <__malloc_lock+0x8>)
 8010482:	f000 b811 	b.w	80104a8 <__retarget_lock_acquire_recursive>
 8010486:	bf00      	nop
 8010488:	20001df0 	.word	0x20001df0

0801048c <__malloc_unlock>:
 801048c:	4801      	ldr	r0, [pc, #4]	; (8010494 <__malloc_unlock+0x8>)
 801048e:	f000 b80c 	b.w	80104aa <__retarget_lock_release_recursive>
 8010492:	bf00      	nop
 8010494:	20001df0 	.word	0x20001df0

08010498 <_malloc_usable_size_r>:
 8010498:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801049c:	1f18      	subs	r0, r3, #4
 801049e:	2b00      	cmp	r3, #0
 80104a0:	bfbc      	itt	lt
 80104a2:	580b      	ldrlt	r3, [r1, r0]
 80104a4:	18c0      	addlt	r0, r0, r3
 80104a6:	4770      	bx	lr

080104a8 <__retarget_lock_acquire_recursive>:
 80104a8:	4770      	bx	lr

080104aa <__retarget_lock_release_recursive>:
 80104aa:	4770      	bx	lr

080104ac <_init>:
 80104ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104ae:	bf00      	nop
 80104b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104b2:	bc08      	pop	{r3}
 80104b4:	469e      	mov	lr, r3
 80104b6:	4770      	bx	lr

080104b8 <_fini>:
 80104b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104ba:	bf00      	nop
 80104bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104be:	bc08      	pop	{r3}
 80104c0:	469e      	mov	lr, r3
 80104c2:	4770      	bx	lr
