
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000102fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  0801049c  0801049c  0002049c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010898  08010898  000301b8  2**0
                  CONTENTS
  4 .ARM          00000008  08010898  08010898  00020898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080108a0  080108a0  000301b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080108a0  080108a0  000208a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080108a4  080108a4  000208a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b8  20000000  080108a8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000193c  200001b8  08010a60  000301b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001af4  08010a60  00031af4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035e45  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000085b7  00000000  00000000  0006602d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022c0  00000000  00000000  0006e5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001df8  00000000  00000000  000708a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ee19  00000000  00000000  000726a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003617a  00000000  00000000  000a14b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffd68  00000000  00000000  000d7633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d739b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000889c  00000000  00000000  001d73ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001b8 	.word	0x200001b8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010484 	.word	0x08010484

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001bc 	.word	0x200001bc
 80001dc:	08010484 	.word	0x08010484

080001e0 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 80001e0:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80001e2:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80001e6:	4919      	ldr	r1, [pc, #100]	; (800024c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 80001e8:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80001ec:	4818      	ldr	r0, [pc, #96]	; (8000250 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80001ee:	4917      	ldr	r1, [pc, #92]	; (800024c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 80001f0:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 80001f2:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 80001f4:	4817      	ldr	r0, [pc, #92]	; (8000254 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 80001f6:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 80001f8:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 80001fc:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80001fe:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000202:	4915      	ldr	r1, [pc, #84]	; (8000258 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000204:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000206:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800020a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800020c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000210:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000214:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000218:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800021c:	490f      	ldr	r1, [pc, #60]	; (800025c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800021e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000222:	4770      	bx	lr

08000224 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000224:	f7ff bffe 	b.w	8000224 <__tx_BadHandler>

08000228 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000228:	f7ff bffe 	b.w	8000228 <__tx_HardfaultHandler>

0800022c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800022c:	f7ff bffe 	b.w	800022c <__tx_SVCallHandler>

08000230 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000230:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000232:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000236:	4770      	bx	lr

08000238 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000238:	b501      	push	{r0, lr}
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800023a:	f000 f899 	bl	8000370 <_tx_timer_interrupt>
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800023e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000242:	4770      	bx	lr

08000244 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000244:	f7ff bffe 	b.w	8000244 <__tx_NMIHandler>

08000248 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000248:	f7ff bffe 	b.w	8000248 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800024c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000250:	20001344 	.word	0x20001344
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000254:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000258:	0003a97f 	.word	0x0003a97f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800025c:	40ff0000 	.word	0x40ff0000

08000260 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000260:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000264:	4a2e      	ldr	r2, [pc, #184]	; (8000320 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000266:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_PCS_VFP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000268:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800026c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000270:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000274:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000276:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800027a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800027e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000282:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000286:	f3bf 8f6f 	isb	sy

0800028a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800028a:	e7fe      	b.n	800028a <__tx_wait_here>

0800028c <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800028c:	4825      	ldr	r0, [pc, #148]	; (8000324 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800028e:	4a26      	ldr	r2, [pc, #152]	; (8000328 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 8000290:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000294:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000296:	b191      	cbz	r1, 80002be <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000298:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800029a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800029e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_PCS_VFP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002a2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002a6:	d101      	bne.n	80002ac <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002a8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002ac <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002ac:	4c1f      	ldr	r4, [pc, #124]	; (800032c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002ae:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002b2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002b4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002b8:	b10d      	cbz	r5, 80002be <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002ba:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002bc:	6023      	str	r3, [r4, #0]

080002be <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 80002be:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80002c0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80002c2:	b1b1      	cbz	r1, 80002f2 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80002c4:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 80002c6:	b662      	cpsie	i

080002c8 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80002c8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002ca:	4c18      	ldr	r4, [pc, #96]	; (800032c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80002cc:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80002ce:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 80002d2:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80002d4:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80002d6:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80002da:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_PCS_VFP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002de:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 80002e2:	d101      	bne.n	80002e8 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 80002e4:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080002e8 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80002e8:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80002ec:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 80002f0:	4770      	bx	lr

080002f2 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 80002f2:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80002f4:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80002f6:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80002f8:	b949      	cbnz	r1, 800030e <__tx_ts_ready>

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 80002fa:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_enter                      // Possibly enter low power mode
 80002fc:	f009 fcc0 	bl	8009c80 <tx_low_power_enter>
    POP     {r0-r3}
 8000300:	bc0f      	pop	{r0, r1, r2, r3}
    WFI                                             // Wait for interrupt
    ISB                                             // Ensure pipeline is flushed
#endif

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 8000302:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_exit                       // Exit low power mode
 8000304:	f009 fcec 	bl	8009ce0 <tx_low_power_exit>
    POP     {r0-r3}
 8000308:	bc0f      	pop	{r0, r1, r2, r3}
#endif

    CPSIE   i                                       // Enable interrupts
 800030a:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 800030c:	e7f1      	b.n	80002f2 <__tx_ts_wait>

0800030e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800030e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000312:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000316:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */

    CPSIE   i                                       // Enable interrupts
 800031a:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 800031c:	e7d4      	b.n	80002c8 <__tx_ts_restore>

0800031e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800031e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000320:	200013e0 	.word	0x200013e0
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000324:	20001348 	.word	0x20001348
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000328:	2000134c 	.word	0x2000134c
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800032c:	2000194c 	.word	0x2000194c

08000330 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000330:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000332:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000336:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800033a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800033e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000340:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000344:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000346:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000348:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800034a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800034c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800034e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000350:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000352:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000354:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000356:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000358:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800035a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800035c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800035e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000362:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000364:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000366:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800036a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800036c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800036e:	4770      	bx	lr

08000370 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000370:	4922      	ldr	r1, [pc, #136]	; (80003fc <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000372:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000374:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000378:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800037a:	4b21      	ldr	r3, [pc, #132]	; (8000400 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800037c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800037e:	b13a      	cbz	r2, 8000390 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000380:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000384:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000386:	b91a      	cbnz	r2, 8000390 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000388:	4b1e      	ldr	r3, [pc, #120]	; (8000404 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 800038a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800038e:	6018      	str	r0, [r3, #0]

08000390 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000390:	491d      	ldr	r1, [pc, #116]	; (8000408 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000392:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000394:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000396:	b122      	cbz	r2, 80003a2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000398:	4b1c      	ldr	r3, [pc, #112]	; (800040c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 800039a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800039e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003a0:	e008      	b.n	80003b4 <__tx_timer_done>

080003a2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003a2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003a6:	4b1a      	ldr	r3, [pc, #104]	; (8000410 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003a8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003aa:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003ac:	d101      	bne.n	80003b2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003ae:	4b19      	ldr	r3, [pc, #100]	; (8000414 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003b0:	6818      	ldr	r0, [r3, #0]

080003b2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003b2:	6008      	str	r0, [r1, #0]

080003b4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80003b4:	4b13      	ldr	r3, [pc, #76]	; (8000404 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80003b6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80003b8:	b912      	cbnz	r2, 80003c0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80003ba:	4914      	ldr	r1, [pc, #80]	; (800040c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003bc:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80003be:	b1d0      	cbz	r0, 80003f6 <__tx_timer_nothing_expired>

080003c0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003c0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003c4:	4911      	ldr	r1, [pc, #68]	; (800040c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003c6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003c8:	b108      	cbz	r0, 80003ce <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003ca:	f008 fd1f 	bl	8008e0c <_tx_timer_expiration_process>

080003ce <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003ce:	4b0d      	ldr	r3, [pc, #52]	; (8000404 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80003d0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80003d2:	b172      	cbz	r2, 80003f2 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80003d4:	f008 fbfe 	bl	8008bd4 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003d8:	480f      	ldr	r0, [pc, #60]	; (8000418 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80003da:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80003dc:	b949      	cbnz	r1, 80003f2 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003de:	480f      	ldr	r0, [pc, #60]	; (800041c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80003e0:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003e2:	4a0f      	ldr	r2, [pc, #60]	; (8000420 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80003e4:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80003e6:	480f      	ldr	r0, [pc, #60]	; (8000424 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80003e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80003ec:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80003ee:	d000      	beq.n	80003f2 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 80003f0:	6002      	str	r2, [r0, #0]

080003f2 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 80003f2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080003f6 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 80003f6:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 80003fa:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003fc:	200013ec 	.word	0x200013ec
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000400:	2000194c 	.word	0x2000194c
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000404:	200013f0 	.word	0x200013f0
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000408:	2000147c 	.word	0x2000147c
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800040c:	20001480 	.word	0x20001480
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000410:	20001478 	.word	0x20001478
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000414:	20001474 	.word	0x20001474
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000418:	200013e0 	.word	0x200013e0
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800041c:	20001348 	.word	0x20001348
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000420:	2000134c 	.word	0x2000134c
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000424:	e000ed04 	.word	0xe000ed04

08000428 <strlen>:
 8000428:	4603      	mov	r3, r0
 800042a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800042e:	2a00      	cmp	r2, #0
 8000430:	d1fb      	bne.n	800042a <strlen+0x2>
 8000432:	1a18      	subs	r0, r3, r0
 8000434:	3801      	subs	r0, #1
 8000436:	4770      	bx	lr
	...

08000440 <memchr>:
 8000440:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000444:	2a10      	cmp	r2, #16
 8000446:	db2b      	blt.n	80004a0 <memchr+0x60>
 8000448:	f010 0f07 	tst.w	r0, #7
 800044c:	d008      	beq.n	8000460 <memchr+0x20>
 800044e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000452:	3a01      	subs	r2, #1
 8000454:	428b      	cmp	r3, r1
 8000456:	d02d      	beq.n	80004b4 <memchr+0x74>
 8000458:	f010 0f07 	tst.w	r0, #7
 800045c:	b342      	cbz	r2, 80004b0 <memchr+0x70>
 800045e:	d1f6      	bne.n	800044e <memchr+0xe>
 8000460:	b4f0      	push	{r4, r5, r6, r7}
 8000462:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000466:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800046a:	f022 0407 	bic.w	r4, r2, #7
 800046e:	f07f 0700 	mvns.w	r7, #0
 8000472:	2300      	movs	r3, #0
 8000474:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000478:	3c08      	subs	r4, #8
 800047a:	ea85 0501 	eor.w	r5, r5, r1
 800047e:	ea86 0601 	eor.w	r6, r6, r1
 8000482:	fa85 f547 	uadd8	r5, r5, r7
 8000486:	faa3 f587 	sel	r5, r3, r7
 800048a:	fa86 f647 	uadd8	r6, r6, r7
 800048e:	faa5 f687 	sel	r6, r5, r7
 8000492:	b98e      	cbnz	r6, 80004b8 <memchr+0x78>
 8000494:	d1ee      	bne.n	8000474 <memchr+0x34>
 8000496:	bcf0      	pop	{r4, r5, r6, r7}
 8000498:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800049c:	f002 0207 	and.w	r2, r2, #7
 80004a0:	b132      	cbz	r2, 80004b0 <memchr+0x70>
 80004a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80004a6:	3a01      	subs	r2, #1
 80004a8:	ea83 0301 	eor.w	r3, r3, r1
 80004ac:	b113      	cbz	r3, 80004b4 <memchr+0x74>
 80004ae:	d1f8      	bne.n	80004a2 <memchr+0x62>
 80004b0:	2000      	movs	r0, #0
 80004b2:	4770      	bx	lr
 80004b4:	3801      	subs	r0, #1
 80004b6:	4770      	bx	lr
 80004b8:	2d00      	cmp	r5, #0
 80004ba:	bf06      	itte	eq
 80004bc:	4635      	moveq	r5, r6
 80004be:	3803      	subeq	r0, #3
 80004c0:	3807      	subne	r0, #7
 80004c2:	f015 0f01 	tst.w	r5, #1
 80004c6:	d107      	bne.n	80004d8 <memchr+0x98>
 80004c8:	3001      	adds	r0, #1
 80004ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80004ce:	bf02      	ittt	eq
 80004d0:	3001      	addeq	r0, #1
 80004d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80004d6:	3001      	addeq	r0, #1
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	3801      	subs	r0, #1
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <__aeabi_uldivmod>:
 80004e0:	b953      	cbnz	r3, 80004f8 <__aeabi_uldivmod+0x18>
 80004e2:	b94a      	cbnz	r2, 80004f8 <__aeabi_uldivmod+0x18>
 80004e4:	2900      	cmp	r1, #0
 80004e6:	bf08      	it	eq
 80004e8:	2800      	cmpeq	r0, #0
 80004ea:	bf1c      	itt	ne
 80004ec:	f04f 31ff 	movne.w	r1, #4294967295
 80004f0:	f04f 30ff 	movne.w	r0, #4294967295
 80004f4:	f000 b974 	b.w	80007e0 <__aeabi_idiv0>
 80004f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80004fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000500:	f000 f806 	bl	8000510 <__udivmoddi4>
 8000504:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000508:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800050c:	b004      	add	sp, #16
 800050e:	4770      	bx	lr

08000510 <__udivmoddi4>:
 8000510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000514:	9d08      	ldr	r5, [sp, #32]
 8000516:	4604      	mov	r4, r0
 8000518:	468e      	mov	lr, r1
 800051a:	2b00      	cmp	r3, #0
 800051c:	d14d      	bne.n	80005ba <__udivmoddi4+0xaa>
 800051e:	428a      	cmp	r2, r1
 8000520:	4694      	mov	ip, r2
 8000522:	d969      	bls.n	80005f8 <__udivmoddi4+0xe8>
 8000524:	fab2 f282 	clz	r2, r2
 8000528:	b152      	cbz	r2, 8000540 <__udivmoddi4+0x30>
 800052a:	fa01 f302 	lsl.w	r3, r1, r2
 800052e:	f1c2 0120 	rsb	r1, r2, #32
 8000532:	fa20 f101 	lsr.w	r1, r0, r1
 8000536:	fa0c fc02 	lsl.w	ip, ip, r2
 800053a:	ea41 0e03 	orr.w	lr, r1, r3
 800053e:	4094      	lsls	r4, r2
 8000540:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000544:	0c21      	lsrs	r1, r4, #16
 8000546:	fbbe f6f8 	udiv	r6, lr, r8
 800054a:	fa1f f78c 	uxth.w	r7, ip
 800054e:	fb08 e316 	mls	r3, r8, r6, lr
 8000552:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000556:	fb06 f107 	mul.w	r1, r6, r7
 800055a:	4299      	cmp	r1, r3
 800055c:	d90a      	bls.n	8000574 <__udivmoddi4+0x64>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f106 30ff 	add.w	r0, r6, #4294967295
 8000566:	f080 811f 	bcs.w	80007a8 <__udivmoddi4+0x298>
 800056a:	4299      	cmp	r1, r3
 800056c:	f240 811c 	bls.w	80007a8 <__udivmoddi4+0x298>
 8000570:	3e02      	subs	r6, #2
 8000572:	4463      	add	r3, ip
 8000574:	1a5b      	subs	r3, r3, r1
 8000576:	b2a4      	uxth	r4, r4
 8000578:	fbb3 f0f8 	udiv	r0, r3, r8
 800057c:	fb08 3310 	mls	r3, r8, r0, r3
 8000580:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000584:	fb00 f707 	mul.w	r7, r0, r7
 8000588:	42a7      	cmp	r7, r4
 800058a:	d90a      	bls.n	80005a2 <__udivmoddi4+0x92>
 800058c:	eb1c 0404 	adds.w	r4, ip, r4
 8000590:	f100 33ff 	add.w	r3, r0, #4294967295
 8000594:	f080 810a 	bcs.w	80007ac <__udivmoddi4+0x29c>
 8000598:	42a7      	cmp	r7, r4
 800059a:	f240 8107 	bls.w	80007ac <__udivmoddi4+0x29c>
 800059e:	4464      	add	r4, ip
 80005a0:	3802      	subs	r0, #2
 80005a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005a6:	1be4      	subs	r4, r4, r7
 80005a8:	2600      	movs	r6, #0
 80005aa:	b11d      	cbz	r5, 80005b4 <__udivmoddi4+0xa4>
 80005ac:	40d4      	lsrs	r4, r2
 80005ae:	2300      	movs	r3, #0
 80005b0:	e9c5 4300 	strd	r4, r3, [r5]
 80005b4:	4631      	mov	r1, r6
 80005b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ba:	428b      	cmp	r3, r1
 80005bc:	d909      	bls.n	80005d2 <__udivmoddi4+0xc2>
 80005be:	2d00      	cmp	r5, #0
 80005c0:	f000 80ef 	beq.w	80007a2 <__udivmoddi4+0x292>
 80005c4:	2600      	movs	r6, #0
 80005c6:	e9c5 0100 	strd	r0, r1, [r5]
 80005ca:	4630      	mov	r0, r6
 80005cc:	4631      	mov	r1, r6
 80005ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d2:	fab3 f683 	clz	r6, r3
 80005d6:	2e00      	cmp	r6, #0
 80005d8:	d14a      	bne.n	8000670 <__udivmoddi4+0x160>
 80005da:	428b      	cmp	r3, r1
 80005dc:	d302      	bcc.n	80005e4 <__udivmoddi4+0xd4>
 80005de:	4282      	cmp	r2, r0
 80005e0:	f200 80f9 	bhi.w	80007d6 <__udivmoddi4+0x2c6>
 80005e4:	1a84      	subs	r4, r0, r2
 80005e6:	eb61 0303 	sbc.w	r3, r1, r3
 80005ea:	2001      	movs	r0, #1
 80005ec:	469e      	mov	lr, r3
 80005ee:	2d00      	cmp	r5, #0
 80005f0:	d0e0      	beq.n	80005b4 <__udivmoddi4+0xa4>
 80005f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80005f6:	e7dd      	b.n	80005b4 <__udivmoddi4+0xa4>
 80005f8:	b902      	cbnz	r2, 80005fc <__udivmoddi4+0xec>
 80005fa:	deff      	udf	#255	; 0xff
 80005fc:	fab2 f282 	clz	r2, r2
 8000600:	2a00      	cmp	r2, #0
 8000602:	f040 8092 	bne.w	800072a <__udivmoddi4+0x21a>
 8000606:	eba1 010c 	sub.w	r1, r1, ip
 800060a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800060e:	fa1f fe8c 	uxth.w	lr, ip
 8000612:	2601      	movs	r6, #1
 8000614:	0c20      	lsrs	r0, r4, #16
 8000616:	fbb1 f3f7 	udiv	r3, r1, r7
 800061a:	fb07 1113 	mls	r1, r7, r3, r1
 800061e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000622:	fb0e f003 	mul.w	r0, lr, r3
 8000626:	4288      	cmp	r0, r1
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x12c>
 800062a:	eb1c 0101 	adds.w	r1, ip, r1
 800062e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000632:	d202      	bcs.n	800063a <__udivmoddi4+0x12a>
 8000634:	4288      	cmp	r0, r1
 8000636:	f200 80cb 	bhi.w	80007d0 <__udivmoddi4+0x2c0>
 800063a:	4643      	mov	r3, r8
 800063c:	1a09      	subs	r1, r1, r0
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb1 f0f7 	udiv	r0, r1, r7
 8000644:	fb07 1110 	mls	r1, r7, r0, r1
 8000648:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800064c:	fb0e fe00 	mul.w	lr, lr, r0
 8000650:	45a6      	cmp	lr, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x156>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f100 31ff 	add.w	r1, r0, #4294967295
 800065c:	d202      	bcs.n	8000664 <__udivmoddi4+0x154>
 800065e:	45a6      	cmp	lr, r4
 8000660:	f200 80bb 	bhi.w	80007da <__udivmoddi4+0x2ca>
 8000664:	4608      	mov	r0, r1
 8000666:	eba4 040e 	sub.w	r4, r4, lr
 800066a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800066e:	e79c      	b.n	80005aa <__udivmoddi4+0x9a>
 8000670:	f1c6 0720 	rsb	r7, r6, #32
 8000674:	40b3      	lsls	r3, r6
 8000676:	fa22 fc07 	lsr.w	ip, r2, r7
 800067a:	ea4c 0c03 	orr.w	ip, ip, r3
 800067e:	fa20 f407 	lsr.w	r4, r0, r7
 8000682:	fa01 f306 	lsl.w	r3, r1, r6
 8000686:	431c      	orrs	r4, r3
 8000688:	40f9      	lsrs	r1, r7
 800068a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800068e:	fa00 f306 	lsl.w	r3, r0, r6
 8000692:	fbb1 f8f9 	udiv	r8, r1, r9
 8000696:	0c20      	lsrs	r0, r4, #16
 8000698:	fa1f fe8c 	uxth.w	lr, ip
 800069c:	fb09 1118 	mls	r1, r9, r8, r1
 80006a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80006a4:	fb08 f00e 	mul.w	r0, r8, lr
 80006a8:	4288      	cmp	r0, r1
 80006aa:	fa02 f206 	lsl.w	r2, r2, r6
 80006ae:	d90b      	bls.n	80006c8 <__udivmoddi4+0x1b8>
 80006b0:	eb1c 0101 	adds.w	r1, ip, r1
 80006b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80006b8:	f080 8088 	bcs.w	80007cc <__udivmoddi4+0x2bc>
 80006bc:	4288      	cmp	r0, r1
 80006be:	f240 8085 	bls.w	80007cc <__udivmoddi4+0x2bc>
 80006c2:	f1a8 0802 	sub.w	r8, r8, #2
 80006c6:	4461      	add	r1, ip
 80006c8:	1a09      	subs	r1, r1, r0
 80006ca:	b2a4      	uxth	r4, r4
 80006cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80006d0:	fb09 1110 	mls	r1, r9, r0, r1
 80006d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80006d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006dc:	458e      	cmp	lr, r1
 80006de:	d908      	bls.n	80006f2 <__udivmoddi4+0x1e2>
 80006e0:	eb1c 0101 	adds.w	r1, ip, r1
 80006e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80006e8:	d26c      	bcs.n	80007c4 <__udivmoddi4+0x2b4>
 80006ea:	458e      	cmp	lr, r1
 80006ec:	d96a      	bls.n	80007c4 <__udivmoddi4+0x2b4>
 80006ee:	3802      	subs	r0, #2
 80006f0:	4461      	add	r1, ip
 80006f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80006f6:	fba0 9402 	umull	r9, r4, r0, r2
 80006fa:	eba1 010e 	sub.w	r1, r1, lr
 80006fe:	42a1      	cmp	r1, r4
 8000700:	46c8      	mov	r8, r9
 8000702:	46a6      	mov	lr, r4
 8000704:	d356      	bcc.n	80007b4 <__udivmoddi4+0x2a4>
 8000706:	d053      	beq.n	80007b0 <__udivmoddi4+0x2a0>
 8000708:	b15d      	cbz	r5, 8000722 <__udivmoddi4+0x212>
 800070a:	ebb3 0208 	subs.w	r2, r3, r8
 800070e:	eb61 010e 	sbc.w	r1, r1, lr
 8000712:	fa01 f707 	lsl.w	r7, r1, r7
 8000716:	fa22 f306 	lsr.w	r3, r2, r6
 800071a:	40f1      	lsrs	r1, r6
 800071c:	431f      	orrs	r7, r3
 800071e:	e9c5 7100 	strd	r7, r1, [r5]
 8000722:	2600      	movs	r6, #0
 8000724:	4631      	mov	r1, r6
 8000726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800072a:	f1c2 0320 	rsb	r3, r2, #32
 800072e:	40d8      	lsrs	r0, r3
 8000730:	fa0c fc02 	lsl.w	ip, ip, r2
 8000734:	fa21 f303 	lsr.w	r3, r1, r3
 8000738:	4091      	lsls	r1, r2
 800073a:	4301      	orrs	r1, r0
 800073c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000740:	fa1f fe8c 	uxth.w	lr, ip
 8000744:	fbb3 f0f7 	udiv	r0, r3, r7
 8000748:	fb07 3610 	mls	r6, r7, r0, r3
 800074c:	0c0b      	lsrs	r3, r1, #16
 800074e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000752:	fb00 f60e 	mul.w	r6, r0, lr
 8000756:	429e      	cmp	r6, r3
 8000758:	fa04 f402 	lsl.w	r4, r4, r2
 800075c:	d908      	bls.n	8000770 <__udivmoddi4+0x260>
 800075e:	eb1c 0303 	adds.w	r3, ip, r3
 8000762:	f100 38ff 	add.w	r8, r0, #4294967295
 8000766:	d22f      	bcs.n	80007c8 <__udivmoddi4+0x2b8>
 8000768:	429e      	cmp	r6, r3
 800076a:	d92d      	bls.n	80007c8 <__udivmoddi4+0x2b8>
 800076c:	3802      	subs	r0, #2
 800076e:	4463      	add	r3, ip
 8000770:	1b9b      	subs	r3, r3, r6
 8000772:	b289      	uxth	r1, r1
 8000774:	fbb3 f6f7 	udiv	r6, r3, r7
 8000778:	fb07 3316 	mls	r3, r7, r6, r3
 800077c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000780:	fb06 f30e 	mul.w	r3, r6, lr
 8000784:	428b      	cmp	r3, r1
 8000786:	d908      	bls.n	800079a <__udivmoddi4+0x28a>
 8000788:	eb1c 0101 	adds.w	r1, ip, r1
 800078c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000790:	d216      	bcs.n	80007c0 <__udivmoddi4+0x2b0>
 8000792:	428b      	cmp	r3, r1
 8000794:	d914      	bls.n	80007c0 <__udivmoddi4+0x2b0>
 8000796:	3e02      	subs	r6, #2
 8000798:	4461      	add	r1, ip
 800079a:	1ac9      	subs	r1, r1, r3
 800079c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80007a0:	e738      	b.n	8000614 <__udivmoddi4+0x104>
 80007a2:	462e      	mov	r6, r5
 80007a4:	4628      	mov	r0, r5
 80007a6:	e705      	b.n	80005b4 <__udivmoddi4+0xa4>
 80007a8:	4606      	mov	r6, r0
 80007aa:	e6e3      	b.n	8000574 <__udivmoddi4+0x64>
 80007ac:	4618      	mov	r0, r3
 80007ae:	e6f8      	b.n	80005a2 <__udivmoddi4+0x92>
 80007b0:	454b      	cmp	r3, r9
 80007b2:	d2a9      	bcs.n	8000708 <__udivmoddi4+0x1f8>
 80007b4:	ebb9 0802 	subs.w	r8, r9, r2
 80007b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80007bc:	3801      	subs	r0, #1
 80007be:	e7a3      	b.n	8000708 <__udivmoddi4+0x1f8>
 80007c0:	4646      	mov	r6, r8
 80007c2:	e7ea      	b.n	800079a <__udivmoddi4+0x28a>
 80007c4:	4620      	mov	r0, r4
 80007c6:	e794      	b.n	80006f2 <__udivmoddi4+0x1e2>
 80007c8:	4640      	mov	r0, r8
 80007ca:	e7d1      	b.n	8000770 <__udivmoddi4+0x260>
 80007cc:	46d0      	mov	r8, sl
 80007ce:	e77b      	b.n	80006c8 <__udivmoddi4+0x1b8>
 80007d0:	3b02      	subs	r3, #2
 80007d2:	4461      	add	r1, ip
 80007d4:	e732      	b.n	800063c <__udivmoddi4+0x12c>
 80007d6:	4630      	mov	r0, r6
 80007d8:	e709      	b.n	80005ee <__udivmoddi4+0xde>
 80007da:	4464      	add	r4, ip
 80007dc:	3802      	subs	r0, #2
 80007de:	e742      	b.n	8000666 <__udivmoddi4+0x156>

080007e0 <__aeabi_idiv0>:
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop

080007e4 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af02      	add	r7, sp, #8
 80007ea:	6078      	str	r0, [r7, #4]

  /* USER CODE END  tx_application_define */

  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80007ec:	2334      	movs	r3, #52	; 0x34
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007f4:	4a08      	ldr	r2, [pc, #32]	; (8000818 <tx_application_define+0x34>)
 80007f6:	4909      	ldr	r1, [pc, #36]	; (800081c <tx_application_define+0x38>)
 80007f8:	4809      	ldr	r0, [pc, #36]	; (8000820 <tx_application_define+0x3c>)
 80007fa:	f008 fe4f 	bl	800949c <_txe_byte_pool_create>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d104      	bne.n	800080e <tx_application_define+0x2a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <tx_application_define+0x3c>)
 8000806:	60fb      	str	r3, [r7, #12]

    if (App_ThreadX_Init(memory_ptr) != TX_SUCCESS)
 8000808:	68f8      	ldr	r0, [r7, #12]
 800080a:	f000 f80b 	bl	8000824 <App_ThreadX_Init>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

}
 800080e:	bf00      	nop
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200001d4 	.word	0x200001d4
 800081c:	0801049c 	.word	0x0801049c
 8000820:	200005d4 	.word	0x200005d4

08000824 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08c      	sub	sp, #48	; 0x30
 8000828:	af08      	add	r7, sp, #32
 800082a:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN App_ThreadX_Init */
  (void)byte_pool;
  tx_thread_create(&menu_task_ptr, "menu_thread", menu_task, 0x1234,
 8000834:	23b0      	movs	r3, #176	; 0xb0
 8000836:	9306      	str	r3, [sp, #24]
 8000838:	2301      	movs	r3, #1
 800083a:	9305      	str	r3, [sp, #20]
 800083c:	2301      	movs	r3, #1
 800083e:	9304      	str	r3, [sp, #16]
 8000840:	230f      	movs	r3, #15
 8000842:	9303      	str	r3, [sp, #12]
 8000844:	230f      	movs	r3, #15
 8000846:	9302      	str	r3, [sp, #8]
 8000848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800084c:	9301      	str	r3, [sp, #4]
 800084e:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <App_ThreadX_Init+0x94>)
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	f241 2334 	movw	r3, #4660	; 0x1234
 8000856:	4a19      	ldr	r2, [pc, #100]	; (80008bc <App_ThreadX_Init+0x98>)
 8000858:	4919      	ldr	r1, [pc, #100]	; (80008c0 <App_ThreadX_Init+0x9c>)
 800085a:	481a      	ldr	r0, [pc, #104]	; (80008c4 <App_ThreadX_Init+0xa0>)
 800085c:	f009 f91e 	bl	8009a9c <_txe_thread_create>
  menu_task_stack, THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START);
  tx_thread_create(&debounce_task_ptr, "debounce_thread", debounce_task, 0x1234,
 8000860:	23b0      	movs	r3, #176	; 0xb0
 8000862:	9306      	str	r3, [sp, #24]
 8000864:	2301      	movs	r3, #1
 8000866:	9305      	str	r3, [sp, #20]
 8000868:	2301      	movs	r3, #1
 800086a:	9304      	str	r3, [sp, #16]
 800086c:	230e      	movs	r3, #14
 800086e:	9303      	str	r3, [sp, #12]
 8000870:	230e      	movs	r3, #14
 8000872:	9302      	str	r3, [sp, #8]
 8000874:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000878:	9301      	str	r3, [sp, #4]
 800087a:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <App_ThreadX_Init+0xa4>)
 800087c:	9300      	str	r3, [sp, #0]
 800087e:	f241 2334 	movw	r3, #4660	; 0x1234
 8000882:	4a12      	ldr	r2, [pc, #72]	; (80008cc <App_ThreadX_Init+0xa8>)
 8000884:	4912      	ldr	r1, [pc, #72]	; (80008d0 <App_ThreadX_Init+0xac>)
 8000886:	4813      	ldr	r0, [pc, #76]	; (80008d4 <App_ThreadX_Init+0xb0>)
 8000888:	f009 f908 	bl	8009a9c <_txe_thread_create>
  debounce_task_stack, THREAD_STACK_SIZE, 14, 14, 1, TX_AUTO_START);

  tx_semaphore_create(&debounce_semaphore_ptr, "debounce_semaphore", 0);
 800088c:	231c      	movs	r3, #28
 800088e:	2200      	movs	r2, #0
 8000890:	4911      	ldr	r1, [pc, #68]	; (80008d8 <App_ThreadX_Init+0xb4>)
 8000892:	4812      	ldr	r0, [pc, #72]	; (80008dc <App_ThreadX_Init+0xb8>)
 8000894:	f009 f82a 	bl	80098ec <_txe_semaphore_create>

  tx_queue_create(&event_queue_ptr, "event_queue", sizeof(fm_event_t),
 8000898:	2338      	movs	r3, #56	; 0x38
 800089a:	9301      	str	r3, [sp, #4]
 800089c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008a0:	9300      	str	r3, [sp, #0]
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <App_ThreadX_Init+0xbc>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	490f      	ldr	r1, [pc, #60]	; (80008e4 <App_ThreadX_Init+0xc0>)
 80008a8:	480f      	ldr	r0, [pc, #60]	; (80008e8 <App_ThreadX_Init+0xc4>)
 80008aa:	f008 fe97 	bl	80095dc <_txe_queue_create>
  event_queue_stack, 256);
  /* USER CODE END App_ThreadX_Init */

  return (ret);
 80008ae:	68fb      	ldr	r3, [r7, #12]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000608 	.word	0x20000608
 80008bc:	080009e1 	.word	0x080009e1
 80008c0:	080104b0 	.word	0x080104b0
 80008c4:	20000a08 	.word	0x20000a08
 80008c8:	20000ab8 	.word	0x20000ab8
 80008cc:	08000a19 	.word	0x08000a19
 80008d0:	080104bc 	.word	0x080104bc
 80008d4:	20000eb8 	.word	0x20000eb8
 80008d8:	080104cc 	.word	0x080104cc
 80008dc:	200010a0 	.word	0x200010a0
 80008e0:	20000f68 	.word	0x20000f68
 80008e4:	080104e0 	.word	0x080104e0
 80008e8:	20001068 	.word	0x20001068

080008ec <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 80008f0:	f006 f85a 	bl	80069a8 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <App_ThreadX_LowPower_Timer_Setup>:
  * @brief  App_ThreadX_LowPower_Timer_Setup
  * @param  count : TX timer count
  * @retval None
  */
void App_ThreadX_LowPower_Timer_Setup(ULONG count)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  App_ThreadX_LowPower_Timer_Setup */
    uint32_t ticks_to_sleep;
    //LPTIM1->CNT = 0; //
    g_lptim1_start = LPTIM1->CNT;
 8000900:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <App_ThreadX_LowPower_Timer_Setup+0x38>)
 8000902:	69db      	ldr	r3, [r3, #28]
 8000904:	b29a      	uxth	r2, r3
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <App_ThreadX_LowPower_Timer_Setup+0x3c>)
 8000908:	801a      	strh	r2, [r3, #0]
    ticks_to_sleep = (32768 / 16) * count; // clock_freq /  RTC_WAKEUPCLOCK_RTCCLK_DIV16
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	02db      	lsls	r3, r3, #11
 800090e:	60fb      	str	r3, [r7, #12]
    ticks_to_sleep /= TX_TIMER_TICKS_PER_SECOND;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	4a09      	ldr	r2, [pc, #36]	; (8000938 <App_ThreadX_LowPower_Timer_Setup+0x40>)
 8000914:	fba2 2303 	umull	r2, r3, r2, r3
 8000918:	095b      	lsrs	r3, r3, #5
 800091a:	60fb      	str	r3, [r7, #12]
    HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, ticks_to_sleep, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 800091c:	2200      	movs	r2, #0
 800091e:	68f9      	ldr	r1, [r7, #12]
 8000920:	4806      	ldr	r0, [pc, #24]	; (800093c <App_ThreadX_LowPower_Timer_Setup+0x44>)
 8000922:	f004 faa9 	bl	8004e78 <HAL_RTCEx_SetWakeUpTimer_IT>
  /* USER CODE END  App_ThreadX_LowPower_Timer_Setup */
}
 8000926:	bf00      	nop
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40007c00 	.word	0x40007c00
 8000934:	200010bc 	.word	0x200010bc
 8000938:	51eb851f 	.word	0x51eb851f
 800093c:	20001164 	.word	0x20001164

08000940 <App_ThreadX_LowPower_Enter>:
  * @brief  App_ThreadX_LowPower_Enter
  * @param  None
  * @retval None
  */
void App_ThreadX_LowPower_Enter(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  App_ThreadX_LowPower_Enter */
    // CPU goes to stop mode,
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	2120      	movs	r1, #32
 8000948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800094c:	f002 fbbc 	bl	80030c8 <HAL_GPIO_WritePin>
    HAL_PWREx_EnterSTOP1Mode(PWR_STOPENTRY_WFI);
 8000950:	2001      	movs	r0, #1
 8000952:	f002 fd73 	bl	800343c <HAL_PWREx_EnterSTOP1Mode>

  /* USER CODE END  App_ThreadX_LowPower_Enter */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}

0800095a <App_ThreadX_LowPower_Exit>:
  * @brief  App_ThreadX_LowPower_Exit
  * @param  None
  * @retval None
  */
void App_ThreadX_LowPower_Exit(void)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	af00      	add	r7, sp, #0

    /*
     * If CPU wakes up other reason but timer flag we must wait until
     * expected time was elapsed. Debugger issues makes wake up CPU earlier
     */
    HAL_ResumeTick();
 800095e:	f000 fd37 	bl	80013d0 <HAL_ResumeTick>
    SystemClock_Config();
 8000962:	f000 f8a7 	bl	8000ab4 <SystemClock_Config>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000966:	2201      	movs	r2, #1
 8000968:	2120      	movs	r1, #32
 800096a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096e:	f002 fbab 	bl	80030c8 <HAL_GPIO_WritePin>
  /* USER CODE END  App_ThreadX_LowPower_Exit */
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <App_ThreadX_LowPower_Timer_Adjust>:
  * @brief  App_ThreadX_LowPower_Timer_Adjust
  * @param  None
  * @retval Amount of time (in ticks)
  */
ULONG App_ThreadX_LowPower_Timer_Adjust(void)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  App_ThreadX_LowPower_Timer_Adjust */
    static uint16_t cnt_drift = 0;
    ULONG cnt_ret;
    g_lptim1_end = LPTIM1->CNT;
 800097e:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <App_ThreadX_LowPower_Timer_Adjust+0x58>)
 8000980:	69db      	ldr	r3, [r3, #28]
 8000982:	b29a      	uxth	r2, r3
 8000984:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <App_ThreadX_LowPower_Timer_Adjust+0x5c>)
 8000986:	801a      	strh	r2, [r3, #0]
    cnt_ret = (g_lptim1_end - g_lptim1_start);
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <App_ThreadX_LowPower_Timer_Adjust+0x5c>)
 800098a:	881b      	ldrh	r3, [r3, #0]
 800098c:	461a      	mov	r2, r3
 800098e:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <App_ThreadX_LowPower_Timer_Adjust+0x60>)
 8000990:	881b      	ldrh	r3, [r3, #0]
 8000992:	1ad3      	subs	r3, r2, r3
 8000994:	607b      	str	r3, [r7, #4]
    cnt_ret *= TX_TIMER_TICKS_PER_SECOND;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2264      	movs	r2, #100	; 0x64
 800099a:	fb02 f303 	mul.w	r3, r2, r3
 800099e:	607b      	str	r3, [r7, #4]
    cnt_ret += cnt_drift;
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <App_ThreadX_LowPower_Timer_Adjust+0x64>)
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	461a      	mov	r2, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4413      	add	r3, r2
 80009aa:	607b      	str	r3, [r7, #4]
    cnt_drift = cnt_ret % 2048;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80009b4:	b29a      	uxth	r2, r3
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <App_ThreadX_LowPower_Timer_Adjust+0x64>)
 80009b8:	801a      	strh	r2, [r3, #0]
    cnt_ret /= 2048;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	0adb      	lsrs	r3, r3, #11
 80009be:	607b      	str	r3, [r7, #4]
    return (cnt_ret);
 80009c0:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END  App_ThreadX_LowPower_Timer_Adjust */
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	40007c00 	.word	0x40007c00
 80009d4:	200010be 	.word	0x200010be
 80009d8:	200010bc 	.word	0x200010bc
 80009dc:	200010c0 	.word	0x200010c0

080009e0 <menu_task>:

/* USER CODE BEGIN 1 */
VOID menu_task(ULONG initial_input)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
    ptr_fun_menu_t ptr_menu = fm_menu_show_init;
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <menu_task+0x30>)
 80009ea:	617b      	str	r3, [r7, #20]
    fm_event_t event_next = EVENT_LCD_REFRESH;
 80009ec:	2301      	movs	r3, #1
 80009ee:	73fb      	strb	r3, [r7, #15]
    const int refresh_time = 100;
 80009f0:	2364      	movs	r3, #100	; 0x64
 80009f2:	613b      	str	r3, [r7, #16]

    while(1)
    {
        tx_queue_receive(&event_queue_ptr,&event_next,refresh_time);
 80009f4:	693a      	ldr	r2, [r7, #16]
 80009f6:	f107 030f 	add.w	r3, r7, #15
 80009fa:	4619      	mov	r1, r3
 80009fc:	4805      	ldr	r0, [pc, #20]	; (8000a14 <menu_task+0x34>)
 80009fe:	f008 febb 	bl	8009778 <_txe_queue_receive>
        ptr_menu = (ptr_fun_menu_t)(*ptr_menu)(event_next);
 8000a02:	7bfa      	ldrb	r2, [r7, #15]
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	4610      	mov	r0, r2
 8000a08:	4798      	blx	r3
 8000a0a:	6178      	str	r0, [r7, #20]
        tx_queue_receive(&event_queue_ptr,&event_next,refresh_time);
 8000a0c:	e7f2      	b.n	80009f4 <menu_task+0x14>
 8000a0e:	bf00      	nop
 8000a10:	0800f34d 	.word	0x0800f34d
 8000a14:	20001068 	.word	0x20001068

08000a18 <debounce_task>:
    }
}

VOID debounce_task(ULONG initial_input)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
    const int debounce_time = 20;
 8000a20:	2314      	movs	r3, #20
 8000a22:	60fb      	str	r3, [r7, #12]

    while(1)
    {
        tx_semaphore_get(&debounce_semaphore_ptr,TX_WAIT_FOREVER);
 8000a24:	f04f 31ff 	mov.w	r1, #4294967295
 8000a28:	480d      	ldr	r0, [pc, #52]	; (8000a60 <debounce_task+0x48>)
 8000a2a:	f008 fff5 	bl	8009a18 <_txe_semaphore_get>

        tx_thread_sleep(debounce_time);
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f007 fbe9 	bl	8008208 <_tx_thread_sleep>

        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10);
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <debounce_task+0x4c>)
 8000a38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a3c:	615a      	str	r2, [r3, #20]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_11);
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <debounce_task+0x4c>)
 8000a40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a44:	615a      	str	r2, [r3, #20]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12);
 8000a46:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <debounce_task+0x4c>)
 8000a48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a4c:	615a      	str	r2, [r3, #20]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 8000a4e:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <debounce_task+0x4c>)
 8000a50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a54:	615a      	str	r2, [r3, #20]

        HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a56:	2028      	movs	r0, #40	; 0x28
 8000a58:	f002 f9a0 	bl	8002d9c <HAL_NVIC_EnableIRQ>
        tx_semaphore_get(&debounce_semaphore_ptr,TX_WAIT_FOREVER);
 8000a5c:	e7e2      	b.n	8000a24 <debounce_task+0xc>
 8000a5e:	bf00      	nop
 8000a60:	200010a0 	.word	0x200010a0
 8000a64:	40010400 	.word	0x40010400

08000a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a6c:	f000 fd71 	bl	8001552 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a70:	f000 f820 	bl	8000ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a74:	f000 fa08 	bl	8000e88 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a78:	f000 f972 	bl	8000d60 <MX_SPI1_Init>
  MX_RTC_Init();
 8000a7c:	f000 f908 	bl	8000c90 <MX_RTC_Init>
  MX_TIM16_Init();
 8000a80:	f000 f9ac 	bl	8000ddc <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8000a84:	f000 f9d0 	bl	8000e28 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000a88:	f000 f86c 	bl	8000b64 <MX_ADC1_Init>
  MX_LPTIM1_Init();
 8000a8c:	f000 f8d2 	bl	8000c34 <MX_LPTIM1_Init>
  /* USER CODE BEGIN 2 */

  fm_lcd_clear();
 8000a90:	f00a f979 	bl	800ad86 <fm_lcd_clear>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000a94:	217f      	movs	r1, #127	; 0x7f
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <main+0x44>)
 8000a98:	f002 f828 	bl	8002aec <HAL_ADCEx_Calibration_Start>
  HAL_LPTIM_Counter_Start(&hlptim1, 0xffff);
 8000a9c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000aa0:	4803      	ldr	r0, [pc, #12]	; (8000ab0 <main+0x48>)
 8000aa2:	f002 fbe3 	bl	800326c <HAL_LPTIM_Counter_Start>

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000aa6:	f7ff ff21 	bl	80008ec <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <main+0x42>
 8000aac:	200010c4 	.word	0x200010c4
 8000ab0:	2000112c 	.word	0x2000112c

08000ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b096      	sub	sp, #88	; 0x58
 8000ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	2244      	movs	r2, #68	; 0x44
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f00e ffa8 	bl	800fa18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac8:	463b      	mov	r3, r7
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8000ad6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000ada:	f002 fc59 	bl	8003390 <HAL_PWREx_ControlVoltageScaling>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ae4:	f000 fa6e 	bl	8000fc4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ae8:	f002 fc34 	bl	8003354 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000aec:	4b1c      	ldr	r3, [pc, #112]	; (8000b60 <SystemClock_Config+0xac>)
 8000aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000af2:	4a1b      	ldr	r2, [pc, #108]	; (8000b60 <SystemClock_Config+0xac>)
 8000af4:	f023 0318 	bic.w	r3, r3, #24
 8000af8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000afc:	231c      	movs	r3, #28
 8000afe:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b00:	2301      	movs	r3, #1
 8000b02:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b04:	2301      	movs	r3, #1
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 8000b10:	2390      	movs	r3, #144	; 0x90
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f002 fcb9 	bl	8003494 <HAL_RCC_OscConfig>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000b28:	f000 fa4c 	bl	8000fc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b2c:	230f      	movs	r3, #15
 8000b2e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000b30:	2300      	movs	r3, #0
 8000b32:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b40:	463b      	mov	r3, r7
 8000b42:	2104      	movs	r1, #4
 8000b44:	4618      	mov	r0, r3
 8000b46:	f003 f8b9 	bl	8003cbc <HAL_RCC_ClockConfig>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000b50:	f000 fa38 	bl	8000fc4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000b54:	f003 fd74 	bl	8004640 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000b58:	bf00      	nop
 8000b5a:	3758      	adds	r7, #88	; 0x58
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40021000 	.word	0x40021000

08000b64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b6a:	463b      	mov	r3, r7
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
 8000b78:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b7a:	4b2b      	ldr	r3, [pc, #172]	; (8000c28 <MX_ADC1_Init+0xc4>)
 8000b7c:	4a2b      	ldr	r2, [pc, #172]	; (8000c2c <MX_ADC1_Init+0xc8>)
 8000b7e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000b80:	4b29      	ldr	r3, [pc, #164]	; (8000c28 <MX_ADC1_Init+0xc4>)
 8000b82:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b86:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b88:	4b27      	ldr	r3, [pc, #156]	; (8000c28 <MX_ADC1_Init+0xc4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b8e:	4b26      	ldr	r3, [pc, #152]	; (8000c28 <MX_ADC1_Init+0xc4>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b94:	4b24      	ldr	r3, [pc, #144]	; (8000c28 <MX_ADC1_Init+0xc4>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b9a:	4b23      	ldr	r3, [pc, #140]	; (8000c28 <MX_ADC1_Init+0xc4>)
 8000b9c:	2204      	movs	r2, #4
 8000b9e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ba0:	4b21      	ldr	r3, [pc, #132]	; (8000c28 <MX_ADC1_Init+0xc4>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ba6:	4b20      	ldr	r3, [pc, #128]	; (8000c28 <MX_ADC1_Init+0xc4>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000bac:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <MX_ADC1_Init+0xc4>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bb2:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <MX_ADC1_Init+0xc4>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bba:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <MX_ADC1_Init+0xc4>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bc0:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <MX_ADC1_Init+0xc4>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bc6:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <MX_ADC1_Init+0xc4>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bce:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <MX_ADC1_Init+0xc4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <MX_ADC1_Init+0xc4>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <MX_ADC1_Init+0xc4>)
 8000bde:	2204      	movs	r2, #4
 8000be0:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000be2:	4811      	ldr	r0, [pc, #68]	; (8000c28 <MX_ADC1_Init+0xc4>)
 8000be4:	f000 ff3a 	bl	8001a5c <HAL_ADC_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000bee:	f000 f9e9 	bl	8000fc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <MX_ADC1_Init+0xcc>)
 8000bf4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bf6:	2306      	movs	r3, #6
 8000bf8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000bfa:	2305      	movs	r3, #5
 8000bfc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bfe:	237f      	movs	r3, #127	; 0x7f
 8000c00:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c02:	2304      	movs	r3, #4
 8000c04:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4806      	ldr	r0, [pc, #24]	; (8000c28 <MX_ADC1_Init+0xc4>)
 8000c10:	f001 f9a2 	bl	8001f58 <HAL_ADC_ConfigChannel>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8000c1a:	f000 f9d3 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	200010c4 	.word	0x200010c4
 8000c2c:	50040000 	.word	0x50040000
 8000c30:	c7520000 	.word	0xc7520000

08000c34 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000c38:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <MX_LPTIM1_Init+0x54>)
 8000c3a:	4a14      	ldr	r2, [pc, #80]	; (8000c8c <MX_LPTIM1_Init+0x58>)
 8000c3c:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000c3e:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <MX_LPTIM1_Init+0x54>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV16;
 8000c44:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <MX_LPTIM1_Init+0x54>)
 8000c46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c4a:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000c4c:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <MX_LPTIM1_Init+0x54>)
 8000c4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c52:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <MX_LPTIM1_Init+0x54>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <MX_LPTIM1_Init+0x54>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000c60:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <MX_LPTIM1_Init+0x54>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <MX_LPTIM1_Init+0x54>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <MX_LPTIM1_Init+0x54>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000c72:	4805      	ldr	r0, [pc, #20]	; (8000c88 <MX_LPTIM1_Init+0x54>)
 8000c74:	f002 fa58 	bl	8003128 <HAL_LPTIM_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8000c7e:	f000 f9a1 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	2000112c 	.word	0x2000112c
 8000c8c:	40007c00 	.word	0x40007c00

08000c90 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ca8:	4b2b      	ldr	r3, [pc, #172]	; (8000d58 <MX_RTC_Init+0xc8>)
 8000caa:	4a2c      	ldr	r2, [pc, #176]	; (8000d5c <MX_RTC_Init+0xcc>)
 8000cac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000cae:	4b2a      	ldr	r3, [pc, #168]	; (8000d58 <MX_RTC_Init+0xc8>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000cb4:	4b28      	ldr	r3, [pc, #160]	; (8000d58 <MX_RTC_Init+0xc8>)
 8000cb6:	227f      	movs	r2, #127	; 0x7f
 8000cb8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000cba:	4b27      	ldr	r3, [pc, #156]	; (8000d58 <MX_RTC_Init+0xc8>)
 8000cbc:	22ff      	movs	r2, #255	; 0xff
 8000cbe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000cc0:	4b25      	ldr	r3, [pc, #148]	; (8000d58 <MX_RTC_Init+0xc8>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000cc6:	4b24      	ldr	r3, [pc, #144]	; (8000d58 <MX_RTC_Init+0xc8>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ccc:	4b22      	ldr	r3, [pc, #136]	; (8000d58 <MX_RTC_Init+0xc8>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000cd2:	4b21      	ldr	r3, [pc, #132]	; (8000d58 <MX_RTC_Init+0xc8>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000cd8:	481f      	ldr	r0, [pc, #124]	; (8000d58 <MX_RTC_Init+0xc8>)
 8000cda:	f003 fdb3 	bl	8004844 <HAL_RTC_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000ce4:	f000 f96e 	bl	8000fc4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 8000ce8:	2309      	movs	r3, #9
 8000cea:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x35;
 8000cec:	2335      	movs	r3, #53	; 0x35
 8000cee:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4619      	mov	r1, r3
 8000d02:	4815      	ldr	r0, [pc, #84]	; (8000d58 <MX_RTC_Init+0xc8>)
 8000d04:	f003 fe19 	bl	800493a <HAL_RTC_SetTime>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000d0e:	f000 f959 	bl	8000fc4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8000d12:	2305      	movs	r3, #5
 8000d14:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MARCH;
 8000d16:	2303      	movs	r3, #3
 8000d18:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x31;
 8000d1a:	2331      	movs	r3, #49	; 0x31
 8000d1c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8000d1e:	2323      	movs	r3, #35	; 0x23
 8000d20:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000d22:	463b      	mov	r3, r7
 8000d24:	2201      	movs	r2, #1
 8000d26:	4619      	mov	r1, r3
 8000d28:	480b      	ldr	r0, [pc, #44]	; (8000d58 <MX_RTC_Init+0xc8>)
 8000d2a:	f003 feff 	bl	8004b2c <HAL_RTC_SetDate>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000d34:	f000 f946 	bl	8000fc4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0xffff, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d3e:	4806      	ldr	r0, [pc, #24]	; (8000d58 <MX_RTC_Init+0xc8>)
 8000d40:	f004 f89a 	bl	8004e78 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_RTC_Init+0xbe>
  {
    Error_Handler();
 8000d4a:	f000 f93b 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20001164 	.word	0x20001164
 8000d5c:	40002800 	.word	0x40002800

08000d60 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d64:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <MX_SPI1_Init+0x74>)
 8000d66:	4a1c      	ldr	r2, [pc, #112]	; (8000dd8 <MX_SPI1_Init+0x78>)
 8000d68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d6a:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <MX_SPI1_Init+0x74>)
 8000d6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000d72:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <MX_SPI1_Init+0x74>)
 8000d74:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d78:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d7a:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <MX_SPI1_Init+0x74>)
 8000d7c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d82:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <MX_SPI1_Init+0x74>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <MX_SPI1_Init+0x74>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <MX_SPI1_Init+0x74>)
 8000d90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <MX_SPI1_Init+0x74>)
 8000d98:	2218      	movs	r2, #24
 8000d9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d9c:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <MX_SPI1_Init+0x74>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <MX_SPI1_Init+0x74>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000da8:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <MX_SPI1_Init+0x74>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <MX_SPI1_Init+0x74>)
 8000db0:	2207      	movs	r2, #7
 8000db2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <MX_SPI1_Init+0x74>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <MX_SPI1_Init+0x74>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dc0:	4804      	ldr	r0, [pc, #16]	; (8000dd4 <MX_SPI1_Init+0x74>)
 8000dc2:	f004 f971 	bl	80050a8 <HAL_SPI_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000dcc:	f000 f8fa 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20001188 	.word	0x20001188
 8000dd8:	40013000 	.word	0x40013000

08000ddc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000de0:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <MX_TIM16_Init+0x44>)
 8000de2:	4a10      	ldr	r2, [pc, #64]	; (8000e24 <MX_TIM16_Init+0x48>)
 8000de4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 24-1;
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <MX_TIM16_Init+0x44>)
 8000de8:	2217      	movs	r2, #23
 8000dea:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dec:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <MX_TIM16_Init+0x44>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000df2:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <MX_TIM16_Init+0x44>)
 8000df4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000df8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <MX_TIM16_Init+0x44>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000e00:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <MX_TIM16_Init+0x44>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <MX_TIM16_Init+0x44>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000e0c:	4804      	ldr	r0, [pc, #16]	; (8000e20 <MX_TIM16_Init+0x44>)
 8000e0e:	f004 fcc1 	bl	8005794 <HAL_TIM_Base_Init>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000e18:	f000 f8d4 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	200011ec 	.word	0x200011ec
 8000e24:	40014400 	.word	0x40014400

08000e28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <MX_USART2_UART_Init+0x58>)
 8000e2e:	4a15      	ldr	r2, [pc, #84]	; (8000e84 <MX_USART2_UART_Init+0x5c>)
 8000e30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e32:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <MX_USART2_UART_Init+0x58>)
 8000e34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <MX_USART2_UART_Init+0x58>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <MX_USART2_UART_Init+0x58>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <MX_USART2_UART_Init+0x58>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <MX_USART2_UART_Init+0x58>)
 8000e4e:	220c      	movs	r2, #12
 8000e50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <MX_USART2_UART_Init+0x58>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <MX_USART2_UART_Init+0x58>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <MX_USART2_UART_Init+0x58>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <MX_USART2_UART_Init+0x58>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e6a:	4805      	ldr	r0, [pc, #20]	; (8000e80 <MX_USART2_UART_Init+0x58>)
 8000e6c:	f004 ff1a 	bl	8005ca4 <HAL_UART_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e76:	f000 f8a5 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20001238 	.word	0x20001238
 8000e84:	40004400 	.word	0x40004400

08000e88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8e:	f107 030c 	add.w	r3, r7, #12
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9e:	4b38      	ldr	r3, [pc, #224]	; (8000f80 <MX_GPIO_Init+0xf8>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea2:	4a37      	ldr	r2, [pc, #220]	; (8000f80 <MX_GPIO_Init+0xf8>)
 8000ea4:	f043 0304 	orr.w	r3, r3, #4
 8000ea8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eaa:	4b35      	ldr	r3, [pc, #212]	; (8000f80 <MX_GPIO_Init+0xf8>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eae:	f003 0304 	and.w	r3, r3, #4
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	4b32      	ldr	r3, [pc, #200]	; (8000f80 <MX_GPIO_Init+0xf8>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eba:	4a31      	ldr	r2, [pc, #196]	; (8000f80 <MX_GPIO_Init+0xf8>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec2:	4b2f      	ldr	r3, [pc, #188]	; (8000f80 <MX_GPIO_Init+0xf8>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ece:	4b2c      	ldr	r3, [pc, #176]	; (8000f80 <MX_GPIO_Init+0xf8>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed2:	4a2b      	ldr	r2, [pc, #172]	; (8000f80 <MX_GPIO_Init+0xf8>)
 8000ed4:	f043 0302 	orr.w	r3, r3, #2
 8000ed8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eda:	4b29      	ldr	r3, [pc, #164]	; (8000f80 <MX_GPIO_Init+0xf8>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	603b      	str	r3, [r7, #0]
 8000ee4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PCF8553_CE_Pin|LED_GREEN_Pin|PCF8553_RESET_Pin, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2170      	movs	r1, #112	; 0x70
 8000eea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eee:	f002 f8eb 	bl	80030c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCF8553_CE_Pin LED_GREEN_Pin PCF8553_RESET_Pin */
  GPIO_InitStruct.Pin = PCF8553_CE_Pin|LED_GREEN_Pin|PCF8553_RESET_Pin;
 8000ef2:	2370      	movs	r3, #112	; 0x70
 8000ef4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f02:	f107 030c 	add.w	r3, r7, #12
 8000f06:	4619      	mov	r1, r3
 8000f08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0c:	f001 ff62 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_ESC_Pin */
  GPIO_InitStruct.Pin = KEY_ESC_Pin;
 8000f10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f16:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(KEY_ESC_GPIO_Port, &GPIO_InitStruct);
 8000f20:	f107 030c 	add.w	r3, r7, #12
 8000f24:	4619      	mov	r1, r3
 8000f26:	4817      	ldr	r0, [pc, #92]	; (8000f84 <MX_GPIO_Init+0xfc>)
 8000f28:	f001 ff54 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_UP_Pin KEY_ENTER_Pin */
  GPIO_InitStruct.Pin = KEY_UP_Pin|KEY_ENTER_Pin;
 8000f2c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f32:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	4619      	mov	r1, r3
 8000f42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f46:	f001 ff45 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_DOWN_Pin */
  GPIO_InitStruct.Pin = KEY_DOWN_Pin;
 8000f4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f50:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f56:	2302      	movs	r3, #2
 8000f58:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(KEY_DOWN_GPIO_Port, &GPIO_InitStruct);
 8000f5a:	f107 030c 	add.w	r3, r7, #12
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f64:	f001 ff36 	bl	8002dd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	2028      	movs	r0, #40	; 0x28
 8000f6e:	f001 fef9 	bl	8002d64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f72:	2028      	movs	r0, #40	; 0x28
 8000f74:	f001 ff12 	bl	8002d9c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f78:	bf00      	nop
 8000f7a:	3720      	adds	r7, #32
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40021000 	.word	0x40021000
 8000f84:	48000400 	.word	0x48000400

08000f88 <HAL_RTCEx_WakeUpTimerEventCallback>:

/* USER CODE BEGIN 4 */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
    UNUSED(hrtc);
    HAL_RTCEx_DeactivateWakeUpTimer(hrtc);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f004 f805 	bl	8004fa0 <HAL_RTCEx_DeactivateWakeUpTimer>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d101      	bne.n	8000fb6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fb2:	f000 fae7 	bl	8001584 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40001000 	.word	0x40001000

08000fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc8:	b672      	cpsid	i
}
 8000fca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <Error_Handler+0x8>
	...

08000fd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd6:	4b11      	ldr	r3, [pc, #68]	; (800101c <HAL_MspInit+0x4c>)
 8000fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fda:	4a10      	ldr	r2, [pc, #64]	; (800101c <HAL_MspInit+0x4c>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6613      	str	r3, [r2, #96]	; 0x60
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	; (800101c <HAL_MspInit+0x4c>)
 8000fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <HAL_MspInit+0x4c>)
 8000ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	; (800101c <HAL_MspInit+0x4c>)
 8000ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff8:	6593      	str	r3, [r2, #88]	; 0x58
 8000ffa:	4b08      	ldr	r3, [pc, #32]	; (800101c <HAL_MspInit+0x4c>)
 8000ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001002:	603b      	str	r3, [r7, #0]
 8001004:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	210f      	movs	r1, #15
 800100a:	f06f 0003 	mvn.w	r0, #3
 800100e:	f001 fea9 	bl	8002d64 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40021000 	.word	0x40021000

08001020 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b09e      	sub	sp, #120	; 0x78
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001028:	f107 0310 	add.w	r3, r7, #16
 800102c:	2268      	movs	r2, #104	; 0x68
 800102e:	2100      	movs	r1, #0
 8001030:	4618      	mov	r0, r3
 8001032:	f00e fcf1 	bl	800fa18 <memset>
  if(hadc->Instance==ADC1)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a11      	ldr	r2, [pc, #68]	; (8001080 <HAL_ADC_MspInit+0x60>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d11b      	bne.n	8001078 <HAL_ADC_MspInit+0x58>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001040:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001044:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001046:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800104a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800104c:	f107 0310 	add.w	r3, r7, #16
 8001050:	4618      	mov	r0, r3
 8001052:	f003 f889 	bl	8004168 <HAL_RCCEx_PeriphCLKConfig>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 800105c:	f7ff ffb2 	bl	8000fc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001060:	4b08      	ldr	r3, [pc, #32]	; (8001084 <HAL_ADC_MspInit+0x64>)
 8001062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001064:	4a07      	ldr	r2, [pc, #28]	; (8001084 <HAL_ADC_MspInit+0x64>)
 8001066:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800106a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <HAL_ADC_MspInit+0x64>)
 800106e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001070:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001078:	bf00      	nop
 800107a:	3778      	adds	r7, #120	; 0x78
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	50040000 	.word	0x50040000
 8001084:	40021000 	.word	0x40021000

08001088 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b09e      	sub	sp, #120	; 0x78
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001090:	f107 0310 	add.w	r3, r7, #16
 8001094:	2268      	movs	r2, #104	; 0x68
 8001096:	2100      	movs	r1, #0
 8001098:	4618      	mov	r0, r3
 800109a:	f00e fcbd 	bl	800fa18 <memset>
  if(hlptim->Instance==LPTIM1)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a11      	ldr	r2, [pc, #68]	; (80010e8 <HAL_LPTIM_MspInit+0x60>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d11b      	bne.n	80010e0 <HAL_LPTIM_MspInit+0x58>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80010a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010ac:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 80010ae:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80010b2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	4618      	mov	r0, r3
 80010ba:	f003 f855 	bl	8004168 <HAL_RCCEx_PeriphCLKConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <HAL_LPTIM_MspInit+0x40>
    {
      Error_Handler();
 80010c4:	f7ff ff7e 	bl	8000fc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <HAL_LPTIM_MspInit+0x64>)
 80010ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010cc:	4a07      	ldr	r2, [pc, #28]	; (80010ec <HAL_LPTIM_MspInit+0x64>)
 80010ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010d2:	6593      	str	r3, [r2, #88]	; 0x58
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <HAL_LPTIM_MspInit+0x64>)
 80010d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 80010e0:	bf00      	nop
 80010e2:	3778      	adds	r7, #120	; 0x78
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40007c00 	.word	0x40007c00
 80010ec:	40021000 	.word	0x40021000

080010f0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b09c      	sub	sp, #112	; 0x70
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010f8:	f107 0308 	add.w	r3, r7, #8
 80010fc:	2268      	movs	r2, #104	; 0x68
 80010fe:	2100      	movs	r1, #0
 8001100:	4618      	mov	r0, r3
 8001102:	f00e fc89 	bl	800fa18 <memset>
  if(hrtc->Instance==RTC)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a13      	ldr	r2, [pc, #76]	; (8001158 <HAL_RTC_MspInit+0x68>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d11f      	bne.n	8001150 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001110:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001114:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001116:	f44f 7300 	mov.w	r3, #512	; 0x200
 800111a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800111c:	f107 0308 	add.w	r3, r7, #8
 8001120:	4618      	mov	r0, r3
 8001122:	f003 f821 	bl	8004168 <HAL_RCCEx_PeriphCLKConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800112c:	f7ff ff4a 	bl	8000fc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <HAL_RTC_MspInit+0x6c>)
 8001132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001136:	4a09      	ldr	r2, [pc, #36]	; (800115c <HAL_RTC_MspInit+0x6c>)
 8001138:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800113c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001140:	2200      	movs	r2, #0
 8001142:	2100      	movs	r1, #0
 8001144:	2003      	movs	r0, #3
 8001146:	f001 fe0d 	bl	8002d64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800114a:	2003      	movs	r0, #3
 800114c:	f001 fe26 	bl	8002d9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001150:	bf00      	nop
 8001152:	3770      	adds	r7, #112	; 0x70
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40002800 	.word	0x40002800
 800115c:	40021000 	.word	0x40021000

08001160 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	; 0x28
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a17      	ldr	r2, [pc, #92]	; (80011dc <HAL_SPI_MspInit+0x7c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d128      	bne.n	80011d4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001182:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <HAL_SPI_MspInit+0x80>)
 8001184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001186:	4a16      	ldr	r2, [pc, #88]	; (80011e0 <HAL_SPI_MspInit+0x80>)
 8001188:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800118c:	6613      	str	r3, [r2, #96]	; 0x60
 800118e:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <HAL_SPI_MspInit+0x80>)
 8001190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001192:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <HAL_SPI_MspInit+0x80>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119e:	4a10      	ldr	r2, [pc, #64]	; (80011e0 <HAL_SPI_MspInit+0x80>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <HAL_SPI_MspInit+0x80>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = PCF8553_SCL_Pin|PCF8553_SDIO_Pin;
 80011b2:	2382      	movs	r3, #130	; 0x82
 80011b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	2302      	movs	r3, #2
 80011b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011be:	2303      	movs	r3, #3
 80011c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011c2:	2305      	movs	r3, #5
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	4619      	mov	r1, r3
 80011cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d0:	f001 fe00 	bl	8002dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011d4:	bf00      	nop
 80011d6:	3728      	adds	r7, #40	; 0x28
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40013000 	.word	0x40013000
 80011e0:	40021000 	.word	0x40021000

080011e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a0a      	ldr	r2, [pc, #40]	; (800121c <HAL_TIM_Base_MspInit+0x38>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d10b      	bne.n	800120e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <HAL_TIM_Base_MspInit+0x3c>)
 80011f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011fa:	4a09      	ldr	r2, [pc, #36]	; (8001220 <HAL_TIM_Base_MspInit+0x3c>)
 80011fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001200:	6613      	str	r3, [r2, #96]	; 0x60
 8001202:	4b07      	ldr	r3, [pc, #28]	; (8001220 <HAL_TIM_Base_MspInit+0x3c>)
 8001204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800120e:	bf00      	nop
 8001210:	3714      	adds	r7, #20
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40014400 	.word	0x40014400
 8001220:	40021000 	.word	0x40021000

08001224 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b0a4      	sub	sp, #144	; 0x90
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	2268      	movs	r2, #104	; 0x68
 8001242:	2100      	movs	r1, #0
 8001244:	4618      	mov	r0, r3
 8001246:	f00e fbe7 	bl	800fa18 <memset>
  if(huart->Instance==USART2)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a21      	ldr	r2, [pc, #132]	; (80012d4 <HAL_UART_MspInit+0xb0>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d13a      	bne.n	80012ca <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001254:	2302      	movs	r3, #2
 8001256:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001258:	2300      	movs	r3, #0
 800125a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	4618      	mov	r0, r3
 8001262:	f002 ff81 	bl	8004168 <HAL_RCCEx_PeriphCLKConfig>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800126c:	f7ff feaa 	bl	8000fc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001270:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <HAL_UART_MspInit+0xb4>)
 8001272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001274:	4a18      	ldr	r2, [pc, #96]	; (80012d8 <HAL_UART_MspInit+0xb4>)
 8001276:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800127a:	6593      	str	r3, [r2, #88]	; 0x58
 800127c:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <HAL_UART_MspInit+0xb4>)
 800127e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001288:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <HAL_UART_MspInit+0xb4>)
 800128a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128c:	4a12      	ldr	r2, [pc, #72]	; (80012d8 <HAL_UART_MspInit+0xb4>)
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001294:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <HAL_UART_MspInit+0xb4>)
 8001296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012a0:	230c      	movs	r3, #12
 80012a2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a4:	2302      	movs	r3, #2
 80012a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b0:	2303      	movs	r3, #3
 80012b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012b6:	2307      	movs	r3, #7
 80012b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012bc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80012c0:	4619      	mov	r1, r3
 80012c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c6:	f001 fd85 	bl	8002dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012ca:	bf00      	nop
 80012cc:	3790      	adds	r7, #144	; 0x90
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40004400 	.word	0x40004400
 80012d8:	40021000 	.word	0x40021000

080012dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08e      	sub	sp, #56	; 0x38
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80012e4:	2300      	movs	r3, #0
 80012e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012ea:	4b34      	ldr	r3, [pc, #208]	; (80013bc <HAL_InitTick+0xe0>)
 80012ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ee:	4a33      	ldr	r2, [pc, #204]	; (80013bc <HAL_InitTick+0xe0>)
 80012f0:	f043 0310 	orr.w	r3, r3, #16
 80012f4:	6593      	str	r3, [r2, #88]	; 0x58
 80012f6:	4b31      	ldr	r3, [pc, #196]	; (80013bc <HAL_InitTick+0xe0>)
 80012f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fa:	f003 0310 	and.w	r3, r3, #16
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001302:	f107 0210 	add.w	r2, r7, #16
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4611      	mov	r1, r2
 800130c:	4618      	mov	r0, r3
 800130e:	f002 fe99 	bl	8004044 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001312:	6a3b      	ldr	r3, [r7, #32]
 8001314:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001318:	2b00      	cmp	r3, #0
 800131a:	d103      	bne.n	8001324 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800131c:	f002 fe66 	bl	8003fec <HAL_RCC_GetPCLK1Freq>
 8001320:	6378      	str	r0, [r7, #52]	; 0x34
 8001322:	e004      	b.n	800132e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001324:	f002 fe62 	bl	8003fec <HAL_RCC_GetPCLK1Freq>
 8001328:	4603      	mov	r3, r0
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800132e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001330:	4a23      	ldr	r2, [pc, #140]	; (80013c0 <HAL_InitTick+0xe4>)
 8001332:	fba2 2303 	umull	r2, r3, r2, r3
 8001336:	0c9b      	lsrs	r3, r3, #18
 8001338:	3b01      	subs	r3, #1
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800133c:	4b21      	ldr	r3, [pc, #132]	; (80013c4 <HAL_InitTick+0xe8>)
 800133e:	4a22      	ldr	r2, [pc, #136]	; (80013c8 <HAL_InitTick+0xec>)
 8001340:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001342:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <HAL_InitTick+0xe8>)
 8001344:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001348:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800134a:	4a1e      	ldr	r2, [pc, #120]	; (80013c4 <HAL_InitTick+0xe8>)
 800134c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800134e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001350:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <HAL_InitTick+0xe8>)
 8001352:	2200      	movs	r2, #0
 8001354:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001356:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <HAL_InitTick+0xe8>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135c:	4b19      	ldr	r3, [pc, #100]	; (80013c4 <HAL_InitTick+0xe8>)
 800135e:	2200      	movs	r2, #0
 8001360:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001362:	4818      	ldr	r0, [pc, #96]	; (80013c4 <HAL_InitTick+0xe8>)
 8001364:	f004 fa16 	bl	8005794 <HAL_TIM_Base_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800136e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001372:	2b00      	cmp	r3, #0
 8001374:	d11b      	bne.n	80013ae <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001376:	4813      	ldr	r0, [pc, #76]	; (80013c4 <HAL_InitTick+0xe8>)
 8001378:	f004 fa64 	bl	8005844 <HAL_TIM_Base_Start_IT>
 800137c:	4603      	mov	r3, r0
 800137e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001382:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001386:	2b00      	cmp	r3, #0
 8001388:	d111      	bne.n	80013ae <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800138a:	2036      	movs	r0, #54	; 0x36
 800138c:	f001 fd06 	bl	8002d9c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b0f      	cmp	r3, #15
 8001394:	d808      	bhi.n	80013a8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001396:	2200      	movs	r2, #0
 8001398:	6879      	ldr	r1, [r7, #4]
 800139a:	2036      	movs	r0, #54	; 0x36
 800139c:	f001 fce2 	bl	8002d64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013a0:	4a0a      	ldr	r2, [pc, #40]	; (80013cc <HAL_InitTick+0xf0>)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	e002      	b.n	80013ae <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80013ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3738      	adds	r7, #56	; 0x38
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40021000 	.word	0x40021000
 80013c0:	431bde83 	.word	0x431bde83
 80013c4:	200012bc 	.word	0x200012bc
 80013c8:	40001000 	.word	0x40001000
 80013cc:	20000004 	.word	0x20000004

080013d0 <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM6 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* Enable TIM6 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim6, TIM_IT_UPDATE);
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_ResumeTick+0x20>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	68da      	ldr	r2, [r3, #12]
 80013da:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <HAL_ResumeTick+0x20>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f042 0201 	orr.w	r2, r2, #1
 80013e2:	60da      	str	r2, [r3, #12]
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	200012bc 	.word	0x200012bc

080013f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80013f8:	e7fe      	b.n	80013f8 <NMI_Handler+0x4>

080013fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fe:	e7fe      	b.n	80013fe <HardFault_Handler+0x4>

08001400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <MemManage_Handler+0x4>

08001406 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <BusFault_Handler+0x4>

0800140c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <UsageFault_Handler+0x4>

08001412 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <RTC_WKUP_IRQHandler+0x10>)
 8001426:	f003 fe19 	bl	800505c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20001164 	.word	0x20001164

08001434 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_UP_Pin);
 8001438:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800143c:	f001 fe5c 	bl	80030f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(KEY_DOWN_Pin);
 8001440:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001444:	f001 fe58 	bl	80030f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(KEY_ENTER_Pin);
 8001448:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800144c:	f001 fe54 	bl	80030f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(KEY_ESC_Pin);
 8001450:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001454:	f001 fe50 	bl	80030f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}

0800145c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001460:	4802      	ldr	r0, [pc, #8]	; (800146c <TIM6_DAC_IRQHandler+0x10>)
 8001462:	f004 fa4b 	bl	80058fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	200012bc 	.word	0x200012bc

08001470 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8001478:	4a14      	ldr	r2, [pc, #80]	; (80014cc <_sbrk+0x5c>)
	- (uint32_t) &_Min_Stack_Size;
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end)
 8001484:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <_sbrk+0x64>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d102      	bne.n	8001492 <_sbrk+0x22>
	{
		__sbrk_heap_end = &_end;
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <_sbrk+0x64>)
 800148e:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <_sbrk+0x68>)
 8001490:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap)
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <_sbrk+0x64>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	429a      	cmp	r2, r3
 800149e:	d207      	bcs.n	80014b0 <_sbrk+0x40>
	{
		errno = ENOMEM;
 80014a0:	f00e fa90 	bl	800f9c4 <__errno>
 80014a4:	4603      	mov	r3, r0
 80014a6:	220c      	movs	r2, #12
 80014a8:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295
 80014ae:	e009      	b.n	80014c4 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <_sbrk+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80014b6:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <_sbrk+0x64>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	4a05      	ldr	r2, [pc, #20]	; (80014d4 <_sbrk+0x64>)
 80014c0:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80014c2:	68fb      	ldr	r3, [r7, #12]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20028000 	.word	0x20028000
 80014d0:	00000400 	.word	0x00000400
 80014d4:	20001308 	.word	0x20001308
 80014d8:	20001af8 	.word	0x20001af8

080014dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <SystemInit+0x20>)
 80014e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014e6:	4a05      	ldr	r2, [pc, #20]	; (80014fc <SystemInit+0x20>)
 80014e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001500:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001538 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001504:	f7ff ffea 	bl	80014dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001508:	480c      	ldr	r0, [pc, #48]	; (800153c <LoopForever+0x6>)
  ldr r1, =_edata
 800150a:	490d      	ldr	r1, [pc, #52]	; (8001540 <LoopForever+0xa>)
  ldr r2, =_sidata
 800150c:	4a0d      	ldr	r2, [pc, #52]	; (8001544 <LoopForever+0xe>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001510:	e002      	b.n	8001518 <LoopCopyDataInit>

08001512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001516:	3304      	adds	r3, #4

08001518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800151a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800151c:	d3f9      	bcc.n	8001512 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800151e:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001520:	4c0a      	ldr	r4, [pc, #40]	; (800154c <LoopForever+0x16>)
  movs r3, #0
 8001522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001524:	e001      	b.n	800152a <LoopFillZerobss>

08001526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001528:	3204      	adds	r2, #4

0800152a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800152a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800152c:	d3fb      	bcc.n	8001526 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800152e:	f00e fa4f 	bl	800f9d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001532:	f7ff fa99 	bl	8000a68 <main>

08001536 <LoopForever>:

LoopForever:
    b LoopForever
 8001536:	e7fe      	b.n	8001536 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001538:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 800153c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001540:	200001b8 	.word	0x200001b8
  ldr r2, =_sidata
 8001544:	080108a8 	.word	0x080108a8
  ldr r2, =_sbss
 8001548:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 800154c:	20001af4 	.word	0x20001af4

08001550 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001550:	e7fe      	b.n	8001550 <ADC1_IRQHandler>

08001552 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001558:	2300      	movs	r3, #0
 800155a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800155c:	2003      	movs	r0, #3
 800155e:	f001 fbf6 	bl	8002d4e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001562:	200f      	movs	r0, #15
 8001564:	f7ff feba 	bl	80012dc <HAL_InitTick>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d002      	beq.n	8001574 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	71fb      	strb	r3, [r7, #7]
 8001572:	e001      	b.n	8001578 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001574:	f7ff fd2c 	bl	8000fd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001578:	79fb      	ldrb	r3, [r7, #7]
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_IncTick+0x20>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_IncTick+0x24>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4413      	add	r3, r2
 8001594:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <HAL_IncTick+0x24>)
 8001596:	6013      	str	r3, [r2, #0]
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	20000008 	.word	0x20000008
 80015a8:	2000130c 	.word	0x2000130c

080015ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return uwTick;
 80015b0:	4b03      	ldr	r3, [pc, #12]	; (80015c0 <HAL_GetTick+0x14>)
 80015b2:	681b      	ldr	r3, [r3, #0]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	2000130c 	.word	0x2000130c

080015c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015cc:	f7ff ffee 	bl	80015ac <HAL_GetTick>
 80015d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015dc:	d005      	beq.n	80015ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015de:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <HAL_Delay+0x44>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	461a      	mov	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4413      	add	r3, r2
 80015e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ea:	bf00      	nop
 80015ec:	f7ff ffde 	bl	80015ac <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d8f7      	bhi.n	80015ec <HAL_Delay+0x28>
  {
  }
}
 80015fc:	bf00      	nop
 80015fe:	bf00      	nop
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000008 	.word	0x20000008

0800160c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	431a      	orrs	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	609a      	str	r2, [r3, #8]
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	609a      	str	r2, [r3, #8]
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001668:	4618      	mov	r0, r3
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001674:	b480      	push	{r7}
 8001676:	b087      	sub	sp, #28
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
 8001680:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	3360      	adds	r3, #96	; 0x60
 8001686:	461a      	mov	r2, r3
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <LL_ADC_SetOffset+0x44>)
 8001696:	4013      	ands	r3, r2
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	430a      	orrs	r2, r1
 80016a2:	4313      	orrs	r3, r2
 80016a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80016ac:	bf00      	nop
 80016ae:	371c      	adds	r7, #28
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	03fff000 	.word	0x03fff000

080016bc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3360      	adds	r3, #96	; 0x60
 80016ca:	461a      	mov	r2, r3
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b087      	sub	sp, #28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	3360      	adds	r3, #96	; 0x60
 80016f8:	461a      	mov	r2, r3
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	431a      	orrs	r2, r3
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001712:	bf00      	nop
 8001714:	371c      	adds	r7, #28
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
 8001726:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	695b      	ldr	r3, [r3, #20]
 800172c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	431a      	orrs	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	615a      	str	r2, [r3, #20]
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001758:	2301      	movs	r3, #1
 800175a:	e000      	b.n	800175e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800176a:	b480      	push	{r7}
 800176c:	b087      	sub	sp, #28
 800176e:	af00      	add	r7, sp, #0
 8001770:	60f8      	str	r0, [r7, #12]
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	3330      	adds	r3, #48	; 0x30
 800177a:	461a      	mov	r2, r3
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	0a1b      	lsrs	r3, r3, #8
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	f003 030c 	and.w	r3, r3, #12
 8001786:	4413      	add	r3, r2
 8001788:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	f003 031f 	and.w	r3, r3, #31
 8001794:	211f      	movs	r1, #31
 8001796:	fa01 f303 	lsl.w	r3, r1, r3
 800179a:	43db      	mvns	r3, r3
 800179c:	401a      	ands	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	0e9b      	lsrs	r3, r3, #26
 80017a2:	f003 011f 	and.w	r1, r3, #31
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	f003 031f 	and.w	r3, r3, #31
 80017ac:	fa01 f303 	lsl.w	r3, r1, r3
 80017b0:	431a      	orrs	r2, r3
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80017b6:	bf00      	nop
 80017b8:	371c      	adds	r7, #28
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b087      	sub	sp, #28
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	60f8      	str	r0, [r7, #12]
 80017ca:	60b9      	str	r1, [r7, #8]
 80017cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	3314      	adds	r3, #20
 80017d2:	461a      	mov	r2, r3
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	0e5b      	lsrs	r3, r3, #25
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	f003 0304 	and.w	r3, r3, #4
 80017de:	4413      	add	r3, r2
 80017e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	0d1b      	lsrs	r3, r3, #20
 80017ea:	f003 031f 	and.w	r3, r3, #31
 80017ee:	2107      	movs	r1, #7
 80017f0:	fa01 f303 	lsl.w	r3, r1, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	401a      	ands	r2, r3
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	0d1b      	lsrs	r3, r3, #20
 80017fc:	f003 031f 	and.w	r3, r3, #31
 8001800:	6879      	ldr	r1, [r7, #4]
 8001802:	fa01 f303 	lsl.w	r3, r1, r3
 8001806:	431a      	orrs	r2, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800180c:	bf00      	nop
 800180e:	371c      	adds	r7, #28
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001830:	43db      	mvns	r3, r3
 8001832:	401a      	ands	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f003 0318 	and.w	r3, r3, #24
 800183a:	4908      	ldr	r1, [pc, #32]	; (800185c <LL_ADC_SetChannelSingleDiff+0x44>)
 800183c:	40d9      	lsrs	r1, r3
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	400b      	ands	r3, r1
 8001842:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001846:	431a      	orrs	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800184e:	bf00      	nop
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	0007ffff 	.word	0x0007ffff

08001860 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001870:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	6093      	str	r3, [r2, #8]
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001894:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001898:	d101      	bne.n	800189e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800189a:	2301      	movs	r3, #1
 800189c:	e000      	b.n	80018a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80018bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80018e8:	d101      	bne.n	80018ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80018ea:	2301      	movs	r3, #1
 80018ec:	e000      	b.n	80018f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800190c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001910:	f043 0201 	orr.w	r2, r3, #1
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001934:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001938:	f043 0202 	orr.w	r2, r3, #2
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	2b01      	cmp	r3, #1
 800195e:	d101      	bne.n	8001964 <LL_ADC_IsEnabled+0x18>
 8001960:	2301      	movs	r3, #1
 8001962:	e000      	b.n	8001966 <LL_ADC_IsEnabled+0x1a>
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b02      	cmp	r3, #2
 8001984:	d101      	bne.n	800198a <LL_ADC_IsDisableOngoing+0x18>
 8001986:	2301      	movs	r3, #1
 8001988:	e000      	b.n	800198c <LL_ADC_IsDisableOngoing+0x1a>
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019ac:	f043 0204 	orr.w	r2, r3, #4
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019d4:	f043 0210 	orr.w	r2, r3, #16
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b04      	cmp	r3, #4
 80019fa:	d101      	bne.n	8001a00 <LL_ADC_REG_IsConversionOngoing+0x18>
 80019fc:	2301      	movs	r3, #1
 80019fe:	e000      	b.n	8001a02 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a1e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a22:	f043 0220 	orr.w	r2, r3, #32
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	2b08      	cmp	r3, #8
 8001a48:	d101      	bne.n	8001a4e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e000      	b.n	8001a50 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b088      	sub	sp, #32
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a64:	2300      	movs	r3, #0
 8001a66:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e12f      	b.n	8001cd6 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d109      	bne.n	8001a98 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff facb 	bl	8001020 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fef1 	bl	8001884 <LL_ADC_IsDeepPowerDownEnabled>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d004      	beq.n	8001ab2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fed7 	bl	8001860 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff ff0c 	bl	80018d4 <LL_ADC_IsInternalRegulatorEnabled>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d115      	bne.n	8001aee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fef0 	bl	80018ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001acc:	4b84      	ldr	r3, [pc, #528]	; (8001ce0 <HAL_ADC_Init+0x284>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	099b      	lsrs	r3, r3, #6
 8001ad2:	4a84      	ldr	r2, [pc, #528]	; (8001ce4 <HAL_ADC_Init+0x288>)
 8001ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad8:	099b      	lsrs	r3, r3, #6
 8001ada:	3301      	adds	r3, #1
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ae0:	e002      	b.n	8001ae8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f9      	bne.n	8001ae2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff feee 	bl	80018d4 <LL_ADC_IsInternalRegulatorEnabled>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d10d      	bne.n	8001b1a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b02:	f043 0210 	orr.w	r2, r3, #16
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0e:	f043 0201 	orr.w	r2, r3, #1
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff ff62 	bl	80019e8 <LL_ADC_REG_IsConversionOngoing>
 8001b24:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2a:	f003 0310 	and.w	r3, r3, #16
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f040 80c8 	bne.w	8001cc4 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f040 80c4 	bne.w	8001cc4 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b40:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b44:	f043 0202 	orr.w	r2, r3, #2
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff fefb 	bl	800194c <LL_ADC_IsEnabled>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d10b      	bne.n	8001b74 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b5c:	4862      	ldr	r0, [pc, #392]	; (8001ce8 <HAL_ADC_Init+0x28c>)
 8001b5e:	f7ff fef5 	bl	800194c <LL_ADC_IsEnabled>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d105      	bne.n	8001b74 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	485f      	ldr	r0, [pc, #380]	; (8001cec <HAL_ADC_Init+0x290>)
 8001b70:	f7ff fd4c 	bl	800160c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	7e5b      	ldrb	r3, [r3, #25]
 8001b78:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b7e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001b84:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001b8a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b92:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d106      	bne.n	8001bb0 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	045b      	lsls	r3, r3, #17
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d009      	beq.n	8001bcc <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bbc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68da      	ldr	r2, [r3, #12]
 8001bd2:	4b47      	ldr	r3, [pc, #284]	; (8001cf0 <HAL_ADC_Init+0x294>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6812      	ldr	r2, [r2, #0]
 8001bda:	69b9      	ldr	r1, [r7, #24]
 8001bdc:	430b      	orrs	r3, r1
 8001bde:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff feff 	bl	80019e8 <LL_ADC_REG_IsConversionOngoing>
 8001bea:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ff20 	bl	8001a36 <LL_ADC_INJ_IsConversionOngoing>
 8001bf6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d140      	bne.n	8001c80 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d13d      	bne.n	8001c80 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	7e1b      	ldrb	r3, [r3, #24]
 8001c0c:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c0e:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c16:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c26:	f023 0306 	bic.w	r3, r3, #6
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6812      	ldr	r2, [r2, #0]
 8001c2e:	69b9      	ldr	r1, [r7, #24]
 8001c30:	430b      	orrs	r3, r1
 8001c32:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d118      	bne.n	8001c70 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001c48:	f023 0304 	bic.w	r3, r3, #4
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c54:	4311      	orrs	r1, r2
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c5a:	4311      	orrs	r1, r2
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c60:	430a      	orrs	r2, r1
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f042 0201 	orr.w	r2, r2, #1
 8001c6c:	611a      	str	r2, [r3, #16]
 8001c6e:	e007      	b.n	8001c80 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	691a      	ldr	r2, [r3, #16]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0201 	bic.w	r2, r2, #1
 8001c7e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d10c      	bne.n	8001ca2 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f023 010f 	bic.w	r1, r3, #15
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	1e5a      	subs	r2, r3, #1
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	631a      	str	r2, [r3, #48]	; 0x30
 8001ca0:	e007      	b.n	8001cb2 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 020f 	bic.w	r2, r2, #15
 8001cb0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb6:	f023 0303 	bic.w	r3, r3, #3
 8001cba:	f043 0201 	orr.w	r2, r3, #1
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	659a      	str	r2, [r3, #88]	; 0x58
 8001cc2:	e007      	b.n	8001cd4 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc8:	f043 0210 	orr.w	r2, r3, #16
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3720      	adds	r7, #32
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000000 	.word	0x20000000
 8001ce4:	053e2d63 	.word	0x053e2d63
 8001ce8:	50040000 	.word	0x50040000
 8001cec:	50040300 	.word	0x50040300
 8001cf0:	fff0c007 	.word	0xfff0c007

08001cf4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff fe71 	bl	80019e8 <LL_ADC_REG_IsConversionOngoing>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d14f      	bne.n	8001dac <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d101      	bne.n	8001d1a <HAL_ADC_Start+0x26>
 8001d16:	2302      	movs	r3, #2
 8001d18:	e04b      	b.n	8001db2 <HAL_ADC_Start+0xbe>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 fdd0 	bl	80028c8 <ADC_Enable>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d137      	bne.n	8001da2 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d36:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d3a:	f023 0301 	bic.w	r3, r3, #1
 8001d3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d52:	d106      	bne.n	8001d62 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d58:	f023 0206 	bic.w	r2, r3, #6
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d60:	e002      	b.n	8001d68 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	221c      	movs	r2, #28
 8001d6e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d007      	beq.n	8001d96 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d8e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fdfc 	bl	8001998 <LL_ADC_REG_StartConversion>
 8001da0:	e006      	b.n	8001db0 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001daa:	e001      	b.n	8001db0 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001dac:	2302      	movs	r3, #2
 8001dae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b084      	sub	sp, #16
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d101      	bne.n	8001dd0 <HAL_ADC_Stop+0x16>
 8001dcc:	2302      	movs	r3, #2
 8001dce:	e023      	b.n	8001e18 <HAL_ADC_Stop+0x5e>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001dd8:	2103      	movs	r1, #3
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 fcb8 	bl	8002750 <ADC_ConversionStop>
 8001de0:	4603      	mov	r3, r0
 8001de2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d111      	bne.n	8001e0e <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 fdf2 	bl	80029d4 <ADC_Disable>
 8001df0:	4603      	mov	r3, r0
 8001df2:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d109      	bne.n	8001e0e <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e02:	f023 0301 	bic.w	r3, r3, #1
 8001e06:	f043 0201 	orr.w	r2, r3, #1
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	2b08      	cmp	r3, #8
 8001e30:	d102      	bne.n	8001e38 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001e32:	2308      	movs	r3, #8
 8001e34:	617b      	str	r3, [r7, #20]
 8001e36:	e010      	b.n	8001e5a <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d007      	beq.n	8001e56 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4a:	f043 0220 	orr.w	r2, r3, #32
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e06f      	b.n	8001f36 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001e56:	2304      	movs	r3, #4
 8001e58:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001e5a:	f7ff fba7 	bl	80015ac <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001e60:	e021      	b.n	8001ea6 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e68:	d01d      	beq.n	8001ea6 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001e6a:	f7ff fb9f 	bl	80015ac <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d302      	bcc.n	8001e80 <HAL_ADC_PollForConversion+0x60>
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d112      	bne.n	8001ea6 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10b      	bne.n	8001ea6 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e92:	f043 0204 	orr.w	r2, r3, #4
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e047      	b.n	8001f36 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0d6      	beq.n	8001e62 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff fc3d 	bl	8001744 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d01c      	beq.n	8001f0a <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	7e5b      	ldrb	r3, [r3, #25]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d118      	bne.n	8001f0a <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	d111      	bne.n	8001f0a <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d105      	bne.n	8001f0a <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f02:	f043 0201 	orr.w	r2, r3, #1
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	d104      	bne.n	8001f22 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2208      	movs	r2, #8
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	e008      	b.n	8001f34 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d103      	bne.n	8001f34 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	220c      	movs	r2, #12
 8001f32:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b0b6      	sub	sp, #216	; 0xd8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f62:	2300      	movs	r3, #0
 8001f64:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d101      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x22>
 8001f76:	2302      	movs	r3, #2
 8001f78:	e3d5      	b.n	8002726 <HAL_ADC_ConfigChannel+0x7ce>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff fd2e 	bl	80019e8 <LL_ADC_REG_IsConversionOngoing>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f040 83ba 	bne.w	8002708 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b05      	cmp	r3, #5
 8001f9a:	d824      	bhi.n	8001fe6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	3b02      	subs	r3, #2
 8001fa2:	2b03      	cmp	r3, #3
 8001fa4:	d81b      	bhi.n	8001fde <HAL_ADC_ConfigChannel+0x86>
 8001fa6:	a201      	add	r2, pc, #4	; (adr r2, 8001fac <HAL_ADC_ConfigChannel+0x54>)
 8001fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fac:	08001fbd 	.word	0x08001fbd
 8001fb0:	08001fc5 	.word	0x08001fc5
 8001fb4:	08001fcd 	.word	0x08001fcd
 8001fb8:	08001fd5 	.word	0x08001fd5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	220c      	movs	r2, #12
 8001fc0:	605a      	str	r2, [r3, #4]
          break;
 8001fc2:	e011      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	2212      	movs	r2, #18
 8001fc8:	605a      	str	r2, [r3, #4]
          break;
 8001fca:	e00d      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	2218      	movs	r2, #24
 8001fd0:	605a      	str	r2, [r3, #4]
          break;
 8001fd2:	e009      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fda:	605a      	str	r2, [r3, #4]
          break;
 8001fdc:	e004      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	2206      	movs	r2, #6
 8001fe2:	605a      	str	r2, [r3, #4]
          break;
 8001fe4:	e000      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001fe6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6818      	ldr	r0, [r3, #0]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	6859      	ldr	r1, [r3, #4]
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	f7ff fbb8 	bl	800176a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fcf2 	bl	80019e8 <LL_ADC_REG_IsConversionOngoing>
 8002004:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff fd12 	bl	8001a36 <LL_ADC_INJ_IsConversionOngoing>
 8002012:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002016:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800201a:	2b00      	cmp	r3, #0
 800201c:	f040 81c1 	bne.w	80023a2 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002020:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002024:	2b00      	cmp	r3, #0
 8002026:	f040 81bc 	bne.w	80023a2 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002032:	d10f      	bne.n	8002054 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6818      	ldr	r0, [r3, #0]
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2200      	movs	r2, #0
 800203e:	4619      	mov	r1, r3
 8002040:	f7ff fbbf 	bl	80017c2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fb66 	bl	800171e <LL_ADC_SetSamplingTimeCommonConfig>
 8002052:	e00e      	b.n	8002072 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6818      	ldr	r0, [r3, #0]
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	6819      	ldr	r1, [r3, #0]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	461a      	mov	r2, r3
 8002062:	f7ff fbae 	bl	80017c2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2100      	movs	r1, #0
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff fb56 	bl	800171e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	695a      	ldr	r2, [r3, #20]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	08db      	lsrs	r3, r3, #3
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	2b04      	cmp	r3, #4
 8002092:	d00a      	beq.n	80020aa <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6818      	ldr	r0, [r3, #0]
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	6919      	ldr	r1, [r3, #16]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80020a4:	f7ff fae6 	bl	8001674 <LL_ADC_SetOffset>
 80020a8:	e17b      	b.n	80023a2 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2100      	movs	r1, #0
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff fb03 	bl	80016bc <LL_ADC_GetOffsetChannel>
 80020b6:	4603      	mov	r3, r0
 80020b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d10a      	bne.n	80020d6 <HAL_ADC_ConfigChannel+0x17e>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2100      	movs	r1, #0
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff faf8 	bl	80016bc <LL_ADC_GetOffsetChannel>
 80020cc:	4603      	mov	r3, r0
 80020ce:	0e9b      	lsrs	r3, r3, #26
 80020d0:	f003 021f 	and.w	r2, r3, #31
 80020d4:	e01e      	b.n	8002114 <HAL_ADC_ConfigChannel+0x1bc>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2100      	movs	r1, #0
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff faed 	bl	80016bc <LL_ADC_GetOffsetChannel>
 80020e2:	4603      	mov	r3, r0
 80020e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80020ec:	fa93 f3a3 	rbit	r3, r3
 80020f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80020f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80020fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002104:	2320      	movs	r3, #32
 8002106:	e004      	b.n	8002112 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002108:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800210c:	fab3 f383 	clz	r3, r3
 8002110:	b2db      	uxtb	r3, r3
 8002112:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800211c:	2b00      	cmp	r3, #0
 800211e:	d105      	bne.n	800212c <HAL_ADC_ConfigChannel+0x1d4>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	0e9b      	lsrs	r3, r3, #26
 8002126:	f003 031f 	and.w	r3, r3, #31
 800212a:	e018      	b.n	800215e <HAL_ADC_ConfigChannel+0x206>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002134:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002138:	fa93 f3a3 	rbit	r3, r3
 800213c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002140:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002144:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002148:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002150:	2320      	movs	r3, #32
 8002152:	e004      	b.n	800215e <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002154:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002158:	fab3 f383 	clz	r3, r3
 800215c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800215e:	429a      	cmp	r2, r3
 8002160:	d106      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2200      	movs	r2, #0
 8002168:	2100      	movs	r1, #0
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff fabc 	bl	80016e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2101      	movs	r1, #1
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff faa0 	bl	80016bc <LL_ADC_GetOffsetChannel>
 800217c:	4603      	mov	r3, r0
 800217e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10a      	bne.n	800219c <HAL_ADC_ConfigChannel+0x244>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2101      	movs	r1, #1
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff fa95 	bl	80016bc <LL_ADC_GetOffsetChannel>
 8002192:	4603      	mov	r3, r0
 8002194:	0e9b      	lsrs	r3, r3, #26
 8002196:	f003 021f 	and.w	r2, r3, #31
 800219a:	e01e      	b.n	80021da <HAL_ADC_ConfigChannel+0x282>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2101      	movs	r1, #1
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff fa8a 	bl	80016bc <LL_ADC_GetOffsetChannel>
 80021a8:	4603      	mov	r3, r0
 80021aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80021b2:	fa93 f3a3 	rbit	r3, r3
 80021b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80021ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80021be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80021c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80021ca:	2320      	movs	r3, #32
 80021cc:	e004      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80021ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80021d2:	fab3 f383 	clz	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d105      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x29a>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	0e9b      	lsrs	r3, r3, #26
 80021ec:	f003 031f 	and.w	r3, r3, #31
 80021f0:	e018      	b.n	8002224 <HAL_ADC_ConfigChannel+0x2cc>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021fe:	fa93 f3a3 	rbit	r3, r3
 8002202:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002206:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800220a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800220e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002216:	2320      	movs	r3, #32
 8002218:	e004      	b.n	8002224 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800221a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800221e:	fab3 f383 	clz	r3, r3
 8002222:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002224:	429a      	cmp	r2, r3
 8002226:	d106      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2200      	movs	r2, #0
 800222e:	2101      	movs	r1, #1
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff fa59 	bl	80016e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2102      	movs	r1, #2
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff fa3d 	bl	80016bc <LL_ADC_GetOffsetChannel>
 8002242:	4603      	mov	r3, r0
 8002244:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10a      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x30a>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2102      	movs	r1, #2
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff fa32 	bl	80016bc <LL_ADC_GetOffsetChannel>
 8002258:	4603      	mov	r3, r0
 800225a:	0e9b      	lsrs	r3, r3, #26
 800225c:	f003 021f 	and.w	r2, r3, #31
 8002260:	e01e      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x348>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2102      	movs	r1, #2
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff fa27 	bl	80016bc <LL_ADC_GetOffsetChannel>
 800226e:	4603      	mov	r3, r0
 8002270:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002274:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002278:	fa93 f3a3 	rbit	r3, r3
 800227c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002280:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002284:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002288:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002290:	2320      	movs	r3, #32
 8002292:	e004      	b.n	800229e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002294:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002298:	fab3 f383 	clz	r3, r3
 800229c:	b2db      	uxtb	r3, r3
 800229e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d105      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x360>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	0e9b      	lsrs	r3, r3, #26
 80022b2:	f003 031f 	and.w	r3, r3, #31
 80022b6:	e016      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x38e>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022c4:	fa93 f3a3 	rbit	r3, r3
 80022c8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80022ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80022d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80022d8:	2320      	movs	r3, #32
 80022da:	e004      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80022dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022e0:	fab3 f383 	clz	r3, r3
 80022e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d106      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2200      	movs	r2, #0
 80022f0:	2102      	movs	r1, #2
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff f9f8 	bl	80016e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2103      	movs	r1, #3
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff f9dc 	bl	80016bc <LL_ADC_GetOffsetChannel>
 8002304:	4603      	mov	r3, r0
 8002306:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10a      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x3cc>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2103      	movs	r1, #3
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff f9d1 	bl	80016bc <LL_ADC_GetOffsetChannel>
 800231a:	4603      	mov	r3, r0
 800231c:	0e9b      	lsrs	r3, r3, #26
 800231e:	f003 021f 	and.w	r2, r3, #31
 8002322:	e017      	b.n	8002354 <HAL_ADC_ConfigChannel+0x3fc>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2103      	movs	r1, #3
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff f9c6 	bl	80016bc <LL_ADC_GetOffsetChannel>
 8002330:	4603      	mov	r3, r0
 8002332:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002334:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002336:	fa93 f3a3 	rbit	r3, r3
 800233a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800233c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800233e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002340:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002346:	2320      	movs	r3, #32
 8002348:	e003      	b.n	8002352 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800234a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800234c:	fab3 f383 	clz	r3, r3
 8002350:	b2db      	uxtb	r3, r3
 8002352:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235c:	2b00      	cmp	r3, #0
 800235e:	d105      	bne.n	800236c <HAL_ADC_ConfigChannel+0x414>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	0e9b      	lsrs	r3, r3, #26
 8002366:	f003 031f 	and.w	r3, r3, #31
 800236a:	e011      	b.n	8002390 <HAL_ADC_ConfigChannel+0x438>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002372:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002374:	fa93 f3a3 	rbit	r3, r3
 8002378:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800237a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800237c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800237e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002384:	2320      	movs	r3, #32
 8002386:	e003      	b.n	8002390 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800238a:	fab3 f383 	clz	r3, r3
 800238e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002390:	429a      	cmp	r2, r3
 8002392:	d106      	bne.n	80023a2 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2200      	movs	r2, #0
 800239a:	2103      	movs	r1, #3
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff f9a3 	bl	80016e8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff fad0 	bl	800194c <LL_ADC_IsEnabled>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f040 8140 	bne.w	8002634 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6818      	ldr	r0, [r3, #0]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	6819      	ldr	r1, [r3, #0]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	461a      	mov	r2, r3
 80023c2:	f7ff fa29 	bl	8001818 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	4a8f      	ldr	r2, [pc, #572]	; (8002608 <HAL_ADC_ConfigChannel+0x6b0>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	f040 8131 	bne.w	8002634 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10b      	bne.n	80023fa <HAL_ADC_ConfigChannel+0x4a2>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	0e9b      	lsrs	r3, r3, #26
 80023e8:	3301      	adds	r3, #1
 80023ea:	f003 031f 	and.w	r3, r3, #31
 80023ee:	2b09      	cmp	r3, #9
 80023f0:	bf94      	ite	ls
 80023f2:	2301      	movls	r3, #1
 80023f4:	2300      	movhi	r3, #0
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	e019      	b.n	800242e <HAL_ADC_ConfigChannel+0x4d6>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002400:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002402:	fa93 f3a3 	rbit	r3, r3
 8002406:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002408:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800240a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800240c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002412:	2320      	movs	r3, #32
 8002414:	e003      	b.n	800241e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002416:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002418:	fab3 f383 	clz	r3, r3
 800241c:	b2db      	uxtb	r3, r3
 800241e:	3301      	adds	r3, #1
 8002420:	f003 031f 	and.w	r3, r3, #31
 8002424:	2b09      	cmp	r3, #9
 8002426:	bf94      	ite	ls
 8002428:	2301      	movls	r3, #1
 800242a:	2300      	movhi	r3, #0
 800242c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800242e:	2b00      	cmp	r3, #0
 8002430:	d079      	beq.n	8002526 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800243a:	2b00      	cmp	r3, #0
 800243c:	d107      	bne.n	800244e <HAL_ADC_ConfigChannel+0x4f6>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	0e9b      	lsrs	r3, r3, #26
 8002444:	3301      	adds	r3, #1
 8002446:	069b      	lsls	r3, r3, #26
 8002448:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800244c:	e015      	b.n	800247a <HAL_ADC_ConfigChannel+0x522>
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002456:	fa93 f3a3 	rbit	r3, r3
 800245a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800245c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800245e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8002466:	2320      	movs	r3, #32
 8002468:	e003      	b.n	8002472 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800246a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800246c:	fab3 f383 	clz	r3, r3
 8002470:	b2db      	uxtb	r3, r3
 8002472:	3301      	adds	r3, #1
 8002474:	069b      	lsls	r3, r3, #26
 8002476:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002482:	2b00      	cmp	r3, #0
 8002484:	d109      	bne.n	800249a <HAL_ADC_ConfigChannel+0x542>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	0e9b      	lsrs	r3, r3, #26
 800248c:	3301      	adds	r3, #1
 800248e:	f003 031f 	and.w	r3, r3, #31
 8002492:	2101      	movs	r1, #1
 8002494:	fa01 f303 	lsl.w	r3, r1, r3
 8002498:	e017      	b.n	80024ca <HAL_ADC_ConfigChannel+0x572>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024a2:	fa93 f3a3 	rbit	r3, r3
 80024a6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80024a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024aa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80024ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80024b2:	2320      	movs	r3, #32
 80024b4:	e003      	b.n	80024be <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80024b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024b8:	fab3 f383 	clz	r3, r3
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	3301      	adds	r3, #1
 80024c0:	f003 031f 	and.w	r3, r3, #31
 80024c4:	2101      	movs	r1, #1
 80024c6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ca:	ea42 0103 	orr.w	r1, r2, r3
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10a      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x598>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	0e9b      	lsrs	r3, r3, #26
 80024e0:	3301      	adds	r3, #1
 80024e2:	f003 021f 	and.w	r2, r3, #31
 80024e6:	4613      	mov	r3, r2
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	4413      	add	r3, r2
 80024ec:	051b      	lsls	r3, r3, #20
 80024ee:	e018      	b.n	8002522 <HAL_ADC_ConfigChannel+0x5ca>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f8:	fa93 f3a3 	rbit	r3, r3
 80024fc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80024fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002500:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002508:	2320      	movs	r3, #32
 800250a:	e003      	b.n	8002514 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 800250c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800250e:	fab3 f383 	clz	r3, r3
 8002512:	b2db      	uxtb	r3, r3
 8002514:	3301      	adds	r3, #1
 8002516:	f003 021f 	and.w	r2, r3, #31
 800251a:	4613      	mov	r3, r2
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	4413      	add	r3, r2
 8002520:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002522:	430b      	orrs	r3, r1
 8002524:	e081      	b.n	800262a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800252e:	2b00      	cmp	r3, #0
 8002530:	d107      	bne.n	8002542 <HAL_ADC_ConfigChannel+0x5ea>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	0e9b      	lsrs	r3, r3, #26
 8002538:	3301      	adds	r3, #1
 800253a:	069b      	lsls	r3, r3, #26
 800253c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002540:	e015      	b.n	800256e <HAL_ADC_ConfigChannel+0x616>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254a:	fa93 f3a3 	rbit	r3, r3
 800254e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002552:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800255a:	2320      	movs	r3, #32
 800255c:	e003      	b.n	8002566 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800255e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002560:	fab3 f383 	clz	r3, r3
 8002564:	b2db      	uxtb	r3, r3
 8002566:	3301      	adds	r3, #1
 8002568:	069b      	lsls	r3, r3, #26
 800256a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002576:	2b00      	cmp	r3, #0
 8002578:	d109      	bne.n	800258e <HAL_ADC_ConfigChannel+0x636>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	0e9b      	lsrs	r3, r3, #26
 8002580:	3301      	adds	r3, #1
 8002582:	f003 031f 	and.w	r3, r3, #31
 8002586:	2101      	movs	r1, #1
 8002588:	fa01 f303 	lsl.w	r3, r1, r3
 800258c:	e017      	b.n	80025be <HAL_ADC_ConfigChannel+0x666>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002594:	6a3b      	ldr	r3, [r7, #32]
 8002596:	fa93 f3a3 	rbit	r3, r3
 800259a:	61fb      	str	r3, [r7, #28]
  return result;
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80025a6:	2320      	movs	r3, #32
 80025a8:	e003      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	fab3 f383 	clz	r3, r3
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	3301      	adds	r3, #1
 80025b4:	f003 031f 	and.w	r3, r3, #31
 80025b8:	2101      	movs	r1, #1
 80025ba:	fa01 f303 	lsl.w	r3, r1, r3
 80025be:	ea42 0103 	orr.w	r1, r2, r3
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10d      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x692>
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	0e9b      	lsrs	r3, r3, #26
 80025d4:	3301      	adds	r3, #1
 80025d6:	f003 021f 	and.w	r2, r3, #31
 80025da:	4613      	mov	r3, r2
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	4413      	add	r3, r2
 80025e0:	3b1e      	subs	r3, #30
 80025e2:	051b      	lsls	r3, r3, #20
 80025e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025e8:	e01e      	b.n	8002628 <HAL_ADC_ConfigChannel+0x6d0>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	fa93 f3a3 	rbit	r3, r3
 80025f6:	613b      	str	r3, [r7, #16]
  return result;
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d104      	bne.n	800260c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002602:	2320      	movs	r3, #32
 8002604:	e006      	b.n	8002614 <HAL_ADC_ConfigChannel+0x6bc>
 8002606:	bf00      	nop
 8002608:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	fab3 f383 	clz	r3, r3
 8002612:	b2db      	uxtb	r3, r3
 8002614:	3301      	adds	r3, #1
 8002616:	f003 021f 	and.w	r2, r3, #31
 800261a:	4613      	mov	r3, r2
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	4413      	add	r3, r2
 8002620:	3b1e      	subs	r3, #30
 8002622:	051b      	lsls	r3, r3, #20
 8002624:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002628:	430b      	orrs	r3, r1
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	6892      	ldr	r2, [r2, #8]
 800262e:	4619      	mov	r1, r3
 8002630:	f7ff f8c7 	bl	80017c2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4b3d      	ldr	r3, [pc, #244]	; (8002730 <HAL_ADC_ConfigChannel+0x7d8>)
 800263a:	4013      	ands	r3, r2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d06c      	beq.n	800271a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002640:	483c      	ldr	r0, [pc, #240]	; (8002734 <HAL_ADC_ConfigChannel+0x7dc>)
 8002642:	f7ff f809 	bl	8001658 <LL_ADC_GetCommonPathInternalCh>
 8002646:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a3a      	ldr	r2, [pc, #232]	; (8002738 <HAL_ADC_ConfigChannel+0x7e0>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d127      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002654:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002658:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d121      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a35      	ldr	r2, [pc, #212]	; (800273c <HAL_ADC_ConfigChannel+0x7e4>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d157      	bne.n	800271a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800266a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800266e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002672:	4619      	mov	r1, r3
 8002674:	482f      	ldr	r0, [pc, #188]	; (8002734 <HAL_ADC_ConfigChannel+0x7dc>)
 8002676:	f7fe ffdc 	bl	8001632 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800267a:	4b31      	ldr	r3, [pc, #196]	; (8002740 <HAL_ADC_ConfigChannel+0x7e8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	099b      	lsrs	r3, r3, #6
 8002680:	4a30      	ldr	r2, [pc, #192]	; (8002744 <HAL_ADC_ConfigChannel+0x7ec>)
 8002682:	fba2 2303 	umull	r2, r3, r2, r3
 8002686:	099b      	lsrs	r3, r3, #6
 8002688:	1c5a      	adds	r2, r3, #1
 800268a:	4613      	mov	r3, r2
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	4413      	add	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002694:	e002      	b.n	800269c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	3b01      	subs	r3, #1
 800269a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1f9      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026a2:	e03a      	b.n	800271a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a27      	ldr	r2, [pc, #156]	; (8002748 <HAL_ADC_ConfigChannel+0x7f0>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d113      	bne.n	80026d6 <HAL_ADC_ConfigChannel+0x77e>
 80026ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10d      	bne.n	80026d6 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a1f      	ldr	r2, [pc, #124]	; (800273c <HAL_ADC_ConfigChannel+0x7e4>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d12a      	bne.n	800271a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026cc:	4619      	mov	r1, r3
 80026ce:	4819      	ldr	r0, [pc, #100]	; (8002734 <HAL_ADC_ConfigChannel+0x7dc>)
 80026d0:	f7fe ffaf 	bl	8001632 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026d4:	e021      	b.n	800271a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a1c      	ldr	r2, [pc, #112]	; (800274c <HAL_ADC_ConfigChannel+0x7f4>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d11c      	bne.n	800271a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80026e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d116      	bne.n	800271a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a12      	ldr	r2, [pc, #72]	; (800273c <HAL_ADC_ConfigChannel+0x7e4>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d111      	bne.n	800271a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026fe:	4619      	mov	r1, r3
 8002700:	480c      	ldr	r0, [pc, #48]	; (8002734 <HAL_ADC_ConfigChannel+0x7dc>)
 8002702:	f7fe ff96 	bl	8001632 <LL_ADC_SetCommonPathInternalCh>
 8002706:	e008      	b.n	800271a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270c:	f043 0220 	orr.w	r2, r3, #32
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002722:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002726:	4618      	mov	r0, r3
 8002728:	37d8      	adds	r7, #216	; 0xd8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	80080000 	.word	0x80080000
 8002734:	50040300 	.word	0x50040300
 8002738:	c7520000 	.word	0xc7520000
 800273c:	50040000 	.word	0x50040000
 8002740:	20000000 	.word	0x20000000
 8002744:	053e2d63 	.word	0x053e2d63
 8002748:	cb840000 	.word	0xcb840000
 800274c:	80000001 	.word	0x80000001

08002750 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b088      	sub	sp, #32
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800275a:	2300      	movs	r3, #0
 800275c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff f93e 	bl	80019e8 <LL_ADC_REG_IsConversionOngoing>
 800276c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff f95f 	bl	8001a36 <LL_ADC_INJ_IsConversionOngoing>
 8002778:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d103      	bne.n	8002788 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 8098 	beq.w	80028b8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d02a      	beq.n	80027ec <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	7e5b      	ldrb	r3, [r3, #25]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d126      	bne.n	80027ec <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	7e1b      	ldrb	r3, [r3, #24]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d122      	bne.n	80027ec <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80027a6:	2301      	movs	r3, #1
 80027a8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80027aa:	e014      	b.n	80027d6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	4a45      	ldr	r2, [pc, #276]	; (80028c4 <ADC_ConversionStop+0x174>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d90d      	bls.n	80027d0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b8:	f043 0210 	orr.w	r2, r3, #16
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c4:	f043 0201 	orr.w	r2, r3, #1
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e074      	b.n	80028ba <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	3301      	adds	r3, #1
 80027d4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e0:	2b40      	cmp	r3, #64	; 0x40
 80027e2:	d1e3      	bne.n	80027ac <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2240      	movs	r2, #64	; 0x40
 80027ea:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d014      	beq.n	800281c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff f8f6 	bl	80019e8 <LL_ADC_REG_IsConversionOngoing>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00c      	beq.n	800281c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff f8b3 	bl	8001972 <LL_ADC_IsDisableOngoing>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d104      	bne.n	800281c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff f8d2 	bl	80019c0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d014      	beq.n	800284c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff f905 	bl	8001a36 <LL_ADC_INJ_IsConversionOngoing>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00c      	beq.n	800284c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff f89b 	bl	8001972 <LL_ADC_IsDisableOngoing>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d104      	bne.n	800284c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff f8e1 	bl	8001a0e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	2b02      	cmp	r3, #2
 8002850:	d005      	beq.n	800285e <ADC_ConversionStop+0x10e>
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	2b03      	cmp	r3, #3
 8002856:	d105      	bne.n	8002864 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002858:	230c      	movs	r3, #12
 800285a:	617b      	str	r3, [r7, #20]
        break;
 800285c:	e005      	b.n	800286a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800285e:	2308      	movs	r3, #8
 8002860:	617b      	str	r3, [r7, #20]
        break;
 8002862:	e002      	b.n	800286a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002864:	2304      	movs	r3, #4
 8002866:	617b      	str	r3, [r7, #20]
        break;
 8002868:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800286a:	f7fe fe9f 	bl	80015ac <HAL_GetTick>
 800286e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002870:	e01b      	b.n	80028aa <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002872:	f7fe fe9b 	bl	80015ac <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b05      	cmp	r3, #5
 800287e:	d914      	bls.n	80028aa <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	4013      	ands	r3, r2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00d      	beq.n	80028aa <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002892:	f043 0210 	orr.w	r2, r3, #16
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289e:	f043 0201 	orr.w	r2, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e007      	b.n	80028ba <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1dc      	bne.n	8002872 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3720      	adds	r7, #32
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	a33fffff 	.word	0xa33fffff

080028c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff f837 	bl	800194c <LL_ADC_IsEnabled>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d169      	bne.n	80029b8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689a      	ldr	r2, [r3, #8]
 80028ea:	4b36      	ldr	r3, [pc, #216]	; (80029c4 <ADC_Enable+0xfc>)
 80028ec:	4013      	ands	r3, r2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00d      	beq.n	800290e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f6:	f043 0210 	orr.w	r2, r3, #16
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002902:	f043 0201 	orr.w	r2, r3, #1
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e055      	b.n	80029ba <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f7fe fff2 	bl	80018fc <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002918:	482b      	ldr	r0, [pc, #172]	; (80029c8 <ADC_Enable+0x100>)
 800291a:	f7fe fe9d 	bl	8001658 <LL_ADC_GetCommonPathInternalCh>
 800291e:	4603      	mov	r3, r0
 8002920:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d013      	beq.n	8002950 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002928:	4b28      	ldr	r3, [pc, #160]	; (80029cc <ADC_Enable+0x104>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	099b      	lsrs	r3, r3, #6
 800292e:	4a28      	ldr	r2, [pc, #160]	; (80029d0 <ADC_Enable+0x108>)
 8002930:	fba2 2303 	umull	r2, r3, r2, r3
 8002934:	099b      	lsrs	r3, r3, #6
 8002936:	1c5a      	adds	r2, r3, #1
 8002938:	4613      	mov	r3, r2
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	4413      	add	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002942:	e002      	b.n	800294a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	3b01      	subs	r3, #1
 8002948:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1f9      	bne.n	8002944 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002950:	f7fe fe2c 	bl	80015ac <HAL_GetTick>
 8002954:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002956:	e028      	b.n	80029aa <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f7fe fff5 	bl	800194c <LL_ADC_IsEnabled>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d104      	bne.n	8002972 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f7fe ffc5 	bl	80018fc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002972:	f7fe fe1b 	bl	80015ac <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d914      	bls.n	80029aa <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b01      	cmp	r3, #1
 800298c:	d00d      	beq.n	80029aa <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002992:	f043 0210 	orr.w	r2, r3, #16
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299e:	f043 0201 	orr.w	r2, r3, #1
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e007      	b.n	80029ba <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d1cf      	bne.n	8002958 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	8000003f 	.word	0x8000003f
 80029c8:	50040300 	.word	0x50040300
 80029cc:	20000000 	.word	0x20000000
 80029d0:	053e2d63 	.word	0x053e2d63

080029d4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7fe ffc6 	bl	8001972 <LL_ADC_IsDisableOngoing>
 80029e6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7fe ffad 	bl	800194c <LL_ADC_IsEnabled>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d047      	beq.n	8002a88 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d144      	bne.n	8002a88 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 030d 	and.w	r3, r3, #13
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d10c      	bne.n	8002a26 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fe ff87 	bl	8001924 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2203      	movs	r2, #3
 8002a1c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a1e:	f7fe fdc5 	bl	80015ac <HAL_GetTick>
 8002a22:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a24:	e029      	b.n	8002a7a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2a:	f043 0210 	orr.w	r2, r3, #16
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a36:	f043 0201 	orr.w	r2, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e023      	b.n	8002a8a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a42:	f7fe fdb3 	bl	80015ac <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d914      	bls.n	8002a7a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00d      	beq.n	8002a7a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a62:	f043 0210 	orr.w	r2, r3, #16
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6e:	f043 0201 	orr.w	r2, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e007      	b.n	8002a8a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1dc      	bne.n	8002a42 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <LL_ADC_StartCalibration>:
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002aa4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <LL_ADC_IsCalibrationOnGoing>:
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ad4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ad8:	d101      	bne.n	8002ade <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002ada:	2301      	movs	r3, #1
 8002adc:	e000      	b.n	8002ae0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002af6:	2300      	movs	r3, #0
 8002af8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d101      	bne.n	8002b08 <HAL_ADCEx_Calibration_Start+0x1c>
 8002b04:	2302      	movs	r3, #2
 8002b06:	e04d      	b.n	8002ba4 <HAL_ADCEx_Calibration_Start+0xb8>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7ff ff5f 	bl	80029d4 <ADC_Disable>
 8002b16:	4603      	mov	r3, r0
 8002b18:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002b1a:	7bfb      	ldrb	r3, [r7, #15]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d136      	bne.n	8002b8e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b24:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b28:	f023 0302 	bic.w	r3, r3, #2
 8002b2c:	f043 0202 	orr.w	r2, r3, #2
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6839      	ldr	r1, [r7, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff ffa9 	bl	8002a92 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002b40:	e014      	b.n	8002b6c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	3301      	adds	r3, #1
 8002b46:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8002b4e:	d30d      	bcc.n	8002b6c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b54:	f023 0312 	bic.w	r3, r3, #18
 8002b58:	f043 0210 	orr.w	r2, r3, #16
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e01b      	b.n	8002ba4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff ffa7 	bl	8002ac4 <LL_ADC_IsCalibrationOnGoing>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1e2      	bne.n	8002b42 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b80:	f023 0303 	bic.w	r3, r3, #3
 8002b84:	f043 0201 	orr.w	r2, r3, #1
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	659a      	str	r2, [r3, #88]	; 0x58
 8002b8c:	e005      	b.n	8002b9a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b92:	f043 0210 	orr.w	r2, r3, #16
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bbc:	4b0c      	ldr	r3, [pc, #48]	; (8002bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bc8:	4013      	ands	r3, r2
 8002bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bde:	4a04      	ldr	r2, [pc, #16]	; (8002bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	60d3      	str	r3, [r2, #12]
}
 8002be4:	bf00      	nop
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	e000ed00 	.word	0xe000ed00

08002bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bf8:	4b04      	ldr	r3, [pc, #16]	; (8002c0c <__NVIC_GetPriorityGrouping+0x18>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	0a1b      	lsrs	r3, r3, #8
 8002bfe:	f003 0307 	and.w	r3, r3, #7
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	e000ed00 	.word	0xe000ed00

08002c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	4603      	mov	r3, r0
 8002c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	db0b      	blt.n	8002c3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c22:	79fb      	ldrb	r3, [r7, #7]
 8002c24:	f003 021f 	and.w	r2, r3, #31
 8002c28:	4907      	ldr	r1, [pc, #28]	; (8002c48 <__NVIC_EnableIRQ+0x38>)
 8002c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2e:	095b      	lsrs	r3, r3, #5
 8002c30:	2001      	movs	r0, #1
 8002c32:	fa00 f202 	lsl.w	r2, r0, r2
 8002c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	e000e100 	.word	0xe000e100

08002c4c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	db12      	blt.n	8002c84 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	f003 021f 	and.w	r2, r3, #31
 8002c64:	490a      	ldr	r1, [pc, #40]	; (8002c90 <__NVIC_DisableIRQ+0x44>)
 8002c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6a:	095b      	lsrs	r3, r3, #5
 8002c6c:	2001      	movs	r0, #1
 8002c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c72:	3320      	adds	r3, #32
 8002c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002c78:	f3bf 8f4f 	dsb	sy
}
 8002c7c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c7e:	f3bf 8f6f 	isb	sy
}
 8002c82:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	e000e100 	.word	0xe000e100

08002c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	6039      	str	r1, [r7, #0]
 8002c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	db0a      	blt.n	8002cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	490c      	ldr	r1, [pc, #48]	; (8002ce0 <__NVIC_SetPriority+0x4c>)
 8002cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb2:	0112      	lsls	r2, r2, #4
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cbc:	e00a      	b.n	8002cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	4908      	ldr	r1, [pc, #32]	; (8002ce4 <__NVIC_SetPriority+0x50>)
 8002cc4:	79fb      	ldrb	r3, [r7, #7]
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	3b04      	subs	r3, #4
 8002ccc:	0112      	lsls	r2, r2, #4
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	761a      	strb	r2, [r3, #24]
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	e000e100 	.word	0xe000e100
 8002ce4:	e000ed00 	.word	0xe000ed00

08002ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b089      	sub	sp, #36	; 0x24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f1c3 0307 	rsb	r3, r3, #7
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	bf28      	it	cs
 8002d06:	2304      	movcs	r3, #4
 8002d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	2b06      	cmp	r3, #6
 8002d10:	d902      	bls.n	8002d18 <NVIC_EncodePriority+0x30>
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	3b03      	subs	r3, #3
 8002d16:	e000      	b.n	8002d1a <NVIC_EncodePriority+0x32>
 8002d18:	2300      	movs	r3, #0
 8002d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	43da      	mvns	r2, r3
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	401a      	ands	r2, r3
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d30:	f04f 31ff 	mov.w	r1, #4294967295
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3a:	43d9      	mvns	r1, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d40:	4313      	orrs	r3, r2
         );
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3724      	adds	r7, #36	; 0x24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7ff ff28 	bl	8002bac <__NVIC_SetPriorityGrouping>
}
 8002d5c:	bf00      	nop
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
 8002d70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d72:	2300      	movs	r3, #0
 8002d74:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d76:	f7ff ff3d 	bl	8002bf4 <__NVIC_GetPriorityGrouping>
 8002d7a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	68b9      	ldr	r1, [r7, #8]
 8002d80:	6978      	ldr	r0, [r7, #20]
 8002d82:	f7ff ffb1 	bl	8002ce8 <NVIC_EncodePriority>
 8002d86:	4602      	mov	r2, r0
 8002d88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d8c:	4611      	mov	r1, r2
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff ff80 	bl	8002c94 <__NVIC_SetPriority>
}
 8002d94:	bf00      	nop
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff ff30 	bl	8002c10 <__NVIC_EnableIRQ>
}
 8002db0:	bf00      	nop
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff ff40 	bl	8002c4c <__NVIC_DisableIRQ>
}
 8002dcc:	bf00      	nop
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b087      	sub	sp, #28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dde:	2300      	movs	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002de2:	e154      	b.n	800308e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	2101      	movs	r1, #1
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	fa01 f303 	lsl.w	r3, r1, r3
 8002df0:	4013      	ands	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 8146 	beq.w	8003088 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d005      	beq.n	8002e14 <HAL_GPIO_Init+0x40>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 0303 	and.w	r3, r3, #3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d130      	bne.n	8002e76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	2203      	movs	r2, #3
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	43db      	mvns	r3, r3
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	68da      	ldr	r2, [r3, #12]
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43db      	mvns	r3, r3
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4013      	ands	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	091b      	lsrs	r3, r3, #4
 8002e60:	f003 0201 	and.w	r2, r3, #1
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	2b03      	cmp	r3, #3
 8002e80:	d017      	beq.n	8002eb2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43db      	mvns	r3, r3
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	4013      	ands	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d123      	bne.n	8002f06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	08da      	lsrs	r2, r3, #3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	3208      	adds	r2, #8
 8002ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	220f      	movs	r2, #15
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	43db      	mvns	r3, r3
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	691a      	ldr	r2, [r3, #16]
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	08da      	lsrs	r2, r3, #3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3208      	adds	r2, #8
 8002f00:	6939      	ldr	r1, [r7, #16]
 8002f02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	2203      	movs	r2, #3
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	43db      	mvns	r3, r3
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f003 0203 	and.w	r2, r3, #3
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f000 80a0 	beq.w	8003088 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f48:	4b58      	ldr	r3, [pc, #352]	; (80030ac <HAL_GPIO_Init+0x2d8>)
 8002f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f4c:	4a57      	ldr	r2, [pc, #348]	; (80030ac <HAL_GPIO_Init+0x2d8>)
 8002f4e:	f043 0301 	orr.w	r3, r3, #1
 8002f52:	6613      	str	r3, [r2, #96]	; 0x60
 8002f54:	4b55      	ldr	r3, [pc, #340]	; (80030ac <HAL_GPIO_Init+0x2d8>)
 8002f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	60bb      	str	r3, [r7, #8]
 8002f5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f60:	4a53      	ldr	r2, [pc, #332]	; (80030b0 <HAL_GPIO_Init+0x2dc>)
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	089b      	lsrs	r3, r3, #2
 8002f66:	3302      	adds	r3, #2
 8002f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f003 0303 	and.w	r3, r3, #3
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	220f      	movs	r2, #15
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	4013      	ands	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f8a:	d019      	beq.n	8002fc0 <HAL_GPIO_Init+0x1ec>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a49      	ldr	r2, [pc, #292]	; (80030b4 <HAL_GPIO_Init+0x2e0>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d013      	beq.n	8002fbc <HAL_GPIO_Init+0x1e8>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a48      	ldr	r2, [pc, #288]	; (80030b8 <HAL_GPIO_Init+0x2e4>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d00d      	beq.n	8002fb8 <HAL_GPIO_Init+0x1e4>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a47      	ldr	r2, [pc, #284]	; (80030bc <HAL_GPIO_Init+0x2e8>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d007      	beq.n	8002fb4 <HAL_GPIO_Init+0x1e0>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a46      	ldr	r2, [pc, #280]	; (80030c0 <HAL_GPIO_Init+0x2ec>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d101      	bne.n	8002fb0 <HAL_GPIO_Init+0x1dc>
 8002fac:	2304      	movs	r3, #4
 8002fae:	e008      	b.n	8002fc2 <HAL_GPIO_Init+0x1ee>
 8002fb0:	2307      	movs	r3, #7
 8002fb2:	e006      	b.n	8002fc2 <HAL_GPIO_Init+0x1ee>
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e004      	b.n	8002fc2 <HAL_GPIO_Init+0x1ee>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	e002      	b.n	8002fc2 <HAL_GPIO_Init+0x1ee>
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e000      	b.n	8002fc2 <HAL_GPIO_Init+0x1ee>
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	f002 0203 	and.w	r2, r2, #3
 8002fc8:	0092      	lsls	r2, r2, #2
 8002fca:	4093      	lsls	r3, r2
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fd2:	4937      	ldr	r1, [pc, #220]	; (80030b0 <HAL_GPIO_Init+0x2dc>)
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	089b      	lsrs	r3, r3, #2
 8002fd8:	3302      	adds	r3, #2
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fe0:	4b38      	ldr	r3, [pc, #224]	; (80030c4 <HAL_GPIO_Init+0x2f0>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	4013      	ands	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	4313      	orrs	r3, r2
 8003002:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003004:	4a2f      	ldr	r2, [pc, #188]	; (80030c4 <HAL_GPIO_Init+0x2f0>)
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800300a:	4b2e      	ldr	r3, [pc, #184]	; (80030c4 <HAL_GPIO_Init+0x2f0>)
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	43db      	mvns	r3, r3
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	4013      	ands	r3, r2
 8003018:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4313      	orrs	r3, r2
 800302c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800302e:	4a25      	ldr	r2, [pc, #148]	; (80030c4 <HAL_GPIO_Init+0x2f0>)
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003034:	4b23      	ldr	r3, [pc, #140]	; (80030c4 <HAL_GPIO_Init+0x2f0>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	43db      	mvns	r3, r3
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	4013      	ands	r3, r2
 8003042:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	4313      	orrs	r3, r2
 8003056:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003058:	4a1a      	ldr	r2, [pc, #104]	; (80030c4 <HAL_GPIO_Init+0x2f0>)
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800305e:	4b19      	ldr	r3, [pc, #100]	; (80030c4 <HAL_GPIO_Init+0x2f0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	43db      	mvns	r3, r3
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	4013      	ands	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4313      	orrs	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003082:	4a10      	ldr	r2, [pc, #64]	; (80030c4 <HAL_GPIO_Init+0x2f0>)
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	3301      	adds	r3, #1
 800308c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	fa22 f303 	lsr.w	r3, r2, r3
 8003098:	2b00      	cmp	r3, #0
 800309a:	f47f aea3 	bne.w	8002de4 <HAL_GPIO_Init+0x10>
  }
}
 800309e:	bf00      	nop
 80030a0:	bf00      	nop
 80030a2:	371c      	adds	r7, #28
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	40021000 	.word	0x40021000
 80030b0:	40010000 	.word	0x40010000
 80030b4:	48000400 	.word	0x48000400
 80030b8:	48000800 	.word	0x48000800
 80030bc:	48000c00 	.word	0x48000c00
 80030c0:	48001000 	.word	0x48001000
 80030c4:	40010400 	.word	0x40010400

080030c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	807b      	strh	r3, [r7, #2]
 80030d4:	4613      	mov	r3, r2
 80030d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030d8:	787b      	ldrb	r3, [r7, #1]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030de:	887a      	ldrh	r2, [r7, #2]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030e4:	e002      	b.n	80030ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030e6:	887a      	ldrh	r2, [r7, #2]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003102:	4b08      	ldr	r3, [pc, #32]	; (8003124 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003104:	695a      	ldr	r2, [r3, #20]
 8003106:	88fb      	ldrh	r3, [r7, #6]
 8003108:	4013      	ands	r3, r2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d006      	beq.n	800311c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800310e:	4a05      	ldr	r2, [pc, #20]	; (8003124 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003110:	88fb      	ldrh	r3, [r7, #6]
 8003112:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003114:	88fb      	ldrh	r3, [r7, #6]
 8003116:	4618      	mov	r0, r3
 8003118:	f007 fd36 	bl	800ab88 <HAL_GPIO_EXTI_Callback>
  }
}
 800311c:	bf00      	nop
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40010400 	.word	0x40010400

08003128 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e08f      	b.n	800325a <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	d106      	bne.n	800315a <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7fd ff97 	bl	8001088 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2202      	movs	r2, #2
 800315e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d004      	beq.n	800317c <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003176:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800317a:	d103      	bne.n	8003184 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f023 031e 	bic.w	r3, r3, #30
 8003182:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800318c:	4293      	cmp	r3, r2
 800318e:	d005      	beq.n	800319c <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003196:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800319a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	4b31      	ldr	r3, [pc, #196]	; (8003264 <HAL_LPTIM_Init+0x13c>)
 80031a0:	4013      	ands	r3, r2
 80031a2:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80031ac:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80031b2:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80031b8:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80031be:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d107      	bne.n	80031de <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80031d6:	4313      	orrs	r3, r2
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	4313      	orrs	r3, r2
 80031dc:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d004      	beq.n	80031f0 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031ee:	d107      	bne.n	8003200 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80031f8:	4313      	orrs	r3, r2
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003208:	4293      	cmp	r3, r2
 800320a:	d00a      	beq.n	8003222 <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003214:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800321a:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	4313      	orrs	r3, r2
 8003220:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a0e      	ldr	r2, [pc, #56]	; (8003268 <HAL_LPTIM_Init+0x140>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d108      	bne.n	8003246 <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	621a      	str	r2, [r3, #32]
 8003244:	e004      	b.n	8003250 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800324e:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	ff19f1fe 	.word	0xff19f1fe
 8003268:	40007c00 	.word	0x40007c00

0800326c <HAL_LPTIM_Counter_Start>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2202      	movs	r2, #2
 800327a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d00c      	beq.n	80032a0 <HAL_LPTIM_Counter_Start+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800328e:	d107      	bne.n	80032a0 <HAL_LPTIM_Counter_Start+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68da      	ldr	r2, [r3, #12]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 800329e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	691a      	ldr	r2, [r3, #16]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0201 	orr.w	r2, r2, #1
 80032ae:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2210      	movs	r2, #16
 80032b6:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80032c0:	2110      	movs	r1, #16
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f816 	bl	80032f4 <LPTIM_WaitForFlag>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b03      	cmp	r3, #3
 80032cc:	d101      	bne.n	80032d2 <HAL_LPTIM_Counter_Start+0x66>
  {
    return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e00c      	b.n	80032ec <HAL_LPTIM_Counter_Start+0x80>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f042 0204 	orr.w	r2, r2, #4
 80032e0:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 80032fe:	2300      	movs	r3, #0
 8003300:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8003302:	4b12      	ldr	r3, [pc, #72]	; (800334c <LPTIM_WaitForFlag+0x58>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a12      	ldr	r2, [pc, #72]	; (8003350 <LPTIM_WaitForFlag+0x5c>)
 8003308:	fba2 2303 	umull	r2, r3, r2, r3
 800330c:	0b9b      	lsrs	r3, r3, #14
 800330e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003312:	fb02 f303 	mul.w	r3, r2, r3
 8003316:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	3b01      	subs	r3, #1
 800331c:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	4013      	ands	r3, r2
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	d002      	beq.n	800333e <LPTIM_WaitForFlag+0x4a>
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1ec      	bne.n	8003318 <LPTIM_WaitForFlag+0x24>

  return result;
 800333e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3714      	adds	r7, #20
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	20000000 	.word	0x20000000
 8003350:	d1b71759 	.word	0xd1b71759

08003354 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003358:	4b05      	ldr	r3, [pc, #20]	; (8003370 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a04      	ldr	r2, [pc, #16]	; (8003370 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800335e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003362:	6013      	str	r3, [r2, #0]
}
 8003364:	bf00      	nop
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	40007000 	.word	0x40007000

08003374 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003378:	4b04      	ldr	r3, [pc, #16]	; (800338c <HAL_PWREx_GetVoltageRange+0x18>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003380:	4618      	mov	r0, r3
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	40007000 	.word	0x40007000

08003390 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800339e:	d130      	bne.n	8003402 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80033a0:	4b23      	ldr	r3, [pc, #140]	; (8003430 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033ac:	d038      	beq.n	8003420 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033ae:	4b20      	ldr	r3, [pc, #128]	; (8003430 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033b6:	4a1e      	ldr	r2, [pc, #120]	; (8003430 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033be:	4b1d      	ldr	r3, [pc, #116]	; (8003434 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2232      	movs	r2, #50	; 0x32
 80033c4:	fb02 f303 	mul.w	r3, r2, r3
 80033c8:	4a1b      	ldr	r2, [pc, #108]	; (8003438 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80033ca:	fba2 2303 	umull	r2, r3, r2, r3
 80033ce:	0c9b      	lsrs	r3, r3, #18
 80033d0:	3301      	adds	r3, #1
 80033d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033d4:	e002      	b.n	80033dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	3b01      	subs	r3, #1
 80033da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033dc:	4b14      	ldr	r3, [pc, #80]	; (8003430 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033e8:	d102      	bne.n	80033f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1f2      	bne.n	80033d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033f0:	4b0f      	ldr	r3, [pc, #60]	; (8003430 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033fc:	d110      	bne.n	8003420 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e00f      	b.n	8003422 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003402:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800340a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800340e:	d007      	beq.n	8003420 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003410:	4b07      	ldr	r3, [pc, #28]	; (8003430 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003418:	4a05      	ldr	r2, [pc, #20]	; (8003430 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800341a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800341e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3714      	adds	r7, #20
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	40007000 	.word	0x40007000
 8003434:	20000000 	.word	0x20000000
 8003438:	431bde83 	.word	0x431bde83

0800343c <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 8003446:	4b11      	ldr	r3, [pc, #68]	; (800348c <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f023 0307 	bic.w	r3, r3, #7
 800344e:	4a0f      	ldr	r2, [pc, #60]	; (800348c <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8003450:	f043 0301 	orr.w	r3, r3, #1
 8003454:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003456:	4b0e      	ldr	r3, [pc, #56]	; (8003490 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	4a0d      	ldr	r2, [pc, #52]	; (8003490 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 800345c:	f043 0304 	orr.w	r3, r3, #4
 8003460:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003462:	79fb      	ldrb	r3, [r7, #7]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003468:	bf30      	wfi
 800346a:	e002      	b.n	8003472 <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800346c:	bf40      	sev
    __WFE();
 800346e:	bf20      	wfe
    __WFE();
 8003470:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003472:	4b07      	ldr	r3, [pc, #28]	; (8003490 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	4a06      	ldr	r2, [pc, #24]	; (8003490 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8003478:	f023 0304 	bic.w	r3, r3, #4
 800347c:	6113      	str	r3, [r2, #16]
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	40007000 	.word	0x40007000
 8003490:	e000ed00 	.word	0xe000ed00

08003494 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b088      	sub	sp, #32
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d102      	bne.n	80034a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	f000 bc02 	b.w	8003cac <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034a8:	4b96      	ldr	r3, [pc, #600]	; (8003704 <HAL_RCC_OscConfig+0x270>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 030c 	and.w	r3, r3, #12
 80034b0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034b2:	4b94      	ldr	r3, [pc, #592]	; (8003704 <HAL_RCC_OscConfig+0x270>)
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0310 	and.w	r3, r3, #16
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 80e4 	beq.w	8003692 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d007      	beq.n	80034e0 <HAL_RCC_OscConfig+0x4c>
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	2b0c      	cmp	r3, #12
 80034d4:	f040 808b 	bne.w	80035ee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	f040 8087 	bne.w	80035ee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034e0:	4b88      	ldr	r3, [pc, #544]	; (8003704 <HAL_RCC_OscConfig+0x270>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d005      	beq.n	80034f8 <HAL_RCC_OscConfig+0x64>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e3d9      	b.n	8003cac <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a1a      	ldr	r2, [r3, #32]
 80034fc:	4b81      	ldr	r3, [pc, #516]	; (8003704 <HAL_RCC_OscConfig+0x270>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0308 	and.w	r3, r3, #8
 8003504:	2b00      	cmp	r3, #0
 8003506:	d004      	beq.n	8003512 <HAL_RCC_OscConfig+0x7e>
 8003508:	4b7e      	ldr	r3, [pc, #504]	; (8003704 <HAL_RCC_OscConfig+0x270>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003510:	e005      	b.n	800351e <HAL_RCC_OscConfig+0x8a>
 8003512:	4b7c      	ldr	r3, [pc, #496]	; (8003704 <HAL_RCC_OscConfig+0x270>)
 8003514:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003518:	091b      	lsrs	r3, r3, #4
 800351a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800351e:	4293      	cmp	r3, r2
 8003520:	d223      	bcs.n	800356a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	4618      	mov	r0, r3
 8003528:	f000 fdbe 	bl	80040a8 <RCC_SetFlashLatencyFromMSIRange>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e3ba      	b.n	8003cac <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003536:	4b73      	ldr	r3, [pc, #460]	; (8003704 <HAL_RCC_OscConfig+0x270>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a72      	ldr	r2, [pc, #456]	; (8003704 <HAL_RCC_OscConfig+0x270>)
 800353c:	f043 0308 	orr.w	r3, r3, #8
 8003540:	6013      	str	r3, [r2, #0]
 8003542:	4b70      	ldr	r3, [pc, #448]	; (8003704 <HAL_RCC_OscConfig+0x270>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	496d      	ldr	r1, [pc, #436]	; (8003704 <HAL_RCC_OscConfig+0x270>)
 8003550:	4313      	orrs	r3, r2
 8003552:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003554:	4b6b      	ldr	r3, [pc, #428]	; (8003704 <HAL_RCC_OscConfig+0x270>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	021b      	lsls	r3, r3, #8
 8003562:	4968      	ldr	r1, [pc, #416]	; (8003704 <HAL_RCC_OscConfig+0x270>)
 8003564:	4313      	orrs	r3, r2
 8003566:	604b      	str	r3, [r1, #4]
 8003568:	e025      	b.n	80035b6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800356a:	4b66      	ldr	r3, [pc, #408]	; (8003704 <HAL_RCC_OscConfig+0x270>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a65      	ldr	r2, [pc, #404]	; (8003704 <HAL_RCC_OscConfig+0x270>)
 8003570:	f043 0308 	orr.w	r3, r3, #8
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	4b63      	ldr	r3, [pc, #396]	; (8003704 <HAL_RCC_OscConfig+0x270>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	4960      	ldr	r1, [pc, #384]	; (8003704 <HAL_RCC_OscConfig+0x270>)
 8003584:	4313      	orrs	r3, r2
 8003586:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003588:	4b5e      	ldr	r3, [pc, #376]	; (8003704 <HAL_RCC_OscConfig+0x270>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	021b      	lsls	r3, r3, #8
 8003596:	495b      	ldr	r1, [pc, #364]	; (8003704 <HAL_RCC_OscConfig+0x270>)
 8003598:	4313      	orrs	r3, r2
 800359a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d109      	bne.n	80035b6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 fd7e 	bl	80040a8 <RCC_SetFlashLatencyFromMSIRange>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e37a      	b.n	8003cac <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035b6:	f000 fc81 	bl	8003ebc <HAL_RCC_GetSysClockFreq>
 80035ba:	4602      	mov	r2, r0
 80035bc:	4b51      	ldr	r3, [pc, #324]	; (8003704 <HAL_RCC_OscConfig+0x270>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	091b      	lsrs	r3, r3, #4
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	4950      	ldr	r1, [pc, #320]	; (8003708 <HAL_RCC_OscConfig+0x274>)
 80035c8:	5ccb      	ldrb	r3, [r1, r3]
 80035ca:	f003 031f 	and.w	r3, r3, #31
 80035ce:	fa22 f303 	lsr.w	r3, r2, r3
 80035d2:	4a4e      	ldr	r2, [pc, #312]	; (800370c <HAL_RCC_OscConfig+0x278>)
 80035d4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80035d6:	4b4e      	ldr	r3, [pc, #312]	; (8003710 <HAL_RCC_OscConfig+0x27c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f7fd fe7e 	bl	80012dc <HAL_InitTick>
 80035e0:	4603      	mov	r3, r0
 80035e2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d052      	beq.n	8003690 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	e35e      	b.n	8003cac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d032      	beq.n	800365c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80035f6:	4b43      	ldr	r3, [pc, #268]	; (8003704 <HAL_RCC_OscConfig+0x270>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a42      	ldr	r2, [pc, #264]	; (8003704 <HAL_RCC_OscConfig+0x270>)
 80035fc:	f043 0301 	orr.w	r3, r3, #1
 8003600:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003602:	f7fd ffd3 	bl	80015ac <HAL_GetTick>
 8003606:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003608:	e008      	b.n	800361c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800360a:	f7fd ffcf 	bl	80015ac <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e347      	b.n	8003cac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800361c:	4b39      	ldr	r3, [pc, #228]	; (8003704 <HAL_RCC_OscConfig+0x270>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0f0      	beq.n	800360a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003628:	4b36      	ldr	r3, [pc, #216]	; (8003704 <HAL_RCC_OscConfig+0x270>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a35      	ldr	r2, [pc, #212]	; (8003704 <HAL_RCC_OscConfig+0x270>)
 800362e:	f043 0308 	orr.w	r3, r3, #8
 8003632:	6013      	str	r3, [r2, #0]
 8003634:	4b33      	ldr	r3, [pc, #204]	; (8003704 <HAL_RCC_OscConfig+0x270>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	4930      	ldr	r1, [pc, #192]	; (8003704 <HAL_RCC_OscConfig+0x270>)
 8003642:	4313      	orrs	r3, r2
 8003644:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003646:	4b2f      	ldr	r3, [pc, #188]	; (8003704 <HAL_RCC_OscConfig+0x270>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	021b      	lsls	r3, r3, #8
 8003654:	492b      	ldr	r1, [pc, #172]	; (8003704 <HAL_RCC_OscConfig+0x270>)
 8003656:	4313      	orrs	r3, r2
 8003658:	604b      	str	r3, [r1, #4]
 800365a:	e01a      	b.n	8003692 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800365c:	4b29      	ldr	r3, [pc, #164]	; (8003704 <HAL_RCC_OscConfig+0x270>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a28      	ldr	r2, [pc, #160]	; (8003704 <HAL_RCC_OscConfig+0x270>)
 8003662:	f023 0301 	bic.w	r3, r3, #1
 8003666:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003668:	f7fd ffa0 	bl	80015ac <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003670:	f7fd ff9c 	bl	80015ac <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e314      	b.n	8003cac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003682:	4b20      	ldr	r3, [pc, #128]	; (8003704 <HAL_RCC_OscConfig+0x270>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f0      	bne.n	8003670 <HAL_RCC_OscConfig+0x1dc>
 800368e:	e000      	b.n	8003692 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003690:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d073      	beq.n	8003786 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	2b08      	cmp	r3, #8
 80036a2:	d005      	beq.n	80036b0 <HAL_RCC_OscConfig+0x21c>
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	2b0c      	cmp	r3, #12
 80036a8:	d10e      	bne.n	80036c8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2b03      	cmp	r3, #3
 80036ae:	d10b      	bne.n	80036c8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b0:	4b14      	ldr	r3, [pc, #80]	; (8003704 <HAL_RCC_OscConfig+0x270>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d063      	beq.n	8003784 <HAL_RCC_OscConfig+0x2f0>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d15f      	bne.n	8003784 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e2f1      	b.n	8003cac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d0:	d106      	bne.n	80036e0 <HAL_RCC_OscConfig+0x24c>
 80036d2:	4b0c      	ldr	r3, [pc, #48]	; (8003704 <HAL_RCC_OscConfig+0x270>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a0b      	ldr	r2, [pc, #44]	; (8003704 <HAL_RCC_OscConfig+0x270>)
 80036d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	e025      	b.n	800372c <HAL_RCC_OscConfig+0x298>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036e8:	d114      	bne.n	8003714 <HAL_RCC_OscConfig+0x280>
 80036ea:	4b06      	ldr	r3, [pc, #24]	; (8003704 <HAL_RCC_OscConfig+0x270>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a05      	ldr	r2, [pc, #20]	; (8003704 <HAL_RCC_OscConfig+0x270>)
 80036f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	4b03      	ldr	r3, [pc, #12]	; (8003704 <HAL_RCC_OscConfig+0x270>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a02      	ldr	r2, [pc, #8]	; (8003704 <HAL_RCC_OscConfig+0x270>)
 80036fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	e013      	b.n	800372c <HAL_RCC_OscConfig+0x298>
 8003704:	40021000 	.word	0x40021000
 8003708:	08010700 	.word	0x08010700
 800370c:	20000000 	.word	0x20000000
 8003710:	20000004 	.word	0x20000004
 8003714:	4ba0      	ldr	r3, [pc, #640]	; (8003998 <HAL_RCC_OscConfig+0x504>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a9f      	ldr	r2, [pc, #636]	; (8003998 <HAL_RCC_OscConfig+0x504>)
 800371a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800371e:	6013      	str	r3, [r2, #0]
 8003720:	4b9d      	ldr	r3, [pc, #628]	; (8003998 <HAL_RCC_OscConfig+0x504>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a9c      	ldr	r2, [pc, #624]	; (8003998 <HAL_RCC_OscConfig+0x504>)
 8003726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800372a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d013      	beq.n	800375c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003734:	f7fd ff3a 	bl	80015ac <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800373c:	f7fd ff36 	bl	80015ac <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b64      	cmp	r3, #100	; 0x64
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e2ae      	b.n	8003cac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800374e:	4b92      	ldr	r3, [pc, #584]	; (8003998 <HAL_RCC_OscConfig+0x504>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d0f0      	beq.n	800373c <HAL_RCC_OscConfig+0x2a8>
 800375a:	e014      	b.n	8003786 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375c:	f7fd ff26 	bl	80015ac <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003764:	f7fd ff22 	bl	80015ac <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b64      	cmp	r3, #100	; 0x64
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e29a      	b.n	8003cac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003776:	4b88      	ldr	r3, [pc, #544]	; (8003998 <HAL_RCC_OscConfig+0x504>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1f0      	bne.n	8003764 <HAL_RCC_OscConfig+0x2d0>
 8003782:	e000      	b.n	8003786 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d060      	beq.n	8003854 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	2b04      	cmp	r3, #4
 8003796:	d005      	beq.n	80037a4 <HAL_RCC_OscConfig+0x310>
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	2b0c      	cmp	r3, #12
 800379c:	d119      	bne.n	80037d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d116      	bne.n	80037d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037a4:	4b7c      	ldr	r3, [pc, #496]	; (8003998 <HAL_RCC_OscConfig+0x504>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d005      	beq.n	80037bc <HAL_RCC_OscConfig+0x328>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e277      	b.n	8003cac <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037bc:	4b76      	ldr	r3, [pc, #472]	; (8003998 <HAL_RCC_OscConfig+0x504>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	061b      	lsls	r3, r3, #24
 80037ca:	4973      	ldr	r1, [pc, #460]	; (8003998 <HAL_RCC_OscConfig+0x504>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037d0:	e040      	b.n	8003854 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d023      	beq.n	8003822 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037da:	4b6f      	ldr	r3, [pc, #444]	; (8003998 <HAL_RCC_OscConfig+0x504>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a6e      	ldr	r2, [pc, #440]	; (8003998 <HAL_RCC_OscConfig+0x504>)
 80037e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e6:	f7fd fee1 	bl	80015ac <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037ec:	e008      	b.n	8003800 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ee:	f7fd fedd 	bl	80015ac <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e255      	b.n	8003cac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003800:	4b65      	ldr	r3, [pc, #404]	; (8003998 <HAL_RCC_OscConfig+0x504>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0f0      	beq.n	80037ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800380c:	4b62      	ldr	r3, [pc, #392]	; (8003998 <HAL_RCC_OscConfig+0x504>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	061b      	lsls	r3, r3, #24
 800381a:	495f      	ldr	r1, [pc, #380]	; (8003998 <HAL_RCC_OscConfig+0x504>)
 800381c:	4313      	orrs	r3, r2
 800381e:	604b      	str	r3, [r1, #4]
 8003820:	e018      	b.n	8003854 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003822:	4b5d      	ldr	r3, [pc, #372]	; (8003998 <HAL_RCC_OscConfig+0x504>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a5c      	ldr	r2, [pc, #368]	; (8003998 <HAL_RCC_OscConfig+0x504>)
 8003828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800382c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382e:	f7fd febd 	bl	80015ac <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003834:	e008      	b.n	8003848 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003836:	f7fd feb9 	bl	80015ac <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e231      	b.n	8003cac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003848:	4b53      	ldr	r3, [pc, #332]	; (8003998 <HAL_RCC_OscConfig+0x504>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1f0      	bne.n	8003836 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0308 	and.w	r3, r3, #8
 800385c:	2b00      	cmp	r3, #0
 800385e:	d03c      	beq.n	80038da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d01c      	beq.n	80038a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003868:	4b4b      	ldr	r3, [pc, #300]	; (8003998 <HAL_RCC_OscConfig+0x504>)
 800386a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800386e:	4a4a      	ldr	r2, [pc, #296]	; (8003998 <HAL_RCC_OscConfig+0x504>)
 8003870:	f043 0301 	orr.w	r3, r3, #1
 8003874:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003878:	f7fd fe98 	bl	80015ac <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003880:	f7fd fe94 	bl	80015ac <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e20c      	b.n	8003cac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003892:	4b41      	ldr	r3, [pc, #260]	; (8003998 <HAL_RCC_OscConfig+0x504>)
 8003894:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0ef      	beq.n	8003880 <HAL_RCC_OscConfig+0x3ec>
 80038a0:	e01b      	b.n	80038da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038a2:	4b3d      	ldr	r3, [pc, #244]	; (8003998 <HAL_RCC_OscConfig+0x504>)
 80038a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038a8:	4a3b      	ldr	r2, [pc, #236]	; (8003998 <HAL_RCC_OscConfig+0x504>)
 80038aa:	f023 0301 	bic.w	r3, r3, #1
 80038ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b2:	f7fd fe7b 	bl	80015ac <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038ba:	f7fd fe77 	bl	80015ac <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e1ef      	b.n	8003cac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038cc:	4b32      	ldr	r3, [pc, #200]	; (8003998 <HAL_RCC_OscConfig+0x504>)
 80038ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1ef      	bne.n	80038ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0304 	and.w	r3, r3, #4
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 80a6 	beq.w	8003a34 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038e8:	2300      	movs	r3, #0
 80038ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80038ec:	4b2a      	ldr	r3, [pc, #168]	; (8003998 <HAL_RCC_OscConfig+0x504>)
 80038ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10d      	bne.n	8003914 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038f8:	4b27      	ldr	r3, [pc, #156]	; (8003998 <HAL_RCC_OscConfig+0x504>)
 80038fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fc:	4a26      	ldr	r2, [pc, #152]	; (8003998 <HAL_RCC_OscConfig+0x504>)
 80038fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003902:	6593      	str	r3, [r2, #88]	; 0x58
 8003904:	4b24      	ldr	r3, [pc, #144]	; (8003998 <HAL_RCC_OscConfig+0x504>)
 8003906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800390c:	60bb      	str	r3, [r7, #8]
 800390e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003910:	2301      	movs	r3, #1
 8003912:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003914:	4b21      	ldr	r3, [pc, #132]	; (800399c <HAL_RCC_OscConfig+0x508>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391c:	2b00      	cmp	r3, #0
 800391e:	d118      	bne.n	8003952 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003920:	4b1e      	ldr	r3, [pc, #120]	; (800399c <HAL_RCC_OscConfig+0x508>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a1d      	ldr	r2, [pc, #116]	; (800399c <HAL_RCC_OscConfig+0x508>)
 8003926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800392a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800392c:	f7fd fe3e 	bl	80015ac <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003934:	f7fd fe3a 	bl	80015ac <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e1b2      	b.n	8003cac <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003946:	4b15      	ldr	r3, [pc, #84]	; (800399c <HAL_RCC_OscConfig+0x508>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394e:	2b00      	cmp	r3, #0
 8003950:	d0f0      	beq.n	8003934 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d108      	bne.n	800396c <HAL_RCC_OscConfig+0x4d8>
 800395a:	4b0f      	ldr	r3, [pc, #60]	; (8003998 <HAL_RCC_OscConfig+0x504>)
 800395c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003960:	4a0d      	ldr	r2, [pc, #52]	; (8003998 <HAL_RCC_OscConfig+0x504>)
 8003962:	f043 0301 	orr.w	r3, r3, #1
 8003966:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800396a:	e029      	b.n	80039c0 <HAL_RCC_OscConfig+0x52c>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	2b05      	cmp	r3, #5
 8003972:	d115      	bne.n	80039a0 <HAL_RCC_OscConfig+0x50c>
 8003974:	4b08      	ldr	r3, [pc, #32]	; (8003998 <HAL_RCC_OscConfig+0x504>)
 8003976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397a:	4a07      	ldr	r2, [pc, #28]	; (8003998 <HAL_RCC_OscConfig+0x504>)
 800397c:	f043 0304 	orr.w	r3, r3, #4
 8003980:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003984:	4b04      	ldr	r3, [pc, #16]	; (8003998 <HAL_RCC_OscConfig+0x504>)
 8003986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398a:	4a03      	ldr	r2, [pc, #12]	; (8003998 <HAL_RCC_OscConfig+0x504>)
 800398c:	f043 0301 	orr.w	r3, r3, #1
 8003990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003994:	e014      	b.n	80039c0 <HAL_RCC_OscConfig+0x52c>
 8003996:	bf00      	nop
 8003998:	40021000 	.word	0x40021000
 800399c:	40007000 	.word	0x40007000
 80039a0:	4b9a      	ldr	r3, [pc, #616]	; (8003c0c <HAL_RCC_OscConfig+0x778>)
 80039a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a6:	4a99      	ldr	r2, [pc, #612]	; (8003c0c <HAL_RCC_OscConfig+0x778>)
 80039a8:	f023 0301 	bic.w	r3, r3, #1
 80039ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039b0:	4b96      	ldr	r3, [pc, #600]	; (8003c0c <HAL_RCC_OscConfig+0x778>)
 80039b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b6:	4a95      	ldr	r2, [pc, #596]	; (8003c0c <HAL_RCC_OscConfig+0x778>)
 80039b8:	f023 0304 	bic.w	r3, r3, #4
 80039bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d016      	beq.n	80039f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c8:	f7fd fdf0 	bl	80015ac <HAL_GetTick>
 80039cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039ce:	e00a      	b.n	80039e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039d0:	f7fd fdec 	bl	80015ac <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	f241 3288 	movw	r2, #5000	; 0x1388
 80039de:	4293      	cmp	r3, r2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e162      	b.n	8003cac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039e6:	4b89      	ldr	r3, [pc, #548]	; (8003c0c <HAL_RCC_OscConfig+0x778>)
 80039e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0ed      	beq.n	80039d0 <HAL_RCC_OscConfig+0x53c>
 80039f4:	e015      	b.n	8003a22 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f6:	f7fd fdd9 	bl	80015ac <HAL_GetTick>
 80039fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039fc:	e00a      	b.n	8003a14 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039fe:	f7fd fdd5 	bl	80015ac <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e14b      	b.n	8003cac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a14:	4b7d      	ldr	r3, [pc, #500]	; (8003c0c <HAL_RCC_OscConfig+0x778>)
 8003a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1ed      	bne.n	80039fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a22:	7ffb      	ldrb	r3, [r7, #31]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d105      	bne.n	8003a34 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a28:	4b78      	ldr	r3, [pc, #480]	; (8003c0c <HAL_RCC_OscConfig+0x778>)
 8003a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2c:	4a77      	ldr	r2, [pc, #476]	; (8003c0c <HAL_RCC_OscConfig+0x778>)
 8003a2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a32:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0320 	and.w	r3, r3, #32
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d03c      	beq.n	8003aba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d01c      	beq.n	8003a82 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a48:	4b70      	ldr	r3, [pc, #448]	; (8003c0c <HAL_RCC_OscConfig+0x778>)
 8003a4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a4e:	4a6f      	ldr	r2, [pc, #444]	; (8003c0c <HAL_RCC_OscConfig+0x778>)
 8003a50:	f043 0301 	orr.w	r3, r3, #1
 8003a54:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a58:	f7fd fda8 	bl	80015ac <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a60:	f7fd fda4 	bl	80015ac <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e11c      	b.n	8003cac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a72:	4b66      	ldr	r3, [pc, #408]	; (8003c0c <HAL_RCC_OscConfig+0x778>)
 8003a74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0ef      	beq.n	8003a60 <HAL_RCC_OscConfig+0x5cc>
 8003a80:	e01b      	b.n	8003aba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a82:	4b62      	ldr	r3, [pc, #392]	; (8003c0c <HAL_RCC_OscConfig+0x778>)
 8003a84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a88:	4a60      	ldr	r2, [pc, #384]	; (8003c0c <HAL_RCC_OscConfig+0x778>)
 8003a8a:	f023 0301 	bic.w	r3, r3, #1
 8003a8e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a92:	f7fd fd8b 	bl	80015ac <HAL_GetTick>
 8003a96:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a98:	e008      	b.n	8003aac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a9a:	f7fd fd87 	bl	80015ac <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e0ff      	b.n	8003cac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003aac:	4b57      	ldr	r3, [pc, #348]	; (8003c0c <HAL_RCC_OscConfig+0x778>)
 8003aae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1ef      	bne.n	8003a9a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 80f3 	beq.w	8003caa <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	f040 80c9 	bne.w	8003c60 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ace:	4b4f      	ldr	r3, [pc, #316]	; (8003c0c <HAL_RCC_OscConfig+0x778>)
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f003 0203 	and.w	r2, r3, #3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d12c      	bne.n	8003b3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aec:	3b01      	subs	r3, #1
 8003aee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d123      	bne.n	8003b3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003afe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d11b      	bne.n	8003b3c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d113      	bne.n	8003b3c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1e:	085b      	lsrs	r3, r3, #1
 8003b20:	3b01      	subs	r3, #1
 8003b22:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d109      	bne.n	8003b3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	085b      	lsrs	r3, r3, #1
 8003b34:	3b01      	subs	r3, #1
 8003b36:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d06b      	beq.n	8003c14 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	2b0c      	cmp	r3, #12
 8003b40:	d062      	beq.n	8003c08 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003b42:	4b32      	ldr	r3, [pc, #200]	; (8003c0c <HAL_RCC_OscConfig+0x778>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e0ac      	b.n	8003cac <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b52:	4b2e      	ldr	r3, [pc, #184]	; (8003c0c <HAL_RCC_OscConfig+0x778>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a2d      	ldr	r2, [pc, #180]	; (8003c0c <HAL_RCC_OscConfig+0x778>)
 8003b58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b5c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b5e:	f7fd fd25 	bl	80015ac <HAL_GetTick>
 8003b62:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b64:	e008      	b.n	8003b78 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b66:	f7fd fd21 	bl	80015ac <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e099      	b.n	8003cac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b78:	4b24      	ldr	r3, [pc, #144]	; (8003c0c <HAL_RCC_OscConfig+0x778>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1f0      	bne.n	8003b66 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b84:	4b21      	ldr	r3, [pc, #132]	; (8003c0c <HAL_RCC_OscConfig+0x778>)
 8003b86:	68da      	ldr	r2, [r3, #12]
 8003b88:	4b21      	ldr	r3, [pc, #132]	; (8003c10 <HAL_RCC_OscConfig+0x77c>)
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b94:	3a01      	subs	r2, #1
 8003b96:	0112      	lsls	r2, r2, #4
 8003b98:	4311      	orrs	r1, r2
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b9e:	0212      	lsls	r2, r2, #8
 8003ba0:	4311      	orrs	r1, r2
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ba6:	0852      	lsrs	r2, r2, #1
 8003ba8:	3a01      	subs	r2, #1
 8003baa:	0552      	lsls	r2, r2, #21
 8003bac:	4311      	orrs	r1, r2
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003bb2:	0852      	lsrs	r2, r2, #1
 8003bb4:	3a01      	subs	r2, #1
 8003bb6:	0652      	lsls	r2, r2, #25
 8003bb8:	4311      	orrs	r1, r2
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bbe:	06d2      	lsls	r2, r2, #27
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	4912      	ldr	r1, [pc, #72]	; (8003c0c <HAL_RCC_OscConfig+0x778>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003bc8:	4b10      	ldr	r3, [pc, #64]	; (8003c0c <HAL_RCC_OscConfig+0x778>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a0f      	ldr	r2, [pc, #60]	; (8003c0c <HAL_RCC_OscConfig+0x778>)
 8003bce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bd2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bd4:	4b0d      	ldr	r3, [pc, #52]	; (8003c0c <HAL_RCC_OscConfig+0x778>)
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	4a0c      	ldr	r2, [pc, #48]	; (8003c0c <HAL_RCC_OscConfig+0x778>)
 8003bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bde:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003be0:	f7fd fce4 	bl	80015ac <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be8:	f7fd fce0 	bl	80015ac <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e058      	b.n	8003cac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bfa:	4b04      	ldr	r3, [pc, #16]	; (8003c0c <HAL_RCC_OscConfig+0x778>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d0f0      	beq.n	8003be8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c06:	e050      	b.n	8003caa <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e04f      	b.n	8003cac <HAL_RCC_OscConfig+0x818>
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c14:	4b27      	ldr	r3, [pc, #156]	; (8003cb4 <HAL_RCC_OscConfig+0x820>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d144      	bne.n	8003caa <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c20:	4b24      	ldr	r3, [pc, #144]	; (8003cb4 <HAL_RCC_OscConfig+0x820>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a23      	ldr	r2, [pc, #140]	; (8003cb4 <HAL_RCC_OscConfig+0x820>)
 8003c26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c2a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c2c:	4b21      	ldr	r3, [pc, #132]	; (8003cb4 <HAL_RCC_OscConfig+0x820>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	4a20      	ldr	r2, [pc, #128]	; (8003cb4 <HAL_RCC_OscConfig+0x820>)
 8003c32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c36:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c38:	f7fd fcb8 	bl	80015ac <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c40:	f7fd fcb4 	bl	80015ac <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e02c      	b.n	8003cac <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c52:	4b18      	ldr	r3, [pc, #96]	; (8003cb4 <HAL_RCC_OscConfig+0x820>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d0f0      	beq.n	8003c40 <HAL_RCC_OscConfig+0x7ac>
 8003c5e:	e024      	b.n	8003caa <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	2b0c      	cmp	r3, #12
 8003c64:	d01f      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c66:	4b13      	ldr	r3, [pc, #76]	; (8003cb4 <HAL_RCC_OscConfig+0x820>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a12      	ldr	r2, [pc, #72]	; (8003cb4 <HAL_RCC_OscConfig+0x820>)
 8003c6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c72:	f7fd fc9b 	bl	80015ac <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c78:	e008      	b.n	8003c8c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c7a:	f7fd fc97 	bl	80015ac <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d901      	bls.n	8003c8c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e00f      	b.n	8003cac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c8c:	4b09      	ldr	r3, [pc, #36]	; (8003cb4 <HAL_RCC_OscConfig+0x820>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1f0      	bne.n	8003c7a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003c98:	4b06      	ldr	r3, [pc, #24]	; (8003cb4 <HAL_RCC_OscConfig+0x820>)
 8003c9a:	68da      	ldr	r2, [r3, #12]
 8003c9c:	4905      	ldr	r1, [pc, #20]	; (8003cb4 <HAL_RCC_OscConfig+0x820>)
 8003c9e:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <HAL_RCC_OscConfig+0x824>)
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	60cb      	str	r3, [r1, #12]
 8003ca4:	e001      	b.n	8003caa <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e000      	b.n	8003cac <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3720      	adds	r7, #32
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	feeefffc 	.word	0xfeeefffc

08003cbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d101      	bne.n	8003cd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e0e7      	b.n	8003ea0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cd0:	4b75      	ldr	r3, [pc, #468]	; (8003ea8 <HAL_RCC_ClockConfig+0x1ec>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d910      	bls.n	8003d00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cde:	4b72      	ldr	r3, [pc, #456]	; (8003ea8 <HAL_RCC_ClockConfig+0x1ec>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f023 0207 	bic.w	r2, r3, #7
 8003ce6:	4970      	ldr	r1, [pc, #448]	; (8003ea8 <HAL_RCC_ClockConfig+0x1ec>)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cee:	4b6e      	ldr	r3, [pc, #440]	; (8003ea8 <HAL_RCC_ClockConfig+0x1ec>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0307 	and.w	r3, r3, #7
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d001      	beq.n	8003d00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e0cf      	b.n	8003ea0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d010      	beq.n	8003d2e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	4b66      	ldr	r3, [pc, #408]	; (8003eac <HAL_RCC_ClockConfig+0x1f0>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d908      	bls.n	8003d2e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d1c:	4b63      	ldr	r3, [pc, #396]	; (8003eac <HAL_RCC_ClockConfig+0x1f0>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	4960      	ldr	r1, [pc, #384]	; (8003eac <HAL_RCC_ClockConfig+0x1f0>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d04c      	beq.n	8003dd4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b03      	cmp	r3, #3
 8003d40:	d107      	bne.n	8003d52 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d42:	4b5a      	ldr	r3, [pc, #360]	; (8003eac <HAL_RCC_ClockConfig+0x1f0>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d121      	bne.n	8003d92 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e0a6      	b.n	8003ea0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d107      	bne.n	8003d6a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d5a:	4b54      	ldr	r3, [pc, #336]	; (8003eac <HAL_RCC_ClockConfig+0x1f0>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d115      	bne.n	8003d92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e09a      	b.n	8003ea0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d107      	bne.n	8003d82 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d72:	4b4e      	ldr	r3, [pc, #312]	; (8003eac <HAL_RCC_ClockConfig+0x1f0>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d109      	bne.n	8003d92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e08e      	b.n	8003ea0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d82:	4b4a      	ldr	r3, [pc, #296]	; (8003eac <HAL_RCC_ClockConfig+0x1f0>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e086      	b.n	8003ea0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d92:	4b46      	ldr	r3, [pc, #280]	; (8003eac <HAL_RCC_ClockConfig+0x1f0>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f023 0203 	bic.w	r2, r3, #3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	4943      	ldr	r1, [pc, #268]	; (8003eac <HAL_RCC_ClockConfig+0x1f0>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003da4:	f7fd fc02 	bl	80015ac <HAL_GetTick>
 8003da8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003daa:	e00a      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dac:	f7fd fbfe 	bl	80015ac <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e06e      	b.n	8003ea0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dc2:	4b3a      	ldr	r3, [pc, #232]	; (8003eac <HAL_RCC_ClockConfig+0x1f0>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f003 020c 	and.w	r2, r3, #12
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d1eb      	bne.n	8003dac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d010      	beq.n	8003e02 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	4b31      	ldr	r3, [pc, #196]	; (8003eac <HAL_RCC_ClockConfig+0x1f0>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d208      	bcs.n	8003e02 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003df0:	4b2e      	ldr	r3, [pc, #184]	; (8003eac <HAL_RCC_ClockConfig+0x1f0>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	492b      	ldr	r1, [pc, #172]	; (8003eac <HAL_RCC_ClockConfig+0x1f0>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e02:	4b29      	ldr	r3, [pc, #164]	; (8003ea8 <HAL_RCC_ClockConfig+0x1ec>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0307 	and.w	r3, r3, #7
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d210      	bcs.n	8003e32 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e10:	4b25      	ldr	r3, [pc, #148]	; (8003ea8 <HAL_RCC_ClockConfig+0x1ec>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f023 0207 	bic.w	r2, r3, #7
 8003e18:	4923      	ldr	r1, [pc, #140]	; (8003ea8 <HAL_RCC_ClockConfig+0x1ec>)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e20:	4b21      	ldr	r3, [pc, #132]	; (8003ea8 <HAL_RCC_ClockConfig+0x1ec>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d001      	beq.n	8003e32 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e036      	b.n	8003ea0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0304 	and.w	r3, r3, #4
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d008      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e3e:	4b1b      	ldr	r3, [pc, #108]	; (8003eac <HAL_RCC_ClockConfig+0x1f0>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	4918      	ldr	r1, [pc, #96]	; (8003eac <HAL_RCC_ClockConfig+0x1f0>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d009      	beq.n	8003e70 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e5c:	4b13      	ldr	r3, [pc, #76]	; (8003eac <HAL_RCC_ClockConfig+0x1f0>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	4910      	ldr	r1, [pc, #64]	; (8003eac <HAL_RCC_ClockConfig+0x1f0>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e70:	f000 f824 	bl	8003ebc <HAL_RCC_GetSysClockFreq>
 8003e74:	4602      	mov	r2, r0
 8003e76:	4b0d      	ldr	r3, [pc, #52]	; (8003eac <HAL_RCC_ClockConfig+0x1f0>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	091b      	lsrs	r3, r3, #4
 8003e7c:	f003 030f 	and.w	r3, r3, #15
 8003e80:	490b      	ldr	r1, [pc, #44]	; (8003eb0 <HAL_RCC_ClockConfig+0x1f4>)
 8003e82:	5ccb      	ldrb	r3, [r1, r3]
 8003e84:	f003 031f 	and.w	r3, r3, #31
 8003e88:	fa22 f303 	lsr.w	r3, r2, r3
 8003e8c:	4a09      	ldr	r2, [pc, #36]	; (8003eb4 <HAL_RCC_ClockConfig+0x1f8>)
 8003e8e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e90:	4b09      	ldr	r3, [pc, #36]	; (8003eb8 <HAL_RCC_ClockConfig+0x1fc>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7fd fa21 	bl	80012dc <HAL_InitTick>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e9e:	7afb      	ldrb	r3, [r7, #11]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	40022000 	.word	0x40022000
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	08010700 	.word	0x08010700
 8003eb4:	20000000 	.word	0x20000000
 8003eb8:	20000004 	.word	0x20000004

08003ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b089      	sub	sp, #36	; 0x24
 8003ec0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61fb      	str	r3, [r7, #28]
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eca:	4b3e      	ldr	r3, [pc, #248]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 030c 	and.w	r3, r3, #12
 8003ed2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ed4:	4b3b      	ldr	r3, [pc, #236]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f003 0303 	and.w	r3, r3, #3
 8003edc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d005      	beq.n	8003ef0 <HAL_RCC_GetSysClockFreq+0x34>
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	2b0c      	cmp	r3, #12
 8003ee8:	d121      	bne.n	8003f2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d11e      	bne.n	8003f2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ef0:	4b34      	ldr	r3, [pc, #208]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0308 	and.w	r3, r3, #8
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d107      	bne.n	8003f0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003efc:	4b31      	ldr	r3, [pc, #196]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f02:	0a1b      	lsrs	r3, r3, #8
 8003f04:	f003 030f 	and.w	r3, r3, #15
 8003f08:	61fb      	str	r3, [r7, #28]
 8003f0a:	e005      	b.n	8003f18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f0c:	4b2d      	ldr	r3, [pc, #180]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	091b      	lsrs	r3, r3, #4
 8003f12:	f003 030f 	and.w	r3, r3, #15
 8003f16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f18:	4a2b      	ldr	r2, [pc, #172]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10d      	bne.n	8003f44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f2c:	e00a      	b.n	8003f44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	2b04      	cmp	r3, #4
 8003f32:	d102      	bne.n	8003f3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f34:	4b25      	ldr	r3, [pc, #148]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x110>)
 8003f36:	61bb      	str	r3, [r7, #24]
 8003f38:	e004      	b.n	8003f44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d101      	bne.n	8003f44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f40:	4b23      	ldr	r3, [pc, #140]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	2b0c      	cmp	r3, #12
 8003f48:	d134      	bne.n	8003fb4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f4a:	4b1e      	ldr	r3, [pc, #120]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f003 0303 	and.w	r3, r3, #3
 8003f52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d003      	beq.n	8003f62 <HAL_RCC_GetSysClockFreq+0xa6>
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	2b03      	cmp	r3, #3
 8003f5e:	d003      	beq.n	8003f68 <HAL_RCC_GetSysClockFreq+0xac>
 8003f60:	e005      	b.n	8003f6e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f62:	4b1a      	ldr	r3, [pc, #104]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x110>)
 8003f64:	617b      	str	r3, [r7, #20]
      break;
 8003f66:	e005      	b.n	8003f74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f68:	4b19      	ldr	r3, [pc, #100]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f6a:	617b      	str	r3, [r7, #20]
      break;
 8003f6c:	e002      	b.n	8003f74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	617b      	str	r3, [r7, #20]
      break;
 8003f72:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f74:	4b13      	ldr	r3, [pc, #76]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	091b      	lsrs	r3, r3, #4
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	3301      	adds	r3, #1
 8003f80:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f82:	4b10      	ldr	r3, [pc, #64]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	0a1b      	lsrs	r3, r3, #8
 8003f88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	fb03 f202 	mul.w	r2, r3, r2
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f98:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f9a:	4b0a      	ldr	r3, [pc, #40]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	0e5b      	lsrs	r3, r3, #25
 8003fa0:	f003 0303 	and.w	r3, r3, #3
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003fb4:	69bb      	ldr	r3, [r7, #24]
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3724      	adds	r7, #36	; 0x24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	08010718 	.word	0x08010718
 8003fcc:	00f42400 	.word	0x00f42400
 8003fd0:	007a1200 	.word	0x007a1200

08003fd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fd8:	4b03      	ldr	r3, [pc, #12]	; (8003fe8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fda:	681b      	ldr	r3, [r3, #0]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	20000000 	.word	0x20000000

08003fec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ff0:	f7ff fff0 	bl	8003fd4 <HAL_RCC_GetHCLKFreq>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	4b06      	ldr	r3, [pc, #24]	; (8004010 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	0a1b      	lsrs	r3, r3, #8
 8003ffc:	f003 0307 	and.w	r3, r3, #7
 8004000:	4904      	ldr	r1, [pc, #16]	; (8004014 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004002:	5ccb      	ldrb	r3, [r1, r3]
 8004004:	f003 031f 	and.w	r3, r3, #31
 8004008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800400c:	4618      	mov	r0, r3
 800400e:	bd80      	pop	{r7, pc}
 8004010:	40021000 	.word	0x40021000
 8004014:	08010710 	.word	0x08010710

08004018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800401c:	f7ff ffda 	bl	8003fd4 <HAL_RCC_GetHCLKFreq>
 8004020:	4602      	mov	r2, r0
 8004022:	4b06      	ldr	r3, [pc, #24]	; (800403c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	0adb      	lsrs	r3, r3, #11
 8004028:	f003 0307 	and.w	r3, r3, #7
 800402c:	4904      	ldr	r1, [pc, #16]	; (8004040 <HAL_RCC_GetPCLK2Freq+0x28>)
 800402e:	5ccb      	ldrb	r3, [r1, r3]
 8004030:	f003 031f 	and.w	r3, r3, #31
 8004034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004038:	4618      	mov	r0, r3
 800403a:	bd80      	pop	{r7, pc}
 800403c:	40021000 	.word	0x40021000
 8004040:	08010710 	.word	0x08010710

08004044 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	220f      	movs	r2, #15
 8004052:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004054:	4b12      	ldr	r3, [pc, #72]	; (80040a0 <HAL_RCC_GetClockConfig+0x5c>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f003 0203 	and.w	r2, r3, #3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004060:	4b0f      	ldr	r3, [pc, #60]	; (80040a0 <HAL_RCC_GetClockConfig+0x5c>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800406c:	4b0c      	ldr	r3, [pc, #48]	; (80040a0 <HAL_RCC_GetClockConfig+0x5c>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004078:	4b09      	ldr	r3, [pc, #36]	; (80040a0 <HAL_RCC_GetClockConfig+0x5c>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	08db      	lsrs	r3, r3, #3
 800407e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004086:	4b07      	ldr	r3, [pc, #28]	; (80040a4 <HAL_RCC_GetClockConfig+0x60>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0207 	and.w	r2, r3, #7
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	601a      	str	r2, [r3, #0]
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	40021000 	.word	0x40021000
 80040a4:	40022000 	.word	0x40022000

080040a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80040b0:	2300      	movs	r3, #0
 80040b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80040b4:	4b2a      	ldr	r3, [pc, #168]	; (8004160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80040c0:	f7ff f958 	bl	8003374 <HAL_PWREx_GetVoltageRange>
 80040c4:	6178      	str	r0, [r7, #20]
 80040c6:	e014      	b.n	80040f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80040c8:	4b25      	ldr	r3, [pc, #148]	; (8004160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040cc:	4a24      	ldr	r2, [pc, #144]	; (8004160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040d2:	6593      	str	r3, [r2, #88]	; 0x58
 80040d4:	4b22      	ldr	r3, [pc, #136]	; (8004160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040dc:	60fb      	str	r3, [r7, #12]
 80040de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80040e0:	f7ff f948 	bl	8003374 <HAL_PWREx_GetVoltageRange>
 80040e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80040e6:	4b1e      	ldr	r3, [pc, #120]	; (8004160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ea:	4a1d      	ldr	r2, [pc, #116]	; (8004160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040f8:	d10b      	bne.n	8004112 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2b80      	cmp	r3, #128	; 0x80
 80040fe:	d919      	bls.n	8004134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2ba0      	cmp	r3, #160	; 0xa0
 8004104:	d902      	bls.n	800410c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004106:	2302      	movs	r3, #2
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	e013      	b.n	8004134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800410c:	2301      	movs	r3, #1
 800410e:	613b      	str	r3, [r7, #16]
 8004110:	e010      	b.n	8004134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b80      	cmp	r3, #128	; 0x80
 8004116:	d902      	bls.n	800411e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004118:	2303      	movs	r3, #3
 800411a:	613b      	str	r3, [r7, #16]
 800411c:	e00a      	b.n	8004134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b80      	cmp	r3, #128	; 0x80
 8004122:	d102      	bne.n	800412a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004124:	2302      	movs	r3, #2
 8004126:	613b      	str	r3, [r7, #16]
 8004128:	e004      	b.n	8004134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b70      	cmp	r3, #112	; 0x70
 800412e:	d101      	bne.n	8004134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004130:	2301      	movs	r3, #1
 8004132:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004134:	4b0b      	ldr	r3, [pc, #44]	; (8004164 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f023 0207 	bic.w	r2, r3, #7
 800413c:	4909      	ldr	r1, [pc, #36]	; (8004164 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	4313      	orrs	r3, r2
 8004142:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004144:	4b07      	ldr	r3, [pc, #28]	; (8004164 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0307 	and.w	r3, r3, #7
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	429a      	cmp	r2, r3
 8004150:	d001      	beq.n	8004156 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e000      	b.n	8004158 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3718      	adds	r7, #24
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	40021000 	.word	0x40021000
 8004164:	40022000 	.word	0x40022000

08004168 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004170:	2300      	movs	r3, #0
 8004172:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004174:	2300      	movs	r3, #0
 8004176:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004180:	2b00      	cmp	r3, #0
 8004182:	d031      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004188:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800418c:	d01a      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800418e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004192:	d814      	bhi.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004194:	2b00      	cmp	r3, #0
 8004196:	d009      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004198:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800419c:	d10f      	bne.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800419e:	4b5d      	ldr	r3, [pc, #372]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	4a5c      	ldr	r2, [pc, #368]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041a8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041aa:	e00c      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3304      	adds	r3, #4
 80041b0:	2100      	movs	r1, #0
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 fa54 	bl	8004660 <RCCEx_PLLSAI1_Config>
 80041b8:	4603      	mov	r3, r0
 80041ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041bc:	e003      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	74fb      	strb	r3, [r7, #19]
      break;
 80041c2:	e000      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80041c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041c6:	7cfb      	ldrb	r3, [r7, #19]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10b      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041cc:	4b51      	ldr	r3, [pc, #324]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041da:	494e      	ldr	r1, [pc, #312]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80041e2:	e001      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e4:	7cfb      	ldrb	r3, [r7, #19]
 80041e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f000 809e 	beq.w	8004332 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041f6:	2300      	movs	r3, #0
 80041f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041fa:	4b46      	ldr	r3, [pc, #280]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004206:	2301      	movs	r3, #1
 8004208:	e000      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800420a:	2300      	movs	r3, #0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00d      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004210:	4b40      	ldr	r3, [pc, #256]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004214:	4a3f      	ldr	r2, [pc, #252]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800421a:	6593      	str	r3, [r2, #88]	; 0x58
 800421c:	4b3d      	ldr	r3, [pc, #244]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800421e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004224:	60bb      	str	r3, [r7, #8]
 8004226:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004228:	2301      	movs	r3, #1
 800422a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800422c:	4b3a      	ldr	r3, [pc, #232]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a39      	ldr	r2, [pc, #228]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004236:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004238:	f7fd f9b8 	bl	80015ac <HAL_GetTick>
 800423c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800423e:	e009      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004240:	f7fd f9b4 	bl	80015ac <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d902      	bls.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	74fb      	strb	r3, [r7, #19]
        break;
 8004252:	e005      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004254:	4b30      	ldr	r3, [pc, #192]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425c:	2b00      	cmp	r3, #0
 800425e:	d0ef      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004260:	7cfb      	ldrb	r3, [r7, #19]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d15a      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004266:	4b2b      	ldr	r3, [pc, #172]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004270:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d01e      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	429a      	cmp	r2, r3
 8004280:	d019      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004282:	4b24      	ldr	r3, [pc, #144]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800428c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800428e:	4b21      	ldr	r3, [pc, #132]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004294:	4a1f      	ldr	r2, [pc, #124]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800429a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800429e:	4b1d      	ldr	r3, [pc, #116]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a4:	4a1b      	ldr	r2, [pc, #108]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042ae:	4a19      	ldr	r2, [pc, #100]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d016      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c0:	f7fd f974 	bl	80015ac <HAL_GetTick>
 80042c4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042c6:	e00b      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042c8:	f7fd f970 	bl	80015ac <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d902      	bls.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	74fb      	strb	r3, [r7, #19]
            break;
 80042de:	e006      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042e0:	4b0c      	ldr	r3, [pc, #48]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0ec      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80042ee:	7cfb      	ldrb	r3, [r7, #19]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10b      	bne.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042f4:	4b07      	ldr	r3, [pc, #28]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004302:	4904      	ldr	r1, [pc, #16]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004304:	4313      	orrs	r3, r2
 8004306:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800430a:	e009      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800430c:	7cfb      	ldrb	r3, [r7, #19]
 800430e:	74bb      	strb	r3, [r7, #18]
 8004310:	e006      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004312:	bf00      	nop
 8004314:	40021000 	.word	0x40021000
 8004318:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800431c:	7cfb      	ldrb	r3, [r7, #19]
 800431e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004320:	7c7b      	ldrb	r3, [r7, #17]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d105      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004326:	4b9e      	ldr	r3, [pc, #632]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432a:	4a9d      	ldr	r2, [pc, #628]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800432c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004330:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800433e:	4b98      	ldr	r3, [pc, #608]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004344:	f023 0203 	bic.w	r2, r3, #3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	4994      	ldr	r1, [pc, #592]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00a      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004360:	4b8f      	ldr	r3, [pc, #572]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004366:	f023 020c 	bic.w	r2, r3, #12
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	498c      	ldr	r1, [pc, #560]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004370:	4313      	orrs	r3, r2
 8004372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0304 	and.w	r3, r3, #4
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004382:	4b87      	ldr	r3, [pc, #540]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004388:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004390:	4983      	ldr	r1, [pc, #524]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004392:	4313      	orrs	r3, r2
 8004394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0308 	and.w	r3, r3, #8
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00a      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043a4:	4b7e      	ldr	r3, [pc, #504]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b2:	497b      	ldr	r1, [pc, #492]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0320 	and.w	r3, r3, #32
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043c6:	4b76      	ldr	r3, [pc, #472]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d4:	4972      	ldr	r1, [pc, #456]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00a      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043e8:	4b6d      	ldr	r3, [pc, #436]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ee:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f6:	496a      	ldr	r1, [pc, #424]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800440a:	4b65      	ldr	r3, [pc, #404]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800440c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004410:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004418:	4961      	ldr	r1, [pc, #388]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800441a:	4313      	orrs	r3, r2
 800441c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00a      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800442c:	4b5c      	ldr	r3, [pc, #368]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800442e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004432:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800443a:	4959      	ldr	r1, [pc, #356]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800443c:	4313      	orrs	r3, r2
 800443e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800444e:	4b54      	ldr	r3, [pc, #336]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004454:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445c:	4950      	ldr	r1, [pc, #320]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800445e:	4313      	orrs	r3, r2
 8004460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00a      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004470:	4b4b      	ldr	r3, [pc, #300]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004476:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800447e:	4948      	ldr	r1, [pc, #288]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004480:	4313      	orrs	r3, r2
 8004482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00a      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004492:	4b43      	ldr	r3, [pc, #268]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004494:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004498:	f023 0203 	bic.w	r2, r3, #3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a0:	493f      	ldr	r1, [pc, #252]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d028      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044b4:	4b3a      	ldr	r3, [pc, #232]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044c2:	4937      	ldr	r1, [pc, #220]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044d2:	d106      	bne.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044d4:	4b32      	ldr	r3, [pc, #200]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	4a31      	ldr	r2, [pc, #196]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044de:	60d3      	str	r3, [r2, #12]
 80044e0:	e011      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044ea:	d10c      	bne.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	3304      	adds	r3, #4
 80044f0:	2101      	movs	r1, #1
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 f8b4 	bl	8004660 <RCCEx_PLLSAI1_Config>
 80044f8:	4603      	mov	r3, r0
 80044fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80044fc:	7cfb      	ldrb	r3, [r7, #19]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8004502:	7cfb      	ldrb	r3, [r7, #19]
 8004504:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d028      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004512:	4b23      	ldr	r3, [pc, #140]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004518:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004520:	491f      	ldr	r1, [pc, #124]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004522:	4313      	orrs	r3, r2
 8004524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004530:	d106      	bne.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004532:	4b1b      	ldr	r3, [pc, #108]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	4a1a      	ldr	r2, [pc, #104]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004538:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800453c:	60d3      	str	r3, [r2, #12]
 800453e:	e011      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004544:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004548:	d10c      	bne.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	3304      	adds	r3, #4
 800454e:	2101      	movs	r1, #1
 8004550:	4618      	mov	r0, r3
 8004552:	f000 f885 	bl	8004660 <RCCEx_PLLSAI1_Config>
 8004556:	4603      	mov	r3, r0
 8004558:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800455a:	7cfb      	ldrb	r3, [r7, #19]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8004560:	7cfb      	ldrb	r3, [r7, #19]
 8004562:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d02b      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004570:	4b0b      	ldr	r3, [pc, #44]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004576:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800457e:	4908      	ldr	r1, [pc, #32]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004580:	4313      	orrs	r3, r2
 8004582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800458e:	d109      	bne.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004590:	4b03      	ldr	r3, [pc, #12]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	4a02      	ldr	r2, [pc, #8]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004596:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800459a:	60d3      	str	r3, [r2, #12]
 800459c:	e014      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800459e:	bf00      	nop
 80045a0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045ac:	d10c      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	3304      	adds	r3, #4
 80045b2:	2101      	movs	r1, #1
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 f853 	bl	8004660 <RCCEx_PLLSAI1_Config>
 80045ba:	4603      	mov	r3, r0
 80045bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045be:	7cfb      	ldrb	r3, [r7, #19]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 80045c4:	7cfb      	ldrb	r3, [r7, #19]
 80045c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d01c      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045d4:	4b19      	ldr	r3, [pc, #100]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80045d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e2:	4916      	ldr	r1, [pc, #88]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045f2:	d10c      	bne.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	3304      	adds	r3, #4
 80045f8:	2102      	movs	r1, #2
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 f830 	bl	8004660 <RCCEx_PLLSAI1_Config>
 8004600:	4603      	mov	r3, r0
 8004602:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004604:	7cfb      	ldrb	r3, [r7, #19]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 800460a:	7cfb      	ldrb	r3, [r7, #19]
 800460c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00a      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800461a:	4b08      	ldr	r3, [pc, #32]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800461c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004620:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004628:	4904      	ldr	r1, [pc, #16]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004630:	7cbb      	ldrb	r3, [r7, #18]
}
 8004632:	4618      	mov	r0, r3
 8004634:	3718      	adds	r7, #24
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	40021000 	.word	0x40021000

08004640 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004644:	4b05      	ldr	r3, [pc, #20]	; (800465c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a04      	ldr	r2, [pc, #16]	; (800465c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800464a:	f043 0304 	orr.w	r3, r3, #4
 800464e:	6013      	str	r3, [r2, #0]
}
 8004650:	bf00      	nop
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	40021000 	.word	0x40021000

08004660 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800466a:	2300      	movs	r3, #0
 800466c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800466e:	4b74      	ldr	r3, [pc, #464]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f003 0303 	and.w	r3, r3, #3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d018      	beq.n	80046ac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800467a:	4b71      	ldr	r3, [pc, #452]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e0>)
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	f003 0203 	and.w	r2, r3, #3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	429a      	cmp	r2, r3
 8004688:	d10d      	bne.n	80046a6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
       ||
 800468e:	2b00      	cmp	r3, #0
 8004690:	d009      	beq.n	80046a6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004692:	4b6b      	ldr	r3, [pc, #428]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	091b      	lsrs	r3, r3, #4
 8004698:	f003 0307 	and.w	r3, r3, #7
 800469c:	1c5a      	adds	r2, r3, #1
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
       ||
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d047      	beq.n	8004736 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	73fb      	strb	r3, [r7, #15]
 80046aa:	e044      	b.n	8004736 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2b03      	cmp	r3, #3
 80046b2:	d018      	beq.n	80046e6 <RCCEx_PLLSAI1_Config+0x86>
 80046b4:	2b03      	cmp	r3, #3
 80046b6:	d825      	bhi.n	8004704 <RCCEx_PLLSAI1_Config+0xa4>
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d002      	beq.n	80046c2 <RCCEx_PLLSAI1_Config+0x62>
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d009      	beq.n	80046d4 <RCCEx_PLLSAI1_Config+0x74>
 80046c0:	e020      	b.n	8004704 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046c2:	4b5f      	ldr	r3, [pc, #380]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d11d      	bne.n	800470a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046d2:	e01a      	b.n	800470a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046d4:	4b5a      	ldr	r3, [pc, #360]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d116      	bne.n	800470e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046e4:	e013      	b.n	800470e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046e6:	4b56      	ldr	r3, [pc, #344]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10f      	bne.n	8004712 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046f2:	4b53      	ldr	r3, [pc, #332]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d109      	bne.n	8004712 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004702:	e006      	b.n	8004712 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	73fb      	strb	r3, [r7, #15]
      break;
 8004708:	e004      	b.n	8004714 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800470a:	bf00      	nop
 800470c:	e002      	b.n	8004714 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800470e:	bf00      	nop
 8004710:	e000      	b.n	8004714 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004712:	bf00      	nop
    }

    if(status == HAL_OK)
 8004714:	7bfb      	ldrb	r3, [r7, #15]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10d      	bne.n	8004736 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800471a:	4b49      	ldr	r3, [pc, #292]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e0>)
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6819      	ldr	r1, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	3b01      	subs	r3, #1
 800472c:	011b      	lsls	r3, r3, #4
 800472e:	430b      	orrs	r3, r1
 8004730:	4943      	ldr	r1, [pc, #268]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004732:	4313      	orrs	r3, r2
 8004734:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004736:	7bfb      	ldrb	r3, [r7, #15]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d17c      	bne.n	8004836 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800473c:	4b40      	ldr	r3, [pc, #256]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e0>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a3f      	ldr	r2, [pc, #252]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004742:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004746:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004748:	f7fc ff30 	bl	80015ac <HAL_GetTick>
 800474c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800474e:	e009      	b.n	8004764 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004750:	f7fc ff2c 	bl	80015ac <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d902      	bls.n	8004764 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	73fb      	strb	r3, [r7, #15]
        break;
 8004762:	e005      	b.n	8004770 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004764:	4b36      	ldr	r3, [pc, #216]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1ef      	bne.n	8004750 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004770:	7bfb      	ldrb	r3, [r7, #15]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d15f      	bne.n	8004836 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d110      	bne.n	800479e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800477c:	4b30      	ldr	r3, [pc, #192]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e0>)
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004784:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	6892      	ldr	r2, [r2, #8]
 800478c:	0211      	lsls	r1, r2, #8
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	68d2      	ldr	r2, [r2, #12]
 8004792:	06d2      	lsls	r2, r2, #27
 8004794:	430a      	orrs	r2, r1
 8004796:	492a      	ldr	r1, [pc, #168]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004798:	4313      	orrs	r3, r2
 800479a:	610b      	str	r3, [r1, #16]
 800479c:	e027      	b.n	80047ee <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d112      	bne.n	80047ca <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047a4:	4b26      	ldr	r3, [pc, #152]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80047ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6892      	ldr	r2, [r2, #8]
 80047b4:	0211      	lsls	r1, r2, #8
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	6912      	ldr	r2, [r2, #16]
 80047ba:	0852      	lsrs	r2, r2, #1
 80047bc:	3a01      	subs	r2, #1
 80047be:	0552      	lsls	r2, r2, #21
 80047c0:	430a      	orrs	r2, r1
 80047c2:	491f      	ldr	r1, [pc, #124]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	610b      	str	r3, [r1, #16]
 80047c8:	e011      	b.n	80047ee <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047ca:	4b1d      	ldr	r3, [pc, #116]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80047d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	6892      	ldr	r2, [r2, #8]
 80047da:	0211      	lsls	r1, r2, #8
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	6952      	ldr	r2, [r2, #20]
 80047e0:	0852      	lsrs	r2, r2, #1
 80047e2:	3a01      	subs	r2, #1
 80047e4:	0652      	lsls	r2, r2, #25
 80047e6:	430a      	orrs	r2, r1
 80047e8:	4915      	ldr	r1, [pc, #84]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80047ee:	4b14      	ldr	r3, [pc, #80]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a13      	ldr	r2, [pc, #76]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047f8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047fa:	f7fc fed7 	bl	80015ac <HAL_GetTick>
 80047fe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004800:	e009      	b.n	8004816 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004802:	f7fc fed3 	bl	80015ac <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	2b02      	cmp	r3, #2
 800480e:	d902      	bls.n	8004816 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	73fb      	strb	r3, [r7, #15]
          break;
 8004814:	e005      	b.n	8004822 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004816:	4b0a      	ldr	r3, [pc, #40]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d0ef      	beq.n	8004802 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004822:	7bfb      	ldrb	r3, [r7, #15]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d106      	bne.n	8004836 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004828:	4b05      	ldr	r3, [pc, #20]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e0>)
 800482a:	691a      	ldr	r2, [r3, #16]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	4903      	ldr	r1, [pc, #12]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004832:	4313      	orrs	r3, r2
 8004834:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004836:	7bfb      	ldrb	r3, [r7, #15]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	40021000 	.word	0x40021000

08004844 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d06c      	beq.n	8004930 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d106      	bne.n	8004870 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7fc fc40 	bl	80010f0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2202      	movs	r2, #2
 8004874:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	22ca      	movs	r2, #202	; 0xca
 800487e:	625a      	str	r2, [r3, #36]	; 0x24
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2253      	movs	r2, #83	; 0x53
 8004886:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 fa49 	bl	8004d20 <RTC_EnterInitMode>
 800488e:	4603      	mov	r3, r0
 8004890:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004892:	7bfb      	ldrb	r3, [r7, #15]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d14b      	bne.n	8004930 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	6812      	ldr	r2, [r2, #0]
 80048a2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80048a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048aa:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6899      	ldr	r1, [r3, #8]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685a      	ldr	r2, [r3, #4]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	431a      	orrs	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	68d2      	ldr	r2, [r2, #12]
 80048d2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6919      	ldr	r1, [r3, #16]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	041a      	lsls	r2, r3, #16
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 fa4d 	bl	8004d88 <RTC_ExitInitMode>
 80048ee:	4603      	mov	r3, r0
 80048f0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80048f2:	7bfb      	ldrb	r3, [r7, #15]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d11b      	bne.n	8004930 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0203 	bic.w	r2, r2, #3
 8004906:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	69da      	ldr	r2, [r3, #28]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	430a      	orrs	r2, r1
 800491e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	22ff      	movs	r2, #255	; 0xff
 8004926:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8004930:	7bfb      	ldrb	r3, [r7, #15]
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800493a:	b590      	push	{r4, r7, lr}
 800493c:	b087      	sub	sp, #28
 800493e:	af00      	add	r7, sp, #0
 8004940:	60f8      	str	r0, [r7, #12]
 8004942:	60b9      	str	r1, [r7, #8]
 8004944:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f893 3020 	ldrb.w	r3, [r3, #32]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d101      	bne.n	8004954 <HAL_RTC_SetTime+0x1a>
 8004950:	2302      	movs	r3, #2
 8004952:	e08b      	b.n	8004a6c <HAL_RTC_SetTime+0x132>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2202      	movs	r2, #2
 8004960:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	22ca      	movs	r2, #202	; 0xca
 800496a:	625a      	str	r2, [r3, #36]	; 0x24
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2253      	movs	r2, #83	; 0x53
 8004972:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f000 f9d3 	bl	8004d20 <RTC_EnterInitMode>
 800497a:	4603      	mov	r3, r0
 800497c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800497e:	7cfb      	ldrb	r3, [r7, #19]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d163      	bne.n	8004a4c <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d126      	bne.n	80049d8 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004994:	2b00      	cmp	r3, #0
 8004996:	d102      	bne.n	800499e <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	2200      	movs	r2, #0
 800499c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 fa2e 	bl	8004e04 <RTC_ByteToBcd2>
 80049a8:	4603      	mov	r3, r0
 80049aa:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	785b      	ldrb	r3, [r3, #1]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 fa27 	bl	8004e04 <RTC_ByteToBcd2>
 80049b6:	4603      	mov	r3, r0
 80049b8:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80049ba:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	789b      	ldrb	r3, [r3, #2]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f000 fa1f 	bl	8004e04 <RTC_ByteToBcd2>
 80049c6:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80049c8:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	78db      	ldrb	r3, [r3, #3]
 80049d0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80049d2:	4313      	orrs	r3, r2
 80049d4:	617b      	str	r3, [r7, #20]
 80049d6:	e018      	b.n	8004a0a <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d102      	bne.n	80049ec <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	2200      	movs	r2, #0
 80049ea:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	785b      	ldrb	r3, [r3, #1]
 80049f6:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80049f8:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80049fe:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	78db      	ldrb	r3, [r3, #3]
 8004a04:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004a06:	4313      	orrs	r3, r2
 8004a08:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004a14:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004a18:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a28:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	6899      	ldr	r1, [r3, #8]
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	68da      	ldr	r2, [r3, #12]
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f000 f9a0 	bl	8004d88 <RTC_ExitInitMode>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	22ff      	movs	r2, #255	; 0xff
 8004a52:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004a54:	7cfb      	ldrb	r3, [r7, #19]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d103      	bne.n	8004a62 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004a6a:	7cfb      	ldrb	r3, [r7, #19]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	371c      	adds	r7, #28
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd90      	pop	{r4, r7, pc}

08004a74 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004aa2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004aa6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	0c1b      	lsrs	r3, r3, #16
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	0a1b      	lsrs	r3, r3, #8
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ac2:	b2da      	uxtb	r2, r3
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	0d9b      	lsrs	r3, r3, #22
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	b2da      	uxtb	r2, r3
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d11a      	bne.n	8004b22 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f000 f9a7 	bl	8004e44 <RTC_Bcd2ToByte>
 8004af6:	4603      	mov	r3, r0
 8004af8:	461a      	mov	r2, r3
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	785b      	ldrb	r3, [r3, #1]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 f99e 	bl	8004e44 <RTC_Bcd2ToByte>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	789b      	ldrb	r3, [r3, #2]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 f995 	bl	8004e44 <RTC_Bcd2ToByte>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3718      	adds	r7, #24
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004b2c:	b590      	push	{r4, r7, lr}
 8004b2e:	b087      	sub	sp, #28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d101      	bne.n	8004b46 <HAL_RTC_SetDate+0x1a>
 8004b42:	2302      	movs	r3, #2
 8004b44:	e075      	b.n	8004c32 <HAL_RTC_SetDate+0x106>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2202      	movs	r2, #2
 8004b52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10e      	bne.n	8004b7a <HAL_RTC_SetDate+0x4e>
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	785b      	ldrb	r3, [r3, #1]
 8004b60:	f003 0310 	and.w	r3, r3, #16
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d008      	beq.n	8004b7a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	785b      	ldrb	r3, [r3, #1]
 8004b6c:	f023 0310 	bic.w	r3, r3, #16
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	330a      	adds	r3, #10
 8004b74:	b2da      	uxtb	r2, r3
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d11c      	bne.n	8004bba <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	78db      	ldrb	r3, [r3, #3]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f000 f93d 	bl	8004e04 <RTC_ByteToBcd2>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	785b      	ldrb	r3, [r3, #1]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 f936 	bl	8004e04 <RTC_ByteToBcd2>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004b9c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	789b      	ldrb	r3, [r3, #2]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 f92e 	bl	8004e04 <RTC_ByteToBcd2>
 8004ba8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004baa:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	617b      	str	r3, [r7, #20]
 8004bb8:	e00e      	b.n	8004bd8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	78db      	ldrb	r3, [r3, #3]
 8004bbe:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	785b      	ldrb	r3, [r3, #1]
 8004bc4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004bc6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004bcc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	22ca      	movs	r2, #202	; 0xca
 8004bde:	625a      	str	r2, [r3, #36]	; 0x24
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2253      	movs	r2, #83	; 0x53
 8004be6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f000 f899 	bl	8004d20 <RTC_EnterInitMode>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004bf2:	7cfb      	ldrb	r3, [r7, #19]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10c      	bne.n	8004c12 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004c02:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004c06:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 f8bd 	bl	8004d88 <RTC_ExitInitMode>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	22ff      	movs	r2, #255	; 0xff
 8004c18:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004c1a:	7cfb      	ldrb	r3, [r7, #19]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d103      	bne.n	8004c28 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004c30:	7cfb      	ldrb	r3, [r7, #19]
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	371c      	adds	r7, #28
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd90      	pop	{r4, r7, pc}

08004c3a <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b086      	sub	sp, #24
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	60f8      	str	r0, [r7, #12]
 8004c42:	60b9      	str	r1, [r7, #8]
 8004c44:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004c50:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004c54:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	0c1b      	lsrs	r3, r3, #16
 8004c5a:	b2da      	uxtb	r2, r3
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	0a1b      	lsrs	r3, r3, #8
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	f003 031f 	and.w	r3, r3, #31
 8004c6a:	b2da      	uxtb	r2, r3
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c78:	b2da      	uxtb	r2, r3
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	0b5b      	lsrs	r3, r3, #13
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	f003 0307 	and.w	r3, r3, #7
 8004c88:	b2da      	uxtb	r2, r3
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d11a      	bne.n	8004cca <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	78db      	ldrb	r3, [r3, #3]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f000 f8d3 	bl	8004e44 <RTC_Bcd2ToByte>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	785b      	ldrb	r3, [r3, #1]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 f8ca 	bl	8004e44 <RTC_Bcd2ToByte>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	789b      	ldrb	r3, [r3, #2]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 f8c1 	bl	8004e44 <RTC_Bcd2ToByte>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3718      	adds	r7, #24
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68da      	ldr	r2, [r3, #12]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004cea:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004cec:	f7fc fc5e 	bl	80015ac <HAL_GetTick>
 8004cf0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004cf2:	e009      	b.n	8004d08 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004cf4:	f7fc fc5a 	bl	80015ac <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d02:	d901      	bls.n	8004d08 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e007      	b.n	8004d18 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	f003 0320 	and.w	r3, r3, #32
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d0ee      	beq.n	8004cf4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d120      	bne.n	8004d7c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8004d42:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004d44:	f7fc fc32 	bl	80015ac <HAL_GetTick>
 8004d48:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004d4a:	e00d      	b.n	8004d68 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004d4c:	f7fc fc2e 	bl	80015ac <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d5a:	d905      	bls.n	8004d68 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2203      	movs	r2, #3
 8004d64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d102      	bne.n	8004d7c <RTC_EnterInitMode+0x5c>
 8004d76:	7bfb      	ldrb	r3, [r7, #15]
 8004d78:	2b03      	cmp	r3, #3
 8004d7a:	d1e7      	bne.n	8004d4c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
	...

08004d88 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d90:	2300      	movs	r3, #0
 8004d92:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004d94:	4b1a      	ldr	r3, [pc, #104]	; (8004e00 <RTC_ExitInitMode+0x78>)
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	4a19      	ldr	r2, [pc, #100]	; (8004e00 <RTC_ExitInitMode+0x78>)
 8004d9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d9e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004da0:	4b17      	ldr	r3, [pc, #92]	; (8004e00 <RTC_ExitInitMode+0x78>)
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f003 0320 	and.w	r3, r3, #32
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10c      	bne.n	8004dc6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f7ff ff91 	bl	8004cd4 <HAL_RTC_WaitForSynchro>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d01e      	beq.n	8004df6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2203      	movs	r2, #3
 8004dbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	73fb      	strb	r3, [r7, #15]
 8004dc4:	e017      	b.n	8004df6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004dc6:	4b0e      	ldr	r3, [pc, #56]	; (8004e00 <RTC_ExitInitMode+0x78>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	4a0d      	ldr	r2, [pc, #52]	; (8004e00 <RTC_ExitInitMode+0x78>)
 8004dcc:	f023 0320 	bic.w	r3, r3, #32
 8004dd0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7ff ff7e 	bl	8004cd4 <HAL_RTC_WaitForSynchro>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d005      	beq.n	8004dea <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2203      	movs	r2, #3
 8004de2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004dea:	4b05      	ldr	r3, [pc, #20]	; (8004e00 <RTC_ExitInitMode+0x78>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	4a04      	ldr	r2, [pc, #16]	; (8004e00 <RTC_ExitInitMode+0x78>)
 8004df0:	f043 0320 	orr.w	r3, r3, #32
 8004df4:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	40002800 	.word	0x40002800

08004e04 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8004e12:	79fb      	ldrb	r3, [r7, #7]
 8004e14:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8004e16:	e005      	b.n	8004e24 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8004e1e:	7afb      	ldrb	r3, [r7, #11]
 8004e20:	3b0a      	subs	r3, #10
 8004e22:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8004e24:	7afb      	ldrb	r3, [r7, #11]
 8004e26:	2b09      	cmp	r3, #9
 8004e28:	d8f6      	bhi.n	8004e18 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	011b      	lsls	r3, r3, #4
 8004e30:	b2da      	uxtb	r2, r3
 8004e32:	7afb      	ldrb	r3, [r7, #11]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	b2db      	uxtb	r3, r3
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8004e4e:	79fb      	ldrb	r3, [r7, #7]
 8004e50:	091b      	lsrs	r3, r3, #4
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	461a      	mov	r2, r3
 8004e56:	0092      	lsls	r2, r2, #2
 8004e58:	4413      	add	r3, r2
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8004e5e:	79fb      	ldrb	r3, [r7, #7]
 8004e60:	f003 030f 	and.w	r3, r3, #15
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	7bfb      	ldrb	r3, [r7, #15]
 8004e68:	4413      	add	r3, r2
 8004e6a:	b2db      	uxtb	r3, r3
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3714      	adds	r7, #20
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d101      	bne.n	8004e92 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8004e8e:	2302      	movs	r3, #2
 8004e90:	e07f      	b.n	8004f92 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	22ca      	movs	r2, #202	; 0xca
 8004ea8:	625a      	str	r2, [r3, #36]	; 0x24
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2253      	movs	r2, #83	; 0x53
 8004eb0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ec0:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004ed2:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d120      	bne.n	8004f24 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8004ee2:	f7fc fb63 	bl	80015ac <HAL_GetTick>
 8004ee6:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8004ee8:	e015      	b.n	8004f16 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004eea:	f7fc fb5f 	bl	80015ac <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ef8:	d90d      	bls.n	8004f16 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	22ff      	movs	r2, #255	; 0xff
 8004f00:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2203      	movs	r2, #3
 8004f06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e03d      	b.n	8004f92 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	f003 0304 	and.w	r3, r3, #4
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d0e2      	beq.n	8004eea <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f023 0107 	bic.w	r1, r3, #7
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8004f40:	4b16      	ldr	r3, [pc, #88]	; (8004f9c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a15      	ldr	r2, [pc, #84]	; (8004f9c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8004f46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f4a:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8004f4c:	4b13      	ldr	r3, [pc, #76]	; (8004f9c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	4a12      	ldr	r2, [pc, #72]	; (8004f9c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8004f52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f56:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689a      	ldr	r2, [r3, #8]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f66:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689a      	ldr	r2, [r3, #8]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f76:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	22ff      	movs	r2, #255	; 0xff
 8004f7e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3718      	adds	r7, #24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	40010400 	.word	0x40010400

08004fa0 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d101      	bne.n	8004fb6 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	e04d      	b.n	8005052 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2202      	movs	r2, #2
 8004fc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	22ca      	movs	r2, #202	; 0xca
 8004fcc:	625a      	str	r2, [r3, #36]	; 0x24
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2253      	movs	r2, #83	; 0x53
 8004fd4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689a      	ldr	r2, [r3, #8]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe4:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689a      	ldr	r2, [r3, #8]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ff4:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8004ff6:	f7fc fad9 	bl	80015ac <HAL_GetTick>
 8004ffa:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004ffc:	e015      	b.n	800502a <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004ffe:	f7fc fad5 	bl	80015ac <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800500c:	d90d      	bls.n	800502a <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	22ff      	movs	r2, #255	; 0xff
 8005014:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2203      	movs	r2, #3
 800501a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e013      	b.n	8005052 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	f003 0304 	and.w	r3, r3, #4
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0e2      	beq.n	8004ffe <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	22ff      	movs	r2, #255	; 0xff
 800503e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
	...

0800505c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8005064:	4b0f      	ldr	r3, [pc, #60]	; (80050a4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8005066:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800506a:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00b      	beq.n	8005092 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	b2da      	uxtb	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800508a:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f7fb ff7b 	bl	8000f88 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 800509a:	bf00      	nop
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	40010400 	.word	0x40010400

080050a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e095      	b.n	80051e6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d108      	bne.n	80050d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050ca:	d009      	beq.n	80050e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	61da      	str	r2, [r3, #28]
 80050d2:	e005      	b.n	80050e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d106      	bne.n	8005100 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f7fc f830 	bl	8001160 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2202      	movs	r2, #2
 8005104:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005116:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005120:	d902      	bls.n	8005128 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005122:	2300      	movs	r3, #0
 8005124:	60fb      	str	r3, [r7, #12]
 8005126:	e002      	b.n	800512e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800512c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005136:	d007      	beq.n	8005148 <HAL_SPI_Init+0xa0>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005140:	d002      	beq.n	8005148 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005158:	431a      	orrs	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	431a      	orrs	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	431a      	orrs	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005176:	431a      	orrs	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	69db      	ldr	r3, [r3, #28]
 800517c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005180:	431a      	orrs	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800518a:	ea42 0103 	orr.w	r1, r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005192:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	0c1b      	lsrs	r3, r3, #16
 80051a4:	f003 0204 	and.w	r2, r3, #4
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ac:	f003 0310 	and.w	r3, r3, #16
 80051b0:	431a      	orrs	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b6:	f003 0308 	and.w	r3, r3, #8
 80051ba:	431a      	orrs	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80051c4:	ea42 0103 	orr.w	r1, r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b088      	sub	sp, #32
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	60f8      	str	r0, [r7, #12]
 80051f6:	60b9      	str	r1, [r7, #8]
 80051f8:	603b      	str	r3, [r7, #0]
 80051fa:	4613      	mov	r3, r2
 80051fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051fe:	2300      	movs	r3, #0
 8005200:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005208:	2b01      	cmp	r3, #1
 800520a:	d101      	bne.n	8005210 <HAL_SPI_Transmit+0x22>
 800520c:	2302      	movs	r3, #2
 800520e:	e158      	b.n	80054c2 <HAL_SPI_Transmit+0x2d4>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005218:	f7fc f9c8 	bl	80015ac <HAL_GetTick>
 800521c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800521e:	88fb      	ldrh	r3, [r7, #6]
 8005220:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b01      	cmp	r3, #1
 800522c:	d002      	beq.n	8005234 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800522e:	2302      	movs	r3, #2
 8005230:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005232:	e13d      	b.n	80054b0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d002      	beq.n	8005240 <HAL_SPI_Transmit+0x52>
 800523a:	88fb      	ldrh	r3, [r7, #6]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d102      	bne.n	8005246 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005244:	e134      	b.n	80054b0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2203      	movs	r2, #3
 800524a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	88fa      	ldrh	r2, [r7, #6]
 800525e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	88fa      	ldrh	r2, [r7, #6]
 8005264:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005290:	d10f      	bne.n	80052b2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052bc:	2b40      	cmp	r3, #64	; 0x40
 80052be:	d007      	beq.n	80052d0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052d8:	d94b      	bls.n	8005372 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d002      	beq.n	80052e8 <HAL_SPI_Transmit+0xfa>
 80052e2:	8afb      	ldrh	r3, [r7, #22]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d13e      	bne.n	8005366 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ec:	881a      	ldrh	r2, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f8:	1c9a      	adds	r2, r3, #2
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005302:	b29b      	uxth	r3, r3
 8005304:	3b01      	subs	r3, #1
 8005306:	b29a      	uxth	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800530c:	e02b      	b.n	8005366 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b02      	cmp	r3, #2
 800531a:	d112      	bne.n	8005342 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005320:	881a      	ldrh	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532c:	1c9a      	adds	r2, r3, #2
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005336:	b29b      	uxth	r3, r3
 8005338:	3b01      	subs	r3, #1
 800533a:	b29a      	uxth	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005340:	e011      	b.n	8005366 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005342:	f7fc f933 	bl	80015ac <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	429a      	cmp	r2, r3
 8005350:	d803      	bhi.n	800535a <HAL_SPI_Transmit+0x16c>
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005358:	d102      	bne.n	8005360 <HAL_SPI_Transmit+0x172>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d102      	bne.n	8005366 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005364:	e0a4      	b.n	80054b0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800536a:	b29b      	uxth	r3, r3
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1ce      	bne.n	800530e <HAL_SPI_Transmit+0x120>
 8005370:	e07c      	b.n	800546c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d002      	beq.n	8005380 <HAL_SPI_Transmit+0x192>
 800537a:	8afb      	ldrh	r3, [r7, #22]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d170      	bne.n	8005462 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005384:	b29b      	uxth	r3, r3
 8005386:	2b01      	cmp	r3, #1
 8005388:	d912      	bls.n	80053b0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538e:	881a      	ldrh	r2, [r3, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539a:	1c9a      	adds	r2, r3, #2
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	3b02      	subs	r3, #2
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053ae:	e058      	b.n	8005462 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	330c      	adds	r3, #12
 80053ba:	7812      	ldrb	r2, [r2, #0]
 80053bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c2:	1c5a      	adds	r2, r3, #1
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	3b01      	subs	r3, #1
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80053d6:	e044      	b.n	8005462 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f003 0302 	and.w	r3, r3, #2
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d12b      	bne.n	800543e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d912      	bls.n	8005416 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f4:	881a      	ldrh	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005400:	1c9a      	adds	r2, r3, #2
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800540a:	b29b      	uxth	r3, r3
 800540c:	3b02      	subs	r3, #2
 800540e:	b29a      	uxth	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005414:	e025      	b.n	8005462 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	330c      	adds	r3, #12
 8005420:	7812      	ldrb	r2, [r2, #0]
 8005422:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005428:	1c5a      	adds	r2, r3, #1
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005432:	b29b      	uxth	r3, r3
 8005434:	3b01      	subs	r3, #1
 8005436:	b29a      	uxth	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800543c:	e011      	b.n	8005462 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800543e:	f7fc f8b5 	bl	80015ac <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	429a      	cmp	r2, r3
 800544c:	d803      	bhi.n	8005456 <HAL_SPI_Transmit+0x268>
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005454:	d102      	bne.n	800545c <HAL_SPI_Transmit+0x26e>
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d102      	bne.n	8005462 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005460:	e026      	b.n	80054b0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005466:	b29b      	uxth	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1b5      	bne.n	80053d8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800546c:	69ba      	ldr	r2, [r7, #24]
 800546e:	6839      	ldr	r1, [r7, #0]
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 f949 	bl	8005708 <SPI_EndRxTxTransaction>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d002      	beq.n	8005482 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2220      	movs	r2, #32
 8005480:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d10a      	bne.n	80054a0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800548a:	2300      	movs	r3, #0
 800548c:	613b      	str	r3, [r7, #16]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	613b      	str	r3, [r7, #16]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	613b      	str	r3, [r7, #16]
 800549e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d002      	beq.n	80054ae <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	77fb      	strb	r3, [r7, #31]
 80054ac:	e000      	b.n	80054b0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80054ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80054c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3720      	adds	r7, #32
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
	...

080054cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b088      	sub	sp, #32
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	603b      	str	r3, [r7, #0]
 80054d8:	4613      	mov	r3, r2
 80054da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80054dc:	f7fc f866 	bl	80015ac <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e4:	1a9b      	subs	r3, r3, r2
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	4413      	add	r3, r2
 80054ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80054ec:	f7fc f85e 	bl	80015ac <HAL_GetTick>
 80054f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80054f2:	4b39      	ldr	r3, [pc, #228]	; (80055d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	015b      	lsls	r3, r3, #5
 80054f8:	0d1b      	lsrs	r3, r3, #20
 80054fa:	69fa      	ldr	r2, [r7, #28]
 80054fc:	fb02 f303 	mul.w	r3, r2, r3
 8005500:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005502:	e054      	b.n	80055ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550a:	d050      	beq.n	80055ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800550c:	f7fc f84e 	bl	80015ac <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	69fa      	ldr	r2, [r7, #28]
 8005518:	429a      	cmp	r2, r3
 800551a:	d902      	bls.n	8005522 <SPI_WaitFlagStateUntilTimeout+0x56>
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d13d      	bne.n	800559e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	685a      	ldr	r2, [r3, #4]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005530:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800553a:	d111      	bne.n	8005560 <SPI_WaitFlagStateUntilTimeout+0x94>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005544:	d004      	beq.n	8005550 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800554e:	d107      	bne.n	8005560 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800555e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005564:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005568:	d10f      	bne.n	800558a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005578:	601a      	str	r2, [r3, #0]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005588:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e017      	b.n	80055ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d101      	bne.n	80055a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80055a4:	2300      	movs	r3, #0
 80055a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	3b01      	subs	r3, #1
 80055ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	689a      	ldr	r2, [r3, #8]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	4013      	ands	r3, r2
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	bf0c      	ite	eq
 80055be:	2301      	moveq	r3, #1
 80055c0:	2300      	movne	r3, #0
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	461a      	mov	r2, r3
 80055c6:	79fb      	ldrb	r3, [r7, #7]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d19b      	bne.n	8005504 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3720      	adds	r7, #32
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	20000000 	.word	0x20000000

080055dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b08a      	sub	sp, #40	; 0x28
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
 80055e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80055ea:	2300      	movs	r3, #0
 80055ec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80055ee:	f7fb ffdd 	bl	80015ac <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f6:	1a9b      	subs	r3, r3, r2
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	4413      	add	r3, r2
 80055fc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80055fe:	f7fb ffd5 	bl	80015ac <HAL_GetTick>
 8005602:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	330c      	adds	r3, #12
 800560a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800560c:	4b3d      	ldr	r3, [pc, #244]	; (8005704 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	4613      	mov	r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	4413      	add	r3, r2
 8005616:	00da      	lsls	r2, r3, #3
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	0d1b      	lsrs	r3, r3, #20
 800561c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800561e:	fb02 f303 	mul.w	r3, r2, r3
 8005622:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005624:	e060      	b.n	80056e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800562c:	d107      	bne.n	800563e <SPI_WaitFifoStateUntilTimeout+0x62>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d104      	bne.n	800563e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	b2db      	uxtb	r3, r3
 800563a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800563c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005644:	d050      	beq.n	80056e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005646:	f7fb ffb1 	bl	80015ac <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	6a3b      	ldr	r3, [r7, #32]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005652:	429a      	cmp	r2, r3
 8005654:	d902      	bls.n	800565c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	2b00      	cmp	r3, #0
 800565a:	d13d      	bne.n	80056d8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800566a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005674:	d111      	bne.n	800569a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800567e:	d004      	beq.n	800568a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005688:	d107      	bne.n	800569a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005698:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056a2:	d10f      	bne.n	80056c4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e010      	b.n	80056fa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80056de:	2300      	movs	r3, #0
 80056e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	3b01      	subs	r3, #1
 80056e6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689a      	ldr	r2, [r3, #8]
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	4013      	ands	r3, r2
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d196      	bne.n	8005626 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3728      	adds	r7, #40	; 0x28
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	20000000 	.word	0x20000000

08005708 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b086      	sub	sp, #24
 800570c:	af02      	add	r7, sp, #8
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	2200      	movs	r2, #0
 800571c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f7ff ff5b 	bl	80055dc <SPI_WaitFifoStateUntilTimeout>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d007      	beq.n	800573c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005730:	f043 0220 	orr.w	r2, r3, #32
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e027      	b.n	800578c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	9300      	str	r3, [sp, #0]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	2200      	movs	r2, #0
 8005744:	2180      	movs	r1, #128	; 0x80
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f7ff fec0 	bl	80054cc <SPI_WaitFlagStateUntilTimeout>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d007      	beq.n	8005762 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005756:	f043 0220 	orr.w	r2, r3, #32
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e014      	b.n	800578c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	9300      	str	r3, [sp, #0]
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	2200      	movs	r2, #0
 800576a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f7ff ff34 	bl	80055dc <SPI_WaitFifoStateUntilTimeout>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d007      	beq.n	800578a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800577e:	f043 0220 	orr.w	r2, r3, #32
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e000      	b.n	800578c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d101      	bne.n	80057a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e049      	b.n	800583a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d106      	bne.n	80057c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f7fb fd12 	bl	80011e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	3304      	adds	r3, #4
 80057d0:	4619      	mov	r1, r3
 80057d2:	4610      	mov	r0, r2
 80057d4:	f000 f9da 	bl	8005b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3708      	adds	r7, #8
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
	...

08005844 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005852:	b2db      	uxtb	r3, r3
 8005854:	2b01      	cmp	r3, #1
 8005856:	d001      	beq.n	800585c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e040      	b.n	80058de <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2202      	movs	r2, #2
 8005860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68da      	ldr	r2, [r3, #12]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f042 0201 	orr.w	r2, r2, #1
 8005872:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a1c      	ldr	r2, [pc, #112]	; (80058ec <HAL_TIM_Base_Start_IT+0xa8>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d00e      	beq.n	800589c <HAL_TIM_Base_Start_IT+0x58>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005886:	d009      	beq.n	800589c <HAL_TIM_Base_Start_IT+0x58>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a18      	ldr	r2, [pc, #96]	; (80058f0 <HAL_TIM_Base_Start_IT+0xac>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d004      	beq.n	800589c <HAL_TIM_Base_Start_IT+0x58>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a17      	ldr	r2, [pc, #92]	; (80058f4 <HAL_TIM_Base_Start_IT+0xb0>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d115      	bne.n	80058c8 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	689a      	ldr	r2, [r3, #8]
 80058a2:	4b15      	ldr	r3, [pc, #84]	; (80058f8 <HAL_TIM_Base_Start_IT+0xb4>)
 80058a4:	4013      	ands	r3, r2
 80058a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2b06      	cmp	r3, #6
 80058ac:	d015      	beq.n	80058da <HAL_TIM_Base_Start_IT+0x96>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058b4:	d011      	beq.n	80058da <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f042 0201 	orr.w	r2, r2, #1
 80058c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058c6:	e008      	b.n	80058da <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f042 0201 	orr.w	r2, r2, #1
 80058d6:	601a      	str	r2, [r3, #0]
 80058d8:	e000      	b.n	80058dc <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3714      	adds	r7, #20
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	40012c00 	.word	0x40012c00
 80058f0:	40000400 	.word	0x40000400
 80058f4:	40014000 	.word	0x40014000
 80058f8:	00010007 	.word	0x00010007

080058fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b02      	cmp	r3, #2
 8005910:	d122      	bne.n	8005958 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b02      	cmp	r3, #2
 800591e:	d11b      	bne.n	8005958 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f06f 0202 	mvn.w	r2, #2
 8005928:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	f003 0303 	and.w	r3, r3, #3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 f905 	bl	8005b4e <HAL_TIM_IC_CaptureCallback>
 8005944:	e005      	b.n	8005952 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f8f7 	bl	8005b3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 f908 	bl	8005b62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	f003 0304 	and.w	r3, r3, #4
 8005962:	2b04      	cmp	r3, #4
 8005964:	d122      	bne.n	80059ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	2b04      	cmp	r3, #4
 8005972:	d11b      	bne.n	80059ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f06f 0204 	mvn.w	r2, #4
 800597c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2202      	movs	r2, #2
 8005982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f8db 	bl	8005b4e <HAL_TIM_IC_CaptureCallback>
 8005998:	e005      	b.n	80059a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f8cd 	bl	8005b3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 f8de 	bl	8005b62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	f003 0308 	and.w	r3, r3, #8
 80059b6:	2b08      	cmp	r3, #8
 80059b8:	d122      	bne.n	8005a00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	f003 0308 	and.w	r3, r3, #8
 80059c4:	2b08      	cmp	r3, #8
 80059c6:	d11b      	bne.n	8005a00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f06f 0208 	mvn.w	r2, #8
 80059d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2204      	movs	r2, #4
 80059d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	f003 0303 	and.w	r3, r3, #3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f8b1 	bl	8005b4e <HAL_TIM_IC_CaptureCallback>
 80059ec:	e005      	b.n	80059fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f8a3 	bl	8005b3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 f8b4 	bl	8005b62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	f003 0310 	and.w	r3, r3, #16
 8005a0a:	2b10      	cmp	r3, #16
 8005a0c:	d122      	bne.n	8005a54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	f003 0310 	and.w	r3, r3, #16
 8005a18:	2b10      	cmp	r3, #16
 8005a1a:	d11b      	bne.n	8005a54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f06f 0210 	mvn.w	r2, #16
 8005a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2208      	movs	r2, #8
 8005a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f887 	bl	8005b4e <HAL_TIM_IC_CaptureCallback>
 8005a40:	e005      	b.n	8005a4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f879 	bl	8005b3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 f88a 	bl	8005b62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d10e      	bne.n	8005a80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d107      	bne.n	8005a80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f06f 0201 	mvn.w	r2, #1
 8005a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7fb fa90 	bl	8000fa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a8a:	2b80      	cmp	r3, #128	; 0x80
 8005a8c:	d10e      	bne.n	8005aac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a98:	2b80      	cmp	r3, #128	; 0x80
 8005a9a:	d107      	bne.n	8005aac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 f8e8 	bl	8005c7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aba:	d10e      	bne.n	8005ada <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac6:	2b80      	cmp	r3, #128	; 0x80
 8005ac8:	d107      	bne.n	8005ada <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f8db 	bl	8005c90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae4:	2b40      	cmp	r3, #64	; 0x40
 8005ae6:	d10e      	bne.n	8005b06 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af2:	2b40      	cmp	r3, #64	; 0x40
 8005af4:	d107      	bne.n	8005b06 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 f838 	bl	8005b76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	f003 0320 	and.w	r3, r3, #32
 8005b10:	2b20      	cmp	r3, #32
 8005b12:	d10e      	bne.n	8005b32 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	f003 0320 	and.w	r3, r3, #32
 8005b1e:	2b20      	cmp	r3, #32
 8005b20:	d107      	bne.n	8005b32 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f06f 0220 	mvn.w	r2, #32
 8005b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 f89b 	bl	8005c68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b32:	bf00      	nop
 8005b34:	3708      	adds	r7, #8
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b083      	sub	sp, #12
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b42:	bf00      	nop
 8005b44:	370c      	adds	r7, #12
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b083      	sub	sp, #12
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b56:	bf00      	nop
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b62:	b480      	push	{r7}
 8005b64:	b083      	sub	sp, #12
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b6a:	bf00      	nop
 8005b6c:	370c      	adds	r7, #12
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b083      	sub	sp, #12
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b7e:	bf00      	nop
 8005b80:	370c      	adds	r7, #12
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
	...

08005b8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a2e      	ldr	r2, [pc, #184]	; (8005c58 <TIM_Base_SetConfig+0xcc>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d007      	beq.n	8005bb4 <TIM_Base_SetConfig+0x28>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005baa:	d003      	beq.n	8005bb4 <TIM_Base_SetConfig+0x28>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a2b      	ldr	r2, [pc, #172]	; (8005c5c <TIM_Base_SetConfig+0xd0>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d108      	bne.n	8005bc6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a23      	ldr	r2, [pc, #140]	; (8005c58 <TIM_Base_SetConfig+0xcc>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d00f      	beq.n	8005bee <TIM_Base_SetConfig+0x62>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bd4:	d00b      	beq.n	8005bee <TIM_Base_SetConfig+0x62>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a20      	ldr	r2, [pc, #128]	; (8005c5c <TIM_Base_SetConfig+0xd0>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d007      	beq.n	8005bee <TIM_Base_SetConfig+0x62>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a1f      	ldr	r2, [pc, #124]	; (8005c60 <TIM_Base_SetConfig+0xd4>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d003      	beq.n	8005bee <TIM_Base_SetConfig+0x62>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a1e      	ldr	r2, [pc, #120]	; (8005c64 <TIM_Base_SetConfig+0xd8>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d108      	bne.n	8005c00 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	689a      	ldr	r2, [r3, #8]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a0c      	ldr	r2, [pc, #48]	; (8005c58 <TIM_Base_SetConfig+0xcc>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d007      	beq.n	8005c3c <TIM_Base_SetConfig+0xb0>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a0c      	ldr	r2, [pc, #48]	; (8005c60 <TIM_Base_SetConfig+0xd4>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d003      	beq.n	8005c3c <TIM_Base_SetConfig+0xb0>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a0b      	ldr	r2, [pc, #44]	; (8005c64 <TIM_Base_SetConfig+0xd8>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d103      	bne.n	8005c44 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	691a      	ldr	r2, [r3, #16]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	615a      	str	r2, [r3, #20]
}
 8005c4a:	bf00      	nop
 8005c4c:	3714      	adds	r7, #20
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	40012c00 	.word	0x40012c00
 8005c5c:	40000400 	.word	0x40000400
 8005c60:	40014000 	.word	0x40014000
 8005c64:	40014400 	.word	0x40014400

08005c68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c98:	bf00      	nop
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e040      	b.n	8005d38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d106      	bne.n	8005ccc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f7fb faac 	bl	8001224 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2224      	movs	r2, #36	; 0x24
 8005cd0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f022 0201 	bic.w	r2, r2, #1
 8005ce0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f8c0 	bl	8005e68 <UART_SetConfig>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d101      	bne.n	8005cf2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e022      	b.n	8005d38 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d002      	beq.n	8005d00 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 fb3a 	bl	8006374 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	685a      	ldr	r2, [r3, #4]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	689a      	ldr	r2, [r3, #8]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f042 0201 	orr.w	r2, r2, #1
 8005d2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 fbc1 	bl	80064b8 <UART_CheckIdleState>
 8005d36:	4603      	mov	r3, r0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b08a      	sub	sp, #40	; 0x28
 8005d44:	af02      	add	r7, sp, #8
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	603b      	str	r3, [r7, #0]
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d54:	2b20      	cmp	r3, #32
 8005d56:	f040 8082 	bne.w	8005e5e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d002      	beq.n	8005d66 <HAL_UART_Transmit+0x26>
 8005d60:	88fb      	ldrh	r3, [r7, #6]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e07a      	b.n	8005e60 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d101      	bne.n	8005d78 <HAL_UART_Transmit+0x38>
 8005d74:	2302      	movs	r3, #2
 8005d76:	e073      	b.n	8005e60 <HAL_UART_Transmit+0x120>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2221      	movs	r2, #33	; 0x21
 8005d8c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d8e:	f7fb fc0d 	bl	80015ac <HAL_GetTick>
 8005d92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	88fa      	ldrh	r2, [r7, #6]
 8005d98:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	88fa      	ldrh	r2, [r7, #6]
 8005da0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dac:	d108      	bne.n	8005dc0 <HAL_UART_Transmit+0x80>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d104      	bne.n	8005dc0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005db6:	2300      	movs	r3, #0
 8005db8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	61bb      	str	r3, [r7, #24]
 8005dbe:	e003      	b.n	8005dc8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005dd0:	e02d      	b.n	8005e2e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	2180      	movs	r1, #128	; 0x80
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 fbb4 	bl	800654a <UART_WaitOnFlagUntilTimeout>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d001      	beq.n	8005dec <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e039      	b.n	8005e60 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10b      	bne.n	8005e0a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	881a      	ldrh	r2, [r3, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dfe:	b292      	uxth	r2, r2
 8005e00:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	3302      	adds	r3, #2
 8005e06:	61bb      	str	r3, [r7, #24]
 8005e08:	e008      	b.n	8005e1c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	781a      	ldrb	r2, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	b292      	uxth	r2, r2
 8005e14:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	3301      	adds	r3, #1
 8005e1a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	3b01      	subs	r3, #1
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1cb      	bne.n	8005dd2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	2200      	movs	r2, #0
 8005e42:	2140      	movs	r1, #64	; 0x40
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f000 fb80 	bl	800654a <UART_WaitOnFlagUntilTimeout>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d001      	beq.n	8005e54 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e005      	b.n	8005e60 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2220      	movs	r2, #32
 8005e58:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	e000      	b.n	8005e60 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005e5e:	2302      	movs	r3, #2
  }
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3720      	adds	r7, #32
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e6c:	b08a      	sub	sp, #40	; 0x28
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e72:	2300      	movs	r3, #0
 8005e74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	689a      	ldr	r2, [r3, #8]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	431a      	orrs	r2, r3
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	431a      	orrs	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	69db      	ldr	r3, [r3, #28]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	4ba5      	ldr	r3, [pc, #660]	; (800612c <UART_SetConfig+0x2c4>)
 8005e98:	4013      	ands	r3, r2
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	6812      	ldr	r2, [r2, #0]
 8005e9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ea0:	430b      	orrs	r3, r1
 8005ea2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	68da      	ldr	r2, [r3, #12]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a9a      	ldr	r2, [pc, #616]	; (8006130 <UART_SetConfig+0x2c8>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d004      	beq.n	8005ed4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ee4:	430a      	orrs	r2, r1
 8005ee6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a91      	ldr	r2, [pc, #580]	; (8006134 <UART_SetConfig+0x2cc>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d126      	bne.n	8005f40 <UART_SetConfig+0xd8>
 8005ef2:	4b91      	ldr	r3, [pc, #580]	; (8006138 <UART_SetConfig+0x2d0>)
 8005ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ef8:	f003 0303 	and.w	r3, r3, #3
 8005efc:	2b03      	cmp	r3, #3
 8005efe:	d81b      	bhi.n	8005f38 <UART_SetConfig+0xd0>
 8005f00:	a201      	add	r2, pc, #4	; (adr r2, 8005f08 <UART_SetConfig+0xa0>)
 8005f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f06:	bf00      	nop
 8005f08:	08005f19 	.word	0x08005f19
 8005f0c:	08005f29 	.word	0x08005f29
 8005f10:	08005f21 	.word	0x08005f21
 8005f14:	08005f31 	.word	0x08005f31
 8005f18:	2301      	movs	r3, #1
 8005f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f1e:	e0d6      	b.n	80060ce <UART_SetConfig+0x266>
 8005f20:	2302      	movs	r3, #2
 8005f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f26:	e0d2      	b.n	80060ce <UART_SetConfig+0x266>
 8005f28:	2304      	movs	r3, #4
 8005f2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f2e:	e0ce      	b.n	80060ce <UART_SetConfig+0x266>
 8005f30:	2308      	movs	r3, #8
 8005f32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f36:	e0ca      	b.n	80060ce <UART_SetConfig+0x266>
 8005f38:	2310      	movs	r3, #16
 8005f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f3e:	e0c6      	b.n	80060ce <UART_SetConfig+0x266>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a7d      	ldr	r2, [pc, #500]	; (800613c <UART_SetConfig+0x2d4>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d138      	bne.n	8005fbc <UART_SetConfig+0x154>
 8005f4a:	4b7b      	ldr	r3, [pc, #492]	; (8006138 <UART_SetConfig+0x2d0>)
 8005f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f50:	f003 030c 	and.w	r3, r3, #12
 8005f54:	2b0c      	cmp	r3, #12
 8005f56:	d82d      	bhi.n	8005fb4 <UART_SetConfig+0x14c>
 8005f58:	a201      	add	r2, pc, #4	; (adr r2, 8005f60 <UART_SetConfig+0xf8>)
 8005f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f5e:	bf00      	nop
 8005f60:	08005f95 	.word	0x08005f95
 8005f64:	08005fb5 	.word	0x08005fb5
 8005f68:	08005fb5 	.word	0x08005fb5
 8005f6c:	08005fb5 	.word	0x08005fb5
 8005f70:	08005fa5 	.word	0x08005fa5
 8005f74:	08005fb5 	.word	0x08005fb5
 8005f78:	08005fb5 	.word	0x08005fb5
 8005f7c:	08005fb5 	.word	0x08005fb5
 8005f80:	08005f9d 	.word	0x08005f9d
 8005f84:	08005fb5 	.word	0x08005fb5
 8005f88:	08005fb5 	.word	0x08005fb5
 8005f8c:	08005fb5 	.word	0x08005fb5
 8005f90:	08005fad 	.word	0x08005fad
 8005f94:	2300      	movs	r3, #0
 8005f96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f9a:	e098      	b.n	80060ce <UART_SetConfig+0x266>
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fa2:	e094      	b.n	80060ce <UART_SetConfig+0x266>
 8005fa4:	2304      	movs	r3, #4
 8005fa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005faa:	e090      	b.n	80060ce <UART_SetConfig+0x266>
 8005fac:	2308      	movs	r3, #8
 8005fae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fb2:	e08c      	b.n	80060ce <UART_SetConfig+0x266>
 8005fb4:	2310      	movs	r3, #16
 8005fb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fba:	e088      	b.n	80060ce <UART_SetConfig+0x266>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a5f      	ldr	r2, [pc, #380]	; (8006140 <UART_SetConfig+0x2d8>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d125      	bne.n	8006012 <UART_SetConfig+0x1aa>
 8005fc6:	4b5c      	ldr	r3, [pc, #368]	; (8006138 <UART_SetConfig+0x2d0>)
 8005fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fcc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005fd0:	2b30      	cmp	r3, #48	; 0x30
 8005fd2:	d016      	beq.n	8006002 <UART_SetConfig+0x19a>
 8005fd4:	2b30      	cmp	r3, #48	; 0x30
 8005fd6:	d818      	bhi.n	800600a <UART_SetConfig+0x1a2>
 8005fd8:	2b20      	cmp	r3, #32
 8005fda:	d00a      	beq.n	8005ff2 <UART_SetConfig+0x18a>
 8005fdc:	2b20      	cmp	r3, #32
 8005fde:	d814      	bhi.n	800600a <UART_SetConfig+0x1a2>
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d002      	beq.n	8005fea <UART_SetConfig+0x182>
 8005fe4:	2b10      	cmp	r3, #16
 8005fe6:	d008      	beq.n	8005ffa <UART_SetConfig+0x192>
 8005fe8:	e00f      	b.n	800600a <UART_SetConfig+0x1a2>
 8005fea:	2300      	movs	r3, #0
 8005fec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ff0:	e06d      	b.n	80060ce <UART_SetConfig+0x266>
 8005ff2:	2302      	movs	r3, #2
 8005ff4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ff8:	e069      	b.n	80060ce <UART_SetConfig+0x266>
 8005ffa:	2304      	movs	r3, #4
 8005ffc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006000:	e065      	b.n	80060ce <UART_SetConfig+0x266>
 8006002:	2308      	movs	r3, #8
 8006004:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006008:	e061      	b.n	80060ce <UART_SetConfig+0x266>
 800600a:	2310      	movs	r3, #16
 800600c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006010:	e05d      	b.n	80060ce <UART_SetConfig+0x266>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a4b      	ldr	r2, [pc, #300]	; (8006144 <UART_SetConfig+0x2dc>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d125      	bne.n	8006068 <UART_SetConfig+0x200>
 800601c:	4b46      	ldr	r3, [pc, #280]	; (8006138 <UART_SetConfig+0x2d0>)
 800601e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006022:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006026:	2bc0      	cmp	r3, #192	; 0xc0
 8006028:	d016      	beq.n	8006058 <UART_SetConfig+0x1f0>
 800602a:	2bc0      	cmp	r3, #192	; 0xc0
 800602c:	d818      	bhi.n	8006060 <UART_SetConfig+0x1f8>
 800602e:	2b80      	cmp	r3, #128	; 0x80
 8006030:	d00a      	beq.n	8006048 <UART_SetConfig+0x1e0>
 8006032:	2b80      	cmp	r3, #128	; 0x80
 8006034:	d814      	bhi.n	8006060 <UART_SetConfig+0x1f8>
 8006036:	2b00      	cmp	r3, #0
 8006038:	d002      	beq.n	8006040 <UART_SetConfig+0x1d8>
 800603a:	2b40      	cmp	r3, #64	; 0x40
 800603c:	d008      	beq.n	8006050 <UART_SetConfig+0x1e8>
 800603e:	e00f      	b.n	8006060 <UART_SetConfig+0x1f8>
 8006040:	2300      	movs	r3, #0
 8006042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006046:	e042      	b.n	80060ce <UART_SetConfig+0x266>
 8006048:	2302      	movs	r3, #2
 800604a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800604e:	e03e      	b.n	80060ce <UART_SetConfig+0x266>
 8006050:	2304      	movs	r3, #4
 8006052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006056:	e03a      	b.n	80060ce <UART_SetConfig+0x266>
 8006058:	2308      	movs	r3, #8
 800605a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800605e:	e036      	b.n	80060ce <UART_SetConfig+0x266>
 8006060:	2310      	movs	r3, #16
 8006062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006066:	e032      	b.n	80060ce <UART_SetConfig+0x266>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a30      	ldr	r2, [pc, #192]	; (8006130 <UART_SetConfig+0x2c8>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d12a      	bne.n	80060c8 <UART_SetConfig+0x260>
 8006072:	4b31      	ldr	r3, [pc, #196]	; (8006138 <UART_SetConfig+0x2d0>)
 8006074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006078:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800607c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006080:	d01a      	beq.n	80060b8 <UART_SetConfig+0x250>
 8006082:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006086:	d81b      	bhi.n	80060c0 <UART_SetConfig+0x258>
 8006088:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800608c:	d00c      	beq.n	80060a8 <UART_SetConfig+0x240>
 800608e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006092:	d815      	bhi.n	80060c0 <UART_SetConfig+0x258>
 8006094:	2b00      	cmp	r3, #0
 8006096:	d003      	beq.n	80060a0 <UART_SetConfig+0x238>
 8006098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800609c:	d008      	beq.n	80060b0 <UART_SetConfig+0x248>
 800609e:	e00f      	b.n	80060c0 <UART_SetConfig+0x258>
 80060a0:	2300      	movs	r3, #0
 80060a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060a6:	e012      	b.n	80060ce <UART_SetConfig+0x266>
 80060a8:	2302      	movs	r3, #2
 80060aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060ae:	e00e      	b.n	80060ce <UART_SetConfig+0x266>
 80060b0:	2304      	movs	r3, #4
 80060b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060b6:	e00a      	b.n	80060ce <UART_SetConfig+0x266>
 80060b8:	2308      	movs	r3, #8
 80060ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060be:	e006      	b.n	80060ce <UART_SetConfig+0x266>
 80060c0:	2310      	movs	r3, #16
 80060c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060c6:	e002      	b.n	80060ce <UART_SetConfig+0x266>
 80060c8:	2310      	movs	r3, #16
 80060ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a17      	ldr	r2, [pc, #92]	; (8006130 <UART_SetConfig+0x2c8>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	f040 808b 	bne.w	80061f0 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80060da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060de:	2b08      	cmp	r3, #8
 80060e0:	d834      	bhi.n	800614c <UART_SetConfig+0x2e4>
 80060e2:	a201      	add	r2, pc, #4	; (adr r2, 80060e8 <UART_SetConfig+0x280>)
 80060e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e8:	0800610d 	.word	0x0800610d
 80060ec:	0800614d 	.word	0x0800614d
 80060f0:	08006115 	.word	0x08006115
 80060f4:	0800614d 	.word	0x0800614d
 80060f8:	0800611b 	.word	0x0800611b
 80060fc:	0800614d 	.word	0x0800614d
 8006100:	0800614d 	.word	0x0800614d
 8006104:	0800614d 	.word	0x0800614d
 8006108:	08006123 	.word	0x08006123
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800610c:	f7fd ff6e 	bl	8003fec <HAL_RCC_GetPCLK1Freq>
 8006110:	61f8      	str	r0, [r7, #28]
        break;
 8006112:	e021      	b.n	8006158 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006114:	4b0c      	ldr	r3, [pc, #48]	; (8006148 <UART_SetConfig+0x2e0>)
 8006116:	61fb      	str	r3, [r7, #28]
        break;
 8006118:	e01e      	b.n	8006158 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800611a:	f7fd fecf 	bl	8003ebc <HAL_RCC_GetSysClockFreq>
 800611e:	61f8      	str	r0, [r7, #28]
        break;
 8006120:	e01a      	b.n	8006158 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006126:	61fb      	str	r3, [r7, #28]
        break;
 8006128:	e016      	b.n	8006158 <UART_SetConfig+0x2f0>
 800612a:	bf00      	nop
 800612c:	efff69f3 	.word	0xefff69f3
 8006130:	40008000 	.word	0x40008000
 8006134:	40013800 	.word	0x40013800
 8006138:	40021000 	.word	0x40021000
 800613c:	40004400 	.word	0x40004400
 8006140:	40004800 	.word	0x40004800
 8006144:	40004c00 	.word	0x40004c00
 8006148:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800614c:	2300      	movs	r3, #0
 800614e:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006156:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	2b00      	cmp	r3, #0
 800615c:	f000 80fa 	beq.w	8006354 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	685a      	ldr	r2, [r3, #4]
 8006164:	4613      	mov	r3, r2
 8006166:	005b      	lsls	r3, r3, #1
 8006168:	4413      	add	r3, r2
 800616a:	69fa      	ldr	r2, [r7, #28]
 800616c:	429a      	cmp	r2, r3
 800616e:	d305      	bcc.n	800617c <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006176:	69fa      	ldr	r2, [r7, #28]
 8006178:	429a      	cmp	r2, r3
 800617a:	d903      	bls.n	8006184 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006182:	e0e7      	b.n	8006354 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	2200      	movs	r2, #0
 8006188:	461c      	mov	r4, r3
 800618a:	4615      	mov	r5, r2
 800618c:	f04f 0200 	mov.w	r2, #0
 8006190:	f04f 0300 	mov.w	r3, #0
 8006194:	022b      	lsls	r3, r5, #8
 8006196:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800619a:	0222      	lsls	r2, r4, #8
 800619c:	68f9      	ldr	r1, [r7, #12]
 800619e:	6849      	ldr	r1, [r1, #4]
 80061a0:	0849      	lsrs	r1, r1, #1
 80061a2:	2000      	movs	r0, #0
 80061a4:	4688      	mov	r8, r1
 80061a6:	4681      	mov	r9, r0
 80061a8:	eb12 0a08 	adds.w	sl, r2, r8
 80061ac:	eb43 0b09 	adc.w	fp, r3, r9
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	603b      	str	r3, [r7, #0]
 80061b8:	607a      	str	r2, [r7, #4]
 80061ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061be:	4650      	mov	r0, sl
 80061c0:	4659      	mov	r1, fp
 80061c2:	f7fa f98d 	bl	80004e0 <__aeabi_uldivmod>
 80061c6:	4602      	mov	r2, r0
 80061c8:	460b      	mov	r3, r1
 80061ca:	4613      	mov	r3, r2
 80061cc:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061d4:	d308      	bcc.n	80061e8 <UART_SetConfig+0x380>
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061dc:	d204      	bcs.n	80061e8 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	69ba      	ldr	r2, [r7, #24]
 80061e4:	60da      	str	r2, [r3, #12]
 80061e6:	e0b5      	b.n	8006354 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80061ee:	e0b1      	b.n	8006354 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	69db      	ldr	r3, [r3, #28]
 80061f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061f8:	d15d      	bne.n	80062b6 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 80061fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061fe:	2b08      	cmp	r3, #8
 8006200:	d827      	bhi.n	8006252 <UART_SetConfig+0x3ea>
 8006202:	a201      	add	r2, pc, #4	; (adr r2, 8006208 <UART_SetConfig+0x3a0>)
 8006204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006208:	0800622d 	.word	0x0800622d
 800620c:	08006235 	.word	0x08006235
 8006210:	0800623d 	.word	0x0800623d
 8006214:	08006253 	.word	0x08006253
 8006218:	08006243 	.word	0x08006243
 800621c:	08006253 	.word	0x08006253
 8006220:	08006253 	.word	0x08006253
 8006224:	08006253 	.word	0x08006253
 8006228:	0800624b 	.word	0x0800624b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800622c:	f7fd fede 	bl	8003fec <HAL_RCC_GetPCLK1Freq>
 8006230:	61f8      	str	r0, [r7, #28]
        break;
 8006232:	e014      	b.n	800625e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006234:	f7fd fef0 	bl	8004018 <HAL_RCC_GetPCLK2Freq>
 8006238:	61f8      	str	r0, [r7, #28]
        break;
 800623a:	e010      	b.n	800625e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800623c:	4b4c      	ldr	r3, [pc, #304]	; (8006370 <UART_SetConfig+0x508>)
 800623e:	61fb      	str	r3, [r7, #28]
        break;
 8006240:	e00d      	b.n	800625e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006242:	f7fd fe3b 	bl	8003ebc <HAL_RCC_GetSysClockFreq>
 8006246:	61f8      	str	r0, [r7, #28]
        break;
 8006248:	e009      	b.n	800625e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800624a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800624e:	61fb      	str	r3, [r7, #28]
        break;
 8006250:	e005      	b.n	800625e <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8006252:	2300      	movs	r3, #0
 8006254:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800625c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d077      	beq.n	8006354 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	005a      	lsls	r2, r3, #1
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	085b      	lsrs	r3, r3, #1
 800626e:	441a      	add	r2, r3
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	fbb2 f3f3 	udiv	r3, r2, r3
 8006278:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	2b0f      	cmp	r3, #15
 800627e:	d916      	bls.n	80062ae <UART_SetConfig+0x446>
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006286:	d212      	bcs.n	80062ae <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	b29b      	uxth	r3, r3
 800628c:	f023 030f 	bic.w	r3, r3, #15
 8006290:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	085b      	lsrs	r3, r3, #1
 8006296:	b29b      	uxth	r3, r3
 8006298:	f003 0307 	and.w	r3, r3, #7
 800629c:	b29a      	uxth	r2, r3
 800629e:	8afb      	ldrh	r3, [r7, #22]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	8afa      	ldrh	r2, [r7, #22]
 80062aa:	60da      	str	r2, [r3, #12]
 80062ac:	e052      	b.n	8006354 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80062b4:	e04e      	b.n	8006354 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062ba:	2b08      	cmp	r3, #8
 80062bc:	d827      	bhi.n	800630e <UART_SetConfig+0x4a6>
 80062be:	a201      	add	r2, pc, #4	; (adr r2, 80062c4 <UART_SetConfig+0x45c>)
 80062c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c4:	080062e9 	.word	0x080062e9
 80062c8:	080062f1 	.word	0x080062f1
 80062cc:	080062f9 	.word	0x080062f9
 80062d0:	0800630f 	.word	0x0800630f
 80062d4:	080062ff 	.word	0x080062ff
 80062d8:	0800630f 	.word	0x0800630f
 80062dc:	0800630f 	.word	0x0800630f
 80062e0:	0800630f 	.word	0x0800630f
 80062e4:	08006307 	.word	0x08006307
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062e8:	f7fd fe80 	bl	8003fec <HAL_RCC_GetPCLK1Freq>
 80062ec:	61f8      	str	r0, [r7, #28]
        break;
 80062ee:	e014      	b.n	800631a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062f0:	f7fd fe92 	bl	8004018 <HAL_RCC_GetPCLK2Freq>
 80062f4:	61f8      	str	r0, [r7, #28]
        break;
 80062f6:	e010      	b.n	800631a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062f8:	4b1d      	ldr	r3, [pc, #116]	; (8006370 <UART_SetConfig+0x508>)
 80062fa:	61fb      	str	r3, [r7, #28]
        break;
 80062fc:	e00d      	b.n	800631a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062fe:	f7fd fddd 	bl	8003ebc <HAL_RCC_GetSysClockFreq>
 8006302:	61f8      	str	r0, [r7, #28]
        break;
 8006304:	e009      	b.n	800631a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800630a:	61fb      	str	r3, [r7, #28]
        break;
 800630c:	e005      	b.n	800631a <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 800630e:	2300      	movs	r3, #0
 8006310:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006318:	bf00      	nop
    }

    if (pclk != 0U)
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d019      	beq.n	8006354 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	085a      	lsrs	r2, r3, #1
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	441a      	add	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006332:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	2b0f      	cmp	r3, #15
 8006338:	d909      	bls.n	800634e <UART_SetConfig+0x4e6>
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006340:	d205      	bcs.n	800634e <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	b29a      	uxth	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	60da      	str	r2, [r3, #12]
 800634c:	e002      	b.n	8006354 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006360:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006364:	4618      	mov	r0, r3
 8006366:	3728      	adds	r7, #40	; 0x28
 8006368:	46bd      	mov	sp, r7
 800636a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800636e:	bf00      	nop
 8006370:	00f42400 	.word	0x00f42400

08006374 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006380:	f003 0301 	and.w	r3, r3, #1
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00a      	beq.n	800639e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	430a      	orrs	r2, r1
 800639c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a2:	f003 0302 	and.w	r3, r3, #2
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00a      	beq.n	80063c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	430a      	orrs	r2, r1
 80063be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c4:	f003 0304 	and.w	r3, r3, #4
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00a      	beq.n	80063e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	430a      	orrs	r2, r1
 80063e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e6:	f003 0308 	and.w	r3, r3, #8
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00a      	beq.n	8006404 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	430a      	orrs	r2, r1
 8006402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006408:	f003 0310 	and.w	r3, r3, #16
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00a      	beq.n	8006426 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	430a      	orrs	r2, r1
 8006424:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642a:	f003 0320 	and.w	r3, r3, #32
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00a      	beq.n	8006448 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	430a      	orrs	r2, r1
 8006446:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006450:	2b00      	cmp	r3, #0
 8006452:	d01a      	beq.n	800648a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	430a      	orrs	r2, r1
 8006468:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006472:	d10a      	bne.n	800648a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	430a      	orrs	r2, r1
 8006488:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00a      	beq.n	80064ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	430a      	orrs	r2, r1
 80064aa:	605a      	str	r2, [r3, #4]
  }
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b086      	sub	sp, #24
 80064bc:	af02      	add	r7, sp, #8
 80064be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064c8:	f7fb f870 	bl	80015ac <HAL_GetTick>
 80064cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 0308 	and.w	r3, r3, #8
 80064d8:	2b08      	cmp	r3, #8
 80064da:	d10e      	bne.n	80064fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064e0:	9300      	str	r3, [sp, #0]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 f82d 	bl	800654a <UART_WaitOnFlagUntilTimeout>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d001      	beq.n	80064fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e023      	b.n	8006542 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 0304 	and.w	r3, r3, #4
 8006504:	2b04      	cmp	r3, #4
 8006506:	d10e      	bne.n	8006526 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006508:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800650c:	9300      	str	r3, [sp, #0]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 f817 	bl	800654a <UART_WaitOnFlagUntilTimeout>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d001      	beq.n	8006526 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e00d      	b.n	8006542 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2220      	movs	r2, #32
 800652a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2220      	movs	r2, #32
 8006530:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b09c      	sub	sp, #112	; 0x70
 800654e:	af00      	add	r7, sp, #0
 8006550:	60f8      	str	r0, [r7, #12]
 8006552:	60b9      	str	r1, [r7, #8]
 8006554:	603b      	str	r3, [r7, #0]
 8006556:	4613      	mov	r3, r2
 8006558:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800655a:	e0a5      	b.n	80066a8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800655c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800655e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006562:	f000 80a1 	beq.w	80066a8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006566:	f7fb f821 	bl	80015ac <HAL_GetTick>
 800656a:	4602      	mov	r2, r0
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	1ad3      	subs	r3, r2, r3
 8006570:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006572:	429a      	cmp	r2, r3
 8006574:	d302      	bcc.n	800657c <UART_WaitOnFlagUntilTimeout+0x32>
 8006576:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006578:	2b00      	cmp	r3, #0
 800657a:	d13e      	bne.n	80065fa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006584:	e853 3f00 	ldrex	r3, [r3]
 8006588:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800658a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800658c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006590:	667b      	str	r3, [r7, #100]	; 0x64
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	461a      	mov	r2, r3
 8006598:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800659a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800659c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80065a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065a2:	e841 2300 	strex	r3, r2, [r1]
 80065a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80065a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1e6      	bne.n	800657c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	3308      	adds	r3, #8
 80065b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065b8:	e853 3f00 	ldrex	r3, [r3]
 80065bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c0:	f023 0301 	bic.w	r3, r3, #1
 80065c4:	663b      	str	r3, [r7, #96]	; 0x60
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	3308      	adds	r3, #8
 80065cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80065ce:	64ba      	str	r2, [r7, #72]	; 0x48
 80065d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065d6:	e841 2300 	strex	r3, r2, [r1]
 80065da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80065dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1e5      	bne.n	80065ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2220      	movs	r2, #32
 80065e6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2220      	movs	r2, #32
 80065ec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e067      	b.n	80066ca <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0304 	and.w	r3, r3, #4
 8006604:	2b00      	cmp	r3, #0
 8006606:	d04f      	beq.n	80066a8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006612:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006616:	d147      	bne.n	80066a8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006620:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662a:	e853 3f00 	ldrex	r3, [r3]
 800662e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006632:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006636:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	461a      	mov	r2, r3
 800663e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006640:	637b      	str	r3, [r7, #52]	; 0x34
 8006642:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006644:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006646:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006648:	e841 2300 	strex	r3, r2, [r1]
 800664c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800664e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1e6      	bne.n	8006622 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	3308      	adds	r3, #8
 800665a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	e853 3f00 	ldrex	r3, [r3]
 8006662:	613b      	str	r3, [r7, #16]
   return(result);
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	f023 0301 	bic.w	r3, r3, #1
 800666a:	66bb      	str	r3, [r7, #104]	; 0x68
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	3308      	adds	r3, #8
 8006672:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006674:	623a      	str	r2, [r7, #32]
 8006676:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006678:	69f9      	ldr	r1, [r7, #28]
 800667a:	6a3a      	ldr	r2, [r7, #32]
 800667c:	e841 2300 	strex	r3, r2, [r1]
 8006680:	61bb      	str	r3, [r7, #24]
   return(result);
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1e5      	bne.n	8006654 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2220      	movs	r2, #32
 800668c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2220      	movs	r2, #32
 8006692:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2220      	movs	r2, #32
 8006698:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e010      	b.n	80066ca <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	69da      	ldr	r2, [r3, #28]
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	4013      	ands	r3, r2
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	bf0c      	ite	eq
 80066b8:	2301      	moveq	r3, #1
 80066ba:	2300      	movne	r3, #0
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	461a      	mov	r2, r3
 80066c0:	79fb      	ldrb	r3, [r7, #7]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	f43f af4a 	beq.w	800655c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3770      	adds	r7, #112	; 0x70
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
	...

080066d4 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b096      	sub	sp, #88	; 0x58
 80066d8:	af02      	add	r7, sp, #8
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
 80066e0:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 80066e2:	2234      	movs	r2, #52	; 0x34
 80066e4:	2100      	movs	r1, #0
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f009 f996 	bl	800fa18 <memset>

    /* Round the pool size down to something that is evenly divisible by 
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	f023 0303 	bic.w	r3, r3, #3
 80066f2:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	68ba      	ldr	r2, [r7, #8]
 80066f8:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	683a      	ldr	r2, [r7, #0]
 8006704:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the 
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	f1a3 0208 	sub.w	r2, r3, #8
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2202      	movs	r2, #2
 8006720:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */
    
    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	617b      	str	r3, [r7, #20]
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	4413      	add	r3, r2
 800672c:	617b      	str	r3, [r7, #20]

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	3b04      	subs	r3, #4
 8006732:	617b      	str	r3, [r7, #20]

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	647b      	str	r3, [r7, #68]	; 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  temp_ptr;
 800673c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800673e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006740:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	3b04      	subs	r3, #4
 8006746:	617b      	str	r3, [r7, #20]
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800674c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	647b      	str	r3, [r7, #68]	; 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8006756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006758:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  block_ptr;
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800675e:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	617b      	str	r3, [r7, #20]
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	3304      	adds	r3, #4
 8006768:	617b      	str	r3, [r7, #20]
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	63fb      	str	r3, [r7, #60]	; 0x3c
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800676e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006770:	4a5d      	ldr	r2, [pc, #372]	; (80068e8 <_tx_byte_pool_create+0x214>)
 8006772:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	621a      	str	r2, [r3, #32]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800677a:	f3ef 8310 	mrs	r3, PRIMASK
 800677e:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return(posture);
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 8006782:	623b      	str	r3, [r7, #32]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8006784:	b672      	cpsid	i
#endif
    return(int_posture);
 8006786:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8006788:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	4a57      	ldr	r2, [pc, #348]	; (80068ec <_tx_byte_pool_create+0x218>)
 800678e:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8006790:	4b57      	ldr	r3, [pc, #348]	; (80068f0 <_tx_byte_pool_create+0x21c>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d109      	bne.n	80067ac <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8006798:	4a56      	ldr	r2, [pc, #344]	; (80068f4 <_tx_byte_pool_create+0x220>)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	631a      	str	r2, [r3, #48]	; 0x30
 80067aa:	e011      	b.n	80067d0 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 80067ac:	4b51      	ldr	r3, [pc, #324]	; (80068f4 <_tx_byte_pool_create+0x220>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	637b      	str	r3, [r7, #52]	; 0x34
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 80067b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b6:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 80067b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 80067be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067c8:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067ce:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 80067d0:	4b47      	ldr	r3, [pc, #284]	; (80068f0 <_tx_byte_pool_create+0x21c>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	3301      	adds	r3, #1
 80067d6:	4a46      	ldr	r2, [pc, #280]	; (80068f0 <_tx_byte_pool_create+0x21c>)
 80067d8:	6013      	str	r3, [r2, #0]
    
    /* Optional byte pool create extended processing.  */
    TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_BYTE_POOL, pool_ptr, name_ptr, pool_size, 0)
 80067da:	2300      	movs	r3, #0
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	68f9      	ldr	r1, [r7, #12]
 80067e4:	2008      	movs	r0, #8
 80067e6:	f002 fd6d 	bl	80092c4 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_BYTE_POOL_CREATE, pool_ptr, TX_POINTER_TO_ULONG_CONVERT(pool_start), pool_size, TX_POINTER_TO_ULONG_CONVERT(&block_ptr), TX_TRACE_BYTE_POOL_EVENTS)
 80067ea:	4b43      	ldr	r3, [pc, #268]	; (80068f8 <_tx_byte_pool_create+0x224>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d06c      	beq.n	80068d0 <_tx_byte_pool_create+0x1fc>
 80067f6:	4b41      	ldr	r3, [pc, #260]	; (80068fc <_tx_byte_pool_create+0x228>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0304 	and.w	r3, r3, #4
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d066      	beq.n	80068d0 <_tx_byte_pool_create+0x1fc>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006802:	f3ef 8305 	mrs	r3, IPSR
 8006806:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8006808:	69fa      	ldr	r2, [r7, #28]
 800680a:	4b3d      	ldr	r3, [pc, #244]	; (8006900 <_tx_byte_pool_create+0x22c>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4313      	orrs	r3, r2
 8006810:	62bb      	str	r3, [r7, #40]	; 0x28
 8006812:	4b3c      	ldr	r3, [pc, #240]	; (8006904 <_tx_byte_pool_create+0x230>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	64bb      	str	r3, [r7, #72]	; 0x48
 8006818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10b      	bne.n	8006836 <_tx_byte_pool_create+0x162>
 800681e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006822:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006824:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006828:	041a      	lsls	r2, r3, #16
 800682a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800682c:	4313      	orrs	r3, r2
 800682e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006832:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006834:	e00e      	b.n	8006854 <_tx_byte_pool_create+0x180>
 8006836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006838:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800683c:	d205      	bcs.n	800684a <_tx_byte_pool_create+0x176>
 800683e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006840:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006842:	f04f 33ff 	mov.w	r3, #4294967295
 8006846:	64bb      	str	r3, [r7, #72]	; 0x48
 8006848:	e004      	b.n	8006854 <_tx_byte_pool_create+0x180>
 800684a:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800684e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006850:	2300      	movs	r3, #0
 8006852:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006854:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006858:	601a      	str	r2, [r3, #0]
 800685a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800685e:	605a      	str	r2, [r3, #4]
 8006860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006862:	2215      	movs	r2, #21
 8006864:	609a      	str	r2, [r3, #8]
 8006866:	4b28      	ldr	r3, [pc, #160]	; (8006908 <_tx_byte_pool_create+0x234>)
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686c:	60da      	str	r2, [r3, #12]
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006872:	611a      	str	r2, [r3, #16]
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006878:	615a      	str	r2, [r3, #20]
 800687a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800687c:	683a      	ldr	r2, [r7, #0]
 800687e:	619a      	str	r2, [r3, #24]
 8006880:	f107 0214 	add.w	r2, r7, #20
 8006884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006886:	61da      	str	r2, [r3, #28]
 8006888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688a:	3320      	adds	r3, #32
 800688c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800688e:	4b1f      	ldr	r3, [pc, #124]	; (800690c <_tx_byte_pool_create+0x238>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006894:	429a      	cmp	r2, r3
 8006896:	d314      	bcc.n	80068c2 <_tx_byte_pool_create+0x1ee>
 8006898:	4b1d      	ldr	r3, [pc, #116]	; (8006910 <_tx_byte_pool_create+0x23c>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800689e:	4a16      	ldr	r2, [pc, #88]	; (80068f8 <_tx_byte_pool_create+0x224>)
 80068a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a2:	6013      	str	r3, [r2, #0]
 80068a4:	4b1b      	ldr	r3, [pc, #108]	; (8006914 <_tx_byte_pool_create+0x240>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068aa:	621a      	str	r2, [r3, #32]
 80068ac:	4b1a      	ldr	r3, [pc, #104]	; (8006918 <_tx_byte_pool_create+0x244>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00d      	beq.n	80068d0 <_tx_byte_pool_create+0x1fc>
 80068b4:	4b18      	ldr	r3, [pc, #96]	; (8006918 <_tx_byte_pool_create+0x244>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a16      	ldr	r2, [pc, #88]	; (8006914 <_tx_byte_pool_create+0x240>)
 80068ba:	6812      	ldr	r2, [r2, #0]
 80068bc:	4610      	mov	r0, r2
 80068be:	4798      	blx	r3
 80068c0:	e006      	b.n	80068d0 <_tx_byte_pool_create+0x1fc>
 80068c2:	4a0d      	ldr	r2, [pc, #52]	; (80068f8 <_tx_byte_pool_create+0x224>)
 80068c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c6:	6013      	str	r3, [r2, #0]
 80068c8:	4b12      	ldr	r3, [pc, #72]	; (8006914 <_tx_byte_pool_create+0x240>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068ce:	621a      	str	r2, [r3, #32]
 80068d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	f383 8810 	msr	PRIMASK, r3
}
 80068da:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3750      	adds	r7, #80	; 0x50
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	ffffeeee 	.word	0xffffeeee
 80068ec:	42595445 	.word	0x42595445
 80068f0:	2000133c 	.word	0x2000133c
 80068f4:	20001338 	.word	0x20001338
 80068f8:	20001964 	.word	0x20001964
 80068fc:	20001968 	.word	0x20001968
 8006900:	2000000c 	.word	0x2000000c
 8006904:	20001348 	.word	0x20001348
 8006908:	e0001004 	.word	0xe0001004
 800690c:	20001960 	.word	0x20001960
 8006910:	2000195c 	.word	0x2000195c
 8006914:	20001950 	.word	0x20001950
 8006918:	2000196c 	.word	0x2000196c

0800691c <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	af00      	add	r7, sp, #0

    /* Initialize event tracing, if enabled.  */
    TX_TRACE_INITIALIZE
 8006920:	f002 fcaa 	bl	8009278 <_tx_trace_initialize>

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8006924:	f001 fbe6 	bl	80080f4 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8006928:	f002 fa92 	bl	8008e50 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800692c:	4b12      	ldr	r3, [pc, #72]	; (8006978 <_tx_initialize_high_level+0x5c>)
 800692e:	2200      	movs	r2, #0
 8006930:	601a      	str	r2, [r3, #0]
 8006932:	4b12      	ldr	r3, [pc, #72]	; (800697c <_tx_initialize_high_level+0x60>)
 8006934:	2200      	movs	r2, #0
 8006936:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8006938:	4b11      	ldr	r3, [pc, #68]	; (8006980 <_tx_initialize_high_level+0x64>)
 800693a:	2200      	movs	r2, #0
 800693c:	601a      	str	r2, [r3, #0]
 800693e:	4b11      	ldr	r3, [pc, #68]	; (8006984 <_tx_initialize_high_level+0x68>)
 8006940:	2200      	movs	r2, #0
 8006942:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8006944:	4b10      	ldr	r3, [pc, #64]	; (8006988 <_tx_initialize_high_level+0x6c>)
 8006946:	2200      	movs	r2, #0
 8006948:	601a      	str	r2, [r3, #0]
 800694a:	4b10      	ldr	r3, [pc, #64]	; (800698c <_tx_initialize_high_level+0x70>)
 800694c:	2200      	movs	r2, #0
 800694e:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8006950:	4b0f      	ldr	r3, [pc, #60]	; (8006990 <_tx_initialize_high_level+0x74>)
 8006952:	2200      	movs	r2, #0
 8006954:	601a      	str	r2, [r3, #0]
 8006956:	4b0f      	ldr	r3, [pc, #60]	; (8006994 <_tx_initialize_high_level+0x78>)
 8006958:	2200      	movs	r2, #0
 800695a:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800695c:	4b0e      	ldr	r3, [pc, #56]	; (8006998 <_tx_initialize_high_level+0x7c>)
 800695e:	2200      	movs	r2, #0
 8006960:	601a      	str	r2, [r3, #0]
 8006962:	4b0e      	ldr	r3, [pc, #56]	; (800699c <_tx_initialize_high_level+0x80>)
 8006964:	2200      	movs	r2, #0
 8006966:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8006968:	4b0d      	ldr	r3, [pc, #52]	; (80069a0 <_tx_initialize_high_level+0x84>)
 800696a:	2200      	movs	r2, #0
 800696c:	601a      	str	r2, [r3, #0]
 800696e:	4b0d      	ldr	r3, [pc, #52]	; (80069a4 <_tx_initialize_high_level+0x88>)
 8006970:	2200      	movs	r2, #0
 8006972:	601a      	str	r2, [r3, #0]
#endif
}
 8006974:	bf00      	nop
 8006976:	bd80      	pop	{r7, pc}
 8006978:	20001310 	.word	0x20001310
 800697c:	20001314 	.word	0x20001314
 8006980:	20001318 	.word	0x20001318
 8006984:	2000131c 	.word	0x2000131c
 8006988:	20001320 	.word	0x20001320
 800698c:	20001324 	.word	0x20001324
 8006990:	20001330 	.word	0x20001330
 8006994:	20001334 	.word	0x20001334
 8006998:	20001338 	.word	0x20001338
 800699c:	2000133c 	.word	0x2000133c
 80069a0:	20001328 	.word	0x20001328
 80069a4:	2000132c 	.word	0x2000132c

080069a8 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 80069ac:	4b10      	ldr	r3, [pc, #64]	; (80069f0 <_tx_initialize_kernel_enter+0x48>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 80069b4:	d00c      	beq.n	80069d0 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate 
           initialization is in progress.  Note that this variable is 
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80069b6:	4b0e      	ldr	r3, [pc, #56]	; (80069f0 <_tx_initialize_kernel_enter+0x48>)
 80069b8:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80069bc:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 80069be:	f7f9 fc0f 	bl	80001e0 <_tx_initialize_low_level>
    
        /* Invoke the high-level initialization to exercise all of the 
           ThreadX components and the application's initialization 
           function.  */
        _tx_initialize_high_level();
 80069c2:	f7ff ffab 	bl	800691c <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 80069c6:	4b0b      	ldr	r3, [pc, #44]	; (80069f4 <_tx_initialize_kernel_enter+0x4c>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	3301      	adds	r3, #1
 80069cc:	4a09      	ldr	r2, [pc, #36]	; (80069f4 <_tx_initialize_kernel_enter+0x4c>)
 80069ce:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate 
       initialization is in progress.  Note that this variable is 
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80069d0:	4b07      	ldr	r3, [pc, #28]	; (80069f0 <_tx_initialize_kernel_enter+0x48>)
 80069d2:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80069d6:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 80069d8:	4b07      	ldr	r3, [pc, #28]	; (80069f8 <_tx_initialize_kernel_enter+0x50>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4618      	mov	r0, r3
 80069de:	f7f9 ff01 	bl	80007e4 <tx_application_define>

    /* Set the system state in preparation for entering the thread 
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 80069e2:	4b03      	ldr	r3, [pc, #12]	; (80069f0 <_tx_initialize_kernel_enter+0x48>)
 80069e4:	2200      	movs	r2, #0
 80069e6:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 80069e8:	f7f9 fc3a 	bl	8000260 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80069ec:	bf00      	nop
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	2000000c 	.word	0x2000000c
 80069f4:	200013e0 	.word	0x200013e0
 80069f8:	20001340 	.word	0x20001340

080069fc <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b08e      	sub	sp, #56	; 0x38
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006a06:	f3ef 8310 	mrs	r3, PRIMASK
 8006a0a:	623b      	str	r3, [r7, #32]
    return(posture);
 8006a0c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8006a0e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006a10:	b672      	cpsid	i
    return(int_posture);
 8006a12:	69fb      	ldr	r3, [r7, #28]

    
#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 8006a14:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a1a:	4a37      	ldr	r2, [pc, #220]	; (8006af8 <_tx_queue_cleanup+0xfc>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d161      	bne.n	8006ae4 <_tx_queue_cleanup+0xe8>
    {
    
        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006a26:	683a      	ldr	r2, [r7, #0]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d15b      	bne.n	8006ae4 <_tx_queue_cleanup+0xe8>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a30:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 8006a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d055      	beq.n	8006ae4 <_tx_queue_cleanup+0xe8>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 8006a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a2f      	ldr	r2, [pc, #188]	; (8006afc <_tx_queue_cleanup+0x100>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d150      	bne.n	8006ae4 <_tx_queue_cleanup+0xe8>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 8006a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d04c      	beq.n	8006ae4 <_tx_queue_cleanup+0xe8>
#endif

                        /* Yes, we still have thread suspension!  */
    
                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 8006a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a54:	1e5a      	subs	r2, r3, #1
 8006a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a58:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8006a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5e:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8006a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d103      	bne.n	8006a6e <_tx_queue_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8006a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a68:	2200      	movs	r2, #0
 8006a6a:	629a      	str	r2, [r3, #40]	; 0x28
 8006a6c:	e013      	b.n	8006a96 <_tx_queue_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a72:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a78:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8006a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a7e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8006a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a84:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 8006a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d102      	bne.n	8006a96 <_tx_queue_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 8006a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a94:	629a      	str	r2, [r3, #40]	; 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a9a:	2b05      	cmp	r3, #5
 8006a9c:	d122      	bne.n	8006ae4 <_tx_queue_cleanup+0xe8>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 8006a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d004      	beq.n	8006ab0 <_tx_queue_cleanup+0xb4>
                            {
            
                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	220b      	movs	r2, #11
 8006aaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8006aae:	e003      	b.n	8006ab8 <_tx_queue_cleanup+0xbc>
                            }
                            else
                            {
            
                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	220a      	movs	r2, #10
 8006ab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8006ab8:	4b11      	ldr	r3, [pc, #68]	; (8006b00 <_tx_queue_cleanup+0x104>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	3301      	adds	r3, #1
 8006abe:	4a10      	ldr	r2, [pc, #64]	; (8006b00 <_tx_queue_cleanup+0x104>)
 8006ac0:	6013      	str	r3, [r2, #0]
 8006ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ac4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	f383 8810 	msr	PRIMASK, r3
}
 8006acc:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f001 fcd6 	bl	8008480 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006ad4:	f3ef 8310 	mrs	r3, PRIMASK
 8006ad8:	61bb      	str	r3, [r7, #24]
    return(posture);
 8006ada:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8006adc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006ade:	b672      	cpsid	i
    return(int_posture);
 8006ae0:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8006ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ae6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f383 8810 	msr	PRIMASK, r3
}
 8006aee:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8006af0:	bf00      	nop
 8006af2:	3738      	adds	r7, #56	; 0x38
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	080069fd 	.word	0x080069fd
 8006afc:	51554555 	.word	0x51554555
 8006b00:	200013e0 	.word	0x200013e0

08006b04 <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size, 
                        VOID *queue_start, ULONG queue_size)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b094      	sub	sp, #80	; 0x50
 8006b08:	af02      	add	r7, sp, #8
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]
 8006b10:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 8006b12:	2238      	movs	r2, #56	; 0x38
 8006b14:	2100      	movs	r1, #0
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f008 ff7e 	bl	800fa18 <memset>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	68ba      	ldr	r2, [r7, #8]
 8006b20:	605a      	str	r2, [r3, #4]
    
    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b32:	63fb      	str	r3, [r7, #60]	; 0x3c
    used_words =  capacity * message_size;
 8006b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	fb02 f303 	mul.w	r3, r2, r3
 8006b3c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Save the starting address and calculate the ending address of 
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	683a      	ldr	r2, [r7, #0]
 8006b42:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	699a      	ldr	r2, [r3, #24]
 8006b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	441a      	add	r2, r3
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	683a      	ldr	r2, [r7, #0]
 8006b56:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	683a      	ldr	r2, [r7, #0]
 8006b5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b62:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b68:	60da      	str	r2, [r3, #12]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006b6a:	f3ef 8310 	mrs	r3, PRIMASK
 8006b6e:	623b      	str	r3, [r7, #32]
    return(posture);
 8006b70:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8006b72:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006b74:	b672      	cpsid	i
    return(int_posture);
 8006b76:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 8006b78:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	4a55      	ldr	r2, [pc, #340]	; (8006cd4 <_tx_queue_create+0x1d0>)
 8006b7e:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 8006b80:	4b55      	ldr	r3, [pc, #340]	; (8006cd8 <_tx_queue_create+0x1d4>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d109      	bne.n	8006b9c <_tx_queue_create+0x98>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 8006b88:	4a54      	ldr	r2, [pc, #336]	; (8006cdc <_tx_queue_create+0x1d8>)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6013      	str	r3, [r2, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	631a      	str	r2, [r3, #48]	; 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	635a      	str	r2, [r3, #52]	; 0x34
 8006b9a:	e011      	b.n	8006bc0 <_tx_queue_create+0xbc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 8006b9c:	4b4f      	ldr	r3, [pc, #316]	; (8006cdc <_tx_queue_create+0x1d8>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	633b      	str	r3, [r7, #48]	; 0x30
        previous_queue =  next_queue -> tx_queue_created_previous;
 8006ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ba6:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 8006ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 8006bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bb8:	635a      	str	r2, [r3, #52]	; 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bbe:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 8006bc0:	4b45      	ldr	r3, [pc, #276]	; (8006cd8 <_tx_queue_create+0x1d4>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	4a44      	ldr	r2, [pc, #272]	; (8006cd8 <_tx_queue_create+0x1d4>)
 8006bc8:	6013      	str	r3, [r2, #0]

    /* Optional queue create extended processing.  */
    TX_QUEUE_CREATE_EXTENSION(queue_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_QUEUE, queue_ptr, name_ptr, queue_size, message_size)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	9300      	str	r3, [sp, #0]
 8006bce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bd0:	68ba      	ldr	r2, [r7, #8]
 8006bd2:	68f9      	ldr	r1, [r7, #12]
 8006bd4:	2003      	movs	r0, #3
 8006bd6:	f002 fb75 	bl	80092c4 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_CREATE, queue_ptr, message_size, TX_POINTER_TO_ULONG_CONVERT(queue_start), queue_size, TX_TRACE_QUEUE_EVENTS)
 8006bda:	4b41      	ldr	r3, [pc, #260]	; (8006ce0 <_tx_queue_create+0x1dc>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	62bb      	str	r3, [r7, #40]	; 0x28
 8006be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d06b      	beq.n	8006cbe <_tx_queue_create+0x1ba>
 8006be6:	4b3f      	ldr	r3, [pc, #252]	; (8006ce4 <_tx_queue_create+0x1e0>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d065      	beq.n	8006cbe <_tx_queue_create+0x1ba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006bf2:	f3ef 8305 	mrs	r3, IPSR
 8006bf6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8006bf8:	69ba      	ldr	r2, [r7, #24]
 8006bfa:	4b3b      	ldr	r3, [pc, #236]	; (8006ce8 <_tx_queue_create+0x1e4>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	627b      	str	r3, [r7, #36]	; 0x24
 8006c02:	4b3a      	ldr	r3, [pc, #232]	; (8006cec <_tx_queue_create+0x1e8>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	643b      	str	r3, [r7, #64]	; 0x40
 8006c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10b      	bne.n	8006c26 <_tx_queue_create+0x122>
 8006c0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c12:	647b      	str	r3, [r7, #68]	; 0x44
 8006c14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c18:	041a      	lsls	r2, r3, #16
 8006c1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c22:	647b      	str	r3, [r7, #68]	; 0x44
 8006c24:	e00e      	b.n	8006c44 <_tx_queue_create+0x140>
 8006c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c28:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8006c2c:	d205      	bcs.n	8006c3a <_tx_queue_create+0x136>
 8006c2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c30:	647b      	str	r3, [r7, #68]	; 0x44
 8006c32:	f04f 33ff 	mov.w	r3, #4294967295
 8006c36:	643b      	str	r3, [r7, #64]	; 0x40
 8006c38:	e004      	b.n	8006c44 <_tx_queue_create+0x140>
 8006c3a:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8006c3e:	643b      	str	r3, [r7, #64]	; 0x40
 8006c40:	2300      	movs	r3, #0
 8006c42:	647b      	str	r3, [r7, #68]	; 0x44
 8006c44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c48:	601a      	str	r2, [r3, #0]
 8006c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c4e:	605a      	str	r2, [r3, #4]
 8006c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c52:	223c      	movs	r2, #60	; 0x3c
 8006c54:	609a      	str	r2, [r3, #8]
 8006c56:	4b26      	ldr	r3, [pc, #152]	; (8006cf0 <_tx_queue_create+0x1ec>)
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5c:	60da      	str	r2, [r3, #12]
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c62:	611a      	str	r2, [r3, #16]
 8006c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	615a      	str	r2, [r3, #20]
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6e:	619a      	str	r2, [r3, #24]
 8006c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006c74:	61da      	str	r2, [r3, #28]
 8006c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c78:	3320      	adds	r3, #32
 8006c7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c7c:	4b1d      	ldr	r3, [pc, #116]	; (8006cf4 <_tx_queue_create+0x1f0>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d314      	bcc.n	8006cb0 <_tx_queue_create+0x1ac>
 8006c86:	4b1c      	ldr	r3, [pc, #112]	; (8006cf8 <_tx_queue_create+0x1f4>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c8c:	4a14      	ldr	r2, [pc, #80]	; (8006ce0 <_tx_queue_create+0x1dc>)
 8006c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c90:	6013      	str	r3, [r2, #0]
 8006c92:	4b1a      	ldr	r3, [pc, #104]	; (8006cfc <_tx_queue_create+0x1f8>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c98:	621a      	str	r2, [r3, #32]
 8006c9a:	4b19      	ldr	r3, [pc, #100]	; (8006d00 <_tx_queue_create+0x1fc>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00d      	beq.n	8006cbe <_tx_queue_create+0x1ba>
 8006ca2:	4b17      	ldr	r3, [pc, #92]	; (8006d00 <_tx_queue_create+0x1fc>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a15      	ldr	r2, [pc, #84]	; (8006cfc <_tx_queue_create+0x1f8>)
 8006ca8:	6812      	ldr	r2, [r2, #0]
 8006caa:	4610      	mov	r0, r2
 8006cac:	4798      	blx	r3
 8006cae:	e006      	b.n	8006cbe <_tx_queue_create+0x1ba>
 8006cb0:	4a0b      	ldr	r2, [pc, #44]	; (8006ce0 <_tx_queue_create+0x1dc>)
 8006cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb4:	6013      	str	r3, [r2, #0]
 8006cb6:	4b11      	ldr	r3, [pc, #68]	; (8006cfc <_tx_queue_create+0x1f8>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cbc:	621a      	str	r2, [r3, #32]
 8006cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cc0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	f383 8810 	msr	PRIMASK, r3
}
 8006cc8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8006cca:	2300      	movs	r3, #0
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3748      	adds	r7, #72	; 0x48
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	51554555 	.word	0x51554555
 8006cd8:	2000131c 	.word	0x2000131c
 8006cdc:	20001318 	.word	0x20001318
 8006ce0:	20001964 	.word	0x20001964
 8006ce4:	20001968 	.word	0x20001968
 8006ce8:	2000000c 	.word	0x2000000c
 8006cec:	20001348 	.word	0x20001348
 8006cf0:	e0001004 	.word	0xe0001004
 8006cf4:	20001960 	.word	0x20001960
 8006cf8:	2000195c 	.word	0x2000195c
 8006cfc:	20001950 	.word	0x20001950
 8006d00:	2000196c 	.word	0x2000196c

08006d04 <_tx_queue_flush>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_flush(TX_QUEUE *queue_ptr)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b094      	sub	sp, #80	; 0x50
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
UINT            suspended_count;
TX_THREAD       *thread_ptr;


    /* Initialize the suspended count and list.  */
    suspended_count =  TX_NO_SUSPENSIONS;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	64bb      	str	r3, [r7, #72]	; 0x48
    suspension_list =  TX_NULL;
 8006d10:	2300      	movs	r3, #0
 8006d12:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006d14:	f3ef 8310 	mrs	r3, PRIMASK
 8006d18:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 8006d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 8006d1e:	b672      	cpsid	i
    return(int_posture);
 8006d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to reset various queue parameters.  */
    TX_DISABLE
 8006d22:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_FLUSH, queue_ptr, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), 0, 0, TX_TRACE_QUEUE_EVENTS)
 8006d24:	4b76      	ldr	r3, [pc, #472]	; (8006f00 <_tx_queue_flush+0x1fc>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d06c      	beq.n	8006e0a <_tx_queue_flush+0x106>
 8006d30:	4b74      	ldr	r3, [pc, #464]	; (8006f04 <_tx_queue_flush+0x200>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d066      	beq.n	8006e0a <_tx_queue_flush+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006d3c:	f3ef 8305 	mrs	r3, IPSR
 8006d40:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8006d42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d44:	4b70      	ldr	r3, [pc, #448]	; (8006f08 <_tx_queue_flush+0x204>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	637b      	str	r3, [r7, #52]	; 0x34
 8006d4c:	4b6f      	ldr	r3, [pc, #444]	; (8006f0c <_tx_queue_flush+0x208>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	643b      	str	r3, [r7, #64]	; 0x40
 8006d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d10b      	bne.n	8006d70 <_tx_queue_flush+0x6c>
 8006d58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5c:	647b      	str	r3, [r7, #68]	; 0x44
 8006d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d62:	041a      	lsls	r2, r3, #16
 8006d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d66:	4313      	orrs	r3, r2
 8006d68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d6c:	647b      	str	r3, [r7, #68]	; 0x44
 8006d6e:	e00e      	b.n	8006d8e <_tx_queue_flush+0x8a>
 8006d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d72:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8006d76:	d205      	bcs.n	8006d84 <_tx_queue_flush+0x80>
 8006d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d7a:	647b      	str	r3, [r7, #68]	; 0x44
 8006d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d80:	643b      	str	r3, [r7, #64]	; 0x40
 8006d82:	e004      	b.n	8006d8e <_tx_queue_flush+0x8a>
 8006d84:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8006d88:	643b      	str	r3, [r7, #64]	; 0x40
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	647b      	str	r3, [r7, #68]	; 0x44
 8006d8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d92:	601a      	str	r2, [r3, #0]
 8006d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d98:	605a      	str	r2, [r3, #4]
 8006d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9c:	223e      	movs	r2, #62	; 0x3e
 8006d9e:	609a      	str	r2, [r3, #8]
 8006da0:	4b5b      	ldr	r3, [pc, #364]	; (8006f10 <_tx_queue_flush+0x20c>)
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da6:	60da      	str	r2, [r3, #12]
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dac:	611a      	str	r2, [r3, #16]
 8006dae:	f107 0208 	add.w	r2, r7, #8
 8006db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db4:	615a      	str	r2, [r3, #20]
 8006db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db8:	2200      	movs	r2, #0
 8006dba:	619a      	str	r2, [r3, #24]
 8006dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	61da      	str	r2, [r3, #28]
 8006dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc4:	3320      	adds	r3, #32
 8006dc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006dc8:	4b52      	ldr	r3, [pc, #328]	; (8006f14 <_tx_queue_flush+0x210>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d314      	bcc.n	8006dfc <_tx_queue_flush+0xf8>
 8006dd2:	4b51      	ldr	r3, [pc, #324]	; (8006f18 <_tx_queue_flush+0x214>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006dd8:	4a49      	ldr	r2, [pc, #292]	; (8006f00 <_tx_queue_flush+0x1fc>)
 8006dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ddc:	6013      	str	r3, [r2, #0]
 8006dde:	4b4f      	ldr	r3, [pc, #316]	; (8006f1c <_tx_queue_flush+0x218>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006de4:	621a      	str	r2, [r3, #32]
 8006de6:	4b4e      	ldr	r3, [pc, #312]	; (8006f20 <_tx_queue_flush+0x21c>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00d      	beq.n	8006e0a <_tx_queue_flush+0x106>
 8006dee:	4b4c      	ldr	r3, [pc, #304]	; (8006f20 <_tx_queue_flush+0x21c>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a4a      	ldr	r2, [pc, #296]	; (8006f1c <_tx_queue_flush+0x218>)
 8006df4:	6812      	ldr	r2, [r2, #0]
 8006df6:	4610      	mov	r0, r2
 8006df8:	4798      	blx	r3
 8006dfa:	e006      	b.n	8006e0a <_tx_queue_flush+0x106>
 8006dfc:	4a40      	ldr	r2, [pc, #256]	; (8006f00 <_tx_queue_flush+0x1fc>)
 8006dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e00:	6013      	str	r3, [r2, #0]
 8006e02:	4b46      	ldr	r3, [pc, #280]	; (8006f1c <_tx_queue_flush+0x218>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e08:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_QUEUE_FLUSH_INSERT

    /* Determine if there is something on the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d023      	beq.n	8006e5a <_tx_queue_flush+0x156>
    {

        /* Yes, there is something in the queue.  */

        /* Reset the queue parameters to erase all of the queued messages.  */
        queue_ptr -> tx_queue_enqueued =           TX_NO_MESSAGES;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	611a      	str	r2, [r3, #16]
        queue_ptr -> tx_queue_available_storage =  queue_ptr -> tx_queue_capacity;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	68da      	ldr	r2, [r3, #12]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	615a      	str	r2, [r3, #20]
        queue_ptr -> tx_queue_read =               queue_ptr -> tx_queue_start;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	699a      	ldr	r2, [r3, #24]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	621a      	str	r2, [r3, #32]
        queue_ptr -> tx_queue_write =              queue_ptr -> tx_queue_start;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	699a      	ldr	r2, [r3, #24]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Now determine if there are any threads suspended on a full queue.  */
        if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d010      	beq.n	8006e5a <_tx_queue_flush+0x156>

            /* Yes, there are threads suspended on this queue, they must be 
               resumed!  */

            /* Copy the information into temporary variables.  */
            suspension_list =  queue_ptr -> tx_queue_suspension_list;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
            suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e42:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Clear the queue variables.  */
            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	629a      	str	r2, [r3, #40]	; 0x28
            queue_ptr -> tx_queue_suspended_count =  TX_NO_SUSPENSIONS;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8006e50:	4b34      	ldr	r3, [pc, #208]	; (8006f24 <_tx_queue_flush+0x220>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	3301      	adds	r3, #1
 8006e56:	4a33      	ldr	r2, [pc, #204]	; (8006f24 <_tx_queue_flush+0x220>)
 8006e58:	6013      	str	r3, [r2, #0]
 8006e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e5c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e60:	f383 8810 	msr	PRIMASK, r3
}
 8006e64:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the queue list to resume any and all threads suspended
       on this queue.  */
    if (suspended_count != TX_NO_SUSPENSIONS)
 8006e66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d044      	beq.n	8006ef6 <_tx_queue_flush+0x1f2>
    {

        /* Pickup the thread to resume.  */
        thread_ptr =  suspension_list;
 8006e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e6e:	60bb      	str	r3, [r7, #8]
        while (suspended_count != ((ULONG) 0))
 8006e70:	e027      	b.n	8006ec2 <_tx_queue_flush+0x1be>
        {
        
            /* Decrement the suspension count.  */
            suspended_count--;
 8006e72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e74:	3b01      	subs	r3, #1
 8006e76:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Check for a NULL thread pointer.  */
            if (thread_ptr == TX_NULL)
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d025      	beq.n	8006eca <_tx_queue_flush+0x1c6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006e7e:	f3ef 8310 	mrs	r3, PRIMASK
 8006e82:	61fb      	str	r3, [r7, #28]
    return(posture);
 8006e84:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8006e86:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006e88:	b672      	cpsid	i
    return(int_posture);
 8006e8a:	69bb      	ldr	r3, [r7, #24]
            }

            /* Resume the next suspended thread.  */
            
            /* Lockout interrupts.  */
            TX_DISABLE
 8006e8c:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Clear the cleanup pointer, this prevents the timeout from doing 
               anything.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	2200      	movs	r2, #0
 8006e92:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set the return status in the thread to TX_SUCCESS.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Move the thread pointer ahead.  */
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea0:	60bb      	str	r3, [r7, #8]
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption again.  */
            _tx_thread_preempt_disable++;
 8006ea2:	4b20      	ldr	r3, [pc, #128]	; (8006f24 <_tx_queue_flush+0x220>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	4a1e      	ldr	r2, [pc, #120]	; (8006f24 <_tx_queue_flush+0x220>)
 8006eaa:	6013      	str	r3, [r2, #0]
 8006eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eae:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006eb0:	6a3b      	ldr	r3, [r7, #32]
 8006eb2:	f383 8810 	msr	PRIMASK, r3
}
 8006eb6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE
    
            /* Resume the thread.  */
            _tx_thread_system_resume(thread_ptr -> tx_thread_suspended_previous);
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f001 fadf 	bl	8008480 <_tx_thread_system_resume>
        while (suspended_count != ((ULONG) 0))
 8006ec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1d4      	bne.n	8006e72 <_tx_queue_flush+0x16e>
 8006ec8:	e000      	b.n	8006ecc <_tx_queue_flush+0x1c8>
                break;
 8006eca:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006ecc:	f3ef 8310 	mrs	r3, PRIMASK
 8006ed0:	613b      	str	r3, [r7, #16]
    return(posture);
 8006ed2:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8006ed4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006ed6:	b672      	cpsid	i
    return(int_posture);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
#endif
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8006eda:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Restore previous preempt posture.  */
        _tx_thread_preempt_disable--;
 8006edc:	4b11      	ldr	r3, [pc, #68]	; (8006f24 <_tx_queue_flush+0x220>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	4a10      	ldr	r2, [pc, #64]	; (8006f24 <_tx_queue_flush+0x220>)
 8006ee4:	6013      	str	r3, [r2, #0]
 8006ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ee8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	f383 8810 	msr	PRIMASK, r3
}
 8006ef0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8006ef2:	f001 fa8b 	bl	800840c <_tx_thread_system_preempt_check>
    }

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3750      	adds	r7, #80	; 0x50
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	20001964 	.word	0x20001964
 8006f04:	20001968 	.word	0x20001968
 8006f08:	2000000c 	.word	0x2000000c
 8006f0c:	20001348 	.word	0x20001348
 8006f10:	e0001004 	.word	0xe0001004
 8006f14:	20001960 	.word	0x20001960
 8006f18:	2000195c 	.word	0x2000195c
 8006f1c:	20001950 	.word	0x20001950
 8006f20:	2000196c 	.word	0x2000196c
 8006f24:	200013e0 	.word	0x200013e0

08006f28 <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b09a      	sub	sp, #104	; 0x68
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8006f34:	2300      	movs	r3, #0
 8006f36:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006f38:	f3ef 8310 	mrs	r3, PRIMASK
 8006f3c:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 8006f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 8006f40:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 8006f42:	b672      	cpsid	i
    return(int_posture);
 8006f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 8006f46:	64fb      	str	r3, [r7, #76]	; 0x4c
    queue_ptr -> tx_queue_performance_messages_received_count++;

#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_RECEIVE, queue_ptr, TX_POINTER_TO_ULONG_CONVERT(destination_ptr), wait_option, queue_ptr -> tx_queue_enqueued, TX_TRACE_QUEUE_EVENTS)
 8006f48:	4b77      	ldr	r3, [pc, #476]	; (8007128 <_tx_queue_receive+0x200>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d06c      	beq.n	800702e <_tx_queue_receive+0x106>
 8006f54:	4b75      	ldr	r3, [pc, #468]	; (800712c <_tx_queue_receive+0x204>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d066      	beq.n	800702e <_tx_queue_receive+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006f60:	f3ef 8305 	mrs	r3, IPSR
 8006f64:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8006f66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f68:	4b71      	ldr	r3, [pc, #452]	; (8007130 <_tx_queue_receive+0x208>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	647b      	str	r3, [r7, #68]	; 0x44
 8006f70:	4b70      	ldr	r3, [pc, #448]	; (8007134 <_tx_queue_receive+0x20c>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	653b      	str	r3, [r7, #80]	; 0x50
 8006f76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d10b      	bne.n	8006f94 <_tx_queue_receive+0x6c>
 8006f7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f80:	657b      	str	r3, [r7, #84]	; 0x54
 8006f82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f86:	041a      	lsls	r2, r3, #16
 8006f88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f90:	657b      	str	r3, [r7, #84]	; 0x54
 8006f92:	e00e      	b.n	8006fb2 <_tx_queue_receive+0x8a>
 8006f94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f96:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8006f9a:	d205      	bcs.n	8006fa8 <_tx_queue_receive+0x80>
 8006f9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f9e:	657b      	str	r3, [r7, #84]	; 0x54
 8006fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8006fa4:	653b      	str	r3, [r7, #80]	; 0x50
 8006fa6:	e004      	b.n	8006fb2 <_tx_queue_receive+0x8a>
 8006fa8:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8006fac:	653b      	str	r3, [r7, #80]	; 0x50
 8006fae:	2300      	movs	r3, #0
 8006fb0:	657b      	str	r3, [r7, #84]	; 0x54
 8006fb2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006fb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fb6:	601a      	str	r2, [r3, #0]
 8006fb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006fbc:	605a      	str	r2, [r3, #4]
 8006fbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fc0:	2244      	movs	r2, #68	; 0x44
 8006fc2:	609a      	str	r2, [r3, #8]
 8006fc4:	4b5c      	ldr	r3, [pc, #368]	; (8007138 <_tx_queue_receive+0x210>)
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fca:	60da      	str	r2, [r3, #12]
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fd0:	611a      	str	r2, [r3, #16]
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fd6:	615a      	str	r2, [r3, #20]
 8006fd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	619a      	str	r2, [r3, #24]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	691a      	ldr	r2, [r3, #16]
 8006fe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fe4:	61da      	str	r2, [r3, #28]
 8006fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fe8:	3320      	adds	r3, #32
 8006fea:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fec:	4b53      	ldr	r3, [pc, #332]	; (800713c <_tx_queue_receive+0x214>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d314      	bcc.n	8007020 <_tx_queue_receive+0xf8>
 8006ff6:	4b52      	ldr	r3, [pc, #328]	; (8007140 <_tx_queue_receive+0x218>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ffc:	4a4a      	ldr	r2, [pc, #296]	; (8007128 <_tx_queue_receive+0x200>)
 8006ffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007000:	6013      	str	r3, [r2, #0]
 8007002:	4b50      	ldr	r3, [pc, #320]	; (8007144 <_tx_queue_receive+0x21c>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007008:	621a      	str	r2, [r3, #32]
 800700a:	4b4f      	ldr	r3, [pc, #316]	; (8007148 <_tx_queue_receive+0x220>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00d      	beq.n	800702e <_tx_queue_receive+0x106>
 8007012:	4b4d      	ldr	r3, [pc, #308]	; (8007148 <_tx_queue_receive+0x220>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a4b      	ldr	r2, [pc, #300]	; (8007144 <_tx_queue_receive+0x21c>)
 8007018:	6812      	ldr	r2, [r2, #0]
 800701a:	4610      	mov	r0, r2
 800701c:	4798      	blx	r3
 800701e:	e006      	b.n	800702e <_tx_queue_receive+0x106>
 8007020:	4a41      	ldr	r2, [pc, #260]	; (8007128 <_tx_queue_receive+0x200>)
 8007022:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007024:	6013      	str	r3, [r2, #0]
 8007026:	4b47      	ldr	r3, [pc, #284]	; (8007144 <_tx_queue_receive+0x21c>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800702c:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007032:	643b      	str	r3, [r7, #64]	; 0x40
    
    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	2b00      	cmp	r3, #0
 800703a:	f000 8149 	beq.w	80072d0 <_tx_queue_receive+0x3a8>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 800703e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007040:	2b00      	cmp	r3, #0
 8007042:	d13c      	bne.n	80070be <_tx_queue_receive+0x196>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */
            
            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6a1b      	ldr	r3, [r3, #32]
 8007048:	667b      	str	r3, [r7, #100]	; 0x64
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	663b      	str	r3, [r7, #96]	; 0x60
            size =         queue_ptr -> tx_queue_message_size;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Copy message. Note that the source and destination pointers are 
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8007054:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007056:	1d13      	adds	r3, r2, #4
 8007058:	667b      	str	r3, [r7, #100]	; 0x64
 800705a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800705c:	1d19      	adds	r1, r3, #4
 800705e:	6639      	str	r1, [r7, #96]	; 0x60
 8007060:	6812      	ldr	r2, [r2, #0]
 8007062:	601a      	str	r2, [r3, #0]
 8007064:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007066:	2b01      	cmp	r3, #1
 8007068:	d90e      	bls.n	8007088 <_tx_queue_receive+0x160>
 800706a:	e007      	b.n	800707c <_tx_queue_receive+0x154>
 800706c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800706e:	1d13      	adds	r3, r2, #4
 8007070:	667b      	str	r3, [r7, #100]	; 0x64
 8007072:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007074:	1d19      	adds	r1, r3, #4
 8007076:	6639      	str	r1, [r7, #96]	; 0x60
 8007078:	6812      	ldr	r2, [r2, #0]
 800707a:	601a      	str	r2, [r3, #0]
 800707c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800707e:	3b01      	subs	r3, #1
 8007080:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007082:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007084:	2b00      	cmp	r3, #0
 8007086:	d1f1      	bne.n	800706c <_tx_queue_receive+0x144>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	69db      	ldr	r3, [r3, #28]
 800708c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800708e:	429a      	cmp	r2, r3
 8007090:	d102      	bne.n	8007098 <_tx_queue_receive+0x170>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	699b      	ldr	r3, [r3, #24]
 8007096:	667b      	str	r3, [r7, #100]	; 0x64
            }
        
            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800709c:	621a      	str	r2, [r3, #32]
        
            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	1c5a      	adds	r2, r3, #1
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	1e5a      	subs	r2, r3, #1
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	611a      	str	r2, [r3, #16]
 80070b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070b4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80070b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b8:	f383 8810 	msr	PRIMASK, r3
}
 80070bc:	e176      	b.n	80073ac <_tx_queue_receive+0x484>
        {
        
            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c2:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Now determine if there is a queue front suspension active.   */
    
            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 80070c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d166      	bne.n	800719c <_tx_queue_receive+0x274>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 80070ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070d2:	667b      	str	r3, [r7, #100]	; 0x64
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	663b      	str	r3, [r7, #96]	; 0x60
                size =         queue_ptr -> tx_queue_message_size;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Copy message. Note that the source and destination pointers are 
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80070de:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80070e0:	1d13      	adds	r3, r2, #4
 80070e2:	667b      	str	r3, [r7, #100]	; 0x64
 80070e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070e6:	1d19      	adds	r1, r3, #4
 80070e8:	6639      	str	r1, [r7, #96]	; 0x60
 80070ea:	6812      	ldr	r2, [r2, #0]
 80070ec:	601a      	str	r2, [r3, #0]
 80070ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d90e      	bls.n	8007112 <_tx_queue_receive+0x1ea>
 80070f4:	e007      	b.n	8007106 <_tx_queue_receive+0x1de>
 80070f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80070f8:	1d13      	adds	r3, r2, #4
 80070fa:	667b      	str	r3, [r7, #100]	; 0x64
 80070fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070fe:	1d19      	adds	r1, r3, #4
 8007100:	6639      	str	r1, [r7, #96]	; 0x60
 8007102:	6812      	ldr	r2, [r2, #0]
 8007104:	601a      	str	r2, [r3, #0]
 8007106:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007108:	3b01      	subs	r3, #1
 800710a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800710c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1f1      	bne.n	80070f6 <_tx_queue_receive+0x1ce>

                /* Message is now in the caller's destination. See if this is the only suspended thread 
                   on the list.  */
                suspended_count--;
 8007112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007114:	3b01      	subs	r3, #1
 8007116:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 8007118:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800711a:	2b00      	cmp	r3, #0
 800711c:	d116      	bne.n	800714c <_tx_queue_receive+0x224>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2200      	movs	r2, #0
 8007122:	629a      	str	r2, [r3, #40]	; 0x28
 8007124:	e021      	b.n	800716a <_tx_queue_receive+0x242>
 8007126:	bf00      	nop
 8007128:	20001964 	.word	0x20001964
 800712c:	20001968 	.word	0x20001968
 8007130:	2000000c 	.word	0x2000000c
 8007134:	20001348 	.word	0x20001348
 8007138:	e0001004 	.word	0xe0001004
 800713c:	20001960 	.word	0x20001960
 8007140:	2000195c 	.word	0x2000195c
 8007144:	20001950 	.word	0x20001950
 8007148:	2000196c 	.word	0x2000196c
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800714c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800714e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007150:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007156:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8007158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800715a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800715c:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 800715e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007160:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007162:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 8007164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007166:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007168:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800716e:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8007170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007172:	2200      	movs	r2, #0
 8007174:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8007176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007178:	2200      	movs	r2, #0
 800717a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800717e:	4b8e      	ldr	r3, [pc, #568]	; (80073b8 <_tx_queue_receive+0x490>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	3301      	adds	r3, #1
 8007184:	4a8c      	ldr	r2, [pc, #560]	; (80073b8 <_tx_queue_receive+0x490>)
 8007186:	6013      	str	r3, [r2, #0]
 8007188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800718a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800718c:	6a3b      	ldr	r3, [r7, #32]
 800718e:	f383 8810 	msr	PRIMASK, r3
}
 8007192:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 8007194:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007196:	f001 f973 	bl	8008480 <_tx_thread_system_resume>
 800719a:	e107      	b.n	80073ac <_tx_queue_receive+0x484>
                /* At this point, we know that the queue is full and there 
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6a1b      	ldr	r3, [r3, #32]
 80071a0:	667b      	str	r3, [r7, #100]	; 0x64
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	663b      	str	r3, [r7, #96]	; 0x60
                size =         queue_ptr -> tx_queue_message_size;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Copy message. Note that the source and destination pointers are 
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80071ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80071ae:	1d13      	adds	r3, r2, #4
 80071b0:	667b      	str	r3, [r7, #100]	; 0x64
 80071b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071b4:	1d19      	adds	r1, r3, #4
 80071b6:	6639      	str	r1, [r7, #96]	; 0x60
 80071b8:	6812      	ldr	r2, [r2, #0]
 80071ba:	601a      	str	r2, [r3, #0]
 80071bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d90e      	bls.n	80071e0 <_tx_queue_receive+0x2b8>
 80071c2:	e007      	b.n	80071d4 <_tx_queue_receive+0x2ac>
 80071c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80071c6:	1d13      	adds	r3, r2, #4
 80071c8:	667b      	str	r3, [r7, #100]	; 0x64
 80071ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071cc:	1d19      	adds	r1, r3, #4
 80071ce:	6639      	str	r1, [r7, #96]	; 0x60
 80071d0:	6812      	ldr	r2, [r2, #0]
 80071d2:	601a      	str	r2, [r3, #0]
 80071d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071d6:	3b01      	subs	r3, #1
 80071d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1f1      	bne.n	80071c4 <_tx_queue_receive+0x29c>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	69db      	ldr	r3, [r3, #28]
 80071e4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d102      	bne.n	80071f0 <_tx_queue_receive+0x2c8>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	667b      	str	r3, [r7, #100]	; 0x64
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80071f4:	621a      	str	r2, [r3, #32]
  
                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 80071f6:	4b70      	ldr	r3, [pc, #448]	; (80073b8 <_tx_queue_receive+0x490>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	3301      	adds	r3, #1
 80071fc:	4a6e      	ldr	r2, [pc, #440]	; (80073b8 <_tx_queue_receive+0x490>)
 80071fe:	6013      	str	r3, [r2, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 8007200:	4b6d      	ldr	r3, [pc, #436]	; (80073b8 <_tx_queue_receive+0x490>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	3b01      	subs	r3, #1
 8007206:	4a6c      	ldr	r2, [pc, #432]	; (80073b8 <_tx_queue_receive+0x490>)
 8007208:	6013      	str	r3, [r2, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800720a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800720c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800720e:	667b      	str	r3, [r7, #100]	; 0x64
                destination =  queue_ptr -> tx_queue_write;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007214:	663b      	str	r3, [r7, #96]	; 0x60
                size =         queue_ptr -> tx_queue_message_size;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Copy message. Note that the source and destination pointers are 
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800721c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800721e:	1d13      	adds	r3, r2, #4
 8007220:	667b      	str	r3, [r7, #100]	; 0x64
 8007222:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007224:	1d19      	adds	r1, r3, #4
 8007226:	6639      	str	r1, [r7, #96]	; 0x60
 8007228:	6812      	ldr	r2, [r2, #0]
 800722a:	601a      	str	r2, [r3, #0]
 800722c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800722e:	2b01      	cmp	r3, #1
 8007230:	d90e      	bls.n	8007250 <_tx_queue_receive+0x328>
 8007232:	e007      	b.n	8007244 <_tx_queue_receive+0x31c>
 8007234:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007236:	1d13      	adds	r3, r2, #4
 8007238:	667b      	str	r3, [r7, #100]	; 0x64
 800723a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800723c:	1d19      	adds	r1, r3, #4
 800723e:	6639      	str	r1, [r7, #96]	; 0x60
 8007240:	6812      	ldr	r2, [r2, #0]
 8007242:	601a      	str	r2, [r3, #0]
 8007244:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007246:	3b01      	subs	r3, #1
 8007248:	65fb      	str	r3, [r7, #92]	; 0x5c
 800724a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1f1      	bne.n	8007234 <_tx_queue_receive+0x30c>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	69db      	ldr	r3, [r3, #28]
 8007254:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007256:	429a      	cmp	r2, r3
 8007258:	d102      	bne.n	8007260 <_tx_queue_receive+0x338>
                {
            
                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	663b      	str	r3, [r7, #96]	; 0x60
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007264:	625a      	str	r2, [r3, #36]	; 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800726a:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Message is now in the queue.  See if this is the only suspended thread 
                   on the list.  */
                suspended_count--;
 800726c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800726e:	3b01      	subs	r3, #1
 8007270:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 8007272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007274:	2b00      	cmp	r3, #0
 8007276:	d103      	bne.n	8007280 <_tx_queue_receive+0x358>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2200      	movs	r2, #0
 800727c:	629a      	str	r2, [r3, #40]	; 0x28
 800727e:	e00e      	b.n	800729e <_tx_queue_receive+0x376>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8007280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007284:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800728a:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800728c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800728e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007290:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 8007292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007294:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007296:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 8007298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800729a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800729c:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072a2:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80072a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072a6:	2200      	movs	r2, #0
 80072a8:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80072aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ac:	2200      	movs	r2, #0
 80072ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 80072b2:	4b41      	ldr	r3, [pc, #260]	; (80073b8 <_tx_queue_receive+0x490>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	3301      	adds	r3, #1
 80072b8:	4a3f      	ldr	r2, [pc, #252]	; (80073b8 <_tx_queue_receive+0x490>)
 80072ba:	6013      	str	r3, [r2, #0]
 80072bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072be:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	f383 8810 	msr	PRIMASK, r3
}
 80072c6:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 80072c8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80072ca:	f001 f8d9 	bl	8008480 <_tx_thread_system_resume>
 80072ce:	e06d      	b.n	80073ac <_tx_queue_receive+0x484>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d062      	beq.n	800739c <_tx_queue_receive+0x474>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80072d6:	4b38      	ldr	r3, [pc, #224]	; (80073b8 <_tx_queue_receive+0x490>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d008      	beq.n	80072f0 <_tx_queue_receive+0x3c8>
 80072de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072e0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	f383 8810 	msr	PRIMASK, r3
}
 80072e8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE
           
            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 80072ea:	230a      	movs	r3, #10
 80072ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80072ee:	e05d      	b.n	80073ac <_tx_queue_receive+0x484>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif
            
            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80072f0:	4b32      	ldr	r3, [pc, #200]	; (80073bc <_tx_queue_receive+0x494>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 80072f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072f8:	4a31      	ldr	r2, [pc, #196]	; (80073c0 <_tx_queue_receive+0x498>)
 80072fa:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 80072fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 8007302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007304:	68ba      	ldr	r2, [r7, #8]
 8007306:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 8007308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800730a:	2200      	movs	r2, #0
 800730c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8007310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007312:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007316:	1c5a      	adds	r2, r3, #1
 8007318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800731a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 800731e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007320:	2b00      	cmp	r3, #0
 8007322:	d109      	bne.n	8007338 <_tx_queue_receive+0x410>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007328:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800732a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800732c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800732e:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8007330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007332:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007334:	675a      	str	r2, [r3, #116]	; 0x74
 8007336:	e011      	b.n	800735c <_tx_queue_receive+0x434>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800733c:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800733e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007340:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007342:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8007344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007348:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800734a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800734c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800734e:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8007350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007352:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007354:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8007356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007358:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800735a:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 800735c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800735e:	1c5a      	adds	r2, r3, #1
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 8007364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007366:	2205      	movs	r2, #5
 8007368:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800736a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800736c:	2201      	movs	r2, #1
 800736e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8007370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8007376:	4b10      	ldr	r3, [pc, #64]	; (80073b8 <_tx_queue_receive+0x490>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	3301      	adds	r3, #1
 800737c:	4a0e      	ldr	r2, [pc, #56]	; (80073b8 <_tx_queue_receive+0x490>)
 800737e:	6013      	str	r3, [r2, #0]
 8007380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007382:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	f383 8810 	msr	PRIMASK, r3
}
 800738a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800738c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800738e:	f001 fa31 	bl	80087f4 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8007392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007394:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007398:	65bb      	str	r3, [r7, #88]	; 0x58
 800739a:	e007      	b.n	80073ac <_tx_queue_receive+0x484>
 800739c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800739e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	f383 8810 	msr	PRIMASK, r3
}
 80073a6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
           
        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 80073a8:	230a      	movs	r3, #10
 80073aa:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    /* Return completion status.  */
    return(status);
 80073ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3768      	adds	r7, #104	; 0x68
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	200013e0 	.word	0x200013e0
 80073bc:	20001348 	.word	0x20001348
 80073c0:	080069fd 	.word	0x080069fd

080073c4 <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b09a      	sub	sp, #104	; 0x68
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 80073d0:	2300      	movs	r3, #0
 80073d2:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80073d4:	f3ef 8310 	mrs	r3, PRIMASK
 80073d8:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 80073da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 80073dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 80073de:	b672      	cpsid	i
    return(int_posture);
 80073e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 80073e2:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Increment the number of messages sent to this queue.  */
    queue_ptr -> tx_queue_performance_messages_sent_count++;
#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_SEND, queue_ptr, TX_POINTER_TO_ULONG_CONVERT(source_ptr), wait_option, queue_ptr -> tx_queue_enqueued, TX_TRACE_QUEUE_EVENTS)
 80073e4:	4b7a      	ldr	r3, [pc, #488]	; (80075d0 <_tx_queue_send+0x20c>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80073ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d06c      	beq.n	80074ca <_tx_queue_send+0x106>
 80073f0:	4b78      	ldr	r3, [pc, #480]	; (80075d4 <_tx_queue_send+0x210>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d066      	beq.n	80074ca <_tx_queue_send+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80073fc:	f3ef 8305 	mrs	r3, IPSR
 8007400:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8007402:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007404:	4b74      	ldr	r3, [pc, #464]	; (80075d8 <_tx_queue_send+0x214>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4313      	orrs	r3, r2
 800740a:	647b      	str	r3, [r7, #68]	; 0x44
 800740c:	4b73      	ldr	r3, [pc, #460]	; (80075dc <_tx_queue_send+0x218>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	653b      	str	r3, [r7, #80]	; 0x50
 8007412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007414:	2b00      	cmp	r3, #0
 8007416:	d10b      	bne.n	8007430 <_tx_queue_send+0x6c>
 8007418:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800741a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741c:	657b      	str	r3, [r7, #84]	; 0x54
 800741e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007422:	041a      	lsls	r2, r3, #16
 8007424:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007426:	4313      	orrs	r3, r2
 8007428:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800742c:	657b      	str	r3, [r7, #84]	; 0x54
 800742e:	e00e      	b.n	800744e <_tx_queue_send+0x8a>
 8007430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007432:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8007436:	d205      	bcs.n	8007444 <_tx_queue_send+0x80>
 8007438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800743a:	657b      	str	r3, [r7, #84]	; 0x54
 800743c:	f04f 33ff 	mov.w	r3, #4294967295
 8007440:	653b      	str	r3, [r7, #80]	; 0x50
 8007442:	e004      	b.n	800744e <_tx_queue_send+0x8a>
 8007444:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8007448:	653b      	str	r3, [r7, #80]	; 0x50
 800744a:	2300      	movs	r3, #0
 800744c:	657b      	str	r3, [r7, #84]	; 0x54
 800744e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007452:	601a      	str	r2, [r3, #0]
 8007454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007456:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007458:	605a      	str	r2, [r3, #4]
 800745a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800745c:	2245      	movs	r2, #69	; 0x45
 800745e:	609a      	str	r2, [r3, #8]
 8007460:	4b5f      	ldr	r3, [pc, #380]	; (80075e0 <_tx_queue_send+0x21c>)
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007466:	60da      	str	r2, [r3, #12]
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800746c:	611a      	str	r2, [r3, #16]
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007472:	615a      	str	r2, [r3, #20]
 8007474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	619a      	str	r2, [r3, #24]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	691a      	ldr	r2, [r3, #16]
 800747e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007480:	61da      	str	r2, [r3, #28]
 8007482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007484:	3320      	adds	r3, #32
 8007486:	64bb      	str	r3, [r7, #72]	; 0x48
 8007488:	4b56      	ldr	r3, [pc, #344]	; (80075e4 <_tx_queue_send+0x220>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800748e:	429a      	cmp	r2, r3
 8007490:	d314      	bcc.n	80074bc <_tx_queue_send+0xf8>
 8007492:	4b55      	ldr	r3, [pc, #340]	; (80075e8 <_tx_queue_send+0x224>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	64bb      	str	r3, [r7, #72]	; 0x48
 8007498:	4a4d      	ldr	r2, [pc, #308]	; (80075d0 <_tx_queue_send+0x20c>)
 800749a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800749c:	6013      	str	r3, [r2, #0]
 800749e:	4b53      	ldr	r3, [pc, #332]	; (80075ec <_tx_queue_send+0x228>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074a4:	621a      	str	r2, [r3, #32]
 80074a6:	4b52      	ldr	r3, [pc, #328]	; (80075f0 <_tx_queue_send+0x22c>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00d      	beq.n	80074ca <_tx_queue_send+0x106>
 80074ae:	4b50      	ldr	r3, [pc, #320]	; (80075f0 <_tx_queue_send+0x22c>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a4e      	ldr	r2, [pc, #312]	; (80075ec <_tx_queue_send+0x228>)
 80074b4:	6812      	ldr	r2, [r2, #0]
 80074b6:	4610      	mov	r0, r2
 80074b8:	4798      	blx	r3
 80074ba:	e006      	b.n	80074ca <_tx_queue_send+0x106>
 80074bc:	4a44      	ldr	r2, [pc, #272]	; (80075d0 <_tx_queue_send+0x20c>)
 80074be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074c0:	6013      	str	r3, [r2, #0]
 80074c2:	4b4a      	ldr	r3, [pc, #296]	; (80075ec <_tx_queue_send+0x228>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074c8:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ce:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	695b      	ldr	r3, [r3, #20]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	f000 80ae 	beq.w	8007636 <_tx_queue_send+0x272>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 80074da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d13c      	bne.n	800755a <_tx_queue_send+0x196>
        {
        
            /* No suspended threads, simply place the message in the queue.  */
            
            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	695b      	ldr	r3, [r3, #20]
 80074e4:	1e5a      	subs	r2, r3, #1
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	1c5a      	adds	r2, r3, #1
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	667b      	str	r3, [r7, #100]	; 0x64
            destination =  queue_ptr -> tx_queue_write;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fc:	663b      	str	r3, [r7, #96]	; 0x60
            size =         queue_ptr -> tx_queue_message_size;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Copy message. Note that the source and destination pointers are 
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8007504:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007506:	1d13      	adds	r3, r2, #4
 8007508:	667b      	str	r3, [r7, #100]	; 0x64
 800750a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800750c:	1d19      	adds	r1, r3, #4
 800750e:	6639      	str	r1, [r7, #96]	; 0x60
 8007510:	6812      	ldr	r2, [r2, #0]
 8007512:	601a      	str	r2, [r3, #0]
 8007514:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007516:	2b01      	cmp	r3, #1
 8007518:	d90e      	bls.n	8007538 <_tx_queue_send+0x174>
 800751a:	e007      	b.n	800752c <_tx_queue_send+0x168>
 800751c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800751e:	1d13      	adds	r3, r2, #4
 8007520:	667b      	str	r3, [r7, #100]	; 0x64
 8007522:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007524:	1d19      	adds	r1, r3, #4
 8007526:	6639      	str	r1, [r7, #96]	; 0x60
 8007528:	6812      	ldr	r2, [r2, #0]
 800752a:	601a      	str	r2, [r3, #0]
 800752c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800752e:	3b01      	subs	r3, #1
 8007530:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007532:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1f1      	bne.n	800751c <_tx_queue_send+0x158>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	69db      	ldr	r3, [r3, #28]
 800753c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800753e:	429a      	cmp	r2, r3
 8007540:	d102      	bne.n	8007548 <_tx_queue_send+0x184>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	699b      	ldr	r3, [r3, #24]
 8007546:	663b      	str	r3, [r7, #96]	; 0x60
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800754c:	625a      	str	r2, [r3, #36]	; 0x24
 800754e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007550:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007554:	f383 8810 	msr	PRIMASK, r3
}
 8007558:	e0db      	b.n	8007712 <_tx_queue_send+0x34e>
            /* There is a thread suspended on an empty queue. Simply 
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800755e:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 8007560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007562:	3b01      	subs	r3, #1
 8007564:	643b      	str	r3, [r7, #64]	; 0x40
            if (suspended_count == TX_NO_SUSPENSIONS)
 8007566:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007568:	2b00      	cmp	r3, #0
 800756a:	d103      	bne.n	8007574 <_tx_queue_send+0x1b0>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	629a      	str	r2, [r3, #40]	; 0x28
 8007572:	e012      	b.n	800759a <_tx_queue_send+0x1d6>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8007574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007576:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800757c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800757e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007580:	63bb      	str	r3, [r7, #56]	; 0x38
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007586:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8007588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800758a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800758c:	637b      	str	r3, [r7, #52]	; 0x34
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 800758e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007590:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007592:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 8007594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007596:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007598:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800759e:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80075a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075a2:	2200      	movs	r2, #0
 80075a4:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	667b      	str	r3, [r7, #100]	; 0x64
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 80075aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075ae:	663b      	str	r3, [r7, #96]	; 0x60
            size =         queue_ptr -> tx_queue_message_size;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Copy message. Note that the source and destination pointers are 
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80075b6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80075b8:	1d13      	adds	r3, r2, #4
 80075ba:	667b      	str	r3, [r7, #100]	; 0x64
 80075bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075be:	1d19      	adds	r1, r3, #4
 80075c0:	6639      	str	r1, [r7, #96]	; 0x60
 80075c2:	6812      	ldr	r2, [r2, #0]
 80075c4:	601a      	str	r2, [r3, #0]
 80075c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d921      	bls.n	8007610 <_tx_queue_send+0x24c>
 80075cc:	e01a      	b.n	8007604 <_tx_queue_send+0x240>
 80075ce:	bf00      	nop
 80075d0:	20001964 	.word	0x20001964
 80075d4:	20001968 	.word	0x20001968
 80075d8:	2000000c 	.word	0x2000000c
 80075dc:	20001348 	.word	0x20001348
 80075e0:	e0001004 	.word	0xe0001004
 80075e4:	20001960 	.word	0x20001960
 80075e8:	2000195c 	.word	0x2000195c
 80075ec:	20001950 	.word	0x20001950
 80075f0:	2000196c 	.word	0x2000196c
 80075f4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80075f6:	1d13      	adds	r3, r2, #4
 80075f8:	667b      	str	r3, [r7, #100]	; 0x64
 80075fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075fc:	1d19      	adds	r1, r3, #4
 80075fe:	6639      	str	r1, [r7, #96]	; 0x60
 8007600:	6812      	ldr	r2, [r2, #0]
 8007602:	601a      	str	r2, [r3, #0]
 8007604:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007606:	3b01      	subs	r3, #1
 8007608:	65fb      	str	r3, [r7, #92]	; 0x5c
 800760a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1f1      	bne.n	80075f4 <_tx_queue_send+0x230>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8007610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007612:	2200      	movs	r2, #0
 8007614:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8007618:	4b40      	ldr	r3, [pc, #256]	; (800771c <_tx_queue_send+0x358>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	3301      	adds	r3, #1
 800761e:	4a3f      	ldr	r2, [pc, #252]	; (800771c <_tx_queue_send+0x358>)
 8007620:	6013      	str	r3, [r2, #0]
 8007622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007624:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007626:	6a3b      	ldr	r3, [r7, #32]
 8007628:	f383 8810 	msr	PRIMASK, r3
}
 800762c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 800762e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007630:	f000 ff26 	bl	8008480 <_tx_thread_system_resume>
 8007634:	e06d      	b.n	8007712 <_tx_queue_send+0x34e>
#endif
        }
    }
    
    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d062      	beq.n	8007702 <_tx_queue_send+0x33e>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800763c:	4b37      	ldr	r3, [pc, #220]	; (800771c <_tx_queue_send+0x358>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d008      	beq.n	8007656 <_tx_queue_send+0x292>
 8007644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007646:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	f383 8810 	msr	PRIMASK, r3
}
 800764e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 8007650:	230b      	movs	r3, #11
 8007652:	65bb      	str	r3, [r7, #88]	; 0x58
 8007654:	e05d      	b.n	8007712 <_tx_queue_send+0x34e>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif
            
            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8007656:	4b32      	ldr	r3, [pc, #200]	; (8007720 <_tx_queue_send+0x35c>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 800765c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800765e:	4a31      	ldr	r2, [pc, #196]	; (8007724 <_tx_queue_send+0x360>)
 8007660:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 8007662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 8007668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800766a:	68ba      	ldr	r2, [r7, #8]
 800766c:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 800766e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007670:	2200      	movs	r2, #0
 8007672:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8007676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007678:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800767c:	1c5a      	adds	r2, r3, #1
 800767e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007680:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 8007684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007686:	2b00      	cmp	r3, #0
 8007688:	d109      	bne.n	800769e <_tx_queue_send+0x2da>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800768e:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8007690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007692:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007694:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8007696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007698:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800769a:	675a      	str	r2, [r3, #116]	; 0x74
 800769c:	e011      	b.n	80076c2 <_tx_queue_send+0x2fe>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a2:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 80076a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076a8:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80076aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076ae:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80076b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076b4:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80076b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80076ba:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80076bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80076c0:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 80076c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076c4:	1c5a      	adds	r2, r3, #1
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 80076ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076cc:	2205      	movs	r2, #5
 80076ce:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80076d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076d2:	2201      	movs	r2, #1
 80076d4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80076d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80076dc:	4b0f      	ldr	r3, [pc, #60]	; (800771c <_tx_queue_send+0x358>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	3301      	adds	r3, #1
 80076e2:	4a0e      	ldr	r2, [pc, #56]	; (800771c <_tx_queue_send+0x358>)
 80076e4:	6013      	str	r3, [r2, #0]
 80076e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076e8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	f383 8810 	msr	PRIMASK, r3
}
 80076f0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80076f2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80076f4:	f001 f87e 	bl	80087f4 <_tx_thread_system_suspend>
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80076f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8007700:	e007      	b.n	8007712 <_tx_queue_send+0x34e>
 8007702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007704:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	f383 8810 	msr	PRIMASK, r3
}
 800770c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 800770e:	230b      	movs	r3, #11
 8007710:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    /* Return completion status.  */
    return(status);
 8007712:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 8007714:	4618      	mov	r0, r3
 8007716:	3768      	adds	r7, #104	; 0x68
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	200013e0 	.word	0x200013e0
 8007720:	20001348 	.word	0x20001348
 8007724:	080069fd 	.word	0x080069fd

08007728 <_tx_semaphore_ceiling_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_ceiling_put(TX_SEMAPHORE *semaphore_ptr, ULONG ceiling)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b092      	sub	sp, #72	; 0x48
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8007732:	2300      	movs	r3, #0
 8007734:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007736:	f3ef 8310 	mrs	r3, PRIMASK
 800773a:	61fb      	str	r3, [r7, #28]
    return(posture);
 800773c:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800773e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007740:	b672      	cpsid	i
    return(int_posture);
 8007742:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 8007744:	63bb      	str	r3, [r7, #56]	; 0x38
    /* Increment the number of puts on this semaphore.  */
    semaphore_ptr -> tx_semaphore_performance_put_count++;
#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_SEMAPHORE_CEILING_PUT, semaphore_ptr, semaphore_ptr -> tx_semaphore_count, semaphore_ptr -> tx_semaphore_suspended_count, ceiling, TX_TRACE_SEMAPHORE_EVENTS)
 8007746:	4b67      	ldr	r3, [pc, #412]	; (80078e4 <_tx_semaphore_ceiling_put+0x1bc>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	637b      	str	r3, [r7, #52]	; 0x34
 800774c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800774e:	2b00      	cmp	r3, #0
 8007750:	d06d      	beq.n	800782e <_tx_semaphore_ceiling_put+0x106>
 8007752:	4b65      	ldr	r3, [pc, #404]	; (80078e8 <_tx_semaphore_ceiling_put+0x1c0>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800775a:	2b00      	cmp	r3, #0
 800775c:	d067      	beq.n	800782e <_tx_semaphore_ceiling_put+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800775e:	f3ef 8305 	mrs	r3, IPSR
 8007762:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8007764:	697a      	ldr	r2, [r7, #20]
 8007766:	4b61      	ldr	r3, [pc, #388]	; (80078ec <_tx_semaphore_ceiling_put+0x1c4>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4313      	orrs	r3, r2
 800776c:	633b      	str	r3, [r7, #48]	; 0x30
 800776e:	4b60      	ldr	r3, [pc, #384]	; (80078f0 <_tx_semaphore_ceiling_put+0x1c8>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007776:	2b00      	cmp	r3, #0
 8007778:	d10b      	bne.n	8007792 <_tx_semaphore_ceiling_put+0x6a>
 800777a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800777c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777e:	643b      	str	r3, [r7, #64]	; 0x40
 8007780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007784:	041a      	lsls	r2, r3, #16
 8007786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007788:	4313      	orrs	r3, r2
 800778a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800778e:	643b      	str	r3, [r7, #64]	; 0x40
 8007790:	e00e      	b.n	80077b0 <_tx_semaphore_ceiling_put+0x88>
 8007792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007794:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8007798:	d205      	bcs.n	80077a6 <_tx_semaphore_ceiling_put+0x7e>
 800779a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800779c:	643b      	str	r3, [r7, #64]	; 0x40
 800779e:	f04f 33ff 	mov.w	r3, #4294967295
 80077a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077a4:	e004      	b.n	80077b0 <_tx_semaphore_ceiling_put+0x88>
 80077a6:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 80077aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077ac:	2300      	movs	r3, #0
 80077ae:	643b      	str	r3, [r7, #64]	; 0x40
 80077b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80077b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077b4:	601a      	str	r2, [r3, #0]
 80077b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077ba:	605a      	str	r2, [r3, #4]
 80077bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077be:	2250      	movs	r2, #80	; 0x50
 80077c0:	609a      	str	r2, [r3, #8]
 80077c2:	4b4c      	ldr	r3, [pc, #304]	; (80078f4 <_tx_semaphore_ceiling_put+0x1cc>)
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077c8:	60da      	str	r2, [r3, #12]
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ce:	611a      	str	r2, [r3, #16]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	689a      	ldr	r2, [r3, #8]
 80077d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077d6:	615a      	str	r2, [r3, #20]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	691a      	ldr	r2, [r3, #16]
 80077dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077de:	619a      	str	r2, [r3, #24]
 80077e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077e2:	683a      	ldr	r2, [r7, #0]
 80077e4:	61da      	str	r2, [r3, #28]
 80077e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077e8:	3320      	adds	r3, #32
 80077ea:	637b      	str	r3, [r7, #52]	; 0x34
 80077ec:	4b42      	ldr	r3, [pc, #264]	; (80078f8 <_tx_semaphore_ceiling_put+0x1d0>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d314      	bcc.n	8007820 <_tx_semaphore_ceiling_put+0xf8>
 80077f6:	4b41      	ldr	r3, [pc, #260]	; (80078fc <_tx_semaphore_ceiling_put+0x1d4>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	637b      	str	r3, [r7, #52]	; 0x34
 80077fc:	4a39      	ldr	r2, [pc, #228]	; (80078e4 <_tx_semaphore_ceiling_put+0x1bc>)
 80077fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007800:	6013      	str	r3, [r2, #0]
 8007802:	4b3f      	ldr	r3, [pc, #252]	; (8007900 <_tx_semaphore_ceiling_put+0x1d8>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007808:	621a      	str	r2, [r3, #32]
 800780a:	4b3e      	ldr	r3, [pc, #248]	; (8007904 <_tx_semaphore_ceiling_put+0x1dc>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d00d      	beq.n	800782e <_tx_semaphore_ceiling_put+0x106>
 8007812:	4b3c      	ldr	r3, [pc, #240]	; (8007904 <_tx_semaphore_ceiling_put+0x1dc>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a3a      	ldr	r2, [pc, #232]	; (8007900 <_tx_semaphore_ceiling_put+0x1d8>)
 8007818:	6812      	ldr	r2, [r2, #0]
 800781a:	4610      	mov	r0, r2
 800781c:	4798      	blx	r3
 800781e:	e006      	b.n	800782e <_tx_semaphore_ceiling_put+0x106>
 8007820:	4a30      	ldr	r2, [pc, #192]	; (80078e4 <_tx_semaphore_ceiling_put+0x1bc>)
 8007822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007824:	6013      	str	r3, [r2, #0]
 8007826:	4b36      	ldr	r3, [pc, #216]	; (8007900 <_tx_semaphore_ceiling_put+0x1d8>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800782c:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_CEILING_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8007834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007836:	2b00      	cmp	r3, #0
 8007838:	d11b      	bne.n	8007872 <_tx_semaphore_ceiling_put+0x14a>
    {

        /* Determine if the ceiling has been exceeded.  */
        if (semaphore_ptr -> tx_semaphore_count >= ceiling)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	683a      	ldr	r2, [r7, #0]
 8007840:	429a      	cmp	r2, r3
 8007842:	d808      	bhi.n	8007856 <_tx_semaphore_ceiling_put+0x12e>
 8007844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007846:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	f383 8810 	msr	PRIMASK, r3
}
 800784e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Return an error.  */
            status =  TX_CEILING_EXCEEDED;
 8007850:	2321      	movs	r3, #33	; 0x21
 8007852:	647b      	str	r3, [r7, #68]	; 0x44
 8007854:	e041      	b.n	80078da <_tx_semaphore_ceiling_put+0x1b2>
        }
        else
        {

            /* Increment the semaphore count.  */
            semaphore_ptr -> tx_semaphore_count++;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	1c5a      	adds	r2, r3, #1
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	609a      	str	r2, [r3, #8]
 8007860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007862:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f383 8810 	msr	PRIMASK, r3
}
 800786a:	bf00      	nop
                (semaphore_put_notify)(semaphore_ptr);
            }
#endif

            /* Return successful completion status.  */
            status =  TX_SUCCESS;
 800786c:	2300      	movs	r3, #0
 800786e:	647b      	str	r3, [r7, #68]	; 0x44
 8007870:	e033      	b.n	80078da <_tx_semaphore_ceiling_put+0x1b2>
    {

        /* Remove the suspended thread from the list.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	62bb      	str	r3, [r7, #40]	; 0x28

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 8007878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787a:	3b01      	subs	r3, #1
 800787c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (suspended_count == TX_NO_SUSPENSIONS)
 800787e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007880:	2b00      	cmp	r3, #0
 8007882:	d103      	bne.n	800788c <_tx_semaphore_ceiling_put+0x164>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	60da      	str	r2, [r3, #12]
 800788a:	e00e      	b.n	80078aa <_tx_semaphore_ceiling_put+0x182>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800788c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007890:	627b      	str	r3, [r7, #36]	; 0x24
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007896:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8007898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800789c:	623b      	str	r3, [r7, #32]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800789e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a0:	6a3a      	ldr	r2, [r7, #32]
 80078a2:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 80078a4:	6a3b      	ldr	r3, [r7, #32]
 80078a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078a8:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078ae:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80078b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b2:	2200      	movs	r2, #0
 80078b4:	669a      	str	r2, [r3, #104]	; 0x68

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80078b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b8:	2200      	movs	r2, #0
 80078ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 80078be:	4b12      	ldr	r3, [pc, #72]	; (8007908 <_tx_semaphore_ceiling_put+0x1e0>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	3301      	adds	r3, #1
 80078c4:	4a10      	ldr	r2, [pc, #64]	; (8007908 <_tx_semaphore_ceiling_put+0x1e0>)
 80078c6:	6013      	str	r3, [r2, #0]
 80078c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ca:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	f383 8810 	msr	PRIMASK, r3
}
 80078d2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 80078d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078d6:	f000 fdd3 	bl	8008480 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(status);
 80078da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3748      	adds	r7, #72	; 0x48
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	20001964 	.word	0x20001964
 80078e8:	20001968 	.word	0x20001968
 80078ec:	2000000c 	.word	0x2000000c
 80078f0:	20001348 	.word	0x20001348
 80078f4:	e0001004 	.word	0xe0001004
 80078f8:	20001960 	.word	0x20001960
 80078fc:	2000195c 	.word	0x2000195c
 8007900:	20001950 	.word	0x20001950
 8007904:	2000196c 	.word	0x2000196c
 8007908:	200013e0 	.word	0x200013e0

0800790c <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b08e      	sub	sp, #56	; 0x38
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007916:	f3ef 8310 	mrs	r3, PRIMASK
 800791a:	623b      	str	r3, [r7, #32]
    return(posture);
 800791c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800791e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007920:	b672      	cpsid	i
    return(int_posture);
 8007922:	69fb      	ldr	r3, [r7, #28]
    

#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 8007924:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800792a:	4a33      	ldr	r2, [pc, #204]	; (80079f8 <_tx_semaphore_cleanup+0xec>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d158      	bne.n	80079e2 <_tx_semaphore_cleanup+0xd6>
    {
    
        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007936:	683a      	ldr	r2, [r7, #0]
 8007938:	429a      	cmp	r2, r3
 800793a:	d152      	bne.n	80079e2 <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007940:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 8007942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007944:	2b00      	cmp	r3, #0
 8007946:	d04c      	beq.n	80079e2 <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 8007948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a2b      	ldr	r2, [pc, #172]	; (80079fc <_tx_semaphore_cleanup+0xf0>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d147      	bne.n	80079e2 <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 8007952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d043      	beq.n	80079e2 <_tx_semaphore_cleanup+0xd6>
#endif
                
                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 8007960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	1e5a      	subs	r2, r3, #1
 8007966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007968:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800796a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8007970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007972:	2b00      	cmp	r3, #0
 8007974:	d103      	bne.n	800797e <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */
    
                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8007976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007978:	2200      	movs	r2, #0
 800797a:	60da      	str	r2, [r3, #12]
 800797c:	e013      	b.n	80079a6 <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007982:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007988:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800798a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800798e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8007990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007992:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007994:	671a      	str	r2, [r3, #112]	; 0x70
            
                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 8007996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	429a      	cmp	r2, r3
 800799e:	d102      	bne.n	80079a6 <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 80079a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079a4:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079aa:	2b06      	cmp	r3, #6
 80079ac:	d119      	bne.n	80079e2 <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	220d      	movs	r2, #13
 80079b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80079b6:	4b12      	ldr	r3, [pc, #72]	; (8007a00 <_tx_semaphore_cleanup+0xf4>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	3301      	adds	r3, #1
 80079bc:	4a10      	ldr	r2, [pc, #64]	; (8007a00 <_tx_semaphore_cleanup+0xf4>)
 80079be:	6013      	str	r3, [r2, #0]
 80079c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079c2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	f383 8810 	msr	PRIMASK, r3
}
 80079ca:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 fd57 	bl	8008480 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80079d2:	f3ef 8310 	mrs	r3, PRIMASK
 80079d6:	61bb      	str	r3, [r7, #24]
    return(posture);
 80079d8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80079da:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80079dc:	b672      	cpsid	i
    return(int_posture);
 80079de:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80079e0:	637b      	str	r3, [r7, #52]	; 0x34
 80079e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079e4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f383 8810 	msr	PRIMASK, r3
}
 80079ec:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80079ee:	bf00      	nop
 80079f0:	3738      	adds	r7, #56	; 0x38
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	0800790d 	.word	0x0800790d
 80079fc:	53454d41 	.word	0x53454d41
 8007a00:	200013e0 	.word	0x200013e0

08007a04 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b092      	sub	sp, #72	; 0x48
 8007a08:	af02      	add	r7, sp, #8
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 8007a10:	221c      	movs	r2, #28
 8007a12:	2100      	movs	r1, #0
 8007a14:	68f8      	ldr	r0, [r7, #12]
 8007a16:	f007 ffff 	bl	800fa18 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007a26:	f3ef 8310 	mrs	r3, PRIMASK
 8007a2a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8007a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8007a2e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007a30:	b672      	cpsid	i
    return(int_posture);
 8007a32:	6a3b      	ldr	r3, [r7, #32]
    
    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 8007a34:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	4a56      	ldr	r2, [pc, #344]	; (8007b94 <_tx_semaphore_create+0x190>)
 8007a3a:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8007a3c:	4b56      	ldr	r3, [pc, #344]	; (8007b98 <_tx_semaphore_create+0x194>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d109      	bne.n	8007a58 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 8007a44:	4a55      	ldr	r2, [pc, #340]	; (8007b9c <_tx_semaphore_create+0x198>)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	619a      	str	r2, [r3, #24]
 8007a56:	e011      	b.n	8007a7c <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 8007a58:	4b50      	ldr	r3, [pc, #320]	; (8007b9c <_tx_semaphore_create+0x198>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	617b      	str	r3, [r7, #20]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	699b      	ldr	r3, [r3, #24]
 8007a62:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 8007a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a74:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	615a      	str	r2, [r3, #20]
    }
    
    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8007a7c:	4b46      	ldr	r3, [pc, #280]	; (8007b98 <_tx_semaphore_create+0x194>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	3301      	adds	r3, #1
 8007a82:	4a45      	ldr	r2, [pc, #276]	; (8007b98 <_tx_semaphore_create+0x194>)
 8007a84:	6013      	str	r3, [r2, #0]

    /* Optional semaphore create extended processing.  */
    TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_SEMAPHORE, semaphore_ptr, name_ptr, initial_count, 0)
 8007a86:	2300      	movs	r3, #0
 8007a88:	9300      	str	r3, [sp, #0]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	68ba      	ldr	r2, [r7, #8]
 8007a8e:	68f9      	ldr	r1, [r7, #12]
 8007a90:	2004      	movs	r0, #4
 8007a92:	f001 fc17 	bl	80092c4 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_SEMAPHORE_CREATE, semaphore_ptr, initial_count, TX_POINTER_TO_ULONG_CONVERT(&next_semaphore), 0, TX_TRACE_SEMAPHORE_EVENTS)
 8007a96:	4b42      	ldr	r3, [pc, #264]	; (8007ba0 <_tx_semaphore_create+0x19c>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d06c      	beq.n	8007b7c <_tx_semaphore_create+0x178>
 8007aa2:	4b40      	ldr	r3, [pc, #256]	; (8007ba4 <_tx_semaphore_create+0x1a0>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d066      	beq.n	8007b7c <_tx_semaphore_create+0x178>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007aae:	f3ef 8305 	mrs	r3, IPSR
 8007ab2:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8007ab4:	69fa      	ldr	r2, [r7, #28]
 8007ab6:	4b3c      	ldr	r3, [pc, #240]	; (8007ba8 <_tx_semaphore_create+0x1a4>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007abe:	4b3b      	ldr	r3, [pc, #236]	; (8007bac <_tx_semaphore_create+0x1a8>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d10b      	bne.n	8007ae2 <_tx_semaphore_create+0xde>
 8007aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ace:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ad4:	041a      	lsls	r2, r3, #16
 8007ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ade:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ae0:	e00e      	b.n	8007b00 <_tx_semaphore_create+0xfc>
 8007ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8007ae8:	d205      	bcs.n	8007af6 <_tx_semaphore_create+0xf2>
 8007aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007aee:	f04f 33ff 	mov.w	r3, #4294967295
 8007af2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007af4:	e004      	b.n	8007b00 <_tx_semaphore_create+0xfc>
 8007af6:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8007afa:	63bb      	str	r3, [r7, #56]	; 0x38
 8007afc:	2300      	movs	r3, #0
 8007afe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b04:	601a      	str	r2, [r3, #0]
 8007b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007b0a:	605a      	str	r2, [r3, #4]
 8007b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0e:	2251      	movs	r2, #81	; 0x51
 8007b10:	609a      	str	r2, [r3, #8]
 8007b12:	4b27      	ldr	r3, [pc, #156]	; (8007bb0 <_tx_semaphore_create+0x1ac>)
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b18:	60da      	str	r2, [r3, #12]
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1e:	611a      	str	r2, [r3, #16]
 8007b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	615a      	str	r2, [r3, #20]
 8007b26:	f107 0214 	add.w	r2, r7, #20
 8007b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b2c:	619a      	str	r2, [r3, #24]
 8007b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b30:	2200      	movs	r2, #0
 8007b32:	61da      	str	r2, [r3, #28]
 8007b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b36:	3320      	adds	r3, #32
 8007b38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b3a:	4b1e      	ldr	r3, [pc, #120]	; (8007bb4 <_tx_semaphore_create+0x1b0>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d314      	bcc.n	8007b6e <_tx_semaphore_create+0x16a>
 8007b44:	4b1c      	ldr	r3, [pc, #112]	; (8007bb8 <_tx_semaphore_create+0x1b4>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b4a:	4a15      	ldr	r2, [pc, #84]	; (8007ba0 <_tx_semaphore_create+0x19c>)
 8007b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b4e:	6013      	str	r3, [r2, #0]
 8007b50:	4b1a      	ldr	r3, [pc, #104]	; (8007bbc <_tx_semaphore_create+0x1b8>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b56:	621a      	str	r2, [r3, #32]
 8007b58:	4b19      	ldr	r3, [pc, #100]	; (8007bc0 <_tx_semaphore_create+0x1bc>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00d      	beq.n	8007b7c <_tx_semaphore_create+0x178>
 8007b60:	4b17      	ldr	r3, [pc, #92]	; (8007bc0 <_tx_semaphore_create+0x1bc>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a15      	ldr	r2, [pc, #84]	; (8007bbc <_tx_semaphore_create+0x1b8>)
 8007b66:	6812      	ldr	r2, [r2, #0]
 8007b68:	4610      	mov	r0, r2
 8007b6a:	4798      	blx	r3
 8007b6c:	e006      	b.n	8007b7c <_tx_semaphore_create+0x178>
 8007b6e:	4a0c      	ldr	r2, [pc, #48]	; (8007ba0 <_tx_semaphore_create+0x19c>)
 8007b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b72:	6013      	str	r3, [r2, #0]
 8007b74:	4b11      	ldr	r3, [pc, #68]	; (8007bbc <_tx_semaphore_create+0x1b8>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b7a:	621a      	str	r2, [r3, #32]
 8007b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b7e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	f383 8810 	msr	PRIMASK, r3
}
 8007b86:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3740      	adds	r7, #64	; 0x40
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	53454d41 	.word	0x53454d41
 8007b98:	20001314 	.word	0x20001314
 8007b9c:	20001310 	.word	0x20001310
 8007ba0:	20001964 	.word	0x20001964
 8007ba4:	20001968 	.word	0x20001968
 8007ba8:	2000000c 	.word	0x2000000c
 8007bac:	20001348 	.word	0x20001348
 8007bb0:	e0001004 	.word	0xe0001004
 8007bb4:	20001960 	.word	0x20001960
 8007bb8:	2000195c 	.word	0x2000195c
 8007bbc:	20001950 	.word	0x20001950
 8007bc0:	2000196c 	.word	0x2000196c

08007bc4 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b092      	sub	sp, #72	; 0x48
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007bd2:	f3ef 8310 	mrs	r3, PRIMASK
 8007bd6:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8007bda:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007bdc:	b672      	cpsid	i
    return(int_posture);
 8007bde:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 8007be0:	63bb      	str	r3, [r7, #56]	; 0x38
    /* Increment the number of attempts to get this semaphore.  */
    semaphore_ptr -> tx_semaphore_performance_get_count++;
#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_SEMAPHORE_GET, semaphore_ptr, wait_option, semaphore_ptr -> tx_semaphore_count, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), TX_TRACE_SEMAPHORE_EVENTS)
 8007be2:	4b78      	ldr	r3, [pc, #480]	; (8007dc4 <_tx_semaphore_get+0x200>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	637b      	str	r3, [r7, #52]	; 0x34
 8007be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d06d      	beq.n	8007cca <_tx_semaphore_get+0x106>
 8007bee:	4b76      	ldr	r3, [pc, #472]	; (8007dc8 <_tx_semaphore_get+0x204>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d067      	beq.n	8007cca <_tx_semaphore_get+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007bfa:	f3ef 8305 	mrs	r3, IPSR
 8007bfe:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8007c00:	69fa      	ldr	r2, [r7, #28]
 8007c02:	4b72      	ldr	r3, [pc, #456]	; (8007dcc <_tx_semaphore_get+0x208>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	633b      	str	r3, [r7, #48]	; 0x30
 8007c0a:	4b71      	ldr	r3, [pc, #452]	; (8007dd0 <_tx_semaphore_get+0x20c>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d10b      	bne.n	8007c2e <_tx_semaphore_get+0x6a>
 8007c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c1a:	643b      	str	r3, [r7, #64]	; 0x40
 8007c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c20:	041a      	lsls	r2, r3, #16
 8007c22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c24:	4313      	orrs	r3, r2
 8007c26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c2a:	643b      	str	r3, [r7, #64]	; 0x40
 8007c2c:	e00e      	b.n	8007c4c <_tx_semaphore_get+0x88>
 8007c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c30:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8007c34:	d205      	bcs.n	8007c42 <_tx_semaphore_get+0x7e>
 8007c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c38:	643b      	str	r3, [r7, #64]	; 0x40
 8007c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c40:	e004      	b.n	8007c4c <_tx_semaphore_get+0x88>
 8007c42:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8007c46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c48:	2300      	movs	r3, #0
 8007c4a:	643b      	str	r3, [r7, #64]	; 0x40
 8007c4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c50:	601a      	str	r2, [r3, #0]
 8007c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c56:	605a      	str	r2, [r3, #4]
 8007c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c5a:	2253      	movs	r2, #83	; 0x53
 8007c5c:	609a      	str	r2, [r3, #8]
 8007c5e:	4b5d      	ldr	r3, [pc, #372]	; (8007dd4 <_tx_semaphore_get+0x210>)
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c64:	60da      	str	r2, [r3, #12]
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c6a:	611a      	str	r2, [r3, #16]
 8007c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c6e:	683a      	ldr	r2, [r7, #0]
 8007c70:	615a      	str	r2, [r3, #20]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	689a      	ldr	r2, [r3, #8]
 8007c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c78:	619a      	str	r2, [r3, #24]
 8007c7a:	f107 0208 	add.w	r2, r7, #8
 8007c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c80:	61da      	str	r2, [r3, #28]
 8007c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c84:	3320      	adds	r3, #32
 8007c86:	637b      	str	r3, [r7, #52]	; 0x34
 8007c88:	4b53      	ldr	r3, [pc, #332]	; (8007dd8 <_tx_semaphore_get+0x214>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d314      	bcc.n	8007cbc <_tx_semaphore_get+0xf8>
 8007c92:	4b52      	ldr	r3, [pc, #328]	; (8007ddc <_tx_semaphore_get+0x218>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	637b      	str	r3, [r7, #52]	; 0x34
 8007c98:	4a4a      	ldr	r2, [pc, #296]	; (8007dc4 <_tx_semaphore_get+0x200>)
 8007c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c9c:	6013      	str	r3, [r2, #0]
 8007c9e:	4b50      	ldr	r3, [pc, #320]	; (8007de0 <_tx_semaphore_get+0x21c>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ca4:	621a      	str	r2, [r3, #32]
 8007ca6:	4b4f      	ldr	r3, [pc, #316]	; (8007de4 <_tx_semaphore_get+0x220>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00d      	beq.n	8007cca <_tx_semaphore_get+0x106>
 8007cae:	4b4d      	ldr	r3, [pc, #308]	; (8007de4 <_tx_semaphore_get+0x220>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a4b      	ldr	r2, [pc, #300]	; (8007de0 <_tx_semaphore_get+0x21c>)
 8007cb4:	6812      	ldr	r2, [r2, #0]
 8007cb6:	4610      	mov	r0, r2
 8007cb8:	4798      	blx	r3
 8007cba:	e006      	b.n	8007cca <_tx_semaphore_get+0x106>
 8007cbc:	4a41      	ldr	r2, [pc, #260]	; (8007dc4 <_tx_semaphore_get+0x200>)
 8007cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cc0:	6013      	str	r3, [r2, #0]
 8007cc2:	4b47      	ldr	r3, [pc, #284]	; (8007de0 <_tx_semaphore_get+0x21c>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cc8:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d00a      	beq.n	8007ce8 <_tx_semaphore_get+0x124>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	1e5a      	subs	r2, r3, #1
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	609a      	str	r2, [r3, #8]
 8007cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cde:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	f383 8810 	msr	PRIMASK, r3
}
 8007ce6:	e068      	b.n	8007dba <_tx_semaphore_get+0x1f6>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d05d      	beq.n	8007daa <_tx_semaphore_get+0x1e6>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8007cee:	4b3e      	ldr	r3, [pc, #248]	; (8007de8 <_tx_semaphore_get+0x224>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d008      	beq.n	8007d08 <_tx_semaphore_get+0x144>
 8007cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	f383 8810 	msr	PRIMASK, r3
}
 8007d00:	bf00      	nop
    
            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 8007d02:	230d      	movs	r3, #13
 8007d04:	647b      	str	r3, [r7, #68]	; 0x44
 8007d06:	e058      	b.n	8007dba <_tx_semaphore_get+0x1f6>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif
            
            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8007d08:	4b31      	ldr	r3, [pc, #196]	; (8007dd0 <_tx_semaphore_get+0x20c>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	60bb      	str	r3, [r7, #8]

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	4a36      	ldr	r2, [pc, #216]	; (8007dec <_tx_semaphore_get+0x228>)
 8007d12:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007d20:	3201      	adds	r2, #1
 8007d22:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d109      	bne.n	8007d42 <_tx_semaphore_get+0x17e>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	68ba      	ldr	r2, [r7, #8]
 8007d38:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	68ba      	ldr	r2, [r7, #8]
 8007d3e:	675a      	str	r2, [r3, #116]	; 0x74
 8007d40:	e011      	b.n	8007d66 <_tx_semaphore_get+0x1a2>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d4c:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8007d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d52:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d58:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8007d5a:	68ba      	ldr	r2, [r7, #8]
 8007d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5e:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8007d60:	68ba      	ldr	r2, [r7, #8]
 8007d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d64:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	1c5a      	adds	r2, r3, #1
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	2206      	movs	r2, #6
 8007d74:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	683a      	ldr	r2, [r7, #0]
 8007d80:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8007d82:	4b19      	ldr	r3, [pc, #100]	; (8007de8 <_tx_semaphore_get+0x224>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	3301      	adds	r3, #1
 8007d88:	4a17      	ldr	r2, [pc, #92]	; (8007de8 <_tx_semaphore_get+0x224>)
 8007d8a:	6013      	str	r3, [r2, #0]
 8007d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	f383 8810 	msr	PRIMASK, r3
}
 8007d96:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f000 fd2a 	bl	80087f4 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007da6:	647b      	str	r3, [r7, #68]	; 0x44
 8007da8:	e007      	b.n	8007dba <_tx_semaphore_get+0x1f6>
 8007daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dac:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f383 8810 	msr	PRIMASK, r3
}
 8007db4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 8007db6:	230d      	movs	r3, #13
 8007db8:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8007dba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3748      	adds	r7, #72	; 0x48
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	20001964 	.word	0x20001964
 8007dc8:	20001968 	.word	0x20001968
 8007dcc:	2000000c 	.word	0x2000000c
 8007dd0:	20001348 	.word	0x20001348
 8007dd4:	e0001004 	.word	0xe0001004
 8007dd8:	20001960 	.word	0x20001960
 8007ddc:	2000195c 	.word	0x2000195c
 8007de0:	20001950 	.word	0x20001950
 8007de4:	2000196c 	.word	0x2000196c
 8007de8:	200013e0 	.word	0x200013e0
 8007dec:	0800790d 	.word	0x0800790d

08007df0 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b09a      	sub	sp, #104	; 0x68
 8007df4:	af02      	add	r7, sp, #8
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]
 8007dfc:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8007dfe:	2300      	movs	r3, #0
 8007e00:	65bb      	str	r3, [r7, #88]	; 0x58
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8007e02:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e04:	21ef      	movs	r1, #239	; 0xef
 8007e06:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007e08:	f007 fe06 	bl	800fa18 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8007e0c:	22b0      	movs	r2, #176	; 0xb0
 8007e0e:	2100      	movs	r1, #0
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f007 fe01 	bl	800fa18 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	68ba      	ldr	r2, [r7, #8]
 8007e1a:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	683a      	ldr	r2, [r7, #0]
 8007e26:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e2c:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e32:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007e38:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007e3e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007e46:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007e4c:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2220      	movs	r2, #32
 8007e52:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8007e56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e58:	64fb      	str	r3, [r7, #76]	; 0x4c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8007e5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e60:	4413      	add	r3, r2
 8007e62:	64fb      	str	r3, [r7, #76]	; 0x4c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e68:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8007e6a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007e6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d007      	beq.n	8007e82 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2200      	movs	r2, #0
 8007e76:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8007e80:	e006      	b.n	8007e90 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007e86:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007e8c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2203      	movs	r2, #3
 8007e94:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	4a86      	ldr	r2, [pc, #536]	; (80080b4 <_tx_thread_create+0x2c4>)
 8007e9a:	655a      	str	r2, [r3, #84]	; 0x54
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the 
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8007ea2:	4985      	ldr	r1, [pc, #532]	; (80080b8 <_tx_thread_create+0x2c8>)
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f7f8 fa43 	bl	8000330 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007eaa:	f3ef 8310 	mrs	r3, PRIMASK
 8007eae:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8007eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8007eb2:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8007eb4:	b672      	cpsid	i
    return(int_posture);
 8007eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8007eb8:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	4a7f      	ldr	r2, [pc, #508]	; (80080bc <_tx_thread_create+0x2cc>)
 8007ebe:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8007ec0:	4b7f      	ldr	r3, [pc, #508]	; (80080c0 <_tx_thread_create+0x2d0>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d10b      	bne.n	8007ee0 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8007ec8:	4a7e      	ldr	r2, [pc, #504]	; (80080c4 <_tx_thread_create+0x2d4>)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	68fa      	ldr	r2, [r7, #12]
 8007ed2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8007ede:	e016      	b.n	8007f0e <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8007ee0:	4b78      	ldr	r3, [pc, #480]	; (80080c4 <_tx_thread_create+0x2d4>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	647b      	str	r3, [r7, #68]	; 0x44
        previous_thread =  next_thread -> tx_thread_created_previous;
 8007ee6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007eec:	643b      	str	r3, [r7, #64]	; 0x40

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8007eee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8007ef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }
    
    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8007f0e:	4b6c      	ldr	r3, [pc, #432]	; (80080c0 <_tx_thread_create+0x2d0>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	3301      	adds	r3, #1
 8007f14:	4a6a      	ldr	r2, [pc, #424]	; (80080c0 <_tx_thread_create+0x2d0>)
 8007f16:	6013      	str	r3, [r2, #0]

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, name_ptr, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size)
 8007f18:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f1c:	9300      	str	r3, [sp, #0]
 8007f1e:	4613      	mov	r3, r2
 8007f20:	68ba      	ldr	r2, [r7, #8]
 8007f22:	68f9      	ldr	r1, [r7, #12]
 8007f24:	2001      	movs	r0, #1
 8007f26:	f001 f9cd 	bl	80092c4 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_CREATE, thread_ptr, priority, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size, TX_TRACE_THREAD_EVENTS)
 8007f2a:	4b67      	ldr	r3, [pc, #412]	; (80080c8 <_tx_thread_create+0x2d8>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d06b      	beq.n	800800e <_tx_thread_create+0x21e>
 8007f36:	4b65      	ldr	r3, [pc, #404]	; (80080cc <_tx_thread_create+0x2dc>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d065      	beq.n	800800e <_tx_thread_create+0x21e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007f42:	f3ef 8305 	mrs	r3, IPSR
 8007f46:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8007f48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f4a:	4b61      	ldr	r3, [pc, #388]	; (80080d0 <_tx_thread_create+0x2e0>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f52:	4b60      	ldr	r3, [pc, #384]	; (80080d4 <_tx_thread_create+0x2e4>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	653b      	str	r3, [r7, #80]	; 0x50
 8007f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d10b      	bne.n	8007f76 <_tx_thread_create+0x186>
 8007f5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f62:	657b      	str	r3, [r7, #84]	; 0x54
 8007f64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f68:	041a      	lsls	r2, r3, #16
 8007f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f72:	657b      	str	r3, [r7, #84]	; 0x54
 8007f74:	e00e      	b.n	8007f94 <_tx_thread_create+0x1a4>
 8007f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f78:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8007f7c:	d205      	bcs.n	8007f8a <_tx_thread_create+0x19a>
 8007f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f80:	657b      	str	r3, [r7, #84]	; 0x54
 8007f82:	f04f 33ff 	mov.w	r3, #4294967295
 8007f86:	653b      	str	r3, [r7, #80]	; 0x50
 8007f88:	e004      	b.n	8007f94 <_tx_thread_create+0x1a4>
 8007f8a:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8007f8e:	653b      	str	r3, [r7, #80]	; 0x50
 8007f90:	2300      	movs	r3, #0
 8007f92:	657b      	str	r3, [r7, #84]	; 0x54
 8007f94:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f98:	601a      	str	r2, [r3, #0]
 8007f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007f9e:	605a      	str	r2, [r3, #4]
 8007fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fa2:	2264      	movs	r2, #100	; 0x64
 8007fa4:	609a      	str	r2, [r3, #8]
 8007fa6:	4b4c      	ldr	r3, [pc, #304]	; (80080d8 <_tx_thread_create+0x2e8>)
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fac:	60da      	str	r2, [r3, #12]
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fb2:	611a      	str	r2, [r3, #16]
 8007fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fb6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007fb8:	615a      	str	r2, [r3, #20]
 8007fba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fbe:	619a      	str	r2, [r3, #24]
 8007fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fc2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007fc4:	61da      	str	r2, [r3, #28]
 8007fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fc8:	3320      	adds	r3, #32
 8007fca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fcc:	4b43      	ldr	r3, [pc, #268]	; (80080dc <_tx_thread_create+0x2ec>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d314      	bcc.n	8008000 <_tx_thread_create+0x210>
 8007fd6:	4b42      	ldr	r3, [pc, #264]	; (80080e0 <_tx_thread_create+0x2f0>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fdc:	4a3a      	ldr	r2, [pc, #232]	; (80080c8 <_tx_thread_create+0x2d8>)
 8007fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fe0:	6013      	str	r3, [r2, #0]
 8007fe2:	4b40      	ldr	r3, [pc, #256]	; (80080e4 <_tx_thread_create+0x2f4>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007fe8:	621a      	str	r2, [r3, #32]
 8007fea:	4b3f      	ldr	r3, [pc, #252]	; (80080e8 <_tx_thread_create+0x2f8>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00d      	beq.n	800800e <_tx_thread_create+0x21e>
 8007ff2:	4b3d      	ldr	r3, [pc, #244]	; (80080e8 <_tx_thread_create+0x2f8>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a3b      	ldr	r2, [pc, #236]	; (80080e4 <_tx_thread_create+0x2f4>)
 8007ff8:	6812      	ldr	r2, [r2, #0]
 8007ffa:	4610      	mov	r0, r2
 8007ffc:	4798      	blx	r3
 8007ffe:	e006      	b.n	800800e <_tx_thread_create+0x21e>
 8008000:	4a31      	ldr	r2, [pc, #196]	; (80080c8 <_tx_thread_create+0x2d8>)
 8008002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008004:	6013      	str	r3, [r2, #0]
 8008006:	4b37      	ldr	r3, [pc, #220]	; (80080e4 <_tx_thread_create+0x2f4>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800800c:	621a      	str	r2, [r3, #32]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800800e:	4b37      	ldr	r3, [pc, #220]	; (80080ec <_tx_thread_create+0x2fc>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	3301      	adds	r3, #1
 8008014:	4a35      	ldr	r2, [pc, #212]	; (80080ec <_tx_thread_create+0x2fc>)
 8008016:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8008018:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800801a:	2b01      	cmp	r3, #1
 800801c:	d129      	bne.n	8008072 <_tx_thread_create+0x282>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800801e:	f3ef 8305 	mrs	r3, IPSR
 8008022:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8008024:	6aba      	ldr	r2, [r7, #40]	; 0x28
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8008026:	4b2a      	ldr	r3, [pc, #168]	; (80080d0 <_tx_thread_create+0x2e0>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4313      	orrs	r3, r2
 800802c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8008030:	d30d      	bcc.n	800804e <_tx_thread_create+0x25e>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is 
               not required, since interrupts are assumed to be disabled during 
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8008032:	4b2f      	ldr	r3, [pc, #188]	; (80080f0 <_tx_thread_create+0x300>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8008038:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800803a:	2b00      	cmp	r3, #0
 800803c:	d009      	beq.n	8008052 <_tx_thread_create+0x262>
            {
                
                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800803e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008042:	65bb      	str	r3, [r7, #88]	; 0x58

                /* For initialization, temporarily set the preemption-threshold to the 
                   priority level to make sure the highest-priority thread runs once 
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8008044:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008048:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800804a:	63da      	str	r2, [r3, #60]	; 0x3c
 800804c:	e001      	b.n	8008052 <_tx_thread_create+0x262>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800804e:	2300      	movs	r3, #0
 8008050:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008054:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008058:	f383 8810 	msr	PRIMASK, r3
}
 800805c:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800805e:	68f8      	ldr	r0, [r7, #12]
 8008060:	f000 fa0e 	bl	8008480 <_tx_thread_system_resume>
#endif
 
        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8008064:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008066:	2b00      	cmp	r3, #0
 8008068:	d01e      	beq.n	80080a8 <_tx_thread_create+0x2b8>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800806a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800806c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800806e:	63da      	str	r2, [r3, #60]	; 0x3c
 8008070:	e01a      	b.n	80080a8 <_tx_thread_create+0x2b8>
 8008072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008074:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	f383 8810 	msr	PRIMASK, r3
}
 800807c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800807e:	f3ef 8310 	mrs	r3, PRIMASK
 8008082:	61fb      	str	r3, [r7, #28]
    return(posture);
 8008084:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8008086:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008088:	b672      	cpsid	i
    return(int_posture);
 800808a:	69bb      	ldr	r3, [r7, #24]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800808c:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800808e:	4b17      	ldr	r3, [pc, #92]	; (80080ec <_tx_thread_create+0x2fc>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	3b01      	subs	r3, #1
 8008094:	4a15      	ldr	r2, [pc, #84]	; (80080ec <_tx_thread_create+0x2fc>)
 8008096:	6013      	str	r3, [r2, #0]
 8008098:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800809a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800809c:	6a3b      	ldr	r3, [r7, #32]
 800809e:	f383 8810 	msr	PRIMASK, r3
}
 80080a2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80080a4:	f000 f9b2 	bl	800840c <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3760      	adds	r7, #96	; 0x60
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	08008d95 	.word	0x08008d95
 80080b8:	08008171 	.word	0x08008171
 80080bc:	54485244 	.word	0x54485244
 80080c0:	20001354 	.word	0x20001354
 80080c4:	20001350 	.word	0x20001350
 80080c8:	20001964 	.word	0x20001964
 80080cc:	20001968 	.word	0x20001968
 80080d0:	2000000c 	.word	0x2000000c
 80080d4:	20001348 	.word	0x20001348
 80080d8:	e0001004 	.word	0xe0001004
 80080dc:	20001960 	.word	0x20001960
 80080e0:	2000195c 	.word	0x2000195c
 80080e4:	20001950 	.word	0x20001950
 80080e8:	2000196c 	.word	0x2000196c
 80080ec:	200013e0 	.word	0x200013e0
 80080f0:	2000134c 	.word	0x2000134c

080080f4 <_tx_thread_initialize>:
/*                                            Execution Profile support,  */
/*                                            resulting in version 6.1.7  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 80080f8:	4b13      	ldr	r3, [pc, #76]	; (8008148 <_tx_thread_initialize+0x54>)
 80080fa:	2200      	movs	r2, #0
 80080fc:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 80080fe:	4b13      	ldr	r3, [pc, #76]	; (800814c <_tx_thread_initialize+0x58>)
 8008100:	2200      	movs	r2, #0
 8008102:	601a      	str	r2, [r3, #0]
 8008104:	4b12      	ldr	r3, [pc, #72]	; (8008150 <_tx_thread_initialize+0x5c>)
 8008106:	2200      	movs	r2, #0
 8008108:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800810a:	4b12      	ldr	r3, [pc, #72]	; (8008154 <_tx_thread_initialize+0x60>)
 800810c:	2220      	movs	r2, #32
 800810e:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8008110:	2280      	movs	r2, #128	; 0x80
 8008112:	2100      	movs	r1, #0
 8008114:	4810      	ldr	r0, [pc, #64]	; (8008158 <_tx_thread_initialize+0x64>)
 8008116:	f007 fc7f 	bl	800fa18 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800811a:	4b10      	ldr	r3, [pc, #64]	; (800815c <_tx_thread_initialize+0x68>)
 800811c:	2200      	movs	r2, #0
 800811e:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8008120:	4b0f      	ldr	r3, [pc, #60]	; (8008160 <_tx_thread_initialize+0x6c>)
 8008122:	2200      	movs	r2, #0
 8008124:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8008126:	4b0f      	ldr	r3, [pc, #60]	; (8008164 <_tx_thread_initialize+0x70>)
 8008128:	2200      	movs	r2, #0
 800812a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800812c:	4b0e      	ldr	r3, [pc, #56]	; (8008168 <_tx_thread_initialize+0x74>)
 800812e:	2200      	movs	r2, #0
 8008130:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_TIMER_ENABLE_PERFORMANCE_INFO
                            | (((ULONG) 1) << 9)
#endif
#ifdef TX_ENABLE_EVENT_TRACE
                            | (((ULONG) 1) << 8)
 8008132:	4b0e      	ldr	r3, [pc, #56]	; (800816c <_tx_thread_initialize+0x78>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f043 2301 	orr.w	r3, r3, #16777472	; 0x1000100
 800813a:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
    _tx_build_options =  _tx_build_options 
 800813e:	4a0b      	ldr	r2, [pc, #44]	; (800816c <_tx_thread_initialize+0x78>)
 8008140:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8008142:	bf00      	nop
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	20001348 	.word	0x20001348
 800814c:	2000134c 	.word	0x2000134c
 8008150:	20001358 	.word	0x20001358
 8008154:	2000135c 	.word	0x2000135c
 8008158:	20001360 	.word	0x20001360
 800815c:	20001350 	.word	0x20001350
 8008160:	20001354 	.word	0x20001354
 8008164:	200013e0 	.word	0x200013e0
 8008168:	200013e4 	.word	0x200013e4
 800816c:	200013e8 	.word	0x200013e8

08008170 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b088      	sub	sp, #32
 8008174:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8008176:	4b21      	ldr	r3, [pc, #132]	; (80081fc <_tx_thread_shell_entry+0x8c>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008180:	69fa      	ldr	r2, [r7, #28]
 8008182:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008184:	4610      	mov	r0, r2
 8008186:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8008188:	4b1d      	ldr	r3, [pc, #116]	; (8008200 <_tx_thread_shell_entry+0x90>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d003      	beq.n	8008198 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that 
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8008190:	4b1b      	ldr	r3, [pc, #108]	; (8008200 <_tx_thread_shell_entry+0x90>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	69f8      	ldr	r0, [r7, #28]
 8008196:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008198:	f3ef 8310 	mrs	r3, PRIMASK
 800819c:	607b      	str	r3, [r7, #4]
    return(posture);
 800819e:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 80081a0:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 80081a2:	b672      	cpsid	i
    return(int_posture);
 80081a4:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 80081a6:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	2201      	movs	r2, #1
 80081ac:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80081ae:	69fb      	ldr	r3, [r7, #28]
 80081b0:	2201      	movs	r2, #1
 80081b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	2200      	movs	r2, #0
 80081b8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80081ba:	4b12      	ldr	r3, [pc, #72]	; (8008204 <_tx_thread_shell_entry+0x94>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	3301      	adds	r3, #1
 80081c0:	4a10      	ldr	r2, [pc, #64]	; (8008204 <_tx_thread_shell_entry+0x94>)
 80081c2:	6013      	str	r3, [r2, #0]
 80081c4:	69bb      	ldr	r3, [r7, #24]
 80081c6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	f383 8810 	msr	PRIMASK, r3
}
 80081ce:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 80081d0:	f3ef 8314 	mrs	r3, CONTROL
 80081d4:	60fb      	str	r3, [r7, #12]
    return(control_value);
 80081d6:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 80081d8:	617b      	str	r3, [r7, #20]
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	f023 0304 	bic.w	r3, r3, #4
 80081e0:	617b      	str	r3, [r7, #20]
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	f383 8814 	msr	CONTROL, r3
}
 80081ec:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 80081ee:	69f8      	ldr	r0, [r7, #28]
 80081f0:	f000 fb00 	bl	80087f4 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80081f4:	bf00      	nop
 80081f6:	3720      	adds	r7, #32
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	20001348 	.word	0x20001348
 8008200:	200013e4 	.word	0x200013e4
 8008204:	200013e0 	.word	0x200013e0

08008208 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b094      	sub	sp, #80	; 0x50
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008210:	f3ef 8310 	mrs	r3, PRIMASK
 8008214:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8008216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8008218:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800821a:	b672      	cpsid	i
    return(int_posture);
 800821c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800821e:	647b      	str	r3, [r7, #68]	; 0x44

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8008220:	4b6f      	ldr	r3, [pc, #444]	; (80083e0 <_tx_thread_sleep+0x1d8>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8008226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008228:	2b00      	cmp	r3, #0
 800822a:	d108      	bne.n	800823e <_tx_thread_sleep+0x36>
 800822c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800822e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008232:	f383 8810 	msr	PRIMASK, r3
}
 8008236:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8008238:	2313      	movs	r3, #19
 800823a:	60fb      	str	r3, [r7, #12]
 800823c:	e0ca      	b.n	80083d4 <_tx_thread_sleep+0x1cc>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800823e:	f3ef 8305 	mrs	r3, IPSR
 8008242:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8008244:	6aba      	ldr	r2, [r7, #40]	; 0x28
    }
    
    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008246:	4b67      	ldr	r3, [pc, #412]	; (80083e4 <_tx_thread_sleep+0x1dc>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4313      	orrs	r3, r2
 800824c:	2b00      	cmp	r3, #0
 800824e:	d008      	beq.n	8008262 <_tx_thread_sleep+0x5a>
 8008250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008252:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008256:	f383 8810 	msr	PRIMASK, r3
}
 800825a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800825c:	2313      	movs	r3, #19
 800825e:	60fb      	str	r3, [r7, #12]
 8008260:	e0b8      	b.n	80083d4 <_tx_thread_sleep+0x1cc>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8008262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008264:	4a60      	ldr	r2, [pc, #384]	; (80083e8 <_tx_thread_sleep+0x1e0>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d108      	bne.n	800827c <_tx_thread_sleep+0x74>
 800826a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800826c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800826e:	6a3b      	ldr	r3, [r7, #32]
 8008270:	f383 8810 	msr	PRIMASK, r3
}
 8008274:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8008276:	2313      	movs	r3, #19
 8008278:	60fb      	str	r3, [r7, #12]
 800827a:	e0ab      	b.n	80083d4 <_tx_thread_sleep+0x1cc>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d108      	bne.n	8008294 <_tx_thread_sleep+0x8c>
 8008282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008284:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	f383 8810 	msr	PRIMASK, r3
}
 800828c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
      
        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800828e:	2300      	movs	r3, #0
 8008290:	60fb      	str	r3, [r7, #12]
 8008292:	e09f      	b.n	80083d4 <_tx_thread_sleep+0x1cc>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8008294:	4b55      	ldr	r3, [pc, #340]	; (80083ec <_tx_thread_sleep+0x1e4>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d008      	beq.n	80082ae <_tx_thread_sleep+0xa6>
 800829c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800829e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	f383 8810 	msr	PRIMASK, r3
}
 80082a6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE
        
            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 80082a8:	2313      	movs	r3, #19
 80082aa:	60fb      	str	r3, [r7, #12]
 80082ac:	e092      	b.n	80083d4 <_tx_thread_sleep+0x1cc>
        }
        else
        {
        
            /* If trace is enabled, insert this event into the trace buffer.  */
            TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SLEEP, TX_ULONG_TO_POINTER_CONVERT(timer_ticks), thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&status), 0, TX_TRACE_THREAD_EVENTS)
 80082ae:	4b50      	ldr	r3, [pc, #320]	; (80083f0 <_tx_thread_sleep+0x1e8>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d06d      	beq.n	8008396 <_tx_thread_sleep+0x18e>
 80082ba:	4b4e      	ldr	r3, [pc, #312]	; (80083f4 <_tx_thread_sleep+0x1ec>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d067      	beq.n	8008396 <_tx_thread_sleep+0x18e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80082c6:	f3ef 8305 	mrs	r3, IPSR
 80082ca:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80082cc:	697a      	ldr	r2, [r7, #20]
 80082ce:	4b45      	ldr	r3, [pc, #276]	; (80083e4 <_tx_thread_sleep+0x1dc>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80082d6:	4b42      	ldr	r3, [pc, #264]	; (80083e0 <_tx_thread_sleep+0x1d8>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	64bb      	str	r3, [r7, #72]	; 0x48
 80082dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d10b      	bne.n	80082fa <_tx_thread_sleep+0xf2>
 80082e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ec:	041a      	lsls	r2, r3, #16
 80082ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082f0:	4313      	orrs	r3, r2
 80082f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80082f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082f8:	e00e      	b.n	8008318 <_tx_thread_sleep+0x110>
 80082fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fc:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8008300:	d205      	bcs.n	800830e <_tx_thread_sleep+0x106>
 8008302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008304:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008306:	f04f 33ff 	mov.w	r3, #4294967295
 800830a:	64bb      	str	r3, [r7, #72]	; 0x48
 800830c:	e004      	b.n	8008318 <_tx_thread_sleep+0x110>
 800830e:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8008312:	64bb      	str	r3, [r7, #72]	; 0x48
 8008314:	2300      	movs	r3, #0
 8008316:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008318:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800831a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800831c:	601a      	str	r2, [r3, #0]
 800831e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008320:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008322:	605a      	str	r2, [r3, #4]
 8008324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008326:	2270      	movs	r2, #112	; 0x70
 8008328:	609a      	str	r2, [r3, #8]
 800832a:	4b33      	ldr	r3, [pc, #204]	; (80083f8 <_tx_thread_sleep+0x1f0>)
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008330:	60da      	str	r2, [r3, #12]
 8008332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	611a      	str	r2, [r3, #16]
 8008338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800833a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800833c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800833e:	615a      	str	r2, [r3, #20]
 8008340:	f107 020c 	add.w	r2, r7, #12
 8008344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008346:	619a      	str	r2, [r3, #24]
 8008348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800834a:	2200      	movs	r2, #0
 800834c:	61da      	str	r2, [r3, #28]
 800834e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008350:	3320      	adds	r3, #32
 8008352:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008354:	4b29      	ldr	r3, [pc, #164]	; (80083fc <_tx_thread_sleep+0x1f4>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800835a:	429a      	cmp	r2, r3
 800835c:	d314      	bcc.n	8008388 <_tx_thread_sleep+0x180>
 800835e:	4b28      	ldr	r3, [pc, #160]	; (8008400 <_tx_thread_sleep+0x1f8>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008364:	4a22      	ldr	r2, [pc, #136]	; (80083f0 <_tx_thread_sleep+0x1e8>)
 8008366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008368:	6013      	str	r3, [r2, #0]
 800836a:	4b26      	ldr	r3, [pc, #152]	; (8008404 <_tx_thread_sleep+0x1fc>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008370:	621a      	str	r2, [r3, #32]
 8008372:	4b25      	ldr	r3, [pc, #148]	; (8008408 <_tx_thread_sleep+0x200>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d00d      	beq.n	8008396 <_tx_thread_sleep+0x18e>
 800837a:	4b23      	ldr	r3, [pc, #140]	; (8008408 <_tx_thread_sleep+0x200>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a21      	ldr	r2, [pc, #132]	; (8008404 <_tx_thread_sleep+0x1fc>)
 8008380:	6812      	ldr	r2, [r2, #0]
 8008382:	4610      	mov	r0, r2
 8008384:	4798      	blx	r3
 8008386:	e006      	b.n	8008396 <_tx_thread_sleep+0x18e>
 8008388:	4a19      	ldr	r2, [pc, #100]	; (80083f0 <_tx_thread_sleep+0x1e8>)
 800838a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800838c:	6013      	str	r3, [r2, #0]
 800838e:	4b1d      	ldr	r3, [pc, #116]	; (8008404 <_tx_thread_sleep+0x1fc>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008394:	621a      	str	r2, [r3, #32]
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 8008396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008398:	2204      	movs	r2, #4
 800839a:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800839c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800839e:	2201      	movs	r2, #1
 80083a0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80083a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083a4:	2200      	movs	r2, #0
 80083a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 80083aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80083b0:	4b0e      	ldr	r3, [pc, #56]	; (80083ec <_tx_thread_sleep+0x1e4>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	3301      	adds	r3, #1
 80083b6:	4a0d      	ldr	r2, [pc, #52]	; (80083ec <_tx_thread_sleep+0x1e4>)
 80083b8:	6013      	str	r3, [r2, #0]
 80083ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083bc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	f383 8810 	msr	PRIMASK, r3
}
 80083c4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80083c6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80083c8:	f000 fa14 	bl	80087f4 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80083cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083d2:	60fb      	str	r3, [r7, #12]
        }
    }
    
    /* Return completion status.  */
    return(status);
 80083d4:	68fb      	ldr	r3, [r7, #12]
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3750      	adds	r7, #80	; 0x50
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	20001348 	.word	0x20001348
 80083e4:	2000000c 	.word	0x2000000c
 80083e8:	20001490 	.word	0x20001490
 80083ec:	200013e0 	.word	0x200013e0
 80083f0:	20001964 	.word	0x20001964
 80083f4:	20001968 	.word	0x20001968
 80083f8:	e0001004 	.word	0xe0001004
 80083fc:	20001960 	.word	0x20001960
 8008400:	2000195c 	.word	0x2000195c
 8008404:	20001950 	.word	0x20001950
 8008408:	2000196c 	.word	0x2000196c

0800840c <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800840c:	b480      	push	{r7}
 800840e:	b089      	sub	sp, #36	; 0x24
 8008410:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8008412:	4b17      	ldr	r3, [pc, #92]	; (8008470 <_tx_thread_system_preempt_check+0x64>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8008418:	69fb      	ldr	r3, [r7, #28]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d121      	bne.n	8008462 <_tx_thread_system_preempt_check+0x56>
    {
    
        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800841e:	4b15      	ldr	r3, [pc, #84]	; (8008474 <_tx_thread_system_preempt_check+0x68>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8008424:	4b14      	ldr	r3, [pc, #80]	; (8008478 <_tx_thread_system_preempt_check+0x6c>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800842a:	69ba      	ldr	r2, [r7, #24]
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	429a      	cmp	r2, r3
 8008430:	d017      	beq.n	8008462 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8008432:	4b12      	ldr	r3, [pc, #72]	; (800847c <_tx_thread_system_preempt_check+0x70>)
 8008434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008438:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800843a:	f3ef 8305 	mrs	r3, IPSR
 800843e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8008440:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 8008442:	2b00      	cmp	r3, #0
 8008444:	d10c      	bne.n	8008460 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008446:	f3ef 8310 	mrs	r3, PRIMASK
 800844a:	60fb      	str	r3, [r7, #12]
    return(posture);
 800844c:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800844e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8008450:	b662      	cpsie	i
}
 8008452:	bf00      	nop
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f383 8810 	msr	PRIMASK, r3
}
 800845e:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8008460:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8008462:	bf00      	nop
 8008464:	3724      	adds	r7, #36	; 0x24
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr
 800846e:	bf00      	nop
 8008470:	200013e0 	.word	0x200013e0
 8008474:	20001348 	.word	0x20001348
 8008478:	2000134c 	.word	0x2000134c
 800847c:	e000ed04 	.word	0xe000ed04

08008480 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b09e      	sub	sp, #120	; 0x78
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
TX_THREAD       *current_thread;
ULONG           combined_flags;

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 8008488:	2300      	movs	r3, #0
 800848a:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800848c:	f3ef 8310 	mrs	r3, PRIMASK
 8008490:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8008492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8008494:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8008496:	b672      	cpsid	i
    return(int_posture);
 8008498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800849a:	66bb      	str	r3, [r7, #104]	; 0x68

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d005      	beq.n	80084b0 <_tx_thread_system_resume+0x30>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	334c      	adds	r3, #76	; 0x4c
 80084a8:	4618      	mov	r0, r3
 80084aa:	f000 fdaf 	bl	800900c <_tx_timer_system_deactivate>
 80084ae:	e002      	b.n	80084b6 <_tx_thread_system_resume+0x36>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

#ifdef TX_ENABLE_EVENT_TRACE

    /* If trace is enabled, save the current event pointer.  */
    entry_ptr =  _tx_trace_buffer_current_ptr;
 80084b6:	4b8b      	ldr	r3, [pc, #556]	; (80086e4 <_tx_thread_system_resume+0x264>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	667b      	str	r3, [r7, #100]	; 0x64
#endif

    /* Log the thread status change.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_RESUME, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&execute_ptr), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 80084bc:	4b89      	ldr	r3, [pc, #548]	; (80086e4 <_tx_thread_system_resume+0x264>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	663b      	str	r3, [r7, #96]	; 0x60
 80084c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d06f      	beq.n	80085a8 <_tx_thread_system_resume+0x128>
 80084c8:	4b87      	ldr	r3, [pc, #540]	; (80086e8 <_tx_thread_system_resume+0x268>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f003 0301 	and.w	r3, r3, #1
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d069      	beq.n	80085a8 <_tx_thread_system_resume+0x128>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80084d4:	f3ef 8305 	mrs	r3, IPSR
 80084d8:	63bb      	str	r3, [r7, #56]	; 0x38
    return(ipsr_value);
 80084da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084dc:	4b83      	ldr	r3, [pc, #524]	; (80086ec <_tx_thread_system_resume+0x26c>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084e4:	4b82      	ldr	r3, [pc, #520]	; (80086f0 <_tx_thread_system_resume+0x270>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80084ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d10b      	bne.n	8008508 <_tx_thread_system_resume+0x88>
 80084f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f4:	673b      	str	r3, [r7, #112]	; 0x70
 80084f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084fa:	041a      	lsls	r2, r3, #16
 80084fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80084fe:	4313      	orrs	r3, r2
 8008500:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008504:	673b      	str	r3, [r7, #112]	; 0x70
 8008506:	e00e      	b.n	8008526 <_tx_thread_system_resume+0xa6>
 8008508:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800850a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800850e:	d205      	bcs.n	800851c <_tx_thread_system_resume+0x9c>
 8008510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008512:	673b      	str	r3, [r7, #112]	; 0x70
 8008514:	f04f 33ff 	mov.w	r3, #4294967295
 8008518:	66fb      	str	r3, [r7, #108]	; 0x6c
 800851a:	e004      	b.n	8008526 <_tx_thread_system_resume+0xa6>
 800851c:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8008520:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008522:	2300      	movs	r3, #0
 8008524:	673b      	str	r3, [r7, #112]	; 0x70
 8008526:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008528:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800852a:	601a      	str	r2, [r3, #0]
 800852c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800852e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008530:	605a      	str	r2, [r3, #4]
 8008532:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008534:	2201      	movs	r2, #1
 8008536:	609a      	str	r2, [r3, #8]
 8008538:	4b6e      	ldr	r3, [pc, #440]	; (80086f4 <_tx_thread_system_resume+0x274>)
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800853e:	60da      	str	r2, [r3, #12]
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008544:	611a      	str	r2, [r3, #16]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800854a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800854c:	615a      	str	r2, [r3, #20]
 800854e:	f107 020c 	add.w	r2, r7, #12
 8008552:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008554:	619a      	str	r2, [r3, #24]
 8008556:	4b68      	ldr	r3, [pc, #416]	; (80086f8 <_tx_thread_system_resume+0x278>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	461a      	mov	r2, r3
 800855c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800855e:	61da      	str	r2, [r3, #28]
 8008560:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008562:	3320      	adds	r3, #32
 8008564:	663b      	str	r3, [r7, #96]	; 0x60
 8008566:	4b65      	ldr	r3, [pc, #404]	; (80086fc <_tx_thread_system_resume+0x27c>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800856c:	429a      	cmp	r2, r3
 800856e:	d314      	bcc.n	800859a <_tx_thread_system_resume+0x11a>
 8008570:	4b63      	ldr	r3, [pc, #396]	; (8008700 <_tx_thread_system_resume+0x280>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	663b      	str	r3, [r7, #96]	; 0x60
 8008576:	4a5b      	ldr	r2, [pc, #364]	; (80086e4 <_tx_thread_system_resume+0x264>)
 8008578:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800857a:	6013      	str	r3, [r2, #0]
 800857c:	4b61      	ldr	r3, [pc, #388]	; (8008704 <_tx_thread_system_resume+0x284>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008582:	621a      	str	r2, [r3, #32]
 8008584:	4b60      	ldr	r3, [pc, #384]	; (8008708 <_tx_thread_system_resume+0x288>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00d      	beq.n	80085a8 <_tx_thread_system_resume+0x128>
 800858c:	4b5e      	ldr	r3, [pc, #376]	; (8008708 <_tx_thread_system_resume+0x288>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a5c      	ldr	r2, [pc, #368]	; (8008704 <_tx_thread_system_resume+0x284>)
 8008592:	6812      	ldr	r2, [r2, #0]
 8008594:	4610      	mov	r0, r2
 8008596:	4798      	blx	r3
 8008598:	e006      	b.n	80085a8 <_tx_thread_system_resume+0x128>
 800859a:	4a52      	ldr	r2, [pc, #328]	; (80086e4 <_tx_thread_system_resume+0x264>)
 800859c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800859e:	6013      	str	r3, [r2, #0]
 80085a0:	4b58      	ldr	r3, [pc, #352]	; (8008704 <_tx_thread_system_resume+0x284>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80085a6:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

    /* Save the time stamp for later comparison to verify that
       the event hasn't been overwritten by the time we have 
       computed the next thread to execute.  */
    if (entry_ptr != TX_NULL)
 80085a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d002      	beq.n	80085b4 <_tx_thread_system_resume+0x134>
    {

        /* Save time stamp.  */
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 80085ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085b0:	68db      	ldr	r3, [r3, #12]
 80085b2:	677b      	str	r3, [r7, #116]	; 0x74
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80085b4:	4b55      	ldr	r3, [pc, #340]	; (800870c <_tx_thread_system_resume+0x28c>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	3b01      	subs	r3, #1
 80085ba:	4a54      	ldr	r2, [pc, #336]	; (800870c <_tx_thread_system_resume+0x28c>)
 80085bc:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	f040 80b3 	bne.w	800872e <_tx_thread_system_resume+0x2ae>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread 
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	f000 80c7 	beq.w	8008760 <_tx_thread_system_resume+0x2e0>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	f040 80a2 	bne.w	8008720 <_tx_thread_system_resume+0x2a0>
                /* Resume the thread!  */
                
                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e6:	65bb      	str	r3, [r7, #88]	; 0x58
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 80085e8:	4a49      	ldr	r2, [pc, #292]	; (8008710 <_tx_thread_system_resume+0x290>)
 80085ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80085ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085f0:	657b      	str	r3, [r7, #84]	; 0x54
                if (head_ptr == TX_NULL)
 80085f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d164      	bne.n	80086c2 <_tx_thread_system_resume+0x242>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 80085f8:	4945      	ldr	r1, [pc, #276]	; (8008710 <_tx_thread_system_resume+0x290>)
 80085fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800860e:	2201      	movs	r2, #1
 8008610:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008612:	fa02 f303 	lsl.w	r3, r2, r3
 8008616:	64fb      	str	r3, [r7, #76]	; 0x4c
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8008618:	4b3e      	ldr	r3, [pc, #248]	; (8008714 <_tx_thread_system_resume+0x294>)
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800861e:	4313      	orrs	r3, r2
 8008620:	4a3c      	ldr	r2, [pc, #240]	; (8008714 <_tx_thread_system_resume+0x294>)
 8008622:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8008624:	4b3c      	ldr	r3, [pc, #240]	; (8008718 <_tx_thread_system_resume+0x298>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800862a:	429a      	cmp	r2, r3
 800862c:	f080 8098 	bcs.w	8008760 <_tx_thread_system_resume+0x2e0>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8008630:	4a39      	ldr	r2, [pc, #228]	; (8008718 <_tx_thread_system_resume+0x298>)
 8008632:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008634:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8008636:	4b30      	ldr	r3, [pc, #192]	; (80086f8 <_tx_thread_system_resume+0x278>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	60fb      	str	r3, [r7, #12]
                        
                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d103      	bne.n	800864a <_tx_thread_system_resume+0x1ca>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8008642:	4a2d      	ldr	r2, [pc, #180]	; (80086f8 <_tx_thread_system_resume+0x278>)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6013      	str	r3, [r2, #0]
 8008648:	e08a      	b.n	8008760 <_tx_thread_system_resume+0x2e0>
                        {
                        
                            /* Another thread has been scheduled for execution.  */
               
                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800864e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008650:	429a      	cmp	r2, r3
 8008652:	f080 8085 	bcs.w	8008760 <_tx_thread_system_resume+0x2e0>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8008656:	4a28      	ldr	r2, [pc, #160]	; (80086f8 <_tx_thread_system_resume+0x278>)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                                /* Check that the event time stamp is unchanged.  A different
                                   timestamp means that a later event wrote over the thread
                                   resume event. In that case, do nothing here.  */
                                if (entry_ptr != TX_NULL)
 800865c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800865e:	2b00      	cmp	r3, #0
 8008660:	d009      	beq.n	8008676 <_tx_thread_system_resume+0x1f6>
                                {
    
                                    /* Is the timestamp the same?  */
                                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 8008662:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008668:	429a      	cmp	r2, r3
 800866a:	d104      	bne.n	8008676 <_tx_thread_system_resume+0x1f6>
                                    {
        
                                        /* Timestamp is the same, set the "next thread pointer" to NULL. This can
                                           be used by the trace analysis tool to show idle system conditions.  */
                                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 800866c:	4b22      	ldr	r3, [pc, #136]	; (80086f8 <_tx_thread_system_resume+0x278>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	461a      	mov	r2, r3
 8008672:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008674:	61da      	str	r2, [r3, #28]
 8008676:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008678:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800867a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800867c:	f383 8810 	msr	PRIMASK, r3
}
 8008680:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8008682:	4b22      	ldr	r3, [pc, #136]	; (800870c <_tx_thread_system_resume+0x28c>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	64bb      	str	r3, [r7, #72]	; 0x48
                                if (combined_flags == ((ULONG) 0))
 8008688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800868a:	2b00      	cmp	r3, #0
 800868c:	f040 80a1 	bne.w	80087d2 <_tx_thread_system_resume+0x352>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8008690:	4b22      	ldr	r3, [pc, #136]	; (800871c <_tx_thread_system_resume+0x29c>)
 8008692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008696:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008698:	f3ef 8305 	mrs	r3, IPSR
 800869c:	633b      	str	r3, [r7, #48]	; 0x30
    return(ipsr_value);
 800869e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    if (__get_ipsr_value() == 0)
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f040 8098 	bne.w	80087d6 <_tx_thread_system_resume+0x356>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80086a6:	f3ef 8310 	mrs	r3, PRIMASK
 80086aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80086ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        interrupt_save = __get_interrupt_posture();
 80086ae:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSIE  i": : : "memory");
 80086b0:	b662      	cpsie	i
}
 80086b2:	bf00      	nop
 80086b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80086b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ba:	f383 8810 	msr	PRIMASK, r3
}
 80086be:	bf00      	nop
}
 80086c0:	e089      	b.n	80087d6 <_tx_thread_system_resume+0x356>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 80086c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c6:	653b      	str	r3, [r7, #80]	; 0x50
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 80086c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 80086ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80086d8:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80086de:	621a      	str	r2, [r3, #32]
 80086e0:	e03e      	b.n	8008760 <_tx_thread_system_resume+0x2e0>
 80086e2:	bf00      	nop
 80086e4:	20001964 	.word	0x20001964
 80086e8:	20001968 	.word	0x20001968
 80086ec:	2000000c 	.word	0x2000000c
 80086f0:	20001348 	.word	0x20001348
 80086f4:	e0001004 	.word	0xe0001004
 80086f8:	2000134c 	.word	0x2000134c
 80086fc:	20001960 	.word	0x20001960
 8008700:	2000195c 	.word	0x2000195c
 8008704:	20001950 	.word	0x20001950
 8008708:	2000196c 	.word	0x2000196c
 800870c:	200013e0 	.word	0x200013e0
 8008710:	20001360 	.word	0x20001360
 8008714:	20001358 	.word	0x20001358
 8008718:	2000135c 	.word	0x2000135c
 800871c:	e000ed04 	.word	0xe000ed04
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2203      	movs	r2, #3
 800872a:	631a      	str	r2, [r3, #48]	; 0x30
 800872c:	e018      	b.n	8008760 <_tx_thread_system_resume+0x2e0>
        /* A resumption occurred in the middle of a previous thread suspension.  */
        
        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the 
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008732:	2b01      	cmp	r3, #1
 8008734:	d014      	beq.n	8008760 <_tx_thread_system_resume+0x2e0>
        {
            
            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800873a:	2b02      	cmp	r3, #2
 800873c:	d010      	beq.n	8008760 <_tx_thread_system_resume+0x2e0>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008742:	2b00      	cmp	r3, #0
 8008744:	d106      	bne.n	8008754 <_tx_thread_system_resume+0x2d4>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	631a      	str	r2, [r3, #48]	; 0x30
 8008752:	e005      	b.n	8008760 <_tx_thread_system_resume+0x2e0>
                }
                else
                {
                
                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2203      	movs	r2, #3
 800875e:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef TX_ENABLE_EVENT_TRACE

    /* Check that the event time stamp is unchanged.  A different
       timestamp means that a later event wrote over the thread
       resume event. In that case, do nothing here.  */
    if (entry_ptr != TX_NULL)
 8008760:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008762:	2b00      	cmp	r3, #0
 8008764:	d009      	beq.n	800877a <_tx_thread_system_resume+0x2fa>
    {
    
        /* Is the timestamp the same?  */
        if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 8008766:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800876c:	429a      	cmp	r2, r3
 800876e:	d104      	bne.n	800877a <_tx_thread_system_resume+0x2fa>
            /* Timestamp is the same, set the "next thread pointer" to NULL. This can
               be used by the trace analysis tool to show idle system conditions.  */
#ifdef TX_MISRA_ENABLE
            entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
            entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 8008770:	4b1c      	ldr	r3, [pc, #112]	; (80087e4 <_tx_thread_system_resume+0x364>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	461a      	mov	r2, r3
 8008776:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008778:	61da      	str	r2, [r3, #28]
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800877a:	4b1b      	ldr	r3, [pc, #108]	; (80087e8 <_tx_thread_system_resume+0x368>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	647b      	str	r3, [r7, #68]	; 0x44
 8008780:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008782:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008784:	6a3b      	ldr	r3, [r7, #32]
 8008786:	f383 8810 	msr	PRIMASK, r3
}
 800878a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800878c:	4b15      	ldr	r3, [pc, #84]	; (80087e4 <_tx_thread_system_resume+0x364>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008792:	429a      	cmp	r2, r3
 8008794:	d022      	beq.n	80087dc <_tx_thread_system_resume+0x35c>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8008796:	4b15      	ldr	r3, [pc, #84]	; (80087ec <_tx_thread_system_resume+0x36c>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	64bb      	str	r3, [r7, #72]	; 0x48
        if (combined_flags == ((ULONG) 0))
 800879c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d11c      	bne.n	80087dc <_tx_thread_system_resume+0x35c>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80087a2:	4b13      	ldr	r3, [pc, #76]	; (80087f0 <_tx_thread_system_resume+0x370>)
 80087a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087a8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80087aa:	f3ef 8305 	mrs	r3, IPSR
 80087ae:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 80087b0:	69fb      	ldr	r3, [r7, #28]
    if (__get_ipsr_value() == 0)
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d111      	bne.n	80087da <_tx_thread_system_resume+0x35a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80087b6:	f3ef 8310 	mrs	r3, PRIMASK
 80087ba:	61bb      	str	r3, [r7, #24]
    return(posture);
 80087bc:	69bb      	ldr	r3, [r7, #24]
        interrupt_save = __get_interrupt_posture();
 80087be:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80087c0:	b662      	cpsie	i
}
 80087c2:	bf00      	nop
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	f383 8810 	msr	PRIMASK, r3
}
 80087ce:	bf00      	nop
}
 80087d0:	e003      	b.n	80087da <_tx_thread_system_resume+0x35a>
                                return;
 80087d2:	bf00      	nop
 80087d4:	e002      	b.n	80087dc <_tx_thread_system_resume+0x35c>
 80087d6:	bf00      	nop
 80087d8:	e000      	b.n	80087dc <_tx_thread_system_resume+0x35c>
 80087da:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 80087dc:	3778      	adds	r7, #120	; 0x78
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	2000134c 	.word	0x2000134c
 80087e8:	20001348 	.word	0x20001348
 80087ec:	200013e0 	.word	0x200013e0
 80087f0:	e000ed04 	.word	0xe000ed04

080087f4 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b0a4      	sub	sp, #144	; 0x90
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
ULONG           timeout;
#endif

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 80087fc:	2300      	movs	r3, #0
 80087fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8008802:	4b98      	ldr	r3, [pc, #608]	; (8008a64 <_tx_thread_system_suspend+0x270>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800880a:	f3ef 8310 	mrs	r3, PRIMASK
 800880e:	653b      	str	r3, [r7, #80]	; 0x50
    return(posture);
 8008810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    int_posture = __get_interrupt_posture();
 8008812:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("CPSID i" : : : "memory");
 8008814:	b672      	cpsid	i
    return(int_posture);
 8008816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8008818:	67fb      	str	r3, [r7, #124]	; 0x7c

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008820:	429a      	cmp	r2, r3
 8008822:	d112      	bne.n	800884a <_tx_thread_system_suspend+0x56>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008828:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800882a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800882c:	2b00      	cmp	r3, #0
 800882e:	d008      	beq.n	8008842 <_tx_thread_system_suspend+0x4e>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8008830:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008836:	d004      	beq.n	8008842 <_tx_thread_system_suspend+0x4e>
            {
            
                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	334c      	adds	r3, #76	; 0x4c
 800883c:	4618      	mov	r0, r3
 800883e:	f000 fb83 	bl	8008f48 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	69db      	ldr	r3, [r3, #28]
 8008846:	4a88      	ldr	r2, [pc, #544]	; (8008a68 <_tx_thread_system_suspend+0x274>)
 8008848:	6013      	str	r3, [r2, #0]
    }
#endif
    
    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800884a:	4b88      	ldr	r3, [pc, #544]	; (8008a6c <_tx_thread_system_suspend+0x278>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	3b01      	subs	r3, #1
 8008850:	4a86      	ldr	r2, [pc, #536]	; (8008a6c <_tx_thread_system_suspend+0x278>)
 8008852:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008858:	2b01      	cmp	r3, #1
 800885a:	f040 817d 	bne.w	8008b58 <_tx_thread_system_suspend+0x364>
        TX_EL_THREAD_STATUS_CHANGE_INSERT(thread_ptr, thread_ptr -> tx_thread_state)

#ifdef TX_ENABLE_EVENT_TRACE

        /* If trace is enabled, save the current event pointer.  */
        entry_ptr =  _tx_trace_buffer_current_ptr;
 800885e:	4b84      	ldr	r3, [pc, #528]	; (8008a70 <_tx_thread_system_suspend+0x27c>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	677b      	str	r3, [r7, #116]	; 0x74
#endif

        /* Log the thread status change.  */
        TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SUSPEND, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&priority), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 8008864:	4b82      	ldr	r3, [pc, #520]	; (8008a70 <_tx_thread_system_suspend+0x27c>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	673b      	str	r3, [r7, #112]	; 0x70
 800886a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800886c:	2b00      	cmp	r3, #0
 800886e:	d07c      	beq.n	800896a <_tx_thread_system_suspend+0x176>
 8008870:	4b80      	ldr	r3, [pc, #512]	; (8008a74 <_tx_thread_system_suspend+0x280>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f003 0301 	and.w	r3, r3, #1
 8008878:	2b00      	cmp	r3, #0
 800887a:	d076      	beq.n	800896a <_tx_thread_system_suspend+0x176>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800887c:	f3ef 8305 	mrs	r3, IPSR
 8008880:	64bb      	str	r3, [r7, #72]	; 0x48
    return(ipsr_value);
 8008882:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008884:	4b7c      	ldr	r3, [pc, #496]	; (8008a78 <_tx_thread_system_suspend+0x284>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4313      	orrs	r3, r2
 800888a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800888c:	4b75      	ldr	r3, [pc, #468]	; (8008a64 <_tx_thread_system_suspend+0x270>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008896:	2b00      	cmp	r3, #0
 8008898:	d110      	bne.n	80088bc <_tx_thread_system_suspend+0xc8>
 800889a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800889e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80088a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088aa:	041a      	lsls	r2, r3, #16
 80088ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80088b0:	4313      	orrs	r3, r2
 80088b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80088ba:	e013      	b.n	80088e4 <_tx_thread_system_suspend+0xf0>
 80088bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088be:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80088c2:	d208      	bcs.n	80088d6 <_tx_thread_system_suspend+0xe2>
 80088c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80088cc:	f04f 33ff 	mov.w	r3, #4294967295
 80088d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80088d4:	e006      	b.n	80088e4 <_tx_thread_system_suspend+0xf0>
 80088d6:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 80088da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80088de:	2300      	movs	r3, #0
 80088e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80088e4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80088e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088ea:	601a      	str	r2, [r3, #0]
 80088ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088ee:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80088f2:	605a      	str	r2, [r3, #4]
 80088f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088f6:	2202      	movs	r2, #2
 80088f8:	609a      	str	r2, [r3, #8]
 80088fa:	4b60      	ldr	r3, [pc, #384]	; (8008a7c <_tx_thread_system_suspend+0x288>)
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008900:	60da      	str	r2, [r3, #12]
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008906:	611a      	str	r2, [r3, #16]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800890c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800890e:	615a      	str	r2, [r3, #20]
 8008910:	f107 0208 	add.w	r2, r7, #8
 8008914:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008916:	619a      	str	r2, [r3, #24]
 8008918:	4b59      	ldr	r3, [pc, #356]	; (8008a80 <_tx_thread_system_suspend+0x28c>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	461a      	mov	r2, r3
 800891e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008920:	61da      	str	r2, [r3, #28]
 8008922:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008924:	3320      	adds	r3, #32
 8008926:	673b      	str	r3, [r7, #112]	; 0x70
 8008928:	4b56      	ldr	r3, [pc, #344]	; (8008a84 <_tx_thread_system_suspend+0x290>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800892e:	429a      	cmp	r2, r3
 8008930:	d314      	bcc.n	800895c <_tx_thread_system_suspend+0x168>
 8008932:	4b55      	ldr	r3, [pc, #340]	; (8008a88 <_tx_thread_system_suspend+0x294>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	673b      	str	r3, [r7, #112]	; 0x70
 8008938:	4a4d      	ldr	r2, [pc, #308]	; (8008a70 <_tx_thread_system_suspend+0x27c>)
 800893a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800893c:	6013      	str	r3, [r2, #0]
 800893e:	4b53      	ldr	r3, [pc, #332]	; (8008a8c <_tx_thread_system_suspend+0x298>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008944:	621a      	str	r2, [r3, #32]
 8008946:	4b52      	ldr	r3, [pc, #328]	; (8008a90 <_tx_thread_system_suspend+0x29c>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d00d      	beq.n	800896a <_tx_thread_system_suspend+0x176>
 800894e:	4b50      	ldr	r3, [pc, #320]	; (8008a90 <_tx_thread_system_suspend+0x29c>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a4e      	ldr	r2, [pc, #312]	; (8008a8c <_tx_thread_system_suspend+0x298>)
 8008954:	6812      	ldr	r2, [r2, #0]
 8008956:	4610      	mov	r0, r2
 8008958:	4798      	blx	r3
 800895a:	e006      	b.n	800896a <_tx_thread_system_suspend+0x176>
 800895c:	4a44      	ldr	r2, [pc, #272]	; (8008a70 <_tx_thread_system_suspend+0x27c>)
 800895e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008960:	6013      	str	r3, [r2, #0]
 8008962:	4b4a      	ldr	r3, [pc, #296]	; (8008a8c <_tx_thread_system_suspend+0x298>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008968:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

        /* Save the time stamp for later comparison to verify that
           the event hasn't been overwritten by the time we have 
           computed the next thread to execute.  */
        if (entry_ptr != TX_NULL)
 800896a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800896c:	2b00      	cmp	r3, #0
 800896e:	d003      	beq.n	8008978 <_tx_thread_system_suspend+0x184>
        {

            /* Save time stamp.  */
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 8008970:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008982:	60bb      	str	r3, [r7, #8]

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6a1b      	ldr	r3, [r3, #32]
 8008988:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800898a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	429a      	cmp	r2, r3
 8008990:	d016      	beq.n	80089c0 <_tx_thread_system_suspend+0x1cc>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008996:	657b      	str	r3, [r7, #84]	; 0x54

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8008998:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800899a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800899c:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800899e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80089a2:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	4a3b      	ldr	r2, [pc, #236]	; (8008a94 <_tx_thread_system_suspend+0x2a0>)
 80089a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	429a      	cmp	r2, r3
 80089b0:	f040 8085 	bne.w	8008abe <_tx_thread_system_suspend+0x2ca>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	4937      	ldr	r1, [pc, #220]	; (8008a94 <_tx_thread_system_suspend+0x2a0>)
 80089b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80089ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80089be:	e07e      	b.n	8008abe <_tx_thread_system_suspend+0x2ca>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head 
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	4a34      	ldr	r2, [pc, #208]	; (8008a94 <_tx_thread_system_suspend+0x2a0>)
 80089c4:	2100      	movs	r1, #0
 80089c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	2201      	movs	r2, #1
 80089ce:	fa02 f303 	lsl.w	r3, r2, r3
 80089d2:	667b      	str	r3, [r7, #100]	; 0x64
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 80089d4:	4b30      	ldr	r3, [pc, #192]	; (8008a98 <_tx_thread_system_suspend+0x2a4>)
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089da:	43db      	mvns	r3, r3
 80089dc:	4013      	ands	r3, r2
 80089de:	4a2e      	ldr	r2, [pc, #184]	; (8008a98 <_tx_thread_system_suspend+0x2a4>)
 80089e0:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 80089e2:	2300      	movs	r3, #0
 80089e4:	663b      	str	r3, [r7, #96]	; 0x60
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 80089e6:	4b2c      	ldr	r3, [pc, #176]	; (8008a98 <_tx_thread_system_suspend+0x2a4>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 80089ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d158      	bne.n	8008aa4 <_tx_thread_system_suspend+0x2b0>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80089f2:	4b2a      	ldr	r3, [pc, #168]	; (8008a9c <_tx_thread_system_suspend+0x2a8>)
 80089f4:	2220      	movs	r2, #32
 80089f6:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 80089f8:	4b21      	ldr	r3, [pc, #132]	; (8008a80 <_tx_thread_system_suspend+0x28c>)
 80089fa:	2200      	movs	r2, #0
 80089fc:	601a      	str	r2, [r3, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                /* Check that the event time stamp is unchanged.  A different
                   timestamp means that a later event wrote over the thread
                   suspend event. In that case, do nothing here.  */
                if (entry_ptr != TX_NULL)
 80089fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d008      	beq.n	8008a16 <_tx_thread_system_suspend+0x222>
                {
            
                    /* Is the timestamp the same?  */
                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 8008a04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d102      	bne.n	8008a16 <_tx_thread_system_suspend+0x222>
                    {
    
                        /* Timestamp is the same, set the "next thread pointer" to the new value of the
                           next thread to execute. This can be used by the trace analysis tool to keep 
                           track of next thread execution.  */
                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  0;
 8008a10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a12:	2200      	movs	r2, #0
 8008a14:	61da      	str	r2, [r3, #28]
 8008a16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008a18:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008a1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a1c:	f383 8810 	msr	PRIMASK, r3
}
 8008a20:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8008a22:	4b12      	ldr	r3, [pc, #72]	; (8008a6c <_tx_thread_system_suspend+0x278>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	65bb      	str	r3, [r7, #88]	; 0x58
                if (combined_flags == ((ULONG) 0))
 8008a28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	f040 80bf 	bne.w	8008bae <_tx_thread_system_suspend+0x3ba>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8008a30:	4b1b      	ldr	r3, [pc, #108]	; (8008aa0 <_tx_thread_system_suspend+0x2ac>)
 8008a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a36:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008a38:	f3ef 8305 	mrs	r3, IPSR
 8008a3c:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8008a3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d10c      	bne.n	8008a5e <_tx_thread_system_suspend+0x26a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008a44:	f3ef 8310 	mrs	r3, PRIMASK
 8008a48:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8008a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 8008a4c:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8008a4e:	b662      	cpsie	i
}
 8008a50:	bf00      	nop
 8008a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a54:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a58:	f383 8810 	msr	PRIMASK, r3
}
 8008a5c:	bf00      	nop
}
 8008a5e:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8008a60:	e0a5      	b.n	8008bae <_tx_thread_system_suspend+0x3ba>
 8008a62:	bf00      	nop
 8008a64:	20001348 	.word	0x20001348
 8008a68:	2000194c 	.word	0x2000194c
 8008a6c:	200013e0 	.word	0x200013e0
 8008a70:	20001964 	.word	0x20001964
 8008a74:	20001968 	.word	0x20001968
 8008a78:	2000000c 	.word	0x2000000c
 8008a7c:	e0001004 	.word	0xe0001004
 8008a80:	2000134c 	.word	0x2000134c
 8008a84:	20001960 	.word	0x20001960
 8008a88:	2000195c 	.word	0x2000195c
 8008a8c:	20001950 	.word	0x20001950
 8008a90:	2000196c 	.word	0x2000196c
 8008a94:	20001360 	.word	0x20001360
 8008a98:	20001358 	.word	0x20001358
 8008a9c:	2000135c 	.word	0x2000135c
 8008aa0:	e000ed04 	.word	0xe000ed04
            {
            
                /* Other threads at different priority levels are ready to run.  */
            
                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8008aa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008aa6:	fa93 f3a3 	rbit	r3, r3
 8008aaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008aac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008aae:	fab3 f383 	clz	r3, r3
 8008ab2:	667b      	str	r3, [r7, #100]	; 0x64

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8008ab4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008ab6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ab8:	4413      	add	r3, r2
 8008aba:	4a41      	ldr	r2, [pc, #260]	; (8008bc0 <_tx_thread_system_suspend+0x3cc>)
 8008abc:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8008abe:	4b41      	ldr	r3, [pc, #260]	; (8008bc4 <_tx_thread_system_suspend+0x3d0>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d139      	bne.n	8008b3c <_tx_thread_system_suspend+0x348>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8008ac8:	4b3d      	ldr	r3, [pc, #244]	; (8008bc0 <_tx_thread_system_suspend+0x3cc>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a3e      	ldr	r2, [pc, #248]	; (8008bc8 <_tx_thread_system_suspend+0x3d4>)
 8008ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ad2:	4a3c      	ldr	r2, [pc, #240]	; (8008bc4 <_tx_thread_system_suspend+0x3d0>)
 8008ad4:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

            /* Check that the event time stamp is unchanged.  A different
               timestamp means that a later event wrote over the thread
               suspend event. In that case, do nothing here.  */
            if (entry_ptr != TX_NULL)
 8008ad6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d00a      	beq.n	8008af2 <_tx_thread_system_suspend+0x2fe>
            {
            
                /* Is the timestamp the same?  */
                if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 8008adc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d104      	bne.n	8008af2 <_tx_thread_system_suspend+0x2fe>
                {
    
                    /* Timestamp is the same, set the "next thread pointer" to the new value of the
                       next thread to execute. This can be used by the trace analysis tool to keep 
                       track of next thread execution.  */
                    entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 8008ae8:	4b36      	ldr	r3, [pc, #216]	; (8008bc4 <_tx_thread_system_suspend+0x3d0>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	461a      	mov	r2, r3
 8008aee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008af0:	61da      	str	r2, [r3, #28]
 8008af2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008af4:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af8:	f383 8810 	msr	PRIMASK, r3
}
 8008afc:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8008afe:	4b33      	ldr	r3, [pc, #204]	; (8008bcc <_tx_thread_system_suspend+0x3d8>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	65bb      	str	r3, [r7, #88]	; 0x58
            if (combined_flags == ((ULONG) 0))
 8008b04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d153      	bne.n	8008bb2 <_tx_thread_system_suspend+0x3be>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8008b0a:	4b31      	ldr	r3, [pc, #196]	; (8008bd0 <_tx_thread_system_suspend+0x3dc>)
 8008b0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b10:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008b12:	f3ef 8305 	mrs	r3, IPSR
 8008b16:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8008b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d10c      	bne.n	8008b38 <_tx_thread_system_suspend+0x344>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008b1e:	f3ef 8310 	mrs	r3, PRIMASK
 8008b22:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8008b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8008b26:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8008b28:	b662      	cpsie	i
}
 8008b2a:	bf00      	nop
 8008b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008b30:	6a3b      	ldr	r3, [r7, #32]
 8008b32:	f383 8810 	msr	PRIMASK, r3
}
 8008b36:	bf00      	nop
}
 8008b38:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8008b3a:	e03a      	b.n	8008bb2 <_tx_thread_system_suspend+0x3be>
#ifdef TX_ENABLE_EVENT_TRACE

         /* Check that the event time stamp is unchanged.  A different
            timestamp means that a later event wrote over the thread
            suspend event. In that case, do nothing here.  */
         if (entry_ptr != TX_NULL)
 8008b3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d00a      	beq.n	8008b58 <_tx_thread_system_suspend+0x364>
         {
            
            /* Is the timestamp the same?  */
            if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 8008b42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d104      	bne.n	8008b58 <_tx_thread_system_suspend+0x364>
                   next thread to execute. This can be used by the trace analysis tool to keep 
                   track of next thread execution.  */
#ifdef TX_MISRA_ENABLE
                entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
                entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 8008b4e:	4b1d      	ldr	r3, [pc, #116]	; (8008bc4 <_tx_thread_system_suspend+0x3d0>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	461a      	mov	r2, r3
 8008b54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b56:	61da      	str	r2, [r3, #28]
 8008b58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008b5a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	f383 8810 	msr	PRIMASK, r3
}
 8008b62:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8008b64:	4b17      	ldr	r3, [pc, #92]	; (8008bc4 <_tx_thread_system_suspend+0x3d0>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d022      	beq.n	8008bb6 <_tx_thread_system_suspend+0x3c2>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8008b70:	4b16      	ldr	r3, [pc, #88]	; (8008bcc <_tx_thread_system_suspend+0x3d8>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	65bb      	str	r3, [r7, #88]	; 0x58
        if (combined_flags == ((ULONG) 0))
 8008b76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d11c      	bne.n	8008bb6 <_tx_thread_system_suspend+0x3c2>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8008b7c:	4b14      	ldr	r3, [pc, #80]	; (8008bd0 <_tx_thread_system_suspend+0x3dc>)
 8008b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b82:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008b84:	f3ef 8305 	mrs	r3, IPSR
 8008b88:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8008b8a:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d10c      	bne.n	8008baa <_tx_thread_system_suspend+0x3b6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008b90:	f3ef 8310 	mrs	r3, PRIMASK
 8008b94:	617b      	str	r3, [r7, #20]
    return(posture);
 8008b96:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8008b98:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8008b9a:	b662      	cpsie	i
}
 8008b9c:	bf00      	nop
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f383 8810 	msr	PRIMASK, r3
}
 8008ba8:	bf00      	nop
}
 8008baa:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8008bac:	e003      	b.n	8008bb6 <_tx_thread_system_suspend+0x3c2>
                return;
 8008bae:	bf00      	nop
 8008bb0:	e002      	b.n	8008bb8 <_tx_thread_system_suspend+0x3c4>
            return;
 8008bb2:	bf00      	nop
 8008bb4:	e000      	b.n	8008bb8 <_tx_thread_system_suspend+0x3c4>
    return;
 8008bb6:	bf00      	nop
}
 8008bb8:	3790      	adds	r7, #144	; 0x90
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	2000135c 	.word	0x2000135c
 8008bc4:	2000134c 	.word	0x2000134c
 8008bc8:	20001360 	.word	0x20001360
 8008bcc:	200013e0 	.word	0x200013e0
 8008bd0:	e000ed04 	.word	0xe000ed04

08008bd4 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b08e      	sub	sp, #56	; 0x38
 8008bd8:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8008bda:	4b5f      	ldr	r3, [pc, #380]	; (8008d58 <_tx_thread_time_slice+0x184>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008be0:	f3ef 8310 	mrs	r3, PRIMASK
 8008be4:	61bb      	str	r3, [r7, #24]
    return(posture);
 8008be6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8008be8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008bea:	b672      	cpsid	i
    return(int_posture);
 8008bec:	697b      	ldr	r3, [r7, #20]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8008bee:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8008bf0:	4b5a      	ldr	r3, [pc, #360]	; (8008d5c <_tx_thread_time_slice+0x188>)
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d024      	beq.n	8008c46 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d120      	bne.n	8008c46 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	69d2      	ldr	r2, [r2, #28]
 8008c0a:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	699b      	ldr	r3, [r3, #24]
 8008c10:	4a53      	ldr	r2, [pc, #332]	; (8008d60 <_tx_thread_time_slice+0x18c>)
 8008c12:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a1a      	ldr	r2, [r3, #32]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d013      	beq.n	8008c46 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d10d      	bne.n	8008c46 <_tx_thread_time_slice+0x72>
                
                    /* Preemption-threshold is not being used by this thread.  */
        
                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c30:	6a12      	ldr	r2, [r2, #32]
 8008c32:	494c      	ldr	r1, [pc, #304]	; (8008d64 <_tx_thread_time_slice+0x190>)
 8008c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
                    /* Designate the highest priority thread as the one to execute.  Don't use this 
                       thread's priority as an index just in case a higher priority thread is now 
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8008c38:	4b4b      	ldr	r3, [pc, #300]	; (8008d68 <_tx_thread_time_slice+0x194>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a49      	ldr	r2, [pc, #292]	; (8008d64 <_tx_thread_time_slice+0x190>)
 8008c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c42:	4a4a      	ldr	r2, [pc, #296]	; (8008d6c <_tx_thread_time_slice+0x198>)
 8008c44:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008c46:	f3ef 8305 	mrs	r3, IPSR
 8008c4a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8008c4c:	693a      	ldr	r2, [r7, #16]
    }

#ifdef TX_ENABLE_EVENT_TRACE

    /* Pickup the volatile information.  */
    system_state =  TX_THREAD_GET_SYSTEM_STATE();
 8008c4e:	4b48      	ldr	r3, [pc, #288]	; (8008d70 <_tx_thread_time_slice+0x19c>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	62bb      	str	r3, [r7, #40]	; 0x28
    preempt_disable =  _tx_thread_preempt_disable;
 8008c56:	4b47      	ldr	r3, [pc, #284]	; (8008d74 <_tx_thread_time_slice+0x1a0>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	627b      	str	r3, [r7, #36]	; 0x24
   
    /* Insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_TIME_SLICE, _tx_thread_execute_ptr, system_state, preempt_disable, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), TX_TRACE_INTERNAL_EVENTS)
 8008c5c:	4b46      	ldr	r3, [pc, #280]	; (8008d78 <_tx_thread_time_slice+0x1a4>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	623b      	str	r3, [r7, #32]
 8008c62:	6a3b      	ldr	r3, [r7, #32]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d06d      	beq.n	8008d44 <_tx_thread_time_slice+0x170>
 8008c68:	4b44      	ldr	r3, [pc, #272]	; (8008d7c <_tx_thread_time_slice+0x1a8>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f003 0301 	and.w	r3, r3, #1
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d067      	beq.n	8008d44 <_tx_thread_time_slice+0x170>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008c74:	f3ef 8305 	mrs	r3, IPSR
 8008c78:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8008c7a:	68fa      	ldr	r2, [r7, #12]
 8008c7c:	4b3c      	ldr	r3, [pc, #240]	; (8008d70 <_tx_thread_time_slice+0x19c>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	61fb      	str	r3, [r7, #28]
 8008c84:	4b34      	ldr	r3, [pc, #208]	; (8008d58 <_tx_thread_time_slice+0x184>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	633b      	str	r3, [r7, #48]	; 0x30
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d10b      	bne.n	8008ca8 <_tx_thread_time_slice+0xd4>
 8008c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c94:	637b      	str	r3, [r7, #52]	; 0x34
 8008c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c9a:	041a      	lsls	r2, r3, #16
 8008c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ca4:	637b      	str	r3, [r7, #52]	; 0x34
 8008ca6:	e00e      	b.n	8008cc6 <_tx_thread_time_slice+0xf2>
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8008cae:	d205      	bcs.n	8008cbc <_tx_thread_time_slice+0xe8>
 8008cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb2:	637b      	str	r3, [r7, #52]	; 0x34
 8008cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8008cb8:	633b      	str	r3, [r7, #48]	; 0x30
 8008cba:	e004      	b.n	8008cc6 <_tx_thread_time_slice+0xf2>
 8008cbc:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8008cc0:	633b      	str	r3, [r7, #48]	; 0x30
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	637b      	str	r3, [r7, #52]	; 0x34
 8008cc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cc8:	6a3b      	ldr	r3, [r7, #32]
 8008cca:	601a      	str	r2, [r3, #0]
 8008ccc:	6a3b      	ldr	r3, [r7, #32]
 8008cce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cd0:	605a      	str	r2, [r3, #4]
 8008cd2:	6a3b      	ldr	r3, [r7, #32]
 8008cd4:	2205      	movs	r2, #5
 8008cd6:	609a      	str	r2, [r3, #8]
 8008cd8:	4b29      	ldr	r3, [pc, #164]	; (8008d80 <_tx_thread_time_slice+0x1ac>)
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	6a3b      	ldr	r3, [r7, #32]
 8008cde:	60da      	str	r2, [r3, #12]
 8008ce0:	4b22      	ldr	r3, [pc, #136]	; (8008d6c <_tx_thread_time_slice+0x198>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	6a3b      	ldr	r3, [r7, #32]
 8008ce8:	611a      	str	r2, [r3, #16]
 8008cea:	6a3b      	ldr	r3, [r7, #32]
 8008cec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cee:	615a      	str	r2, [r3, #20]
 8008cf0:	6a3b      	ldr	r3, [r7, #32]
 8008cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cf4:	619a      	str	r2, [r3, #24]
 8008cf6:	1d3a      	adds	r2, r7, #4
 8008cf8:	6a3b      	ldr	r3, [r7, #32]
 8008cfa:	61da      	str	r2, [r3, #28]
 8008cfc:	6a3b      	ldr	r3, [r7, #32]
 8008cfe:	3320      	adds	r3, #32
 8008d00:	623b      	str	r3, [r7, #32]
 8008d02:	4b20      	ldr	r3, [pc, #128]	; (8008d84 <_tx_thread_time_slice+0x1b0>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	6a3a      	ldr	r2, [r7, #32]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d314      	bcc.n	8008d36 <_tx_thread_time_slice+0x162>
 8008d0c:	4b1e      	ldr	r3, [pc, #120]	; (8008d88 <_tx_thread_time_slice+0x1b4>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	623b      	str	r3, [r7, #32]
 8008d12:	4a19      	ldr	r2, [pc, #100]	; (8008d78 <_tx_thread_time_slice+0x1a4>)
 8008d14:	6a3b      	ldr	r3, [r7, #32]
 8008d16:	6013      	str	r3, [r2, #0]
 8008d18:	4b1c      	ldr	r3, [pc, #112]	; (8008d8c <_tx_thread_time_slice+0x1b8>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	6a3a      	ldr	r2, [r7, #32]
 8008d1e:	621a      	str	r2, [r3, #32]
 8008d20:	4b1b      	ldr	r3, [pc, #108]	; (8008d90 <_tx_thread_time_slice+0x1bc>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d00d      	beq.n	8008d44 <_tx_thread_time_slice+0x170>
 8008d28:	4b19      	ldr	r3, [pc, #100]	; (8008d90 <_tx_thread_time_slice+0x1bc>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a17      	ldr	r2, [pc, #92]	; (8008d8c <_tx_thread_time_slice+0x1b8>)
 8008d2e:	6812      	ldr	r2, [r2, #0]
 8008d30:	4610      	mov	r0, r2
 8008d32:	4798      	blx	r3
 8008d34:	e006      	b.n	8008d44 <_tx_thread_time_slice+0x170>
 8008d36:	4a10      	ldr	r2, [pc, #64]	; (8008d78 <_tx_thread_time_slice+0x1a4>)
 8008d38:	6a3b      	ldr	r3, [r7, #32]
 8008d3a:	6013      	str	r3, [r2, #0]
 8008d3c:	4b13      	ldr	r3, [pc, #76]	; (8008d8c <_tx_thread_time_slice+0x1b8>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	6a3a      	ldr	r2, [r7, #32]
 8008d42:	621a      	str	r2, [r3, #32]
 8008d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d46:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	f383 8810 	msr	PRIMASK, r3
}
 8008d4e:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8008d50:	bf00      	nop
 8008d52:	3738      	adds	r7, #56	; 0x38
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	20001348 	.word	0x20001348
 8008d5c:	200013f0 	.word	0x200013f0
 8008d60:	2000194c 	.word	0x2000194c
 8008d64:	20001360 	.word	0x20001360
 8008d68:	2000135c 	.word	0x2000135c
 8008d6c:	2000134c 	.word	0x2000134c
 8008d70:	2000000c 	.word	0x2000000c
 8008d74:	200013e0 	.word	0x200013e0
 8008d78:	20001964 	.word	0x20001964
 8008d7c:	20001968 	.word	0x20001968
 8008d80:	e0001004 	.word	0xe0001004
 8008d84:	20001960 	.word	0x20001960
 8008d88:	2000195c 	.word	0x2000195c
 8008d8c:	20001950 	.word	0x20001950
 8008d90:	2000196c 	.word	0x2000196c

08008d94 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b08a      	sub	sp, #40	; 0x28
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008da0:	f3ef 8310 	mrs	r3, PRIMASK
 8008da4:	617b      	str	r3, [r7, #20]
    return(posture);
 8008da6:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8008da8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008daa:	b672      	cpsid	i
    return(int_posture);
 8008dac:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8008dae:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8008db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db4:	2b04      	cmp	r3, #4
 8008db6:	d10e      	bne.n	8008dd6 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8008db8:	4b13      	ldr	r3, [pc, #76]	; (8008e08 <_tx_thread_timeout+0x74>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	4a12      	ldr	r2, [pc, #72]	; (8008e08 <_tx_thread_timeout+0x74>)
 8008dc0:	6013      	str	r3, [r2, #0]
 8008dc2:	6a3b      	ldr	r3, [r7, #32]
 8008dc4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f383 8810 	msr	PRIMASK, r3
}
 8008dcc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8008dce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008dd0:	f7ff fb56 	bl	8008480 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8008dd4:	e013      	b.n	8008dfe <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8008dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008dda:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8008ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008de2:	61bb      	str	r3, [r7, #24]
 8008de4:	6a3b      	ldr	r3, [r7, #32]
 8008de6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	f383 8810 	msr	PRIMASK, r3
}
 8008dee:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d003      	beq.n	8008dfe <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	69b9      	ldr	r1, [r7, #24]
 8008dfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008dfc:	4798      	blx	r3
}
 8008dfe:	bf00      	nop
 8008e00:	3728      	adds	r7, #40	; 0x28
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	bf00      	nop
 8008e08:	200013e0 	.word	0x200013e0

08008e0c <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008e12:	f3ef 8310 	mrs	r3, PRIMASK
 8008e16:	607b      	str	r3, [r7, #4]
    return(posture);
 8008e18:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8008e1a:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008e1c:	b672      	cpsid	i
    return(int_posture);
 8008e1e:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the 
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8008e20:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8008e22:	4b09      	ldr	r3, [pc, #36]	; (8008e48 <_tx_timer_expiration_process+0x3c>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	3301      	adds	r3, #1
 8008e28:	4a07      	ldr	r2, [pc, #28]	; (8008e48 <_tx_timer_expiration_process+0x3c>)
 8008e2a:	6013      	str	r3, [r2, #0]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	f383 8810 	msr	PRIMASK, r3
}
 8008e36:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8008e38:	4804      	ldr	r0, [pc, #16]	; (8008e4c <_tx_timer_expiration_process+0x40>)
 8008e3a:	f7ff fb21 	bl	8008480 <_tx_thread_system_resume>
    }
    
    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8008e3e:	bf00      	nop
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	200013e0 	.word	0x200013e0
 8008e4c:	20001490 	.word	0x20001490

08008e50 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8008e50:	b590      	push	{r4, r7, lr}
 8008e52:	b089      	sub	sp, #36	; 0x24
 8008e54:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8008e56:	4b28      	ldr	r3, [pc, #160]	; (8008ef8 <_tx_timer_initialize+0xa8>)
 8008e58:	2200      	movs	r2, #0
 8008e5a:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8008e5c:	4b27      	ldr	r3, [pc, #156]	; (8008efc <_tx_timer_initialize+0xac>)
 8008e5e:	2200      	movs	r2, #0
 8008e60:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8008e62:	4b27      	ldr	r3, [pc, #156]	; (8008f00 <_tx_timer_initialize+0xb0>)
 8008e64:	2200      	movs	r2, #0
 8008e66:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8008e68:	4b26      	ldr	r3, [pc, #152]	; (8008f04 <_tx_timer_initialize+0xb4>)
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8008e6e:	4b26      	ldr	r3, [pc, #152]	; (8008f08 <_tx_timer_initialize+0xb8>)
 8008e70:	2200      	movs	r2, #0
 8008e72:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8008e74:	2280      	movs	r2, #128	; 0x80
 8008e76:	2100      	movs	r1, #0
 8008e78:	4824      	ldr	r0, [pc, #144]	; (8008f0c <_tx_timer_initialize+0xbc>)
 8008e7a:	f006 fdcd 	bl	800fa18 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8008e7e:	4b24      	ldr	r3, [pc, #144]	; (8008f10 <_tx_timer_initialize+0xc0>)
 8008e80:	4a22      	ldr	r2, [pc, #136]	; (8008f0c <_tx_timer_initialize+0xbc>)
 8008e82:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8008e84:	4b23      	ldr	r3, [pc, #140]	; (8008f14 <_tx_timer_initialize+0xc4>)
 8008e86:	4a21      	ldr	r2, [pc, #132]	; (8008f0c <_tx_timer_initialize+0xbc>)
 8008e88:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8008e8a:	4b23      	ldr	r3, [pc, #140]	; (8008f18 <_tx_timer_initialize+0xc8>)
 8008e8c:	4a23      	ldr	r2, [pc, #140]	; (8008f1c <_tx_timer_initialize+0xcc>)
 8008e8e:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8008e90:	4b21      	ldr	r3, [pc, #132]	; (8008f18 <_tx_timer_initialize+0xc8>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	3304      	adds	r3, #4
 8008e96:	4a20      	ldr	r2, [pc, #128]	; (8008f18 <_tx_timer_initialize+0xc8>)
 8008e98:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and 
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8008e9a:	4b21      	ldr	r3, [pc, #132]	; (8008f20 <_tx_timer_initialize+0xd0>)
 8008e9c:	4a21      	ldr	r2, [pc, #132]	; (8008f24 <_tx_timer_initialize+0xd4>)
 8008e9e:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8008ea0:	4b21      	ldr	r3, [pc, #132]	; (8008f28 <_tx_timer_initialize+0xd8>)
 8008ea2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008ea6:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8008ea8:	4b20      	ldr	r3, [pc, #128]	; (8008f2c <_tx_timer_initialize+0xdc>)
 8008eaa:	2200      	movs	r2, #0
 8008eac:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {
      
        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread, 
 8008eae:	4b1c      	ldr	r3, [pc, #112]	; (8008f20 <_tx_timer_initialize+0xd0>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a1d      	ldr	r2, [pc, #116]	; (8008f28 <_tx_timer_initialize+0xd8>)
 8008eb4:	6812      	ldr	r2, [r2, #0]
 8008eb6:	491d      	ldr	r1, [pc, #116]	; (8008f2c <_tx_timer_initialize+0xdc>)
 8008eb8:	6809      	ldr	r1, [r1, #0]
 8008eba:	481c      	ldr	r0, [pc, #112]	; (8008f2c <_tx_timer_initialize+0xdc>)
 8008ebc:	6800      	ldr	r0, [r0, #0]
 8008ebe:	2400      	movs	r4, #0
 8008ec0:	9405      	str	r4, [sp, #20]
 8008ec2:	2400      	movs	r4, #0
 8008ec4:	9404      	str	r4, [sp, #16]
 8008ec6:	9003      	str	r0, [sp, #12]
 8008ec8:	9102      	str	r1, [sp, #8]
 8008eca:	9201      	str	r2, [sp, #4]
 8008ecc:	9300      	str	r3, [sp, #0]
 8008ece:	4b18      	ldr	r3, [pc, #96]	; (8008f30 <_tx_timer_initialize+0xe0>)
 8008ed0:	4a18      	ldr	r2, [pc, #96]	; (8008f34 <_tx_timer_initialize+0xe4>)
 8008ed2:	4919      	ldr	r1, [pc, #100]	; (8008f38 <_tx_timer_initialize+0xe8>)
 8008ed4:	4819      	ldr	r0, [pc, #100]	; (8008f3c <_tx_timer_initialize+0xec>)
 8008ed6:	f7fe ff8b 	bl	8007df0 <_tx_thread_create>
 8008eda:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)
        
    } while (status != TX_SUCCESS);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d1e5      	bne.n	8008eae <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8008ee2:	4b17      	ldr	r3, [pc, #92]	; (8008f40 <_tx_timer_initialize+0xf0>)
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8008ee8:	4b16      	ldr	r3, [pc, #88]	; (8008f44 <_tx_timer_initialize+0xf4>)
 8008eea:	2200      	movs	r2, #0
 8008eec:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8008eee:	bf00      	nop
 8008ef0:	370c      	adds	r7, #12
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd90      	pop	{r4, r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	200013ec 	.word	0x200013ec
 8008efc:	2000194c 	.word	0x2000194c
 8008f00:	200013f0 	.word	0x200013f0
 8008f04:	20001480 	.word	0x20001480
 8008f08:	2000148c 	.word	0x2000148c
 8008f0c:	200013f4 	.word	0x200013f4
 8008f10:	20001474 	.word	0x20001474
 8008f14:	2000147c 	.word	0x2000147c
 8008f18:	20001478 	.word	0x20001478
 8008f1c:	20001470 	.word	0x20001470
 8008f20:	20001540 	.word	0x20001540
 8008f24:	2000154c 	.word	0x2000154c
 8008f28:	20001544 	.word	0x20001544
 8008f2c:	20001548 	.word	0x20001548
 8008f30:	4154494d 	.word	0x4154494d
 8008f34:	0800907d 	.word	0x0800907d
 8008f38:	080104ec 	.word	0x080104ec
 8008f3c:	20001490 	.word	0x20001490
 8008f40:	20001484 	.word	0x20001484
 8008f44:	20001488 	.word	0x20001488

08008f48 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b089      	sub	sp, #36	; 0x24
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d04a      	beq.n	8008ff2 <_tx_timer_system_activate+0xaa>
    {
    
        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f62:	d046      	beq.n	8008ff2 <_tx_timer_system_activate+0xaa>
        {
    
            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	699b      	ldr	r3, [r3, #24]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d142      	bne.n	8008ff2 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	2b20      	cmp	r3, #32
 8008f70:	d902      	bls.n	8008f78 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8008f72:	231f      	movs	r3, #31
 8008f74:	61bb      	str	r3, [r7, #24]
 8008f76:	e002      	b.n	8008f7e <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */
    
                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8008f7e:	4b20      	ldr	r3, [pc, #128]	; (8009000 <_tx_timer_system_activate+0xb8>)
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	69bb      	ldr	r3, [r7, #24]
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	4413      	add	r3, r2
 8008f88:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8008f8a:	4b1e      	ldr	r3, [pc, #120]	; (8009004 <_tx_timer_system_activate+0xbc>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	69fa      	ldr	r2, [r7, #28]
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d30b      	bcc.n	8008fac <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8008f94:	4b1b      	ldr	r3, [pc, #108]	; (8009004 <_tx_timer_system_activate+0xbc>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	69fa      	ldr	r2, [r7, #28]
 8008f9a:	1ad3      	subs	r3, r2, r3
 8008f9c:	109b      	asrs	r3, r3, #2
 8008f9e:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8008fa0:	4b19      	ldr	r3, [pc, #100]	; (8009008 <_tx_timer_system_activate+0xc0>)
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	4413      	add	r3, r2
 8008faa:	61fb      	str	r3, [r7, #28]
                }
    
                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d109      	bne.n	8008fc8 <_tx_timer_system_activate+0x80>
                {
                
                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8008fc0:	69fb      	ldr	r3, [r7, #28]
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	601a      	str	r2, [r3, #0]
 8008fc6:	e011      	b.n	8008fec <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8008fc8:	69fb      	ldr	r3, [r7, #28]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	695b      	ldr	r3, [r3, #20]
 8008fd2:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	68fa      	ldr	r2, [r7, #12]
 8008fe4:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	68ba      	ldr	r2, [r7, #8]
 8008fea:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	69fa      	ldr	r2, [r7, #28]
 8008ff0:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8008ff2:	bf00      	nop
 8008ff4:	3724      	adds	r7, #36	; 0x24
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr
 8008ffe:	bf00      	nop
 8009000:	2000147c 	.word	0x2000147c
 8009004:	20001478 	.word	0x20001478
 8009008:	20001474 	.word	0x20001474

0800900c <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800900c:	b480      	push	{r7}
 800900e:	b087      	sub	sp, #28
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	699b      	ldr	r3, [r3, #24]
 8009018:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d026      	beq.n	800906e <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	691b      	ldr	r3, [r3, #16]
 8009024:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8009026:	687a      	ldr	r2, [r7, #4]
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	429a      	cmp	r2, r3
 800902c:	d108      	bne.n	8009040 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	429a      	cmp	r2, r3
 8009036:	d117      	bne.n	8009068 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	2200      	movs	r2, #0
 800903c:	601a      	str	r2, [r3, #0]
 800903e:	e013      	b.n	8009068 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	695b      	ldr	r3, [r3, #20]
 8009044:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	693a      	ldr	r2, [r7, #16]
 8009050:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	429a      	cmp	r2, r3
 800905a:	d105      	bne.n	8009068 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	697a      	ldr	r2, [r7, #20]
 8009060:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	693a      	ldr	r2, [r7, #16]
 8009066:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	619a      	str	r2, [r3, #24]
    }
}
 800906e:	bf00      	nop
 8009070:	371c      	adds	r7, #28
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr
	...

0800907c <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b098      	sub	sp, #96	; 0x60
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8009084:	2300      	movs	r3, #0
 8009086:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4a73      	ldr	r2, [pc, #460]	; (8009258 <_tx_timer_thread_entry+0x1dc>)
 800908c:	4293      	cmp	r3, r2
 800908e:	f040 80de 	bne.w	800924e <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009092:	f3ef 8310 	mrs	r3, PRIMASK
 8009096:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8009098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800909a:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800909c:	b672      	cpsid	i
    return(int_posture);
 800909e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer 
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 80090a0:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 80090a2:	4b6e      	ldr	r3, [pc, #440]	; (800925c <_tx_timer_thread_entry+0x1e0>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d003      	beq.n	80090b8 <_tx_timer_thread_entry+0x3c>
            {
        
                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f107 020c 	add.w	r2, r7, #12
 80090b6:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 80090b8:	4b68      	ldr	r3, [pc, #416]	; (800925c <_tx_timer_thread_entry+0x1e0>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2200      	movs	r2, #0
 80090be:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to 
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 80090c0:	4b66      	ldr	r3, [pc, #408]	; (800925c <_tx_timer_thread_entry+0x1e0>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	3304      	adds	r3, #4
 80090c6:	4a65      	ldr	r2, [pc, #404]	; (800925c <_tx_timer_thread_entry+0x1e0>)
 80090c8:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 80090ca:	4b64      	ldr	r3, [pc, #400]	; (800925c <_tx_timer_thread_entry+0x1e0>)
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	4b64      	ldr	r3, [pc, #400]	; (8009260 <_tx_timer_thread_entry+0x1e4>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d103      	bne.n	80090de <_tx_timer_thread_entry+0x62>
            {
        
                _tx_timer_current_ptr =  _tx_timer_list_start;
 80090d6:	4b63      	ldr	r3, [pc, #396]	; (8009264 <_tx_timer_thread_entry+0x1e8>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a60      	ldr	r2, [pc, #384]	; (800925c <_tx_timer_thread_entry+0x1e0>)
 80090dc:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 80090de:	4b62      	ldr	r3, [pc, #392]	; (8009268 <_tx_timer_thread_entry+0x1ec>)
 80090e0:	2200      	movs	r2, #0
 80090e2:	601a      	str	r2, [r3, #0]
 80090e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090e6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80090e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ea:	f383 8810 	msr	PRIMASK, r3
}
 80090ee:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80090f0:	f3ef 8310 	mrs	r3, PRIMASK
 80090f4:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 80090f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 80090f8:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80090fa:	b672      	cpsid	i
    return(int_posture);
 80090fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 80090fe:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8009100:	e07f      	b.n	8009202 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	691b      	ldr	r3, [r3, #16]
 800910a:	64bb      	str	r3, [r7, #72]	; 0x48
            
                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800910c:	2300      	movs	r3, #0
 800910e:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8009110:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009114:	429a      	cmp	r2, r3
 8009116:	d102      	bne.n	800911e <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8009118:	2300      	movs	r3, #0
 800911a:	60fb      	str	r3, [r7, #12]
 800911c:	e00e      	b.n	800913c <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */
            
                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800911e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009120:	695b      	ldr	r3, [r3, #20]
 8009122:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8009124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009126:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009128:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800912a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800912c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800912e:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8009130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009132:	f107 020c 	add.w	r2, r7, #12
 8009136:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8009138:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800913a:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really 
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800913c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	2b20      	cmp	r3, #32
 8009142:	d911      	bls.n	8009168 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8009144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =  
 800914c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800914e:	601a      	str	r2, [r3, #0]
                
                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8009150:	2300      	movs	r3, #0
 8009152:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8009154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009156:	f107 0208 	add.w	r2, r7, #8
 800915a:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800915c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800915e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009160:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8009162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009164:	60bb      	str	r3, [r7, #8]
 8009166:	e01a      	b.n	800919e <_tx_timer_thread_entry+0x122>
                    }
#endif
                  
                    /* Copy the calling function and ID into local variables before interrupts 
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8009168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800916e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009170:	68db      	ldr	r3, [r3, #12]
 8009172:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8009174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009176:	685a      	ldr	r2, [r3, #4]
 8009178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800917a:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800917c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d009      	beq.n	8009198 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will 
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8009184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009186:	f107 0208 	add.w	r2, r7, #8
 800918a:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800918c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800918e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009190:	611a      	str	r2, [r3, #16]
                        
                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8009192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009194:	60bb      	str	r3, [r7, #8]
 8009196:	e002      	b.n	800919e <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8009198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800919a:	2200      	movs	r2, #0
 800919c:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800919e:	4a33      	ldr	r2, [pc, #204]	; (800926c <_tx_timer_thread_entry+0x1f0>)
 80091a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091a2:	6013      	str	r3, [r2, #0]
 80091a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80091a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091aa:	f383 8810 	msr	PRIMASK, r3
}
 80091ae:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 80091b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d002      	beq.n	80091bc <_tx_timer_thread_entry+0x140>
                {
            
                    (timeout_function) (timeout_param);
 80091b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80091b8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80091ba:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80091bc:	f3ef 8310 	mrs	r3, PRIMASK
 80091c0:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80091c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80091c4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80091c6:	b672      	cpsid	i
    return(int_posture);
 80091c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 80091ca:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 80091cc:	4b27      	ldr	r3, [pc, #156]	; (800926c <_tx_timer_thread_entry+0x1f0>)
 80091ce:	2200      	movs	r2, #0
 80091d0:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d105      	bne.n	80091e6 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 80091da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091dc:	2200      	movs	r2, #0
 80091de:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 80091e0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80091e2:	f7ff feb1 	bl	8008f48 <_tx_timer_system_activate>
 80091e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091e8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	f383 8810 	msr	PRIMASK, r3
}
 80091f0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80091f2:	f3ef 8310 	mrs	r3, PRIMASK
 80091f6:	623b      	str	r3, [r7, #32]
    return(posture);
 80091f8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80091fa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80091fc:	b672      	cpsid	i
    return(int_posture);
 80091fe:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8009200:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2b00      	cmp	r3, #0
 8009206:	f47f af7c 	bne.w	8009102 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800920a:	4b17      	ldr	r3, [pc, #92]	; (8009268 <_tx_timer_thread_entry+0x1ec>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d116      	bne.n	8009240 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8009212:	4b17      	ldr	r3, [pc, #92]	; (8009270 <_tx_timer_thread_entry+0x1f4>)
 8009214:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the 
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8009216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009218:	2203      	movs	r2, #3
 800921a:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800921c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800921e:	2201      	movs	r2, #1
 8009220:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8009222:	4b14      	ldr	r3, [pc, #80]	; (8009274 <_tx_timer_thread_entry+0x1f8>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	3301      	adds	r3, #1
 8009228:	4a12      	ldr	r2, [pc, #72]	; (8009274 <_tx_timer_thread_entry+0x1f8>)
 800922a:	6013      	str	r3, [r2, #0]
 800922c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800922e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	f383 8810 	msr	PRIMASK, r3
}
 8009236:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8009238:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800923a:	f7ff fadb 	bl	80087f4 <_tx_thread_system_suspend>
 800923e:	e728      	b.n	8009092 <_tx_timer_thread_entry+0x16>
 8009240:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009242:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	f383 8810 	msr	PRIMASK, r3
}
 800924a:	bf00      	nop
            TX_DISABLE
 800924c:	e721      	b.n	8009092 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800924e:	bf00      	nop
 8009250:	3760      	adds	r7, #96	; 0x60
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	4154494d 	.word	0x4154494d
 800925c:	2000147c 	.word	0x2000147c
 8009260:	20001478 	.word	0x20001478
 8009264:	20001474 	.word	0x20001474
 8009268:	20001480 	.word	0x20001480
 800926c:	2000148c 	.word	0x2000148c
 8009270:	20001490 	.word	0x20001490
 8009274:	200013e0 	.word	0x200013e0

08009278 <_tx_trace_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_initialize(VOID)
{
 8009278:	b480      	push	{r7}
 800927a:	af00      	add	r7, sp, #0

#ifdef TX_ENABLE_EVENT_TRACE
#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize all the pointers to the trace buffer to NULL.  */
    _tx_trace_header_ptr =          TX_NULL;
 800927c:	4b0b      	ldr	r3, [pc, #44]	; (80092ac <_tx_trace_initialize+0x34>)
 800927e:	2200      	movs	r2, #0
 8009280:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_start_ptr =  TX_NULL;
 8009282:	4b0b      	ldr	r3, [pc, #44]	; (80092b0 <_tx_trace_initialize+0x38>)
 8009284:	2200      	movs	r2, #0
 8009286:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_end_ptr =    TX_NULL;
 8009288:	4b0a      	ldr	r3, [pc, #40]	; (80092b4 <_tx_trace_initialize+0x3c>)
 800928a:	2200      	movs	r2, #0
 800928c:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_start_ptr =    TX_NULL;
 800928e:	4b0a      	ldr	r3, [pc, #40]	; (80092b8 <_tx_trace_initialize+0x40>)
 8009290:	2200      	movs	r2, #0
 8009292:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_end_ptr =      TX_NULL;
 8009294:	4b09      	ldr	r3, [pc, #36]	; (80092bc <_tx_trace_initialize+0x44>)
 8009296:	2200      	movs	r2, #0
 8009298:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_current_ptr =  TX_NULL;
 800929a:	4b09      	ldr	r3, [pc, #36]	; (80092c0 <_tx_trace_initialize+0x48>)
 800929c:	2200      	movs	r2, #0
 800929e:	601a      	str	r2, [r3, #0]
#endif
#endif
}
 80092a0:	bf00      	nop
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr
 80092aa:	bf00      	nop
 80092ac:	20001950 	.word	0x20001950
 80092b0:	20001954 	.word	0x20001954
 80092b4:	20001958 	.word	0x20001958
 80092b8:	2000195c 	.word	0x2000195c
 80092bc:	20001960 	.word	0x20001960
 80092c0:	20001964 	.word	0x20001964

080092c4 <_tx_trace_object_register>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_object_register(UCHAR object_type, VOID *object_ptr, CHAR *object_name, ULONG parameter_1, ULONG parameter_2)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b08d      	sub	sp, #52	; 0x34
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60b9      	str	r1, [r7, #8]
 80092cc:	607a      	str	r2, [r7, #4]
 80092ce:	603b      	str	r3, [r7, #0]
 80092d0:	4603      	mov	r3, r0
 80092d2:	73fb      	strb	r3, [r7, #15]
UCHAR                           *work_ptr;
TX_TRACE_OBJECT_ENTRY           *entry_ptr;


    /* Determine if the registry area is setup.  */
    if (_tx_trace_registry_start_ptr != TX_NULL)
 80092d4:	4b6d      	ldr	r3, [pc, #436]	; (800948c <_tx_trace_object_register+0x1c8>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	f000 80d0 	beq.w	800947e <_tx_trace_object_register+0x1ba>
    {

        /* Trace buffer is enabled, proceed.  */

        /* Pickup the total entries.  */
        entries =  _tx_trace_total_registry_entries;
 80092de:	4b6c      	ldr	r3, [pc, #432]	; (8009490 <_tx_trace_object_register+0x1cc>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	623b      	str	r3, [r7, #32]

        /* Determine if there are available entries in the registry.  */
        if (_tx_trace_available_registry_entries != ((ULONG) 0))
 80092e4:	4b6b      	ldr	r3, [pc, #428]	; (8009494 <_tx_trace_object_register+0x1d0>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	f000 80c8 	beq.w	800947e <_tx_trace_object_register+0x1ba>
        {
    
            /* There are more available entries, proceed.  */

            /* Initialize found to the max entries... indicating no space was found.  */
            found =       entries;
 80092ee:	6a3b      	ldr	r3, [r7, #32]
 80092f0:	62bb      	str	r3, [r7, #40]	; 0x28
            loop_break =  TX_FALSE;
 80092f2:	2300      	movs	r3, #0
 80092f4:	627b      	str	r3, [r7, #36]	; 0x24

            /* Loop to find available entry.  */
            i =  _tx_trace_registry_search_start;
 80092f6:	4b68      	ldr	r3, [pc, #416]	; (8009498 <_tx_trace_object_register+0x1d4>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	62fb      	str	r3, [r7, #44]	; 0x2c
            do
            {

                /* Setup the registry entry pointer.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 80092fc:	4b63      	ldr	r3, [pc, #396]	; (800948c <_tx_trace_object_register+0x1c8>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*i));
 8009302:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009304:	4613      	mov	r3, r2
 8009306:	005b      	lsls	r3, r3, #1
 8009308:	4413      	add	r3, r2
 800930a:	011b      	lsls	r3, r3, #4
 800930c:	461a      	mov	r2, r3
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	4413      	add	r3, r2
 8009312:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 8009314:	69fb      	ldr	r3, [r7, #28]
 8009316:	61bb      	str	r3, [r7, #24]

                /* Determine if this is the first pass building the registry. A NULL object value indicates this part
                   of the registry has never been used.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == (ULONG) 0)
 8009318:	69bb      	ldr	r3, [r7, #24]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d103      	bne.n	8009328 <_tx_trace_object_register+0x64>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 8009320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009322:	62bb      	str	r3, [r7, #40]	; 0x28
                    loop_break =  TX_TRUE;
 8009324:	2301      	movs	r3, #1
 8009326:	627b      	str	r3, [r7, #36]	; 0x24
                }

                /* Determine if this entry matches the object pointer... we must reuse old entries left in the 
                   registry.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == TX_POINTER_TO_ULONG_CONVERT(object_ptr))
 8009328:	69bb      	ldr	r3, [r7, #24]
 800932a:	685a      	ldr	r2, [r3, #4]
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	429a      	cmp	r2, r3
 8009330:	d103      	bne.n	800933a <_tx_trace_object_register+0x76>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 8009332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009334:	62bb      	str	r3, [r7, #40]	; 0x28
                    loop_break =  TX_TRUE;
 8009336:	2301      	movs	r3, #1
 8009338:	627b      	str	r3, [r7, #36]	; 0x24
                }
                
                /* Determine if we should break out of the loop.  */
                if (loop_break == TX_TRUE)
 800933a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933c:	2b01      	cmp	r3, #1
 800933e:	d02d      	beq.n	800939c <_tx_trace_object_register+0xd8>
                    /* Yes, break out of the loop.  */
                    break;
                }

                /* Is this entry available?  */
                if (entry_ptr -> tx_trace_object_entry_available == TX_TRUE)
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	2b01      	cmp	r3, #1
 8009346:	d11a      	bne.n	800937e <_tx_trace_object_register+0xba>
                {

                    /* Yes, determine if we have not already found an empty slot.  */
                    if (found == entries)
 8009348:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800934a:	6a3b      	ldr	r3, [r7, #32]
 800934c:	429a      	cmp	r2, r3
 800934e:	d102      	bne.n	8009356 <_tx_trace_object_register+0x92>
                    {
                        found =  i;
 8009350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009352:	62bb      	str	r3, [r7, #40]	; 0x28
 8009354:	e013      	b.n	800937e <_tx_trace_object_register+0xba>
                    }
                    else
                    {
                    
                        /* Setup a pointer to the found entry.  */
                        work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 8009356:	4b4d      	ldr	r3, [pc, #308]	; (800948c <_tx_trace_object_register+0x1c8>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	61fb      	str	r3, [r7, #28]
                        work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 800935c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800935e:	4613      	mov	r3, r2
 8009360:	005b      	lsls	r3, r3, #1
 8009362:	4413      	add	r3, r2
 8009364:	011b      	lsls	r3, r3, #4
 8009366:	461a      	mov	r2, r3
 8009368:	69fb      	ldr	r3, [r7, #28]
 800936a:	4413      	add	r3, r2
 800936c:	61fb      	str	r3, [r7, #28]
                        entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	61bb      	str	r3, [r7, #24]
                
                         if (entry_ptr -> tx_trace_object_entry_type != ((UCHAR) 0))
 8009372:	69bb      	ldr	r3, [r7, #24]
 8009374:	785b      	ldrb	r3, [r3, #1]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d001      	beq.n	800937e <_tx_trace_object_register+0xba>
                         {
                            found =  i;
 800937a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800937c:	62bb      	str	r3, [r7, #40]	; 0x28
                         }
                    }
                }
        
                /* Move to the next entry.  */
                i++;
 800937e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009380:	3301      	adds	r3, #1
 8009382:	62fb      	str	r3, [r7, #44]	; 0x2c
        
                /* Determine if we have wrapped the list.  */
                if (i >= entries)
 8009384:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009386:	6a3b      	ldr	r3, [r7, #32]
 8009388:	429a      	cmp	r2, r3
 800938a:	d301      	bcc.n	8009390 <_tx_trace_object_register+0xcc>
                {
        
                    /* Yes, wrap to the beginning of the list.  */
                    i =  ((ULONG) 0);
 800938c:	2300      	movs	r3, #0
 800938e:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
        
            } while (i != _tx_trace_registry_search_start);
 8009390:	4b41      	ldr	r3, [pc, #260]	; (8009498 <_tx_trace_object_register+0x1d4>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009396:	429a      	cmp	r2, r3
 8009398:	d1b0      	bne.n	80092fc <_tx_trace_object_register+0x38>
 800939a:	e000      	b.n	800939e <_tx_trace_object_register+0xda>
                    break;
 800939c:	bf00      	nop

            /* Now determine if an empty or reuse entry has been found.  */
            if (found < entries)
 800939e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093a0:	6a3b      	ldr	r3, [r7, #32]
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d26b      	bcs.n	800947e <_tx_trace_object_register+0x1ba>
            {

                /* Decrement the number of available entries.  */
                _tx_trace_available_registry_entries--;
 80093a6:	4b3b      	ldr	r3, [pc, #236]	; (8009494 <_tx_trace_object_register+0x1d0>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	3b01      	subs	r3, #1
 80093ac:	4a39      	ldr	r2, [pc, #228]	; (8009494 <_tx_trace_object_register+0x1d0>)
 80093ae:	6013      	str	r3, [r2, #0]

                /* Adjust the search index to the next entry.  */
                if ((found + ((ULONG) 1)) < entries)
 80093b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b2:	3301      	adds	r3, #1
 80093b4:	6a3a      	ldr	r2, [r7, #32]
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d904      	bls.n	80093c4 <_tx_trace_object_register+0x100>
                {
                    
                    /* Start searching from the next index.  */
                    _tx_trace_registry_search_start =  found + ((ULONG) 1);
 80093ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093bc:	3301      	adds	r3, #1
 80093be:	4a36      	ldr	r2, [pc, #216]	; (8009498 <_tx_trace_object_register+0x1d4>)
 80093c0:	6013      	str	r3, [r2, #0]
 80093c2:	e002      	b.n	80093ca <_tx_trace_object_register+0x106>
                }
                else
                {
                
                    /* Reset the search to the beginning of the list. */
                    _tx_trace_registry_search_start =  ((ULONG) 0);
 80093c4:	4b34      	ldr	r3, [pc, #208]	; (8009498 <_tx_trace_object_register+0x1d4>)
 80093c6:	2200      	movs	r2, #0
 80093c8:	601a      	str	r2, [r3, #0]
                }
        
                /* Yes, an entry has been found...  */
                
                /* Build a pointer to the found entry.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 80093ca:	4b30      	ldr	r3, [pc, #192]	; (800948c <_tx_trace_object_register+0x1c8>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 80093d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093d2:	4613      	mov	r3, r2
 80093d4:	005b      	lsls	r3, r3, #1
 80093d6:	4413      	add	r3, r2
 80093d8:	011b      	lsls	r3, r3, #4
 80093da:	461a      	mov	r2, r3
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	4413      	add	r3, r2
 80093e0:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 80093e2:	69fb      	ldr	r3, [r7, #28]
 80093e4:	61bb      	str	r3, [r7, #24]
                
                /* Populate the found entry!  */
                entry_ptr -> tx_trace_object_entry_available =       ((UCHAR) TX_FALSE);
 80093e6:	69bb      	ldr	r3, [r7, #24]
 80093e8:	2200      	movs	r2, #0
 80093ea:	701a      	strb	r2, [r3, #0]
                entry_ptr -> tx_trace_object_entry_type =            object_type;
 80093ec:	69bb      	ldr	r3, [r7, #24]
 80093ee:	7bfa      	ldrb	r2, [r7, #15]
 80093f0:	705a      	strb	r2, [r3, #1]
                entry_ptr -> tx_trace_object_entry_thread_pointer =  TX_POINTER_TO_ULONG_CONVERT(object_ptr);
 80093f2:	68ba      	ldr	r2, [r7, #8]
 80093f4:	69bb      	ldr	r3, [r7, #24]
 80093f6:	605a      	str	r2, [r3, #4]
                entry_ptr -> tx_trace_object_entry_param_1 =         parameter_1;
 80093f8:	69bb      	ldr	r3, [r7, #24]
 80093fa:	683a      	ldr	r2, [r7, #0]
 80093fc:	609a      	str	r2, [r3, #8]
                entry_ptr -> tx_trace_object_entry_param_2 =         parameter_2;
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009402:	60da      	str	r2, [r3, #12]

                /* Loop to copy the object name string...  */
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 8009404:	2300      	movs	r3, #0
 8009406:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009408:	e014      	b.n	8009434 <_tx_trace_object_register+0x170>
                {

                    /* Setup work pointer to the object name character.  */
                    work_ptr =  TX_CHAR_TO_UCHAR_POINTER_CONVERT(object_name);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	61fb      	str	r3, [r7, #28]
                    work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, i);
 800940e:	69fa      	ldr	r2, [r7, #28]
 8009410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009412:	4413      	add	r3, r2
 8009414:	61fb      	str	r3, [r7, #28]
                  
                    /* Copy a character of the name.  */
                    entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) *work_ptr;
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	7819      	ldrb	r1, [r3, #0]
 800941a:	69ba      	ldr	r2, [r7, #24]
 800941c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800941e:	4413      	add	r3, r2
 8009420:	3310      	adds	r3, #16
 8009422:	460a      	mov	r2, r1
 8009424:	701a      	strb	r2, [r3, #0]

                    /* Determine if we are at the end.  */
                    if (*work_ptr == ((UCHAR) 0))
 8009426:	69fb      	ldr	r3, [r7, #28]
 8009428:	781b      	ldrb	r3, [r3, #0]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d006      	beq.n	800943c <_tx_trace_object_register+0x178>
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 800942e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009430:	3301      	adds	r3, #1
 8009432:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009436:	2b1e      	cmp	r3, #30
 8009438:	d9e7      	bls.n	800940a <_tx_trace_object_register+0x146>
 800943a:	e000      	b.n	800943e <_tx_trace_object_register+0x17a>
                    {
                        break;
 800943c:	bf00      	nop
                    }
                }

                /* Null terminate the object string.  */
                entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) 0;
 800943e:	69ba      	ldr	r2, [r7, #24]
 8009440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009442:	4413      	add	r3, r2
 8009444:	3310      	adds	r3, #16
 8009446:	2200      	movs	r2, #0
 8009448:	701a      	strb	r2, [r3, #0]

                /* Determine if a thread object type is present.  */
                if (object_type == TX_TRACE_OBJECT_TYPE_THREAD)
 800944a:	7bfb      	ldrb	r3, [r7, #15]
 800944c:	2b01      	cmp	r3, #1
 800944e:	d110      	bne.n	8009472 <_tx_trace_object_register+0x1ae>
                {

                    /* Yes, a thread object is present.  */
            
                    /* Setup a pointer to the thread.  */
                    thread_ptr =  TX_VOID_TO_THREAD_POINTER_CONVERT(object_ptr);
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	617b      	str	r3, [r7, #20]
            
                    /* Store the thread's priority in the reserved bits.  */
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0x80) | ((UCHAR) (thread_ptr -> tx_thread_priority >> ((UCHAR) 8)));
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009458:	0a1b      	lsrs	r3, r3, #8
 800945a:	b2db      	uxtb	r3, r3
 800945c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009460:	b2da      	uxtb	r2, r3
 8009462:	69bb      	ldr	r3, [r7, #24]
 8009464:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  (UCHAR) (thread_ptr -> tx_thread_priority & ((UCHAR) 0xFF));
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946a:	b2da      	uxtb	r2, r3
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	70da      	strb	r2, [r3, #3]
                }
            }
        }
    }
#endif
}
 8009470:	e005      	b.n	800947e <_tx_trace_object_register+0x1ba>
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0);
 8009472:	69bb      	ldr	r3, [r7, #24]
 8009474:	2200      	movs	r2, #0
 8009476:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  ((UCHAR) 0);
 8009478:	69bb      	ldr	r3, [r7, #24]
 800947a:	2200      	movs	r2, #0
 800947c:	70da      	strb	r2, [r3, #3]
}
 800947e:	bf00      	nop
 8009480:	3734      	adds	r7, #52	; 0x34
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr
 800948a:	bf00      	nop
 800948c:	20001954 	.word	0x20001954
 8009490:	20001970 	.word	0x20001970
 8009494:	20001974 	.word	0x20001974
 8009498:	20001978 	.word	0x20001978

0800949c <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b092      	sub	sp, #72	; 0x48
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	607a      	str	r2, [r7, #4]
 80094a8:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80094aa:	2300      	movs	r3, #0
 80094ac:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d102      	bne.n	80094ba <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80094b4:	2302      	movs	r3, #2
 80094b6:	647b      	str	r3, [r7, #68]	; 0x44
 80094b8:	e075      	b.n	80095a6 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 80094ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094bc:	2b34      	cmp	r3, #52	; 0x34
 80094be:	d002      	beq.n	80094c6 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80094c0:	2302      	movs	r3, #2
 80094c2:	647b      	str	r3, [r7, #68]	; 0x44
 80094c4:	e06f      	b.n	80095a6 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80094c6:	f3ef 8310 	mrs	r3, PRIMASK
 80094ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80094cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80094ce:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80094d0:	b672      	cpsid	i
    return(int_posture);
 80094d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {
    
        /* Disable interrupts.  */
        TX_DISABLE
 80094d4:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80094d6:	4b3b      	ldr	r3, [pc, #236]	; (80095c4 <_txe_byte_pool_create+0x128>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	3301      	adds	r3, #1
 80094dc:	4a39      	ldr	r2, [pc, #228]	; (80095c4 <_txe_byte_pool_create+0x128>)
 80094de:	6013      	str	r3, [r2, #0]
 80094e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e2:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80094e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e6:	f383 8810 	msr	PRIMASK, r3
}
 80094ea:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 80094ec:	4b36      	ldr	r3, [pc, #216]	; (80095c8 <_txe_byte_pool_create+0x12c>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80094f2:	2300      	movs	r3, #0
 80094f4:	643b      	str	r3, [r7, #64]	; 0x40
 80094f6:	e009      	b.n	800950c <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 80094f8:	68fa      	ldr	r2, [r7, #12]
 80094fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d00b      	beq.n	8009518 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8009500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009504:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8009506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009508:	3301      	adds	r3, #1
 800950a:	643b      	str	r3, [r7, #64]	; 0x40
 800950c:	4b2f      	ldr	r3, [pc, #188]	; (80095cc <_txe_byte_pool_create+0x130>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009512:	429a      	cmp	r2, r3
 8009514:	d3f0      	bcc.n	80094f8 <_txe_byte_pool_create+0x5c>
 8009516:	e000      	b.n	800951a <_txe_byte_pool_create+0x7e>
                break;
 8009518:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800951a:	f3ef 8310 	mrs	r3, PRIMASK
 800951e:	623b      	str	r3, [r7, #32]
    return(posture);
 8009520:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8009522:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009524:	b672      	cpsid	i
    return(int_posture);
 8009526:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8009528:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800952a:	4b26      	ldr	r3, [pc, #152]	; (80095c4 <_txe_byte_pool_create+0x128>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	3b01      	subs	r3, #1
 8009530:	4a24      	ldr	r2, [pc, #144]	; (80095c4 <_txe_byte_pool_create+0x128>)
 8009532:	6013      	str	r3, [r2, #0]
 8009534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009536:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953a:	f383 8810 	msr	PRIMASK, r3
}
 800953e:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8009540:	f7fe ff64 	bl	800840c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009548:	429a      	cmp	r2, r3
 800954a:	d102      	bne.n	8009552 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800954c:	2302      	movs	r3, #2
 800954e:	647b      	str	r3, [r7, #68]	; 0x44
 8009550:	e029      	b.n	80095a6 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d102      	bne.n	800955e <_txe_byte_pool_create+0xc2>
        {
    
            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8009558:	2303      	movs	r3, #3
 800955a:	647b      	str	r3, [r7, #68]	; 0x44
 800955c:	e023      	b.n	80095a6 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	2b63      	cmp	r3, #99	; 0x63
 8009562:	d802      	bhi.n	800956a <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8009564:	2305      	movs	r3, #5
 8009566:	647b      	str	r3, [r7, #68]	; 0x44
 8009568:	e01d      	b.n	80095a6 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800956a:	4b19      	ldr	r3, [pc, #100]	; (80095d0 <_txe_byte_pool_create+0x134>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8009570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009572:	4a18      	ldr	r2, [pc, #96]	; (80095d4 <_txe_byte_pool_create+0x138>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d101      	bne.n	800957c <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8009578:	2313      	movs	r3, #19
 800957a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800957c:	f3ef 8305 	mrs	r3, IPSR
 8009580:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8009582:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8009584:	4b14      	ldr	r3, [pc, #80]	; (80095d8 <_txe_byte_pool_create+0x13c>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4313      	orrs	r3, r2
 800958a:	2b00      	cmp	r3, #0
 800958c:	d00b      	beq.n	80095a6 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800958e:	f3ef 8305 	mrs	r3, IPSR
 8009592:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8009594:	697a      	ldr	r2, [r7, #20]
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8009596:	4b10      	ldr	r3, [pc, #64]	; (80095d8 <_txe_byte_pool_create+0x13c>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4313      	orrs	r3, r2
 800959c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80095a0:	d201      	bcs.n	80095a6 <_txe_byte_pool_create+0x10a>
                {
        
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80095a2:	2313      	movs	r3, #19
 80095a4:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80095a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d106      	bne.n	80095ba <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	68b9      	ldr	r1, [r7, #8]
 80095b2:	68f8      	ldr	r0, [r7, #12]
 80095b4:	f7fd f88e 	bl	80066d4 <_tx_byte_pool_create>
 80095b8:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 80095ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3748      	adds	r7, #72	; 0x48
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	200013e0 	.word	0x200013e0
 80095c8:	20001338 	.word	0x20001338
 80095cc:	2000133c 	.word	0x2000133c
 80095d0:	20001348 	.word	0x20001348
 80095d4:	20001490 	.word	0x20001490
 80095d8:	2000000c 	.word	0x2000000c

080095dc <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size, 
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b094      	sub	sp, #80	; 0x50
 80095e0:	af02      	add	r7, sp, #8
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	607a      	str	r2, [r7, #4]
 80095e8:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80095ea:	2300      	movs	r3, #0
 80095ec:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d102      	bne.n	80095fa <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80095f4:	2309      	movs	r3, #9
 80095f6:	647b      	str	r3, [r7, #68]	; 0x44
 80095f8:	e083      	b.n	8009702 <_txe_queue_create+0x126>
    }
    
    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 80095fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095fc:	2b38      	cmp	r3, #56	; 0x38
 80095fe:	d002      	beq.n	8009606 <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8009600:	2309      	movs	r3, #9
 8009602:	647b      	str	r3, [r7, #68]	; 0x44
 8009604:	e07d      	b.n	8009702 <_txe_queue_create+0x126>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009606:	f3ef 8310 	mrs	r3, PRIMASK
 800960a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800960c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800960e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8009610:	b672      	cpsid	i
    return(int_posture);
 8009612:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8009614:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8009616:	4b43      	ldr	r3, [pc, #268]	; (8009724 <_txe_queue_create+0x148>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	3301      	adds	r3, #1
 800961c:	4a41      	ldr	r2, [pc, #260]	; (8009724 <_txe_queue_create+0x148>)
 800961e:	6013      	str	r3, [r2, #0]
 8009620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009622:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009626:	f383 8810 	msr	PRIMASK, r3
}
 800962a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 800962c:	4b3e      	ldr	r3, [pc, #248]	; (8009728 <_txe_queue_create+0x14c>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 8009632:	2300      	movs	r3, #0
 8009634:	643b      	str	r3, [r7, #64]	; 0x40
 8009636:	e009      	b.n	800964c <_txe_queue_create+0x70>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 8009638:	68fa      	ldr	r2, [r7, #12]
 800963a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800963c:	429a      	cmp	r2, r3
 800963e:	d00b      	beq.n	8009658 <_txe_queue_create+0x7c>
            }
            else
            {
        
                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 8009640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009644:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 8009646:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009648:	3301      	adds	r3, #1
 800964a:	643b      	str	r3, [r7, #64]	; 0x40
 800964c:	4b37      	ldr	r3, [pc, #220]	; (800972c <_txe_queue_create+0x150>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009652:	429a      	cmp	r2, r3
 8009654:	d3f0      	bcc.n	8009638 <_txe_queue_create+0x5c>
 8009656:	e000      	b.n	800965a <_txe_queue_create+0x7e>
                break;
 8009658:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800965a:	f3ef 8310 	mrs	r3, PRIMASK
 800965e:	623b      	str	r3, [r7, #32]
    return(posture);
 8009660:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8009662:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009664:	b672      	cpsid	i
    return(int_posture);
 8009666:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8009668:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800966a:	4b2e      	ldr	r3, [pc, #184]	; (8009724 <_txe_queue_create+0x148>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	3b01      	subs	r3, #1
 8009670:	4a2c      	ldr	r2, [pc, #176]	; (8009724 <_txe_queue_create+0x148>)
 8009672:	6013      	str	r3, [r2, #0]
 8009674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009676:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967a:	f383 8810 	msr	PRIMASK, r3
}
 800967e:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8009680:	f7fe fec4 	bl	800840c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 8009684:	68fa      	ldr	r2, [r7, #12]
 8009686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009688:	429a      	cmp	r2, r3
 800968a:	d102      	bne.n	8009692 <_txe_queue_create+0xb6>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 800968c:	2309      	movs	r3, #9
 800968e:	647b      	str	r3, [r7, #68]	; 0x44
 8009690:	e037      	b.n	8009702 <_txe_queue_create+0x126>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d102      	bne.n	800969e <_txe_queue_create+0xc2>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 8009698:	2303      	movs	r3, #3
 800969a:	647b      	str	r3, [r7, #68]	; 0x44
 800969c:	e031      	b.n	8009702 <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d102      	bne.n	80096aa <_txe_queue_create+0xce>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 80096a4:	2305      	movs	r3, #5
 80096a6:	647b      	str	r3, [r7, #68]	; 0x44
 80096a8:	e02b      	b.n	8009702 <_txe_queue_create+0x126>
        }
    
        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2b10      	cmp	r3, #16
 80096ae:	d902      	bls.n	80096b6 <_txe_queue_create+0xda>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 80096b0:	2305      	movs	r3, #5
 80096b2:	647b      	str	r3, [r7, #68]	; 0x44
 80096b4:	e025      	b.n	8009702 <_txe_queue_create+0x126>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 80096b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096b8:	089b      	lsrs	r3, r3, #2
 80096ba:	687a      	ldr	r2, [r7, #4]
 80096bc:	429a      	cmp	r2, r3
 80096be:	d902      	bls.n	80096c6 <_txe_queue_create+0xea>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 80096c0:	2305      	movs	r3, #5
 80096c2:	647b      	str	r3, [r7, #68]	; 0x44
 80096c4:	e01d      	b.n	8009702 <_txe_queue_create+0x126>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80096c6:	4b1a      	ldr	r3, [pc, #104]	; (8009730 <_txe_queue_create+0x154>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80096cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ce:	4a19      	ldr	r2, [pc, #100]	; (8009734 <_txe_queue_create+0x158>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d101      	bne.n	80096d8 <_txe_queue_create+0xfc>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80096d4:	2313      	movs	r3, #19
 80096d6:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80096d8:	f3ef 8305 	mrs	r3, IPSR
 80096dc:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80096de:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80096e0:	4b15      	ldr	r3, [pc, #84]	; (8009738 <_txe_queue_create+0x15c>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4313      	orrs	r3, r2
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d00b      	beq.n	8009702 <_txe_queue_create+0x126>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80096ea:	f3ef 8305 	mrs	r3, IPSR
 80096ee:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80096f0:	697a      	ldr	r2, [r7, #20]
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80096f2:	4b11      	ldr	r3, [pc, #68]	; (8009738 <_txe_queue_create+0x15c>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4313      	orrs	r3, r2
 80096f8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80096fc:	d201      	bcs.n	8009702 <_txe_queue_create+0x126>
                {
        
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80096fe:	2313      	movs	r3, #19
 8009700:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8009702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009704:	2b00      	cmp	r3, #0
 8009706:	d108      	bne.n	800971a <_txe_queue_create+0x13e>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 8009708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800970a:	9300      	str	r3, [sp, #0]
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	68b9      	ldr	r1, [r7, #8]
 8009712:	68f8      	ldr	r0, [r7, #12]
 8009714:	f7fd f9f6 	bl	8006b04 <_tx_queue_create>
 8009718:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800971a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800971c:	4618      	mov	r0, r3
 800971e:	3748      	adds	r7, #72	; 0x48
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}
 8009724:	200013e0 	.word	0x200013e0
 8009728:	20001318 	.word	0x20001318
 800972c:	2000131c 	.word	0x2000131c
 8009730:	20001348 	.word	0x20001348
 8009734:	20001490 	.word	0x20001490
 8009738:	2000000c 	.word	0x2000000c

0800973c <_txe_queue_flush>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_flush(TX_QUEUE *queue_ptr)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d102      	bne.n	8009750 <_txe_queue_flush+0x14>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800974a:	2309      	movs	r3, #9
 800974c:	60fb      	str	r3, [r7, #12]
 800974e:	e00b      	b.n	8009768 <_txe_queue_flush+0x2c>
    }
    
    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a07      	ldr	r2, [pc, #28]	; (8009774 <_txe_queue_flush+0x38>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d002      	beq.n	8009760 <_txe_queue_flush+0x24>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800975a:	2309      	movs	r3, #9
 800975c:	60fb      	str	r3, [r7, #12]
 800975e:	e003      	b.n	8009768 <_txe_queue_flush+0x2c>
    }
    else
    {

        /* Call actual queue flush function.  */
        status =  _tx_queue_flush(queue_ptr);
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f7fd facf 	bl	8006d04 <_tx_queue_flush>
 8009766:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8009768:	68fb      	ldr	r3, [r7, #12]
}
 800976a:	4618      	mov	r0, r3
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	51554555 	.word	0x51554555

08009778 <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b088      	sub	sp, #32
 800977c:	af00      	add	r7, sp, #0
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8009784:	2300      	movs	r3, #0
 8009786:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d102      	bne.n	8009794 <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800978e:	2309      	movs	r3, #9
 8009790:	61fb      	str	r3, [r7, #28]
 8009792:	e025      	b.n	80097e0 <_txe_queue_receive+0x68>
    }
    
    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a18      	ldr	r2, [pc, #96]	; (80097fc <_txe_queue_receive+0x84>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d002      	beq.n	80097a4 <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800979e:	2309      	movs	r3, #9
 80097a0:	61fb      	str	r3, [r7, #28]
 80097a2:	e01d      	b.n	80097e0 <_txe_queue_receive+0x68>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d102      	bne.n	80097b0 <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 80097aa:	2303      	movs	r3, #3
 80097ac:	61fb      	str	r3, [r7, #28]
 80097ae:	e017      	b.n	80097e0 <_txe_queue_receive+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d014      	beq.n	80097e0 <_txe_queue_receive+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80097b6:	f3ef 8305 	mrs	r3, IPSR
 80097ba:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80097bc:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80097be:	4b10      	ldr	r3, [pc, #64]	; (8009800 <_txe_queue_receive+0x88>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4313      	orrs	r3, r2
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d002      	beq.n	80097ce <_txe_queue_receive+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80097c8:	2304      	movs	r3, #4
 80097ca:	61fb      	str	r3, [r7, #28]
 80097cc:	e008      	b.n	80097e0 <_txe_queue_receive+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 80097ce:	4b0d      	ldr	r3, [pc, #52]	; (8009804 <_txe_queue_receive+0x8c>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 80097d4:	69bb      	ldr	r3, [r7, #24]
 80097d6:	4a0c      	ldr	r2, [pc, #48]	; (8009808 <_txe_queue_receive+0x90>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d101      	bne.n	80097e0 <_txe_queue_receive+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 80097dc:	2304      	movs	r3, #4
 80097de:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80097e0:	69fb      	ldr	r3, [r7, #28]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d105      	bne.n	80097f2 <_txe_queue_receive+0x7a>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	68b9      	ldr	r1, [r7, #8]
 80097ea:	68f8      	ldr	r0, [r7, #12]
 80097ec:	f7fd fb9c 	bl	8006f28 <_tx_queue_receive>
 80097f0:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 80097f2:	69fb      	ldr	r3, [r7, #28]
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3720      	adds	r7, #32
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}
 80097fc:	51554555 	.word	0x51554555
 8009800:	2000000c 	.word	0x2000000c
 8009804:	20001348 	.word	0x20001348
 8009808:	20001490 	.word	0x20001490

0800980c <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b088      	sub	sp, #32
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8009818:	2300      	movs	r3, #0
 800981a:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d102      	bne.n	8009828 <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8009822:	2309      	movs	r3, #9
 8009824:	61fb      	str	r3, [r7, #28]
 8009826:	e025      	b.n	8009874 <_txe_queue_send+0x68>
    }
    
    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a18      	ldr	r2, [pc, #96]	; (8009890 <_txe_queue_send+0x84>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d002      	beq.n	8009838 <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8009832:	2309      	movs	r3, #9
 8009834:	61fb      	str	r3, [r7, #28]
 8009836:	e01d      	b.n	8009874 <_txe_queue_send+0x68>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d102      	bne.n	8009844 <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800983e:	2303      	movs	r3, #3
 8009840:	61fb      	str	r3, [r7, #28]
 8009842:	e017      	b.n	8009874 <_txe_queue_send+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d014      	beq.n	8009874 <_txe_queue_send+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800984a:	f3ef 8305 	mrs	r3, IPSR
 800984e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8009850:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8009852:	4b10      	ldr	r3, [pc, #64]	; (8009894 <_txe_queue_send+0x88>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4313      	orrs	r3, r2
 8009858:	2b00      	cmp	r3, #0
 800985a:	d002      	beq.n	8009862 <_txe_queue_send+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800985c:	2304      	movs	r3, #4
 800985e:	61fb      	str	r3, [r7, #28]
 8009860:	e008      	b.n	8009874 <_txe_queue_send+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {
    
                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8009862:	4b0d      	ldr	r3, [pc, #52]	; (8009898 <_txe_queue_send+0x8c>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8009868:	69bb      	ldr	r3, [r7, #24]
 800986a:	4a0c      	ldr	r2, [pc, #48]	; (800989c <_txe_queue_send+0x90>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d101      	bne.n	8009874 <_txe_queue_send+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8009870:	2304      	movs	r3, #4
 8009872:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d105      	bne.n	8009886 <_txe_queue_send+0x7a>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 800987a:	687a      	ldr	r2, [r7, #4]
 800987c:	68b9      	ldr	r1, [r7, #8]
 800987e:	68f8      	ldr	r0, [r7, #12]
 8009880:	f7fd fda0 	bl	80073c4 <_tx_queue_send>
 8009884:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 8009886:	69fb      	ldr	r3, [r7, #28]
}
 8009888:	4618      	mov	r0, r3
 800988a:	3720      	adds	r7, #32
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	51554555 	.word	0x51554555
 8009894:	2000000c 	.word	0x2000000c
 8009898:	20001348 	.word	0x20001348
 800989c:	20001490 	.word	0x20001490

080098a0 <_txe_semaphore_ceiling_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_ceiling_put(TX_SEMAPHORE *semaphore_ptr, ULONG ceiling)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b084      	sub	sp, #16
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d102      	bne.n	80098b6 <_txe_semaphore_ceiling_put+0x16>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80098b0:	230c      	movs	r3, #12
 80098b2:	60fb      	str	r3, [r7, #12]
 80098b4:	e012      	b.n	80098dc <_txe_semaphore_ceiling_put+0x3c>
    }
    
    /* Now check for a valid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a0b      	ldr	r2, [pc, #44]	; (80098e8 <_txe_semaphore_ceiling_put+0x48>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d002      	beq.n	80098c6 <_txe_semaphore_ceiling_put+0x26>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80098c0:	230c      	movs	r3, #12
 80098c2:	60fb      	str	r3, [r7, #12]
 80098c4:	e00a      	b.n	80098dc <_txe_semaphore_ceiling_put+0x3c>
    }

    /* Determine if the ceiling is valid - must be greater than 1.  */
    else if (ceiling == ((ULONG) 0))
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d102      	bne.n	80098d2 <_txe_semaphore_ceiling_put+0x32>
    {

        /* Invalid ceiling, return error.  */
        status =  TX_INVALID_CEILING;
 80098cc:	2322      	movs	r3, #34	; 0x22
 80098ce:	60fb      	str	r3, [r7, #12]
 80098d0:	e004      	b.n	80098dc <_txe_semaphore_ceiling_put+0x3c>
    }
    else
    {

        /* Call actual semaphore ceiling put function.  */
        status =  _tx_semaphore_ceiling_put(semaphore_ptr, ceiling);
 80098d2:	6839      	ldr	r1, [r7, #0]
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f7fd ff27 	bl	8007728 <_tx_semaphore_ceiling_put>
 80098da:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 80098dc:	68fb      	ldr	r3, [r7, #12]
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3710      	adds	r7, #16
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	bf00      	nop
 80098e8:	53454d41 	.word	0x53454d41

080098ec <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b092      	sub	sp, #72	; 0x48
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	607a      	str	r2, [r7, #4]
 80098f8:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80098fa:	2300      	movs	r3, #0
 80098fc:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d102      	bne.n	800990a <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8009904:	230c      	movs	r3, #12
 8009906:	647b      	str	r3, [r7, #68]	; 0x44
 8009908:	e054      	b.n	80099b4 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	2b1c      	cmp	r3, #28
 800990e:	d002      	beq.n	8009916 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8009910:	230c      	movs	r3, #12
 8009912:	647b      	str	r3, [r7, #68]	; 0x44
 8009914:	e04e      	b.n	80099b4 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009916:	f3ef 8310 	mrs	r3, PRIMASK
 800991a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800991c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800991e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8009920:	b672      	cpsid	i
    return(int_posture);
 8009922:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8009924:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8009926:	4b36      	ldr	r3, [pc, #216]	; (8009a00 <_txe_semaphore_create+0x114>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	3301      	adds	r3, #1
 800992c:	4a34      	ldr	r2, [pc, #208]	; (8009a00 <_txe_semaphore_create+0x114>)
 800992e:	6013      	str	r3, [r2, #0]
 8009930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009932:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009936:	f383 8810 	msr	PRIMASK, r3
}
 800993a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800993c:	4b31      	ldr	r3, [pc, #196]	; (8009a04 <_txe_semaphore_create+0x118>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8009942:	2300      	movs	r3, #0
 8009944:	643b      	str	r3, [r7, #64]	; 0x40
 8009946:	e009      	b.n	800995c <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 8009948:	68fa      	ldr	r2, [r7, #12]
 800994a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800994c:	429a      	cmp	r2, r3
 800994e:	d00b      	beq.n	8009968 <_txe_semaphore_create+0x7c>
            }
            else
            {
            
                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 8009950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009952:	695b      	ldr	r3, [r3, #20]
 8009954:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8009956:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009958:	3301      	adds	r3, #1
 800995a:	643b      	str	r3, [r7, #64]	; 0x40
 800995c:	4b2a      	ldr	r3, [pc, #168]	; (8009a08 <_txe_semaphore_create+0x11c>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009962:	429a      	cmp	r2, r3
 8009964:	d3f0      	bcc.n	8009948 <_txe_semaphore_create+0x5c>
 8009966:	e000      	b.n	800996a <_txe_semaphore_create+0x7e>
                break;
 8009968:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800996a:	f3ef 8310 	mrs	r3, PRIMASK
 800996e:	623b      	str	r3, [r7, #32]
    return(posture);
 8009970:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8009972:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009974:	b672      	cpsid	i
    return(int_posture);
 8009976:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8009978:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800997a:	4b21      	ldr	r3, [pc, #132]	; (8009a00 <_txe_semaphore_create+0x114>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	3b01      	subs	r3, #1
 8009980:	4a1f      	ldr	r2, [pc, #124]	; (8009a00 <_txe_semaphore_create+0x114>)
 8009982:	6013      	str	r3, [r2, #0]
 8009984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009986:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998a:	f383 8810 	msr	PRIMASK, r3
}
 800998e:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8009990:	f7fe fd3c 	bl	800840c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 8009994:	68fa      	ldr	r2, [r7, #12]
 8009996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009998:	429a      	cmp	r2, r3
 800999a:	d102      	bne.n	80099a2 <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800999c:	230c      	movs	r3, #12
 800999e:	647b      	str	r3, [r7, #68]	; 0x44
 80099a0:	e008      	b.n	80099b4 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {
        
            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80099a2:	4b1a      	ldr	r3, [pc, #104]	; (8009a0c <_txe_semaphore_create+0x120>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80099a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099aa:	4a19      	ldr	r2, [pc, #100]	; (8009a10 <_txe_semaphore_create+0x124>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d101      	bne.n	80099b4 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80099b0:	2313      	movs	r3, #19
 80099b2:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80099b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d114      	bne.n	80099e4 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80099ba:	f3ef 8305 	mrs	r3, IPSR
 80099be:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80099c0:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80099c2:	4b14      	ldr	r3, [pc, #80]	; (8009a14 <_txe_semaphore_create+0x128>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	4313      	orrs	r3, r2
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d00b      	beq.n	80099e4 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80099cc:	f3ef 8305 	mrs	r3, IPSR
 80099d0:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80099d2:	697a      	ldr	r2, [r7, #20]
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80099d4:	4b0f      	ldr	r3, [pc, #60]	; (8009a14 <_txe_semaphore_create+0x128>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4313      	orrs	r3, r2
 80099da:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80099de:	d201      	bcs.n	80099e4 <_txe_semaphore_create+0xf8>
            {
        
                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80099e0:	2313      	movs	r3, #19
 80099e2:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80099e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d105      	bne.n	80099f6 <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	68b9      	ldr	r1, [r7, #8]
 80099ee:	68f8      	ldr	r0, [r7, #12]
 80099f0:	f7fe f808 	bl	8007a04 <_tx_semaphore_create>
 80099f4:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 80099f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3748      	adds	r7, #72	; 0x48
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}
 8009a00:	200013e0 	.word	0x200013e0
 8009a04:	20001310 	.word	0x20001310
 8009a08:	20001314 	.word	0x20001314
 8009a0c:	20001348 	.word	0x20001348
 8009a10:	20001490 	.word	0x20001490
 8009a14:	2000000c 	.word	0x2000000c

08009a18 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b086      	sub	sp, #24
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8009a22:	2300      	movs	r3, #0
 8009a24:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d102      	bne.n	8009a32 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8009a2c:	230c      	movs	r3, #12
 8009a2e:	617b      	str	r3, [r7, #20]
 8009a30:	e01f      	b.n	8009a72 <_txe_semaphore_get+0x5a>
    }
    
    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a15      	ldr	r2, [pc, #84]	; (8009a8c <_txe_semaphore_get+0x74>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d002      	beq.n	8009a42 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8009a3c:	230c      	movs	r3, #12
 8009a3e:	617b      	str	r3, [r7, #20]
 8009a40:	e017      	b.n	8009a72 <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d014      	beq.n	8009a72 <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009a48:	f3ef 8305 	mrs	r3, IPSR
 8009a4c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8009a4e:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8009a50:	4b0f      	ldr	r3, [pc, #60]	; (8009a90 <_txe_semaphore_get+0x78>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4313      	orrs	r3, r2
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d002      	beq.n	8009a60 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8009a5a:	2304      	movs	r3, #4
 8009a5c:	617b      	str	r3, [r7, #20]
 8009a5e:	e008      	b.n	8009a72 <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {
            
                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8009a60:	4b0c      	ldr	r3, [pc, #48]	; (8009a94 <_txe_semaphore_get+0x7c>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	4a0b      	ldr	r2, [pc, #44]	; (8009a98 <_txe_semaphore_get+0x80>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d101      	bne.n	8009a72 <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8009a6e:	2304      	movs	r3, #4
 8009a70:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d104      	bne.n	8009a82 <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 8009a78:	6839      	ldr	r1, [r7, #0]
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f7fe f8a2 	bl	8007bc4 <_tx_semaphore_get>
 8009a80:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8009a82:	697b      	ldr	r3, [r7, #20]
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3718      	adds	r7, #24
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	53454d41 	.word	0x53454d41
 8009a90:	2000000c 	.word	0x2000000c
 8009a94:	20001348 	.word	0x20001348
 8009a98:	20001490 	.word	0x20001490

08009a9c <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, 
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size, 
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b09a      	sub	sp, #104	; 0x68
 8009aa0:	af06      	add	r7, sp, #24
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	60b9      	str	r1, [r7, #8]
 8009aa6:	607a      	str	r2, [r7, #4]
 8009aa8:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d102      	bne.n	8009aba <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8009ab4:	230e      	movs	r3, #14
 8009ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ab8:	e0bb      	b.n	8009c32 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8009aba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009abc:	2bb0      	cmp	r3, #176	; 0xb0
 8009abe:	d002      	beq.n	8009ac6 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8009ac0:	230e      	movs	r3, #14
 8009ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ac4:	e0b5      	b.n	8009c32 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009ac6:	f3ef 8310 	mrs	r3, PRIMASK
 8009aca:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8009acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8009ace:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8009ad0:	b672      	cpsid	i
    return(int_posture);
 8009ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8009ad4:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8009ad6:	4b64      	ldr	r3, [pc, #400]	; (8009c68 <_txe_thread_create+0x1cc>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	3301      	adds	r3, #1
 8009adc:	4a62      	ldr	r2, [pc, #392]	; (8009c68 <_txe_thread_create+0x1cc>)
 8009ade:	6013      	str	r3, [r2, #0]
 8009ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae6:	f383 8810 	msr	PRIMASK, r3
}
 8009aea:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8009aec:	2300      	movs	r3, #0
 8009aee:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 8009af0:	4b5e      	ldr	r3, [pc, #376]	; (8009c6c <_txe_thread_create+0x1d0>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8009af6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009af8:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8009afa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009afc:	3b01      	subs	r3, #1
 8009afe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b00:	4413      	add	r3, r2
 8009b02:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8009b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b06:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8009b08:	2300      	movs	r3, #0
 8009b0a:	647b      	str	r3, [r7, #68]	; 0x44
 8009b0c:	e02b      	b.n	8009b66 <_txe_thread_create+0xca>
        {
        
            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8009b0e:	68fa      	ldr	r2, [r7, #12]
 8009b10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d101      	bne.n	8009b1a <_txe_thread_create+0x7e>
            {
        
                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8009b16:	2301      	movs	r3, #1
 8009b18:	64bb      	str	r3, [r7, #72]	; 0x48
            }
            
            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8009b1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d028      	beq.n	8009b72 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8009b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b22:	68db      	ldr	r3, [r3, #12]
 8009b24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d308      	bcc.n	8009b3c <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8009b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b2c:	691b      	ldr	r3, [r3, #16]
 8009b2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d203      	bcs.n	8009b3c <_txe_thread_create+0xa0>
                {
        
                    /* This stack overlaps with an existing thread, clear the stack pointer to 
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8009b34:	2300      	movs	r3, #0
 8009b36:	65bb      	str	r3, [r7, #88]	; 0x58
                    
                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8009b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d308      	bcc.n	8009b58 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8009b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b48:	691b      	ldr	r3, [r3, #16]
 8009b4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d203      	bcs.n	8009b58 <_txe_thread_create+0xbc>
                {
        
                    /* This stack overlaps with an existing thread, clear the stack pointer to 
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8009b50:	2300      	movs	r3, #0
 8009b52:	65bb      	str	r3, [r7, #88]	; 0x58
                    
                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8009b54:	2301      	movs	r3, #1
 8009b56:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8009b58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b5e:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8009b60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b62:	3301      	adds	r3, #1
 8009b64:	647b      	str	r3, [r7, #68]	; 0x44
 8009b66:	4b42      	ldr	r3, [pc, #264]	; (8009c70 <_txe_thread_create+0x1d4>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d3ce      	bcc.n	8009b0e <_txe_thread_create+0x72>
 8009b70:	e000      	b.n	8009b74 <_txe_thread_create+0xd8>
                break;
 8009b72:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009b74:	f3ef 8310 	mrs	r3, PRIMASK
 8009b78:	61fb      	str	r3, [r7, #28]
    return(posture);
 8009b7a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8009b7c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009b7e:	b672      	cpsid	i
    return(int_posture);
 8009b80:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8009b82:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8009b84:	4b38      	ldr	r3, [pc, #224]	; (8009c68 <_txe_thread_create+0x1cc>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	3b01      	subs	r3, #1
 8009b8a:	4a37      	ldr	r2, [pc, #220]	; (8009c68 <_txe_thread_create+0x1cc>)
 8009b8c:	6013      	str	r3, [r2, #0]
 8009b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b90:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009b92:	6a3b      	ldr	r3, [r7, #32]
 8009b94:	f383 8810 	msr	PRIMASK, r3
}
 8009b98:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8009b9a:	f7fe fc37 	bl	800840c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 8009b9e:	68fa      	ldr	r2, [r7, #12]
 8009ba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	d102      	bne.n	8009bac <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8009ba6:	230e      	movs	r3, #14
 8009ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009baa:	e042      	b.n	8009c32 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8009bac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d102      	bne.n	8009bb8 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8009bb2:	2303      	movs	r3, #3
 8009bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009bb6:	e03c      	b.n	8009c32 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d102      	bne.n	8009bc4 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8009bbe:	2303      	movs	r3, #3
 8009bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009bc2:	e036      	b.n	8009c32 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8009bc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009bc6:	2bc7      	cmp	r3, #199	; 0xc7
 8009bc8:	d802      	bhi.n	8009bd0 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8009bca:	2305      	movs	r3, #5
 8009bcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009bce:	e030      	b.n	8009c32 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8009bd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009bd2:	2b1f      	cmp	r3, #31
 8009bd4:	d902      	bls.n	8009bdc <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8009bd6:	230f      	movs	r3, #15
 8009bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009bda:	e02a      	b.n	8009c32 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8009bdc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009bde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d902      	bls.n	8009bea <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8009be4:	2318      	movs	r3, #24
 8009be6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009be8:	e023      	b.n	8009c32 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8009bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d902      	bls.n	8009bf6 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8009bf0:	2310      	movs	r3, #16
 8009bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009bf4:	e01d      	b.n	8009c32 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8009bf6:	4b1f      	ldr	r3, [pc, #124]	; (8009c74 <_txe_thread_create+0x1d8>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8009bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bfe:	4a1e      	ldr	r2, [pc, #120]	; (8009c78 <_txe_thread_create+0x1dc>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d101      	bne.n	8009c08 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8009c04:	2313      	movs	r3, #19
 8009c06:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009c08:	f3ef 8305 	mrs	r3, IPSR
 8009c0c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8009c0e:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8009c10:	4b1a      	ldr	r3, [pc, #104]	; (8009c7c <_txe_thread_create+0x1e0>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4313      	orrs	r3, r2
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d00b      	beq.n	8009c32 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009c1a:	f3ef 8305 	mrs	r3, IPSR
 8009c1e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8009c20:	693a      	ldr	r2, [r7, #16]
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8009c22:	4b16      	ldr	r3, [pc, #88]	; (8009c7c <_txe_thread_create+0x1e0>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4313      	orrs	r3, r2
 8009c28:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8009c2c:	d201      	bcs.n	8009c32 <_txe_thread_create+0x196>
                {
            
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8009c2e:	2313      	movs	r3, #19
 8009c30:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8009c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d112      	bne.n	8009c5e <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8009c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c3a:	9305      	str	r3, [sp, #20]
 8009c3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c3e:	9304      	str	r3, [sp, #16]
 8009c40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c42:	9303      	str	r3, [sp, #12]
 8009c44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c46:	9302      	str	r3, [sp, #8]
 8009c48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c4a:	9301      	str	r3, [sp, #4]
 8009c4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	68b9      	ldr	r1, [r7, #8]
 8009c56:	68f8      	ldr	r0, [r7, #12]
 8009c58:	f7fe f8ca 	bl	8007df0 <_tx_thread_create>
 8009c5c:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8009c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3750      	adds	r7, #80	; 0x50
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	200013e0 	.word	0x200013e0
 8009c6c:	20001350 	.word	0x20001350
 8009c70:	20001354 	.word	0x20001354
 8009c74:	20001348 	.word	0x20001348
 8009c78:	20001490 	.word	0x20001490
 8009c7c:	2000000c 	.word	0x2000000c

08009c80 <tx_low_power_enter>:
/*                                            compiler warning,           */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_enter(VOID)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b086      	sub	sp, #24
 8009c84:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009c86:	f3ef 8310 	mrs	r3, PRIMASK
 8009c8a:	60fb      	str	r3, [r7, #12]
    return(posture);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8009c8e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009c90:	b672      	cpsid	i
    return(int_posture);
 8009c92:	68bb      	ldr	r3, [r7, #8]
ULONG   tx_low_power_next_expiration;   /* The next timer experation (units of ThreadX timer ticks). */
ULONG   timers_active;
#endif

    /* Disable interrupts while we prepare for low power mode.  */
    TX_DISABLE
 8009c94:	613b      	str	r3, [r7, #16]
    /*  At this point, we want to enter low power mode, since nothing
        meaningful is going on in the system. However, in order to keep
        the ThreadX timer services accurate, we must first determine the
        next ThreadX timer expiration in terms of ticks. This is
        accomplished via the tx_timer_get_next API.  */
    timers_active =  tx_timer_get_next(&tx_low_power_next_expiration);
 8009c96:	463b      	mov	r3, r7
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f000 f83d 	bl	8009d18 <tx_timer_get_next>
 8009c9e:	6178      	str	r0, [r7, #20]
            a low power clock needs to be set up.
    */

#ifndef TX_LOW_POWER_TICKLESS
    /* We still want to keep track of time in low power mode. */
    if (timers_active == TX_FALSE)
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d104      	bne.n	8009cb0 <tx_low_power_enter+0x30>
    {
        /* Set the next expiration to 0xFFFFFFF, an indication that the timer sleeps for
           maximum amount of time the HW supports.*/
        tx_low_power_next_expiration = 0xFFFFFFFF;
 8009ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8009caa:	603b      	str	r3, [r7, #0]
        timers_active = TX_TRUE;
 8009cac:	2301      	movs	r3, #1
 8009cae:	617b      	str	r3, [r7, #20]
    }
#endif /* TX_LOW_POWER_TICKLESS */

    if (timers_active == TX_TRUE)
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d103      	bne.n	8009cbe <tx_low_power_enter+0x3e>
    {
        /* A ThreadX timer is active or we simply want to keep track of time. */
        TX_LOW_POWER_TIMER_SETUP(tx_low_power_next_expiration);
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7f6 fe1d 	bl	80008f8 <App_ThreadX_LowPower_Timer_Setup>


    /* Set the flag indicating that low power has been entered. This 
       flag is checked in tx_low_power_exit to determine if the logic
       used to adjust the ThreadX time is required.  */
    tx_low_power_entered =  TX_TRUE;
 8009cbe:	4b07      	ldr	r3, [pc, #28]	; (8009cdc <tx_low_power_enter+0x5c>)
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	601a      	str	r2, [r3, #0]
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f383 8810 	msr	PRIMASK, r3
}
 8009cce:	bf00      	nop

    /* User code to enter low power mode. This allows the application to power down
       peripherals and put the processor in sleep mode.
    */
#ifdef TX_LOW_POWER_USER_ENTER
    TX_LOW_POWER_USER_ENTER;
 8009cd0:	f7f6 fe36 	bl	8000940 <App_ThreadX_LowPower_Enter>
#endif

    /* If the low power code returns, this routine returns to the tx_thread_schedule loop.  */
}
 8009cd4:	bf00      	nop
 8009cd6:	3718      	adds	r7, #24
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}
 8009cdc:	2000197c 	.word	0x2000197c

08009ce0 <tx_low_power_exit>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_exit(VOID)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b082      	sub	sp, #8
 8009ce4:	af00      	add	r7, sp, #0
/* How many ticks to adjust ThreadX timers after exiting low power mode. */
ULONG   tx_low_power_adjust_ticks;


    /* Determine if the interrupt occurred in low power mode.  */
    if (tx_low_power_entered)
 8009ce6:	4b0b      	ldr	r3, [pc, #44]	; (8009d14 <tx_low_power_exit+0x34>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d00d      	beq.n	8009d0a <tx_low_power_exit+0x2a>
    {
        /* Yes, low power mode was interrupted.   */

        /* Clear the low power entered flag.  */
        tx_low_power_entered =  TX_FALSE;
 8009cee:	4b09      	ldr	r3, [pc, #36]	; (8009d14 <tx_low_power_exit+0x34>)
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	601a      	str	r2, [r3, #0]

        /* User code to exit low power mode and reprogram the
           timer to the desired interrupt frequency.  */
#ifdef TX_LOW_POWER_USER_EXIT
        TX_LOW_POWER_USER_EXIT;
 8009cf4:	f7f6 fe31 	bl	800095a <App_ThreadX_LowPower_Exit>
#endif

#ifdef TX_LOW_POWER_USER_TIMER_ADJUST
        /* Call the user's low-power timer code to obtain the amount of time (in ticks)
           the system has been in low power mode. */
        tx_low_power_adjust_ticks = TX_LOW_POWER_USER_TIMER_ADJUST;
 8009cf8:	f7f6 fe3e 	bl	8000978 <App_ThreadX_LowPower_Timer_Adjust>
 8009cfc:	6078      	str	r0, [r7, #4]
#else
        tx_low_power_adjust_ticks = (ULONG) 0;
#endif

        /* Determine if the ThreadX timer(s) needs incrementing.  */
        if (tx_low_power_adjust_ticks)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d002      	beq.n	8009d0a <tx_low_power_exit+0x2a>
        {
            /* Yes, the ThreadX timer(s) must be incremented.  */
            tx_time_increment(tx_low_power_adjust_ticks);
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f000 f86f 	bl	8009de8 <tx_time_increment>
        }
    }
}
 8009d0a:	bf00      	nop
 8009d0c:	3708      	adds	r7, #8
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	2000197c 	.word	0x2000197c

08009d18 <tx_timer_get_next>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
ULONG  tx_timer_get_next(ULONG *next_timer_tick_ptr)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b08d      	sub	sp, #52	; 0x34
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]

TX_TIMER_INTERNAL           **timer_list_head;
TX_TIMER_INTERNAL           *next_timer;
UINT                        i;
ULONG                       calculated_time;
ULONG                       expiration_time = (ULONG) 0xFFFFFFFF;
 8009d20:	f04f 33ff 	mov.w	r3, #4294967295
 8009d24:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009d26:	f3ef 8310 	mrs	r3, PRIMASK
 8009d2a:	617b      	str	r3, [r7, #20]
    return(posture);
 8009d2c:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8009d2e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009d30:	b672      	cpsid	i
    return(int_posture);
 8009d32:	693b      	ldr	r3, [r7, #16]


    /* Disable interrupts.  */
    TX_DISABLE
 8009d34:	61bb      	str	r3, [r7, #24]

    /* Look at the next timer entry.  */
    timer_list_head =  _tx_timer_current_ptr;
 8009d36:	4b29      	ldr	r3, [pc, #164]	; (8009ddc <tx_timer_get_next+0xc4>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Loop through the timer list, looking for the first non-NULL
       value to signal an active timer.  */
    for (i = (UINT)0; i < TX_TIMER_ENTRIES; i++)
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8009d40:	e02f      	b.n	8009da2 <tx_timer_get_next+0x8a>
    {
        /* Now determine if there is an active timer in this slot.  */
        if (*timer_list_head)
 8009d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d01d      	beq.n	8009d86 <tx_timer_get_next+0x6e>
        {
            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 8009d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8009d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	2b20      	cmp	r3, #32
 8009d56:	d906      	bls.n	8009d66 <tx_timer_get_next+0x4e>
                {
                    /* Calculate the expiration time.  */
                    calculated_time =  next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i);
 8009d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5e:	4413      	add	r3, r2
 8009d60:	3b20      	subs	r3, #32
 8009d62:	623b      	str	r3, [r7, #32]
 8009d64:	e001      	b.n	8009d6a <tx_timer_get_next+0x52>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    calculated_time =  i;
 8009d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d68:	623b      	str	r3, [r7, #32]
                }

                /* Determine if a new minimum expiration time is present.  */
                if (expiration_time > calculated_time)
 8009d6a:	69fa      	ldr	r2, [r7, #28]
 8009d6c:	6a3b      	ldr	r3, [r7, #32]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d901      	bls.n	8009d76 <tx_timer_get_next+0x5e>
                {
                    /* Yes, a new minimum expiration time is present - remember it!  */
                    expiration_time =  calculated_time;
 8009d72:	6a3b      	ldr	r3, [r7, #32]
 8009d74:	61fb      	str	r3, [r7, #28]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 8009d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d78:	691b      	ldr	r3, [r3, #16]
 8009d7a:	62bb      	str	r3, [r7, #40]	; 0x28

            } while (next_timer != *timer_list_head);
 8009d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d1e4      	bne.n	8009d50 <tx_timer_get_next+0x38>
        }

        /* This timer entry is NULL, so just move to the next one.  */
        timer_list_head++;
 8009d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d88:	3304      	adds	r3, #4
 8009d8a:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check for timer list wrap condition.  */
        if (timer_list_head >= _tx_timer_list_end)
 8009d8c:	4b14      	ldr	r3, [pc, #80]	; (8009de0 <tx_timer_get_next+0xc8>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d302      	bcc.n	8009d9c <tx_timer_get_next+0x84>
        {
            /* Wrap to the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 8009d96:	4b13      	ldr	r3, [pc, #76]	; (8009de4 <tx_timer_get_next+0xcc>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (i = (UINT)0; i < TX_TIMER_ENTRIES; i++)
 8009d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9e:	3301      	adds	r3, #1
 8009da0:	627b      	str	r3, [r7, #36]	; 0x24
 8009da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da4:	2b1f      	cmp	r3, #31
 8009da6:	d9cc      	bls.n	8009d42 <tx_timer_get_next+0x2a>
 8009da8:	69bb      	ldr	r3, [r7, #24]
 8009daa:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f383 8810 	msr	PRIMASK, r3
}
 8009db2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if an active timer was found.  */
    if (expiration_time != (ULONG) 0xFFFFFFFF)
 8009db4:	69fb      	ldr	r3, [r7, #28]
 8009db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dba:	d004      	beq.n	8009dc6 <tx_timer_get_next+0xae>
    {
        /* Yes, an active timer was found.  */
        *next_timer_tick_ptr =  expiration_time;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	69fa      	ldr	r2, [r7, #28]
 8009dc0:	601a      	str	r2, [r3, #0]
        return(TX_TRUE);
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	e003      	b.n	8009dce <tx_timer_get_next+0xb6>
    }
    else
    {
        /* No active timer was found.  */
        *next_timer_tick_ptr = 0;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	601a      	str	r2, [r3, #0]
        return(TX_FALSE);
 8009dcc:	2300      	movs	r3, #0
    }
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3734      	adds	r7, #52	; 0x34
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr
 8009dda:	bf00      	nop
 8009ddc:	2000147c 	.word	0x2000147c
 8009de0:	20001478 	.word	0x20001478
 8009de4:	20001474 	.word	0x20001474

08009de8 <tx_time_increment>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_time_increment(ULONG time_increment)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b08a      	sub	sp, #40	; 0x28
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *temp_list_head;


    /* Determine if there is any time increment.  */
    if (time_increment == 0)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f000 809b 	beq.w	8009f2e <tx_time_increment+0x146>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009df8:	f3ef 8310 	mrs	r3, PRIMASK
 8009dfc:	613b      	str	r3, [r7, #16]
    return(posture);
 8009dfe:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8009e00:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009e02:	b672      	cpsid	i
    return(int_posture);
 8009e04:	68fb      	ldr	r3, [r7, #12]
        /* Nothing to do, just return.  */
        return;
    }

    /* Disable interrupts.  */
    TX_DISABLE
 8009e06:	617b      	str	r3, [r7, #20]

    /* Adjust the system clock.  */
    _tx_timer_system_clock =  _tx_timer_system_clock + time_increment;
 8009e08:	4b4b      	ldr	r3, [pc, #300]	; (8009f38 <tx_time_increment+0x150>)
 8009e0a:	681a      	ldr	r2, [r3, #0]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	4413      	add	r3, r2
 8009e10:	4a49      	ldr	r2, [pc, #292]	; (8009f38 <tx_time_increment+0x150>)
 8009e12:	6013      	str	r3, [r2, #0]

    /* Adjust the time slice variable.  */
    if (_tx_timer_time_slice)
 8009e14:	4b49      	ldr	r3, [pc, #292]	; (8009f3c <tx_time_increment+0x154>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d00e      	beq.n	8009e3a <tx_time_increment+0x52>
    {
        /* Decrement the time-slice variable.  */
        if (_tx_timer_time_slice > time_increment)
 8009e1c:	4b47      	ldr	r3, [pc, #284]	; (8009f3c <tx_time_increment+0x154>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d206      	bcs.n	8009e34 <tx_time_increment+0x4c>
        {
            _tx_timer_time_slice =  _tx_timer_time_slice - time_increment;
 8009e26:	4b45      	ldr	r3, [pc, #276]	; (8009f3c <tx_time_increment+0x154>)
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	1ad3      	subs	r3, r2, r3
 8009e2e:	4a43      	ldr	r2, [pc, #268]	; (8009f3c <tx_time_increment+0x154>)
 8009e30:	6013      	str	r3, [r2, #0]
 8009e32:	e002      	b.n	8009e3a <tx_time_increment+0x52>
        }
        else
        {
            _tx_timer_time_slice =  1;
 8009e34:	4b41      	ldr	r3, [pc, #260]	; (8009f3c <tx_time_increment+0x154>)
 8009e36:	2201      	movs	r2, #1
 8009e38:	601a      	str	r2, [r3, #0]
        }
    }

    /* Calculate the proper place to position the timer.  */
    timer_list_head =  _tx_timer_current_ptr;
 8009e3a:	4b41      	ldr	r3, [pc, #260]	; (8009f40 <tx_time_increment+0x158>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	623b      	str	r3, [r7, #32]

    /* Setup the temporary list pointer.  */
    temp_list_head =  TX_NULL;
 8009e40:	2300      	movs	r3, #0
 8009e42:	61bb      	str	r3, [r7, #24]

    /* Loop to pull all timers off the timer structure and put on the temporary list head.  */
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 8009e44:	2300      	movs	r3, #0
 8009e46:	627b      	str	r3, [r7, #36]	; 0x24
 8009e48:	e046      	b.n	8009ed8 <tx_time_increment+0xf0>
    {
        /* Determine if there is a timer list in this entry.  */
        if (*timer_list_head)
 8009e4a:	6a3b      	ldr	r3, [r7, #32]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d034      	beq.n	8009ebc <tx_time_increment+0xd4>
        {
            /* Walk the list and update all the relative times to actual times.  */

            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 8009e52:	6a3b      	ldr	r3, [r7, #32]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	61fb      	str	r3, [r7, #28]

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2b20      	cmp	r3, #32
 8009e5e:	d908      	bls.n	8009e72 <tx_time_increment+0x8a>
                {
                    /* Calculate the actual expiration time.  */
                    next_timer -> tx_timer_internal_remaining_ticks =
                                    next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i) + 1;
 8009e60:	69fb      	ldr	r3, [r7, #28]
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e66:	4413      	add	r3, r2
 8009e68:	f1a3 021f 	sub.w	r2, r3, #31
                    next_timer -> tx_timer_internal_remaining_ticks =
 8009e6c:	69fb      	ldr	r3, [r7, #28]
 8009e6e:	601a      	str	r2, [r3, #0]
 8009e70:	e003      	b.n	8009e7a <tx_time_increment+0x92>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    next_timer -> tx_timer_internal_remaining_ticks =  i + 1;
 8009e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e74:	1c5a      	adds	r2, r3, #1
 8009e76:	69fb      	ldr	r3, [r7, #28]
 8009e78:	601a      	str	r2, [r3, #0]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 8009e7a:	69fb      	ldr	r3, [r7, #28]
 8009e7c:	691b      	ldr	r3, [r3, #16]
 8009e7e:	61fb      	str	r3, [r7, #28]

            } while (next_timer != *timer_list_head);
 8009e80:	6a3b      	ldr	r3, [r7, #32]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	69fa      	ldr	r2, [r7, #28]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d1e6      	bne.n	8009e58 <tx_time_increment+0x70>

            /* NULL terminate the current timer list.  */
            ((*timer_list_head) -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  TX_NULL;
 8009e8a:	6a3b      	ldr	r3, [r7, #32]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	695b      	ldr	r3, [r3, #20]
 8009e90:	2200      	movs	r2, #0
 8009e92:	611a      	str	r2, [r3, #16]

            /* Yes, determine if the temporary list is NULL.  */
            if (temp_list_head == TX_NULL)
 8009e94:	69bb      	ldr	r3, [r7, #24]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d103      	bne.n	8009ea2 <tx_time_increment+0xba>
            {
                /* First item on the list.  Move the entire linked list.  */
                temp_list_head =  *timer_list_head;
 8009e9a:	6a3b      	ldr	r3, [r7, #32]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	61bb      	str	r3, [r7, #24]
 8009ea0:	e009      	b.n	8009eb6 <tx_time_increment+0xce>
            }
            else
            {
                /* No, the temp list already has timers on it. Link the next timer list to the end.  */
                (temp_list_head -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  *timer_list_head;
 8009ea2:	69bb      	ldr	r3, [r7, #24]
 8009ea4:	695b      	ldr	r3, [r3, #20]
 8009ea6:	6a3a      	ldr	r2, [r7, #32]
 8009ea8:	6812      	ldr	r2, [r2, #0]
 8009eaa:	611a      	str	r2, [r3, #16]

                /* Now update the previous to the new list's previous timer pointer.  */
                temp_list_head -> tx_timer_internal_active_previous =  (*timer_list_head) -> tx_timer_internal_active_previous;
 8009eac:	6a3b      	ldr	r3, [r7, #32]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	695a      	ldr	r2, [r3, #20]
 8009eb2:	69bb      	ldr	r3, [r7, #24]
 8009eb4:	615a      	str	r2, [r3, #20]
            }

            /* Now clear the current timer head pointer.  */
            *timer_list_head =  TX_NULL;
 8009eb6:	6a3b      	ldr	r3, [r7, #32]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	601a      	str	r2, [r3, #0]
        }
        
        /* Move to next timer entry.  */
        timer_list_head++;
 8009ebc:	6a3b      	ldr	r3, [r7, #32]
 8009ebe:	3304      	adds	r3, #4
 8009ec0:	623b      	str	r3, [r7, #32]

        /* Determine if a wrap around condition has occurred.  */
        if (timer_list_head >= _tx_timer_list_end)
 8009ec2:	4b20      	ldr	r3, [pc, #128]	; (8009f44 <tx_time_increment+0x15c>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	6a3a      	ldr	r2, [r7, #32]
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d302      	bcc.n	8009ed2 <tx_time_increment+0xea>
        {
            /* Wrap from the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 8009ecc:	4b1e      	ldr	r3, [pc, #120]	; (8009f48 <tx_time_increment+0x160>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	623b      	str	r3, [r7, #32]
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 8009ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	627b      	str	r3, [r7, #36]	; 0x24
 8009ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eda:	2b1f      	cmp	r3, #31
 8009edc:	d9b5      	bls.n	8009e4a <tx_time_increment+0x62>
        }
    }

    /* Set the current timer pointer to the beginning of the list.  */
    _tx_timer_current_ptr =  _tx_timer_list_start;
 8009ede:	4b1a      	ldr	r3, [pc, #104]	; (8009f48 <tx_time_increment+0x160>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4a17      	ldr	r2, [pc, #92]	; (8009f40 <tx_time_increment+0x158>)
 8009ee4:	6013      	str	r3, [r2, #0]

    /* Loop to update and reinsert all the timers in the list.  */
    while (temp_list_head)
 8009ee6:	e019      	b.n	8009f1c <tx_time_increment+0x134>
    {
        /* Pickup the next timer to update and reinsert.  */
        next_timer =  temp_list_head;
 8009ee8:	69bb      	ldr	r3, [r7, #24]
 8009eea:	61fb      	str	r3, [r7, #28]

        /* Move the temp list head pointer to the next pointer.  */
        temp_list_head =  next_timer -> tx_timer_internal_active_next;
 8009eec:	69fb      	ldr	r3, [r7, #28]
 8009eee:	691b      	ldr	r3, [r3, #16]
 8009ef0:	61bb      	str	r3, [r7, #24]

        /* Determine if the remaining time is greater than the time increment
           value - this is the normal case.  */
        if (next_timer -> tx_timer_internal_remaining_ticks > time_increment)
 8009ef2:	69fb      	ldr	r3, [r7, #28]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d206      	bcs.n	8009f0a <tx_time_increment+0x122>
        {
            /* Decrement the elapsed time.  */
            next_timer -> tx_timer_internal_remaining_ticks =  next_timer -> tx_timer_internal_remaining_ticks - time_increment;
 8009efc:	69fb      	ldr	r3, [r7, #28]
 8009efe:	681a      	ldr	r2, [r3, #0]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	1ad2      	subs	r2, r2, r3
 8009f04:	69fb      	ldr	r3, [r7, #28]
 8009f06:	601a      	str	r2, [r3, #0]
 8009f08:	e002      	b.n	8009f10 <tx_time_increment+0x128>
        }
        else
        {
            /* Simply set the expiration value to expire on the next tick.  */
            next_timer -> tx_timer_internal_remaining_ticks =  1;
 8009f0a:	69fb      	ldr	r3, [r7, #28]
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	601a      	str	r2, [r3, #0]
        }

        /* Now clear the timer list head pointer for the timer activate function to work properly.  */
        next_timer -> tx_timer_internal_list_head =  TX_NULL;
 8009f10:	69fb      	ldr	r3, [r7, #28]
 8009f12:	2200      	movs	r2, #0
 8009f14:	619a      	str	r2, [r3, #24]

        /* Now re-insert the timer into the list.  */
        _tx_timer_system_activate(next_timer);
 8009f16:	69f8      	ldr	r0, [r7, #28]
 8009f18:	f7ff f816 	bl	8008f48 <_tx_timer_system_activate>
    while (temp_list_head)
 8009f1c:	69bb      	ldr	r3, [r7, #24]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d1e2      	bne.n	8009ee8 <tx_time_increment+0x100>
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	f383 8810 	msr	PRIMASK, r3
}
 8009f2c:	e000      	b.n	8009f30 <tx_time_increment+0x148>
        return;
 8009f2e:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8009f30:	3728      	adds	r7, #40	; 0x28
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	200013ec 	.word	0x200013ec
 8009f3c:	2000194c 	.word	0x2000194c
 8009f40:	2000147c 	.word	0x2000147c
 8009f44:	20001478 	.word	0x20001478
 8009f48:	20001474 	.word	0x20001474

08009f4c <fm_calendar_get>:
 * usa.
 * @param None
 * @retval None
 */
void fm_calendar_get()
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	af00      	add	r7, sp, #0
     *     __HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
     *     HAL_RTC_WaitForSynchro(&hrtc);
     *     __HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
     */

    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8009f50:	2200      	movs	r2, #0
 8009f52:	4905      	ldr	r1, [pc, #20]	; (8009f68 <fm_calendar_get+0x1c>)
 8009f54:	4805      	ldr	r0, [pc, #20]	; (8009f6c <fm_calendar_get+0x20>)
 8009f56:	f7fa fd8d 	bl	8004a74 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	4904      	ldr	r1, [pc, #16]	; (8009f70 <fm_calendar_get+0x24>)
 8009f5e:	4803      	ldr	r0, [pc, #12]	; (8009f6c <fm_calendar_get+0x20>)
 8009f60:	f7fa fe6b 	bl	8004c3a <HAL_RTC_GetDate>
}
 8009f64:	bf00      	nop
 8009f66:	bd80      	pop	{r7, pc}
 8009f68:	20001980 	.word	0x20001980
 8009f6c:	20001164 	.word	0x20001164
 8009f70:	20001994 	.word	0x20001994

08009f74 <fm_calendar_get_hour>:
 * @brief Función que lee la hora desde el RTC y la devuelve como parámetro.
 * @param None
 * @retval Hora leida del calendario.
 */
int fm_calendar_get_hour()
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	af00      	add	r7, sp, #0
    fm_calendar_get();
 8009f78:	f7ff ffe8 	bl	8009f4c <fm_calendar_get>
    return (sTime.Hours);
 8009f7c:	4b01      	ldr	r3, [pc, #4]	; (8009f84 <fm_calendar_get_hour+0x10>)
 8009f7e:	781b      	ldrb	r3, [r3, #0]
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	bd80      	pop	{r7, pc}
 8009f84:	20001980 	.word	0x20001980

08009f88 <fm_calendar_get_minute>:
 * parámetro.
 * @param None
 * @retval Minutos leidos del calendario.
 */
int fm_calendar_get_minute()
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	af00      	add	r7, sp, #0
    fm_calendar_get();
 8009f8c:	f7ff ffde 	bl	8009f4c <fm_calendar_get>
    return (sTime.Minutes);
 8009f90:	4b01      	ldr	r3, [pc, #4]	; (8009f98 <fm_calendar_get_minute+0x10>)
 8009f92:	785b      	ldrb	r3, [r3, #1]
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	20001980 	.word	0x20001980

08009f9c <fm_calendar_get_second>:
 * parámetro.
 * @param None
 * @retval Segundos leidos del calendario.
 */
int fm_calendar_get_second()
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	af00      	add	r7, sp, #0
    fm_calendar_get();
 8009fa0:	f7ff ffd4 	bl	8009f4c <fm_calendar_get>
    return (sTime.Seconds);
 8009fa4:	4b01      	ldr	r3, [pc, #4]	; (8009fac <fm_calendar_get_second+0x10>)
 8009fa6:	789b      	ldrb	r3, [r3, #2]
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	20001980 	.word	0x20001980

08009fb0 <fm_calendar_get_day>:
 * @brief Función que lee el día desde el RTC y lo devuelve como parámetro.
 * @param None
 * @retval Día leido del calendario.
 */
int fm_calendar_get_day()
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	af00      	add	r7, sp, #0
    fm_calendar_get();
 8009fb4:	f7ff ffca 	bl	8009f4c <fm_calendar_get>
    return (sDate.Date);
 8009fb8:	4b01      	ldr	r3, [pc, #4]	; (8009fc0 <fm_calendar_get_day+0x10>)
 8009fba:	789b      	ldrb	r3, [r3, #2]
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	20001994 	.word	0x20001994

08009fc4 <fm_calendar_get_month>:
 * @brief Función que lee el mes desde el RTC y lo devuelve como parámetro.
 * @param None
 * @retval Mes leida del calendario.
 */
int fm_calendar_get_month()
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	af00      	add	r7, sp, #0
    fm_calendar_get();
 8009fc8:	f7ff ffc0 	bl	8009f4c <fm_calendar_get>
    return (sDate.Month);
 8009fcc:	4b01      	ldr	r3, [pc, #4]	; (8009fd4 <fm_calendar_get_month+0x10>)
 8009fce:	785b      	ldrb	r3, [r3, #1]
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	20001994 	.word	0x20001994

08009fd8 <fm_calendar_get_year>:
 * @brief Función que lee el año desde el RTC y lo devuelve como parámetro.
 * @param None
 * @retval Año leido del calendario.
 */
int fm_calendar_get_year()
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	af00      	add	r7, sp, #0
    fm_calendar_get();
 8009fdc:	f7ff ffb6 	bl	8009f4c <fm_calendar_get>
    return (sDate.Year);
 8009fe0:	4b01      	ldr	r3, [pc, #4]	; (8009fe8 <fm_calendar_get_year+0x10>)
 8009fe2:	78db      	ldrb	r3, [r3, #3]
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	bd80      	pop	{r7, pc}
 8009fe8:	20001994 	.word	0x20001994

08009fec <fm_calendar_format_time>:
 * fm_factory.
 * @param None
 * @retval None
 */
void fm_calendar_format_time()
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b088      	sub	sp, #32
 8009ff0:	af02      	add	r7, sp, #8
    int  time_int = 0;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	617b      	str	r3, [r7, #20]
    char time_arr[PCF8553_DATA_SIZE];

    fm_calendar_get();
 8009ff6:	f7ff ffa9 	bl	8009f4c <fm_calendar_get>
    sprintf(time_arr, "%02d%02d%02d", sTime.Hours, sTime.Minutes,
 8009ffa:	4b0d      	ldr	r3, [pc, #52]	; (800a030 <fm_calendar_format_time+0x44>)
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	461a      	mov	r2, r3
 800a000:	4b0b      	ldr	r3, [pc, #44]	; (800a030 <fm_calendar_format_time+0x44>)
 800a002:	785b      	ldrb	r3, [r3, #1]
 800a004:	4619      	mov	r1, r3
    sTime.Seconds);
 800a006:	4b0a      	ldr	r3, [pc, #40]	; (800a030 <fm_calendar_format_time+0x44>)
 800a008:	789b      	ldrb	r3, [r3, #2]
    sprintf(time_arr, "%02d%02d%02d", sTime.Hours, sTime.Minutes,
 800a00a:	4638      	mov	r0, r7
 800a00c:	9300      	str	r3, [sp, #0]
 800a00e:	460b      	mov	r3, r1
 800a010:	4908      	ldr	r1, [pc, #32]	; (800a034 <fm_calendar_format_time+0x48>)
 800a012:	f005 fd3d 	bl	800fa90 <siprintf>
     * Esta instrucción está de mas ya que después se vuelve a formatear el
     * entero en un arreglo, pero por ahora se va a quedar así hasta que se
     * elimine el formatter de la libreria fm_lcd.h
     */

    time_int = atoi(time_arr);
 800a016:	463b      	mov	r3, r7
 800a018:	4618      	mov	r0, r3
 800a01a:	f005 fccf 	bl	800f9bc <atoi>
 800a01e:	6178      	str	r0, [r7, #20]
    fm_factory_modify_fp_time(time_int);
 800a020:	6978      	ldr	r0, [r7, #20]
 800a022:	f000 f9dd 	bl	800a3e0 <fm_factory_modify_fp_time>
}
 800a026:	bf00      	nop
 800a028:	3718      	adds	r7, #24
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
 800a02e:	bf00      	nop
 800a030:	20001980 	.word	0x20001980
 800a034:	08010500 	.word	0x08010500

0800a038 <fm_calendar_format_date>:
 * en fm_factory.
 * @param None
 * @retval None
 */
void fm_calendar_format_date()
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b088      	sub	sp, #32
 800a03c:	af02      	add	r7, sp, #8
    int  date_int = 0;
 800a03e:	2300      	movs	r3, #0
 800a040:	617b      	str	r3, [r7, #20]
    char date_arr[PCF8553_DATA_SIZE];

    fm_calendar_get();
 800a042:	f7ff ff83 	bl	8009f4c <fm_calendar_get>
    sprintf(date_arr, "%02d%02d20%02d", sDate.Date, sDate.Month, sDate.Year);
 800a046:	4b0d      	ldr	r3, [pc, #52]	; (800a07c <fm_calendar_format_date+0x44>)
 800a048:	789b      	ldrb	r3, [r3, #2]
 800a04a:	461a      	mov	r2, r3
 800a04c:	4b0b      	ldr	r3, [pc, #44]	; (800a07c <fm_calendar_format_date+0x44>)
 800a04e:	785b      	ldrb	r3, [r3, #1]
 800a050:	4619      	mov	r1, r3
 800a052:	4b0a      	ldr	r3, [pc, #40]	; (800a07c <fm_calendar_format_date+0x44>)
 800a054:	78db      	ldrb	r3, [r3, #3]
 800a056:	4638      	mov	r0, r7
 800a058:	9300      	str	r3, [sp, #0]
 800a05a:	460b      	mov	r3, r1
 800a05c:	4908      	ldr	r1, [pc, #32]	; (800a080 <fm_calendar_format_date+0x48>)
 800a05e:	f005 fd17 	bl	800fa90 <siprintf>
    /*
     * Esta instrucción está de mas ya que después se vuelve a formatear el
     * entero en un arreglo, pero por ahora se va a quedar así hasta que se
     * elimine el formatter de la libreria fm_lcd.h
     */
    date_int = atoi(date_arr);
 800a062:	463b      	mov	r3, r7
 800a064:	4618      	mov	r0, r3
 800a066:	f005 fca9 	bl	800f9bc <atoi>
 800a06a:	6178      	str	r0, [r7, #20]
    fm_factory_modify_fp_date(date_int);
 800a06c:	6978      	ldr	r0, [r7, #20]
 800a06e:	f000 f9a7 	bl	800a3c0 <fm_factory_modify_fp_date>
}
 800a072:	bf00      	nop
 800a074:	3718      	adds	r7, #24
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	20001994 	.word	0x20001994
 800a080:	08010510 	.word	0x08010510

0800a084 <fm_debug_msg_uart>:
 * @param Mensaje a transmitir y su longitud.
 * @retval None
 *
 */
void fm_debug_msg_uart(const uint8_t *p_msg, uint8_t len)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b084      	sub	sp, #16
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	460b      	mov	r3, r1
 800a08e:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef ret = HAL_BUSY;
 800a090:	2302      	movs	r3, #2
 800a092:	73fb      	strb	r3, [r7, #15]
     * ejecutada en otro hilo. La siguiente implementación no es buena porque
     * bloquea puede bloquear al sistema, una mejor solucion seria bloquear
     * por un corto tiempo, aun mejor seria implementar algo con RTOS.
     *
     */
    while (ret == HAL_BUSY)
 800a094:	e008      	b.n	800a0a8 <fm_debug_msg_uart+0x24>
    {
        ret = HAL_UART_Transmit(&huart2, p_msg, len, DELAY_DEFAULT);
 800a096:	78fb      	ldrb	r3, [r7, #3]
 800a098:	b29a      	uxth	r2, r3
 800a09a:	230a      	movs	r3, #10
 800a09c:	6879      	ldr	r1, [r7, #4]
 800a09e:	4806      	ldr	r0, [pc, #24]	; (800a0b8 <fm_debug_msg_uart+0x34>)
 800a0a0:	f7fb fe4e 	bl	8005d40 <HAL_UART_Transmit>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	73fb      	strb	r3, [r7, #15]
    while (ret == HAL_BUSY)
 800a0a8:	7bfb      	ldrb	r3, [r7, #15]
 800a0aa:	2b02      	cmp	r3, #2
 800a0ac:	d0f3      	beq.n	800a096 <fm_debug_msg_uart+0x12>
    }

}
 800a0ae:	bf00      	nop
 800a0b0:	bf00      	nop
 800a0b2:	3710      	adds	r7, #16
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	20001238 	.word	0x20001238

0800a0bc <fm_factory_get_acm>:
 * @brief Función que devuelve el parámetro ACM almacenado en fm_factory.
 * @param None
 * @retval Parámetro ACM como estructura de tipo fmc_totalizer_t.
 */
fmc_totalizer_t fm_factory_get_acm()
{
 800a0bc:	b4b0      	push	{r4, r5, r7}
 800a0be:	b083      	sub	sp, #12
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
    return (acm_config);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	4a07      	ldr	r2, [pc, #28]	; (800a0e4 <fm_factory_get_acm+0x28>)
 800a0c8:	461c      	mov	r4, r3
 800a0ca:	4615      	mov	r5, r2
 800a0cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a0ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a0d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a0d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	370c      	adds	r7, #12
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bcb0      	pop	{r4, r5, r7}
 800a0e0:	4770      	bx	lr
 800a0e2:	bf00      	nop
 800a0e4:	20000030 	.word	0x20000030

0800a0e8 <fm_factory_get_ttl>:
 * @brief Función que devuelve el parámetro TTL almacenado en fm_factory.
 * @param None
 * @retval Parámetro TTL como estructura de tipo fmc_totalizer_t.
 */
fmc_totalizer_t fm_factory_get_ttl()
{
 800a0e8:	b4b0      	push	{r4, r5, r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
    return (ttl_config);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	4a07      	ldr	r2, [pc, #28]	; (800a110 <fm_factory_get_ttl+0x28>)
 800a0f4:	461c      	mov	r4, r3
 800a0f6:	4615      	mov	r5, r2
 800a0f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a0fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a0fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a100:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	370c      	adds	r7, #12
 800a108:	46bd      	mov	sp, r7
 800a10a:	bcb0      	pop	{r4, r5, r7}
 800a10c:	4770      	bx	lr
 800a10e:	bf00      	nop
 800a110:	20000010 	.word	0x20000010

0800a114 <fm_factory_get_rate>:
 * @brief Función que devuelve el parámetro RATE almacenado en fm_factory.
 * @param None
 * @retval Parámetro RATE como estructura de tipo fmc_totalizer_t.
 */
fmc_totalizer_t fm_factory_get_rate()
{
 800a114:	b4b0      	push	{r4, r5, r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
    return (rate_config);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	4a07      	ldr	r2, [pc, #28]	; (800a13c <fm_factory_get_rate+0x28>)
 800a120:	461c      	mov	r4, r3
 800a122:	4615      	mov	r5, r2
 800a124:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a126:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a128:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a12c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	370c      	adds	r7, #12
 800a134:	46bd      	mov	sp, r7
 800a136:	bcb0      	pop	{r4, r5, r7}
 800a138:	4770      	bx	lr
 800a13a:	bf00      	nop
 800a13c:	20000050 	.word	0x20000050

0800a140 <fm_factory_get_temp>:
 * fm_factory.
 * @param None
 * @retval Temperatura interna del micro como estructura de tipo fmc_temp_t.
 */
fmc_temp_t fm_factory_get_temp()
{
 800a140:	b480      	push	{r7}
 800a142:	b083      	sub	sp, #12
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
    return (temperature_config);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	4a05      	ldr	r2, [pc, #20]	; (800a160 <fm_factory_get_temp+0x20>)
 800a14c:	ca07      	ldmia	r2, {r0, r1, r2}
 800a14e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	370c      	adds	r7, #12
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr
 800a15e:	bf00      	nop
 800a160:	20000070 	.word	0x20000070

0800a164 <fm_factory_get_units_tim>:
 * fm_factory.
 * @param None
 * @retval Configuración de resoluciones como estructura de tipo fmc_fp_t.
 */
fmc_fp_t fm_factory_get_units_tim()
{
 800a164:	b480      	push	{r7}
 800a166:	b083      	sub	sp, #12
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
    return (units_digits_tim);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	4a05      	ldr	r2, [pc, #20]	; (800a184 <fm_factory_get_units_tim+0x20>)
 800a170:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a174:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	370c      	adds	r7, #12
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr
 800a184:	20000094 	.word	0x20000094

0800a188 <fm_factory_get_units_vol>:
 * fm_factory.
 * @param None
 * @retval Configuración de resoluciones como estructura de tipo fmc_fp_t.
 */
fmc_fp_t fm_factory_get_units_vol()
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
    return (units_digits_vol);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	4a05      	ldr	r2, [pc, #20]	; (800a1a8 <fm_factory_get_units_vol+0x20>)
 800a194:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a198:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	370c      	adds	r7, #12
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr
 800a1a8:	2000009c 	.word	0x2000009c

0800a1ac <fm_factory_get_k_factor>:
 * @brief Función que devuelve el factor K almacenado en fm_factory.
 * @param None
 * @retval Factor K.
 */
fmc_fp_t fm_factory_get_k_factor(sel_k k_sel)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	70fb      	strb	r3, [r7, #3]
    static fmc_fp_t k_selected;
    if(k_sel == K_FACTOR)
 800a1b8:	78fb      	ldrb	r3, [r7, #3]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d106      	bne.n	800a1cc <fm_factory_get_k_factor+0x20>
    {
        k_selected = k_factor_config;
 800a1be:	4b22      	ldr	r3, [pc, #136]	; (800a248 <fm_factory_get_k_factor+0x9c>)
 800a1c0:	4a22      	ldr	r2, [pc, #136]	; (800a24c <fm_factory_get_k_factor+0xa0>)
 800a1c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a1c6:	e883 0003 	stmia.w	r3, {r0, r1}
 800a1ca:	e030      	b.n	800a22e <fm_factory_get_k_factor+0x82>
    }
    else if(k_sel == K_LIN_1)
 800a1cc:	78fb      	ldrb	r3, [r7, #3]
 800a1ce:	2b01      	cmp	r3, #1
 800a1d0:	d106      	bne.n	800a1e0 <fm_factory_get_k_factor+0x34>
    {
        k_selected = k_lin_1_config;
 800a1d2:	4b1d      	ldr	r3, [pc, #116]	; (800a248 <fm_factory_get_k_factor+0x9c>)
 800a1d4:	4a1e      	ldr	r2, [pc, #120]	; (800a250 <fm_factory_get_k_factor+0xa4>)
 800a1d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a1da:	e883 0003 	stmia.w	r3, {r0, r1}
 800a1de:	e026      	b.n	800a22e <fm_factory_get_k_factor+0x82>
    }
    else if(k_sel == K_LIN_2)
 800a1e0:	78fb      	ldrb	r3, [r7, #3]
 800a1e2:	2b02      	cmp	r3, #2
 800a1e4:	d106      	bne.n	800a1f4 <fm_factory_get_k_factor+0x48>
    {
        k_selected = k_lin_2_config;
 800a1e6:	4b18      	ldr	r3, [pc, #96]	; (800a248 <fm_factory_get_k_factor+0x9c>)
 800a1e8:	4a1a      	ldr	r2, [pc, #104]	; (800a254 <fm_factory_get_k_factor+0xa8>)
 800a1ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a1ee:	e883 0003 	stmia.w	r3, {r0, r1}
 800a1f2:	e01c      	b.n	800a22e <fm_factory_get_k_factor+0x82>
    }
    else if(k_sel == K_LIN_3)
 800a1f4:	78fb      	ldrb	r3, [r7, #3]
 800a1f6:	2b03      	cmp	r3, #3
 800a1f8:	d106      	bne.n	800a208 <fm_factory_get_k_factor+0x5c>
    {
        k_selected = k_lin_3_config;
 800a1fa:	4b13      	ldr	r3, [pc, #76]	; (800a248 <fm_factory_get_k_factor+0x9c>)
 800a1fc:	4a16      	ldr	r2, [pc, #88]	; (800a258 <fm_factory_get_k_factor+0xac>)
 800a1fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a202:	e883 0003 	stmia.w	r3, {r0, r1}
 800a206:	e012      	b.n	800a22e <fm_factory_get_k_factor+0x82>
    }
    else if(k_sel == K_LIN_4)
 800a208:	78fb      	ldrb	r3, [r7, #3]
 800a20a:	2b04      	cmp	r3, #4
 800a20c:	d106      	bne.n	800a21c <fm_factory_get_k_factor+0x70>
    {
        k_selected = k_lin_4_config;
 800a20e:	4b0e      	ldr	r3, [pc, #56]	; (800a248 <fm_factory_get_k_factor+0x9c>)
 800a210:	4a12      	ldr	r2, [pc, #72]	; (800a25c <fm_factory_get_k_factor+0xb0>)
 800a212:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a216:	e883 0003 	stmia.w	r3, {r0, r1}
 800a21a:	e008      	b.n	800a22e <fm_factory_get_k_factor+0x82>
    }
    else if(k_sel == K_LIN_5)
 800a21c:	78fb      	ldrb	r3, [r7, #3]
 800a21e:	2b05      	cmp	r3, #5
 800a220:	d105      	bne.n	800a22e <fm_factory_get_k_factor+0x82>
    {
        k_selected = k_lin_5_config;
 800a222:	4b09      	ldr	r3, [pc, #36]	; (800a248 <fm_factory_get_k_factor+0x9c>)
 800a224:	4a0e      	ldr	r2, [pc, #56]	; (800a260 <fm_factory_get_k_factor+0xb4>)
 800a226:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a22a:	e883 0003 	stmia.w	r3, {r0, r1}
    }

    return (k_selected);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	4a05      	ldr	r2, [pc, #20]	; (800a248 <fm_factory_get_k_factor+0x9c>)
 800a232:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a236:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	370c      	adds	r7, #12
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr
 800a246:	bf00      	nop
 800a248:	200019b0 	.word	0x200019b0
 800a24c:	200000f4 	.word	0x200000f4
 800a250:	200000cc 	.word	0x200000cc
 800a254:	200000d4 	.word	0x200000d4
 800a258:	200000dc 	.word	0x200000dc
 800a25c:	200000e4 	.word	0x200000e4
 800a260:	200000ec 	.word	0x200000ec

0800a264 <fm_factory_get_frec_lin>:

fmc_fp_t fm_factory_get_frec_lin(sel_k k_sel)
{
 800a264:	b480      	push	{r7}
 800a266:	b083      	sub	sp, #12
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	460b      	mov	r3, r1
 800a26e:	70fb      	strb	r3, [r7, #3]
    static fmc_fp_t frec_lin_selected;

    if(k_sel == K_LIN_1)
 800a270:	78fb      	ldrb	r3, [r7, #3]
 800a272:	2b01      	cmp	r3, #1
 800a274:	d106      	bne.n	800a284 <fm_factory_get_frec_lin+0x20>
    {
        frec_lin_selected = frec_lin_1;
 800a276:	4b1d      	ldr	r3, [pc, #116]	; (800a2ec <fm_factory_get_frec_lin+0x88>)
 800a278:	4a1d      	ldr	r2, [pc, #116]	; (800a2f0 <fm_factory_get_frec_lin+0x8c>)
 800a27a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a27e:	e883 0003 	stmia.w	r3, {r0, r1}
 800a282:	e026      	b.n	800a2d2 <fm_factory_get_frec_lin+0x6e>
    }
    else if(k_sel == K_LIN_2)
 800a284:	78fb      	ldrb	r3, [r7, #3]
 800a286:	2b02      	cmp	r3, #2
 800a288:	d106      	bne.n	800a298 <fm_factory_get_frec_lin+0x34>
    {
        frec_lin_selected = frec_lin_2;
 800a28a:	4b18      	ldr	r3, [pc, #96]	; (800a2ec <fm_factory_get_frec_lin+0x88>)
 800a28c:	4a19      	ldr	r2, [pc, #100]	; (800a2f4 <fm_factory_get_frec_lin+0x90>)
 800a28e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a292:	e883 0003 	stmia.w	r3, {r0, r1}
 800a296:	e01c      	b.n	800a2d2 <fm_factory_get_frec_lin+0x6e>
    }
    else if(k_sel == K_LIN_3)
 800a298:	78fb      	ldrb	r3, [r7, #3]
 800a29a:	2b03      	cmp	r3, #3
 800a29c:	d106      	bne.n	800a2ac <fm_factory_get_frec_lin+0x48>
    {
        frec_lin_selected = frec_lin_3;
 800a29e:	4b13      	ldr	r3, [pc, #76]	; (800a2ec <fm_factory_get_frec_lin+0x88>)
 800a2a0:	4a15      	ldr	r2, [pc, #84]	; (800a2f8 <fm_factory_get_frec_lin+0x94>)
 800a2a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a2a6:	e883 0003 	stmia.w	r3, {r0, r1}
 800a2aa:	e012      	b.n	800a2d2 <fm_factory_get_frec_lin+0x6e>
    }
    else if(k_sel == K_LIN_4)
 800a2ac:	78fb      	ldrb	r3, [r7, #3]
 800a2ae:	2b04      	cmp	r3, #4
 800a2b0:	d106      	bne.n	800a2c0 <fm_factory_get_frec_lin+0x5c>
    {
        frec_lin_selected = frec_lin_4;
 800a2b2:	4b0e      	ldr	r3, [pc, #56]	; (800a2ec <fm_factory_get_frec_lin+0x88>)
 800a2b4:	4a11      	ldr	r2, [pc, #68]	; (800a2fc <fm_factory_get_frec_lin+0x98>)
 800a2b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a2ba:	e883 0003 	stmia.w	r3, {r0, r1}
 800a2be:	e008      	b.n	800a2d2 <fm_factory_get_frec_lin+0x6e>
    }
    else if(k_sel == K_LIN_5)
 800a2c0:	78fb      	ldrb	r3, [r7, #3]
 800a2c2:	2b05      	cmp	r3, #5
 800a2c4:	d105      	bne.n	800a2d2 <fm_factory_get_frec_lin+0x6e>
    {
        frec_lin_selected = frec_lin_5;
 800a2c6:	4b09      	ldr	r3, [pc, #36]	; (800a2ec <fm_factory_get_frec_lin+0x88>)
 800a2c8:	4a0d      	ldr	r2, [pc, #52]	; (800a300 <fm_factory_get_frec_lin+0x9c>)
 800a2ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a2ce:	e883 0003 	stmia.w	r3, {r0, r1}
    }

    return (frec_lin_selected);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	4a05      	ldr	r2, [pc, #20]	; (800a2ec <fm_factory_get_frec_lin+0x88>)
 800a2d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a2da:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	370c      	adds	r7, #12
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr
 800a2ea:	bf00      	nop
 800a2ec:	200019b8 	.word	0x200019b8
 800a2f0:	200000a4 	.word	0x200000a4
 800a2f4:	200000ac 	.word	0x200000ac
 800a2f8:	200000b4 	.word	0x200000b4
 800a2fc:	200000bc 	.word	0x200000bc
 800a300:	200000c4 	.word	0x200000c4

0800a304 <fm_factory_get_date_time>:
 * @param None
 * @retval Hora, minutos, segundos, día, mes y año almacenados en
 * date_time_config.
 */
fmc_date_time_t fm_factory_get_date_time()
{
 800a304:	b4b0      	push	{r4, r5, r7}
 800a306:	b083      	sub	sp, #12
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
    return(date_time_config);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	4a07      	ldr	r2, [pc, #28]	; (800a32c <fm_factory_get_date_time+0x28>)
 800a310:	461c      	mov	r4, r3
 800a312:	4615      	mov	r5, r2
 800a314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a318:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a31c:	e884 0003 	stmia.w	r4, {r0, r1}
}
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	370c      	adds	r7, #12
 800a324:	46bd      	mov	sp, r7
 800a326:	bcb0      	pop	{r4, r5, r7}
 800a328:	4770      	bx	lr
 800a32a:	bf00      	nop
 800a32c:	2000007c 	.word	0x2000007c

0800a330 <fm_factory_get_fp_date>:
 * parámetro de tipo punto fijo con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la fecha.
 */
fmc_fp_t fm_factory_get_fp_date()
{
 800a330:	b480      	push	{r7}
 800a332:	b083      	sub	sp, #12
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
    return(date_user);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	4a05      	ldr	r2, [pc, #20]	; (800a350 <fm_factory_get_fp_date+0x20>)
 800a33c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a340:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	370c      	adds	r7, #12
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr
 800a350:	20000104 	.word	0x20000104

0800a354 <fm_factory_get_fp_time>:
 * parámetro de tipo punto fijo con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la hora.
 */
fmc_fp_t fm_factory_get_fp_time()
{
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
    return(time_user);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	4a05      	ldr	r2, [pc, #20]	; (800a374 <fm_factory_get_fp_time+0x20>)
 800a360:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a364:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	370c      	adds	r7, #12
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr
 800a374:	200000fc 	.word	0x200000fc

0800a378 <fm_factory_get_fp_date_conf>:
 * con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la fecha congelada.
 */
fmc_fp_t fm_factory_get_fp_date_conf()
{
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
    return(date_config);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	4a05      	ldr	r2, [pc, #20]	; (800a398 <fm_factory_get_fp_date_conf+0x20>)
 800a384:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a388:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	370c      	adds	r7, #12
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr
 800a398:	20000114 	.word	0x20000114

0800a39c <fm_factory_get_fp_time_conf>:
 * con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la hora congelada.
 */
fmc_fp_t fm_factory_get_fp_time_conf()
{
 800a39c:	b480      	push	{r7}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
    return(time_config);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	4a05      	ldr	r2, [pc, #20]	; (800a3bc <fm_factory_get_fp_time_conf+0x20>)
 800a3a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a3ac:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr
 800a3bc:	2000010c 	.word	0x2000010c

0800a3c0 <fm_factory_modify_fp_date>:
 * fijo.
 * @param Fecha a almacenar como un número concatenado.
 * @retval None
 */
void fm_factory_modify_fp_date(int date)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b083      	sub	sp, #12
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
    date_user.num = date;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	4a04      	ldr	r2, [pc, #16]	; (800a3dc <fm_factory_modify_fp_date+0x1c>)
 800a3cc:	6013      	str	r3, [r2, #0]
}
 800a3ce:	bf00      	nop
 800a3d0:	370c      	adds	r7, #12
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr
 800a3da:	bf00      	nop
 800a3dc:	20000104 	.word	0x20000104

0800a3e0 <fm_factory_modify_fp_time>:
 * fijo.
 * @param Hora a almacenar como un número concatenado.
 * @retval None
 */
void fm_factory_modify_fp_time(int time)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b083      	sub	sp, #12
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
    time_user.num = time;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	4a04      	ldr	r2, [pc, #16]	; (800a3fc <fm_factory_modify_fp_time+0x1c>)
 800a3ec:	6013      	str	r3, [r2, #0]
}
 800a3ee:	bf00      	nop
 800a3f0:	370c      	adds	r7, #12
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr
 800a3fa:	bf00      	nop
 800a3fc:	200000fc 	.word	0x200000fc

0800a400 <fm_factory_modify_date>:
 * fijo.
 * @param día, mes y año leídos del calendario.
 * @retval None
 */
void fm_factory_modify_date(int mod_day, int mod_month, int mod_year)
{
 800a400:	b480      	push	{r7}
 800a402:	b085      	sub	sp, #20
 800a404:	af00      	add	r7, sp, #0
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	60b9      	str	r1, [r7, #8]
 800a40a:	607a      	str	r2, [r7, #4]
    date_time_config.day = mod_day;
 800a40c:	4a0f      	ldr	r2, [pc, #60]	; (800a44c <fm_factory_modify_date+0x4c>)
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	6013      	str	r3, [r2, #0]
    date_time_config.month = mod_month;
 800a412:	4a0e      	ldr	r2, [pc, #56]	; (800a44c <fm_factory_modify_date+0x4c>)
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	6053      	str	r3, [r2, #4]
    date_time_config.year = mod_year;
 800a418:	4a0c      	ldr	r2, [pc, #48]	; (800a44c <fm_factory_modify_date+0x4c>)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6093      	str	r3, [r2, #8]

    date_config.num = mod_day * 1000000 + mod_month * 10000 + 2000 + mod_year;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	4a0b      	ldr	r2, [pc, #44]	; (800a450 <fm_factory_modify_date+0x50>)
 800a422:	fb03 f202 	mul.w	r2, r3, r2
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	f242 7110 	movw	r1, #10000	; 0x2710
 800a42c:	fb01 f303 	mul.w	r3, r1, r3
 800a430:	4413      	add	r3, r2
 800a432:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	4413      	add	r3, r2
 800a43a:	461a      	mov	r2, r3
 800a43c:	4b05      	ldr	r3, [pc, #20]	; (800a454 <fm_factory_modify_date+0x54>)
 800a43e:	601a      	str	r2, [r3, #0]
}
 800a440:	bf00      	nop
 800a442:	3714      	adds	r7, #20
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr
 800a44c:	2000007c 	.word	0x2000007c
 800a450:	000f4240 	.word	0x000f4240
 800a454:	20000114 	.word	0x20000114

0800a458 <fm_factory_modify_time>:
 * fijo.
 * @param Hora, minutos y segundos leídos del calendario.
 * @retval None
 */
void fm_factory_modify_time(int mod_hour, int mod_minute, int mod_second)
{
 800a458:	b480      	push	{r7}
 800a45a:	b085      	sub	sp, #20
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	60f8      	str	r0, [r7, #12]
 800a460:	60b9      	str	r1, [r7, #8]
 800a462:	607a      	str	r2, [r7, #4]
    date_time_config.hour = mod_hour;
 800a464:	4a0e      	ldr	r2, [pc, #56]	; (800a4a0 <fm_factory_modify_time+0x48>)
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	60d3      	str	r3, [r2, #12]
    date_time_config.minute = mod_minute;
 800a46a:	4a0d      	ldr	r2, [pc, #52]	; (800a4a0 <fm_factory_modify_time+0x48>)
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	6113      	str	r3, [r2, #16]
    date_time_config.second = mod_second;
 800a470:	4a0b      	ldr	r2, [pc, #44]	; (800a4a0 <fm_factory_modify_time+0x48>)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6153      	str	r3, [r2, #20]

    time_config.num = mod_hour * 10000 + mod_minute * 100 + mod_second;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	f242 7210 	movw	r2, #10000	; 0x2710
 800a47c:	fb03 f202 	mul.w	r2, r3, r2
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	2164      	movs	r1, #100	; 0x64
 800a484:	fb01 f303 	mul.w	r3, r1, r3
 800a488:	441a      	add	r2, r3
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	4413      	add	r3, r2
 800a48e:	461a      	mov	r2, r3
 800a490:	4b04      	ldr	r3, [pc, #16]	; (800a4a4 <fm_factory_modify_time+0x4c>)
 800a492:	601a      	str	r2, [r3, #0]
}
 800a494:	bf00      	nop
 800a496:	3714      	adds	r7, #20
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr
 800a4a0:	2000007c 	.word	0x2000007c
 800a4a4:	2000010c 	.word	0x2000010c

0800a4a8 <fm_factory_modify_k_factor_add>:
 * @brief Función que suma uno al dígito pasado como parámetro del factor K.
 * @param Digito a modificar del factor K de la enumeración sel_digit_t.
 * @retval None
 */
void fm_factory_modify_k_factor_add(sel_digit_t digit_k)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	71fb      	strb	r3, [r7, #7]
    uint32_t k_new_num = 0;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	60fb      	str	r3, [r7, #12]
    fm_factory_separate_k_factor();
 800a4b6:	f000 fab9 	bl	800aa2c <fm_factory_separate_k_factor>
    if (k_array[LINE_1_DIGITS - 1 - digit_k] < VAL_9)
 800a4ba:	79fb      	ldrb	r3, [r7, #7]
 800a4bc:	f1c3 0307 	rsb	r3, r3, #7
 800a4c0:	4a17      	ldr	r2, [pc, #92]	; (800a520 <fm_factory_modify_k_factor_add+0x78>)
 800a4c2:	5cd3      	ldrb	r3, [r2, r3]
 800a4c4:	2b08      	cmp	r3, #8
 800a4c6:	d809      	bhi.n	800a4dc <fm_factory_modify_k_factor_add+0x34>
    {
        k_array[LINE_1_DIGITS - 1 - digit_k]++;
 800a4c8:	79fb      	ldrb	r3, [r7, #7]
 800a4ca:	f1c3 0307 	rsb	r3, r3, #7
 800a4ce:	4a14      	ldr	r2, [pc, #80]	; (800a520 <fm_factory_modify_k_factor_add+0x78>)
 800a4d0:	5cd2      	ldrb	r2, [r2, r3]
 800a4d2:	3201      	adds	r2, #1
 800a4d4:	b2d1      	uxtb	r1, r2
 800a4d6:	4a12      	ldr	r2, [pc, #72]	; (800a520 <fm_factory_modify_k_factor_add+0x78>)
 800a4d8:	54d1      	strb	r1, [r2, r3]
 800a4da:	e005      	b.n	800a4e8 <fm_factory_modify_k_factor_add+0x40>
    }
    else
    {
        k_array[LINE_1_DIGITS - 1 - digit_k] = VAL_0;
 800a4dc:	79fb      	ldrb	r3, [r7, #7]
 800a4de:	f1c3 0307 	rsb	r3, r3, #7
 800a4e2:	4a0f      	ldr	r2, [pc, #60]	; (800a520 <fm_factory_modify_k_factor_add+0x78>)
 800a4e4:	2100      	movs	r1, #0
 800a4e6:	54d1      	strb	r1, [r2, r3]
    }

    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	60bb      	str	r3, [r7, #8]
 800a4ec:	e00e      	b.n	800a50c <fm_factory_modify_k_factor_add+0x64>
    {
        k_new_num = (k_new_num * 10) + k_array[i];
 800a4ee:	68fa      	ldr	r2, [r7, #12]
 800a4f0:	4613      	mov	r3, r2
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	4413      	add	r3, r2
 800a4f6:	005b      	lsls	r3, r3, #1
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	4a09      	ldr	r2, [pc, #36]	; (800a520 <fm_factory_modify_k_factor_add+0x78>)
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	4413      	add	r3, r2
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	440b      	add	r3, r1
 800a504:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	3301      	adds	r3, #1
 800a50a:	60bb      	str	r3, [r7, #8]
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	2b07      	cmp	r3, #7
 800a510:	dded      	ble.n	800a4ee <fm_factory_modify_k_factor_add+0x46>
    }

    k_factor_config.num = k_new_num;
 800a512:	4a04      	ldr	r2, [pc, #16]	; (800a524 <fm_factory_modify_k_factor_add+0x7c>)
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	6013      	str	r3, [r2, #0]
}
 800a518:	bf00      	nop
 800a51a:	3710      	adds	r7, #16
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}
 800a520:	20001998 	.word	0x20001998
 800a524:	200000f4 	.word	0x200000f4

0800a528 <fm_factory_modify_k_factor_subs>:
 * @brief Función que resta uno al dígito pasado como parámetro del factor K.
 * @param Digito a modificar del factor K de la enumeración sel_digit_t.
 * @retval None
 */
void fm_factory_modify_k_factor_subs(sel_digit_t digit_k)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	4603      	mov	r3, r0
 800a530:	71fb      	strb	r3, [r7, #7]
    uint32_t k_new_num = 0;
 800a532:	2300      	movs	r3, #0
 800a534:	60fb      	str	r3, [r7, #12]
    fm_factory_separate_k_factor();
 800a536:	f000 fa79 	bl	800aa2c <fm_factory_separate_k_factor>
    if (k_array[LINE_1_DIGITS - 1 - digit_k] > VAL_0)
 800a53a:	79fb      	ldrb	r3, [r7, #7]
 800a53c:	f1c3 0307 	rsb	r3, r3, #7
 800a540:	4a17      	ldr	r2, [pc, #92]	; (800a5a0 <fm_factory_modify_k_factor_subs+0x78>)
 800a542:	5cd3      	ldrb	r3, [r2, r3]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d009      	beq.n	800a55c <fm_factory_modify_k_factor_subs+0x34>
    {
        k_array[LINE_1_DIGITS - 1 - digit_k]--;
 800a548:	79fb      	ldrb	r3, [r7, #7]
 800a54a:	f1c3 0307 	rsb	r3, r3, #7
 800a54e:	4a14      	ldr	r2, [pc, #80]	; (800a5a0 <fm_factory_modify_k_factor_subs+0x78>)
 800a550:	5cd2      	ldrb	r2, [r2, r3]
 800a552:	3a01      	subs	r2, #1
 800a554:	b2d1      	uxtb	r1, r2
 800a556:	4a12      	ldr	r2, [pc, #72]	; (800a5a0 <fm_factory_modify_k_factor_subs+0x78>)
 800a558:	54d1      	strb	r1, [r2, r3]
 800a55a:	e005      	b.n	800a568 <fm_factory_modify_k_factor_subs+0x40>
    }
    else
    {
        k_array[LINE_1_DIGITS - 1 - digit_k] = VAL_9;
 800a55c:	79fb      	ldrb	r3, [r7, #7]
 800a55e:	f1c3 0307 	rsb	r3, r3, #7
 800a562:	4a0f      	ldr	r2, [pc, #60]	; (800a5a0 <fm_factory_modify_k_factor_subs+0x78>)
 800a564:	2109      	movs	r1, #9
 800a566:	54d1      	strb	r1, [r2, r3]
    }

    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800a568:	2300      	movs	r3, #0
 800a56a:	60bb      	str	r3, [r7, #8]
 800a56c:	e00e      	b.n	800a58c <fm_factory_modify_k_factor_subs+0x64>
    {
        k_new_num = (k_new_num * 10) + k_array[i];
 800a56e:	68fa      	ldr	r2, [r7, #12]
 800a570:	4613      	mov	r3, r2
 800a572:	009b      	lsls	r3, r3, #2
 800a574:	4413      	add	r3, r2
 800a576:	005b      	lsls	r3, r3, #1
 800a578:	4619      	mov	r1, r3
 800a57a:	4a09      	ldr	r2, [pc, #36]	; (800a5a0 <fm_factory_modify_k_factor_subs+0x78>)
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	4413      	add	r3, r2
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	440b      	add	r3, r1
 800a584:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	3301      	adds	r3, #1
 800a58a:	60bb      	str	r3, [r7, #8]
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	2b07      	cmp	r3, #7
 800a590:	dded      	ble.n	800a56e <fm_factory_modify_k_factor_subs+0x46>
    }

    k_factor_config.num = k_new_num;
 800a592:	4a04      	ldr	r2, [pc, #16]	; (800a5a4 <fm_factory_modify_k_factor_subs+0x7c>)
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	6013      	str	r3, [r2, #0]
}
 800a598:	bf00      	nop
 800a59a:	3710      	adds	r7, #16
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}
 800a5a0:	20001998 	.word	0x20001998
 800a5a4:	200000f4 	.word	0x200000f4

0800a5a8 <fm_factory_modify_k_lin_add>:

void fm_factory_modify_k_lin_add(sel_digit_k_lin_t digit_k_lin, sel_k k_sel)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b086      	sub	sp, #24
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	460a      	mov	r2, r1
 800a5b2:	71fb      	strb	r3, [r7, #7]
 800a5b4:	4613      	mov	r3, r2
 800a5b6:	71bb      	strb	r3, [r7, #6]
    uint32_t k_lin_new_num = 0;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	617b      	str	r3, [r7, #20]
    uint32_t frec_lin_new_num = 0;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	613b      	str	r3, [r7, #16]

    fm_factory_separate_k_lin_and_frec(k_sel);
 800a5c0:	79bb      	ldrb	r3, [r7, #6]
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f000 fa6e 	bl	800aaa4 <fm_factory_separate_k_lin_and_frec>
    if(digit_k_lin <= DIG_LIN_7)
 800a5c8:	79fb      	ldrb	r3, [r7, #7]
 800a5ca:	2b07      	cmp	r3, #7
 800a5cc:	d84e      	bhi.n	800a66c <fm_factory_modify_k_lin_add+0xc4>
    {
        if(k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] < VAL_9)
 800a5ce:	79fb      	ldrb	r3, [r7, #7]
 800a5d0:	f1c3 0307 	rsb	r3, r3, #7
 800a5d4:	4a5e      	ldr	r2, [pc, #376]	; (800a750 <fm_factory_modify_k_lin_add+0x1a8>)
 800a5d6:	5cd3      	ldrb	r3, [r2, r3]
 800a5d8:	2b08      	cmp	r3, #8
 800a5da:	d809      	bhi.n	800a5f0 <fm_factory_modify_k_lin_add+0x48>
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin]++;
 800a5dc:	79fb      	ldrb	r3, [r7, #7]
 800a5de:	f1c3 0307 	rsb	r3, r3, #7
 800a5e2:	4a5b      	ldr	r2, [pc, #364]	; (800a750 <fm_factory_modify_k_lin_add+0x1a8>)
 800a5e4:	5cd2      	ldrb	r2, [r2, r3]
 800a5e6:	3201      	adds	r2, #1
 800a5e8:	b2d1      	uxtb	r1, r2
 800a5ea:	4a59      	ldr	r2, [pc, #356]	; (800a750 <fm_factory_modify_k_lin_add+0x1a8>)
 800a5ec:	54d1      	strb	r1, [r2, r3]
 800a5ee:	e005      	b.n	800a5fc <fm_factory_modify_k_lin_add+0x54>
        }
        else
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] = VAL_0;
 800a5f0:	79fb      	ldrb	r3, [r7, #7]
 800a5f2:	f1c3 0307 	rsb	r3, r3, #7
 800a5f6:	4a56      	ldr	r2, [pc, #344]	; (800a750 <fm_factory_modify_k_lin_add+0x1a8>)
 800a5f8:	2100      	movs	r1, #0
 800a5fa:	54d1      	strb	r1, [r2, r3]
        }

        for(int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	60fb      	str	r3, [r7, #12]
 800a600:	e00e      	b.n	800a620 <fm_factory_modify_k_lin_add+0x78>
        {
            k_lin_new_num = (k_lin_new_num * 10) + k_lin_array[i];
 800a602:	697a      	ldr	r2, [r7, #20]
 800a604:	4613      	mov	r3, r2
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	4413      	add	r3, r2
 800a60a:	005b      	lsls	r3, r3, #1
 800a60c:	4619      	mov	r1, r3
 800a60e:	4a50      	ldr	r2, [pc, #320]	; (800a750 <fm_factory_modify_k_lin_add+0x1a8>)
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	4413      	add	r3, r2
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	440b      	add	r3, r1
 800a618:	617b      	str	r3, [r7, #20]
        for(int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	3301      	adds	r3, #1
 800a61e:	60fb      	str	r3, [r7, #12]
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2b07      	cmp	r3, #7
 800a624:	dded      	ble.n	800a602 <fm_factory_modify_k_lin_add+0x5a>
        }

        if(k_sel == K_LIN_1)
 800a626:	79bb      	ldrb	r3, [r7, #6]
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d103      	bne.n	800a634 <fm_factory_modify_k_lin_add+0x8c>
        {
            k_lin_1_config.num = k_lin_new_num;
 800a62c:	4a49      	ldr	r2, [pc, #292]	; (800a754 <fm_factory_modify_k_lin_add+0x1ac>)
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	6013      	str	r3, [r2, #0]
        else if(k_sel == K_LIN_5)
        {
            frec_lin_5.num = frec_lin_new_num;
        }
    }
}
 800a632:	e089      	b.n	800a748 <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_2)
 800a634:	79bb      	ldrb	r3, [r7, #6]
 800a636:	2b02      	cmp	r3, #2
 800a638:	d103      	bne.n	800a642 <fm_factory_modify_k_lin_add+0x9a>
            k_lin_2_config.num = k_lin_new_num;
 800a63a:	4a47      	ldr	r2, [pc, #284]	; (800a758 <fm_factory_modify_k_lin_add+0x1b0>)
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	6013      	str	r3, [r2, #0]
}
 800a640:	e082      	b.n	800a748 <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_3)
 800a642:	79bb      	ldrb	r3, [r7, #6]
 800a644:	2b03      	cmp	r3, #3
 800a646:	d103      	bne.n	800a650 <fm_factory_modify_k_lin_add+0xa8>
            k_lin_3_config.num = k_lin_new_num;
 800a648:	4a44      	ldr	r2, [pc, #272]	; (800a75c <fm_factory_modify_k_lin_add+0x1b4>)
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	6013      	str	r3, [r2, #0]
}
 800a64e:	e07b      	b.n	800a748 <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_4)
 800a650:	79bb      	ldrb	r3, [r7, #6]
 800a652:	2b04      	cmp	r3, #4
 800a654:	d103      	bne.n	800a65e <fm_factory_modify_k_lin_add+0xb6>
            k_lin_4_config.num = k_lin_new_num;
 800a656:	4a42      	ldr	r2, [pc, #264]	; (800a760 <fm_factory_modify_k_lin_add+0x1b8>)
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	6013      	str	r3, [r2, #0]
}
 800a65c:	e074      	b.n	800a748 <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_5)
 800a65e:	79bb      	ldrb	r3, [r7, #6]
 800a660:	2b05      	cmp	r3, #5
 800a662:	d171      	bne.n	800a748 <fm_factory_modify_k_lin_add+0x1a0>
            k_lin_5_config.num = k_lin_new_num;
 800a664:	4a3f      	ldr	r2, [pc, #252]	; (800a764 <fm_factory_modify_k_lin_add+0x1bc>)
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	6013      	str	r3, [r2, #0]
}
 800a66a:	e06d      	b.n	800a748 <fm_factory_modify_k_lin_add+0x1a0>
    else if(digit_k_lin > DIG_LIN_7)
 800a66c:	79fb      	ldrb	r3, [r7, #7]
 800a66e:	2b07      	cmp	r3, #7
 800a670:	d96a      	bls.n	800a748 <fm_factory_modify_k_lin_add+0x1a0>
        if(LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8 != DIG_LIN_3)
 800a672:	79fb      	ldrb	r3, [r7, #7]
 800a674:	f1c3 030e 	rsb	r3, r3, #14
 800a678:	2b03      	cmp	r3, #3
 800a67a:	d017      	beq.n	800a6ac <fm_factory_modify_k_lin_add+0x104>
            if(frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] < VAL_9)
 800a67c:	79fb      	ldrb	r3, [r7, #7]
 800a67e:	f1c3 030e 	rsb	r3, r3, #14
 800a682:	4a39      	ldr	r2, [pc, #228]	; (800a768 <fm_factory_modify_k_lin_add+0x1c0>)
 800a684:	5cd3      	ldrb	r3, [r2, r3]
 800a686:	2b08      	cmp	r3, #8
 800a688:	d809      	bhi.n	800a69e <fm_factory_modify_k_lin_add+0xf6>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]++;
 800a68a:	79fb      	ldrb	r3, [r7, #7]
 800a68c:	f1c3 030e 	rsb	r3, r3, #14
 800a690:	4a35      	ldr	r2, [pc, #212]	; (800a768 <fm_factory_modify_k_lin_add+0x1c0>)
 800a692:	5cd2      	ldrb	r2, [r2, r3]
 800a694:	3201      	adds	r2, #1
 800a696:	b2d1      	uxtb	r1, r2
 800a698:	4a33      	ldr	r2, [pc, #204]	; (800a768 <fm_factory_modify_k_lin_add+0x1c0>)
 800a69a:	54d1      	strb	r1, [r2, r3]
 800a69c:	e01d      	b.n	800a6da <fm_factory_modify_k_lin_add+0x132>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_0;
 800a69e:	79fb      	ldrb	r3, [r7, #7]
 800a6a0:	f1c3 030e 	rsb	r3, r3, #14
 800a6a4:	4a30      	ldr	r2, [pc, #192]	; (800a768 <fm_factory_modify_k_lin_add+0x1c0>)
 800a6a6:	2100      	movs	r1, #0
 800a6a8:	54d1      	strb	r1, [r2, r3]
 800a6aa:	e016      	b.n	800a6da <fm_factory_modify_k_lin_add+0x132>
            if(frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] < VAL_1)
 800a6ac:	79fb      	ldrb	r3, [r7, #7]
 800a6ae:	f1c3 030e 	rsb	r3, r3, #14
 800a6b2:	4a2d      	ldr	r2, [pc, #180]	; (800a768 <fm_factory_modify_k_lin_add+0x1c0>)
 800a6b4:	5cd3      	ldrb	r3, [r2, r3]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d109      	bne.n	800a6ce <fm_factory_modify_k_lin_add+0x126>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]++;
 800a6ba:	79fb      	ldrb	r3, [r7, #7]
 800a6bc:	f1c3 030e 	rsb	r3, r3, #14
 800a6c0:	4a29      	ldr	r2, [pc, #164]	; (800a768 <fm_factory_modify_k_lin_add+0x1c0>)
 800a6c2:	5cd2      	ldrb	r2, [r2, r3]
 800a6c4:	3201      	adds	r2, #1
 800a6c6:	b2d1      	uxtb	r1, r2
 800a6c8:	4a27      	ldr	r2, [pc, #156]	; (800a768 <fm_factory_modify_k_lin_add+0x1c0>)
 800a6ca:	54d1      	strb	r1, [r2, r3]
 800a6cc:	e005      	b.n	800a6da <fm_factory_modify_k_lin_add+0x132>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_0;
 800a6ce:	79fb      	ldrb	r3, [r7, #7]
 800a6d0:	f1c3 030e 	rsb	r3, r3, #14
 800a6d4:	4a24      	ldr	r2, [pc, #144]	; (800a768 <fm_factory_modify_k_lin_add+0x1c0>)
 800a6d6:	2100      	movs	r1, #0
 800a6d8:	54d1      	strb	r1, [r2, r3]
        for(int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800a6da:	2300      	movs	r3, #0
 800a6dc:	60bb      	str	r3, [r7, #8]
 800a6de:	e00e      	b.n	800a6fe <fm_factory_modify_k_lin_add+0x156>
            frec_lin_new_num = (frec_lin_new_num * 10) + frec_array[j];
 800a6e0:	693a      	ldr	r2, [r7, #16]
 800a6e2:	4613      	mov	r3, r2
 800a6e4:	009b      	lsls	r3, r3, #2
 800a6e6:	4413      	add	r3, r2
 800a6e8:	005b      	lsls	r3, r3, #1
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	4a1e      	ldr	r2, [pc, #120]	; (800a768 <fm_factory_modify_k_lin_add+0x1c0>)
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	4413      	add	r3, r2
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	440b      	add	r3, r1
 800a6f6:	613b      	str	r3, [r7, #16]
        for(int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	3301      	adds	r3, #1
 800a6fc:	60bb      	str	r3, [r7, #8]
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	2b06      	cmp	r3, #6
 800a702:	dded      	ble.n	800a6e0 <fm_factory_modify_k_lin_add+0x138>
        if(k_sel == K_LIN_1)
 800a704:	79bb      	ldrb	r3, [r7, #6]
 800a706:	2b01      	cmp	r3, #1
 800a708:	d103      	bne.n	800a712 <fm_factory_modify_k_lin_add+0x16a>
            frec_lin_1.num = frec_lin_new_num;
 800a70a:	4a18      	ldr	r2, [pc, #96]	; (800a76c <fm_factory_modify_k_lin_add+0x1c4>)
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	6013      	str	r3, [r2, #0]
}
 800a710:	e01a      	b.n	800a748 <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_2)
 800a712:	79bb      	ldrb	r3, [r7, #6]
 800a714:	2b02      	cmp	r3, #2
 800a716:	d103      	bne.n	800a720 <fm_factory_modify_k_lin_add+0x178>
            frec_lin_2.num = frec_lin_new_num;
 800a718:	4a15      	ldr	r2, [pc, #84]	; (800a770 <fm_factory_modify_k_lin_add+0x1c8>)
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	6013      	str	r3, [r2, #0]
}
 800a71e:	e013      	b.n	800a748 <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_3)
 800a720:	79bb      	ldrb	r3, [r7, #6]
 800a722:	2b03      	cmp	r3, #3
 800a724:	d103      	bne.n	800a72e <fm_factory_modify_k_lin_add+0x186>
            frec_lin_3.num = frec_lin_new_num;
 800a726:	4a13      	ldr	r2, [pc, #76]	; (800a774 <fm_factory_modify_k_lin_add+0x1cc>)
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	6013      	str	r3, [r2, #0]
}
 800a72c:	e00c      	b.n	800a748 <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_4)
 800a72e:	79bb      	ldrb	r3, [r7, #6]
 800a730:	2b04      	cmp	r3, #4
 800a732:	d103      	bne.n	800a73c <fm_factory_modify_k_lin_add+0x194>
            frec_lin_4.num = frec_lin_new_num;
 800a734:	4a10      	ldr	r2, [pc, #64]	; (800a778 <fm_factory_modify_k_lin_add+0x1d0>)
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	6013      	str	r3, [r2, #0]
}
 800a73a:	e005      	b.n	800a748 <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_5)
 800a73c:	79bb      	ldrb	r3, [r7, #6]
 800a73e:	2b05      	cmp	r3, #5
 800a740:	d102      	bne.n	800a748 <fm_factory_modify_k_lin_add+0x1a0>
            frec_lin_5.num = frec_lin_new_num;
 800a742:	4a0e      	ldr	r2, [pc, #56]	; (800a77c <fm_factory_modify_k_lin_add+0x1d4>)
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	6013      	str	r3, [r2, #0]
}
 800a748:	bf00      	nop
 800a74a:	3718      	adds	r7, #24
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}
 800a750:	200019a0 	.word	0x200019a0
 800a754:	200000cc 	.word	0x200000cc
 800a758:	200000d4 	.word	0x200000d4
 800a75c:	200000dc 	.word	0x200000dc
 800a760:	200000e4 	.word	0x200000e4
 800a764:	200000ec 	.word	0x200000ec
 800a768:	200019a8 	.word	0x200019a8
 800a76c:	200000a4 	.word	0x200000a4
 800a770:	200000ac 	.word	0x200000ac
 800a774:	200000b4 	.word	0x200000b4
 800a778:	200000bc 	.word	0x200000bc
 800a77c:	200000c4 	.word	0x200000c4

0800a780 <fm_factory_modify_k_lin_subs>:

void fm_factory_modify_k_lin_subs(sel_digit_k_lin_t digit_k_lin, sel_k k_sel)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b086      	sub	sp, #24
 800a784:	af00      	add	r7, sp, #0
 800a786:	4603      	mov	r3, r0
 800a788:	460a      	mov	r2, r1
 800a78a:	71fb      	strb	r3, [r7, #7]
 800a78c:	4613      	mov	r3, r2
 800a78e:	71bb      	strb	r3, [r7, #6]
    uint32_t k_lin_new_num = 0;
 800a790:	2300      	movs	r3, #0
 800a792:	617b      	str	r3, [r7, #20]
    uint32_t frec_lin_new_num = 0;
 800a794:	2300      	movs	r3, #0
 800a796:	613b      	str	r3, [r7, #16]

    fm_factory_separate_k_lin_and_frec(k_sel);
 800a798:	79bb      	ldrb	r3, [r7, #6]
 800a79a:	4618      	mov	r0, r3
 800a79c:	f000 f982 	bl	800aaa4 <fm_factory_separate_k_lin_and_frec>
    if(digit_k_lin <= DIG_LIN_7)
 800a7a0:	79fb      	ldrb	r3, [r7, #7]
 800a7a2:	2b07      	cmp	r3, #7
 800a7a4:	d84e      	bhi.n	800a844 <fm_factory_modify_k_lin_subs+0xc4>
    {
        if(k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] > VAL_0)
 800a7a6:	79fb      	ldrb	r3, [r7, #7]
 800a7a8:	f1c3 0307 	rsb	r3, r3, #7
 800a7ac:	4a5e      	ldr	r2, [pc, #376]	; (800a928 <fm_factory_modify_k_lin_subs+0x1a8>)
 800a7ae:	5cd3      	ldrb	r3, [r2, r3]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d009      	beq.n	800a7c8 <fm_factory_modify_k_lin_subs+0x48>
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin]--;
 800a7b4:	79fb      	ldrb	r3, [r7, #7]
 800a7b6:	f1c3 0307 	rsb	r3, r3, #7
 800a7ba:	4a5b      	ldr	r2, [pc, #364]	; (800a928 <fm_factory_modify_k_lin_subs+0x1a8>)
 800a7bc:	5cd2      	ldrb	r2, [r2, r3]
 800a7be:	3a01      	subs	r2, #1
 800a7c0:	b2d1      	uxtb	r1, r2
 800a7c2:	4a59      	ldr	r2, [pc, #356]	; (800a928 <fm_factory_modify_k_lin_subs+0x1a8>)
 800a7c4:	54d1      	strb	r1, [r2, r3]
 800a7c6:	e005      	b.n	800a7d4 <fm_factory_modify_k_lin_subs+0x54>
        }
        else
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] = VAL_9;
 800a7c8:	79fb      	ldrb	r3, [r7, #7]
 800a7ca:	f1c3 0307 	rsb	r3, r3, #7
 800a7ce:	4a56      	ldr	r2, [pc, #344]	; (800a928 <fm_factory_modify_k_lin_subs+0x1a8>)
 800a7d0:	2109      	movs	r1, #9
 800a7d2:	54d1      	strb	r1, [r2, r3]
        }

        for(int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	60fb      	str	r3, [r7, #12]
 800a7d8:	e00e      	b.n	800a7f8 <fm_factory_modify_k_lin_subs+0x78>
        {
            k_lin_new_num = (k_lin_new_num * 10) + k_lin_array[i];
 800a7da:	697a      	ldr	r2, [r7, #20]
 800a7dc:	4613      	mov	r3, r2
 800a7de:	009b      	lsls	r3, r3, #2
 800a7e0:	4413      	add	r3, r2
 800a7e2:	005b      	lsls	r3, r3, #1
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	4a50      	ldr	r2, [pc, #320]	; (800a928 <fm_factory_modify_k_lin_subs+0x1a8>)
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	4413      	add	r3, r2
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	440b      	add	r3, r1
 800a7f0:	617b      	str	r3, [r7, #20]
        for(int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	60fb      	str	r3, [r7, #12]
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2b07      	cmp	r3, #7
 800a7fc:	dded      	ble.n	800a7da <fm_factory_modify_k_lin_subs+0x5a>
        }

        if(k_sel == K_LIN_1)
 800a7fe:	79bb      	ldrb	r3, [r7, #6]
 800a800:	2b01      	cmp	r3, #1
 800a802:	d103      	bne.n	800a80c <fm_factory_modify_k_lin_subs+0x8c>
        {
            k_lin_1_config.num = k_lin_new_num;
 800a804:	4a49      	ldr	r2, [pc, #292]	; (800a92c <fm_factory_modify_k_lin_subs+0x1ac>)
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	6013      	str	r3, [r2, #0]
        else if(k_sel == K_LIN_5)
        {
            frec_lin_5.num = frec_lin_new_num;
        }
    }
}
 800a80a:	e089      	b.n	800a920 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_2)
 800a80c:	79bb      	ldrb	r3, [r7, #6]
 800a80e:	2b02      	cmp	r3, #2
 800a810:	d103      	bne.n	800a81a <fm_factory_modify_k_lin_subs+0x9a>
            k_lin_2_config.num = k_lin_new_num;
 800a812:	4a47      	ldr	r2, [pc, #284]	; (800a930 <fm_factory_modify_k_lin_subs+0x1b0>)
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	6013      	str	r3, [r2, #0]
}
 800a818:	e082      	b.n	800a920 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_3)
 800a81a:	79bb      	ldrb	r3, [r7, #6]
 800a81c:	2b03      	cmp	r3, #3
 800a81e:	d103      	bne.n	800a828 <fm_factory_modify_k_lin_subs+0xa8>
            k_lin_3_config.num = k_lin_new_num;
 800a820:	4a44      	ldr	r2, [pc, #272]	; (800a934 <fm_factory_modify_k_lin_subs+0x1b4>)
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	6013      	str	r3, [r2, #0]
}
 800a826:	e07b      	b.n	800a920 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_4)
 800a828:	79bb      	ldrb	r3, [r7, #6]
 800a82a:	2b04      	cmp	r3, #4
 800a82c:	d103      	bne.n	800a836 <fm_factory_modify_k_lin_subs+0xb6>
            k_lin_4_config.num = k_lin_new_num;
 800a82e:	4a42      	ldr	r2, [pc, #264]	; (800a938 <fm_factory_modify_k_lin_subs+0x1b8>)
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	6013      	str	r3, [r2, #0]
}
 800a834:	e074      	b.n	800a920 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_5)
 800a836:	79bb      	ldrb	r3, [r7, #6]
 800a838:	2b05      	cmp	r3, #5
 800a83a:	d171      	bne.n	800a920 <fm_factory_modify_k_lin_subs+0x1a0>
            k_lin_5_config.num = k_lin_new_num;
 800a83c:	4a3f      	ldr	r2, [pc, #252]	; (800a93c <fm_factory_modify_k_lin_subs+0x1bc>)
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	6013      	str	r3, [r2, #0]
}
 800a842:	e06d      	b.n	800a920 <fm_factory_modify_k_lin_subs+0x1a0>
    else if(digit_k_lin > DIG_LIN_7)
 800a844:	79fb      	ldrb	r3, [r7, #7]
 800a846:	2b07      	cmp	r3, #7
 800a848:	d96a      	bls.n	800a920 <fm_factory_modify_k_lin_subs+0x1a0>
        if(LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8 != DIG_LIN_3)
 800a84a:	79fb      	ldrb	r3, [r7, #7]
 800a84c:	f1c3 030e 	rsb	r3, r3, #14
 800a850:	2b03      	cmp	r3, #3
 800a852:	d017      	beq.n	800a884 <fm_factory_modify_k_lin_subs+0x104>
            if(frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] > VAL_0)
 800a854:	79fb      	ldrb	r3, [r7, #7]
 800a856:	f1c3 030e 	rsb	r3, r3, #14
 800a85a:	4a39      	ldr	r2, [pc, #228]	; (800a940 <fm_factory_modify_k_lin_subs+0x1c0>)
 800a85c:	5cd3      	ldrb	r3, [r2, r3]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d009      	beq.n	800a876 <fm_factory_modify_k_lin_subs+0xf6>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]--;
 800a862:	79fb      	ldrb	r3, [r7, #7]
 800a864:	f1c3 030e 	rsb	r3, r3, #14
 800a868:	4a35      	ldr	r2, [pc, #212]	; (800a940 <fm_factory_modify_k_lin_subs+0x1c0>)
 800a86a:	5cd2      	ldrb	r2, [r2, r3]
 800a86c:	3a01      	subs	r2, #1
 800a86e:	b2d1      	uxtb	r1, r2
 800a870:	4a33      	ldr	r2, [pc, #204]	; (800a940 <fm_factory_modify_k_lin_subs+0x1c0>)
 800a872:	54d1      	strb	r1, [r2, r3]
 800a874:	e01d      	b.n	800a8b2 <fm_factory_modify_k_lin_subs+0x132>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_9;
 800a876:	79fb      	ldrb	r3, [r7, #7]
 800a878:	f1c3 030e 	rsb	r3, r3, #14
 800a87c:	4a30      	ldr	r2, [pc, #192]	; (800a940 <fm_factory_modify_k_lin_subs+0x1c0>)
 800a87e:	2109      	movs	r1, #9
 800a880:	54d1      	strb	r1, [r2, r3]
 800a882:	e016      	b.n	800a8b2 <fm_factory_modify_k_lin_subs+0x132>
            if(frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] > VAL_0)
 800a884:	79fb      	ldrb	r3, [r7, #7]
 800a886:	f1c3 030e 	rsb	r3, r3, #14
 800a88a:	4a2d      	ldr	r2, [pc, #180]	; (800a940 <fm_factory_modify_k_lin_subs+0x1c0>)
 800a88c:	5cd3      	ldrb	r3, [r2, r3]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d009      	beq.n	800a8a6 <fm_factory_modify_k_lin_subs+0x126>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]--;
 800a892:	79fb      	ldrb	r3, [r7, #7]
 800a894:	f1c3 030e 	rsb	r3, r3, #14
 800a898:	4a29      	ldr	r2, [pc, #164]	; (800a940 <fm_factory_modify_k_lin_subs+0x1c0>)
 800a89a:	5cd2      	ldrb	r2, [r2, r3]
 800a89c:	3a01      	subs	r2, #1
 800a89e:	b2d1      	uxtb	r1, r2
 800a8a0:	4a27      	ldr	r2, [pc, #156]	; (800a940 <fm_factory_modify_k_lin_subs+0x1c0>)
 800a8a2:	54d1      	strb	r1, [r2, r3]
 800a8a4:	e005      	b.n	800a8b2 <fm_factory_modify_k_lin_subs+0x132>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_1;
 800a8a6:	79fb      	ldrb	r3, [r7, #7]
 800a8a8:	f1c3 030e 	rsb	r3, r3, #14
 800a8ac:	4a24      	ldr	r2, [pc, #144]	; (800a940 <fm_factory_modify_k_lin_subs+0x1c0>)
 800a8ae:	2101      	movs	r1, #1
 800a8b0:	54d1      	strb	r1, [r2, r3]
        for(int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	60bb      	str	r3, [r7, #8]
 800a8b6:	e00e      	b.n	800a8d6 <fm_factory_modify_k_lin_subs+0x156>
            frec_lin_new_num = (frec_lin_new_num * 10) + frec_array[j];
 800a8b8:	693a      	ldr	r2, [r7, #16]
 800a8ba:	4613      	mov	r3, r2
 800a8bc:	009b      	lsls	r3, r3, #2
 800a8be:	4413      	add	r3, r2
 800a8c0:	005b      	lsls	r3, r3, #1
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	4a1e      	ldr	r2, [pc, #120]	; (800a940 <fm_factory_modify_k_lin_subs+0x1c0>)
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	4413      	add	r3, r2
 800a8ca:	781b      	ldrb	r3, [r3, #0]
 800a8cc:	440b      	add	r3, r1
 800a8ce:	613b      	str	r3, [r7, #16]
        for(int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	60bb      	str	r3, [r7, #8]
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	2b06      	cmp	r3, #6
 800a8da:	dded      	ble.n	800a8b8 <fm_factory_modify_k_lin_subs+0x138>
        if(k_sel == K_LIN_1)
 800a8dc:	79bb      	ldrb	r3, [r7, #6]
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d103      	bne.n	800a8ea <fm_factory_modify_k_lin_subs+0x16a>
            frec_lin_1.num = frec_lin_new_num;
 800a8e2:	4a18      	ldr	r2, [pc, #96]	; (800a944 <fm_factory_modify_k_lin_subs+0x1c4>)
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	6013      	str	r3, [r2, #0]
}
 800a8e8:	e01a      	b.n	800a920 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_2)
 800a8ea:	79bb      	ldrb	r3, [r7, #6]
 800a8ec:	2b02      	cmp	r3, #2
 800a8ee:	d103      	bne.n	800a8f8 <fm_factory_modify_k_lin_subs+0x178>
            frec_lin_2.num = frec_lin_new_num;
 800a8f0:	4a15      	ldr	r2, [pc, #84]	; (800a948 <fm_factory_modify_k_lin_subs+0x1c8>)
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	6013      	str	r3, [r2, #0]
}
 800a8f6:	e013      	b.n	800a920 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_3)
 800a8f8:	79bb      	ldrb	r3, [r7, #6]
 800a8fa:	2b03      	cmp	r3, #3
 800a8fc:	d103      	bne.n	800a906 <fm_factory_modify_k_lin_subs+0x186>
            frec_lin_3.num = frec_lin_new_num;
 800a8fe:	4a13      	ldr	r2, [pc, #76]	; (800a94c <fm_factory_modify_k_lin_subs+0x1cc>)
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	6013      	str	r3, [r2, #0]
}
 800a904:	e00c      	b.n	800a920 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_4)
 800a906:	79bb      	ldrb	r3, [r7, #6]
 800a908:	2b04      	cmp	r3, #4
 800a90a:	d103      	bne.n	800a914 <fm_factory_modify_k_lin_subs+0x194>
            frec_lin_4.num = frec_lin_new_num;
 800a90c:	4a10      	ldr	r2, [pc, #64]	; (800a950 <fm_factory_modify_k_lin_subs+0x1d0>)
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	6013      	str	r3, [r2, #0]
}
 800a912:	e005      	b.n	800a920 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_5)
 800a914:	79bb      	ldrb	r3, [r7, #6]
 800a916:	2b05      	cmp	r3, #5
 800a918:	d102      	bne.n	800a920 <fm_factory_modify_k_lin_subs+0x1a0>
            frec_lin_5.num = frec_lin_new_num;
 800a91a:	4a0e      	ldr	r2, [pc, #56]	; (800a954 <fm_factory_modify_k_lin_subs+0x1d4>)
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	6013      	str	r3, [r2, #0]
}
 800a920:	bf00      	nop
 800a922:	3718      	adds	r7, #24
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}
 800a928:	200019a0 	.word	0x200019a0
 800a92c:	200000cc 	.word	0x200000cc
 800a930:	200000d4 	.word	0x200000d4
 800a934:	200000dc 	.word	0x200000dc
 800a938:	200000e4 	.word	0x200000e4
 800a93c:	200000ec 	.word	0x200000ec
 800a940:	200019a8 	.word	0x200019a8
 800a944:	200000a4 	.word	0x200000a4
 800a948:	200000ac 	.word	0x200000ac
 800a94c:	200000b4 	.word	0x200000b4
 800a950:	200000bc 	.word	0x200000bc
 800a954:	200000c4 	.word	0x200000c4

0800a958 <fm_factory_modify_res_acm_ttl>:
 * @param Resoluciones de fabrica, y de los parámetros ACM y TTL.
 * @retval None
 */
void fm_factory_modify_res_acm_ttl(sel_resolution_t units_res,
sel_resolution_t acm_res, sel_resolution_t ttl_res)
{
 800a958:	b480      	push	{r7}
 800a95a:	b083      	sub	sp, #12
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	4603      	mov	r3, r0
 800a960:	71fb      	strb	r3, [r7, #7]
 800a962:	460b      	mov	r3, r1
 800a964:	71bb      	strb	r3, [r7, #6]
 800a966:	4613      	mov	r3, r2
 800a968:	717b      	strb	r3, [r7, #5]
    units_digits_vol.res = units_res;
 800a96a:	4a07      	ldr	r2, [pc, #28]	; (800a988 <fm_factory_modify_res_acm_ttl+0x30>)
 800a96c:	79fb      	ldrb	r3, [r7, #7]
 800a96e:	7113      	strb	r3, [r2, #4]
    acm_config.volume.res = acm_res;
 800a970:	4a06      	ldr	r2, [pc, #24]	; (800a98c <fm_factory_modify_res_acm_ttl+0x34>)
 800a972:	79bb      	ldrb	r3, [r7, #6]
 800a974:	7313      	strb	r3, [r2, #12]
    ttl_config.volume.res = ttl_res;
 800a976:	4a06      	ldr	r2, [pc, #24]	; (800a990 <fm_factory_modify_res_acm_ttl+0x38>)
 800a978:	797b      	ldrb	r3, [r7, #5]
 800a97a:	7313      	strb	r3, [r2, #12]
}
 800a97c:	bf00      	nop
 800a97e:	370c      	adds	r7, #12
 800a980:	46bd      	mov	sp, r7
 800a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a986:	4770      	bx	lr
 800a988:	2000009c 	.word	0x2000009c
 800a98c:	20000030 	.word	0x20000030
 800a990:	20000010 	.word	0x20000010

0800a994 <fm_factory_modify_res_rate>:
 * @param Resolución de fabrica, y del parámetro rate.
 * @retval None
 */
void fm_factory_modify_res_rate(sel_resolution_t units_res,
sel_resolution_t rate_res)
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
 800a99a:	4603      	mov	r3, r0
 800a99c:	460a      	mov	r2, r1
 800a99e:	71fb      	strb	r3, [r7, #7]
 800a9a0:	4613      	mov	r3, r2
 800a9a2:	71bb      	strb	r3, [r7, #6]
    units_digits_tim.res = units_res;
 800a9a4:	4a05      	ldr	r2, [pc, #20]	; (800a9bc <fm_factory_modify_res_rate+0x28>)
 800a9a6:	79fb      	ldrb	r3, [r7, #7]
 800a9a8:	7113      	strb	r3, [r2, #4]
    rate_config.volume.res = rate_res;
 800a9aa:	4a05      	ldr	r2, [pc, #20]	; (800a9c0 <fm_factory_modify_res_rate+0x2c>)
 800a9ac:	79bb      	ldrb	r3, [r7, #6]
 800a9ae:	7313      	strb	r3, [r2, #12]
}
 800a9b0:	bf00      	nop
 800a9b2:	370c      	adds	r7, #12
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr
 800a9bc:	20000094 	.word	0x20000094
 800a9c0:	20000050 	.word	0x20000050

0800a9c4 <fm_factory_modify_time_units>:
 * usuario.
 * @param A que unidad se quiere cambiar.
 * @retval None
 */
void fm_factory_modify_time_units(fmc_unit_time_t time_units)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b083      	sub	sp, #12
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	71fb      	strb	r3, [r7, #7]
    acm_config.unit_time = time_units;
 800a9ce:	4a07      	ldr	r2, [pc, #28]	; (800a9ec <fm_factory_modify_time_units+0x28>)
 800a9d0:	79fb      	ldrb	r3, [r7, #7]
 800a9d2:	7653      	strb	r3, [r2, #25]
    ttl_config.unit_time = time_units;
 800a9d4:	4a06      	ldr	r2, [pc, #24]	; (800a9f0 <fm_factory_modify_time_units+0x2c>)
 800a9d6:	79fb      	ldrb	r3, [r7, #7]
 800a9d8:	7653      	strb	r3, [r2, #25]
    rate_config.unit_time = time_units;
 800a9da:	4a06      	ldr	r2, [pc, #24]	; (800a9f4 <fm_factory_modify_time_units+0x30>)
 800a9dc:	79fb      	ldrb	r3, [r7, #7]
 800a9de:	7653      	strb	r3, [r2, #25]
}
 800a9e0:	bf00      	nop
 800a9e2:	370c      	adds	r7, #12
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr
 800a9ec:	20000030 	.word	0x20000030
 800a9f0:	20000010 	.word	0x20000010
 800a9f4:	20000050 	.word	0x20000050

0800a9f8 <fm_factory_modify_volume_units>:
 * usuario.
 * @param A que unidad se quiere cambiar.
 * @retval None
 */
void fm_factory_modify_volume_units(fmc_unit_volume_t volume_units)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b083      	sub	sp, #12
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	4603      	mov	r3, r0
 800aa00:	71fb      	strb	r3, [r7, #7]
    acm_config.unit_volume = volume_units;
 800aa02:	4a07      	ldr	r2, [pc, #28]	; (800aa20 <fm_factory_modify_volume_units+0x28>)
 800aa04:	79fb      	ldrb	r3, [r7, #7]
 800aa06:	7613      	strb	r3, [r2, #24]
    ttl_config.unit_volume = volume_units;
 800aa08:	4a06      	ldr	r2, [pc, #24]	; (800aa24 <fm_factory_modify_volume_units+0x2c>)
 800aa0a:	79fb      	ldrb	r3, [r7, #7]
 800aa0c:	7613      	strb	r3, [r2, #24]
    rate_config.unit_volume = volume_units;
 800aa0e:	4a06      	ldr	r2, [pc, #24]	; (800aa28 <fm_factory_modify_volume_units+0x30>)
 800aa10:	79fb      	ldrb	r3, [r7, #7]
 800aa12:	7613      	strb	r3, [r2, #24]
}
 800aa14:	bf00      	nop
 800aa16:	370c      	adds	r7, #12
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr
 800aa20:	20000030 	.word	0x20000030
 800aa24:	20000010 	.word	0x20000010
 800aa28:	20000050 	.word	0x20000050

0800aa2c <fm_factory_separate_k_factor>:
 * global.
 * @param None
 * @retval None
 */
void fm_factory_separate_k_factor()
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b084      	sub	sp, #16
 800aa30:	af00      	add	r7, sp, #0
    uint32_t k_num;
    int i = 7;
 800aa32:	2307      	movs	r3, #7
 800aa34:	60bb      	str	r3, [r7, #8]
    k_num = fm_factory_get_k_factor(K_FACTOR).num;
 800aa36:	463b      	mov	r3, r7
 800aa38:	2100      	movs	r1, #0
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f7ff fbb6 	bl	800a1ac <fm_factory_get_k_factor>
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	60fb      	str	r3, [r7, #12]

    while (i >= 0)
 800aa44:	e021      	b.n	800aa8a <fm_factory_separate_k_factor+0x5e>
    {
        if (k_num > 0)
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d016      	beq.n	800aa7a <fm_factory_separate_k_factor+0x4e>
        {
            k_array[i] = k_num % 10;
 800aa4c:	68f9      	ldr	r1, [r7, #12]
 800aa4e:	4b13      	ldr	r3, [pc, #76]	; (800aa9c <fm_factory_separate_k_factor+0x70>)
 800aa50:	fba3 2301 	umull	r2, r3, r3, r1
 800aa54:	08da      	lsrs	r2, r3, #3
 800aa56:	4613      	mov	r3, r2
 800aa58:	009b      	lsls	r3, r3, #2
 800aa5a:	4413      	add	r3, r2
 800aa5c:	005b      	lsls	r3, r3, #1
 800aa5e:	1aca      	subs	r2, r1, r3
 800aa60:	b2d1      	uxtb	r1, r2
 800aa62:	4a0f      	ldr	r2, [pc, #60]	; (800aaa0 <fm_factory_separate_k_factor+0x74>)
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	4413      	add	r3, r2
 800aa68:	460a      	mov	r2, r1
 800aa6a:	701a      	strb	r2, [r3, #0]
            k_num /= 10;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	4a0b      	ldr	r2, [pc, #44]	; (800aa9c <fm_factory_separate_k_factor+0x70>)
 800aa70:	fba2 2303 	umull	r2, r3, r2, r3
 800aa74:	08db      	lsrs	r3, r3, #3
 800aa76:	60fb      	str	r3, [r7, #12]
 800aa78:	e004      	b.n	800aa84 <fm_factory_separate_k_factor+0x58>
        }
        else
        {
            k_array[i] = 0;
 800aa7a:	4a09      	ldr	r2, [pc, #36]	; (800aaa0 <fm_factory_separate_k_factor+0x74>)
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	4413      	add	r3, r2
 800aa80:	2200      	movs	r2, #0
 800aa82:	701a      	strb	r2, [r3, #0]
        }
        i--;
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	3b01      	subs	r3, #1
 800aa88:	60bb      	str	r3, [r7, #8]
    while (i >= 0)
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	dada      	bge.n	800aa46 <fm_factory_separate_k_factor+0x1a>
    }
}
 800aa90:	bf00      	nop
 800aa92:	bf00      	nop
 800aa94:	3710      	adds	r7, #16
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	cccccccd 	.word	0xcccccccd
 800aaa0:	20001998 	.word	0x20001998

0800aaa4 <fm_factory_separate_k_lin_and_frec>:

void fm_factory_separate_k_lin_and_frec(sel_k k_sel)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b08a      	sub	sp, #40	; 0x28
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	4603      	mov	r3, r0
 800aaac:	71fb      	strb	r3, [r7, #7]
    uint32_t k_lin_num;
    uint32_t frec_num;

    int i = 7; //Contador que funciona solo en el while de esta función.
 800aaae:	2307      	movs	r3, #7
 800aab0:	61fb      	str	r3, [r7, #28]
    int j = 6; //Contador que funciona solo en el while de esta función.
 800aab2:	2306      	movs	r3, #6
 800aab4:	61bb      	str	r3, [r7, #24]
    k_lin_num = fm_factory_get_k_factor(k_sel).num;
 800aab6:	f107 0308 	add.w	r3, r7, #8
 800aaba:	79fa      	ldrb	r2, [r7, #7]
 800aabc:	4611      	mov	r1, r2
 800aabe:	4618      	mov	r0, r3
 800aac0:	f7ff fb74 	bl	800a1ac <fm_factory_get_k_factor>
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	627b      	str	r3, [r7, #36]	; 0x24
    frec_num = fm_factory_get_frec_lin(k_sel).num;
 800aac8:	f107 0310 	add.w	r3, r7, #16
 800aacc:	79fa      	ldrb	r2, [r7, #7]
 800aace:	4611      	mov	r1, r2
 800aad0:	4618      	mov	r0, r3
 800aad2:	f7ff fbc7 	bl	800a264 <fm_factory_get_frec_lin>
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	623b      	str	r3, [r7, #32]

    while (i >= 0) //Introduzco el factor k linealizado en un arreglo.
 800aada:	e021      	b.n	800ab20 <fm_factory_separate_k_lin_and_frec+0x7c>
    {
        if (k_lin_num > 0)
 800aadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d016      	beq.n	800ab10 <fm_factory_separate_k_lin_and_frec+0x6c>
        {
            k_lin_array[i] = k_lin_num % 10;
 800aae2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aae4:	4b25      	ldr	r3, [pc, #148]	; (800ab7c <fm_factory_separate_k_lin_and_frec+0xd8>)
 800aae6:	fba3 2301 	umull	r2, r3, r3, r1
 800aaea:	08da      	lsrs	r2, r3, #3
 800aaec:	4613      	mov	r3, r2
 800aaee:	009b      	lsls	r3, r3, #2
 800aaf0:	4413      	add	r3, r2
 800aaf2:	005b      	lsls	r3, r3, #1
 800aaf4:	1aca      	subs	r2, r1, r3
 800aaf6:	b2d1      	uxtb	r1, r2
 800aaf8:	4a21      	ldr	r2, [pc, #132]	; (800ab80 <fm_factory_separate_k_lin_and_frec+0xdc>)
 800aafa:	69fb      	ldr	r3, [r7, #28]
 800aafc:	4413      	add	r3, r2
 800aafe:	460a      	mov	r2, r1
 800ab00:	701a      	strb	r2, [r3, #0]
            k_lin_num /= 10;
 800ab02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab04:	4a1d      	ldr	r2, [pc, #116]	; (800ab7c <fm_factory_separate_k_lin_and_frec+0xd8>)
 800ab06:	fba2 2303 	umull	r2, r3, r2, r3
 800ab0a:	08db      	lsrs	r3, r3, #3
 800ab0c:	627b      	str	r3, [r7, #36]	; 0x24
 800ab0e:	e004      	b.n	800ab1a <fm_factory_separate_k_lin_and_frec+0x76>
        }
        else
        {
            k_lin_array[i] = 0;
 800ab10:	4a1b      	ldr	r2, [pc, #108]	; (800ab80 <fm_factory_separate_k_lin_and_frec+0xdc>)
 800ab12:	69fb      	ldr	r3, [r7, #28]
 800ab14:	4413      	add	r3, r2
 800ab16:	2200      	movs	r2, #0
 800ab18:	701a      	strb	r2, [r3, #0]
        }
        i--;
 800ab1a:	69fb      	ldr	r3, [r7, #28]
 800ab1c:	3b01      	subs	r3, #1
 800ab1e:	61fb      	str	r3, [r7, #28]
    while (i >= 0) //Introduzco el factor k linealizado en un arreglo.
 800ab20:	69fb      	ldr	r3, [r7, #28]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	dada      	bge.n	800aadc <fm_factory_separate_k_lin_and_frec+0x38>
    }

    while(j >= 0) //Introduzco la frecuencia de linealización en otro arreglo.
 800ab26:	e021      	b.n	800ab6c <fm_factory_separate_k_lin_and_frec+0xc8>
    {
        if(frec_num > 0)
 800ab28:	6a3b      	ldr	r3, [r7, #32]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d016      	beq.n	800ab5c <fm_factory_separate_k_lin_and_frec+0xb8>
        {
            frec_array[j] = frec_num % 10;
 800ab2e:	6a39      	ldr	r1, [r7, #32]
 800ab30:	4b12      	ldr	r3, [pc, #72]	; (800ab7c <fm_factory_separate_k_lin_and_frec+0xd8>)
 800ab32:	fba3 2301 	umull	r2, r3, r3, r1
 800ab36:	08da      	lsrs	r2, r3, #3
 800ab38:	4613      	mov	r3, r2
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	4413      	add	r3, r2
 800ab3e:	005b      	lsls	r3, r3, #1
 800ab40:	1aca      	subs	r2, r1, r3
 800ab42:	b2d1      	uxtb	r1, r2
 800ab44:	4a0f      	ldr	r2, [pc, #60]	; (800ab84 <fm_factory_separate_k_lin_and_frec+0xe0>)
 800ab46:	69bb      	ldr	r3, [r7, #24]
 800ab48:	4413      	add	r3, r2
 800ab4a:	460a      	mov	r2, r1
 800ab4c:	701a      	strb	r2, [r3, #0]
            frec_num /= 10;
 800ab4e:	6a3b      	ldr	r3, [r7, #32]
 800ab50:	4a0a      	ldr	r2, [pc, #40]	; (800ab7c <fm_factory_separate_k_lin_and_frec+0xd8>)
 800ab52:	fba2 2303 	umull	r2, r3, r2, r3
 800ab56:	08db      	lsrs	r3, r3, #3
 800ab58:	623b      	str	r3, [r7, #32]
 800ab5a:	e004      	b.n	800ab66 <fm_factory_separate_k_lin_and_frec+0xc2>
        }
        else
        {
            frec_array[j] = 0;
 800ab5c:	4a09      	ldr	r2, [pc, #36]	; (800ab84 <fm_factory_separate_k_lin_and_frec+0xe0>)
 800ab5e:	69bb      	ldr	r3, [r7, #24]
 800ab60:	4413      	add	r3, r2
 800ab62:	2200      	movs	r2, #0
 800ab64:	701a      	strb	r2, [r3, #0]
        }
        j--;
 800ab66:	69bb      	ldr	r3, [r7, #24]
 800ab68:	3b01      	subs	r3, #1
 800ab6a:	61bb      	str	r3, [r7, #24]
    while(j >= 0) //Introduzco la frecuencia de linealización en otro arreglo.
 800ab6c:	69bb      	ldr	r3, [r7, #24]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	dada      	bge.n	800ab28 <fm_factory_separate_k_lin_and_frec+0x84>
    }
}
 800ab72:	bf00      	nop
 800ab74:	bf00      	nop
 800ab76:	3728      	adds	r7, #40	; 0x28
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}
 800ab7c:	cccccccd 	.word	0xcccccccd
 800ab80:	200019a0 	.word	0x200019a0
 800ab84:	200019a8 	.word	0x200019a8

0800ab88 <HAL_GPIO_EXTI_Callback>:
// Private function bodies.

// Interrupts

void HAL_GPIO_EXTI_Callback(uint16_t gpio_pin) // @suppress("Name convention for function")
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b084      	sub	sp, #16
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	4603      	mov	r3, r0
 800ab90:	80fb      	strh	r3, [r7, #6]
    /*
     * Deshabilito interrupciones para evitar rebotes de los botones, hasta que
     * la tarea task_debounce termine su ejecución y se bloquee.
     */
    HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800ab92:	2028      	movs	r0, #40	; 0x28
 800ab94:	f7f8 f910 	bl	8002db8 <HAL_NVIC_DisableIRQ>
    fm_event_t event_now;

    /*
     * Compruebo qué botón fue el presionado.
     */
    switch (gpio_pin)
 800ab98:	88fb      	ldrh	r3, [r7, #6]
 800ab9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab9e:	d018      	beq.n	800abd2 <HAL_GPIO_EXTI_Callback+0x4a>
 800aba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aba4:	dc18      	bgt.n	800abd8 <HAL_GPIO_EXTI_Callback+0x50>
 800aba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abaa:	d00f      	beq.n	800abcc <HAL_GPIO_EXTI_Callback+0x44>
 800abac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abb0:	dc12      	bgt.n	800abd8 <HAL_GPIO_EXTI_Callback+0x50>
 800abb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abb6:	d003      	beq.n	800abc0 <HAL_GPIO_EXTI_Callback+0x38>
 800abb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800abbc:	d003      	beq.n	800abc6 <HAL_GPIO_EXTI_Callback+0x3e>
        break;
        case KEY_ESC:
            event_now = EVENT_KEY_ESC;
        break;
        default:
        break;
 800abbe:	e00b      	b.n	800abd8 <HAL_GPIO_EXTI_Callback+0x50>
            event_now = EVENT_KEY_UP;
 800abc0:	2302      	movs	r3, #2
 800abc2:	73fb      	strb	r3, [r7, #15]
        break;
 800abc4:	e009      	b.n	800abda <HAL_GPIO_EXTI_Callback+0x52>
            event_now = EVENT_KEY_DOWN;
 800abc6:	2303      	movs	r3, #3
 800abc8:	73fb      	strb	r3, [r7, #15]
        break;
 800abca:	e006      	b.n	800abda <HAL_GPIO_EXTI_Callback+0x52>
            event_now = EVENT_KEY_ENTER;
 800abcc:	2304      	movs	r3, #4
 800abce:	73fb      	strb	r3, [r7, #15]
        break;
 800abd0:	e003      	b.n	800abda <HAL_GPIO_EXTI_Callback+0x52>
            event_now = EVENT_KEY_ESC;
 800abd2:	2305      	movs	r3, #5
 800abd4:	73fb      	strb	r3, [r7, #15]
        break;
 800abd6:	e000      	b.n	800abda <HAL_GPIO_EXTI_Callback+0x52>
        break;
 800abd8:	bf00      	nop
    /*
     * Pongo el nombre del botón presionado en la cola de eventos y libero el
     * semáforo de la tarea task_debounce, para que esta se bloquee durante el
     * tiempo necesario para que no haya rebotes de los botones.
     */
    tx_queue_send(&event_queue_ptr,&event_now,TX_NO_WAIT);
 800abda:	f107 030f 	add.w	r3, r7, #15
 800abde:	2200      	movs	r2, #0
 800abe0:	4619      	mov	r1, r3
 800abe2:	4805      	ldr	r0, [pc, #20]	; (800abf8 <HAL_GPIO_EXTI_Callback+0x70>)
 800abe4:	f7fe fe12 	bl	800980c <_txe_queue_send>
    tx_semaphore_ceiling_put(&debounce_semaphore_ptr, 1);
 800abe8:	2101      	movs	r1, #1
 800abea:	4804      	ldr	r0, [pc, #16]	; (800abfc <HAL_GPIO_EXTI_Callback+0x74>)
 800abec:	f7fe fe58 	bl	80098a0 <_txe_semaphore_ceiling_put>
}
 800abf0:	bf00      	nop
 800abf2:	3710      	adds	r7, #16
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}
 800abf8:	20001068 	.word	0x20001068
 800abfc:	200010a0 	.word	0x200010a0

0800ac00 <fm_lcd_acm_rate>:
 * personalizada según las opciones que se elijan.
 * @param None
 * @retval None
 */
void fm_lcd_acm_rate()
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b0b8      	sub	sp, #224	; 0xe0
 800ac04:	af02      	add	r7, sp, #8
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fmc_get_acm().volume, ' ', LINE_0_DIGITS, lcd_msg,
 800ac06:	f107 0318 	add.w	r3, r7, #24
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f004 fd92 	bl	800f734 <fmc_get_acm>
 800ac10:	2314      	movs	r3, #20
 800ac12:	9301      	str	r3, [sp, #4]
 800ac14:	1d3b      	adds	r3, r7, #4
 800ac16:	9300      	str	r3, [sp, #0]
 800ac18:	2309      	movs	r3, #9
 800ac1a:	2220      	movs	r2, #32
 800ac1c:	f107 0120 	add.w	r1, r7, #32
 800ac20:	c903      	ldmia	r1, {r0, r1}
 800ac22:	f000 f9eb 	bl	800affc <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_acm().volume, lcd_msg, sizeof(lcd_msg));
 800ac26:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f004 fd82 	bl	800f734 <fmc_get_acm>
 800ac30:	1d3a      	adds	r2, r7, #4
 800ac32:	2314      	movs	r3, #20
 800ac34:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800ac38:	c903      	ldmia	r1, {r0, r1}
 800ac3a:	f000 f99b 	bl	800af74 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800ac3e:	1d3b      	adds	r3, r7, #4
 800ac40:	2100      	movs	r1, #0
 800ac42:	4618      	mov	r0, r3
 800ac44:	f000 fb7c 	bl	800b340 <fm_lcd_puts>

    fm_lcd_fp_to_str(fmc_get_rate().volume, ' ', LINE_1_DIGITS, lcd_msg,
 800ac48:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f004 fdd7 	bl	800f800 <fmc_get_rate>
 800ac52:	2314      	movs	r3, #20
 800ac54:	9301      	str	r3, [sp, #4]
 800ac56:	1d3b      	adds	r3, r7, #4
 800ac58:	9300      	str	r3, [sp, #0]
 800ac5a:	2308      	movs	r3, #8
 800ac5c:	2220      	movs	r2, #32
 800ac5e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800ac62:	c903      	ldmia	r1, {r0, r1}
 800ac64:	f000 f9ca 	bl	800affc <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_rate().volume, lcd_msg, sizeof(lcd_msg));
 800ac68:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f004 fdc7 	bl	800f800 <fmc_get_rate>
 800ac72:	1d3a      	adds	r2, r7, #4
 800ac74:	2314      	movs	r3, #20
 800ac76:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800ac7a:	c903      	ldmia	r1, {r0, r1}
 800ac7c:	f000 f97a 	bl	800af74 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800ac80:	1d3b      	adds	r3, r7, #4
 800ac82:	2101      	movs	r1, #1
 800ac84:	4618      	mov	r0, r3
 800ac86:	f000 fb5b 	bl	800b340 <fm_lcd_puts>

    lcd_set_symbol(ACM, 0x0);
 800ac8a:	2100      	movs	r1, #0
 800ac8c:	2006      	movs	r0, #6
 800ac8e:	f001 fe3f 	bl	800c910 <lcd_set_symbol>
    lcd_set_symbol(RATE, 0x0);
 800ac92:	2100      	movs	r1, #0
 800ac94:	2002      	movs	r0, #2
 800ac96:	f001 fe3b 	bl	800c910 <lcd_set_symbol>

    lcd_set_vol_unit(fmc_get_acm().unit_volume, 0x0);
 800ac9a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f004 fd48 	bl	800f734 <fmc_get_acm>
 800aca4:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 800aca8:	2100      	movs	r1, #0
 800acaa:	4618      	mov	r0, r3
 800acac:	f002 f9b4 	bl	800d018 <lcd_set_vol_unit>
    lcd_set_symbol(BACKSLASH, 0x0);
 800acb0:	2100      	movs	r1, #0
 800acb2:	2007      	movs	r0, #7
 800acb4:	f001 fe2c 	bl	800c910 <lcd_set_symbol>
    lcd_set_time_unit(fmc_get_acm().unit_time, 0x0);
 800acb8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800acbc:	4618      	mov	r0, r3
 800acbe:	f004 fd39 	bl	800f734 <fmc_get_acm>
 800acc2:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 800acc6:	2100      	movs	r1, #0
 800acc8:	4618      	mov	r0, r3
 800acca:	f002 f963 	bl	800cf94 <lcd_set_time_unit>
}
 800acce:	bf00      	nop
 800acd0:	37d8      	adds	r7, #216	; 0xd8
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}

0800acd6 <fm_lcd_acm_temp>:
 * de forma personalizada según las opciones que se elijan.
 * @param None
 * @retval None
 */
void fm_lcd_acm_temp()
{
 800acd6:	b580      	push	{r7, lr}
 800acd8:	b0a2      	sub	sp, #136	; 0x88
 800acda:	af02      	add	r7, sp, #8
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fmc_get_acm().volume, ' ', LINE_0_DIGITS, lcd_msg,
 800acdc:	f107 0318 	add.w	r3, r7, #24
 800ace0:	4618      	mov	r0, r3
 800ace2:	f004 fd27 	bl	800f734 <fmc_get_acm>
 800ace6:	2314      	movs	r3, #20
 800ace8:	9301      	str	r3, [sp, #4]
 800acea:	1d3b      	adds	r3, r7, #4
 800acec:	9300      	str	r3, [sp, #0]
 800acee:	2309      	movs	r3, #9
 800acf0:	2220      	movs	r2, #32
 800acf2:	f107 0120 	add.w	r1, r7, #32
 800acf6:	c903      	ldmia	r1, {r0, r1}
 800acf8:	f000 f980 	bl	800affc <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_acm().volume, lcd_msg, sizeof(lcd_msg));
 800acfc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ad00:	4618      	mov	r0, r3
 800ad02:	f004 fd17 	bl	800f734 <fmc_get_acm>
 800ad06:	1d3a      	adds	r2, r7, #4
 800ad08:	2314      	movs	r3, #20
 800ad0a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800ad0e:	c903      	ldmia	r1, {r0, r1}
 800ad10:	f000 f930 	bl	800af74 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800ad14:	1d3b      	adds	r3, r7, #4
 800ad16:	2100      	movs	r1, #0
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f000 fb11 	bl	800b340 <fm_lcd_puts>

    fm_lcd_fp_to_str(fmc_get_stm32_temp().temperature, ' ', LINE_1_DIGITS,
 800ad1e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ad22:	4618      	mov	r0, r3
 800ad24:	f004 fd46 	bl	800f7b4 <fmc_get_stm32_temp>
 800ad28:	2314      	movs	r3, #20
 800ad2a:	9301      	str	r3, [sp, #4]
 800ad2c:	1d3b      	adds	r3, r7, #4
 800ad2e:	9300      	str	r3, [sp, #0]
 800ad30:	2308      	movs	r3, #8
 800ad32:	2220      	movs	r2, #32
 800ad34:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800ad38:	c903      	ldmia	r1, {r0, r1}
 800ad3a:	f000 f95f 	bl	800affc <fm_lcd_fp_to_str>
    lcd_msg, sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_stm32_temp().temperature, lcd_msg,
 800ad3e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ad42:	4618      	mov	r0, r3
 800ad44:	f004 fd36 	bl	800f7b4 <fmc_get_stm32_temp>
 800ad48:	1d3a      	adds	r2, r7, #4
 800ad4a:	2314      	movs	r3, #20
 800ad4c:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800ad50:	c903      	ldmia	r1, {r0, r1}
 800ad52:	f000 f90f 	bl	800af74 <fm_lcd_fp_add_dot>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800ad56:	1d3b      	adds	r3, r7, #4
 800ad58:	2101      	movs	r1, #1
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f000 faf0 	bl	800b340 <fm_lcd_puts>

    lcd_set_symbol(ACM, 0x0);
 800ad60:	2100      	movs	r1, #0
 800ad62:	2006      	movs	r0, #6
 800ad64:	f001 fdd4 	bl	800c910 <lcd_set_symbol>
    lcd_set_vol_unit(fmc_get_stm32_temp().unit_volume_temp, 0x0);
 800ad68:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f004 fd21 	bl	800f7b4 <fmc_get_stm32_temp>
 800ad72:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800ad76:	2100      	movs	r1, #0
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f002 f94d 	bl	800d018 <lcd_set_vol_unit>
}
 800ad7e:	bf00      	nop
 800ad80:	3780      	adds	r7, #128	; 0x80
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}

0800ad86 <fm_lcd_clear>:
 * @brief Función que limpia toda la pantalla.
 * @param  None
 * @retval None
 */
void fm_lcd_clear()
{
 800ad86:	b580      	push	{r7, lr}
 800ad88:	af00      	add	r7, sp, #0
    lcd_clear_all();
 800ad8a:	f000 fcd1 	bl	800b730 <lcd_clear_all>
}
 800ad8e:	bf00      	nop
 800ad90:	bd80      	pop	{r7, pc}
	...

0800ad94 <fm_lcd_date_hour>:
 * @param Hora y fecha a imprimir.
 * @retval None
 */
void fm_lcd_date_hour(user_or_configuration_t configuration,
fm_event_t event_id, sel_date_time_field_t field)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b090      	sub	sp, #64	; 0x40
 800ad98:	af02      	add	r7, sp, #8
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	73fb      	strb	r3, [r7, #15]
 800ad9e:	460b      	mov	r3, r1
 800ada0:	73bb      	strb	r3, [r7, #14]
 800ada2:	4613      	mov	r3, r2
 800ada4:	737b      	strb	r3, [r7, #13]
    char lcd_msg[PCF8553_DATA_SIZE];

    /*
     * Se comprueba si se está en el menú de configuración o de usuario.
     */
    if(configuration)
 800ada6:	7bfb      	ldrb	r3, [r7, #15]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d00a      	beq.n	800adc2 <fm_lcd_date_hour+0x2e>
    {
        date_to_str = fm_factory_get_fp_date_conf();
 800adac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800adb0:	4618      	mov	r0, r3
 800adb2:	f7ff fae1 	bl	800a378 <fm_factory_get_fp_date_conf>
        time_to_str = fm_factory_get_fp_time_conf();
 800adb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800adba:	4618      	mov	r0, r3
 800adbc:	f7ff faee 	bl	800a39c <fm_factory_get_fp_time_conf>
 800adc0:	e019      	b.n	800adf6 <fm_lcd_date_hour+0x62>
    }
    else
    {
        fm_calendar_format_date();
 800adc2:	f7ff f939 	bl	800a038 <fm_calendar_format_date>
        fm_calendar_format_time();
 800adc6:	f7ff f911 	bl	8009fec <fm_calendar_format_time>

        date_to_str = fm_factory_get_fp_date();
 800adca:	463b      	mov	r3, r7
 800adcc:	4618      	mov	r0, r3
 800adce:	f7ff faaf 	bl	800a330 <fm_factory_get_fp_date>
 800add2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800add6:	463a      	mov	r2, r7
 800add8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800addc:	e883 0003 	stmia.w	r3, {r0, r1}
        time_to_str = fm_factory_get_fp_time();
 800ade0:	463b      	mov	r3, r7
 800ade2:	4618      	mov	r0, r3
 800ade4:	f7ff fab6 	bl	800a354 <fm_factory_get_fp_time>
 800ade8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800adec:	463a      	mov	r2, r7
 800adee:	e892 0003 	ldmia.w	r2, {r0, r1}
 800adf2:	e883 0003 	stmia.w	r3, {r0, r1}
    }

    fm_lcd_fp_to_str(date_to_str, '0', LINE_0_DIGITS, lcd_msg,
 800adf6:	2314      	movs	r3, #20
 800adf8:	9301      	str	r3, [sp, #4]
 800adfa:	f107 0314 	add.w	r3, r7, #20
 800adfe:	9300      	str	r3, [sp, #0]
 800ae00:	2309      	movs	r3, #9
 800ae02:	2230      	movs	r2, #48	; 0x30
 800ae04:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800ae08:	c903      	ldmia	r1, {r0, r1}
 800ae0a:	f000 f8f7 	bl	800affc <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800ae0e:	f107 0314 	add.w	r3, r7, #20
 800ae12:	2100      	movs	r1, #0
 800ae14:	4618      	mov	r0, r3
 800ae16:	f000 fa93 	bl	800b340 <fm_lcd_puts>
    lcd_set_point(HIGH_ROW, PNT_1);
 800ae1a:	2101      	movs	r1, #1
 800ae1c:	2000      	movs	r0, #0
 800ae1e:	f001 fccb 	bl	800c7b8 <lcd_set_point>
    lcd_set_point(HIGH_ROW, PNT_3);
 800ae22:	2103      	movs	r1, #3
 800ae24:	2000      	movs	r0, #0
 800ae26:	f001 fcc7 	bl	800c7b8 <lcd_set_point>

    fm_lcd_fp_to_str(time_to_str, '0', LINE_1_DIGITS, lcd_msg,
 800ae2a:	2314      	movs	r3, #20
 800ae2c:	9301      	str	r3, [sp, #4]
 800ae2e:	f107 0314 	add.w	r3, r7, #20
 800ae32:	9300      	str	r3, [sp, #0]
 800ae34:	2308      	movs	r3, #8
 800ae36:	2230      	movs	r2, #48	; 0x30
 800ae38:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800ae3c:	c903      	ldmia	r1, {r0, r1}
 800ae3e:	f000 f8dd 	bl	800affc <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800ae42:	f107 0314 	add.w	r3, r7, #20
 800ae46:	2101      	movs	r1, #1
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f000 fa79 	bl	800b340 <fm_lcd_puts>
    lcd_clear_digit(DIGIT_0, LOW_ROW);
 800ae4e:	2101      	movs	r1, #1
 800ae50:	2000      	movs	r0, #0
 800ae52:	f000 fc95 	bl	800b780 <lcd_clear_digit>
    lcd_set_point(LOW_ROW, PNT_2);
 800ae56:	2102      	movs	r1, #2
 800ae58:	2001      	movs	r0, #1
 800ae5a:	f001 fcad 	bl	800c7b8 <lcd_set_point>
    lcd_set_point(LOW_ROW, PNT_4);
 800ae5e:	2104      	movs	r1, #4
 800ae60:	2001      	movs	r0, #1
 800ae62:	f001 fca9 	bl	800c7b8 <lcd_set_point>

    if(configuration)
 800ae66:	7bfb      	ldrb	r3, [r7, #15]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d059      	beq.n	800af20 <fm_lcd_date_hour+0x18c>
//        if(event_id != EVENT_LCD_REFRESH)
//        {
//            blink = 1;
//        }

        if(blink == 1)
 800ae6c:	4b2e      	ldr	r3, [pc, #184]	; (800af28 <fm_lcd_date_hour+0x194>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	2b01      	cmp	r3, #1
 800ae72:	d152      	bne.n	800af1a <fm_lcd_date_hour+0x186>
        {
            if(field == DAY)
 800ae74:	7b7b      	ldrb	r3, [r7, #13]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d108      	bne.n	800ae8c <fm_lcd_date_hour+0xf8>
            {
                lcd_clear_digit(DIGIT_1, HIGH_ROW);
 800ae7a:	2100      	movs	r1, #0
 800ae7c:	2001      	movs	r0, #1
 800ae7e:	f000 fc7f 	bl	800b780 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_0, HIGH_ROW);
 800ae82:	2100      	movs	r1, #0
 800ae84:	2000      	movs	r0, #0
 800ae86:	f000 fc7b 	bl	800b780 <lcd_clear_digit>
 800ae8a:	e042      	b.n	800af12 <fm_lcd_date_hour+0x17e>
            }
            else if(field == MONTH)
 800ae8c:	7b7b      	ldrb	r3, [r7, #13]
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d108      	bne.n	800aea4 <fm_lcd_date_hour+0x110>
            {
                lcd_clear_digit(DIGIT_3, HIGH_ROW);
 800ae92:	2100      	movs	r1, #0
 800ae94:	2003      	movs	r0, #3
 800ae96:	f000 fc73 	bl	800b780 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_2, HIGH_ROW);
 800ae9a:	2100      	movs	r1, #0
 800ae9c:	2002      	movs	r0, #2
 800ae9e:	f000 fc6f 	bl	800b780 <lcd_clear_digit>
 800aea2:	e036      	b.n	800af12 <fm_lcd_date_hour+0x17e>
            }
            else if(field == YEAR)
 800aea4:	7b7b      	ldrb	r3, [r7, #13]
 800aea6:	2b02      	cmp	r3, #2
 800aea8:	d110      	bne.n	800aecc <fm_lcd_date_hour+0x138>
            {
                lcd_clear_digit(DIGIT_7, HIGH_ROW);
 800aeaa:	2100      	movs	r1, #0
 800aeac:	2007      	movs	r0, #7
 800aeae:	f000 fc67 	bl	800b780 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_6, HIGH_ROW);
 800aeb2:	2100      	movs	r1, #0
 800aeb4:	2006      	movs	r0, #6
 800aeb6:	f000 fc63 	bl	800b780 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_5, HIGH_ROW);
 800aeba:	2100      	movs	r1, #0
 800aebc:	2005      	movs	r0, #5
 800aebe:	f000 fc5f 	bl	800b780 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_4, HIGH_ROW);
 800aec2:	2100      	movs	r1, #0
 800aec4:	2004      	movs	r0, #4
 800aec6:	f000 fc5b 	bl	800b780 <lcd_clear_digit>
 800aeca:	e022      	b.n	800af12 <fm_lcd_date_hour+0x17e>
            }
            else if(field == HOUR)
 800aecc:	7b7b      	ldrb	r3, [r7, #13]
 800aece:	2b03      	cmp	r3, #3
 800aed0:	d108      	bne.n	800aee4 <fm_lcd_date_hour+0x150>
            {
                lcd_clear_digit(DIGIT_2, LOW_ROW);
 800aed2:	2101      	movs	r1, #1
 800aed4:	2002      	movs	r0, #2
 800aed6:	f000 fc53 	bl	800b780 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_1, LOW_ROW);
 800aeda:	2101      	movs	r1, #1
 800aedc:	2001      	movs	r0, #1
 800aede:	f000 fc4f 	bl	800b780 <lcd_clear_digit>
 800aee2:	e016      	b.n	800af12 <fm_lcd_date_hour+0x17e>
            }
            else if(field == MINUTE)
 800aee4:	7b7b      	ldrb	r3, [r7, #13]
 800aee6:	2b04      	cmp	r3, #4
 800aee8:	d108      	bne.n	800aefc <fm_lcd_date_hour+0x168>
            {
                lcd_clear_digit(DIGIT_4, LOW_ROW);
 800aeea:	2101      	movs	r1, #1
 800aeec:	2004      	movs	r0, #4
 800aeee:	f000 fc47 	bl	800b780 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_3, LOW_ROW);
 800aef2:	2101      	movs	r1, #1
 800aef4:	2003      	movs	r0, #3
 800aef6:	f000 fc43 	bl	800b780 <lcd_clear_digit>
 800aefa:	e00a      	b.n	800af12 <fm_lcd_date_hour+0x17e>
            }
            else if(field == SECOND)
 800aefc:	7b7b      	ldrb	r3, [r7, #13]
 800aefe:	2b05      	cmp	r3, #5
 800af00:	d107      	bne.n	800af12 <fm_lcd_date_hour+0x17e>
            {
                lcd_clear_digit(DIGIT_6, LOW_ROW);
 800af02:	2101      	movs	r1, #1
 800af04:	2006      	movs	r0, #6
 800af06:	f000 fc3b 	bl	800b780 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_5, LOW_ROW);
 800af0a:	2101      	movs	r1, #1
 800af0c:	2005      	movs	r0, #5
 800af0e:	f000 fc37 	bl	800b780 <lcd_clear_digit>
            }

            blink = 0;
 800af12:	4b05      	ldr	r3, [pc, #20]	; (800af28 <fm_lcd_date_hour+0x194>)
 800af14:	2200      	movs	r2, #0
 800af16:	601a      	str	r2, [r3, #0]
        else
        {
            blink = 1;
        }
    }
}
 800af18:	e002      	b.n	800af20 <fm_lcd_date_hour+0x18c>
            blink = 1;
 800af1a:	4b03      	ldr	r3, [pc, #12]	; (800af28 <fm_lcd_date_hour+0x194>)
 800af1c:	2201      	movs	r2, #1
 800af1e:	601a      	str	r2, [r3, #0]
}
 800af20:	bf00      	nop
 800af22:	3738      	adds	r7, #56	; 0x38
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}
 800af28:	2000011c 	.word	0x2000011c

0800af2c <fm_lcd_format_number_in_line>:
 * @param Enumeracion rows_t de lcd.h
 * @retval arreglo con la información formateada tipo char.
 */
void fm_lcd_format_number_in_line(rows_t line, uint32_t data, char *p_str,
int length)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
 800af32:	60b9      	str	r1, [r7, #8]
 800af34:	607a      	str	r2, [r7, #4]
 800af36:	603b      	str	r3, [r7, #0]
 800af38:	4603      	mov	r3, r0
 800af3a:	73fb      	strb	r3, [r7, #15]
    if (line == HIGH_ROW)
 800af3c:	7bfb      	ldrb	r3, [r7, #15]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d106      	bne.n	800af50 <fm_lcd_format_number_in_line+0x24>
    {
        snprintf(p_str, length, "%8lu", data);
 800af42:	6839      	ldr	r1, [r7, #0]
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	4a09      	ldr	r2, [pc, #36]	; (800af6c <fm_lcd_format_number_in_line+0x40>)
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f004 fd6d 	bl	800fa28 <sniprintf>
    }
    else if (line == LOW_ROW)
    {
        snprintf(p_str, length, "%7lu", data);
    }
}
 800af4e:	e008      	b.n	800af62 <fm_lcd_format_number_in_line+0x36>
    else if (line == LOW_ROW)
 800af50:	7bfb      	ldrb	r3, [r7, #15]
 800af52:	2b01      	cmp	r3, #1
 800af54:	d105      	bne.n	800af62 <fm_lcd_format_number_in_line+0x36>
        snprintf(p_str, length, "%7lu", data);
 800af56:	6839      	ldr	r1, [r7, #0]
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	4a05      	ldr	r2, [pc, #20]	; (800af70 <fm_lcd_format_number_in_line+0x44>)
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f004 fd63 	bl	800fa28 <sniprintf>
}
 800af62:	bf00      	nop
 800af64:	3710      	adds	r7, #16
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
 800af6a:	bf00      	nop
 800af6c:	08010520 	.word	0x08010520
 800af70:	08010528 	.word	0x08010528

0800af74 <fm_lcd_fp_add_dot>:
 * @param str_size tamaño del string.
 * @retval int.
 *
 */
int fm_lcd_fp_add_dot(fmc_fp_t fp, char *p_str, int str_size)
{
 800af74:	b590      	push	{r4, r7, lr}
 800af76:	b087      	sub	sp, #28
 800af78:	af00      	add	r7, sp, #0
 800af7a:	f107 0408 	add.w	r4, r7, #8
 800af7e:	e884 0003 	stmia.w	r4, {r0, r1}
 800af82:	607a      	str	r2, [r7, #4]
 800af84:	603b      	str	r3, [r7, #0]
    int idx_now;

    /*
     * Si la resolución asignada por el usuario es 0, no hay nada que hacer.
     */
    if (fp.res == 0)
 800af86:	7b3b      	ldrb	r3, [r7, #12]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d101      	bne.n	800af90 <fm_lcd_fp_add_dot+0x1c>
    {
        return (0);
 800af8c:	2300      	movs	r3, #0
 800af8e:	e031      	b.n	800aff4 <fm_lcd_fp_add_dot+0x80>
    }

    idx_now = strlen(p_str); //Como indice apunta a terminador nulo.
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f7f5 fa49 	bl	8000428 <strlen>
 800af96:	4603      	mov	r3, r0
 800af98:	617b      	str	r3, [r7, #20]

    /*
     * Chequeo de contorno para ver si entra el punto o no.
     */

    if ((idx_now + 1 + 1) >= str_size)
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	3302      	adds	r3, #2
 800af9e:	683a      	ldr	r2, [r7, #0]
 800afa0:	429a      	cmp	r2, r3
 800afa2:	dc02      	bgt.n	800afaa <fm_lcd_fp_add_dot+0x36>
    {
        return (-1);
 800afa4:	f04f 33ff 	mov.w	r3, #4294967295
 800afa8:	e024      	b.n	800aff4 <fm_lcd_fp_add_dot+0x80>
    }

    idx_end = idx_now - fp.res; //Como índice apunta a donde debe ir el '.'
 800afaa:	7b3b      	ldrb	r3, [r7, #12]
 800afac:	461a      	mov	r2, r3
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	1a9b      	subs	r3, r3, r2
 800afb2:	613b      	str	r3, [r7, #16]

    /*
     * Desplazo posiciones en el arreglo hasta llegar a la posición donde debe
     * ir ubicado el '.'
     */
    while (idx_now != idx_end)
 800afb4:	e00b      	b.n	800afce <fm_lcd_fp_add_dot+0x5a>
    {
        p_str[idx_now + 1] = p_str[idx_now];
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	687a      	ldr	r2, [r7, #4]
 800afba:	441a      	add	r2, r3
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	3301      	adds	r3, #1
 800afc0:	6879      	ldr	r1, [r7, #4]
 800afc2:	440b      	add	r3, r1
 800afc4:	7812      	ldrb	r2, [r2, #0]
 800afc6:	701a      	strb	r2, [r3, #0]
        idx_now--;
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	3b01      	subs	r3, #1
 800afcc:	617b      	str	r3, [r7, #20]
    while (idx_now != idx_end)
 800afce:	697a      	ldr	r2, [r7, #20]
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d1ef      	bne.n	800afb6 <fm_lcd_fp_add_dot+0x42>
    }
    p_str[idx_now + 1] = p_str[idx_now];
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	687a      	ldr	r2, [r7, #4]
 800afda:	441a      	add	r2, r3
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	3301      	adds	r3, #1
 800afe0:	6879      	ldr	r1, [r7, #4]
 800afe2:	440b      	add	r3, r1
 800afe4:	7812      	ldrb	r2, [r2, #0]
 800afe6:	701a      	strb	r2, [r3, #0]
    p_str[idx_now] = '.';
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	687a      	ldr	r2, [r7, #4]
 800afec:	4413      	add	r3, r2
 800afee:	222e      	movs	r2, #46	; 0x2e
 800aff0:	701a      	strb	r2, [r3, #0]

    return (0);
 800aff2:	2300      	movs	r3, #0
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	371c      	adds	r7, #28
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd90      	pop	{r4, r7, pc}

0800affc <fm_lcd_fp_to_str>:
 * @param str_size tamaño del string.
 * @retval int.
 */
int fm_lcd_fp_to_str(fmc_fp_t fp, char leading_char, int str_width, char *p_str,
int str_size)
{
 800affc:	b490      	push	{r4, r7}
 800affe:	b088      	sub	sp, #32
 800b000:	af00      	add	r7, sp, #0
 800b002:	f107 0408 	add.w	r4, r7, #8
 800b006:	e884 0003 	stmia.w	r4, {r0, r1}
 800b00a:	603b      	str	r3, [r7, #0]
 800b00c:	4613      	mov	r3, r2
 800b00e:	71fb      	strb	r3, [r7, #7]
    int idx_1 = 0;
 800b010:	2300      	movs	r3, #0
 800b012:	61fb      	str	r3, [r7, #28]
    /*
     * Este es el unico chequeo de contorno. Verifica que el tamaño del string
     * no sea menor a PCF8553_DATA_SIZE, calculado como suficiente para operar
     * con las líneas del lcd.
     */
    if (str_size < PCF8553_DATA_SIZE)
 800b014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b016:	2b13      	cmp	r3, #19
 800b018:	dc02      	bgt.n	800b020 <fm_lcd_fp_to_str+0x24>
    {
        return (-1);
 800b01a:	f04f 33ff 	mov.w	r3, #4294967295
 800b01e:	e086      	b.n	800b12e <fm_lcd_fp_to_str+0x132>
    }

    /*
     * Esta linea es necesaria para representa bien a num = 0
     */
    p_str[idx_1] = fp.num % 10 + '0';
 800b020:	68b9      	ldr	r1, [r7, #8]
 800b022:	4b45      	ldr	r3, [pc, #276]	; (800b138 <fm_lcd_fp_to_str+0x13c>)
 800b024:	fba3 2301 	umull	r2, r3, r3, r1
 800b028:	08da      	lsrs	r2, r3, #3
 800b02a:	4613      	mov	r3, r2
 800b02c:	009b      	lsls	r3, r3, #2
 800b02e:	4413      	add	r3, r2
 800b030:	005b      	lsls	r3, r3, #1
 800b032:	1aca      	subs	r2, r1, r3
 800b034:	b2d2      	uxtb	r2, r2
 800b036:	69fb      	ldr	r3, [r7, #28]
 800b038:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b03a:	440b      	add	r3, r1
 800b03c:	3230      	adds	r2, #48	; 0x30
 800b03e:	b2d2      	uxtb	r2, r2
 800b040:	701a      	strb	r2, [r3, #0]

    uint32_t num_aux = fp.num;
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	617b      	str	r3, [r7, #20]

    /*
     * Almaceno el número de atrás para adelante hasta que llegar al primer
     * dígito inclusive
     */
    while (fp.num / 10)
 800b046:	e019      	b.n	800b07c <fm_lcd_fp_to_str+0x80>
    {
        idx_1++;
 800b048:	69fb      	ldr	r3, [r7, #28]
 800b04a:	3301      	adds	r3, #1
 800b04c:	61fb      	str	r3, [r7, #28]
        fp.num /= 10;
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	4a39      	ldr	r2, [pc, #228]	; (800b138 <fm_lcd_fp_to_str+0x13c>)
 800b052:	fba2 2303 	umull	r2, r3, r2, r3
 800b056:	08db      	lsrs	r3, r3, #3
 800b058:	60bb      	str	r3, [r7, #8]
        p_str[idx_1] = fp.num % 10 + '0';
 800b05a:	68b9      	ldr	r1, [r7, #8]
 800b05c:	4b36      	ldr	r3, [pc, #216]	; (800b138 <fm_lcd_fp_to_str+0x13c>)
 800b05e:	fba3 2301 	umull	r2, r3, r3, r1
 800b062:	08da      	lsrs	r2, r3, #3
 800b064:	4613      	mov	r3, r2
 800b066:	009b      	lsls	r3, r3, #2
 800b068:	4413      	add	r3, r2
 800b06a:	005b      	lsls	r3, r3, #1
 800b06c:	1aca      	subs	r2, r1, r3
 800b06e:	b2d2      	uxtb	r2, r2
 800b070:	69fb      	ldr	r3, [r7, #28]
 800b072:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b074:	440b      	add	r3, r1
 800b076:	3230      	adds	r2, #48	; 0x30
 800b078:	b2d2      	uxtb	r2, r2
 800b07a:	701a      	strb	r2, [r3, #0]
    while (fp.num / 10)
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	2b09      	cmp	r3, #9
 800b080:	d8e2      	bhi.n	800b048 <fm_lcd_fp_to_str+0x4c>

    /*
     * Si se midió 0 pulsos, se rellena con 0 hasta pasar el punto y asi se
     * mantiene la resolución deseada.
     */
    if (num_aux == 0)
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d119      	bne.n	800b0bc <fm_lcd_fp_to_str+0xc0>
    {
        while (idx_1 < fp.res)
 800b088:	e013      	b.n	800b0b2 <fm_lcd_fp_to_str+0xb6>
        {
            idx_1++;
 800b08a:	69fb      	ldr	r3, [r7, #28]
 800b08c:	3301      	adds	r3, #1
 800b08e:	61fb      	str	r3, [r7, #28]
            p_str[idx_1] = fp.num % 10 + '0';
 800b090:	68b9      	ldr	r1, [r7, #8]
 800b092:	4b29      	ldr	r3, [pc, #164]	; (800b138 <fm_lcd_fp_to_str+0x13c>)
 800b094:	fba3 2301 	umull	r2, r3, r3, r1
 800b098:	08da      	lsrs	r2, r3, #3
 800b09a:	4613      	mov	r3, r2
 800b09c:	009b      	lsls	r3, r3, #2
 800b09e:	4413      	add	r3, r2
 800b0a0:	005b      	lsls	r3, r3, #1
 800b0a2:	1aca      	subs	r2, r1, r3
 800b0a4:	b2d2      	uxtb	r2, r2
 800b0a6:	69fb      	ldr	r3, [r7, #28]
 800b0a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b0aa:	440b      	add	r3, r1
 800b0ac:	3230      	adds	r2, #48	; 0x30
 800b0ae:	b2d2      	uxtb	r2, r2
 800b0b0:	701a      	strb	r2, [r3, #0]
        while (idx_1 < fp.res)
 800b0b2:	7b3b      	ldrb	r3, [r7, #12]
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	69fb      	ldr	r3, [r7, #28]
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	dbe6      	blt.n	800b08a <fm_lcd_fp_to_str+0x8e>

    /*
     * Si el caracter a completar no es 0, se lo debe agregar al final del
     * arreglo hasta completar el largo de la linea (7 u 8 caracteres + \0).
     */
    if (leading_char)
 800b0bc:	79fb      	ldrb	r3, [r7, #7]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d00d      	beq.n	800b0de <fm_lcd_fp_to_str+0xe2>
    {
        while (idx_1 < str_width - 1)
 800b0c2:	e007      	b.n	800b0d4 <fm_lcd_fp_to_str+0xd8>
        {
            idx_1++;
 800b0c4:	69fb      	ldr	r3, [r7, #28]
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	61fb      	str	r3, [r7, #28]
            p_str[idx_1] = leading_char;
 800b0ca:	69fb      	ldr	r3, [r7, #28]
 800b0cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0ce:	4413      	add	r3, r2
 800b0d0:	79fa      	ldrb	r2, [r7, #7]
 800b0d2:	701a      	strb	r2, [r3, #0]
        while (idx_1 < str_width - 1)
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	3b01      	subs	r3, #1
 800b0d8:	69fa      	ldr	r2, [r7, #28]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	dbf2      	blt.n	800b0c4 <fm_lcd_fp_to_str+0xc8>
        }
    }
    p_str[idx_1] = '\0';
 800b0de:	69fb      	ldr	r3, [r7, #28]
 800b0e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0e2:	4413      	add	r3, r2
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	701a      	strb	r2, [r3, #0]
    idx_1--;
 800b0e8:	69fb      	ldr	r3, [r7, #28]
 800b0ea:	3b01      	subs	r3, #1
 800b0ec:	61fb      	str	r3, [r7, #28]

    /*
     *Esta sección da vuelta el arreglo ya que se completó al revés.
     */
    int idx_2 = 0;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	61bb      	str	r3, [r7, #24]
    char ch_temp;

    while (idx_1 > idx_2)
 800b0f2:	e017      	b.n	800b124 <fm_lcd_fp_to_str+0x128>
    {
        ch_temp = p_str[idx_1];
 800b0f4:	69fb      	ldr	r3, [r7, #28]
 800b0f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0f8:	4413      	add	r3, r2
 800b0fa:	781b      	ldrb	r3, [r3, #0]
 800b0fc:	74fb      	strb	r3, [r7, #19]
        p_str[idx_1] = p_str[idx_2];
 800b0fe:	69bb      	ldr	r3, [r7, #24]
 800b100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b102:	441a      	add	r2, r3
 800b104:	69fb      	ldr	r3, [r7, #28]
 800b106:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b108:	440b      	add	r3, r1
 800b10a:	7812      	ldrb	r2, [r2, #0]
 800b10c:	701a      	strb	r2, [r3, #0]
        p_str[idx_2] = ch_temp;
 800b10e:	69bb      	ldr	r3, [r7, #24]
 800b110:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b112:	4413      	add	r3, r2
 800b114:	7cfa      	ldrb	r2, [r7, #19]
 800b116:	701a      	strb	r2, [r3, #0]
        idx_1--;
 800b118:	69fb      	ldr	r3, [r7, #28]
 800b11a:	3b01      	subs	r3, #1
 800b11c:	61fb      	str	r3, [r7, #28]
        idx_2++;
 800b11e:	69bb      	ldr	r3, [r7, #24]
 800b120:	3301      	adds	r3, #1
 800b122:	61bb      	str	r3, [r7, #24]
    while (idx_1 > idx_2)
 800b124:	69fa      	ldr	r2, [r7, #28]
 800b126:	69bb      	ldr	r3, [r7, #24]
 800b128:	429a      	cmp	r2, r3
 800b12a:	dce3      	bgt.n	800b0f4 <fm_lcd_fp_to_str+0xf8>
    }

    return (0);
 800b12c:	2300      	movs	r3, #0
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3720      	adds	r7, #32
 800b132:	46bd      	mov	sp, r7
 800b134:	bc90      	pop	{r4, r7}
 800b136:	4770      	bx	lr
 800b138:	cccccccd 	.word	0xcccccccd

0800b13c <fm_lcd_init>:
 * @brief Es la primera instrucción a llamar para usar el lcd.
 * @param  None
 * @retval None
 */
void fm_lcd_init()
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	af00      	add	r7, sp, #0
    lcd_clear_all();
 800b140:	f000 faf6 	bl	800b730 <lcd_clear_all>
    lcd_init();
 800b144:	f001 f942 	bl	800c3cc <lcd_init>
}
 800b148:	bf00      	nop
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <fm_lcd_k_factor>:
 * configuración del factor de calibración K.
 * @param  None
 * @retval None
 */
void fm_lcd_k_factor(fm_event_t event_id, sel_digit_t digit_modify)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b08e      	sub	sp, #56	; 0x38
 800b150:	af02      	add	r7, sp, #8
 800b152:	4603      	mov	r3, r0
 800b154:	460a      	mov	r2, r1
 800b156:	71fb      	strb	r3, [r7, #7]
 800b158:	4613      	mov	r3, r2
 800b15a:	71bb      	strb	r3, [r7, #6]
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fm_factory_get_k_factor(K_FACTOR), '0',
 800b15c:	f107 0320 	add.w	r3, r7, #32
 800b160:	2100      	movs	r1, #0
 800b162:	4618      	mov	r0, r3
 800b164:	f7ff f822 	bl	800a1ac <fm_factory_get_k_factor>
 800b168:	2314      	movs	r3, #20
 800b16a:	9301      	str	r3, [sp, #4]
 800b16c:	f107 030c 	add.w	r3, r7, #12
 800b170:	9300      	str	r3, [sp, #0]
 800b172:	2309      	movs	r3, #9
 800b174:	2230      	movs	r2, #48	; 0x30
 800b176:	f107 0120 	add.w	r1, r7, #32
 800b17a:	c903      	ldmia	r1, {r0, r1}
 800b17c:	f7ff ff3e 	bl	800affc <fm_lcd_fp_to_str>
    LINE_0_DIGITS, lcd_msg, sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_k_factor(K_FACTOR), lcd_msg,
 800b180:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b184:	2100      	movs	r1, #0
 800b186:	4618      	mov	r0, r3
 800b188:	f7ff f810 	bl	800a1ac <fm_factory_get_k_factor>
 800b18c:	f107 020c 	add.w	r2, r7, #12
 800b190:	2314      	movs	r3, #20
 800b192:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b196:	c903      	ldmia	r1, {r0, r1}
 800b198:	f7ff feec 	bl	800af74 <fm_lcd_fp_add_dot>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800b19c:	f107 030c 	add.w	r3, r7, #12
 800b1a0:	2100      	movs	r1, #0
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f000 f8cc 	bl	800b340 <fm_lcd_puts>
//    if(event_id != EVENT_LCD_REFRESH)
//    {
//        blink = 1;
//    }

    if(blink == 1)
 800b1a8:	4b0d      	ldr	r3, [pc, #52]	; (800b1e0 <fm_lcd_k_factor+0x94>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	2b01      	cmp	r3, #1
 800b1ae:	d10b      	bne.n	800b1c8 <fm_lcd_k_factor+0x7c>
    {
        lcd_clear_digit(DIG_7 - digit_modify, HIGH_ROW);
 800b1b0:	79bb      	ldrb	r3, [r7, #6]
 800b1b2:	f1c3 0307 	rsb	r3, r3, #7
 800b1b6:	b2db      	uxtb	r3, r3
 800b1b8:	2100      	movs	r1, #0
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f000 fae0 	bl	800b780 <lcd_clear_digit>
        blink = 0;
 800b1c0:	4b07      	ldr	r3, [pc, #28]	; (800b1e0 <fm_lcd_k_factor+0x94>)
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	601a      	str	r2, [r3, #0]
 800b1c6:	e002      	b.n	800b1ce <fm_lcd_k_factor+0x82>
    }
    else
    {
        blink = 1;
 800b1c8:	4b05      	ldr	r3, [pc, #20]	; (800b1e0 <fm_lcd_k_factor+0x94>)
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	601a      	str	r2, [r3, #0]
    }

    lcd_set_symbol(K, 0x00);
 800b1ce:	2100      	movs	r1, #0
 800b1d0:	200b      	movs	r0, #11
 800b1d2:	f001 fb9d 	bl	800c910 <lcd_set_symbol>
}
 800b1d6:	bf00      	nop
 800b1d8:	3730      	adds	r7, #48	; 0x30
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}
 800b1de:	bf00      	nop
 800b1e0:	2000011c 	.word	0x2000011c

0800b1e4 <fm_lcd_k_lin>:

void fm_lcd_k_lin(sel_k k_sel, fm_event_t event_id, sel_digit_k_lin_t digit_lin_modify)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b090      	sub	sp, #64	; 0x40
 800b1e8:	af02      	add	r7, sp, #8
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	71fb      	strb	r3, [r7, #7]
 800b1ee:	460b      	mov	r3, r1
 800b1f0:	71bb      	strb	r3, [r7, #6]
 800b1f2:	4613      	mov	r3, r2
 800b1f4:	717b      	strb	r3, [r7, #5]
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fm_factory_get_k_factor(k_sel), '0', LINE_0_DIGITS,
 800b1f6:	f107 0320 	add.w	r3, r7, #32
 800b1fa:	79fa      	ldrb	r2, [r7, #7]
 800b1fc:	4611      	mov	r1, r2
 800b1fe:	4618      	mov	r0, r3
 800b200:	f7fe ffd4 	bl	800a1ac <fm_factory_get_k_factor>
 800b204:	2314      	movs	r3, #20
 800b206:	9301      	str	r3, [sp, #4]
 800b208:	f107 030c 	add.w	r3, r7, #12
 800b20c:	9300      	str	r3, [sp, #0]
 800b20e:	2309      	movs	r3, #9
 800b210:	2230      	movs	r2, #48	; 0x30
 800b212:	f107 0120 	add.w	r1, r7, #32
 800b216:	c903      	ldmia	r1, {r0, r1}
 800b218:	f7ff fef0 	bl	800affc <fm_lcd_fp_to_str>
    lcd_msg, sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_k_factor(k_sel), lcd_msg,
 800b21c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b220:	79fa      	ldrb	r2, [r7, #7]
 800b222:	4611      	mov	r1, r2
 800b224:	4618      	mov	r0, r3
 800b226:	f7fe ffc1 	bl	800a1ac <fm_factory_get_k_factor>
 800b22a:	f107 020c 	add.w	r2, r7, #12
 800b22e:	2314      	movs	r3, #20
 800b230:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b234:	c903      	ldmia	r1, {r0, r1}
 800b236:	f7ff fe9d 	bl	800af74 <fm_lcd_fp_add_dot>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800b23a:	f107 030c 	add.w	r3, r7, #12
 800b23e:	2100      	movs	r1, #0
 800b240:	4618      	mov	r0, r3
 800b242:	f000 f87d 	bl	800b340 <fm_lcd_puts>

    fm_lcd_fp_to_str(fm_factory_get_frec_lin(k_sel), '0', LINE_1_DIGITS,
 800b246:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b24a:	79fa      	ldrb	r2, [r7, #7]
 800b24c:	4611      	mov	r1, r2
 800b24e:	4618      	mov	r0, r3
 800b250:	f7ff f808 	bl	800a264 <fm_factory_get_frec_lin>
 800b254:	2314      	movs	r3, #20
 800b256:	9301      	str	r3, [sp, #4]
 800b258:	f107 030c 	add.w	r3, r7, #12
 800b25c:	9300      	str	r3, [sp, #0]
 800b25e:	2308      	movs	r3, #8
 800b260:	2230      	movs	r2, #48	; 0x30
 800b262:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800b266:	c903      	ldmia	r1, {r0, r1}
 800b268:	f7ff fec8 	bl	800affc <fm_lcd_fp_to_str>
    lcd_msg, sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800b26c:	f107 030c 	add.w	r3, r7, #12
 800b270:	2101      	movs	r1, #1
 800b272:	4618      	mov	r0, r3
 800b274:	f000 f864 	bl	800b340 <fm_lcd_puts>
    lcd_clear_digit(DIGIT_0, LOW_ROW);
 800b278:	2101      	movs	r1, #1
 800b27a:	2000      	movs	r0, #0
 800b27c:	f000 fa80 	bl	800b780 <lcd_clear_digit>
    lcd_clear_digit(DIGIT_1, LOW_ROW);
 800b280:	2101      	movs	r1, #1
 800b282:	2001      	movs	r0, #1
 800b284:	f000 fa7c 	bl	800b780 <lcd_clear_digit>
    lcd_clear_digit(DIGIT_2, LOW_ROW);
 800b288:	2101      	movs	r1, #1
 800b28a:	2002      	movs	r0, #2
 800b28c:	f000 fa78 	bl	800b780 <lcd_clear_digit>
//    if(event_id != EVENT_LCD_REFRESH)
//    {
//        blink = 1;
//    }

    if(digit_lin_modify <= DIG_LIN_7)
 800b290:	797b      	ldrb	r3, [r7, #5]
 800b292:	2b07      	cmp	r3, #7
 800b294:	d813      	bhi.n	800b2be <fm_lcd_k_lin+0xda>
    {
        if(blink == 1)
 800b296:	4b29      	ldr	r3, [pc, #164]	; (800b33c <fm_lcd_k_lin+0x158>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	2b01      	cmp	r3, #1
 800b29c:	d10b      	bne.n	800b2b6 <fm_lcd_k_lin+0xd2>
        {
            lcd_clear_digit(DIG_LIN_7 - digit_lin_modify, HIGH_ROW);
 800b29e:	797b      	ldrb	r3, [r7, #5]
 800b2a0:	f1c3 0307 	rsb	r3, r3, #7
 800b2a4:	b2db      	uxtb	r3, r3
 800b2a6:	2100      	movs	r1, #0
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f000 fa69 	bl	800b780 <lcd_clear_digit>
            blink = 0;
 800b2ae:	4b23      	ldr	r3, [pc, #140]	; (800b33c <fm_lcd_k_lin+0x158>)
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	601a      	str	r2, [r3, #0]
 800b2b4:	e016      	b.n	800b2e4 <fm_lcd_k_lin+0x100>
        }
        else
        {
            blink = 1;
 800b2b6:	4b21      	ldr	r3, [pc, #132]	; (800b33c <fm_lcd_k_lin+0x158>)
 800b2b8:	2201      	movs	r2, #1
 800b2ba:	601a      	str	r2, [r3, #0]
 800b2bc:	e012      	b.n	800b2e4 <fm_lcd_k_lin+0x100>
        }
    }
    else
    {
        if(blink == 1)
 800b2be:	4b1f      	ldr	r3, [pc, #124]	; (800b33c <fm_lcd_k_lin+0x158>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	2b01      	cmp	r3, #1
 800b2c4:	d10b      	bne.n	800b2de <fm_lcd_k_lin+0xfa>
        {
            lcd_clear_digit(DIG_LIN_6 - digit_lin_modify + DIG_LIN_8, LOW_ROW);
 800b2c6:	797b      	ldrb	r3, [r7, #5]
 800b2c8:	f1c3 030e 	rsb	r3, r3, #14
 800b2cc:	b2db      	uxtb	r3, r3
 800b2ce:	2101      	movs	r1, #1
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f000 fa55 	bl	800b780 <lcd_clear_digit>
            blink = 0;
 800b2d6:	4b19      	ldr	r3, [pc, #100]	; (800b33c <fm_lcd_k_lin+0x158>)
 800b2d8:	2200      	movs	r2, #0
 800b2da:	601a      	str	r2, [r3, #0]
 800b2dc:	e002      	b.n	800b2e4 <fm_lcd_k_lin+0x100>
        }
        else
        {
            blink = 1;
 800b2de:	4b17      	ldr	r3, [pc, #92]	; (800b33c <fm_lcd_k_lin+0x158>)
 800b2e0:	2201      	movs	r2, #1
 800b2e2:	601a      	str	r2, [r3, #0]
        }
    }

    lcd_set_symbol(F, 0x00);
 800b2e4:	2100      	movs	r1, #0
 800b2e6:	2010      	movs	r0, #16
 800b2e8:	f001 fb12 	bl	800c910 <lcd_set_symbol>
    if(k_sel == K_LIN_1)
 800b2ec:	79fb      	ldrb	r3, [r7, #7]
 800b2ee:	2b01      	cmp	r3, #1
 800b2f0:	d103      	bne.n	800b2fa <fm_lcd_k_lin+0x116>
    {
        lcd_set_symbol(LIN_1, 0x00);
 800b2f2:	2100      	movs	r1, #0
 800b2f4:	2011      	movs	r0, #17
 800b2f6:	f001 fb0b 	bl	800c910 <lcd_set_symbol>
    }
    if(k_sel == K_LIN_2)
 800b2fa:	79fb      	ldrb	r3, [r7, #7]
 800b2fc:	2b02      	cmp	r3, #2
 800b2fe:	d103      	bne.n	800b308 <fm_lcd_k_lin+0x124>
    {
        lcd_set_symbol(LIN_2, 0x00);
 800b300:	2100      	movs	r1, #0
 800b302:	2012      	movs	r0, #18
 800b304:	f001 fb04 	bl	800c910 <lcd_set_symbol>
    }
    if(k_sel == K_LIN_3)
 800b308:	79fb      	ldrb	r3, [r7, #7]
 800b30a:	2b03      	cmp	r3, #3
 800b30c:	d103      	bne.n	800b316 <fm_lcd_k_lin+0x132>
    {
        lcd_set_symbol(LIN_3, 0x00);
 800b30e:	2100      	movs	r1, #0
 800b310:	2013      	movs	r0, #19
 800b312:	f001 fafd 	bl	800c910 <lcd_set_symbol>
    }
    if(k_sel == K_LIN_4)
 800b316:	79fb      	ldrb	r3, [r7, #7]
 800b318:	2b04      	cmp	r3, #4
 800b31a:	d103      	bne.n	800b324 <fm_lcd_k_lin+0x140>
    {
        lcd_set_symbol(LIN_4, 0x00);
 800b31c:	2100      	movs	r1, #0
 800b31e:	2014      	movs	r0, #20
 800b320:	f001 faf6 	bl	800c910 <lcd_set_symbol>
    }
    if(k_sel == K_LIN_5)
 800b324:	79fb      	ldrb	r3, [r7, #7]
 800b326:	2b05      	cmp	r3, #5
 800b328:	d103      	bne.n	800b332 <fm_lcd_k_lin+0x14e>
    {
        lcd_set_symbol(LIN_5, 0x00);
 800b32a:	2100      	movs	r1, #0
 800b32c:	2015      	movs	r0, #21
 800b32e:	f001 faef 	bl	800c910 <lcd_set_symbol>
    }
}
 800b332:	bf00      	nop
 800b334:	3738      	adds	r7, #56	; 0x38
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
 800b33a:	bf00      	nop
 800b33c:	2000011c 	.word	0x2000011c

0800b340 <fm_lcd_puts>:
 * @param Arreglo a imprimir.
 * @param Fila donde se coloca el arreglo a imprimir.
 * @retval None
 */
void fm_lcd_puts(const char *c, const rows_t row)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b084      	sub	sp, #16
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	460b      	mov	r3, r1
 800b34a:	70fb      	strb	r3, [r7, #3]
    uint8_t col = 0;
 800b34c:	2300      	movs	r3, #0
 800b34e:	73fb      	strb	r3, [r7, #15]
    uint8_t col_limit;

    if (row == 0)
 800b350:	78fb      	ldrb	r3, [r7, #3]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d102      	bne.n	800b35c <fm_lcd_puts+0x1c>
    {
        col_limit = LINE_0_DIGITS - 1;
 800b356:	2308      	movs	r3, #8
 800b358:	73bb      	strb	r3, [r7, #14]
 800b35a:	e026      	b.n	800b3aa <fm_lcd_puts+0x6a>
    }
    else
    {
        col_limit = LINE_1_DIGITS - 1;
 800b35c:	2307      	movs	r3, #7
 800b35e:	73bb      	strb	r3, [r7, #14]
    }

    while ((*c) && (col < col_limit))
 800b360:	e023      	b.n	800b3aa <fm_lcd_puts+0x6a>
    {
        if (((*c >= '0') && (*c <= '9')) || (*c == ' ') || (*c == '.'))
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	781b      	ldrb	r3, [r3, #0]
 800b366:	2b2f      	cmp	r3, #47	; 0x2f
 800b368:	d903      	bls.n	800b372 <fm_lcd_puts+0x32>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	2b39      	cmp	r3, #57	; 0x39
 800b370:	d907      	bls.n	800b382 <fm_lcd_puts+0x42>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	781b      	ldrb	r3, [r3, #0]
 800b376:	2b20      	cmp	r3, #32
 800b378:	d003      	beq.n	800b382 <fm_lcd_puts+0x42>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	781b      	ldrb	r3, [r3, #0]
 800b37e:	2b2e      	cmp	r3, #46	; 0x2e
 800b380:	d106      	bne.n	800b390 <fm_lcd_puts+0x50>
        {
            lcd_put_char(*c, col, row);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	781b      	ldrb	r3, [r3, #0]
 800b386:	78fa      	ldrb	r2, [r7, #3]
 800b388:	7bf9      	ldrb	r1, [r7, #15]
 800b38a:	4618      	mov	r0, r3
 800b38c:	f001 f824 	bl	800c3d8 <lcd_put_char>
        }
        col++;
 800b390:	7bfb      	ldrb	r3, [r7, #15]
 800b392:	3301      	adds	r3, #1
 800b394:	73fb      	strb	r3, [r7, #15]
        c++;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	3301      	adds	r3, #1
 800b39a:	607b      	str	r3, [r7, #4]
        if (*c == '.')
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	2b2e      	cmp	r3, #46	; 0x2e
 800b3a2:	d102      	bne.n	800b3aa <fm_lcd_puts+0x6a>
        {
            col--;
 800b3a4:	7bfb      	ldrb	r3, [r7, #15]
 800b3a6:	3b01      	subs	r3, #1
 800b3a8:	73fb      	strb	r3, [r7, #15]
    while ((*c) && (col < col_limit))
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	781b      	ldrb	r3, [r3, #0]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d003      	beq.n	800b3ba <fm_lcd_puts+0x7a>
 800b3b2:	7bfa      	ldrb	r2, [r7, #15]
 800b3b4:	7bbb      	ldrb	r3, [r7, #14]
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d3d3      	bcc.n	800b362 <fm_lcd_puts+0x22>
        }
    }
}
 800b3ba:	bf00      	nop
 800b3bc:	3710      	adds	r7, #16
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}

0800b3c2 <fm_lcd_refresh>:
 * la librería de mas bajo nivel 'lcd.h'.
 * @param  None
 * @retval None
 */
void fm_lcd_refresh()
{
 800b3c2:	b580      	push	{r7, lr}
 800b3c4:	af00      	add	r7, sp, #0
    lcd_refresh();
 800b3c6:	f001 f9f1 	bl	800c7ac <lcd_refresh>
}
 800b3ca:	bf00      	nop
 800b3cc:	bd80      	pop	{r7, pc}

0800b3ce <fm_lcd_ttl_rate>:
 * personalizada según las opciones que se elijan.
 * @param None
 * @retval None
 */
void fm_lcd_ttl_rate()
{
 800b3ce:	b580      	push	{r7, lr}
 800b3d0:	b0b8      	sub	sp, #224	; 0xe0
 800b3d2:	af02      	add	r7, sp, #8
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fmc_get_ttl().volume, ' ', LINE_0_DIGITS, lcd_msg,
 800b3d4:	f107 0318 	add.w	r3, r7, #24
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f004 fa51 	bl	800f880 <fmc_get_ttl>
 800b3de:	2314      	movs	r3, #20
 800b3e0:	9301      	str	r3, [sp, #4]
 800b3e2:	1d3b      	adds	r3, r7, #4
 800b3e4:	9300      	str	r3, [sp, #0]
 800b3e6:	2309      	movs	r3, #9
 800b3e8:	2220      	movs	r2, #32
 800b3ea:	f107 0120 	add.w	r1, r7, #32
 800b3ee:	c903      	ldmia	r1, {r0, r1}
 800b3f0:	f7ff fe04 	bl	800affc <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_ttl().volume, lcd_msg, sizeof(lcd_msg));
 800b3f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f004 fa41 	bl	800f880 <fmc_get_ttl>
 800b3fe:	1d3a      	adds	r2, r7, #4
 800b400:	2314      	movs	r3, #20
 800b402:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800b406:	c903      	ldmia	r1, {r0, r1}
 800b408:	f7ff fdb4 	bl	800af74 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800b40c:	1d3b      	adds	r3, r7, #4
 800b40e:	2100      	movs	r1, #0
 800b410:	4618      	mov	r0, r3
 800b412:	f7ff ff95 	bl	800b340 <fm_lcd_puts>

    fm_lcd_fp_to_str(fmc_get_rate().volume, ' ', LINE_1_DIGITS, lcd_msg,
 800b416:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b41a:	4618      	mov	r0, r3
 800b41c:	f004 f9f0 	bl	800f800 <fmc_get_rate>
 800b420:	2314      	movs	r3, #20
 800b422:	9301      	str	r3, [sp, #4]
 800b424:	1d3b      	adds	r3, r7, #4
 800b426:	9300      	str	r3, [sp, #0]
 800b428:	2308      	movs	r3, #8
 800b42a:	2220      	movs	r2, #32
 800b42c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800b430:	c903      	ldmia	r1, {r0, r1}
 800b432:	f7ff fde3 	bl	800affc <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_rate().volume, lcd_msg, sizeof(lcd_msg));
 800b436:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b43a:	4618      	mov	r0, r3
 800b43c:	f004 f9e0 	bl	800f800 <fmc_get_rate>
 800b440:	1d3a      	adds	r2, r7, #4
 800b442:	2314      	movs	r3, #20
 800b444:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800b448:	c903      	ldmia	r1, {r0, r1}
 800b44a:	f7ff fd93 	bl	800af74 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800b44e:	1d3b      	adds	r3, r7, #4
 800b450:	2101      	movs	r1, #1
 800b452:	4618      	mov	r0, r3
 800b454:	f7ff ff74 	bl	800b340 <fm_lcd_puts>

    lcd_set_symbol(TTL, 0x0);
 800b458:	2100      	movs	r1, #0
 800b45a:	2005      	movs	r0, #5
 800b45c:	f001 fa58 	bl	800c910 <lcd_set_symbol>
    lcd_set_symbol(RATE, 0x0);
 800b460:	2100      	movs	r1, #0
 800b462:	2002      	movs	r0, #2
 800b464:	f001 fa54 	bl	800c910 <lcd_set_symbol>

    lcd_set_vol_unit(fmc_get_ttl().unit_volume, 0x0);
 800b468:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800b46c:	4618      	mov	r0, r3
 800b46e:	f004 fa07 	bl	800f880 <fmc_get_ttl>
 800b472:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 800b476:	2100      	movs	r1, #0
 800b478:	4618      	mov	r0, r3
 800b47a:	f001 fdcd 	bl	800d018 <lcd_set_vol_unit>
    lcd_set_symbol(BACKSLASH, 0x0);
 800b47e:	2100      	movs	r1, #0
 800b480:	2007      	movs	r0, #7
 800b482:	f001 fa45 	bl	800c910 <lcd_set_symbol>
    lcd_set_time_unit(fmc_get_ttl().unit_time, 0x0);
 800b486:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800b48a:	4618      	mov	r0, r3
 800b48c:	f004 f9f8 	bl	800f880 <fmc_get_ttl>
 800b490:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 800b494:	2100      	movs	r1, #0
 800b496:	4618      	mov	r0, r3
 800b498:	f001 fd7c 	bl	800cf94 <lcd_set_time_unit>
}
 800b49c:	bf00      	nop
 800b49e:	37d8      	adds	r7, #216	; 0xd8
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <fm_lcd_units_tim>:
 * configuración de unidades tiempo y la resolución del factor RATE.
 * @param  None
 * @retval None
 */
void fm_lcd_units_tim(fm_event_t event_id)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b0a6      	sub	sp, #152	; 0x98
 800b4a8:	af02      	add	r7, sp, #8
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	71fb      	strb	r3, [r7, #7]
    char lcd_msg[PCF8553_DATA_SIZE];
    point_t resolution_modify;

    fm_lcd_fp_to_str(fm_factory_get_units_tim(), '0', LINE_1_DIGITS, lcd_msg,
 800b4ae:	f107 0320 	add.w	r3, r7, #32
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7fe fe56 	bl	800a164 <fm_factory_get_units_tim>
 800b4b8:	2314      	movs	r3, #20
 800b4ba:	9301      	str	r3, [sp, #4]
 800b4bc:	f107 030c 	add.w	r3, r7, #12
 800b4c0:	9300      	str	r3, [sp, #0]
 800b4c2:	2308      	movs	r3, #8
 800b4c4:	2230      	movs	r2, #48	; 0x30
 800b4c6:	f107 0120 	add.w	r1, r7, #32
 800b4ca:	c903      	ldmia	r1, {r0, r1}
 800b4cc:	f7ff fd96 	bl	800affc <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_units_tim(), lcd_msg, sizeof(lcd_msg));
 800b4d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f7fe fe45 	bl	800a164 <fm_factory_get_units_tim>
 800b4da:	f107 020c 	add.w	r2, r7, #12
 800b4de:	2314      	movs	r3, #20
 800b4e0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b4e4:	c903      	ldmia	r1, {r0, r1}
 800b4e6:	f7ff fd45 	bl	800af74 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800b4ea:	f107 030c 	add.w	r3, r7, #12
 800b4ee:	2101      	movs	r1, #1
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f7ff ff25 	bl	800b340 <fm_lcd_puts>

    if(blink == 1)
 800b4f6:	4b30      	ldr	r3, [pc, #192]	; (800b5b8 <fm_lcd_units_tim+0x114>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	2b01      	cmp	r3, #1
 800b4fc:	d146      	bne.n	800b58c <fm_lcd_units_tim+0xe8>
    {
        if(fm_factory_get_units_tim().res == 1)
 800b4fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b502:	4618      	mov	r0, r3
 800b504:	f7fe fe2e 	bl	800a164 <fm_factory_get_units_tim>
 800b508:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d109      	bne.n	800b524 <fm_lcd_units_tim+0x80>
        {
            resolution_modify = PNT_5;
 800b510:	2305      	movs	r3, #5
 800b512:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(LOW_ROW, resolution_modify);
 800b516:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b51a:	4619      	mov	r1, r3
 800b51c:	2001      	movs	r0, #1
 800b51e:	f000 fc6d 	bl	800bdfc <lcd_clear_point>
 800b522:	e024      	b.n	800b56e <fm_lcd_units_tim+0xca>
        }
        else if(fm_factory_get_units_tim().res == 2)
 800b524:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b528:	4618      	mov	r0, r3
 800b52a:	f7fe fe1b 	bl	800a164 <fm_factory_get_units_tim>
 800b52e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b532:	2b02      	cmp	r3, #2
 800b534:	d109      	bne.n	800b54a <fm_lcd_units_tim+0xa6>
        {
            resolution_modify = PNT_4;
 800b536:	2304      	movs	r3, #4
 800b538:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(LOW_ROW, resolution_modify);
 800b53c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b540:	4619      	mov	r1, r3
 800b542:	2001      	movs	r0, #1
 800b544:	f000 fc5a 	bl	800bdfc <lcd_clear_point>
 800b548:	e011      	b.n	800b56e <fm_lcd_units_tim+0xca>
        }
        else if(fm_factory_get_units_tim().res == 3)
 800b54a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b54e:	4618      	mov	r0, r3
 800b550:	f7fe fe08 	bl	800a164 <fm_factory_get_units_tim>
 800b554:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800b558:	2b03      	cmp	r3, #3
 800b55a:	d108      	bne.n	800b56e <fm_lcd_units_tim+0xca>
        {
            resolution_modify = PNT_3;
 800b55c:	2303      	movs	r3, #3
 800b55e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(LOW_ROW, resolution_modify);
 800b562:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b566:	4619      	mov	r1, r3
 800b568:	2001      	movs	r0, #1
 800b56a:	f000 fc47 	bl	800bdfc <lcd_clear_point>
        }

        lcd_clear_time_unit(fmc_get_rate().unit_time, 0x0);
 800b56e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b572:	4618      	mov	r0, r3
 800b574:	f004 f944 	bl	800f800 <fmc_get_rate>
 800b578:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800b57c:	2100      	movs	r1, #0
 800b57e:	4618      	mov	r0, r3
 800b580:	f000 fce8 	bl	800bf54 <lcd_clear_time_unit>

        blink = 0;
 800b584:	4b0c      	ldr	r3, [pc, #48]	; (800b5b8 <fm_lcd_units_tim+0x114>)
 800b586:	2200      	movs	r2, #0
 800b588:	601a      	str	r2, [r3, #0]
 800b58a:	e00d      	b.n	800b5a8 <fm_lcd_units_tim+0x104>
    }
    else
    {
        lcd_set_time_unit(fmc_get_rate().unit_time, 0x0);
 800b58c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b590:	4618      	mov	r0, r3
 800b592:	f004 f935 	bl	800f800 <fmc_get_rate>
 800b596:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800b59a:	2100      	movs	r1, #0
 800b59c:	4618      	mov	r0, r3
 800b59e:	f001 fcf9 	bl	800cf94 <lcd_set_time_unit>
        blink = 1;
 800b5a2:	4b05      	ldr	r3, [pc, #20]	; (800b5b8 <fm_lcd_units_tim+0x114>)
 800b5a4:	2201      	movs	r2, #1
 800b5a6:	601a      	str	r2, [r3, #0]
    }

    lcd_set_symbol(RATE, 0x00);
 800b5a8:	2100      	movs	r1, #0
 800b5aa:	2002      	movs	r0, #2
 800b5ac:	f001 f9b0 	bl	800c910 <lcd_set_symbol>
}
 800b5b0:	bf00      	nop
 800b5b2:	3790      	adds	r7, #144	; 0x90
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}
 800b5b8:	2000011c 	.word	0x2000011c

0800b5bc <fm_lcd_units_vol>:
 * TTL.
 * @param  None
 * @retval None
 */
void fm_lcd_units_vol(fm_event_t event_id)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b0a6      	sub	sp, #152	; 0x98
 800b5c0:	af02      	add	r7, sp, #8
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	71fb      	strb	r3, [r7, #7]
    char lcd_msg[PCF8553_DATA_SIZE];
    point_t resolution_modify;

    fm_lcd_fp_to_str(fm_factory_get_units_vol(), '0', LINE_0_DIGITS,
 800b5c6:	f107 0320 	add.w	r3, r7, #32
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f7fe fddc 	bl	800a188 <fm_factory_get_units_vol>
 800b5d0:	2314      	movs	r3, #20
 800b5d2:	9301      	str	r3, [sp, #4]
 800b5d4:	f107 030c 	add.w	r3, r7, #12
 800b5d8:	9300      	str	r3, [sp, #0]
 800b5da:	2309      	movs	r3, #9
 800b5dc:	2230      	movs	r2, #48	; 0x30
 800b5de:	f107 0120 	add.w	r1, r7, #32
 800b5e2:	c903      	ldmia	r1, {r0, r1}
 800b5e4:	f7ff fd0a 	bl	800affc <fm_lcd_fp_to_str>
    lcd_msg, sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_units_vol(), lcd_msg, sizeof(lcd_msg));
 800b5e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f7fe fdcb 	bl	800a188 <fm_factory_get_units_vol>
 800b5f2:	f107 020c 	add.w	r2, r7, #12
 800b5f6:	2314      	movs	r3, #20
 800b5f8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b5fc:	c903      	ldmia	r1, {r0, r1}
 800b5fe:	f7ff fcb9 	bl	800af74 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800b602:	f107 030c 	add.w	r3, r7, #12
 800b606:	2100      	movs	r1, #0
 800b608:	4618      	mov	r0, r3
 800b60a:	f7ff fe99 	bl	800b340 <fm_lcd_puts>
//    if(event_id != EVENT_LCD_REFRESH)
//    {
//        blink = 1;
//    }

    if(blink == 1)
 800b60e:	4b32      	ldr	r3, [pc, #200]	; (800b6d8 <fm_lcd_units_vol+0x11c>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	2b01      	cmp	r3, #1
 800b614:	d146      	bne.n	800b6a4 <fm_lcd_units_vol+0xe8>
    {
        if(fm_factory_get_units_vol().res == 1)
 800b616:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b61a:	4618      	mov	r0, r3
 800b61c:	f7fe fdb4 	bl	800a188 <fm_factory_get_units_vol>
 800b620:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b624:	2b01      	cmp	r3, #1
 800b626:	d109      	bne.n	800b63c <fm_lcd_units_vol+0x80>
        {
            resolution_modify = PNT_6;
 800b628:	2306      	movs	r3, #6
 800b62a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(HIGH_ROW, resolution_modify);
 800b62e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b632:	4619      	mov	r1, r3
 800b634:	2000      	movs	r0, #0
 800b636:	f000 fbe1 	bl	800bdfc <lcd_clear_point>
 800b63a:	e024      	b.n	800b686 <fm_lcd_units_vol+0xca>
        }
        else if(fm_factory_get_units_vol().res == 2)
 800b63c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b640:	4618      	mov	r0, r3
 800b642:	f7fe fda1 	bl	800a188 <fm_factory_get_units_vol>
 800b646:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b64a:	2b02      	cmp	r3, #2
 800b64c:	d109      	bne.n	800b662 <fm_lcd_units_vol+0xa6>
        {
            resolution_modify = PNT_5;
 800b64e:	2305      	movs	r3, #5
 800b650:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(HIGH_ROW, resolution_modify);
 800b654:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b658:	4619      	mov	r1, r3
 800b65a:	2000      	movs	r0, #0
 800b65c:	f000 fbce 	bl	800bdfc <lcd_clear_point>
 800b660:	e011      	b.n	800b686 <fm_lcd_units_vol+0xca>
        }
        else if(fm_factory_get_units_vol().res == 3)
 800b662:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b666:	4618      	mov	r0, r3
 800b668:	f7fe fd8e 	bl	800a188 <fm_factory_get_units_vol>
 800b66c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800b670:	2b03      	cmp	r3, #3
 800b672:	d108      	bne.n	800b686 <fm_lcd_units_vol+0xca>
        {
            resolution_modify = PNT_4;
 800b674:	2304      	movs	r3, #4
 800b676:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(HIGH_ROW, resolution_modify);
 800b67a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b67e:	4619      	mov	r1, r3
 800b680:	2000      	movs	r0, #0
 800b682:	f000 fbbb 	bl	800bdfc <lcd_clear_point>
        }

        lcd_clear_vol_unit(fmc_get_acm().unit_volume, 0x0);
 800b686:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b68a:	4618      	mov	r0, r3
 800b68c:	f004 f852 	bl	800f734 <fmc_get_acm>
 800b690:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800b694:	2100      	movs	r1, #0
 800b696:	4618      	mov	r0, r3
 800b698:	f000 fc9e 	bl	800bfd8 <lcd_clear_vol_unit>

        blink = 0;
 800b69c:	4b0e      	ldr	r3, [pc, #56]	; (800b6d8 <fm_lcd_units_vol+0x11c>)
 800b69e:	2200      	movs	r2, #0
 800b6a0:	601a      	str	r2, [r3, #0]
 800b6a2:	e00d      	b.n	800b6c0 <fm_lcd_units_vol+0x104>
    }
    else
    {
        lcd_set_vol_unit(fmc_get_acm().unit_volume, 0x0);
 800b6a4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f004 f843 	bl	800f734 <fmc_get_acm>
 800b6ae:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800b6b2:	2100      	movs	r1, #0
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f001 fcaf 	bl	800d018 <lcd_set_vol_unit>
        blink = 1;
 800b6ba:	4b07      	ldr	r3, [pc, #28]	; (800b6d8 <fm_lcd_units_vol+0x11c>)
 800b6bc:	2201      	movs	r2, #1
 800b6be:	601a      	str	r2, [r3, #0]
    }

    lcd_set_symbol(ACM, 0x00);
 800b6c0:	2100      	movs	r1, #0
 800b6c2:	2006      	movs	r0, #6
 800b6c4:	f001 f924 	bl	800c910 <lcd_set_symbol>
    lcd_set_symbol(TTL, 0x00);
 800b6c8:	2100      	movs	r1, #0
 800b6ca:	2005      	movs	r0, #5
 800b6cc:	f001 f920 	bl	800c910 <lcd_set_symbol>
}
 800b6d0:	bf00      	nop
 800b6d2:	3790      	adds	r7, #144	; 0x90
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}
 800b6d8:	2000011c 	.word	0x2000011c

0800b6dc <fm_lcd_version>:
 * según las opciones que se elijan.
 * @param puntos de la fila inferior a imprimir, de tipo point_t.
 * @retval None
 */
void fm_lcd_version(point_t low_point1, point_t low_point2)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b086      	sub	sp, #24
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	460a      	mov	r2, r1
 800b6e6:	71fb      	strb	r3, [r7, #7]
 800b6e8:	4613      	mov	r3, r2
 800b6ea:	71bb      	strb	r3, [r7, #6]
    char lcd_msg[MSG_LENGTH];

    fm_lcd_format_number_in_line(LOW_ROW, fm_version_get(), lcd_msg,
 800b6ec:	f004 f808 	bl	800f700 <fm_version_get>
 800b6f0:	4601      	mov	r1, r0
 800b6f2:	f107 020c 	add.w	r2, r7, #12
 800b6f6:	230c      	movs	r3, #12
 800b6f8:	2001      	movs	r0, #1
 800b6fa:	f7ff fc17 	bl	800af2c <fm_lcd_format_number_in_line>
    MSG_LENGTH);
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800b6fe:	f107 030c 	add.w	r3, r7, #12
 800b702:	2101      	movs	r1, #1
 800b704:	4618      	mov	r0, r3
 800b706:	f7ff fe1b 	bl	800b340 <fm_lcd_puts>
    lcd_set_point(LOW_ROW, low_point1);
 800b70a:	79fb      	ldrb	r3, [r7, #7]
 800b70c:	4619      	mov	r1, r3
 800b70e:	2001      	movs	r0, #1
 800b710:	f001 f852 	bl	800c7b8 <lcd_set_point>
    lcd_set_point(LOW_ROW, low_point2);
 800b714:	79bb      	ldrb	r3, [r7, #6]
 800b716:	4619      	mov	r1, r3
 800b718:	2001      	movs	r0, #1
 800b71a:	f001 f84d 	bl	800c7b8 <lcd_set_point>

    lcd_set_symbol(VE, 0x0);
 800b71e:	2100      	movs	r1, #0
 800b720:	2009      	movs	r0, #9
 800b722:	f001 f8f5 	bl	800c910 <lcd_set_symbol>
}
 800b726:	bf00      	nop
 800b728:	3718      	adds	r7, #24
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}
	...

0800b730 <lcd_clear_all>:
 * @brief Función que limpia toda la pantalla.
 * @param  None
 * @retval None
 */
void lcd_clear_all()
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b082      	sub	sp, #8
 800b734:	af00      	add	r7, sp, #0
    pcf8553_clear_buff();
 800b736:	f001 ff73 	bl	800d620 <pcf8553_clear_buff>
     * Limpia el buffer intermedio de los números que aparecen en las filas HIGH
     * y LOW de la pantalla LCD. No es muy eficiente si se pretende usar al
     * refrescar la pantalla cada x tiempo, pero será necesario usarla por el
     * momento al pasar de una pantalla a otra.
     */
    for (int cont_buff_row = 0; cont_buff_row < LCD_ROWS; cont_buff_row++)
 800b73a:	2300      	movs	r3, #0
 800b73c:	607b      	str	r3, [r7, #4]
 800b73e:	e013      	b.n	800b768 <lcd_clear_all+0x38>
    {
        for (int cont_buff_col = 0; cont_buff_col < LCD_COLS; cont_buff_col++)
 800b740:	2300      	movs	r3, #0
 800b742:	603b      	str	r3, [r7, #0]
 800b744:	e00a      	b.n	800b75c <lcd_clear_all+0x2c>
        {
            g_buf[cont_buff_row][cont_buff_col] = 0;
 800b746:	4a0d      	ldr	r2, [pc, #52]	; (800b77c <lcd_clear_all+0x4c>)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	00db      	lsls	r3, r3, #3
 800b74c:	441a      	add	r2, r3
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	4413      	add	r3, r2
 800b752:	2200      	movs	r2, #0
 800b754:	701a      	strb	r2, [r3, #0]
        for (int cont_buff_col = 0; cont_buff_col < LCD_COLS; cont_buff_col++)
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	3301      	adds	r3, #1
 800b75a:	603b      	str	r3, [r7, #0]
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	2b07      	cmp	r3, #7
 800b760:	ddf1      	ble.n	800b746 <lcd_clear_all+0x16>
    for (int cont_buff_row = 0; cont_buff_row < LCD_ROWS; cont_buff_row++)
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	3301      	adds	r3, #1
 800b766:	607b      	str	r3, [r7, #4]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2b01      	cmp	r3, #1
 800b76c:	dde8      	ble.n	800b740 <lcd_clear_all+0x10>
        }
    }

    pcf8553_write_all(NONE_SEGMENTS);
 800b76e:	2000      	movs	r0, #0
 800b770:	f001 ffe6 	bl	800d740 <pcf8553_write_all>
}
 800b774:	bf00      	nop
 800b776:	3708      	adds	r7, #8
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}
 800b77c:	200019c0 	.word	0x200019c0

0800b780 <lcd_clear_digit>:

void lcd_clear_digit(screen_digits_t digit, rows_t line)
{
 800b780:	b480      	push	{r7}
 800b782:	b083      	sub	sp, #12
 800b784:	af00      	add	r7, sp, #0
 800b786:	4603      	mov	r3, r0
 800b788:	460a      	mov	r2, r1
 800b78a:	71fb      	strb	r3, [r7, #7]
 800b78c:	4613      	mov	r3, r2
 800b78e:	71bb      	strb	r3, [r7, #6]
    if(line == HIGH_ROW)
 800b790:	79bb      	ldrb	r3, [r7, #6]
 800b792:	2b00      	cmp	r3, #0
 800b794:	f040 81aa 	bne.w	800baec <lcd_clear_digit+0x36c>
    {
        switch(digit)
 800b798:	79fb      	ldrb	r3, [r7, #7]
 800b79a:	2b07      	cmp	r3, #7
 800b79c:	f200 8320 	bhi.w	800bde0 <lcd_clear_digit+0x660>
 800b7a0:	a201      	add	r2, pc, #4	; (adr r2, 800b7a8 <lcd_clear_digit+0x28>)
 800b7a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7a6:	bf00      	nop
 800b7a8:	0800b7c9 	.word	0x0800b7c9
 800b7ac:	0800b82d 	.word	0x0800b82d
 800b7b0:	0800b891 	.word	0x0800b891
 800b7b4:	0800b8f5 	.word	0x0800b8f5
 800b7b8:	0800b959 	.word	0x0800b959
 800b7bc:	0800b9bd 	.word	0x0800b9bd
 800b7c0:	0800ba25 	.word	0x0800ba25
 800b7c4:	0800ba89 	.word	0x0800ba89
        {
            case DIGIT_0:
                g_lcd_map[REG_12] &= ~(1 << BIT_7);
 800b7c8:	4b95      	ldr	r3, [pc, #596]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b7ca:	7b1b      	ldrb	r3, [r3, #12]
 800b7cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7d0:	b2da      	uxtb	r2, r3
 800b7d2:	4b93      	ldr	r3, [pc, #588]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b7d4:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_12] &= ~(1 << BIT_6);
 800b7d6:	4b92      	ldr	r3, [pc, #584]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b7d8:	7b1b      	ldrb	r3, [r3, #12]
 800b7da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7de:	b2da      	uxtb	r2, r3
 800b7e0:	4b8f      	ldr	r3, [pc, #572]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b7e2:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_17] &= ~(1 << BIT_7);
 800b7e4:	4b8e      	ldr	r3, [pc, #568]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b7e6:	7c5b      	ldrb	r3, [r3, #17]
 800b7e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7ec:	b2da      	uxtb	r2, r3
 800b7ee:	4b8c      	ldr	r3, [pc, #560]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b7f0:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_17] &= ~(1 << BIT_6);
 800b7f2:	4b8b      	ldr	r3, [pc, #556]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b7f4:	7c5b      	ldrb	r3, [r3, #17]
 800b7f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7fa:	b2da      	uxtb	r2, r3
 800b7fc:	4b88      	ldr	r3, [pc, #544]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b7fe:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_2] &= ~(1 << BIT_6);
 800b800:	4b87      	ldr	r3, [pc, #540]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b802:	789b      	ldrb	r3, [r3, #2]
 800b804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b808:	b2da      	uxtb	r2, r3
 800b80a:	4b85      	ldr	r3, [pc, #532]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b80c:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_2] &= ~(1 << BIT_7);
 800b80e:	4b84      	ldr	r3, [pc, #528]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b810:	789b      	ldrb	r3, [r3, #2]
 800b812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b816:	b2da      	uxtb	r2, r3
 800b818:	4b81      	ldr	r3, [pc, #516]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b81a:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_7] &= ~(1 << BIT_6);
 800b81c:	4b80      	ldr	r3, [pc, #512]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b81e:	79db      	ldrb	r3, [r3, #7]
 800b820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b824:	b2da      	uxtb	r2, r3
 800b826:	4b7e      	ldr	r3, [pc, #504]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b828:	71da      	strb	r2, [r3, #7]
            break;
 800b82a:	e2de      	b.n	800bdea <lcd_clear_digit+0x66a>
            case DIGIT_1:
                g_lcd_map[REG_13] &= ~(1 << BIT_1);
 800b82c:	4b7c      	ldr	r3, [pc, #496]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b82e:	7b5b      	ldrb	r3, [r3, #13]
 800b830:	f023 0302 	bic.w	r3, r3, #2
 800b834:	b2da      	uxtb	r2, r3
 800b836:	4b7a      	ldr	r3, [pc, #488]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b838:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_0);
 800b83a:	4b79      	ldr	r3, [pc, #484]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b83c:	7b5b      	ldrb	r3, [r3, #13]
 800b83e:	f023 0301 	bic.w	r3, r3, #1
 800b842:	b2da      	uxtb	r2, r3
 800b844:	4b76      	ldr	r3, [pc, #472]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b846:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_1);
 800b848:	4b75      	ldr	r3, [pc, #468]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b84a:	7c9b      	ldrb	r3, [r3, #18]
 800b84c:	f023 0302 	bic.w	r3, r3, #2
 800b850:	b2da      	uxtb	r2, r3
 800b852:	4b73      	ldr	r3, [pc, #460]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b854:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_0);
 800b856:	4b72      	ldr	r3, [pc, #456]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b858:	7c9b      	ldrb	r3, [r3, #18]
 800b85a:	f023 0301 	bic.w	r3, r3, #1
 800b85e:	b2da      	uxtb	r2, r3
 800b860:	4b6f      	ldr	r3, [pc, #444]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b862:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_0);
 800b864:	4b6e      	ldr	r3, [pc, #440]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b866:	78db      	ldrb	r3, [r3, #3]
 800b868:	f023 0301 	bic.w	r3, r3, #1
 800b86c:	b2da      	uxtb	r2, r3
 800b86e:	4b6c      	ldr	r3, [pc, #432]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b870:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_1);
 800b872:	4b6b      	ldr	r3, [pc, #428]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b874:	78db      	ldrb	r3, [r3, #3]
 800b876:	f023 0302 	bic.w	r3, r3, #2
 800b87a:	b2da      	uxtb	r2, r3
 800b87c:	4b68      	ldr	r3, [pc, #416]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b87e:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_0);
 800b880:	4b67      	ldr	r3, [pc, #412]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b882:	7a1b      	ldrb	r3, [r3, #8]
 800b884:	f023 0301 	bic.w	r3, r3, #1
 800b888:	b2da      	uxtb	r2, r3
 800b88a:	4b65      	ldr	r3, [pc, #404]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b88c:	721a      	strb	r2, [r3, #8]
            break;
 800b88e:	e2ac      	b.n	800bdea <lcd_clear_digit+0x66a>
            case DIGIT_2:
                g_lcd_map[REG_13] &= ~(1 << BIT_3);
 800b890:	4b63      	ldr	r3, [pc, #396]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b892:	7b5b      	ldrb	r3, [r3, #13]
 800b894:	f023 0308 	bic.w	r3, r3, #8
 800b898:	b2da      	uxtb	r2, r3
 800b89a:	4b61      	ldr	r3, [pc, #388]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b89c:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_2);
 800b89e:	4b60      	ldr	r3, [pc, #384]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b8a0:	7b5b      	ldrb	r3, [r3, #13]
 800b8a2:	f023 0304 	bic.w	r3, r3, #4
 800b8a6:	b2da      	uxtb	r2, r3
 800b8a8:	4b5d      	ldr	r3, [pc, #372]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b8aa:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_3);
 800b8ac:	4b5c      	ldr	r3, [pc, #368]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b8ae:	7c9b      	ldrb	r3, [r3, #18]
 800b8b0:	f023 0308 	bic.w	r3, r3, #8
 800b8b4:	b2da      	uxtb	r2, r3
 800b8b6:	4b5a      	ldr	r3, [pc, #360]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b8b8:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_2);
 800b8ba:	4b59      	ldr	r3, [pc, #356]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b8bc:	7c9b      	ldrb	r3, [r3, #18]
 800b8be:	f023 0304 	bic.w	r3, r3, #4
 800b8c2:	b2da      	uxtb	r2, r3
 800b8c4:	4b56      	ldr	r3, [pc, #344]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b8c6:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_2);
 800b8c8:	4b55      	ldr	r3, [pc, #340]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b8ca:	78db      	ldrb	r3, [r3, #3]
 800b8cc:	f023 0304 	bic.w	r3, r3, #4
 800b8d0:	b2da      	uxtb	r2, r3
 800b8d2:	4b53      	ldr	r3, [pc, #332]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b8d4:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_3);
 800b8d6:	4b52      	ldr	r3, [pc, #328]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b8d8:	78db      	ldrb	r3, [r3, #3]
 800b8da:	f023 0308 	bic.w	r3, r3, #8
 800b8de:	b2da      	uxtb	r2, r3
 800b8e0:	4b4f      	ldr	r3, [pc, #316]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b8e2:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_2);
 800b8e4:	4b4e      	ldr	r3, [pc, #312]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b8e6:	7a1b      	ldrb	r3, [r3, #8]
 800b8e8:	f023 0304 	bic.w	r3, r3, #4
 800b8ec:	b2da      	uxtb	r2, r3
 800b8ee:	4b4c      	ldr	r3, [pc, #304]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b8f0:	721a      	strb	r2, [r3, #8]
            break;
 800b8f2:	e27a      	b.n	800bdea <lcd_clear_digit+0x66a>
            case DIGIT_3:
                g_lcd_map[REG_13] &= ~(1 << BIT_5);
 800b8f4:	4b4a      	ldr	r3, [pc, #296]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b8f6:	7b5b      	ldrb	r3, [r3, #13]
 800b8f8:	f023 0320 	bic.w	r3, r3, #32
 800b8fc:	b2da      	uxtb	r2, r3
 800b8fe:	4b48      	ldr	r3, [pc, #288]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b900:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_4);
 800b902:	4b47      	ldr	r3, [pc, #284]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b904:	7b5b      	ldrb	r3, [r3, #13]
 800b906:	f023 0310 	bic.w	r3, r3, #16
 800b90a:	b2da      	uxtb	r2, r3
 800b90c:	4b44      	ldr	r3, [pc, #272]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b90e:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_5);
 800b910:	4b43      	ldr	r3, [pc, #268]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b912:	7c9b      	ldrb	r3, [r3, #18]
 800b914:	f023 0320 	bic.w	r3, r3, #32
 800b918:	b2da      	uxtb	r2, r3
 800b91a:	4b41      	ldr	r3, [pc, #260]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b91c:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_4);
 800b91e:	4b40      	ldr	r3, [pc, #256]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b920:	7c9b      	ldrb	r3, [r3, #18]
 800b922:	f023 0310 	bic.w	r3, r3, #16
 800b926:	b2da      	uxtb	r2, r3
 800b928:	4b3d      	ldr	r3, [pc, #244]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b92a:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_4);
 800b92c:	4b3c      	ldr	r3, [pc, #240]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b92e:	78db      	ldrb	r3, [r3, #3]
 800b930:	f023 0310 	bic.w	r3, r3, #16
 800b934:	b2da      	uxtb	r2, r3
 800b936:	4b3a      	ldr	r3, [pc, #232]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b938:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_5);
 800b93a:	4b39      	ldr	r3, [pc, #228]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b93c:	78db      	ldrb	r3, [r3, #3]
 800b93e:	f023 0320 	bic.w	r3, r3, #32
 800b942:	b2da      	uxtb	r2, r3
 800b944:	4b36      	ldr	r3, [pc, #216]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b946:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_4);
 800b948:	4b35      	ldr	r3, [pc, #212]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b94a:	7a1b      	ldrb	r3, [r3, #8]
 800b94c:	f023 0310 	bic.w	r3, r3, #16
 800b950:	b2da      	uxtb	r2, r3
 800b952:	4b33      	ldr	r3, [pc, #204]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b954:	721a      	strb	r2, [r3, #8]
            break;
 800b956:	e248      	b.n	800bdea <lcd_clear_digit+0x66a>
            case DIGIT_4:
                g_lcd_map[REG_13] &= ~(1 << BIT_7);
 800b958:	4b31      	ldr	r3, [pc, #196]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b95a:	7b5b      	ldrb	r3, [r3, #13]
 800b95c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b960:	b2da      	uxtb	r2, r3
 800b962:	4b2f      	ldr	r3, [pc, #188]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b964:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_6);
 800b966:	4b2e      	ldr	r3, [pc, #184]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b968:	7b5b      	ldrb	r3, [r3, #13]
 800b96a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b96e:	b2da      	uxtb	r2, r3
 800b970:	4b2b      	ldr	r3, [pc, #172]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b972:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_7);
 800b974:	4b2a      	ldr	r3, [pc, #168]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b976:	7c9b      	ldrb	r3, [r3, #18]
 800b978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b97c:	b2da      	uxtb	r2, r3
 800b97e:	4b28      	ldr	r3, [pc, #160]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b980:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_6);
 800b982:	4b27      	ldr	r3, [pc, #156]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b984:	7c9b      	ldrb	r3, [r3, #18]
 800b986:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b98a:	b2da      	uxtb	r2, r3
 800b98c:	4b24      	ldr	r3, [pc, #144]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b98e:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_6);
 800b990:	4b23      	ldr	r3, [pc, #140]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b992:	78db      	ldrb	r3, [r3, #3]
 800b994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b998:	b2da      	uxtb	r2, r3
 800b99a:	4b21      	ldr	r3, [pc, #132]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b99c:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_7);
 800b99e:	4b20      	ldr	r3, [pc, #128]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b9a0:	78db      	ldrb	r3, [r3, #3]
 800b9a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9a6:	b2da      	uxtb	r2, r3
 800b9a8:	4b1d      	ldr	r3, [pc, #116]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b9aa:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_6);
 800b9ac:	4b1c      	ldr	r3, [pc, #112]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b9ae:	7a1b      	ldrb	r3, [r3, #8]
 800b9b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9b4:	b2da      	uxtb	r2, r3
 800b9b6:	4b1a      	ldr	r3, [pc, #104]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b9b8:	721a      	strb	r2, [r3, #8]
            break;
 800b9ba:	e216      	b.n	800bdea <lcd_clear_digit+0x66a>
            case DIGIT_5:
                g_lcd_map[REG_14] &= ~(1 << BIT_1);
 800b9bc:	4b18      	ldr	r3, [pc, #96]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b9be:	7b9b      	ldrb	r3, [r3, #14]
 800b9c0:	f023 0302 	bic.w	r3, r3, #2
 800b9c4:	b2da      	uxtb	r2, r3
 800b9c6:	4b16      	ldr	r3, [pc, #88]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b9c8:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_14] &= ~(1 << BIT_0);
 800b9ca:	4b15      	ldr	r3, [pc, #84]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b9cc:	7b9b      	ldrb	r3, [r3, #14]
 800b9ce:	f023 0301 	bic.w	r3, r3, #1
 800b9d2:	b2da      	uxtb	r2, r3
 800b9d4:	4b12      	ldr	r3, [pc, #72]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b9d6:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_19] &= ~(1 << BIT_1);
 800b9d8:	4b11      	ldr	r3, [pc, #68]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b9da:	7cdb      	ldrb	r3, [r3, #19]
 800b9dc:	f023 0302 	bic.w	r3, r3, #2
 800b9e0:	b2da      	uxtb	r2, r3
 800b9e2:	4b0f      	ldr	r3, [pc, #60]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b9e4:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_19] &= ~(1 << BIT_0);
 800b9e6:	4b0e      	ldr	r3, [pc, #56]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b9e8:	7cdb      	ldrb	r3, [r3, #19]
 800b9ea:	f023 0301 	bic.w	r3, r3, #1
 800b9ee:	b2da      	uxtb	r2, r3
 800b9f0:	4b0b      	ldr	r3, [pc, #44]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b9f2:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_4] &= ~(1 << BIT_0);
 800b9f4:	4b0a      	ldr	r3, [pc, #40]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800b9f6:	791b      	ldrb	r3, [r3, #4]
 800b9f8:	f023 0301 	bic.w	r3, r3, #1
 800b9fc:	b2da      	uxtb	r2, r3
 800b9fe:	4b08      	ldr	r3, [pc, #32]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800ba00:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_4] &= ~(1 << BIT_1);
 800ba02:	4b07      	ldr	r3, [pc, #28]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800ba04:	791b      	ldrb	r3, [r3, #4]
 800ba06:	f023 0302 	bic.w	r3, r3, #2
 800ba0a:	b2da      	uxtb	r2, r3
 800ba0c:	4b04      	ldr	r3, [pc, #16]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800ba0e:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_9] &= ~(1 << BIT_0);
 800ba10:	4b03      	ldr	r3, [pc, #12]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800ba12:	7a5b      	ldrb	r3, [r3, #9]
 800ba14:	f023 0301 	bic.w	r3, r3, #1
 800ba18:	b2da      	uxtb	r2, r3
 800ba1a:	4b01      	ldr	r3, [pc, #4]	; (800ba20 <lcd_clear_digit+0x2a0>)
 800ba1c:	725a      	strb	r2, [r3, #9]
            break;
 800ba1e:	e1e4      	b.n	800bdea <lcd_clear_digit+0x66a>
 800ba20:	20001a38 	.word	0x20001a38
            case DIGIT_6:
                g_lcd_map[REG_14] &= ~(1 << BIT_3);
 800ba24:	4ba2      	ldr	r3, [pc, #648]	; (800bcb0 <lcd_clear_digit+0x530>)
 800ba26:	7b9b      	ldrb	r3, [r3, #14]
 800ba28:	f023 0308 	bic.w	r3, r3, #8
 800ba2c:	b2da      	uxtb	r2, r3
 800ba2e:	4ba0      	ldr	r3, [pc, #640]	; (800bcb0 <lcd_clear_digit+0x530>)
 800ba30:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_14] &= ~(1 << BIT_2);
 800ba32:	4b9f      	ldr	r3, [pc, #636]	; (800bcb0 <lcd_clear_digit+0x530>)
 800ba34:	7b9b      	ldrb	r3, [r3, #14]
 800ba36:	f023 0304 	bic.w	r3, r3, #4
 800ba3a:	b2da      	uxtb	r2, r3
 800ba3c:	4b9c      	ldr	r3, [pc, #624]	; (800bcb0 <lcd_clear_digit+0x530>)
 800ba3e:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_19] &= ~(1 << BIT_3);
 800ba40:	4b9b      	ldr	r3, [pc, #620]	; (800bcb0 <lcd_clear_digit+0x530>)
 800ba42:	7cdb      	ldrb	r3, [r3, #19]
 800ba44:	f023 0308 	bic.w	r3, r3, #8
 800ba48:	b2da      	uxtb	r2, r3
 800ba4a:	4b99      	ldr	r3, [pc, #612]	; (800bcb0 <lcd_clear_digit+0x530>)
 800ba4c:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_19] &= ~(1 << BIT_2);
 800ba4e:	4b98      	ldr	r3, [pc, #608]	; (800bcb0 <lcd_clear_digit+0x530>)
 800ba50:	7cdb      	ldrb	r3, [r3, #19]
 800ba52:	f023 0304 	bic.w	r3, r3, #4
 800ba56:	b2da      	uxtb	r2, r3
 800ba58:	4b95      	ldr	r3, [pc, #596]	; (800bcb0 <lcd_clear_digit+0x530>)
 800ba5a:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_4] &= ~(1 << BIT_2);
 800ba5c:	4b94      	ldr	r3, [pc, #592]	; (800bcb0 <lcd_clear_digit+0x530>)
 800ba5e:	791b      	ldrb	r3, [r3, #4]
 800ba60:	f023 0304 	bic.w	r3, r3, #4
 800ba64:	b2da      	uxtb	r2, r3
 800ba66:	4b92      	ldr	r3, [pc, #584]	; (800bcb0 <lcd_clear_digit+0x530>)
 800ba68:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_4] &= ~(1 << BIT_3);
 800ba6a:	4b91      	ldr	r3, [pc, #580]	; (800bcb0 <lcd_clear_digit+0x530>)
 800ba6c:	791b      	ldrb	r3, [r3, #4]
 800ba6e:	f023 0308 	bic.w	r3, r3, #8
 800ba72:	b2da      	uxtb	r2, r3
 800ba74:	4b8e      	ldr	r3, [pc, #568]	; (800bcb0 <lcd_clear_digit+0x530>)
 800ba76:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_9] &= ~(1 << BIT_2);
 800ba78:	4b8d      	ldr	r3, [pc, #564]	; (800bcb0 <lcd_clear_digit+0x530>)
 800ba7a:	7a5b      	ldrb	r3, [r3, #9]
 800ba7c:	f023 0304 	bic.w	r3, r3, #4
 800ba80:	b2da      	uxtb	r2, r3
 800ba82:	4b8b      	ldr	r3, [pc, #556]	; (800bcb0 <lcd_clear_digit+0x530>)
 800ba84:	725a      	strb	r2, [r3, #9]
            break;
 800ba86:	e1b0      	b.n	800bdea <lcd_clear_digit+0x66a>
            case DIGIT_7:
                g_lcd_map[REG_14] &= ~(1 << BIT_5);
 800ba88:	4b89      	ldr	r3, [pc, #548]	; (800bcb0 <lcd_clear_digit+0x530>)
 800ba8a:	7b9b      	ldrb	r3, [r3, #14]
 800ba8c:	f023 0320 	bic.w	r3, r3, #32
 800ba90:	b2da      	uxtb	r2, r3
 800ba92:	4b87      	ldr	r3, [pc, #540]	; (800bcb0 <lcd_clear_digit+0x530>)
 800ba94:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_14] &= ~(1 << BIT_4);
 800ba96:	4b86      	ldr	r3, [pc, #536]	; (800bcb0 <lcd_clear_digit+0x530>)
 800ba98:	7b9b      	ldrb	r3, [r3, #14]
 800ba9a:	f023 0310 	bic.w	r3, r3, #16
 800ba9e:	b2da      	uxtb	r2, r3
 800baa0:	4b83      	ldr	r3, [pc, #524]	; (800bcb0 <lcd_clear_digit+0x530>)
 800baa2:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_19] &= ~(1 << BIT_5);
 800baa4:	4b82      	ldr	r3, [pc, #520]	; (800bcb0 <lcd_clear_digit+0x530>)
 800baa6:	7cdb      	ldrb	r3, [r3, #19]
 800baa8:	f023 0320 	bic.w	r3, r3, #32
 800baac:	b2da      	uxtb	r2, r3
 800baae:	4b80      	ldr	r3, [pc, #512]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bab0:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_19] &= ~(1 << BIT_4);
 800bab2:	4b7f      	ldr	r3, [pc, #508]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bab4:	7cdb      	ldrb	r3, [r3, #19]
 800bab6:	f023 0310 	bic.w	r3, r3, #16
 800baba:	b2da      	uxtb	r2, r3
 800babc:	4b7c      	ldr	r3, [pc, #496]	; (800bcb0 <lcd_clear_digit+0x530>)
 800babe:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_4] &= ~(1 << BIT_4);
 800bac0:	4b7b      	ldr	r3, [pc, #492]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bac2:	791b      	ldrb	r3, [r3, #4]
 800bac4:	f023 0310 	bic.w	r3, r3, #16
 800bac8:	b2da      	uxtb	r2, r3
 800baca:	4b79      	ldr	r3, [pc, #484]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bacc:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_4] &= ~(1 << BIT_5);
 800bace:	4b78      	ldr	r3, [pc, #480]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bad0:	791b      	ldrb	r3, [r3, #4]
 800bad2:	f023 0320 	bic.w	r3, r3, #32
 800bad6:	b2da      	uxtb	r2, r3
 800bad8:	4b75      	ldr	r3, [pc, #468]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bada:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_9] &= ~(1 << BIT_4);
 800badc:	4b74      	ldr	r3, [pc, #464]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bade:	7a5b      	ldrb	r3, [r3, #9]
 800bae0:	f023 0310 	bic.w	r3, r3, #16
 800bae4:	b2da      	uxtb	r2, r3
 800bae6:	4b72      	ldr	r3, [pc, #456]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bae8:	725a      	strb	r2, [r3, #9]
            break;
 800baea:	e17e      	b.n	800bdea <lcd_clear_digit+0x66a>
            default:
            break;
        }
    }
    else if(line == LOW_ROW)
 800baec:	79bb      	ldrb	r3, [r7, #6]
 800baee:	2b01      	cmp	r3, #1
 800baf0:	f040 8178 	bne.w	800bde4 <lcd_clear_digit+0x664>
    {
        switch(digit)
 800baf4:	79fb      	ldrb	r3, [r7, #7]
 800baf6:	2b06      	cmp	r3, #6
 800baf8:	f200 8176 	bhi.w	800bde8 <lcd_clear_digit+0x668>
 800bafc:	a201      	add	r2, pc, #4	; (adr r2, 800bb04 <lcd_clear_digit+0x384>)
 800bafe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb02:	bf00      	nop
 800bb04:	0800bb21 	.word	0x0800bb21
 800bb08:	0800bb85 	.word	0x0800bb85
 800bb0c:	0800bbe9 	.word	0x0800bbe9
 800bb10:	0800bc4d 	.word	0x0800bc4d
 800bb14:	0800bcb5 	.word	0x0800bcb5
 800bb18:	0800bd19 	.word	0x0800bd19
 800bb1c:	0800bd7d 	.word	0x0800bd7d
        {
            case DIGIT_0:
                g_lcd_map[REG_12] &= ~(1 << BIT_2);
 800bb20:	4b63      	ldr	r3, [pc, #396]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bb22:	7b1b      	ldrb	r3, [r3, #12]
 800bb24:	f023 0304 	bic.w	r3, r3, #4
 800bb28:	b2da      	uxtb	r2, r3
 800bb2a:	4b61      	ldr	r3, [pc, #388]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bb2c:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_12] &= ~(1 << BIT_3);
 800bb2e:	4b60      	ldr	r3, [pc, #384]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bb30:	7b1b      	ldrb	r3, [r3, #12]
 800bb32:	f023 0308 	bic.w	r3, r3, #8
 800bb36:	b2da      	uxtb	r2, r3
 800bb38:	4b5d      	ldr	r3, [pc, #372]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bb3a:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_17] &= ~(1 << BIT_2);
 800bb3c:	4b5c      	ldr	r3, [pc, #368]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bb3e:	7c5b      	ldrb	r3, [r3, #17]
 800bb40:	f023 0304 	bic.w	r3, r3, #4
 800bb44:	b2da      	uxtb	r2, r3
 800bb46:	4b5a      	ldr	r3, [pc, #360]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bb48:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_17] &= ~(1 << BIT_3);
 800bb4a:	4b59      	ldr	r3, [pc, #356]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bb4c:	7c5b      	ldrb	r3, [r3, #17]
 800bb4e:	f023 0308 	bic.w	r3, r3, #8
 800bb52:	b2da      	uxtb	r2, r3
 800bb54:	4b56      	ldr	r3, [pc, #344]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bb56:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_2] &= ~(1 << BIT_2);
 800bb58:	4b55      	ldr	r3, [pc, #340]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bb5a:	789b      	ldrb	r3, [r3, #2]
 800bb5c:	f023 0304 	bic.w	r3, r3, #4
 800bb60:	b2da      	uxtb	r2, r3
 800bb62:	4b53      	ldr	r3, [pc, #332]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bb64:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_2] &= ~(1 << BIT_3);
 800bb66:	4b52      	ldr	r3, [pc, #328]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bb68:	789b      	ldrb	r3, [r3, #2]
 800bb6a:	f023 0308 	bic.w	r3, r3, #8
 800bb6e:	b2da      	uxtb	r2, r3
 800bb70:	4b4f      	ldr	r3, [pc, #316]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bb72:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_7] &= ~(1 << BIT_3);
 800bb74:	4b4e      	ldr	r3, [pc, #312]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bb76:	79db      	ldrb	r3, [r3, #7]
 800bb78:	f023 0308 	bic.w	r3, r3, #8
 800bb7c:	b2da      	uxtb	r2, r3
 800bb7e:	4b4c      	ldr	r3, [pc, #304]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bb80:	71da      	strb	r2, [r3, #7]
            break;
 800bb82:	e132      	b.n	800bdea <lcd_clear_digit+0x66a>
            case DIGIT_1:
                g_lcd_map[REG_12] &= ~(1 << BIT_0);
 800bb84:	4b4a      	ldr	r3, [pc, #296]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bb86:	7b1b      	ldrb	r3, [r3, #12]
 800bb88:	f023 0301 	bic.w	r3, r3, #1
 800bb8c:	b2da      	uxtb	r2, r3
 800bb8e:	4b48      	ldr	r3, [pc, #288]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bb90:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_12] &= ~(1 << BIT_1);
 800bb92:	4b47      	ldr	r3, [pc, #284]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bb94:	7b1b      	ldrb	r3, [r3, #12]
 800bb96:	f023 0302 	bic.w	r3, r3, #2
 800bb9a:	b2da      	uxtb	r2, r3
 800bb9c:	4b44      	ldr	r3, [pc, #272]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bb9e:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_17] &= ~(1 << BIT_0);
 800bba0:	4b43      	ldr	r3, [pc, #268]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bba2:	7c5b      	ldrb	r3, [r3, #17]
 800bba4:	f023 0301 	bic.w	r3, r3, #1
 800bba8:	b2da      	uxtb	r2, r3
 800bbaa:	4b41      	ldr	r3, [pc, #260]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bbac:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_17] &= ~(1 << BIT_1);
 800bbae:	4b40      	ldr	r3, [pc, #256]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bbb0:	7c5b      	ldrb	r3, [r3, #17]
 800bbb2:	f023 0302 	bic.w	r3, r3, #2
 800bbb6:	b2da      	uxtb	r2, r3
 800bbb8:	4b3d      	ldr	r3, [pc, #244]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bbba:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_2] &= ~(1 << BIT_0);
 800bbbc:	4b3c      	ldr	r3, [pc, #240]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bbbe:	789b      	ldrb	r3, [r3, #2]
 800bbc0:	f023 0301 	bic.w	r3, r3, #1
 800bbc4:	b2da      	uxtb	r2, r3
 800bbc6:	4b3a      	ldr	r3, [pc, #232]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bbc8:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_2] &= ~(1 << BIT_1);
 800bbca:	4b39      	ldr	r3, [pc, #228]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bbcc:	789b      	ldrb	r3, [r3, #2]
 800bbce:	f023 0302 	bic.w	r3, r3, #2
 800bbd2:	b2da      	uxtb	r2, r3
 800bbd4:	4b36      	ldr	r3, [pc, #216]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bbd6:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_7] &= ~(1 << BIT_1);
 800bbd8:	4b35      	ldr	r3, [pc, #212]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bbda:	79db      	ldrb	r3, [r3, #7]
 800bbdc:	f023 0302 	bic.w	r3, r3, #2
 800bbe0:	b2da      	uxtb	r2, r3
 800bbe2:	4b33      	ldr	r3, [pc, #204]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bbe4:	71da      	strb	r2, [r3, #7]
            break;
 800bbe6:	e100      	b.n	800bdea <lcd_clear_digit+0x66a>
            case DIGIT_2:
                g_lcd_map[REG_11] &= ~(1 << BIT_6);
 800bbe8:	4b31      	ldr	r3, [pc, #196]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bbea:	7adb      	ldrb	r3, [r3, #11]
 800bbec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbf0:	b2da      	uxtb	r2, r3
 800bbf2:	4b2f      	ldr	r3, [pc, #188]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bbf4:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_7);
 800bbf6:	4b2e      	ldr	r3, [pc, #184]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bbf8:	7adb      	ldrb	r3, [r3, #11]
 800bbfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbfe:	b2da      	uxtb	r2, r3
 800bc00:	4b2b      	ldr	r3, [pc, #172]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bc02:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_6);
 800bc04:	4b2a      	ldr	r3, [pc, #168]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bc06:	7c1b      	ldrb	r3, [r3, #16]
 800bc08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc0c:	b2da      	uxtb	r2, r3
 800bc0e:	4b28      	ldr	r3, [pc, #160]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bc10:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_7);
 800bc12:	4b27      	ldr	r3, [pc, #156]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bc14:	7c1b      	ldrb	r3, [r3, #16]
 800bc16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc1a:	b2da      	uxtb	r2, r3
 800bc1c:	4b24      	ldr	r3, [pc, #144]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bc1e:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_6);
 800bc20:	4b23      	ldr	r3, [pc, #140]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bc22:	785b      	ldrb	r3, [r3, #1]
 800bc24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc28:	b2da      	uxtb	r2, r3
 800bc2a:	4b21      	ldr	r3, [pc, #132]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bc2c:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_7);
 800bc2e:	4b20      	ldr	r3, [pc, #128]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bc30:	785b      	ldrb	r3, [r3, #1]
 800bc32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc36:	b2da      	uxtb	r2, r3
 800bc38:	4b1d      	ldr	r3, [pc, #116]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bc3a:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_7);
 800bc3c:	4b1c      	ldr	r3, [pc, #112]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bc3e:	799b      	ldrb	r3, [r3, #6]
 800bc40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc44:	b2da      	uxtb	r2, r3
 800bc46:	4b1a      	ldr	r3, [pc, #104]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bc48:	719a      	strb	r2, [r3, #6]
            break;
 800bc4a:	e0ce      	b.n	800bdea <lcd_clear_digit+0x66a>
            case DIGIT_3:
                g_lcd_map[REG_11] &= ~(1 << BIT_4);
 800bc4c:	4b18      	ldr	r3, [pc, #96]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bc4e:	7adb      	ldrb	r3, [r3, #11]
 800bc50:	f023 0310 	bic.w	r3, r3, #16
 800bc54:	b2da      	uxtb	r2, r3
 800bc56:	4b16      	ldr	r3, [pc, #88]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bc58:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_5);
 800bc5a:	4b15      	ldr	r3, [pc, #84]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bc5c:	7adb      	ldrb	r3, [r3, #11]
 800bc5e:	f023 0320 	bic.w	r3, r3, #32
 800bc62:	b2da      	uxtb	r2, r3
 800bc64:	4b12      	ldr	r3, [pc, #72]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bc66:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_4);
 800bc68:	4b11      	ldr	r3, [pc, #68]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bc6a:	7c1b      	ldrb	r3, [r3, #16]
 800bc6c:	f023 0310 	bic.w	r3, r3, #16
 800bc70:	b2da      	uxtb	r2, r3
 800bc72:	4b0f      	ldr	r3, [pc, #60]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bc74:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_5);
 800bc76:	4b0e      	ldr	r3, [pc, #56]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bc78:	7c1b      	ldrb	r3, [r3, #16]
 800bc7a:	f023 0320 	bic.w	r3, r3, #32
 800bc7e:	b2da      	uxtb	r2, r3
 800bc80:	4b0b      	ldr	r3, [pc, #44]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bc82:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_4);
 800bc84:	4b0a      	ldr	r3, [pc, #40]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bc86:	785b      	ldrb	r3, [r3, #1]
 800bc88:	f023 0310 	bic.w	r3, r3, #16
 800bc8c:	b2da      	uxtb	r2, r3
 800bc8e:	4b08      	ldr	r3, [pc, #32]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bc90:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_5);
 800bc92:	4b07      	ldr	r3, [pc, #28]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bc94:	785b      	ldrb	r3, [r3, #1]
 800bc96:	f023 0320 	bic.w	r3, r3, #32
 800bc9a:	b2da      	uxtb	r2, r3
 800bc9c:	4b04      	ldr	r3, [pc, #16]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bc9e:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_5);
 800bca0:	4b03      	ldr	r3, [pc, #12]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bca2:	799b      	ldrb	r3, [r3, #6]
 800bca4:	f023 0320 	bic.w	r3, r3, #32
 800bca8:	b2da      	uxtb	r2, r3
 800bcaa:	4b01      	ldr	r3, [pc, #4]	; (800bcb0 <lcd_clear_digit+0x530>)
 800bcac:	719a      	strb	r2, [r3, #6]
            break;
 800bcae:	e09c      	b.n	800bdea <lcd_clear_digit+0x66a>
 800bcb0:	20001a38 	.word	0x20001a38
            case DIGIT_4:
                g_lcd_map[REG_11] &= ~(1 << BIT_2);
 800bcb4:	4b50      	ldr	r3, [pc, #320]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bcb6:	7adb      	ldrb	r3, [r3, #11]
 800bcb8:	f023 0304 	bic.w	r3, r3, #4
 800bcbc:	b2da      	uxtb	r2, r3
 800bcbe:	4b4e      	ldr	r3, [pc, #312]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bcc0:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_3);
 800bcc2:	4b4d      	ldr	r3, [pc, #308]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bcc4:	7adb      	ldrb	r3, [r3, #11]
 800bcc6:	f023 0308 	bic.w	r3, r3, #8
 800bcca:	b2da      	uxtb	r2, r3
 800bccc:	4b4a      	ldr	r3, [pc, #296]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bcce:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_2);
 800bcd0:	4b49      	ldr	r3, [pc, #292]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bcd2:	7c1b      	ldrb	r3, [r3, #16]
 800bcd4:	f023 0304 	bic.w	r3, r3, #4
 800bcd8:	b2da      	uxtb	r2, r3
 800bcda:	4b47      	ldr	r3, [pc, #284]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bcdc:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_3);
 800bcde:	4b46      	ldr	r3, [pc, #280]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bce0:	7c1b      	ldrb	r3, [r3, #16]
 800bce2:	f023 0308 	bic.w	r3, r3, #8
 800bce6:	b2da      	uxtb	r2, r3
 800bce8:	4b43      	ldr	r3, [pc, #268]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bcea:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_2);
 800bcec:	4b42      	ldr	r3, [pc, #264]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bcee:	785b      	ldrb	r3, [r3, #1]
 800bcf0:	f023 0304 	bic.w	r3, r3, #4
 800bcf4:	b2da      	uxtb	r2, r3
 800bcf6:	4b40      	ldr	r3, [pc, #256]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bcf8:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_3);
 800bcfa:	4b3f      	ldr	r3, [pc, #252]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bcfc:	785b      	ldrb	r3, [r3, #1]
 800bcfe:	f023 0308 	bic.w	r3, r3, #8
 800bd02:	b2da      	uxtb	r2, r3
 800bd04:	4b3c      	ldr	r3, [pc, #240]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bd06:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_3);
 800bd08:	4b3b      	ldr	r3, [pc, #236]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bd0a:	799b      	ldrb	r3, [r3, #6]
 800bd0c:	f023 0308 	bic.w	r3, r3, #8
 800bd10:	b2da      	uxtb	r2, r3
 800bd12:	4b39      	ldr	r3, [pc, #228]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bd14:	719a      	strb	r2, [r3, #6]
            break;
 800bd16:	e068      	b.n	800bdea <lcd_clear_digit+0x66a>
            case DIGIT_5:
                g_lcd_map[REG_11] &= ~(1 << BIT_0);
 800bd18:	4b37      	ldr	r3, [pc, #220]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bd1a:	7adb      	ldrb	r3, [r3, #11]
 800bd1c:	f023 0301 	bic.w	r3, r3, #1
 800bd20:	b2da      	uxtb	r2, r3
 800bd22:	4b35      	ldr	r3, [pc, #212]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bd24:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_1);
 800bd26:	4b34      	ldr	r3, [pc, #208]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bd28:	7adb      	ldrb	r3, [r3, #11]
 800bd2a:	f023 0302 	bic.w	r3, r3, #2
 800bd2e:	b2da      	uxtb	r2, r3
 800bd30:	4b31      	ldr	r3, [pc, #196]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bd32:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_0);
 800bd34:	4b30      	ldr	r3, [pc, #192]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bd36:	7c1b      	ldrb	r3, [r3, #16]
 800bd38:	f023 0301 	bic.w	r3, r3, #1
 800bd3c:	b2da      	uxtb	r2, r3
 800bd3e:	4b2e      	ldr	r3, [pc, #184]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bd40:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_1);
 800bd42:	4b2d      	ldr	r3, [pc, #180]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bd44:	7c1b      	ldrb	r3, [r3, #16]
 800bd46:	f023 0302 	bic.w	r3, r3, #2
 800bd4a:	b2da      	uxtb	r2, r3
 800bd4c:	4b2a      	ldr	r3, [pc, #168]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bd4e:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_0);
 800bd50:	4b29      	ldr	r3, [pc, #164]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bd52:	785b      	ldrb	r3, [r3, #1]
 800bd54:	f023 0301 	bic.w	r3, r3, #1
 800bd58:	b2da      	uxtb	r2, r3
 800bd5a:	4b27      	ldr	r3, [pc, #156]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bd5c:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_1);
 800bd5e:	4b26      	ldr	r3, [pc, #152]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bd60:	785b      	ldrb	r3, [r3, #1]
 800bd62:	f023 0302 	bic.w	r3, r3, #2
 800bd66:	b2da      	uxtb	r2, r3
 800bd68:	4b23      	ldr	r3, [pc, #140]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bd6a:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_1);
 800bd6c:	4b22      	ldr	r3, [pc, #136]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bd6e:	799b      	ldrb	r3, [r3, #6]
 800bd70:	f023 0302 	bic.w	r3, r3, #2
 800bd74:	b2da      	uxtb	r2, r3
 800bd76:	4b20      	ldr	r3, [pc, #128]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bd78:	719a      	strb	r2, [r3, #6]
            break;
 800bd7a:	e036      	b.n	800bdea <lcd_clear_digit+0x66a>
            case DIGIT_6:
                g_lcd_map[REG_10] &= ~(1 << BIT_6);
 800bd7c:	4b1e      	ldr	r3, [pc, #120]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bd7e:	7a9b      	ldrb	r3, [r3, #10]
 800bd80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd84:	b2da      	uxtb	r2, r3
 800bd86:	4b1c      	ldr	r3, [pc, #112]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bd88:	729a      	strb	r2, [r3, #10]
                g_lcd_map[REG_10] &= ~(1 << BIT_7);
 800bd8a:	4b1b      	ldr	r3, [pc, #108]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bd8c:	7a9b      	ldrb	r3, [r3, #10]
 800bd8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd92:	b2da      	uxtb	r2, r3
 800bd94:	4b18      	ldr	r3, [pc, #96]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bd96:	729a      	strb	r2, [r3, #10]
                g_lcd_map[REG_15] &= ~(1 << BIT_6);
 800bd98:	4b17      	ldr	r3, [pc, #92]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bd9a:	7bdb      	ldrb	r3, [r3, #15]
 800bd9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bda0:	b2da      	uxtb	r2, r3
 800bda2:	4b15      	ldr	r3, [pc, #84]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bda4:	73da      	strb	r2, [r3, #15]
                g_lcd_map[REG_15] &= ~(1 << BIT_7);
 800bda6:	4b14      	ldr	r3, [pc, #80]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bda8:	7bdb      	ldrb	r3, [r3, #15]
 800bdaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdae:	b2da      	uxtb	r2, r3
 800bdb0:	4b11      	ldr	r3, [pc, #68]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bdb2:	73da      	strb	r2, [r3, #15]
                g_lcd_map[REG_0] &= ~(1 << BIT_6);
 800bdb4:	4b10      	ldr	r3, [pc, #64]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bdb6:	781b      	ldrb	r3, [r3, #0]
 800bdb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bdbc:	b2da      	uxtb	r2, r3
 800bdbe:	4b0e      	ldr	r3, [pc, #56]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bdc0:	701a      	strb	r2, [r3, #0]
                g_lcd_map[REG_0] &= ~(1 << BIT_7);
 800bdc2:	4b0d      	ldr	r3, [pc, #52]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bdc4:	781b      	ldrb	r3, [r3, #0]
 800bdc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdca:	b2da      	uxtb	r2, r3
 800bdcc:	4b0a      	ldr	r3, [pc, #40]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bdce:	701a      	strb	r2, [r3, #0]
                g_lcd_map[REG_5] &= ~(1 << BIT_7);
 800bdd0:	4b09      	ldr	r3, [pc, #36]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bdd2:	795b      	ldrb	r3, [r3, #5]
 800bdd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdd8:	b2da      	uxtb	r2, r3
 800bdda:	4b07      	ldr	r3, [pc, #28]	; (800bdf8 <lcd_clear_digit+0x678>)
 800bddc:	715a      	strb	r2, [r3, #5]
            break;
 800bdde:	e004      	b.n	800bdea <lcd_clear_digit+0x66a>
            break;
 800bde0:	bf00      	nop
 800bde2:	e002      	b.n	800bdea <lcd_clear_digit+0x66a>
            default:
            break;
        }
    }
 800bde4:	bf00      	nop
 800bde6:	e000      	b.n	800bdea <lcd_clear_digit+0x66a>
            break;
 800bde8:	bf00      	nop
}
 800bdea:	bf00      	nop
 800bdec:	370c      	adds	r7, #12
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf4:	4770      	bx	lr
 800bdf6:	bf00      	nop
 800bdf8:	20001a38 	.word	0x20001a38

0800bdfc <lcd_clear_point>:
 * pantalla.
 * @param Enumeraciones rows_t y point_t de lcd.h
 * @retval None
 */
void lcd_clear_point(rows_t line, point_t point)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b083      	sub	sp, #12
 800be00:	af00      	add	r7, sp, #0
 800be02:	4603      	mov	r3, r0
 800be04:	460a      	mov	r2, r1
 800be06:	71fb      	strb	r3, [r7, #7]
 800be08:	4613      	mov	r3, r2
 800be0a:	71bb      	strb	r3, [r7, #6]
    if (line == HIGH_ROW)
 800be0c:	79fb      	ldrb	r3, [r7, #7]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d14c      	bne.n	800beac <lcd_clear_point+0xb0>
    {
        switch (point)
 800be12:	79bb      	ldrb	r3, [r7, #6]
 800be14:	2b06      	cmp	r3, #6
 800be16:	f200 808f 	bhi.w	800bf38 <lcd_clear_point+0x13c>
 800be1a:	a201      	add	r2, pc, #4	; (adr r2, 800be20 <lcd_clear_point+0x24>)
 800be1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be20:	0800be3d 	.word	0x0800be3d
 800be24:	0800be4d 	.word	0x0800be4d
 800be28:	0800be5d 	.word	0x0800be5d
 800be2c:	0800be6d 	.word	0x0800be6d
 800be30:	0800be7d 	.word	0x0800be7d
 800be34:	0800be8d 	.word	0x0800be8d
 800be38:	0800be9d 	.word	0x0800be9d
        {
            case PNT_0:
                g_lcd_map[REG_7] &= ~(1 << BIT_7);
 800be3c:	4b44      	ldr	r3, [pc, #272]	; (800bf50 <lcd_clear_point+0x154>)
 800be3e:	79db      	ldrb	r3, [r3, #7]
 800be40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be44:	b2da      	uxtb	r2, r3
 800be46:	4b42      	ldr	r3, [pc, #264]	; (800bf50 <lcd_clear_point+0x154>)
 800be48:	71da      	strb	r2, [r3, #7]
            break;
 800be4a:	e07a      	b.n	800bf42 <lcd_clear_point+0x146>
            case PNT_1:
                g_lcd_map[REG_8] &= ~(1 << BIT_1);
 800be4c:	4b40      	ldr	r3, [pc, #256]	; (800bf50 <lcd_clear_point+0x154>)
 800be4e:	7a1b      	ldrb	r3, [r3, #8]
 800be50:	f023 0302 	bic.w	r3, r3, #2
 800be54:	b2da      	uxtb	r2, r3
 800be56:	4b3e      	ldr	r3, [pc, #248]	; (800bf50 <lcd_clear_point+0x154>)
 800be58:	721a      	strb	r2, [r3, #8]
            break;
 800be5a:	e072      	b.n	800bf42 <lcd_clear_point+0x146>
            case PNT_2:
                g_lcd_map[REG_8] &= ~(1 << BIT_3);
 800be5c:	4b3c      	ldr	r3, [pc, #240]	; (800bf50 <lcd_clear_point+0x154>)
 800be5e:	7a1b      	ldrb	r3, [r3, #8]
 800be60:	f023 0308 	bic.w	r3, r3, #8
 800be64:	b2da      	uxtb	r2, r3
 800be66:	4b3a      	ldr	r3, [pc, #232]	; (800bf50 <lcd_clear_point+0x154>)
 800be68:	721a      	strb	r2, [r3, #8]
            break;
 800be6a:	e06a      	b.n	800bf42 <lcd_clear_point+0x146>
            case PNT_3:
                g_lcd_map[REG_8] &= ~(1 << BIT_5);
 800be6c:	4b38      	ldr	r3, [pc, #224]	; (800bf50 <lcd_clear_point+0x154>)
 800be6e:	7a1b      	ldrb	r3, [r3, #8]
 800be70:	f023 0320 	bic.w	r3, r3, #32
 800be74:	b2da      	uxtb	r2, r3
 800be76:	4b36      	ldr	r3, [pc, #216]	; (800bf50 <lcd_clear_point+0x154>)
 800be78:	721a      	strb	r2, [r3, #8]
            break;
 800be7a:	e062      	b.n	800bf42 <lcd_clear_point+0x146>
            case PNT_4:
                g_lcd_map[REG_8] &= ~(1 << BIT_7);
 800be7c:	4b34      	ldr	r3, [pc, #208]	; (800bf50 <lcd_clear_point+0x154>)
 800be7e:	7a1b      	ldrb	r3, [r3, #8]
 800be80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be84:	b2da      	uxtb	r2, r3
 800be86:	4b32      	ldr	r3, [pc, #200]	; (800bf50 <lcd_clear_point+0x154>)
 800be88:	721a      	strb	r2, [r3, #8]
            break;
 800be8a:	e05a      	b.n	800bf42 <lcd_clear_point+0x146>
            case PNT_5:
                g_lcd_map[REG_9] &= ~(1 << BIT_1);
 800be8c:	4b30      	ldr	r3, [pc, #192]	; (800bf50 <lcd_clear_point+0x154>)
 800be8e:	7a5b      	ldrb	r3, [r3, #9]
 800be90:	f023 0302 	bic.w	r3, r3, #2
 800be94:	b2da      	uxtb	r2, r3
 800be96:	4b2e      	ldr	r3, [pc, #184]	; (800bf50 <lcd_clear_point+0x154>)
 800be98:	725a      	strb	r2, [r3, #9]
            break;
 800be9a:	e052      	b.n	800bf42 <lcd_clear_point+0x146>
            case PNT_6:
                g_lcd_map[REG_9] &= ~(1 << BIT_3);
 800be9c:	4b2c      	ldr	r3, [pc, #176]	; (800bf50 <lcd_clear_point+0x154>)
 800be9e:	7a5b      	ldrb	r3, [r3, #9]
 800bea0:	f023 0308 	bic.w	r3, r3, #8
 800bea4:	b2da      	uxtb	r2, r3
 800bea6:	4b2a      	ldr	r3, [pc, #168]	; (800bf50 <lcd_clear_point+0x154>)
 800bea8:	725a      	strb	r2, [r3, #9]
            break;
 800beaa:	e04a      	b.n	800bf42 <lcd_clear_point+0x146>
            default:
            break;
        }
    }
    else if (line == LOW_ROW)
 800beac:	79fb      	ldrb	r3, [r7, #7]
 800beae:	2b01      	cmp	r3, #1
 800beb0:	d144      	bne.n	800bf3c <lcd_clear_point+0x140>
    {
        switch (point)
 800beb2:	79bb      	ldrb	r3, [r7, #6]
 800beb4:	2b05      	cmp	r3, #5
 800beb6:	d843      	bhi.n	800bf40 <lcd_clear_point+0x144>
 800beb8:	a201      	add	r2, pc, #4	; (adr r2, 800bec0 <lcd_clear_point+0xc4>)
 800beba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bebe:	bf00      	nop
 800bec0:	0800bed9 	.word	0x0800bed9
 800bec4:	0800bee9 	.word	0x0800bee9
 800bec8:	0800bef9 	.word	0x0800bef9
 800becc:	0800bf09 	.word	0x0800bf09
 800bed0:	0800bf19 	.word	0x0800bf19
 800bed4:	0800bf29 	.word	0x0800bf29
        {
            case PNT_0:
                g_lcd_map[REG_7] &= ~(1 << BIT_2);
 800bed8:	4b1d      	ldr	r3, [pc, #116]	; (800bf50 <lcd_clear_point+0x154>)
 800beda:	79db      	ldrb	r3, [r3, #7]
 800bedc:	f023 0304 	bic.w	r3, r3, #4
 800bee0:	b2da      	uxtb	r2, r3
 800bee2:	4b1b      	ldr	r3, [pc, #108]	; (800bf50 <lcd_clear_point+0x154>)
 800bee4:	71da      	strb	r2, [r3, #7]
            break;
 800bee6:	e02c      	b.n	800bf42 <lcd_clear_point+0x146>
            case PNT_1:
                g_lcd_map[REG_7] &= ~(1 << BIT_0);
 800bee8:	4b19      	ldr	r3, [pc, #100]	; (800bf50 <lcd_clear_point+0x154>)
 800beea:	79db      	ldrb	r3, [r3, #7]
 800beec:	f023 0301 	bic.w	r3, r3, #1
 800bef0:	b2da      	uxtb	r2, r3
 800bef2:	4b17      	ldr	r3, [pc, #92]	; (800bf50 <lcd_clear_point+0x154>)
 800bef4:	71da      	strb	r2, [r3, #7]
            break;
 800bef6:	e024      	b.n	800bf42 <lcd_clear_point+0x146>
            case PNT_2:
                g_lcd_map[REG_6] &= ~(1 << BIT_6);
 800bef8:	4b15      	ldr	r3, [pc, #84]	; (800bf50 <lcd_clear_point+0x154>)
 800befa:	799b      	ldrb	r3, [r3, #6]
 800befc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf00:	b2da      	uxtb	r2, r3
 800bf02:	4b13      	ldr	r3, [pc, #76]	; (800bf50 <lcd_clear_point+0x154>)
 800bf04:	719a      	strb	r2, [r3, #6]
            break;
 800bf06:	e01c      	b.n	800bf42 <lcd_clear_point+0x146>
            case PNT_3:
                g_lcd_map[REG_6] &= ~(1 << BIT_4);
 800bf08:	4b11      	ldr	r3, [pc, #68]	; (800bf50 <lcd_clear_point+0x154>)
 800bf0a:	799b      	ldrb	r3, [r3, #6]
 800bf0c:	f023 0310 	bic.w	r3, r3, #16
 800bf10:	b2da      	uxtb	r2, r3
 800bf12:	4b0f      	ldr	r3, [pc, #60]	; (800bf50 <lcd_clear_point+0x154>)
 800bf14:	719a      	strb	r2, [r3, #6]
            break;
 800bf16:	e014      	b.n	800bf42 <lcd_clear_point+0x146>
            case PNT_4:
                g_lcd_map[REG_6] &= ~(1 << BIT_2);
 800bf18:	4b0d      	ldr	r3, [pc, #52]	; (800bf50 <lcd_clear_point+0x154>)
 800bf1a:	799b      	ldrb	r3, [r3, #6]
 800bf1c:	f023 0304 	bic.w	r3, r3, #4
 800bf20:	b2da      	uxtb	r2, r3
 800bf22:	4b0b      	ldr	r3, [pc, #44]	; (800bf50 <lcd_clear_point+0x154>)
 800bf24:	719a      	strb	r2, [r3, #6]
            break;
 800bf26:	e00c      	b.n	800bf42 <lcd_clear_point+0x146>
            case PNT_5:
                g_lcd_map[REG_6] &= ~(1 << BIT_0);
 800bf28:	4b09      	ldr	r3, [pc, #36]	; (800bf50 <lcd_clear_point+0x154>)
 800bf2a:	799b      	ldrb	r3, [r3, #6]
 800bf2c:	f023 0301 	bic.w	r3, r3, #1
 800bf30:	b2da      	uxtb	r2, r3
 800bf32:	4b07      	ldr	r3, [pc, #28]	; (800bf50 <lcd_clear_point+0x154>)
 800bf34:	719a      	strb	r2, [r3, #6]
            break;
 800bf36:	e004      	b.n	800bf42 <lcd_clear_point+0x146>
            break;
 800bf38:	bf00      	nop
 800bf3a:	e002      	b.n	800bf42 <lcd_clear_point+0x146>
            default:
            break;
        }
    }
 800bf3c:	bf00      	nop
 800bf3e:	e000      	b.n	800bf42 <lcd_clear_point+0x146>
            break;
 800bf40:	bf00      	nop
}
 800bf42:	bf00      	nop
 800bf44:	370c      	adds	r7, #12
 800bf46:	46bd      	mov	sp, r7
 800bf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4c:	4770      	bx	lr
 800bf4e:	bf00      	nop
 800bf50:	20001a38 	.word	0x20001a38

0800bf54 <lcd_clear_time_unit>:

    pcf8553_blink(blink_speed);
}

void lcd_clear_time_unit(fmc_unit_time_t time_unit, blink_t blink_speed)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b082      	sub	sp, #8
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	460a      	mov	r2, r1
 800bf5e:	71fb      	strb	r3, [r7, #7]
 800bf60:	4613      	mov	r3, r2
 800bf62:	71bb      	strb	r3, [r7, #6]
    switch (time_unit)
 800bf64:	79fb      	ldrb	r3, [r7, #7]
 800bf66:	2b03      	cmp	r3, #3
 800bf68:	d82a      	bhi.n	800bfc0 <lcd_clear_time_unit+0x6c>
 800bf6a:	a201      	add	r2, pc, #4	; (adr r2, 800bf70 <lcd_clear_time_unit+0x1c>)
 800bf6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf70:	0800bf81 	.word	0x0800bf81
 800bf74:	0800bf91 	.word	0x0800bf91
 800bf78:	0800bfa1 	.word	0x0800bfa1
 800bf7c:	0800bfb1 	.word	0x0800bfb1
    {
        case H:
            g_lcd_map[REG_5] &= ~(1 << BIT_6);
 800bf80:	4b14      	ldr	r3, [pc, #80]	; (800bfd4 <lcd_clear_time_unit+0x80>)
 800bf82:	795b      	ldrb	r3, [r3, #5]
 800bf84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf88:	b2da      	uxtb	r2, r3
 800bf8a:	4b12      	ldr	r3, [pc, #72]	; (800bfd4 <lcd_clear_time_unit+0x80>)
 800bf8c:	715a      	strb	r2, [r3, #5]
        break;
 800bf8e:	e018      	b.n	800bfc2 <lcd_clear_time_unit+0x6e>
        case D:
            g_lcd_map[REG_9] &= ~(1 << BIT_5);
 800bf90:	4b10      	ldr	r3, [pc, #64]	; (800bfd4 <lcd_clear_time_unit+0x80>)
 800bf92:	7a5b      	ldrb	r3, [r3, #9]
 800bf94:	f023 0320 	bic.w	r3, r3, #32
 800bf98:	b2da      	uxtb	r2, r3
 800bf9a:	4b0e      	ldr	r3, [pc, #56]	; (800bfd4 <lcd_clear_time_unit+0x80>)
 800bf9c:	725a      	strb	r2, [r3, #9]
        break;
 800bf9e:	e010      	b.n	800bfc2 <lcd_clear_time_unit+0x6e>
        case S:
            g_lcd_map[REG_10] &= ~(1 << BIT_5);
 800bfa0:	4b0c      	ldr	r3, [pc, #48]	; (800bfd4 <lcd_clear_time_unit+0x80>)
 800bfa2:	7a9b      	ldrb	r3, [r3, #10]
 800bfa4:	f023 0320 	bic.w	r3, r3, #32
 800bfa8:	b2da      	uxtb	r2, r3
 800bfaa:	4b0a      	ldr	r3, [pc, #40]	; (800bfd4 <lcd_clear_time_unit+0x80>)
 800bfac:	729a      	strb	r2, [r3, #10]
        break;
 800bfae:	e008      	b.n	800bfc2 <lcd_clear_time_unit+0x6e>
        case M:
            g_lcd_map[REG_9] &= ~(1 << BIT_7);
 800bfb0:	4b08      	ldr	r3, [pc, #32]	; (800bfd4 <lcd_clear_time_unit+0x80>)
 800bfb2:	7a5b      	ldrb	r3, [r3, #9]
 800bfb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfb8:	b2da      	uxtb	r2, r3
 800bfba:	4b06      	ldr	r3, [pc, #24]	; (800bfd4 <lcd_clear_time_unit+0x80>)
 800bfbc:	725a      	strb	r2, [r3, #9]
        break;
 800bfbe:	e000      	b.n	800bfc2 <lcd_clear_time_unit+0x6e>
        default:
        break;
 800bfc0:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 800bfc2:	79bb      	ldrb	r3, [r7, #6]
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f001 faff 	bl	800d5c8 <pcf8553_blink>
}
 800bfca:	bf00      	nop
 800bfcc:	3708      	adds	r7, #8
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}
 800bfd2:	bf00      	nop
 800bfd4:	20001a38 	.word	0x20001a38

0800bfd8 <lcd_clear_vol_unit>:

void lcd_clear_vol_unit(fmc_unit_volume_t vol_unit, blink_t blink_speed)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b082      	sub	sp, #8
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	4603      	mov	r3, r0
 800bfe0:	460a      	mov	r2, r1
 800bfe2:	71fb      	strb	r3, [r7, #7]
 800bfe4:	4613      	mov	r3, r2
 800bfe6:	71bb      	strb	r3, [r7, #6]
    switch (vol_unit)
 800bfe8:	79fb      	ldrb	r3, [r7, #7]
 800bfea:	2b06      	cmp	r3, #6
 800bfec:	f200 81e3 	bhi.w	800c3b6 <lcd_clear_vol_unit+0x3de>
 800bff0:	a201      	add	r2, pc, #4	; (adr r2, 800bff8 <lcd_clear_vol_unit+0x20>)
 800bff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bff6:	bf00      	nop
 800bff8:	0800c015 	.word	0x0800c015
 800bffc:	0800c107 	.word	0x0800c107
 800c000:	0800c06b 	.word	0x0800c06b
 800c004:	0800c27d 	.word	0x0800c27d
 800c008:	0800c1b1 	.word	0x0800c1b1
 800c00c:	0800c2fd 	.word	0x0800c2fd
 800c010:	0800c37d 	.word	0x0800c37d
    {
        case LT:
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 800c014:	4b98      	ldr	r3, [pc, #608]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c016:	7bdb      	ldrb	r3, [r3, #15]
 800c018:	f023 0320 	bic.w	r3, r3, #32
 800c01c:	b2da      	uxtb	r2, r3
 800c01e:	4b96      	ldr	r3, [pc, #600]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c020:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 800c022:	4b95      	ldr	r3, [pc, #596]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c024:	781b      	ldrb	r3, [r3, #0]
 800c026:	f023 0320 	bic.w	r3, r3, #32
 800c02a:	b2da      	uxtb	r2, r3
 800c02c:	4b92      	ldr	r3, [pc, #584]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c02e:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_5);
 800c030:	4b91      	ldr	r3, [pc, #580]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c032:	795b      	ldrb	r3, [r3, #5]
 800c034:	f023 0320 	bic.w	r3, r3, #32
 800c038:	b2da      	uxtb	r2, r3
 800c03a:	4b8f      	ldr	r3, [pc, #572]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c03c:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 800c03e:	4b8e      	ldr	r3, [pc, #568]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c040:	7b9b      	ldrb	r3, [r3, #14]
 800c042:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c046:	b2da      	uxtb	r2, r3
 800c048:	4b8b      	ldr	r3, [pc, #556]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c04a:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_10] &= ~(1 << BIT_0);
 800c04c:	4b8a      	ldr	r3, [pc, #552]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c04e:	7a9b      	ldrb	r3, [r3, #10]
 800c050:	f023 0301 	bic.w	r3, r3, #1
 800c054:	b2da      	uxtb	r2, r3
 800c056:	4b88      	ldr	r3, [pc, #544]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c058:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_9] &= ~(1 << BIT_6);
 800c05a:	4b87      	ldr	r3, [pc, #540]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c05c:	7a5b      	ldrb	r3, [r3, #9]
 800c05e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c062:	b2da      	uxtb	r2, r3
 800c064:	4b84      	ldr	r3, [pc, #528]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c066:	725a      	strb	r2, [r3, #9]
        break;
 800c068:	e1a6      	b.n	800c3b8 <lcd_clear_vol_unit+0x3e0>
        case KG:
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 800c06a:	4b83      	ldr	r3, [pc, #524]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c06c:	7bdb      	ldrb	r3, [r3, #15]
 800c06e:	f023 0320 	bic.w	r3, r3, #32
 800c072:	b2da      	uxtb	r2, r3
 800c074:	4b80      	ldr	r3, [pc, #512]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c076:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_4);
 800c078:	4b7f      	ldr	r3, [pc, #508]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c07a:	7bdb      	ldrb	r3, [r3, #15]
 800c07c:	f023 0310 	bic.w	r3, r3, #16
 800c080:	b2da      	uxtb	r2, r3
 800c082:	4b7d      	ldr	r3, [pc, #500]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c084:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_2);
 800c086:	4b7c      	ldr	r3, [pc, #496]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c088:	7bdb      	ldrb	r3, [r3, #15]
 800c08a:	f023 0304 	bic.w	r3, r3, #4
 800c08e:	b2da      	uxtb	r2, r3
 800c090:	4b79      	ldr	r3, [pc, #484]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c092:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 800c094:	4b78      	ldr	r3, [pc, #480]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c096:	781b      	ldrb	r3, [r3, #0]
 800c098:	f023 0320 	bic.w	r3, r3, #32
 800c09c:	b2da      	uxtb	r2, r3
 800c09e:	4b76      	ldr	r3, [pc, #472]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c0a0:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_4);
 800c0a2:	4b75      	ldr	r3, [pc, #468]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c0a4:	795b      	ldrb	r3, [r3, #5]
 800c0a6:	f023 0310 	bic.w	r3, r3, #16
 800c0aa:	b2da      	uxtb	r2, r3
 800c0ac:	4b72      	ldr	r3, [pc, #456]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c0ae:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 800c0b0:	4b71      	ldr	r3, [pc, #452]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c0b2:	7b9b      	ldrb	r3, [r3, #14]
 800c0b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0b8:	b2da      	uxtb	r2, r3
 800c0ba:	4b6f      	ldr	r3, [pc, #444]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c0bc:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 800c0be:	4b6e      	ldr	r3, [pc, #440]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c0c0:	7bdb      	ldrb	r3, [r3, #15]
 800c0c2:	f023 0302 	bic.w	r3, r3, #2
 800c0c6:	b2da      	uxtb	r2, r3
 800c0c8:	4b6b      	ldr	r3, [pc, #428]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c0ca:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 800c0cc:	4b6a      	ldr	r3, [pc, #424]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c0ce:	781b      	ldrb	r3, [r3, #0]
 800c0d0:	f023 0301 	bic.w	r3, r3, #1
 800c0d4:	b2da      	uxtb	r2, r3
 800c0d6:	4b68      	ldr	r3, [pc, #416]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c0d8:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 800c0da:	4b67      	ldr	r3, [pc, #412]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c0dc:	781b      	ldrb	r3, [r3, #0]
 800c0de:	f023 0302 	bic.w	r3, r3, #2
 800c0e2:	b2da      	uxtb	r2, r3
 800c0e4:	4b64      	ldr	r3, [pc, #400]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c0e6:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] &= ~(1 << BIT_7);
 800c0e8:	4b63      	ldr	r3, [pc, #396]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c0ea:	791b      	ldrb	r3, [r3, #4]
 800c0ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0f0:	b2da      	uxtb	r2, r3
 800c0f2:	4b61      	ldr	r3, [pc, #388]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c0f4:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 800c0f6:	4b60      	ldr	r3, [pc, #384]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c0f8:	795b      	ldrb	r3, [r3, #5]
 800c0fa:	f023 0302 	bic.w	r3, r3, #2
 800c0fe:	b2da      	uxtb	r2, r3
 800c100:	4b5d      	ldr	r3, [pc, #372]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c102:	715a      	strb	r2, [r3, #5]
        break;
 800c104:	e158      	b.n	800c3b8 <lcd_clear_vol_unit+0x3e0>
        case M3:
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 800c106:	4b5c      	ldr	r3, [pc, #368]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c108:	7bdb      	ldrb	r3, [r3, #15]
 800c10a:	f023 0320 	bic.w	r3, r3, #32
 800c10e:	b2da      	uxtb	r2, r3
 800c110:	4b59      	ldr	r3, [pc, #356]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c112:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_10] &= ~(1 << BIT_2);
 800c114:	4b58      	ldr	r3, [pc, #352]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c116:	7a9b      	ldrb	r3, [r3, #10]
 800c118:	f023 0304 	bic.w	r3, r3, #4
 800c11c:	b2da      	uxtb	r2, r3
 800c11e:	4b56      	ldr	r3, [pc, #344]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c120:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_4);
 800c122:	4b55      	ldr	r3, [pc, #340]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c124:	7bdb      	ldrb	r3, [r3, #15]
 800c126:	f023 0310 	bic.w	r3, r3, #16
 800c12a:	b2da      	uxtb	r2, r3
 800c12c:	4b52      	ldr	r3, [pc, #328]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c12e:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_3);
 800c130:	4b51      	ldr	r3, [pc, #324]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c132:	7bdb      	ldrb	r3, [r3, #15]
 800c134:	f023 0308 	bic.w	r3, r3, #8
 800c138:	b2da      	uxtb	r2, r3
 800c13a:	4b4f      	ldr	r3, [pc, #316]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c13c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 800c13e:	4b4e      	ldr	r3, [pc, #312]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c140:	781b      	ldrb	r3, [r3, #0]
 800c142:	f023 0320 	bic.w	r3, r3, #32
 800c146:	b2da      	uxtb	r2, r3
 800c148:	4b4b      	ldr	r3, [pc, #300]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c14a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_3);
 800c14c:	4b4a      	ldr	r3, [pc, #296]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c14e:	781b      	ldrb	r3, [r3, #0]
 800c150:	f023 0308 	bic.w	r3, r3, #8
 800c154:	b2da      	uxtb	r2, r3
 800c156:	4b48      	ldr	r3, [pc, #288]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c158:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 800c15a:	4b47      	ldr	r3, [pc, #284]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c15c:	7b9b      	ldrb	r3, [r3, #14]
 800c15e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c162:	b2da      	uxtb	r2, r3
 800c164:	4b44      	ldr	r3, [pc, #272]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c166:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_19] &= ~(1 << BIT_7);
 800c168:	4b43      	ldr	r3, [pc, #268]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c16a:	7cdb      	ldrb	r3, [r3, #19]
 800c16c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c170:	b2da      	uxtb	r2, r3
 800c172:	4b41      	ldr	r3, [pc, #260]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c174:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] &= ~(1 << BIT_6);
 800c176:	4b40      	ldr	r3, [pc, #256]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c178:	7cdb      	ldrb	r3, [r3, #19]
 800c17a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c17e:	b2da      	uxtb	r2, r3
 800c180:	4b3d      	ldr	r3, [pc, #244]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c182:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 800c184:	4b3c      	ldr	r3, [pc, #240]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c186:	781b      	ldrb	r3, [r3, #0]
 800c188:	f023 0301 	bic.w	r3, r3, #1
 800c18c:	b2da      	uxtb	r2, r3
 800c18e:	4b3a      	ldr	r3, [pc, #232]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c190:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] &= ~(1 << BIT_7);
 800c192:	4b39      	ldr	r3, [pc, #228]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c194:	791b      	ldrb	r3, [r3, #4]
 800c196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c19a:	b2da      	uxtb	r2, r3
 800c19c:	4b36      	ldr	r3, [pc, #216]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c19e:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 800c1a0:	4b35      	ldr	r3, [pc, #212]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c1a2:	795b      	ldrb	r3, [r3, #5]
 800c1a4:	f023 0302 	bic.w	r3, r3, #2
 800c1a8:	b2da      	uxtb	r2, r3
 800c1aa:	4b33      	ldr	r3, [pc, #204]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c1ac:	715a      	strb	r2, [r3, #5]
        break;
 800c1ae:	e103      	b.n	800c3b8 <lcd_clear_vol_unit+0x3e0>
        case BR:
            g_lcd_map[REG_10] &= ~(1 << BIT_3);
 800c1b0:	4b31      	ldr	r3, [pc, #196]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c1b2:	7a9b      	ldrb	r3, [r3, #10]
 800c1b4:	f023 0308 	bic.w	r3, r3, #8
 800c1b8:	b2da      	uxtb	r2, r3
 800c1ba:	4b2f      	ldr	r3, [pc, #188]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c1bc:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_10] &= ~(1 << BIT_4);
 800c1be:	4b2e      	ldr	r3, [pc, #184]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c1c0:	7a9b      	ldrb	r3, [r3, #10]
 800c1c2:	f023 0310 	bic.w	r3, r3, #16
 800c1c6:	b2da      	uxtb	r2, r3
 800c1c8:	4b2b      	ldr	r3, [pc, #172]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c1ca:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_3);
 800c1cc:	4b2a      	ldr	r3, [pc, #168]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c1ce:	7bdb      	ldrb	r3, [r3, #15]
 800c1d0:	f023 0308 	bic.w	r3, r3, #8
 800c1d4:	b2da      	uxtb	r2, r3
 800c1d6:	4b28      	ldr	r3, [pc, #160]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c1d8:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 800c1da:	4b27      	ldr	r3, [pc, #156]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	f023 0310 	bic.w	r3, r3, #16
 800c1e2:	b2da      	uxtb	r2, r3
 800c1e4:	4b24      	ldr	r3, [pc, #144]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c1e6:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_2);
 800c1e8:	4b23      	ldr	r3, [pc, #140]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c1ea:	795b      	ldrb	r3, [r3, #5]
 800c1ec:	f023 0304 	bic.w	r3, r3, #4
 800c1f0:	b2da      	uxtb	r2, r3
 800c1f2:	4b21      	ldr	r3, [pc, #132]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c1f4:	715a      	strb	r2, [r3, #5]
            g_lcd_map[REG_0] &= ~(1 << BIT_3);
 800c1f6:	4b20      	ldr	r3, [pc, #128]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c1f8:	781b      	ldrb	r3, [r3, #0]
 800c1fa:	f023 0308 	bic.w	r3, r3, #8
 800c1fe:	b2da      	uxtb	r2, r3
 800c200:	4b1d      	ldr	r3, [pc, #116]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c202:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_5);
 800c204:	4b1c      	ldr	r3, [pc, #112]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c206:	795b      	ldrb	r3, [r3, #5]
 800c208:	f023 0320 	bic.w	r3, r3, #32
 800c20c:	b2da      	uxtb	r2, r3
 800c20e:	4b1a      	ldr	r3, [pc, #104]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c210:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 800c212:	4b19      	ldr	r3, [pc, #100]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c214:	7b9b      	ldrb	r3, [r3, #14]
 800c216:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c21a:	b2da      	uxtb	r2, r3
 800c21c:	4b16      	ldr	r3, [pc, #88]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c21e:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 800c220:	4b15      	ldr	r3, [pc, #84]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c222:	7bdb      	ldrb	r3, [r3, #15]
 800c224:	f023 0302 	bic.w	r3, r3, #2
 800c228:	b2da      	uxtb	r2, r3
 800c22a:	4b13      	ldr	r3, [pc, #76]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c22c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] &= ~(1 << BIT_7);
 800c22e:	4b12      	ldr	r3, [pc, #72]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c230:	7cdb      	ldrb	r3, [r3, #19]
 800c232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c236:	b2da      	uxtb	r2, r3
 800c238:	4b0f      	ldr	r3, [pc, #60]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c23a:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] &= ~(1 << BIT_6);
 800c23c:	4b0e      	ldr	r3, [pc, #56]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c23e:	7cdb      	ldrb	r3, [r3, #19]
 800c240:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c244:	b2da      	uxtb	r2, r3
 800c246:	4b0c      	ldr	r3, [pc, #48]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c248:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 800c24a:	4b0b      	ldr	r3, [pc, #44]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c24c:	781b      	ldrb	r3, [r3, #0]
 800c24e:	f023 0301 	bic.w	r3, r3, #1
 800c252:	b2da      	uxtb	r2, r3
 800c254:	4b08      	ldr	r3, [pc, #32]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c256:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 800c258:	4b07      	ldr	r3, [pc, #28]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c25a:	781b      	ldrb	r3, [r3, #0]
 800c25c:	f023 0302 	bic.w	r3, r3, #2
 800c260:	b2da      	uxtb	r2, r3
 800c262:	4b05      	ldr	r3, [pc, #20]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c264:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_0);
 800c266:	4b04      	ldr	r3, [pc, #16]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c268:	795b      	ldrb	r3, [r3, #5]
 800c26a:	f023 0301 	bic.w	r3, r3, #1
 800c26e:	b2da      	uxtb	r2, r3
 800c270:	4b01      	ldr	r3, [pc, #4]	; (800c278 <lcd_clear_vol_unit+0x2a0>)
 800c272:	715a      	strb	r2, [r3, #5]
        break;
 800c274:	e0a0      	b.n	800c3b8 <lcd_clear_vol_unit+0x3e0>
 800c276:	bf00      	nop
 800c278:	20001a38 	.word	0x20001a38
        case GL:
            g_lcd_map[REG_10] &= ~(1 << BIT_3);
 800c27c:	4b52      	ldr	r3, [pc, #328]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c27e:	7a9b      	ldrb	r3, [r3, #10]
 800c280:	f023 0308 	bic.w	r3, r3, #8
 800c284:	b2da      	uxtb	r2, r3
 800c286:	4b50      	ldr	r3, [pc, #320]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c288:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 800c28a:	4b4f      	ldr	r3, [pc, #316]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c28c:	7bdb      	ldrb	r3, [r3, #15]
 800c28e:	f023 0320 	bic.w	r3, r3, #32
 800c292:	b2da      	uxtb	r2, r3
 800c294:	4b4c      	ldr	r3, [pc, #304]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c296:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 800c298:	4b4b      	ldr	r3, [pc, #300]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	f023 0310 	bic.w	r3, r3, #16
 800c2a0:	b2da      	uxtb	r2, r3
 800c2a2:	4b49      	ldr	r3, [pc, #292]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c2a4:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 800c2a6:	4b48      	ldr	r3, [pc, #288]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c2a8:	781b      	ldrb	r3, [r3, #0]
 800c2aa:	f023 0320 	bic.w	r3, r3, #32
 800c2ae:	b2da      	uxtb	r2, r3
 800c2b0:	4b45      	ldr	r3, [pc, #276]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c2b2:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_3);
 800c2b4:	4b44      	ldr	r3, [pc, #272]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c2b6:	781b      	ldrb	r3, [r3, #0]
 800c2b8:	f023 0308 	bic.w	r3, r3, #8
 800c2bc:	b2da      	uxtb	r2, r3
 800c2be:	4b42      	ldr	r3, [pc, #264]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c2c0:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_5);
 800c2c2:	4b41      	ldr	r3, [pc, #260]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c2c4:	795b      	ldrb	r3, [r3, #5]
 800c2c6:	f023 0320 	bic.w	r3, r3, #32
 800c2ca:	b2da      	uxtb	r2, r3
 800c2cc:	4b3e      	ldr	r3, [pc, #248]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c2ce:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 800c2d0:	4b3d      	ldr	r3, [pc, #244]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c2d2:	7bdb      	ldrb	r3, [r3, #15]
 800c2d4:	f023 0302 	bic.w	r3, r3, #2
 800c2d8:	b2da      	uxtb	r2, r3
 800c2da:	4b3b      	ldr	r3, [pc, #236]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c2dc:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 800c2de:	4b3a      	ldr	r3, [pc, #232]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	f023 0302 	bic.w	r3, r3, #2
 800c2e6:	b2da      	uxtb	r2, r3
 800c2e8:	4b37      	ldr	r3, [pc, #220]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c2ea:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 800c2ec:	4b36      	ldr	r3, [pc, #216]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c2ee:	795b      	ldrb	r3, [r3, #5]
 800c2f0:	f023 0302 	bic.w	r3, r3, #2
 800c2f4:	b2da      	uxtb	r2, r3
 800c2f6:	4b34      	ldr	r3, [pc, #208]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c2f8:	715a      	strb	r2, [r3, #5]
        break;
 800c2fa:	e05d      	b.n	800c3b8 <lcd_clear_vol_unit+0x3e0>
        case CELSIUS:
            g_lcd_map[REG_10] &= ~(1 << BIT_3);
 800c2fc:	4b32      	ldr	r3, [pc, #200]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c2fe:	7a9b      	ldrb	r3, [r3, #10]
 800c300:	f023 0308 	bic.w	r3, r3, #8
 800c304:	b2da      	uxtb	r2, r3
 800c306:	4b30      	ldr	r3, [pc, #192]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c308:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 800c30a:	4b2f      	ldr	r3, [pc, #188]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c30c:	7bdb      	ldrb	r3, [r3, #15]
 800c30e:	f023 0320 	bic.w	r3, r3, #32
 800c312:	b2da      	uxtb	r2, r3
 800c314:	4b2c      	ldr	r3, [pc, #176]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c316:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_3);
 800c318:	4b2b      	ldr	r3, [pc, #172]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c31a:	7bdb      	ldrb	r3, [r3, #15]
 800c31c:	f023 0308 	bic.w	r3, r3, #8
 800c320:	b2da      	uxtb	r2, r3
 800c322:	4b29      	ldr	r3, [pc, #164]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c324:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_2);
 800c326:	4b28      	ldr	r3, [pc, #160]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c328:	7bdb      	ldrb	r3, [r3, #15]
 800c32a:	f023 0304 	bic.w	r3, r3, #4
 800c32e:	b2da      	uxtb	r2, r3
 800c330:	4b25      	ldr	r3, [pc, #148]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c332:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 800c334:	4b24      	ldr	r3, [pc, #144]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c336:	781b      	ldrb	r3, [r3, #0]
 800c338:	f023 0310 	bic.w	r3, r3, #16
 800c33c:	b2da      	uxtb	r2, r3
 800c33e:	4b22      	ldr	r3, [pc, #136]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c340:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 800c342:	4b21      	ldr	r3, [pc, #132]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c344:	7b9b      	ldrb	r3, [r3, #14]
 800c346:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c34a:	b2da      	uxtb	r2, r3
 800c34c:	4b1e      	ldr	r3, [pc, #120]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c34e:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 800c350:	4b1d      	ldr	r3, [pc, #116]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c352:	7bdb      	ldrb	r3, [r3, #15]
 800c354:	f023 0302 	bic.w	r3, r3, #2
 800c358:	b2da      	uxtb	r2, r3
 800c35a:	4b1b      	ldr	r3, [pc, #108]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c35c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 800c35e:	4b1a      	ldr	r3, [pc, #104]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c360:	781b      	ldrb	r3, [r3, #0]
 800c362:	f023 0302 	bic.w	r3, r3, #2
 800c366:	b2da      	uxtb	r2, r3
 800c368:	4b17      	ldr	r3, [pc, #92]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c36a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 800c36c:	4b16      	ldr	r3, [pc, #88]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c36e:	795b      	ldrb	r3, [r3, #5]
 800c370:	f023 0302 	bic.w	r3, r3, #2
 800c374:	b2da      	uxtb	r2, r3
 800c376:	4b14      	ldr	r3, [pc, #80]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c378:	715a      	strb	r2, [r3, #5]
        break;
 800c37a:	e01d      	b.n	800c3b8 <lcd_clear_vol_unit+0x3e0>
        case NOTHING:
            g_lcd_map[REG_15] &= ~(1 << BIT_2);
 800c37c:	4b12      	ldr	r3, [pc, #72]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c37e:	7bdb      	ldrb	r3, [r3, #15]
 800c380:	f023 0304 	bic.w	r3, r3, #4
 800c384:	b2da      	uxtb	r2, r3
 800c386:	4b10      	ldr	r3, [pc, #64]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c388:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 800c38a:	4b0f      	ldr	r3, [pc, #60]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c38c:	781b      	ldrb	r3, [r3, #0]
 800c38e:	f023 0310 	bic.w	r3, r3, #16
 800c392:	b2da      	uxtb	r2, r3
 800c394:	4b0c      	ldr	r3, [pc, #48]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c396:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_19] &= ~(1 << BIT_6);
 800c398:	4b0b      	ldr	r3, [pc, #44]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c39a:	7cdb      	ldrb	r3, [r3, #19]
 800c39c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3a0:	b2da      	uxtb	r2, r3
 800c3a2:	4b09      	ldr	r3, [pc, #36]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c3a4:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 800c3a6:	4b08      	ldr	r3, [pc, #32]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c3a8:	781b      	ldrb	r3, [r3, #0]
 800c3aa:	f023 0301 	bic.w	r3, r3, #1
 800c3ae:	b2da      	uxtb	r2, r3
 800c3b0:	4b05      	ldr	r3, [pc, #20]	; (800c3c8 <lcd_clear_vol_unit+0x3f0>)
 800c3b2:	701a      	strb	r2, [r3, #0]
        break;
 800c3b4:	e000      	b.n	800c3b8 <lcd_clear_vol_unit+0x3e0>
        default:
        break;
 800c3b6:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 800c3b8:	79bb      	ldrb	r3, [r7, #6]
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f001 f904 	bl	800d5c8 <pcf8553_blink>
}
 800c3c0:	bf00      	nop
 800c3c2:	3708      	adds	r7, #8
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}
 800c3c8:	20001a38 	.word	0x20001a38

0800c3cc <lcd_init>:
 * borrándola.
 * @param  None
 * @retval None
 */
void lcd_init()
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	af00      	add	r7, sp, #0
    pcf8553_init();
 800c3d0:	f001 f96c 	bl	800d6ac <pcf8553_init>
}
 800c3d4:	bf00      	nop
 800c3d6:	bd80      	pop	{r7, pc}

0800c3d8 <lcd_put_char>:
 * elegida.
 * @param caracter a escribir tipo char, columna y fila de tipo uint8_t
 * @retval None
 */
void lcd_put_char(char c, uint8_t col, uint8_t row)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b082      	sub	sp, #8
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	4603      	mov	r3, r0
 800c3e0:	71fb      	strb	r3, [r7, #7]
 800c3e2:	460b      	mov	r3, r1
 800c3e4:	71bb      	strb	r3, [r7, #6]
 800c3e6:	4613      	mov	r3, r2
 800c3e8:	717b      	strb	r3, [r7, #5]
    g_row = row + 1;
 800c3ea:	797b      	ldrb	r3, [r7, #5]
 800c3ec:	3301      	adds	r3, #1
 800c3ee:	b2da      	uxtb	r2, r3
 800c3f0:	4beb      	ldr	r3, [pc, #940]	; (800c7a0 <lcd_put_char+0x3c8>)
 800c3f2:	701a      	strb	r2, [r3, #0]
//    if (g_buf[row][col] == c)
//    {
//        return;
//    }

    g_buf[row][col] = c;
 800c3f4:	797a      	ldrb	r2, [r7, #5]
 800c3f6:	79bb      	ldrb	r3, [r7, #6]
 800c3f8:	49ea      	ldr	r1, [pc, #936]	; (800c7a4 <lcd_put_char+0x3cc>)
 800c3fa:	00d2      	lsls	r2, r2, #3
 800c3fc:	440a      	add	r2, r1
 800c3fe:	4413      	add	r3, r2
 800c400:	79fa      	ldrb	r2, [r7, #7]
 800c402:	701a      	strb	r2, [r3, #0]

    switch (row)
 800c404:	797b      	ldrb	r3, [r7, #5]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d002      	beq.n	800c410 <lcd_put_char+0x38>
 800c40a:	2b01      	cmp	r3, #1
 800c40c:	d008      	beq.n	800c420 <lcd_put_char+0x48>
                return;
            }

        break;
        default:
            return;
 800c40e:	e1c4      	b.n	800c79a <lcd_put_char+0x3c2>
            if (col < LINE_0_DIGITS - 1)
 800c410:	79bb      	ldrb	r3, [r7, #6]
 800c412:	2b07      	cmp	r3, #7
 800c414:	f200 81bc 	bhi.w	800c790 <lcd_put_char+0x3b8>
                g_col = col;
 800c418:	4ae3      	ldr	r2, [pc, #908]	; (800c7a8 <lcd_put_char+0x3d0>)
 800c41a:	79bb      	ldrb	r3, [r7, #6]
 800c41c:	7013      	strb	r3, [r2, #0]
        break;
 800c41e:	e00a      	b.n	800c436 <lcd_put_char+0x5e>
            if (col < LINE_1_DIGITS - 1)
 800c420:	79bb      	ldrb	r3, [r7, #6]
 800c422:	2b06      	cmp	r3, #6
 800c424:	f200 81b6 	bhi.w	800c794 <lcd_put_char+0x3bc>
                g_col = 6 - col; // @suppress("Avoid magic numbers")
 800c428:	79bb      	ldrb	r3, [r7, #6]
 800c42a:	f1c3 0306 	rsb	r3, r3, #6
 800c42e:	b2da      	uxtb	r2, r3
 800c430:	4bdd      	ldr	r3, [pc, #884]	; (800c7a8 <lcd_put_char+0x3d0>)
 800c432:	701a      	strb	r2, [r3, #0]
        break;
 800c434:	bf00      	nop
        break;
    }

    switch (c)
 800c436:	79fb      	ldrb	r3, [r7, #7]
 800c438:	3b20      	subs	r3, #32
 800c43a:	2b19      	cmp	r3, #25
 800c43c:	f200 81ac 	bhi.w	800c798 <lcd_put_char+0x3c0>
 800c440:	a201      	add	r2, pc, #4	; (adr r2, 800c448 <lcd_put_char+0x70>)
 800c442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c446:	bf00      	nop
 800c448:	0800c4b1 	.word	0x0800c4b1
 800c44c:	0800c799 	.word	0x0800c799
 800c450:	0800c799 	.word	0x0800c799
 800c454:	0800c799 	.word	0x0800c799
 800c458:	0800c799 	.word	0x0800c799
 800c45c:	0800c799 	.word	0x0800c799
 800c460:	0800c799 	.word	0x0800c799
 800c464:	0800c799 	.word	0x0800c799
 800c468:	0800c799 	.word	0x0800c799
 800c46c:	0800c799 	.word	0x0800c799
 800c470:	0800c799 	.word	0x0800c799
 800c474:	0800c799 	.word	0x0800c799
 800c478:	0800c799 	.word	0x0800c799
 800c47c:	0800c799 	.word	0x0800c799
 800c480:	0800c4f3 	.word	0x0800c4f3
 800c484:	0800c799 	.word	0x0800c799
 800c488:	0800c4fd 	.word	0x0800c4fd
 800c48c:	0800c53f 	.word	0x0800c53f
 800c490:	0800c581 	.word	0x0800c581
 800c494:	0800c5c3 	.word	0x0800c5c3
 800c498:	0800c605 	.word	0x0800c605
 800c49c:	0800c647 	.word	0x0800c647
 800c4a0:	0800c689 	.word	0x0800c689
 800c4a4:	0800c6cb 	.word	0x0800c6cb
 800c4a8:	0800c70d 	.word	0x0800c70d
 800c4ac:	0800c74f 	.word	0x0800c74f
    {
        case ' ':
            lcd_write_line(SEG_A, 0);
 800c4b0:	2100      	movs	r1, #0
 800c4b2:	2000      	movs	r0, #0
 800c4b4:	f000 ffaa 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 800c4b8:	2100      	movs	r1, #0
 800c4ba:	2001      	movs	r0, #1
 800c4bc:	f000 ffa6 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_C, 0);
 800c4c0:	2100      	movs	r1, #0
 800c4c2:	2002      	movs	r0, #2
 800c4c4:	f000 ffa2 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 800c4c8:	2100      	movs	r1, #0
 800c4ca:	2003      	movs	r0, #3
 800c4cc:	f000 ff9e 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 800c4d0:	2100      	movs	r1, #0
 800c4d2:	2004      	movs	r0, #4
 800c4d4:	f000 ff9a 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_F, 0);
 800c4d8:	2100      	movs	r1, #0
 800c4da:	2005      	movs	r0, #5
 800c4dc:	f000 ff96 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_G, 0);
 800c4e0:	2100      	movs	r1, #0
 800c4e2:	2006      	movs	r0, #6
 800c4e4:	f000 ff92 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 800c4e8:	2100      	movs	r1, #0
 800c4ea:	2007      	movs	r0, #7
 800c4ec:	f000 ff8e 	bl	800d40c <lcd_write_line>
        break;
 800c4f0:	e153      	b.n	800c79a <lcd_put_char+0x3c2>
        case '.':
            lcd_write_line(SEG_H, 1);
 800c4f2:	2101      	movs	r1, #1
 800c4f4:	2007      	movs	r0, #7
 800c4f6:	f000 ff89 	bl	800d40c <lcd_write_line>
        break;
 800c4fa:	e14e      	b.n	800c79a <lcd_put_char+0x3c2>
        case '0':
            lcd_write_line(SEG_A, 1);
 800c4fc:	2101      	movs	r1, #1
 800c4fe:	2000      	movs	r0, #0
 800c500:	f000 ff84 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 800c504:	2101      	movs	r1, #1
 800c506:	2001      	movs	r0, #1
 800c508:	f000 ff80 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 800c50c:	2101      	movs	r1, #1
 800c50e:	2002      	movs	r0, #2
 800c510:	f000 ff7c 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 800c514:	2100      	movs	r1, #0
 800c516:	2003      	movs	r0, #3
 800c518:	f000 ff78 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 800c51c:	2101      	movs	r1, #1
 800c51e:	2004      	movs	r0, #4
 800c520:	f000 ff74 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 800c524:	2101      	movs	r1, #1
 800c526:	2005      	movs	r0, #5
 800c528:	f000 ff70 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 800c52c:	2101      	movs	r1, #1
 800c52e:	2006      	movs	r0, #6
 800c530:	f000 ff6c 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 800c534:	2100      	movs	r1, #0
 800c536:	2007      	movs	r0, #7
 800c538:	f000 ff68 	bl	800d40c <lcd_write_line>
        break;
 800c53c:	e12d      	b.n	800c79a <lcd_put_char+0x3c2>
        case '1':
            lcd_write_line(SEG_A, 0);
 800c53e:	2100      	movs	r1, #0
 800c540:	2000      	movs	r0, #0
 800c542:	f000 ff63 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 800c546:	2100      	movs	r1, #0
 800c548:	2001      	movs	r0, #1
 800c54a:	f000 ff5f 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 800c54e:	2101      	movs	r1, #1
 800c550:	2002      	movs	r0, #2
 800c552:	f000 ff5b 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 800c556:	2100      	movs	r1, #0
 800c558:	2003      	movs	r0, #3
 800c55a:	f000 ff57 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 800c55e:	2100      	movs	r1, #0
 800c560:	2004      	movs	r0, #4
 800c562:	f000 ff53 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 800c566:	2101      	movs	r1, #1
 800c568:	2005      	movs	r0, #5
 800c56a:	f000 ff4f 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_G, 0);
 800c56e:	2100      	movs	r1, #0
 800c570:	2006      	movs	r0, #6
 800c572:	f000 ff4b 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 800c576:	2100      	movs	r1, #0
 800c578:	2007      	movs	r0, #7
 800c57a:	f000 ff47 	bl	800d40c <lcd_write_line>
        break;
 800c57e:	e10c      	b.n	800c79a <lcd_put_char+0x3c2>
        case '2':
            lcd_write_line(SEG_A, 1);
 800c580:	2101      	movs	r1, #1
 800c582:	2000      	movs	r0, #0
 800c584:	f000 ff42 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 800c588:	2101      	movs	r1, #1
 800c58a:	2001      	movs	r0, #1
 800c58c:	f000 ff3e 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_C, 0);
 800c590:	2100      	movs	r1, #0
 800c592:	2002      	movs	r0, #2
 800c594:	f000 ff3a 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 800c598:	2101      	movs	r1, #1
 800c59a:	2003      	movs	r0, #3
 800c59c:	f000 ff36 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 800c5a0:	2100      	movs	r1, #0
 800c5a2:	2004      	movs	r0, #4
 800c5a4:	f000 ff32 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 800c5a8:	2101      	movs	r1, #1
 800c5aa:	2005      	movs	r0, #5
 800c5ac:	f000 ff2e 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 800c5b0:	2101      	movs	r1, #1
 800c5b2:	2006      	movs	r0, #6
 800c5b4:	f000 ff2a 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 800c5b8:	2100      	movs	r1, #0
 800c5ba:	2007      	movs	r0, #7
 800c5bc:	f000 ff26 	bl	800d40c <lcd_write_line>
        break;
 800c5c0:	e0eb      	b.n	800c79a <lcd_put_char+0x3c2>
        case '3':
            lcd_write_line(SEG_A, 1);
 800c5c2:	2101      	movs	r1, #1
 800c5c4:	2000      	movs	r0, #0
 800c5c6:	f000 ff21 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 800c5ca:	2100      	movs	r1, #0
 800c5cc:	2001      	movs	r0, #1
 800c5ce:	f000 ff1d 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 800c5d2:	2101      	movs	r1, #1
 800c5d4:	2002      	movs	r0, #2
 800c5d6:	f000 ff19 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 800c5da:	2101      	movs	r1, #1
 800c5dc:	2003      	movs	r0, #3
 800c5de:	f000 ff15 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 800c5e2:	2100      	movs	r1, #0
 800c5e4:	2004      	movs	r0, #4
 800c5e6:	f000 ff11 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 800c5ea:	2101      	movs	r1, #1
 800c5ec:	2005      	movs	r0, #5
 800c5ee:	f000 ff0d 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 800c5f2:	2101      	movs	r1, #1
 800c5f4:	2006      	movs	r0, #6
 800c5f6:	f000 ff09 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 800c5fa:	2100      	movs	r1, #0
 800c5fc:	2007      	movs	r0, #7
 800c5fe:	f000 ff05 	bl	800d40c <lcd_write_line>
        break;
 800c602:	e0ca      	b.n	800c79a <lcd_put_char+0x3c2>
        case '4':
            lcd_write_line(SEG_A, 0);
 800c604:	2100      	movs	r1, #0
 800c606:	2000      	movs	r0, #0
 800c608:	f000 ff00 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 800c60c:	2100      	movs	r1, #0
 800c60e:	2001      	movs	r0, #1
 800c610:	f000 fefc 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 800c614:	2101      	movs	r1, #1
 800c616:	2002      	movs	r0, #2
 800c618:	f000 fef8 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 800c61c:	2101      	movs	r1, #1
 800c61e:	2003      	movs	r0, #3
 800c620:	f000 fef4 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 800c624:	2101      	movs	r1, #1
 800c626:	2004      	movs	r0, #4
 800c628:	f000 fef0 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 800c62c:	2101      	movs	r1, #1
 800c62e:	2005      	movs	r0, #5
 800c630:	f000 feec 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_G, 0);
 800c634:	2100      	movs	r1, #0
 800c636:	2006      	movs	r0, #6
 800c638:	f000 fee8 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 800c63c:	2100      	movs	r1, #0
 800c63e:	2007      	movs	r0, #7
 800c640:	f000 fee4 	bl	800d40c <lcd_write_line>
        break;
 800c644:	e0a9      	b.n	800c79a <lcd_put_char+0x3c2>
        case '5':
            lcd_write_line(SEG_A, 1);
 800c646:	2101      	movs	r1, #1
 800c648:	2000      	movs	r0, #0
 800c64a:	f000 fedf 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 800c64e:	2100      	movs	r1, #0
 800c650:	2001      	movs	r0, #1
 800c652:	f000 fedb 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 800c656:	2101      	movs	r1, #1
 800c658:	2002      	movs	r0, #2
 800c65a:	f000 fed7 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 800c65e:	2101      	movs	r1, #1
 800c660:	2003      	movs	r0, #3
 800c662:	f000 fed3 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 800c666:	2101      	movs	r1, #1
 800c668:	2004      	movs	r0, #4
 800c66a:	f000 fecf 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_F, 0);
 800c66e:	2100      	movs	r1, #0
 800c670:	2005      	movs	r0, #5
 800c672:	f000 fecb 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 800c676:	2101      	movs	r1, #1
 800c678:	2006      	movs	r0, #6
 800c67a:	f000 fec7 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 800c67e:	2100      	movs	r1, #0
 800c680:	2007      	movs	r0, #7
 800c682:	f000 fec3 	bl	800d40c <lcd_write_line>
        break;
 800c686:	e088      	b.n	800c79a <lcd_put_char+0x3c2>
        case '6':
            lcd_write_line(SEG_A, 1);
 800c688:	2101      	movs	r1, #1
 800c68a:	2000      	movs	r0, #0
 800c68c:	f000 febe 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 800c690:	2101      	movs	r1, #1
 800c692:	2001      	movs	r0, #1
 800c694:	f000 feba 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 800c698:	2101      	movs	r1, #1
 800c69a:	2002      	movs	r0, #2
 800c69c:	f000 feb6 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 800c6a0:	2101      	movs	r1, #1
 800c6a2:	2003      	movs	r0, #3
 800c6a4:	f000 feb2 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 800c6a8:	2101      	movs	r1, #1
 800c6aa:	2004      	movs	r0, #4
 800c6ac:	f000 feae 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_F, 0);
 800c6b0:	2100      	movs	r1, #0
 800c6b2:	2005      	movs	r0, #5
 800c6b4:	f000 feaa 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 800c6b8:	2101      	movs	r1, #1
 800c6ba:	2006      	movs	r0, #6
 800c6bc:	f000 fea6 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 800c6c0:	2100      	movs	r1, #0
 800c6c2:	2007      	movs	r0, #7
 800c6c4:	f000 fea2 	bl	800d40c <lcd_write_line>
        break;
 800c6c8:	e067      	b.n	800c79a <lcd_put_char+0x3c2>
        case '7':
            lcd_write_line(SEG_A, 0);
 800c6ca:	2100      	movs	r1, #0
 800c6cc:	2000      	movs	r0, #0
 800c6ce:	f000 fe9d 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 800c6d2:	2100      	movs	r1, #0
 800c6d4:	2001      	movs	r0, #1
 800c6d6:	f000 fe99 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 800c6da:	2101      	movs	r1, #1
 800c6dc:	2002      	movs	r0, #2
 800c6de:	f000 fe95 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 800c6e2:	2100      	movs	r1, #0
 800c6e4:	2003      	movs	r0, #3
 800c6e6:	f000 fe91 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 800c6ea:	2100      	movs	r1, #0
 800c6ec:	2004      	movs	r0, #4
 800c6ee:	f000 fe8d 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 800c6f2:	2101      	movs	r1, #1
 800c6f4:	2005      	movs	r0, #5
 800c6f6:	f000 fe89 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 800c6fa:	2101      	movs	r1, #1
 800c6fc:	2006      	movs	r0, #6
 800c6fe:	f000 fe85 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 800c702:	2100      	movs	r1, #0
 800c704:	2007      	movs	r0, #7
 800c706:	f000 fe81 	bl	800d40c <lcd_write_line>
        break;
 800c70a:	e046      	b.n	800c79a <lcd_put_char+0x3c2>
        case '8':
            lcd_write_line(SEG_A, 1);
 800c70c:	2101      	movs	r1, #1
 800c70e:	2000      	movs	r0, #0
 800c710:	f000 fe7c 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 800c714:	2101      	movs	r1, #1
 800c716:	2001      	movs	r0, #1
 800c718:	f000 fe78 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 800c71c:	2101      	movs	r1, #1
 800c71e:	2002      	movs	r0, #2
 800c720:	f000 fe74 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 800c724:	2101      	movs	r1, #1
 800c726:	2003      	movs	r0, #3
 800c728:	f000 fe70 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 800c72c:	2101      	movs	r1, #1
 800c72e:	2004      	movs	r0, #4
 800c730:	f000 fe6c 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 800c734:	2101      	movs	r1, #1
 800c736:	2005      	movs	r0, #5
 800c738:	f000 fe68 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 800c73c:	2101      	movs	r1, #1
 800c73e:	2006      	movs	r0, #6
 800c740:	f000 fe64 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 800c744:	2100      	movs	r1, #0
 800c746:	2007      	movs	r0, #7
 800c748:	f000 fe60 	bl	800d40c <lcd_write_line>
        break;
 800c74c:	e025      	b.n	800c79a <lcd_put_char+0x3c2>
        case '9':
            lcd_write_line(SEG_A, 0);
 800c74e:	2100      	movs	r1, #0
 800c750:	2000      	movs	r0, #0
 800c752:	f000 fe5b 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 800c756:	2100      	movs	r1, #0
 800c758:	2001      	movs	r0, #1
 800c75a:	f000 fe57 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 800c75e:	2101      	movs	r1, #1
 800c760:	2002      	movs	r0, #2
 800c762:	f000 fe53 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 800c766:	2101      	movs	r1, #1
 800c768:	2003      	movs	r0, #3
 800c76a:	f000 fe4f 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 800c76e:	2101      	movs	r1, #1
 800c770:	2004      	movs	r0, #4
 800c772:	f000 fe4b 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 800c776:	2101      	movs	r1, #1
 800c778:	2005      	movs	r0, #5
 800c77a:	f000 fe47 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 800c77e:	2101      	movs	r1, #1
 800c780:	2006      	movs	r0, #6
 800c782:	f000 fe43 	bl	800d40c <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 800c786:	2100      	movs	r1, #0
 800c788:	2007      	movs	r0, #7
 800c78a:	f000 fe3f 	bl	800d40c <lcd_write_line>
        break;
 800c78e:	e004      	b.n	800c79a <lcd_put_char+0x3c2>
                return;
 800c790:	bf00      	nop
 800c792:	e002      	b.n	800c79a <lcd_put_char+0x3c2>
                return;
 800c794:	bf00      	nop
 800c796:	e000      	b.n	800c79a <lcd_put_char+0x3c2>
        default:
        break;
 800c798:	bf00      	nop
    }
}
 800c79a:	3708      	adds	r7, #8
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}
 800c7a0:	200019d1 	.word	0x200019d1
 800c7a4:	200019c0 	.word	0x200019c0
 800c7a8:	200019d0 	.word	0x200019d0

0800c7ac <lcd_refresh>:
 * enviar en dicho buffer y luego escribir todo junto.
 * @param Enumeraciones rows_t y point_t de lcd.h
 * @retval None
 */
void lcd_refresh()
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	af00      	add	r7, sp, #0
    pcf8553_dump();
 800c7b0:	f000 ff50 	bl	800d654 <pcf8553_dump>
}
 800c7b4:	bf00      	nop
 800c7b6:	bd80      	pop	{r7, pc}

0800c7b8 <lcd_set_point>:
 * @brief Función que escribe un punto en específico en la pantalla.
 * @param Enumeraciones rows_t y point_t de lcd.h
 * @retval None
 */
void lcd_set_point(rows_t line, point_t point)
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b083      	sub	sp, #12
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	4603      	mov	r3, r0
 800c7c0:	460a      	mov	r2, r1
 800c7c2:	71fb      	strb	r3, [r7, #7]
 800c7c4:	4613      	mov	r3, r2
 800c7c6:	71bb      	strb	r3, [r7, #6]
    if (line == HIGH_ROW)
 800c7c8:	79fb      	ldrb	r3, [r7, #7]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d14c      	bne.n	800c868 <lcd_set_point+0xb0>
    {
        switch (point)
 800c7ce:	79bb      	ldrb	r3, [r7, #6]
 800c7d0:	2b06      	cmp	r3, #6
 800c7d2:	f200 808f 	bhi.w	800c8f4 <lcd_set_point+0x13c>
 800c7d6:	a201      	add	r2, pc, #4	; (adr r2, 800c7dc <lcd_set_point+0x24>)
 800c7d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7dc:	0800c7f9 	.word	0x0800c7f9
 800c7e0:	0800c809 	.word	0x0800c809
 800c7e4:	0800c819 	.word	0x0800c819
 800c7e8:	0800c829 	.word	0x0800c829
 800c7ec:	0800c839 	.word	0x0800c839
 800c7f0:	0800c849 	.word	0x0800c849
 800c7f4:	0800c859 	.word	0x0800c859
        {
            case PNT_0:
                g_lcd_map[REG_7] |= (1 << BIT_7);
 800c7f8:	4b44      	ldr	r3, [pc, #272]	; (800c90c <lcd_set_point+0x154>)
 800c7fa:	79db      	ldrb	r3, [r3, #7]
 800c7fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c800:	b2da      	uxtb	r2, r3
 800c802:	4b42      	ldr	r3, [pc, #264]	; (800c90c <lcd_set_point+0x154>)
 800c804:	71da      	strb	r2, [r3, #7]
            break;
 800c806:	e07a      	b.n	800c8fe <lcd_set_point+0x146>
            case PNT_1:
                g_lcd_map[REG_8] |= (1 << BIT_1);
 800c808:	4b40      	ldr	r3, [pc, #256]	; (800c90c <lcd_set_point+0x154>)
 800c80a:	7a1b      	ldrb	r3, [r3, #8]
 800c80c:	f043 0302 	orr.w	r3, r3, #2
 800c810:	b2da      	uxtb	r2, r3
 800c812:	4b3e      	ldr	r3, [pc, #248]	; (800c90c <lcd_set_point+0x154>)
 800c814:	721a      	strb	r2, [r3, #8]
            break;
 800c816:	e072      	b.n	800c8fe <lcd_set_point+0x146>
            case PNT_2:
                g_lcd_map[REG_8] |= (1 << BIT_3);
 800c818:	4b3c      	ldr	r3, [pc, #240]	; (800c90c <lcd_set_point+0x154>)
 800c81a:	7a1b      	ldrb	r3, [r3, #8]
 800c81c:	f043 0308 	orr.w	r3, r3, #8
 800c820:	b2da      	uxtb	r2, r3
 800c822:	4b3a      	ldr	r3, [pc, #232]	; (800c90c <lcd_set_point+0x154>)
 800c824:	721a      	strb	r2, [r3, #8]
            break;
 800c826:	e06a      	b.n	800c8fe <lcd_set_point+0x146>
            case PNT_3:
                g_lcd_map[REG_8] |= (1 << BIT_5);
 800c828:	4b38      	ldr	r3, [pc, #224]	; (800c90c <lcd_set_point+0x154>)
 800c82a:	7a1b      	ldrb	r3, [r3, #8]
 800c82c:	f043 0320 	orr.w	r3, r3, #32
 800c830:	b2da      	uxtb	r2, r3
 800c832:	4b36      	ldr	r3, [pc, #216]	; (800c90c <lcd_set_point+0x154>)
 800c834:	721a      	strb	r2, [r3, #8]
            break;
 800c836:	e062      	b.n	800c8fe <lcd_set_point+0x146>
            case PNT_4:
                g_lcd_map[REG_8] |= (1 << BIT_7);
 800c838:	4b34      	ldr	r3, [pc, #208]	; (800c90c <lcd_set_point+0x154>)
 800c83a:	7a1b      	ldrb	r3, [r3, #8]
 800c83c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c840:	b2da      	uxtb	r2, r3
 800c842:	4b32      	ldr	r3, [pc, #200]	; (800c90c <lcd_set_point+0x154>)
 800c844:	721a      	strb	r2, [r3, #8]
            break;
 800c846:	e05a      	b.n	800c8fe <lcd_set_point+0x146>
            case PNT_5:
                g_lcd_map[REG_9] |= (1 << BIT_1);
 800c848:	4b30      	ldr	r3, [pc, #192]	; (800c90c <lcd_set_point+0x154>)
 800c84a:	7a5b      	ldrb	r3, [r3, #9]
 800c84c:	f043 0302 	orr.w	r3, r3, #2
 800c850:	b2da      	uxtb	r2, r3
 800c852:	4b2e      	ldr	r3, [pc, #184]	; (800c90c <lcd_set_point+0x154>)
 800c854:	725a      	strb	r2, [r3, #9]
            break;
 800c856:	e052      	b.n	800c8fe <lcd_set_point+0x146>
            case PNT_6:
                g_lcd_map[REG_9] |= (1 << BIT_3);
 800c858:	4b2c      	ldr	r3, [pc, #176]	; (800c90c <lcd_set_point+0x154>)
 800c85a:	7a5b      	ldrb	r3, [r3, #9]
 800c85c:	f043 0308 	orr.w	r3, r3, #8
 800c860:	b2da      	uxtb	r2, r3
 800c862:	4b2a      	ldr	r3, [pc, #168]	; (800c90c <lcd_set_point+0x154>)
 800c864:	725a      	strb	r2, [r3, #9]
            break;
 800c866:	e04a      	b.n	800c8fe <lcd_set_point+0x146>
            default:
            break;
        }
    }
    else if (line == LOW_ROW)
 800c868:	79fb      	ldrb	r3, [r7, #7]
 800c86a:	2b01      	cmp	r3, #1
 800c86c:	d144      	bne.n	800c8f8 <lcd_set_point+0x140>
    {
        switch (point)
 800c86e:	79bb      	ldrb	r3, [r7, #6]
 800c870:	2b05      	cmp	r3, #5
 800c872:	d843      	bhi.n	800c8fc <lcd_set_point+0x144>
 800c874:	a201      	add	r2, pc, #4	; (adr r2, 800c87c <lcd_set_point+0xc4>)
 800c876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c87a:	bf00      	nop
 800c87c:	0800c895 	.word	0x0800c895
 800c880:	0800c8a5 	.word	0x0800c8a5
 800c884:	0800c8b5 	.word	0x0800c8b5
 800c888:	0800c8c5 	.word	0x0800c8c5
 800c88c:	0800c8d5 	.word	0x0800c8d5
 800c890:	0800c8e5 	.word	0x0800c8e5
        {
            case PNT_0:
                g_lcd_map[REG_7] |= (1 << BIT_2);
 800c894:	4b1d      	ldr	r3, [pc, #116]	; (800c90c <lcd_set_point+0x154>)
 800c896:	79db      	ldrb	r3, [r3, #7]
 800c898:	f043 0304 	orr.w	r3, r3, #4
 800c89c:	b2da      	uxtb	r2, r3
 800c89e:	4b1b      	ldr	r3, [pc, #108]	; (800c90c <lcd_set_point+0x154>)
 800c8a0:	71da      	strb	r2, [r3, #7]
            break;
 800c8a2:	e02c      	b.n	800c8fe <lcd_set_point+0x146>
            case PNT_1:
                g_lcd_map[REG_7] |= (1 << BIT_0);
 800c8a4:	4b19      	ldr	r3, [pc, #100]	; (800c90c <lcd_set_point+0x154>)
 800c8a6:	79db      	ldrb	r3, [r3, #7]
 800c8a8:	f043 0301 	orr.w	r3, r3, #1
 800c8ac:	b2da      	uxtb	r2, r3
 800c8ae:	4b17      	ldr	r3, [pc, #92]	; (800c90c <lcd_set_point+0x154>)
 800c8b0:	71da      	strb	r2, [r3, #7]
            break;
 800c8b2:	e024      	b.n	800c8fe <lcd_set_point+0x146>
            case PNT_2:
                g_lcd_map[REG_6] |= (1 << BIT_6);
 800c8b4:	4b15      	ldr	r3, [pc, #84]	; (800c90c <lcd_set_point+0x154>)
 800c8b6:	799b      	ldrb	r3, [r3, #6]
 800c8b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8bc:	b2da      	uxtb	r2, r3
 800c8be:	4b13      	ldr	r3, [pc, #76]	; (800c90c <lcd_set_point+0x154>)
 800c8c0:	719a      	strb	r2, [r3, #6]
            break;
 800c8c2:	e01c      	b.n	800c8fe <lcd_set_point+0x146>
            case PNT_3:
                g_lcd_map[REG_6] |= (1 << BIT_4);
 800c8c4:	4b11      	ldr	r3, [pc, #68]	; (800c90c <lcd_set_point+0x154>)
 800c8c6:	799b      	ldrb	r3, [r3, #6]
 800c8c8:	f043 0310 	orr.w	r3, r3, #16
 800c8cc:	b2da      	uxtb	r2, r3
 800c8ce:	4b0f      	ldr	r3, [pc, #60]	; (800c90c <lcd_set_point+0x154>)
 800c8d0:	719a      	strb	r2, [r3, #6]
            break;
 800c8d2:	e014      	b.n	800c8fe <lcd_set_point+0x146>
            case PNT_4:
                g_lcd_map[REG_6] |= (1 << BIT_2);
 800c8d4:	4b0d      	ldr	r3, [pc, #52]	; (800c90c <lcd_set_point+0x154>)
 800c8d6:	799b      	ldrb	r3, [r3, #6]
 800c8d8:	f043 0304 	orr.w	r3, r3, #4
 800c8dc:	b2da      	uxtb	r2, r3
 800c8de:	4b0b      	ldr	r3, [pc, #44]	; (800c90c <lcd_set_point+0x154>)
 800c8e0:	719a      	strb	r2, [r3, #6]
            break;
 800c8e2:	e00c      	b.n	800c8fe <lcd_set_point+0x146>
            case PNT_5:
                g_lcd_map[REG_6] |= (1 << BIT_0);
 800c8e4:	4b09      	ldr	r3, [pc, #36]	; (800c90c <lcd_set_point+0x154>)
 800c8e6:	799b      	ldrb	r3, [r3, #6]
 800c8e8:	f043 0301 	orr.w	r3, r3, #1
 800c8ec:	b2da      	uxtb	r2, r3
 800c8ee:	4b07      	ldr	r3, [pc, #28]	; (800c90c <lcd_set_point+0x154>)
 800c8f0:	719a      	strb	r2, [r3, #6]
            break;
 800c8f2:	e004      	b.n	800c8fe <lcd_set_point+0x146>
            break;
 800c8f4:	bf00      	nop
 800c8f6:	e002      	b.n	800c8fe <lcd_set_point+0x146>
            default:
            break;
        }
    }
 800c8f8:	bf00      	nop
 800c8fa:	e000      	b.n	800c8fe <lcd_set_point+0x146>
            break;
 800c8fc:	bf00      	nop
}
 800c8fe:	bf00      	nop
 800c900:	370c      	adds	r7, #12
 800c902:	46bd      	mov	sp, r7
 800c904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c908:	4770      	bx	lr
 800c90a:	bf00      	nop
 800c90c:	20001a38 	.word	0x20001a38

0800c910 <lcd_set_symbol>:
 * @brief Función que escribe un símbolo en específico en la pantalla.
 * @param Enumeraciones symbols_t y blink_t de lcd.h
 * @retval None
 */
void lcd_set_symbol(symbols_t symbol, blink_t blink_speed)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b082      	sub	sp, #8
 800c914:	af00      	add	r7, sp, #0
 800c916:	4603      	mov	r3, r0
 800c918:	460a      	mov	r2, r1
 800c91a:	71fb      	strb	r3, [r7, #7]
 800c91c:	4613      	mov	r3, r2
 800c91e:	71bb      	strb	r3, [r7, #6]
    switch (symbol)
 800c920:	79fb      	ldrb	r3, [r7, #7]
 800c922:	2b15      	cmp	r3, #21
 800c924:	f200 832b 	bhi.w	800cf7e <lcd_set_symbol+0x66e>
 800c928:	a201      	add	r2, pc, #4	; (adr r2, 800c930 <lcd_set_symbol+0x20>)
 800c92a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c92e:	bf00      	nop
 800c930:	0800c999 	.word	0x0800c999
 800c934:	0800c989 	.word	0x0800c989
 800c938:	0800c9b9 	.word	0x0800c9b9
 800c93c:	0800c9c9 	.word	0x0800c9c9
 800c940:	0800c9a9 	.word	0x0800c9a9
 800c944:	0800c9f9 	.word	0x0800c9f9
 800c948:	0800c9e9 	.word	0x0800c9e9
 800c94c:	0800ca09 	.word	0x0800ca09
 800c950:	0800c9d9 	.word	0x0800c9d9
 800c954:	0800ca19 	.word	0x0800ca19
 800c958:	0800caa7 	.word	0x0800caa7
 800c95c:	0800cbd5 	.word	0x0800cbd5
 800c960:	0800cc1d 	.word	0x0800cc1d
 800c964:	0800ccab 	.word	0x0800ccab
 800c968:	0800cd0f 	.word	0x0800cd0f
 800c96c:	0800cd73 	.word	0x0800cd73
 800c970:	0800cdd7 	.word	0x0800cdd7
 800c974:	0800ce11 	.word	0x0800ce11
 800c978:	0800ce35 	.word	0x0800ce35
 800c97c:	0800ce8b 	.word	0x0800ce8b
 800c980:	0800cee1 	.word	0x0800cee1
 800c984:	0800cf29 	.word	0x0800cf29
    {
        case POWER:
            g_lcd_map[REG_2] |= (1 << BIT_5);
 800c988:	4b91      	ldr	r3, [pc, #580]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800c98a:	789b      	ldrb	r3, [r3, #2]
 800c98c:	f043 0320 	orr.w	r3, r3, #32
 800c990:	b2da      	uxtb	r2, r3
 800c992:	4b8f      	ldr	r3, [pc, #572]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800c994:	709a      	strb	r2, [r3, #2]
        break;
 800c996:	e2f3      	b.n	800cf80 <lcd_set_symbol+0x670>
        case BATTERY:
            g_lcd_map[REG_7] |= (1 << BIT_5);
 800c998:	4b8d      	ldr	r3, [pc, #564]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800c99a:	79db      	ldrb	r3, [r3, #7]
 800c99c:	f043 0320 	orr.w	r3, r3, #32
 800c9a0:	b2da      	uxtb	r2, r3
 800c9a2:	4b8b      	ldr	r3, [pc, #556]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800c9a4:	71da      	strb	r2, [r3, #7]
        break;
 800c9a6:	e2eb      	b.n	800cf80 <lcd_set_symbol+0x670>
        case BATCH:
            g_lcd_map[REG_12] |= (1 << BIT_5);
 800c9a8:	4b89      	ldr	r3, [pc, #548]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800c9aa:	7b1b      	ldrb	r3, [r3, #12]
 800c9ac:	f043 0320 	orr.w	r3, r3, #32
 800c9b0:	b2da      	uxtb	r2, r3
 800c9b2:	4b87      	ldr	r3, [pc, #540]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800c9b4:	731a      	strb	r2, [r3, #12]
        break;
 800c9b6:	e2e3      	b.n	800cf80 <lcd_set_symbol+0x670>
        case RATE:
            g_lcd_map[REG_17] |= (1 << BIT_5);
 800c9b8:	4b85      	ldr	r3, [pc, #532]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800c9ba:	7c5b      	ldrb	r3, [r3, #17]
 800c9bc:	f043 0320 	orr.w	r3, r3, #32
 800c9c0:	b2da      	uxtb	r2, r3
 800c9c2:	4b83      	ldr	r3, [pc, #524]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800c9c4:	745a      	strb	r2, [r3, #17]
        break;
 800c9c6:	e2db      	b.n	800cf80 <lcd_set_symbol+0x670>
        case E:
            g_lcd_map[REG_2] |= (1 << BIT_4);
 800c9c8:	4b81      	ldr	r3, [pc, #516]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800c9ca:	789b      	ldrb	r3, [r3, #2]
 800c9cc:	f043 0310 	orr.w	r3, r3, #16
 800c9d0:	b2da      	uxtb	r2, r3
 800c9d2:	4b7f      	ldr	r3, [pc, #508]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800c9d4:	709a      	strb	r2, [r3, #2]
        break;
 800c9d6:	e2d3      	b.n	800cf80 <lcd_set_symbol+0x670>
        case POINT:
            g_lcd_map[REG_7] |= (1 << BIT_4);
 800c9d8:	4b7d      	ldr	r3, [pc, #500]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800c9da:	79db      	ldrb	r3, [r3, #7]
 800c9dc:	f043 0310 	orr.w	r3, r3, #16
 800c9e0:	b2da      	uxtb	r2, r3
 800c9e2:	4b7b      	ldr	r3, [pc, #492]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800c9e4:	71da      	strb	r2, [r3, #7]
        break;
 800c9e6:	e2cb      	b.n	800cf80 <lcd_set_symbol+0x670>
        case ACM:
            g_lcd_map[REG_12] |= (1 << BIT_4);
 800c9e8:	4b79      	ldr	r3, [pc, #484]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800c9ea:	7b1b      	ldrb	r3, [r3, #12]
 800c9ec:	f043 0310 	orr.w	r3, r3, #16
 800c9f0:	b2da      	uxtb	r2, r3
 800c9f2:	4b77      	ldr	r3, [pc, #476]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800c9f4:	731a      	strb	r2, [r3, #12]
        break;
 800c9f6:	e2c3      	b.n	800cf80 <lcd_set_symbol+0x670>
        case TTL:
            g_lcd_map[REG_17] |= (1 << BIT_4);
 800c9f8:	4b75      	ldr	r3, [pc, #468]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800c9fa:	7c5b      	ldrb	r3, [r3, #17]
 800c9fc:	f043 0310 	orr.w	r3, r3, #16
 800ca00:	b2da      	uxtb	r2, r3
 800ca02:	4b73      	ldr	r3, [pc, #460]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800ca04:	745a      	strb	r2, [r3, #17]
        break;
 800ca06:	e2bb      	b.n	800cf80 <lcd_set_symbol+0x670>
        case BACKSLASH:
            g_lcd_map[REG_10] |= (1 << BIT_1);
 800ca08:	4b71      	ldr	r3, [pc, #452]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800ca0a:	7a9b      	ldrb	r3, [r3, #10]
 800ca0c:	f043 0302 	orr.w	r3, r3, #2
 800ca10:	b2da      	uxtb	r2, r3
 800ca12:	4b6f      	ldr	r3, [pc, #444]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800ca14:	729a      	strb	r2, [r3, #10]
        break;
 800ca16:	e2b3      	b.n	800cf80 <lcd_set_symbol+0x670>
        case VE:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 800ca18:	4b6d      	ldr	r3, [pc, #436]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800ca1a:	7bdb      	ldrb	r3, [r3, #15]
 800ca1c:	f043 0320 	orr.w	r3, r3, #32
 800ca20:	b2da      	uxtb	r2, r3
 800ca22:	4b6b      	ldr	r3, [pc, #428]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800ca24:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 800ca26:	4b6a      	ldr	r3, [pc, #424]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800ca28:	7bdb      	ldrb	r3, [r3, #15]
 800ca2a:	f043 0310 	orr.w	r3, r3, #16
 800ca2e:	b2da      	uxtb	r2, r3
 800ca30:	4b67      	ldr	r3, [pc, #412]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800ca32:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 800ca34:	4b66      	ldr	r3, [pc, #408]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800ca36:	781b      	ldrb	r3, [r3, #0]
 800ca38:	f043 0320 	orr.w	r3, r3, #32
 800ca3c:	b2da      	uxtb	r2, r3
 800ca3e:	4b64      	ldr	r3, [pc, #400]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800ca40:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_2);
 800ca42:	4b63      	ldr	r3, [pc, #396]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800ca44:	781b      	ldrb	r3, [r3, #0]
 800ca46:	f043 0304 	orr.w	r3, r3, #4
 800ca4a:	b2da      	uxtb	r2, r3
 800ca4c:	4b60      	ldr	r3, [pc, #384]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800ca4e:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 800ca50:	4b5f      	ldr	r3, [pc, #380]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800ca52:	7b9b      	ldrb	r3, [r3, #14]
 800ca54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ca58:	b2da      	uxtb	r2, r3
 800ca5a:	4b5d      	ldr	r3, [pc, #372]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800ca5c:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 800ca5e:	4b5c      	ldr	r3, [pc, #368]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800ca60:	7bdb      	ldrb	r3, [r3, #15]
 800ca62:	f043 0302 	orr.w	r3, r3, #2
 800ca66:	b2da      	uxtb	r2, r3
 800ca68:	4b59      	ldr	r3, [pc, #356]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800ca6a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 800ca6c:	4b58      	ldr	r3, [pc, #352]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800ca6e:	7cdb      	ldrb	r3, [r3, #19]
 800ca70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca74:	b2da      	uxtb	r2, r3
 800ca76:	4b56      	ldr	r3, [pc, #344]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800ca78:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 800ca7a:	4b55      	ldr	r3, [pc, #340]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800ca7c:	781b      	ldrb	r3, [r3, #0]
 800ca7e:	f043 0301 	orr.w	r3, r3, #1
 800ca82:	b2da      	uxtb	r2, r3
 800ca84:	4b52      	ldr	r3, [pc, #328]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800ca86:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 800ca88:	4b51      	ldr	r3, [pc, #324]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800ca8a:	781b      	ldrb	r3, [r3, #0]
 800ca8c:	f043 0302 	orr.w	r3, r3, #2
 800ca90:	b2da      	uxtb	r2, r3
 800ca92:	4b4f      	ldr	r3, [pc, #316]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800ca94:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 800ca96:	4b4e      	ldr	r3, [pc, #312]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800ca98:	795b      	ldrb	r3, [r3, #5]
 800ca9a:	f043 0302 	orr.w	r3, r3, #2
 800ca9e:	b2da      	uxtb	r2, r3
 800caa0:	4b4b      	ldr	r3, [pc, #300]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800caa2:	715a      	strb	r2, [r3, #5]
        break;
 800caa4:	e26c      	b.n	800cf80 <lcd_set_symbol+0x670>
        case PASS:
            g_lcd_map[REG_13] |= (1 << BIT_1);
 800caa6:	4b4a      	ldr	r3, [pc, #296]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800caa8:	7b5b      	ldrb	r3, [r3, #13]
 800caaa:	f043 0302 	orr.w	r3, r3, #2
 800caae:	b2da      	uxtb	r2, r3
 800cab0:	4b47      	ldr	r3, [pc, #284]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800cab2:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_0);
 800cab4:	4b46      	ldr	r3, [pc, #280]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800cab6:	7b5b      	ldrb	r3, [r3, #13]
 800cab8:	f043 0301 	orr.w	r3, r3, #1
 800cabc:	b2da      	uxtb	r2, r3
 800cabe:	4b44      	ldr	r3, [pc, #272]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800cac0:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_1);
 800cac2:	4b43      	ldr	r3, [pc, #268]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800cac4:	7c9b      	ldrb	r3, [r3, #18]
 800cac6:	f043 0302 	orr.w	r3, r3, #2
 800caca:	b2da      	uxtb	r2, r3
 800cacc:	4b40      	ldr	r3, [pc, #256]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800cace:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_18] |= (1 << BIT_0);
 800cad0:	4b3f      	ldr	r3, [pc, #252]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800cad2:	7c9b      	ldrb	r3, [r3, #18]
 800cad4:	f043 0301 	orr.w	r3, r3, #1
 800cad8:	b2da      	uxtb	r2, r3
 800cada:	4b3d      	ldr	r3, [pc, #244]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800cadc:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_0);
 800cade:	4b3c      	ldr	r3, [pc, #240]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800cae0:	78db      	ldrb	r3, [r3, #3]
 800cae2:	f043 0301 	orr.w	r3, r3, #1
 800cae6:	b2da      	uxtb	r2, r3
 800cae8:	4b39      	ldr	r3, [pc, #228]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800caea:	70da      	strb	r2, [r3, #3]

            g_lcd_map[REG_13] |= (1 << BIT_3);
 800caec:	4b38      	ldr	r3, [pc, #224]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800caee:	7b5b      	ldrb	r3, [r3, #13]
 800caf0:	f043 0308 	orr.w	r3, r3, #8
 800caf4:	b2da      	uxtb	r2, r3
 800caf6:	4b36      	ldr	r3, [pc, #216]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800caf8:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_2);
 800cafa:	4b35      	ldr	r3, [pc, #212]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800cafc:	7b5b      	ldrb	r3, [r3, #13]
 800cafe:	f043 0304 	orr.w	r3, r3, #4
 800cb02:	b2da      	uxtb	r2, r3
 800cb04:	4b32      	ldr	r3, [pc, #200]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800cb06:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_3);
 800cb08:	4b31      	ldr	r3, [pc, #196]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800cb0a:	7c9b      	ldrb	r3, [r3, #18]
 800cb0c:	f043 0308 	orr.w	r3, r3, #8
 800cb10:	b2da      	uxtb	r2, r3
 800cb12:	4b2f      	ldr	r3, [pc, #188]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800cb14:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_18] |= (1 << BIT_2);
 800cb16:	4b2e      	ldr	r3, [pc, #184]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800cb18:	7c9b      	ldrb	r3, [r3, #18]
 800cb1a:	f043 0304 	orr.w	r3, r3, #4
 800cb1e:	b2da      	uxtb	r2, r3
 800cb20:	4b2b      	ldr	r3, [pc, #172]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800cb22:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_2);
 800cb24:	4b2a      	ldr	r3, [pc, #168]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800cb26:	78db      	ldrb	r3, [r3, #3]
 800cb28:	f043 0304 	orr.w	r3, r3, #4
 800cb2c:	b2da      	uxtb	r2, r3
 800cb2e:	4b28      	ldr	r3, [pc, #160]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800cb30:	70da      	strb	r2, [r3, #3]
            g_lcd_map[REG_3] |= (1 << BIT_3);
 800cb32:	4b27      	ldr	r3, [pc, #156]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800cb34:	78db      	ldrb	r3, [r3, #3]
 800cb36:	f043 0308 	orr.w	r3, r3, #8
 800cb3a:	b2da      	uxtb	r2, r3
 800cb3c:	4b24      	ldr	r3, [pc, #144]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800cb3e:	70da      	strb	r2, [r3, #3]

            g_lcd_map[REG_13] |= (1 << BIT_5);
 800cb40:	4b23      	ldr	r3, [pc, #140]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800cb42:	7b5b      	ldrb	r3, [r3, #13]
 800cb44:	f043 0320 	orr.w	r3, r3, #32
 800cb48:	b2da      	uxtb	r2, r3
 800cb4a:	4b21      	ldr	r3, [pc, #132]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800cb4c:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_4);
 800cb4e:	4b20      	ldr	r3, [pc, #128]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800cb50:	7b5b      	ldrb	r3, [r3, #13]
 800cb52:	f043 0310 	orr.w	r3, r3, #16
 800cb56:	b2da      	uxtb	r2, r3
 800cb58:	4b1d      	ldr	r3, [pc, #116]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800cb5a:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_4);
 800cb5c:	4b1c      	ldr	r3, [pc, #112]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800cb5e:	7c9b      	ldrb	r3, [r3, #18]
 800cb60:	f043 0310 	orr.w	r3, r3, #16
 800cb64:	b2da      	uxtb	r2, r3
 800cb66:	4b1a      	ldr	r3, [pc, #104]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800cb68:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_5);
 800cb6a:	4b19      	ldr	r3, [pc, #100]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800cb6c:	78db      	ldrb	r3, [r3, #3]
 800cb6e:	f043 0320 	orr.w	r3, r3, #32
 800cb72:	b2da      	uxtb	r2, r3
 800cb74:	4b16      	ldr	r3, [pc, #88]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800cb76:	70da      	strb	r2, [r3, #3]
            g_lcd_map[REG_8] |= (1 << BIT_4);
 800cb78:	4b15      	ldr	r3, [pc, #84]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800cb7a:	7a1b      	ldrb	r3, [r3, #8]
 800cb7c:	f043 0310 	orr.w	r3, r3, #16
 800cb80:	b2da      	uxtb	r2, r3
 800cb82:	4b13      	ldr	r3, [pc, #76]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800cb84:	721a      	strb	r2, [r3, #8]

            g_lcd_map[REG_13] |= (1 << BIT_7);
 800cb86:	4b12      	ldr	r3, [pc, #72]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800cb88:	7b5b      	ldrb	r3, [r3, #13]
 800cb8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cb8e:	b2da      	uxtb	r2, r3
 800cb90:	4b0f      	ldr	r3, [pc, #60]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800cb92:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_6);
 800cb94:	4b0e      	ldr	r3, [pc, #56]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800cb96:	7b5b      	ldrb	r3, [r3, #13]
 800cb98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb9c:	b2da      	uxtb	r2, r3
 800cb9e:	4b0c      	ldr	r3, [pc, #48]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800cba0:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_6);
 800cba2:	4b0b      	ldr	r3, [pc, #44]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800cba4:	7c9b      	ldrb	r3, [r3, #18]
 800cba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbaa:	b2da      	uxtb	r2, r3
 800cbac:	4b08      	ldr	r3, [pc, #32]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800cbae:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_7);
 800cbb0:	4b07      	ldr	r3, [pc, #28]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800cbb2:	78db      	ldrb	r3, [r3, #3]
 800cbb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cbb8:	b2da      	uxtb	r2, r3
 800cbba:	4b05      	ldr	r3, [pc, #20]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800cbbc:	70da      	strb	r2, [r3, #3]
            g_lcd_map[REG_8] |= (1 << BIT_6);
 800cbbe:	4b04      	ldr	r3, [pc, #16]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800cbc0:	7a1b      	ldrb	r3, [r3, #8]
 800cbc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbc6:	b2da      	uxtb	r2, r3
 800cbc8:	4b01      	ldr	r3, [pc, #4]	; (800cbd0 <lcd_set_symbol+0x2c0>)
 800cbca:	721a      	strb	r2, [r3, #8]

        break;
 800cbcc:	e1d8      	b.n	800cf80 <lcd_set_symbol+0x670>
 800cbce:	bf00      	nop
 800cbd0:	20001a38 	.word	0x20001a38
        case K:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 800cbd4:	4b96      	ldr	r3, [pc, #600]	; (800ce30 <lcd_set_symbol+0x520>)
 800cbd6:	7bdb      	ldrb	r3, [r3, #15]
 800cbd8:	f043 0320 	orr.w	r3, r3, #32
 800cbdc:	b2da      	uxtb	r2, r3
 800cbde:	4b94      	ldr	r3, [pc, #592]	; (800ce30 <lcd_set_symbol+0x520>)
 800cbe0:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 800cbe2:	4b93      	ldr	r3, [pc, #588]	; (800ce30 <lcd_set_symbol+0x520>)
 800cbe4:	7bdb      	ldrb	r3, [r3, #15]
 800cbe6:	f043 0310 	orr.w	r3, r3, #16
 800cbea:	b2da      	uxtb	r2, r3
 800cbec:	4b90      	ldr	r3, [pc, #576]	; (800ce30 <lcd_set_symbol+0x520>)
 800cbee:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 800cbf0:	4b8f      	ldr	r3, [pc, #572]	; (800ce30 <lcd_set_symbol+0x520>)
 800cbf2:	7bdb      	ldrb	r3, [r3, #15]
 800cbf4:	f043 0304 	orr.w	r3, r3, #4
 800cbf8:	b2da      	uxtb	r2, r3
 800cbfa:	4b8d      	ldr	r3, [pc, #564]	; (800ce30 <lcd_set_symbol+0x520>)
 800cbfc:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 800cbfe:	4b8c      	ldr	r3, [pc, #560]	; (800ce30 <lcd_set_symbol+0x520>)
 800cc00:	781b      	ldrb	r3, [r3, #0]
 800cc02:	f043 0320 	orr.w	r3, r3, #32
 800cc06:	b2da      	uxtb	r2, r3
 800cc08:	4b89      	ldr	r3, [pc, #548]	; (800ce30 <lcd_set_symbol+0x520>)
 800cc0a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_4);
 800cc0c:	4b88      	ldr	r3, [pc, #544]	; (800ce30 <lcd_set_symbol+0x520>)
 800cc0e:	795b      	ldrb	r3, [r3, #5]
 800cc10:	f043 0310 	orr.w	r3, r3, #16
 800cc14:	b2da      	uxtb	r2, r3
 800cc16:	4b86      	ldr	r3, [pc, #536]	; (800ce30 <lcd_set_symbol+0x520>)
 800cc18:	715a      	strb	r2, [r3, #5]
        break;
 800cc1a:	e1b1      	b.n	800cf80 <lcd_set_symbol+0x670>
        case KO:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 800cc1c:	4b84      	ldr	r3, [pc, #528]	; (800ce30 <lcd_set_symbol+0x520>)
 800cc1e:	7bdb      	ldrb	r3, [r3, #15]
 800cc20:	f043 0320 	orr.w	r3, r3, #32
 800cc24:	b2da      	uxtb	r2, r3
 800cc26:	4b82      	ldr	r3, [pc, #520]	; (800ce30 <lcd_set_symbol+0x520>)
 800cc28:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 800cc2a:	4b81      	ldr	r3, [pc, #516]	; (800ce30 <lcd_set_symbol+0x520>)
 800cc2c:	7bdb      	ldrb	r3, [r3, #15]
 800cc2e:	f043 0310 	orr.w	r3, r3, #16
 800cc32:	b2da      	uxtb	r2, r3
 800cc34:	4b7e      	ldr	r3, [pc, #504]	; (800ce30 <lcd_set_symbol+0x520>)
 800cc36:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 800cc38:	4b7d      	ldr	r3, [pc, #500]	; (800ce30 <lcd_set_symbol+0x520>)
 800cc3a:	7bdb      	ldrb	r3, [r3, #15]
 800cc3c:	f043 0304 	orr.w	r3, r3, #4
 800cc40:	b2da      	uxtb	r2, r3
 800cc42:	4b7b      	ldr	r3, [pc, #492]	; (800ce30 <lcd_set_symbol+0x520>)
 800cc44:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 800cc46:	4b7a      	ldr	r3, [pc, #488]	; (800ce30 <lcd_set_symbol+0x520>)
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	f043 0320 	orr.w	r3, r3, #32
 800cc4e:	b2da      	uxtb	r2, r3
 800cc50:	4b77      	ldr	r3, [pc, #476]	; (800ce30 <lcd_set_symbol+0x520>)
 800cc52:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_4);
 800cc54:	4b76      	ldr	r3, [pc, #472]	; (800ce30 <lcd_set_symbol+0x520>)
 800cc56:	795b      	ldrb	r3, [r3, #5]
 800cc58:	f043 0310 	orr.w	r3, r3, #16
 800cc5c:	b2da      	uxtb	r2, r3
 800cc5e:	4b74      	ldr	r3, [pc, #464]	; (800ce30 <lcd_set_symbol+0x520>)
 800cc60:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_19] |= (1 << BIT_6);
 800cc62:	4b73      	ldr	r3, [pc, #460]	; (800ce30 <lcd_set_symbol+0x520>)
 800cc64:	7cdb      	ldrb	r3, [r3, #19]
 800cc66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc6a:	b2da      	uxtb	r2, r3
 800cc6c:	4b70      	ldr	r3, [pc, #448]	; (800ce30 <lcd_set_symbol+0x520>)
 800cc6e:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 800cc70:	4b6f      	ldr	r3, [pc, #444]	; (800ce30 <lcd_set_symbol+0x520>)
 800cc72:	781b      	ldrb	r3, [r3, #0]
 800cc74:	f043 0301 	orr.w	r3, r3, #1
 800cc78:	b2da      	uxtb	r2, r3
 800cc7a:	4b6d      	ldr	r3, [pc, #436]	; (800ce30 <lcd_set_symbol+0x520>)
 800cc7c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 800cc7e:	4b6c      	ldr	r3, [pc, #432]	; (800ce30 <lcd_set_symbol+0x520>)
 800cc80:	781b      	ldrb	r3, [r3, #0]
 800cc82:	f043 0302 	orr.w	r3, r3, #2
 800cc86:	b2da      	uxtb	r2, r3
 800cc88:	4b69      	ldr	r3, [pc, #420]	; (800ce30 <lcd_set_symbol+0x520>)
 800cc8a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_7);
 800cc8c:	4b68      	ldr	r3, [pc, #416]	; (800ce30 <lcd_set_symbol+0x520>)
 800cc8e:	791b      	ldrb	r3, [r3, #4]
 800cc90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cc94:	b2da      	uxtb	r2, r3
 800cc96:	4b66      	ldr	r3, [pc, #408]	; (800ce30 <lcd_set_symbol+0x520>)
 800cc98:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 800cc9a:	4b65      	ldr	r3, [pc, #404]	; (800ce30 <lcd_set_symbol+0x520>)
 800cc9c:	795b      	ldrb	r3, [r3, #5]
 800cc9e:	f043 0302 	orr.w	r3, r3, #2
 800cca2:	b2da      	uxtb	r2, r3
 800cca4:	4b62      	ldr	r3, [pc, #392]	; (800ce30 <lcd_set_symbol+0x520>)
 800cca6:	715a      	strb	r2, [r3, #5]
        break;
 800cca8:	e16a      	b.n	800cf80 <lcd_set_symbol+0x670>
        case PASS1:
            g_lcd_map[REG_12] |= (1 << BIT_0);
 800ccaa:	4b61      	ldr	r3, [pc, #388]	; (800ce30 <lcd_set_symbol+0x520>)
 800ccac:	7b1b      	ldrb	r3, [r3, #12]
 800ccae:	f043 0301 	orr.w	r3, r3, #1
 800ccb2:	b2da      	uxtb	r2, r3
 800ccb4:	4b5e      	ldr	r3, [pc, #376]	; (800ce30 <lcd_set_symbol+0x520>)
 800ccb6:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_12] |= (1 << BIT_1);
 800ccb8:	4b5d      	ldr	r3, [pc, #372]	; (800ce30 <lcd_set_symbol+0x520>)
 800ccba:	7b1b      	ldrb	r3, [r3, #12]
 800ccbc:	f043 0302 	orr.w	r3, r3, #2
 800ccc0:	b2da      	uxtb	r2, r3
 800ccc2:	4b5b      	ldr	r3, [pc, #364]	; (800ce30 <lcd_set_symbol+0x520>)
 800ccc4:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_0);
 800ccc6:	4b5a      	ldr	r3, [pc, #360]	; (800ce30 <lcd_set_symbol+0x520>)
 800ccc8:	7c5b      	ldrb	r3, [r3, #17]
 800ccca:	f043 0301 	orr.w	r3, r3, #1
 800ccce:	b2da      	uxtb	r2, r3
 800ccd0:	4b57      	ldr	r3, [pc, #348]	; (800ce30 <lcd_set_symbol+0x520>)
 800ccd2:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_17] |= (1 << BIT_1);
 800ccd4:	4b56      	ldr	r3, [pc, #344]	; (800ce30 <lcd_set_symbol+0x520>)
 800ccd6:	7c5b      	ldrb	r3, [r3, #17]
 800ccd8:	f043 0302 	orr.w	r3, r3, #2
 800ccdc:	b2da      	uxtb	r2, r3
 800ccde:	4b54      	ldr	r3, [pc, #336]	; (800ce30 <lcd_set_symbol+0x520>)
 800cce0:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_1);
 800cce2:	4b53      	ldr	r3, [pc, #332]	; (800ce30 <lcd_set_symbol+0x520>)
 800cce4:	789b      	ldrb	r3, [r3, #2]
 800cce6:	f043 0302 	orr.w	r3, r3, #2
 800ccea:	b2da      	uxtb	r2, r3
 800ccec:	4b50      	ldr	r3, [pc, #320]	; (800ce30 <lcd_set_symbol+0x520>)
 800ccee:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_2] |= (1 << BIT_0);
 800ccf0:	4b4f      	ldr	r3, [pc, #316]	; (800ce30 <lcd_set_symbol+0x520>)
 800ccf2:	789b      	ldrb	r3, [r3, #2]
 800ccf4:	f043 0301 	orr.w	r3, r3, #1
 800ccf8:	b2da      	uxtb	r2, r3
 800ccfa:	4b4d      	ldr	r3, [pc, #308]	; (800ce30 <lcd_set_symbol+0x520>)
 800ccfc:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_7] |= (1 << BIT_1);
 800ccfe:	4b4c      	ldr	r3, [pc, #304]	; (800ce30 <lcd_set_symbol+0x520>)
 800cd00:	79db      	ldrb	r3, [r3, #7]
 800cd02:	f043 0302 	orr.w	r3, r3, #2
 800cd06:	b2da      	uxtb	r2, r3
 800cd08:	4b49      	ldr	r3, [pc, #292]	; (800ce30 <lcd_set_symbol+0x520>)
 800cd0a:	71da      	strb	r2, [r3, #7]
        break;
 800cd0c:	e138      	b.n	800cf80 <lcd_set_symbol+0x670>
        case PASS2:
            g_lcd_map[REG_11] |= (1 << BIT_6);
 800cd0e:	4b48      	ldr	r3, [pc, #288]	; (800ce30 <lcd_set_symbol+0x520>)
 800cd10:	7adb      	ldrb	r3, [r3, #11]
 800cd12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd16:	b2da      	uxtb	r2, r3
 800cd18:	4b45      	ldr	r3, [pc, #276]	; (800ce30 <lcd_set_symbol+0x520>)
 800cd1a:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_11] |= (1 << BIT_7);
 800cd1c:	4b44      	ldr	r3, [pc, #272]	; (800ce30 <lcd_set_symbol+0x520>)
 800cd1e:	7adb      	ldrb	r3, [r3, #11]
 800cd20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cd24:	b2da      	uxtb	r2, r3
 800cd26:	4b42      	ldr	r3, [pc, #264]	; (800ce30 <lcd_set_symbol+0x520>)
 800cd28:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_16] |= (1 << BIT_6);
 800cd2a:	4b41      	ldr	r3, [pc, #260]	; (800ce30 <lcd_set_symbol+0x520>)
 800cd2c:	7c1b      	ldrb	r3, [r3, #16]
 800cd2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd32:	b2da      	uxtb	r2, r3
 800cd34:	4b3e      	ldr	r3, [pc, #248]	; (800ce30 <lcd_set_symbol+0x520>)
 800cd36:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_16] |= (1 << BIT_7);
 800cd38:	4b3d      	ldr	r3, [pc, #244]	; (800ce30 <lcd_set_symbol+0x520>)
 800cd3a:	7c1b      	ldrb	r3, [r3, #16]
 800cd3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cd40:	b2da      	uxtb	r2, r3
 800cd42:	4b3b      	ldr	r3, [pc, #236]	; (800ce30 <lcd_set_symbol+0x520>)
 800cd44:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_1] |= (1 << BIT_7);
 800cd46:	4b3a      	ldr	r3, [pc, #232]	; (800ce30 <lcd_set_symbol+0x520>)
 800cd48:	785b      	ldrb	r3, [r3, #1]
 800cd4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cd4e:	b2da      	uxtb	r2, r3
 800cd50:	4b37      	ldr	r3, [pc, #220]	; (800ce30 <lcd_set_symbol+0x520>)
 800cd52:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_1] |= (1 << BIT_6);
 800cd54:	4b36      	ldr	r3, [pc, #216]	; (800ce30 <lcd_set_symbol+0x520>)
 800cd56:	785b      	ldrb	r3, [r3, #1]
 800cd58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd5c:	b2da      	uxtb	r2, r3
 800cd5e:	4b34      	ldr	r3, [pc, #208]	; (800ce30 <lcd_set_symbol+0x520>)
 800cd60:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_6] |= (1 << BIT_7);
 800cd62:	4b33      	ldr	r3, [pc, #204]	; (800ce30 <lcd_set_symbol+0x520>)
 800cd64:	799b      	ldrb	r3, [r3, #6]
 800cd66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cd6a:	b2da      	uxtb	r2, r3
 800cd6c:	4b30      	ldr	r3, [pc, #192]	; (800ce30 <lcd_set_symbol+0x520>)
 800cd6e:	719a      	strb	r2, [r3, #6]
        break;
 800cd70:	e106      	b.n	800cf80 <lcd_set_symbol+0x670>
        case PASS3:
            g_lcd_map[REG_11] |= (1 << BIT_4);
 800cd72:	4b2f      	ldr	r3, [pc, #188]	; (800ce30 <lcd_set_symbol+0x520>)
 800cd74:	7adb      	ldrb	r3, [r3, #11]
 800cd76:	f043 0310 	orr.w	r3, r3, #16
 800cd7a:	b2da      	uxtb	r2, r3
 800cd7c:	4b2c      	ldr	r3, [pc, #176]	; (800ce30 <lcd_set_symbol+0x520>)
 800cd7e:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_11] |= (1 << BIT_5);
 800cd80:	4b2b      	ldr	r3, [pc, #172]	; (800ce30 <lcd_set_symbol+0x520>)
 800cd82:	7adb      	ldrb	r3, [r3, #11]
 800cd84:	f043 0320 	orr.w	r3, r3, #32
 800cd88:	b2da      	uxtb	r2, r3
 800cd8a:	4b29      	ldr	r3, [pc, #164]	; (800ce30 <lcd_set_symbol+0x520>)
 800cd8c:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_16] |= (1 << BIT_4);
 800cd8e:	4b28      	ldr	r3, [pc, #160]	; (800ce30 <lcd_set_symbol+0x520>)
 800cd90:	7c1b      	ldrb	r3, [r3, #16]
 800cd92:	f043 0310 	orr.w	r3, r3, #16
 800cd96:	b2da      	uxtb	r2, r3
 800cd98:	4b25      	ldr	r3, [pc, #148]	; (800ce30 <lcd_set_symbol+0x520>)
 800cd9a:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_16] |= (1 << BIT_5);
 800cd9c:	4b24      	ldr	r3, [pc, #144]	; (800ce30 <lcd_set_symbol+0x520>)
 800cd9e:	7c1b      	ldrb	r3, [r3, #16]
 800cda0:	f043 0320 	orr.w	r3, r3, #32
 800cda4:	b2da      	uxtb	r2, r3
 800cda6:	4b22      	ldr	r3, [pc, #136]	; (800ce30 <lcd_set_symbol+0x520>)
 800cda8:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_1] |= (1 << BIT_5);
 800cdaa:	4b21      	ldr	r3, [pc, #132]	; (800ce30 <lcd_set_symbol+0x520>)
 800cdac:	785b      	ldrb	r3, [r3, #1]
 800cdae:	f043 0320 	orr.w	r3, r3, #32
 800cdb2:	b2da      	uxtb	r2, r3
 800cdb4:	4b1e      	ldr	r3, [pc, #120]	; (800ce30 <lcd_set_symbol+0x520>)
 800cdb6:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_1] |= (1 << BIT_4);
 800cdb8:	4b1d      	ldr	r3, [pc, #116]	; (800ce30 <lcd_set_symbol+0x520>)
 800cdba:	785b      	ldrb	r3, [r3, #1]
 800cdbc:	f043 0310 	orr.w	r3, r3, #16
 800cdc0:	b2da      	uxtb	r2, r3
 800cdc2:	4b1b      	ldr	r3, [pc, #108]	; (800ce30 <lcd_set_symbol+0x520>)
 800cdc4:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_6] |= (1 << BIT_5);
 800cdc6:	4b1a      	ldr	r3, [pc, #104]	; (800ce30 <lcd_set_symbol+0x520>)
 800cdc8:	799b      	ldrb	r3, [r3, #6]
 800cdca:	f043 0320 	orr.w	r3, r3, #32
 800cdce:	b2da      	uxtb	r2, r3
 800cdd0:	4b17      	ldr	r3, [pc, #92]	; (800ce30 <lcd_set_symbol+0x520>)
 800cdd2:	719a      	strb	r2, [r3, #6]
        break;
 800cdd4:	e0d4      	b.n	800cf80 <lcd_set_symbol+0x670>
        case F:
            g_lcd_map[REG_10] |= (1 << BIT_3);
 800cdd6:	4b16      	ldr	r3, [pc, #88]	; (800ce30 <lcd_set_symbol+0x520>)
 800cdd8:	7a9b      	ldrb	r3, [r3, #10]
 800cdda:	f043 0308 	orr.w	r3, r3, #8
 800cdde:	b2da      	uxtb	r2, r3
 800cde0:	4b13      	ldr	r3, [pc, #76]	; (800ce30 <lcd_set_symbol+0x520>)
 800cde2:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_5);
 800cde4:	4b12      	ldr	r3, [pc, #72]	; (800ce30 <lcd_set_symbol+0x520>)
 800cde6:	7bdb      	ldrb	r3, [r3, #15]
 800cde8:	f043 0320 	orr.w	r3, r3, #32
 800cdec:	b2da      	uxtb	r2, r3
 800cdee:	4b10      	ldr	r3, [pc, #64]	; (800ce30 <lcd_set_symbol+0x520>)
 800cdf0:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 800cdf2:	4b0f      	ldr	r3, [pc, #60]	; (800ce30 <lcd_set_symbol+0x520>)
 800cdf4:	7bdb      	ldrb	r3, [r3, #15]
 800cdf6:	f043 0304 	orr.w	r3, r3, #4
 800cdfa:	b2da      	uxtb	r2, r3
 800cdfc:	4b0c      	ldr	r3, [pc, #48]	; (800ce30 <lcd_set_symbol+0x520>)
 800cdfe:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0]  |= (1 << BIT_5);
 800ce00:	4b0b      	ldr	r3, [pc, #44]	; (800ce30 <lcd_set_symbol+0x520>)
 800ce02:	781b      	ldrb	r3, [r3, #0]
 800ce04:	f043 0320 	orr.w	r3, r3, #32
 800ce08:	b2da      	uxtb	r2, r3
 800ce0a:	4b09      	ldr	r3, [pc, #36]	; (800ce30 <lcd_set_symbol+0x520>)
 800ce0c:	701a      	strb	r2, [r3, #0]
        break;
 800ce0e:	e0b7      	b.n	800cf80 <lcd_set_symbol+0x670>
        case LIN_1:
            g_lcd_map[REG_15] |= (1 << BIT_1);
 800ce10:	4b07      	ldr	r3, [pc, #28]	; (800ce30 <lcd_set_symbol+0x520>)
 800ce12:	7bdb      	ldrb	r3, [r3, #15]
 800ce14:	f043 0302 	orr.w	r3, r3, #2
 800ce18:	b2da      	uxtb	r2, r3
 800ce1a:	4b05      	ldr	r3, [pc, #20]	; (800ce30 <lcd_set_symbol+0x520>)
 800ce1c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 800ce1e:	4b04      	ldr	r3, [pc, #16]	; (800ce30 <lcd_set_symbol+0x520>)
 800ce20:	781b      	ldrb	r3, [r3, #0]
 800ce22:	f043 0302 	orr.w	r3, r3, #2
 800ce26:	b2da      	uxtb	r2, r3
 800ce28:	4b01      	ldr	r3, [pc, #4]	; (800ce30 <lcd_set_symbol+0x520>)
 800ce2a:	701a      	strb	r2, [r3, #0]
        break;
 800ce2c:	e0a8      	b.n	800cf80 <lcd_set_symbol+0x670>
 800ce2e:	bf00      	nop
 800ce30:	20001a38 	.word	0x20001a38
        case LIN_2:
            g_lcd_map[REG_14] |= (1 << BIT_7);
 800ce34:	4b56      	ldr	r3, [pc, #344]	; (800cf90 <lcd_set_symbol+0x680>)
 800ce36:	7b9b      	ldrb	r3, [r3, #14]
 800ce38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ce3c:	b2da      	uxtb	r2, r3
 800ce3e:	4b54      	ldr	r3, [pc, #336]	; (800cf90 <lcd_set_symbol+0x680>)
 800ce40:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_19] |= (1 << BIT_7);
 800ce42:	4b53      	ldr	r3, [pc, #332]	; (800cf90 <lcd_set_symbol+0x680>)
 800ce44:	7cdb      	ldrb	r3, [r3, #19]
 800ce46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ce4a:	b2da      	uxtb	r2, r3
 800ce4c:	4b50      	ldr	r3, [pc, #320]	; (800cf90 <lcd_set_symbol+0x680>)
 800ce4e:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0]  |= (1 << BIT_0);
 800ce50:	4b4f      	ldr	r3, [pc, #316]	; (800cf90 <lcd_set_symbol+0x680>)
 800ce52:	781b      	ldrb	r3, [r3, #0]
 800ce54:	f043 0301 	orr.w	r3, r3, #1
 800ce58:	b2da      	uxtb	r2, r3
 800ce5a:	4b4d      	ldr	r3, [pc, #308]	; (800cf90 <lcd_set_symbol+0x680>)
 800ce5c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 800ce5e:	4b4c      	ldr	r3, [pc, #304]	; (800cf90 <lcd_set_symbol+0x680>)
 800ce60:	7cdb      	ldrb	r3, [r3, #19]
 800ce62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce66:	b2da      	uxtb	r2, r3
 800ce68:	4b49      	ldr	r3, [pc, #292]	; (800cf90 <lcd_set_symbol+0x680>)
 800ce6a:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0]  |= (1 << BIT_1);
 800ce6c:	4b48      	ldr	r3, [pc, #288]	; (800cf90 <lcd_set_symbol+0x680>)
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	f043 0302 	orr.w	r3, r3, #2
 800ce74:	b2da      	uxtb	r2, r3
 800ce76:	4b46      	ldr	r3, [pc, #280]	; (800cf90 <lcd_set_symbol+0x680>)
 800ce78:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5]  |= (1 << BIT_1);
 800ce7a:	4b45      	ldr	r3, [pc, #276]	; (800cf90 <lcd_set_symbol+0x680>)
 800ce7c:	795b      	ldrb	r3, [r3, #5]
 800ce7e:	f043 0302 	orr.w	r3, r3, #2
 800ce82:	b2da      	uxtb	r2, r3
 800ce84:	4b42      	ldr	r3, [pc, #264]	; (800cf90 <lcd_set_symbol+0x680>)
 800ce86:	715a      	strb	r2, [r3, #5]
        break;
 800ce88:	e07a      	b.n	800cf80 <lcd_set_symbol+0x670>
        case LIN_3:
            g_lcd_map[REG_14] |= (1 << BIT_7);
 800ce8a:	4b41      	ldr	r3, [pc, #260]	; (800cf90 <lcd_set_symbol+0x680>)
 800ce8c:	7b9b      	ldrb	r3, [r3, #14]
 800ce8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ce92:	b2da      	uxtb	r2, r3
 800ce94:	4b3e      	ldr	r3, [pc, #248]	; (800cf90 <lcd_set_symbol+0x680>)
 800ce96:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_19] |= (1 << BIT_7);
 800ce98:	4b3d      	ldr	r3, [pc, #244]	; (800cf90 <lcd_set_symbol+0x680>)
 800ce9a:	7cdb      	ldrb	r3, [r3, #19]
 800ce9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cea0:	b2da      	uxtb	r2, r3
 800cea2:	4b3b      	ldr	r3, [pc, #236]	; (800cf90 <lcd_set_symbol+0x680>)
 800cea4:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0]  |= (1 << BIT_0);
 800cea6:	4b3a      	ldr	r3, [pc, #232]	; (800cf90 <lcd_set_symbol+0x680>)
 800cea8:	781b      	ldrb	r3, [r3, #0]
 800ceaa:	f043 0301 	orr.w	r3, r3, #1
 800ceae:	b2da      	uxtb	r2, r3
 800ceb0:	4b37      	ldr	r3, [pc, #220]	; (800cf90 <lcd_set_symbol+0x680>)
 800ceb2:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 800ceb4:	4b36      	ldr	r3, [pc, #216]	; (800cf90 <lcd_set_symbol+0x680>)
 800ceb6:	7cdb      	ldrb	r3, [r3, #19]
 800ceb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cebc:	b2da      	uxtb	r2, r3
 800cebe:	4b34      	ldr	r3, [pc, #208]	; (800cf90 <lcd_set_symbol+0x680>)
 800cec0:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_4]  |= (1 << BIT_7);
 800cec2:	4b33      	ldr	r3, [pc, #204]	; (800cf90 <lcd_set_symbol+0x680>)
 800cec4:	791b      	ldrb	r3, [r3, #4]
 800cec6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ceca:	b2da      	uxtb	r2, r3
 800cecc:	4b30      	ldr	r3, [pc, #192]	; (800cf90 <lcd_set_symbol+0x680>)
 800cece:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5]  |= (1 << BIT_1);
 800ced0:	4b2f      	ldr	r3, [pc, #188]	; (800cf90 <lcd_set_symbol+0x680>)
 800ced2:	795b      	ldrb	r3, [r3, #5]
 800ced4:	f043 0302 	orr.w	r3, r3, #2
 800ced8:	b2da      	uxtb	r2, r3
 800ceda:	4b2d      	ldr	r3, [pc, #180]	; (800cf90 <lcd_set_symbol+0x680>)
 800cedc:	715a      	strb	r2, [r3, #5]
        break;
 800cede:	e04f      	b.n	800cf80 <lcd_set_symbol+0x670>
        case LIN_4:
            g_lcd_map[REG_15] |= (1 << BIT_1);
 800cee0:	4b2b      	ldr	r3, [pc, #172]	; (800cf90 <lcd_set_symbol+0x680>)
 800cee2:	7bdb      	ldrb	r3, [r3, #15]
 800cee4:	f043 0302 	orr.w	r3, r3, #2
 800cee8:	b2da      	uxtb	r2, r3
 800ceea:	4b29      	ldr	r3, [pc, #164]	; (800cf90 <lcd_set_symbol+0x680>)
 800ceec:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] |= (1 << BIT_7);
 800ceee:	4b28      	ldr	r3, [pc, #160]	; (800cf90 <lcd_set_symbol+0x680>)
 800cef0:	7cdb      	ldrb	r3, [r3, #19]
 800cef2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cef6:	b2da      	uxtb	r2, r3
 800cef8:	4b25      	ldr	r3, [pc, #148]	; (800cf90 <lcd_set_symbol+0x680>)
 800cefa:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0]  |= (1 << BIT_0);
 800cefc:	4b24      	ldr	r3, [pc, #144]	; (800cf90 <lcd_set_symbol+0x680>)
 800cefe:	781b      	ldrb	r3, [r3, #0]
 800cf00:	f043 0301 	orr.w	r3, r3, #1
 800cf04:	b2da      	uxtb	r2, r3
 800cf06:	4b22      	ldr	r3, [pc, #136]	; (800cf90 <lcd_set_symbol+0x680>)
 800cf08:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 800cf0a:	4b21      	ldr	r3, [pc, #132]	; (800cf90 <lcd_set_symbol+0x680>)
 800cf0c:	7cdb      	ldrb	r3, [r3, #19]
 800cf0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf12:	b2da      	uxtb	r2, r3
 800cf14:	4b1e      	ldr	r3, [pc, #120]	; (800cf90 <lcd_set_symbol+0x680>)
 800cf16:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_4]  |= (1 << BIT_7);
 800cf18:	4b1d      	ldr	r3, [pc, #116]	; (800cf90 <lcd_set_symbol+0x680>)
 800cf1a:	791b      	ldrb	r3, [r3, #4]
 800cf1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cf20:	b2da      	uxtb	r2, r3
 800cf22:	4b1b      	ldr	r3, [pc, #108]	; (800cf90 <lcd_set_symbol+0x680>)
 800cf24:	711a      	strb	r2, [r3, #4]
        break;
 800cf26:	e02b      	b.n	800cf80 <lcd_set_symbol+0x670>
        case LIN_5:
            g_lcd_map[REG_14] |= (1 << BIT_7);
 800cf28:	4b19      	ldr	r3, [pc, #100]	; (800cf90 <lcd_set_symbol+0x680>)
 800cf2a:	7b9b      	ldrb	r3, [r3, #14]
 800cf2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cf30:	b2da      	uxtb	r2, r3
 800cf32:	4b17      	ldr	r3, [pc, #92]	; (800cf90 <lcd_set_symbol+0x680>)
 800cf34:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 800cf36:	4b16      	ldr	r3, [pc, #88]	; (800cf90 <lcd_set_symbol+0x680>)
 800cf38:	7bdb      	ldrb	r3, [r3, #15]
 800cf3a:	f043 0302 	orr.w	r3, r3, #2
 800cf3e:	b2da      	uxtb	r2, r3
 800cf40:	4b13      	ldr	r3, [pc, #76]	; (800cf90 <lcd_set_symbol+0x680>)
 800cf42:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0]  |= (1 << BIT_0);
 800cf44:	4b12      	ldr	r3, [pc, #72]	; (800cf90 <lcd_set_symbol+0x680>)
 800cf46:	781b      	ldrb	r3, [r3, #0]
 800cf48:	f043 0301 	orr.w	r3, r3, #1
 800cf4c:	b2da      	uxtb	r2, r3
 800cf4e:	4b10      	ldr	r3, [pc, #64]	; (800cf90 <lcd_set_symbol+0x680>)
 800cf50:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 800cf52:	4b0f      	ldr	r3, [pc, #60]	; (800cf90 <lcd_set_symbol+0x680>)
 800cf54:	7cdb      	ldrb	r3, [r3, #19]
 800cf56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf5a:	b2da      	uxtb	r2, r3
 800cf5c:	4b0c      	ldr	r3, [pc, #48]	; (800cf90 <lcd_set_symbol+0x680>)
 800cf5e:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_4]  |= (1 << BIT_7);
 800cf60:	4b0b      	ldr	r3, [pc, #44]	; (800cf90 <lcd_set_symbol+0x680>)
 800cf62:	791b      	ldrb	r3, [r3, #4]
 800cf64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cf68:	b2da      	uxtb	r2, r3
 800cf6a:	4b09      	ldr	r3, [pc, #36]	; (800cf90 <lcd_set_symbol+0x680>)
 800cf6c:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5]  |= (1 << BIT_1);
 800cf6e:	4b08      	ldr	r3, [pc, #32]	; (800cf90 <lcd_set_symbol+0x680>)
 800cf70:	795b      	ldrb	r3, [r3, #5]
 800cf72:	f043 0302 	orr.w	r3, r3, #2
 800cf76:	b2da      	uxtb	r2, r3
 800cf78:	4b05      	ldr	r3, [pc, #20]	; (800cf90 <lcd_set_symbol+0x680>)
 800cf7a:	715a      	strb	r2, [r3, #5]
        break;
 800cf7c:	e000      	b.n	800cf80 <lcd_set_symbol+0x670>
        default:
        break;
 800cf7e:	bf00      	nop
    }

    pcf8553_blink(blink_speed);
 800cf80:	79bb      	ldrb	r3, [r7, #6]
 800cf82:	4618      	mov	r0, r3
 800cf84:	f000 fb20 	bl	800d5c8 <pcf8553_blink>
}
 800cf88:	bf00      	nop
 800cf8a:	3708      	adds	r7, #8
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}
 800cf90:	20001a38 	.word	0x20001a38

0800cf94 <lcd_set_time_unit>:
 * pantalla LCD custom.
 * @param Unidad a imprimir y velocidad de parpadeo.
 * @retval None
 */
void lcd_set_time_unit(fmc_unit_time_t time_unit, blink_t blink_speed)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b082      	sub	sp, #8
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	460a      	mov	r2, r1
 800cf9e:	71fb      	strb	r3, [r7, #7]
 800cfa0:	4613      	mov	r3, r2
 800cfa2:	71bb      	strb	r3, [r7, #6]
    switch (time_unit)
 800cfa4:	79fb      	ldrb	r3, [r7, #7]
 800cfa6:	2b03      	cmp	r3, #3
 800cfa8:	d82a      	bhi.n	800d000 <lcd_set_time_unit+0x6c>
 800cfaa:	a201      	add	r2, pc, #4	; (adr r2, 800cfb0 <lcd_set_time_unit+0x1c>)
 800cfac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfb0:	0800cfc1 	.word	0x0800cfc1
 800cfb4:	0800cfd1 	.word	0x0800cfd1
 800cfb8:	0800cfe1 	.word	0x0800cfe1
 800cfbc:	0800cff1 	.word	0x0800cff1
    {
        case H:
            g_lcd_map[REG_5] |= (1 << BIT_6);
 800cfc0:	4b14      	ldr	r3, [pc, #80]	; (800d014 <lcd_set_time_unit+0x80>)
 800cfc2:	795b      	ldrb	r3, [r3, #5]
 800cfc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfc8:	b2da      	uxtb	r2, r3
 800cfca:	4b12      	ldr	r3, [pc, #72]	; (800d014 <lcd_set_time_unit+0x80>)
 800cfcc:	715a      	strb	r2, [r3, #5]
        break;
 800cfce:	e018      	b.n	800d002 <lcd_set_time_unit+0x6e>
        case D:
            g_lcd_map[REG_9] |= (1 << BIT_5);
 800cfd0:	4b10      	ldr	r3, [pc, #64]	; (800d014 <lcd_set_time_unit+0x80>)
 800cfd2:	7a5b      	ldrb	r3, [r3, #9]
 800cfd4:	f043 0320 	orr.w	r3, r3, #32
 800cfd8:	b2da      	uxtb	r2, r3
 800cfda:	4b0e      	ldr	r3, [pc, #56]	; (800d014 <lcd_set_time_unit+0x80>)
 800cfdc:	725a      	strb	r2, [r3, #9]
        break;
 800cfde:	e010      	b.n	800d002 <lcd_set_time_unit+0x6e>
        case S:
            g_lcd_map[REG_10] |= (1 << BIT_5);
 800cfe0:	4b0c      	ldr	r3, [pc, #48]	; (800d014 <lcd_set_time_unit+0x80>)
 800cfe2:	7a9b      	ldrb	r3, [r3, #10]
 800cfe4:	f043 0320 	orr.w	r3, r3, #32
 800cfe8:	b2da      	uxtb	r2, r3
 800cfea:	4b0a      	ldr	r3, [pc, #40]	; (800d014 <lcd_set_time_unit+0x80>)
 800cfec:	729a      	strb	r2, [r3, #10]
        break;
 800cfee:	e008      	b.n	800d002 <lcd_set_time_unit+0x6e>
        case M:
            g_lcd_map[REG_9] |= (1 << BIT_7);
 800cff0:	4b08      	ldr	r3, [pc, #32]	; (800d014 <lcd_set_time_unit+0x80>)
 800cff2:	7a5b      	ldrb	r3, [r3, #9]
 800cff4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cff8:	b2da      	uxtb	r2, r3
 800cffa:	4b06      	ldr	r3, [pc, #24]	; (800d014 <lcd_set_time_unit+0x80>)
 800cffc:	725a      	strb	r2, [r3, #9]
        break;
 800cffe:	e000      	b.n	800d002 <lcd_set_time_unit+0x6e>
        default:
        break;
 800d000:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 800d002:	79bb      	ldrb	r3, [r7, #6]
 800d004:	4618      	mov	r0, r3
 800d006:	f000 fadf 	bl	800d5c8 <pcf8553_blink>
}
 800d00a:	bf00      	nop
 800d00c:	3708      	adds	r7, #8
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}
 800d012:	bf00      	nop
 800d014:	20001a38 	.word	0x20001a38

0800d018 <lcd_set_vol_unit>:
 * @brief Función que imprime la unidad de volumen a utilizar.
 * @param Unidad a imprimir y velocidad de parpadeo.
 * @retval None
 */
void lcd_set_vol_unit(fmc_unit_volume_t vol_unit, blink_t blink_speed)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b082      	sub	sp, #8
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	4603      	mov	r3, r0
 800d020:	460a      	mov	r2, r1
 800d022:	71fb      	strb	r3, [r7, #7]
 800d024:	4613      	mov	r3, r2
 800d026:	71bb      	strb	r3, [r7, #6]
    switch (vol_unit)
 800d028:	79fb      	ldrb	r3, [r7, #7]
 800d02a:	2b06      	cmp	r3, #6
 800d02c:	f200 81e3 	bhi.w	800d3f6 <lcd_set_vol_unit+0x3de>
 800d030:	a201      	add	r2, pc, #4	; (adr r2, 800d038 <lcd_set_vol_unit+0x20>)
 800d032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d036:	bf00      	nop
 800d038:	0800d055 	.word	0x0800d055
 800d03c:	0800d147 	.word	0x0800d147
 800d040:	0800d0ab 	.word	0x0800d0ab
 800d044:	0800d2bd 	.word	0x0800d2bd
 800d048:	0800d1f1 	.word	0x0800d1f1
 800d04c:	0800d33d 	.word	0x0800d33d
 800d050:	0800d3bd 	.word	0x0800d3bd
    {
        case LT:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 800d054:	4b98      	ldr	r3, [pc, #608]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d056:	7bdb      	ldrb	r3, [r3, #15]
 800d058:	f043 0320 	orr.w	r3, r3, #32
 800d05c:	b2da      	uxtb	r2, r3
 800d05e:	4b96      	ldr	r3, [pc, #600]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d060:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 800d062:	4b95      	ldr	r3, [pc, #596]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d064:	781b      	ldrb	r3, [r3, #0]
 800d066:	f043 0320 	orr.w	r3, r3, #32
 800d06a:	b2da      	uxtb	r2, r3
 800d06c:	4b92      	ldr	r3, [pc, #584]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d06e:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_5);
 800d070:	4b91      	ldr	r3, [pc, #580]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d072:	795b      	ldrb	r3, [r3, #5]
 800d074:	f043 0320 	orr.w	r3, r3, #32
 800d078:	b2da      	uxtb	r2, r3
 800d07a:	4b8f      	ldr	r3, [pc, #572]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d07c:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 800d07e:	4b8e      	ldr	r3, [pc, #568]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d080:	7b9b      	ldrb	r3, [r3, #14]
 800d082:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d086:	b2da      	uxtb	r2, r3
 800d088:	4b8b      	ldr	r3, [pc, #556]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d08a:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_10] |= (1 << BIT_0);
 800d08c:	4b8a      	ldr	r3, [pc, #552]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d08e:	7a9b      	ldrb	r3, [r3, #10]
 800d090:	f043 0301 	orr.w	r3, r3, #1
 800d094:	b2da      	uxtb	r2, r3
 800d096:	4b88      	ldr	r3, [pc, #544]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d098:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_9] |= (1 << BIT_6);
 800d09a:	4b87      	ldr	r3, [pc, #540]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d09c:	7a5b      	ldrb	r3, [r3, #9]
 800d09e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0a2:	b2da      	uxtb	r2, r3
 800d0a4:	4b84      	ldr	r3, [pc, #528]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d0a6:	725a      	strb	r2, [r3, #9]
        break;
 800d0a8:	e1a6      	b.n	800d3f8 <lcd_set_vol_unit+0x3e0>
        case KG:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 800d0aa:	4b83      	ldr	r3, [pc, #524]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d0ac:	7bdb      	ldrb	r3, [r3, #15]
 800d0ae:	f043 0320 	orr.w	r3, r3, #32
 800d0b2:	b2da      	uxtb	r2, r3
 800d0b4:	4b80      	ldr	r3, [pc, #512]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d0b6:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 800d0b8:	4b7f      	ldr	r3, [pc, #508]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d0ba:	7bdb      	ldrb	r3, [r3, #15]
 800d0bc:	f043 0310 	orr.w	r3, r3, #16
 800d0c0:	b2da      	uxtb	r2, r3
 800d0c2:	4b7d      	ldr	r3, [pc, #500]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d0c4:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 800d0c6:	4b7c      	ldr	r3, [pc, #496]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d0c8:	7bdb      	ldrb	r3, [r3, #15]
 800d0ca:	f043 0304 	orr.w	r3, r3, #4
 800d0ce:	b2da      	uxtb	r2, r3
 800d0d0:	4b79      	ldr	r3, [pc, #484]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d0d2:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 800d0d4:	4b78      	ldr	r3, [pc, #480]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d0d6:	781b      	ldrb	r3, [r3, #0]
 800d0d8:	f043 0320 	orr.w	r3, r3, #32
 800d0dc:	b2da      	uxtb	r2, r3
 800d0de:	4b76      	ldr	r3, [pc, #472]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d0e0:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_4);
 800d0e2:	4b75      	ldr	r3, [pc, #468]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d0e4:	795b      	ldrb	r3, [r3, #5]
 800d0e6:	f043 0310 	orr.w	r3, r3, #16
 800d0ea:	b2da      	uxtb	r2, r3
 800d0ec:	4b72      	ldr	r3, [pc, #456]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d0ee:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 800d0f0:	4b71      	ldr	r3, [pc, #452]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d0f2:	7b9b      	ldrb	r3, [r3, #14]
 800d0f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d0f8:	b2da      	uxtb	r2, r3
 800d0fa:	4b6f      	ldr	r3, [pc, #444]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d0fc:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 800d0fe:	4b6e      	ldr	r3, [pc, #440]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d100:	7bdb      	ldrb	r3, [r3, #15]
 800d102:	f043 0302 	orr.w	r3, r3, #2
 800d106:	b2da      	uxtb	r2, r3
 800d108:	4b6b      	ldr	r3, [pc, #428]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d10a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 800d10c:	4b6a      	ldr	r3, [pc, #424]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d10e:	781b      	ldrb	r3, [r3, #0]
 800d110:	f043 0301 	orr.w	r3, r3, #1
 800d114:	b2da      	uxtb	r2, r3
 800d116:	4b68      	ldr	r3, [pc, #416]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d118:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 800d11a:	4b67      	ldr	r3, [pc, #412]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d11c:	781b      	ldrb	r3, [r3, #0]
 800d11e:	f043 0302 	orr.w	r3, r3, #2
 800d122:	b2da      	uxtb	r2, r3
 800d124:	4b64      	ldr	r3, [pc, #400]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d126:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_7);
 800d128:	4b63      	ldr	r3, [pc, #396]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d12a:	791b      	ldrb	r3, [r3, #4]
 800d12c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d130:	b2da      	uxtb	r2, r3
 800d132:	4b61      	ldr	r3, [pc, #388]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d134:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 800d136:	4b60      	ldr	r3, [pc, #384]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d138:	795b      	ldrb	r3, [r3, #5]
 800d13a:	f043 0302 	orr.w	r3, r3, #2
 800d13e:	b2da      	uxtb	r2, r3
 800d140:	4b5d      	ldr	r3, [pc, #372]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d142:	715a      	strb	r2, [r3, #5]
        break;
 800d144:	e158      	b.n	800d3f8 <lcd_set_vol_unit+0x3e0>
        case M3:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 800d146:	4b5c      	ldr	r3, [pc, #368]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d148:	7bdb      	ldrb	r3, [r3, #15]
 800d14a:	f043 0320 	orr.w	r3, r3, #32
 800d14e:	b2da      	uxtb	r2, r3
 800d150:	4b59      	ldr	r3, [pc, #356]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d152:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_10] |= (1 << BIT_2);
 800d154:	4b58      	ldr	r3, [pc, #352]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d156:	7a9b      	ldrb	r3, [r3, #10]
 800d158:	f043 0304 	orr.w	r3, r3, #4
 800d15c:	b2da      	uxtb	r2, r3
 800d15e:	4b56      	ldr	r3, [pc, #344]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d160:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 800d162:	4b55      	ldr	r3, [pc, #340]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d164:	7bdb      	ldrb	r3, [r3, #15]
 800d166:	f043 0310 	orr.w	r3, r3, #16
 800d16a:	b2da      	uxtb	r2, r3
 800d16c:	4b52      	ldr	r3, [pc, #328]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d16e:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 800d170:	4b51      	ldr	r3, [pc, #324]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d172:	7bdb      	ldrb	r3, [r3, #15]
 800d174:	f043 0308 	orr.w	r3, r3, #8
 800d178:	b2da      	uxtb	r2, r3
 800d17a:	4b4f      	ldr	r3, [pc, #316]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d17c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 800d17e:	4b4e      	ldr	r3, [pc, #312]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d180:	781b      	ldrb	r3, [r3, #0]
 800d182:	f043 0320 	orr.w	r3, r3, #32
 800d186:	b2da      	uxtb	r2, r3
 800d188:	4b4b      	ldr	r3, [pc, #300]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d18a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 800d18c:	4b4a      	ldr	r3, [pc, #296]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d18e:	781b      	ldrb	r3, [r3, #0]
 800d190:	f043 0308 	orr.w	r3, r3, #8
 800d194:	b2da      	uxtb	r2, r3
 800d196:	4b48      	ldr	r3, [pc, #288]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d198:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 800d19a:	4b47      	ldr	r3, [pc, #284]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d19c:	7b9b      	ldrb	r3, [r3, #14]
 800d19e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d1a2:	b2da      	uxtb	r2, r3
 800d1a4:	4b44      	ldr	r3, [pc, #272]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d1a6:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_19] |= (1 << BIT_7);
 800d1a8:	4b43      	ldr	r3, [pc, #268]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d1aa:	7cdb      	ldrb	r3, [r3, #19]
 800d1ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d1b0:	b2da      	uxtb	r2, r3
 800d1b2:	4b41      	ldr	r3, [pc, #260]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d1b4:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 800d1b6:	4b40      	ldr	r3, [pc, #256]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d1b8:	7cdb      	ldrb	r3, [r3, #19]
 800d1ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1be:	b2da      	uxtb	r2, r3
 800d1c0:	4b3d      	ldr	r3, [pc, #244]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d1c2:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 800d1c4:	4b3c      	ldr	r3, [pc, #240]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d1c6:	781b      	ldrb	r3, [r3, #0]
 800d1c8:	f043 0301 	orr.w	r3, r3, #1
 800d1cc:	b2da      	uxtb	r2, r3
 800d1ce:	4b3a      	ldr	r3, [pc, #232]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d1d0:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_7);
 800d1d2:	4b39      	ldr	r3, [pc, #228]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d1d4:	791b      	ldrb	r3, [r3, #4]
 800d1d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d1da:	b2da      	uxtb	r2, r3
 800d1dc:	4b36      	ldr	r3, [pc, #216]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d1de:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 800d1e0:	4b35      	ldr	r3, [pc, #212]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d1e2:	795b      	ldrb	r3, [r3, #5]
 800d1e4:	f043 0302 	orr.w	r3, r3, #2
 800d1e8:	b2da      	uxtb	r2, r3
 800d1ea:	4b33      	ldr	r3, [pc, #204]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d1ec:	715a      	strb	r2, [r3, #5]
        break;
 800d1ee:	e103      	b.n	800d3f8 <lcd_set_vol_unit+0x3e0>
        case BR:
            g_lcd_map[REG_10] |= (1 << BIT_3);
 800d1f0:	4b31      	ldr	r3, [pc, #196]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d1f2:	7a9b      	ldrb	r3, [r3, #10]
 800d1f4:	f043 0308 	orr.w	r3, r3, #8
 800d1f8:	b2da      	uxtb	r2, r3
 800d1fa:	4b2f      	ldr	r3, [pc, #188]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d1fc:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_10] |= (1 << BIT_4);
 800d1fe:	4b2e      	ldr	r3, [pc, #184]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d200:	7a9b      	ldrb	r3, [r3, #10]
 800d202:	f043 0310 	orr.w	r3, r3, #16
 800d206:	b2da      	uxtb	r2, r3
 800d208:	4b2b      	ldr	r3, [pc, #172]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d20a:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 800d20c:	4b2a      	ldr	r3, [pc, #168]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d20e:	7bdb      	ldrb	r3, [r3, #15]
 800d210:	f043 0308 	orr.w	r3, r3, #8
 800d214:	b2da      	uxtb	r2, r3
 800d216:	4b28      	ldr	r3, [pc, #160]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d218:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 800d21a:	4b27      	ldr	r3, [pc, #156]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	f043 0310 	orr.w	r3, r3, #16
 800d222:	b2da      	uxtb	r2, r3
 800d224:	4b24      	ldr	r3, [pc, #144]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d226:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_2);
 800d228:	4b23      	ldr	r3, [pc, #140]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d22a:	795b      	ldrb	r3, [r3, #5]
 800d22c:	f043 0304 	orr.w	r3, r3, #4
 800d230:	b2da      	uxtb	r2, r3
 800d232:	4b21      	ldr	r3, [pc, #132]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d234:	715a      	strb	r2, [r3, #5]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 800d236:	4b20      	ldr	r3, [pc, #128]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	f043 0308 	orr.w	r3, r3, #8
 800d23e:	b2da      	uxtb	r2, r3
 800d240:	4b1d      	ldr	r3, [pc, #116]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d242:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_5);
 800d244:	4b1c      	ldr	r3, [pc, #112]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d246:	795b      	ldrb	r3, [r3, #5]
 800d248:	f043 0320 	orr.w	r3, r3, #32
 800d24c:	b2da      	uxtb	r2, r3
 800d24e:	4b1a      	ldr	r3, [pc, #104]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d250:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 800d252:	4b19      	ldr	r3, [pc, #100]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d254:	7b9b      	ldrb	r3, [r3, #14]
 800d256:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d25a:	b2da      	uxtb	r2, r3
 800d25c:	4b16      	ldr	r3, [pc, #88]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d25e:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 800d260:	4b15      	ldr	r3, [pc, #84]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d262:	7bdb      	ldrb	r3, [r3, #15]
 800d264:	f043 0302 	orr.w	r3, r3, #2
 800d268:	b2da      	uxtb	r2, r3
 800d26a:	4b13      	ldr	r3, [pc, #76]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d26c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] |= (1 << BIT_7);
 800d26e:	4b12      	ldr	r3, [pc, #72]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d270:	7cdb      	ldrb	r3, [r3, #19]
 800d272:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d276:	b2da      	uxtb	r2, r3
 800d278:	4b0f      	ldr	r3, [pc, #60]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d27a:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 800d27c:	4b0e      	ldr	r3, [pc, #56]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d27e:	7cdb      	ldrb	r3, [r3, #19]
 800d280:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d284:	b2da      	uxtb	r2, r3
 800d286:	4b0c      	ldr	r3, [pc, #48]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d288:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 800d28a:	4b0b      	ldr	r3, [pc, #44]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d28c:	781b      	ldrb	r3, [r3, #0]
 800d28e:	f043 0301 	orr.w	r3, r3, #1
 800d292:	b2da      	uxtb	r2, r3
 800d294:	4b08      	ldr	r3, [pc, #32]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d296:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 800d298:	4b07      	ldr	r3, [pc, #28]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d29a:	781b      	ldrb	r3, [r3, #0]
 800d29c:	f043 0302 	orr.w	r3, r3, #2
 800d2a0:	b2da      	uxtb	r2, r3
 800d2a2:	4b05      	ldr	r3, [pc, #20]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d2a4:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_0);
 800d2a6:	4b04      	ldr	r3, [pc, #16]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d2a8:	795b      	ldrb	r3, [r3, #5]
 800d2aa:	f043 0301 	orr.w	r3, r3, #1
 800d2ae:	b2da      	uxtb	r2, r3
 800d2b0:	4b01      	ldr	r3, [pc, #4]	; (800d2b8 <lcd_set_vol_unit+0x2a0>)
 800d2b2:	715a      	strb	r2, [r3, #5]
        break;
 800d2b4:	e0a0      	b.n	800d3f8 <lcd_set_vol_unit+0x3e0>
 800d2b6:	bf00      	nop
 800d2b8:	20001a38 	.word	0x20001a38
        case GL:
            g_lcd_map[REG_10] |= (1 << BIT_3);
 800d2bc:	4b52      	ldr	r3, [pc, #328]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d2be:	7a9b      	ldrb	r3, [r3, #10]
 800d2c0:	f043 0308 	orr.w	r3, r3, #8
 800d2c4:	b2da      	uxtb	r2, r3
 800d2c6:	4b50      	ldr	r3, [pc, #320]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d2c8:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_5);
 800d2ca:	4b4f      	ldr	r3, [pc, #316]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d2cc:	7bdb      	ldrb	r3, [r3, #15]
 800d2ce:	f043 0320 	orr.w	r3, r3, #32
 800d2d2:	b2da      	uxtb	r2, r3
 800d2d4:	4b4c      	ldr	r3, [pc, #304]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d2d6:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 800d2d8:	4b4b      	ldr	r3, [pc, #300]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d2da:	781b      	ldrb	r3, [r3, #0]
 800d2dc:	f043 0310 	orr.w	r3, r3, #16
 800d2e0:	b2da      	uxtb	r2, r3
 800d2e2:	4b49      	ldr	r3, [pc, #292]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d2e4:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 800d2e6:	4b48      	ldr	r3, [pc, #288]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d2e8:	781b      	ldrb	r3, [r3, #0]
 800d2ea:	f043 0320 	orr.w	r3, r3, #32
 800d2ee:	b2da      	uxtb	r2, r3
 800d2f0:	4b45      	ldr	r3, [pc, #276]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d2f2:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 800d2f4:	4b44      	ldr	r3, [pc, #272]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d2f6:	781b      	ldrb	r3, [r3, #0]
 800d2f8:	f043 0308 	orr.w	r3, r3, #8
 800d2fc:	b2da      	uxtb	r2, r3
 800d2fe:	4b42      	ldr	r3, [pc, #264]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d300:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_5);
 800d302:	4b41      	ldr	r3, [pc, #260]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d304:	795b      	ldrb	r3, [r3, #5]
 800d306:	f043 0320 	orr.w	r3, r3, #32
 800d30a:	b2da      	uxtb	r2, r3
 800d30c:	4b3e      	ldr	r3, [pc, #248]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d30e:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_15] |= (1 << BIT_1);
 800d310:	4b3d      	ldr	r3, [pc, #244]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d312:	7bdb      	ldrb	r3, [r3, #15]
 800d314:	f043 0302 	orr.w	r3, r3, #2
 800d318:	b2da      	uxtb	r2, r3
 800d31a:	4b3b      	ldr	r3, [pc, #236]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d31c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 800d31e:	4b3a      	ldr	r3, [pc, #232]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d320:	781b      	ldrb	r3, [r3, #0]
 800d322:	f043 0302 	orr.w	r3, r3, #2
 800d326:	b2da      	uxtb	r2, r3
 800d328:	4b37      	ldr	r3, [pc, #220]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d32a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 800d32c:	4b36      	ldr	r3, [pc, #216]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d32e:	795b      	ldrb	r3, [r3, #5]
 800d330:	f043 0302 	orr.w	r3, r3, #2
 800d334:	b2da      	uxtb	r2, r3
 800d336:	4b34      	ldr	r3, [pc, #208]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d338:	715a      	strb	r2, [r3, #5]
        break;
 800d33a:	e05d      	b.n	800d3f8 <lcd_set_vol_unit+0x3e0>
        case CELSIUS:
            g_lcd_map[REG_10] |= (1 << BIT_3);
 800d33c:	4b32      	ldr	r3, [pc, #200]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d33e:	7a9b      	ldrb	r3, [r3, #10]
 800d340:	f043 0308 	orr.w	r3, r3, #8
 800d344:	b2da      	uxtb	r2, r3
 800d346:	4b30      	ldr	r3, [pc, #192]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d348:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_5);
 800d34a:	4b2f      	ldr	r3, [pc, #188]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d34c:	7bdb      	ldrb	r3, [r3, #15]
 800d34e:	f043 0320 	orr.w	r3, r3, #32
 800d352:	b2da      	uxtb	r2, r3
 800d354:	4b2c      	ldr	r3, [pc, #176]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d356:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 800d358:	4b2b      	ldr	r3, [pc, #172]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d35a:	7bdb      	ldrb	r3, [r3, #15]
 800d35c:	f043 0308 	orr.w	r3, r3, #8
 800d360:	b2da      	uxtb	r2, r3
 800d362:	4b29      	ldr	r3, [pc, #164]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d364:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 800d366:	4b28      	ldr	r3, [pc, #160]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d368:	7bdb      	ldrb	r3, [r3, #15]
 800d36a:	f043 0304 	orr.w	r3, r3, #4
 800d36e:	b2da      	uxtb	r2, r3
 800d370:	4b25      	ldr	r3, [pc, #148]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d372:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 800d374:	4b24      	ldr	r3, [pc, #144]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d376:	781b      	ldrb	r3, [r3, #0]
 800d378:	f043 0310 	orr.w	r3, r3, #16
 800d37c:	b2da      	uxtb	r2, r3
 800d37e:	4b22      	ldr	r3, [pc, #136]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d380:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 800d382:	4b21      	ldr	r3, [pc, #132]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d384:	7b9b      	ldrb	r3, [r3, #14]
 800d386:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d38a:	b2da      	uxtb	r2, r3
 800d38c:	4b1e      	ldr	r3, [pc, #120]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d38e:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 800d390:	4b1d      	ldr	r3, [pc, #116]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d392:	7bdb      	ldrb	r3, [r3, #15]
 800d394:	f043 0302 	orr.w	r3, r3, #2
 800d398:	b2da      	uxtb	r2, r3
 800d39a:	4b1b      	ldr	r3, [pc, #108]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d39c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 800d39e:	4b1a      	ldr	r3, [pc, #104]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d3a0:	781b      	ldrb	r3, [r3, #0]
 800d3a2:	f043 0302 	orr.w	r3, r3, #2
 800d3a6:	b2da      	uxtb	r2, r3
 800d3a8:	4b17      	ldr	r3, [pc, #92]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d3aa:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 800d3ac:	4b16      	ldr	r3, [pc, #88]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d3ae:	795b      	ldrb	r3, [r3, #5]
 800d3b0:	f043 0302 	orr.w	r3, r3, #2
 800d3b4:	b2da      	uxtb	r2, r3
 800d3b6:	4b14      	ldr	r3, [pc, #80]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d3b8:	715a      	strb	r2, [r3, #5]
        break;
 800d3ba:	e01d      	b.n	800d3f8 <lcd_set_vol_unit+0x3e0>
        case NOTHING:
            g_lcd_map[REG_15] |= (1 << BIT_2);
 800d3bc:	4b12      	ldr	r3, [pc, #72]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d3be:	7bdb      	ldrb	r3, [r3, #15]
 800d3c0:	f043 0304 	orr.w	r3, r3, #4
 800d3c4:	b2da      	uxtb	r2, r3
 800d3c6:	4b10      	ldr	r3, [pc, #64]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d3c8:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 800d3ca:	4b0f      	ldr	r3, [pc, #60]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d3cc:	781b      	ldrb	r3, [r3, #0]
 800d3ce:	f043 0310 	orr.w	r3, r3, #16
 800d3d2:	b2da      	uxtb	r2, r3
 800d3d4:	4b0c      	ldr	r3, [pc, #48]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d3d6:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 800d3d8:	4b0b      	ldr	r3, [pc, #44]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d3da:	7cdb      	ldrb	r3, [r3, #19]
 800d3dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3e0:	b2da      	uxtb	r2, r3
 800d3e2:	4b09      	ldr	r3, [pc, #36]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d3e4:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 800d3e6:	4b08      	ldr	r3, [pc, #32]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d3e8:	781b      	ldrb	r3, [r3, #0]
 800d3ea:	f043 0301 	orr.w	r3, r3, #1
 800d3ee:	b2da      	uxtb	r2, r3
 800d3f0:	4b05      	ldr	r3, [pc, #20]	; (800d408 <lcd_set_vol_unit+0x3f0>)
 800d3f2:	701a      	strb	r2, [r3, #0]
        break;
 800d3f4:	e000      	b.n	800d3f8 <lcd_set_vol_unit+0x3e0>
        default:
        break;
 800d3f6:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 800d3f8:	79bb      	ldrb	r3, [r7, #6]
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f000 f8e4 	bl	800d5c8 <pcf8553_blink>
}
 800d400:	bf00      	nop
 800d402:	3708      	adds	r7, #8
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}
 800d408:	20001a38 	.word	0x20001a38

0800d40c <lcd_write_line>:
 * la primera posicion de cada linea.
 * @param
 * @retval None
 */
void lcd_write_line(uint8_t seg, uint8_t data)
{
 800d40c:	b480      	push	{r7}
 800d40e:	b085      	sub	sp, #20
 800d410:	af00      	add	r7, sp, #0
 800d412:	4603      	mov	r3, r0
 800d414:	460a      	mov	r2, r1
 800d416:	71fb      	strb	r3, [r7, #7]
 800d418:	4613      	mov	r3, r2
 800d41a:	71bb      	strb	r3, [r7, #6]
    uint8_t reg = 0;
 800d41c:	2300      	movs	r3, #0
 800d41e:	73fb      	strb	r3, [r7, #15]
    uint8_t pos = 0;
 800d420:	2300      	movs	r3, #0
 800d422:	73bb      	strb	r3, [r7, #14]

    /*
     *
     *
     */
    switch (g_row)
 800d424:	4b33      	ldr	r3, [pc, #204]	; (800d4f4 <lcd_write_line+0xe8>)
 800d426:	781b      	ldrb	r3, [r3, #0]
 800d428:	2b01      	cmp	r3, #1
 800d42a:	d002      	beq.n	800d432 <lcd_write_line+0x26>
 800d42c:	2b02      	cmp	r3, #2
 800d42e:	d01b      	beq.n	800d468 <lcd_write_line+0x5c>
            pos += g_col * 2;
            reg = (pos / 8) + octal_2[seg].reg; // @suppress("Avoid magic numbers")
            pos = pos % 8; // @suppress("Avoid magic numbers")
        break;
        default:
        break;
 800d430:	e035      	b.n	800d49e <lcd_write_line+0x92>
            pos = octal_1[seg].pos;
 800d432:	79fb      	ldrb	r3, [r7, #7]
 800d434:	4a30      	ldr	r2, [pc, #192]	; (800d4f8 <lcd_write_line+0xec>)
 800d436:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d43a:	73bb      	strb	r3, [r7, #14]
            pos += g_col * 2;
 800d43c:	4b2f      	ldr	r3, [pc, #188]	; (800d4fc <lcd_write_line+0xf0>)
 800d43e:	781b      	ldrb	r3, [r3, #0]
 800d440:	005b      	lsls	r3, r3, #1
 800d442:	b2da      	uxtb	r2, r3
 800d444:	7bbb      	ldrb	r3, [r7, #14]
 800d446:	4413      	add	r3, r2
 800d448:	73bb      	strb	r3, [r7, #14]
            reg = (pos / 8) + octal_1[seg].reg; // @suppress("Avoid magic numbers")
 800d44a:	7bbb      	ldrb	r3, [r7, #14]
 800d44c:	08db      	lsrs	r3, r3, #3
 800d44e:	b2da      	uxtb	r2, r3
 800d450:	79fb      	ldrb	r3, [r7, #7]
 800d452:	4929      	ldr	r1, [pc, #164]	; (800d4f8 <lcd_write_line+0xec>)
 800d454:	005b      	lsls	r3, r3, #1
 800d456:	440b      	add	r3, r1
 800d458:	785b      	ldrb	r3, [r3, #1]
 800d45a:	4413      	add	r3, r2
 800d45c:	73fb      	strb	r3, [r7, #15]
            pos = pos % 8; // @suppress("Avoid magic numbers")
 800d45e:	7bbb      	ldrb	r3, [r7, #14]
 800d460:	f003 0307 	and.w	r3, r3, #7
 800d464:	73bb      	strb	r3, [r7, #14]
        break;
 800d466:	e01a      	b.n	800d49e <lcd_write_line+0x92>
            pos = octal_2[seg].pos;
 800d468:	79fb      	ldrb	r3, [r7, #7]
 800d46a:	4a25      	ldr	r2, [pc, #148]	; (800d500 <lcd_write_line+0xf4>)
 800d46c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d470:	73bb      	strb	r3, [r7, #14]
            pos += g_col * 2;
 800d472:	4b22      	ldr	r3, [pc, #136]	; (800d4fc <lcd_write_line+0xf0>)
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	005b      	lsls	r3, r3, #1
 800d478:	b2da      	uxtb	r2, r3
 800d47a:	7bbb      	ldrb	r3, [r7, #14]
 800d47c:	4413      	add	r3, r2
 800d47e:	73bb      	strb	r3, [r7, #14]
            reg = (pos / 8) + octal_2[seg].reg; // @suppress("Avoid magic numbers")
 800d480:	7bbb      	ldrb	r3, [r7, #14]
 800d482:	08db      	lsrs	r3, r3, #3
 800d484:	b2da      	uxtb	r2, r3
 800d486:	79fb      	ldrb	r3, [r7, #7]
 800d488:	491d      	ldr	r1, [pc, #116]	; (800d500 <lcd_write_line+0xf4>)
 800d48a:	005b      	lsls	r3, r3, #1
 800d48c:	440b      	add	r3, r1
 800d48e:	785b      	ldrb	r3, [r3, #1]
 800d490:	4413      	add	r3, r2
 800d492:	73fb      	strb	r3, [r7, #15]
            pos = pos % 8; // @suppress("Avoid magic numbers")
 800d494:	7bbb      	ldrb	r3, [r7, #14]
 800d496:	f003 0307 	and.w	r3, r3, #7
 800d49a:	73bb      	strb	r3, [r7, #14]
        break;
 800d49c:	bf00      	nop
    }

    if (data)
 800d49e:	79bb      	ldrb	r3, [r7, #6]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d00f      	beq.n	800d4c4 <lcd_write_line+0xb8>
    {
        g_lcd_map[reg] |= 1 << pos;
 800d4a4:	7bfb      	ldrb	r3, [r7, #15]
 800d4a6:	4a17      	ldr	r2, [pc, #92]	; (800d504 <lcd_write_line+0xf8>)
 800d4a8:	5cd3      	ldrb	r3, [r2, r3]
 800d4aa:	b25a      	sxtb	r2, r3
 800d4ac:	7bbb      	ldrb	r3, [r7, #14]
 800d4ae:	2101      	movs	r1, #1
 800d4b0:	fa01 f303 	lsl.w	r3, r1, r3
 800d4b4:	b25b      	sxtb	r3, r3
 800d4b6:	4313      	orrs	r3, r2
 800d4b8:	b25a      	sxtb	r2, r3
 800d4ba:	7bfb      	ldrb	r3, [r7, #15]
 800d4bc:	b2d1      	uxtb	r1, r2
 800d4be:	4a11      	ldr	r2, [pc, #68]	; (800d504 <lcd_write_line+0xf8>)
 800d4c0:	54d1      	strb	r1, [r2, r3]
    }
    else
    {
        g_lcd_map[reg] &= ~(1 << pos);
    }
}
 800d4c2:	e010      	b.n	800d4e6 <lcd_write_line+0xda>
        g_lcd_map[reg] &= ~(1 << pos);
 800d4c4:	7bfb      	ldrb	r3, [r7, #15]
 800d4c6:	4a0f      	ldr	r2, [pc, #60]	; (800d504 <lcd_write_line+0xf8>)
 800d4c8:	5cd3      	ldrb	r3, [r2, r3]
 800d4ca:	b25a      	sxtb	r2, r3
 800d4cc:	7bbb      	ldrb	r3, [r7, #14]
 800d4ce:	2101      	movs	r1, #1
 800d4d0:	fa01 f303 	lsl.w	r3, r1, r3
 800d4d4:	b25b      	sxtb	r3, r3
 800d4d6:	43db      	mvns	r3, r3
 800d4d8:	b25b      	sxtb	r3, r3
 800d4da:	4013      	ands	r3, r2
 800d4dc:	b25a      	sxtb	r2, r3
 800d4de:	7bfb      	ldrb	r3, [r7, #15]
 800d4e0:	b2d1      	uxtb	r1, r2
 800d4e2:	4a08      	ldr	r2, [pc, #32]	; (800d504 <lcd_write_line+0xf8>)
 800d4e4:	54d1      	strb	r1, [r2, r3]
}
 800d4e6:	bf00      	nop
 800d4e8:	3714      	adds	r7, #20
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f0:	4770      	bx	lr
 800d4f2:	bf00      	nop
 800d4f4:	200019d1 	.word	0x200019d1
 800d4f8:	20000120 	.word	0x20000120
 800d4fc:	200019d0 	.word	0x200019d0
 800d500:	20000130 	.word	0x20000130
 800d504:	20001a38 	.word	0x20001a38

0800d508 <prepare_to_send>:
 * COM_0_ADDRESS
 * COM_1_ADDRESS
 *
 */
void static prepare_to_send(uint8_t add)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b084      	sub	sp, #16
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	4603      	mov	r3, r0
 800d510:	71fb      	strb	r3, [r7, #7]
    register_address_t reg;
    reg.bits.address = add;
 800d512:	79fb      	ldrb	r3, [r7, #7]
 800d514:	f003 031f 	and.w	r3, r3, #31
 800d518:	b2da      	uxtb	r2, r3
 800d51a:	7b3b      	ldrb	r3, [r7, #12]
 800d51c:	f362 0304 	bfi	r3, r2, #0, #5
 800d520:	733b      	strb	r3, [r7, #12]
    reg.bits.not_used = 0;
 800d522:	7b3b      	ldrb	r3, [r7, #12]
 800d524:	f36f 1346 	bfc	r3, #5, #2
 800d528:	733b      	strb	r3, [r7, #12]
    reg.bits.read_write = WRITE_DATA;
 800d52a:	7b3b      	ldrb	r3, [r7, #12]
 800d52c:	f36f 13c7 	bfc	r3, #7, #1
 800d530:	733b      	strb	r3, [r7, #12]
    HAL_SPI_Transmit(&h_spi1, &(reg.data), 1, DEFAULT_DELAY);
 800d532:	2314      	movs	r3, #20
 800d534:	f107 010c 	add.w	r1, r7, #12
 800d538:	2201      	movs	r2, #1
 800d53a:	4803      	ldr	r0, [pc, #12]	; (800d548 <prepare_to_send+0x40>)
 800d53c:	f7f7 fe57 	bl	80051ee <HAL_SPI_Transmit>
}
 800d540:	bf00      	nop
 800d542:	3710      	adds	r7, #16
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}
 800d548:	200019d4 	.word	0x200019d4

0800d54c <spi1_init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void spi1_init(void)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	af00      	add	r7, sp, #0
    h_spi1.Instance = SPI1;
 800d550:	4b1b      	ldr	r3, [pc, #108]	; (800d5c0 <spi1_init+0x74>)
 800d552:	4a1c      	ldr	r2, [pc, #112]	; (800d5c4 <spi1_init+0x78>)
 800d554:	601a      	str	r2, [r3, #0]
    h_spi1.Init.Mode = SPI_MODE_MASTER;
 800d556:	4b1a      	ldr	r3, [pc, #104]	; (800d5c0 <spi1_init+0x74>)
 800d558:	f44f 7282 	mov.w	r2, #260	; 0x104
 800d55c:	605a      	str	r2, [r3, #4]
    h_spi1.Init.Direction = SPI_DIRECTION_1LINE;
 800d55e:	4b18      	ldr	r3, [pc, #96]	; (800d5c0 <spi1_init+0x74>)
 800d560:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d564:	609a      	str	r2, [r3, #8]
    h_spi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800d566:	4b16      	ldr	r3, [pc, #88]	; (800d5c0 <spi1_init+0x74>)
 800d568:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800d56c:	60da      	str	r2, [r3, #12]
    h_spi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d56e:	4b14      	ldr	r3, [pc, #80]	; (800d5c0 <spi1_init+0x74>)
 800d570:	2200      	movs	r2, #0
 800d572:	611a      	str	r2, [r3, #16]
    h_spi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d574:	4b12      	ldr	r3, [pc, #72]	; (800d5c0 <spi1_init+0x74>)
 800d576:	2200      	movs	r2, #0
 800d578:	615a      	str	r2, [r3, #20]
    h_spi1.Init.NSS = SPI_NSS_SOFT;
 800d57a:	4b11      	ldr	r3, [pc, #68]	; (800d5c0 <spi1_init+0x74>)
 800d57c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d580:	619a      	str	r2, [r3, #24]
    h_spi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800d582:	4b0f      	ldr	r3, [pc, #60]	; (800d5c0 <spi1_init+0x74>)
 800d584:	2218      	movs	r2, #24
 800d586:	61da      	str	r2, [r3, #28]
    h_spi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d588:	4b0d      	ldr	r3, [pc, #52]	; (800d5c0 <spi1_init+0x74>)
 800d58a:	2200      	movs	r2, #0
 800d58c:	621a      	str	r2, [r3, #32]
    h_spi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800d58e:	4b0c      	ldr	r3, [pc, #48]	; (800d5c0 <spi1_init+0x74>)
 800d590:	2200      	movs	r2, #0
 800d592:	625a      	str	r2, [r3, #36]	; 0x24
    h_spi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d594:	4b0a      	ldr	r3, [pc, #40]	; (800d5c0 <spi1_init+0x74>)
 800d596:	2200      	movs	r2, #0
 800d598:	629a      	str	r2, [r3, #40]	; 0x28
    h_spi1.Init.CRCPolynomial = 7; // @suppress("Avoid magic numbers")
 800d59a:	4b09      	ldr	r3, [pc, #36]	; (800d5c0 <spi1_init+0x74>)
 800d59c:	2207      	movs	r2, #7
 800d59e:	62da      	str	r2, [r3, #44]	; 0x2c
    h_spi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800d5a0:	4b07      	ldr	r3, [pc, #28]	; (800d5c0 <spi1_init+0x74>)
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	631a      	str	r2, [r3, #48]	; 0x30
    h_spi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800d5a6:	4b06      	ldr	r3, [pc, #24]	; (800d5c0 <spi1_init+0x74>)
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_SPI_Init(&h_spi1) != HAL_OK)
 800d5ac:	4804      	ldr	r0, [pc, #16]	; (800d5c0 <spi1_init+0x74>)
 800d5ae:	f7f7 fd7b 	bl	80050a8 <HAL_SPI_Init>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d001      	beq.n	800d5bc <spi1_init+0x70>
    {
        Error_Handler();
 800d5b8:	f7f3 fd04 	bl	8000fc4 <Error_Handler>
    }
}
 800d5bc:	bf00      	nop
 800d5be:	bd80      	pop	{r7, pc}
 800d5c0:	200019d4 	.word	0x200019d4
 800d5c4:	40013000 	.word	0x40013000

0800d5c8 <pcf8553_blink>:
 * PCF_BLINK_ONE_SECOND,
 * PCF_BLINK_HALF_SECOND
 * @retval None
 */
void pcf8553_blink(blink_t mode)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b082      	sub	sp, #8
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_RESET);
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	2110      	movs	r1, #16
 800d5d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d5da:	f7f5 fd75 	bl	80030c8 <HAL_GPIO_WritePin>
    g_display_ctrl_2.reg_bits.blink = mode;
 800d5de:	79fb      	ldrb	r3, [r7, #7]
 800d5e0:	f003 0303 	and.w	r3, r3, #3
 800d5e4:	b2d9      	uxtb	r1, r3
 800d5e6:	4a0c      	ldr	r2, [pc, #48]	; (800d618 <pcf8553_blink+0x50>)
 800d5e8:	7813      	ldrb	r3, [r2, #0]
 800d5ea:	f361 0342 	bfi	r3, r1, #1, #2
 800d5ee:	7013      	strb	r3, [r2, #0]
    prepare_to_send(DISPLAY_CTRL_2_ADDRESS);
 800d5f0:	2003      	movs	r0, #3
 800d5f2:	f7ff ff89 	bl	800d508 <prepare_to_send>
    HAL_SPI_Transmit(&h_spi1, &(g_display_ctrl_2.reg_data), 1, DEFAULT_DELAY);
 800d5f6:	2314      	movs	r3, #20
 800d5f8:	2201      	movs	r2, #1
 800d5fa:	4907      	ldr	r1, [pc, #28]	; (800d618 <pcf8553_blink+0x50>)
 800d5fc:	4807      	ldr	r0, [pc, #28]	; (800d61c <pcf8553_blink+0x54>)
 800d5fe:	f7f7 fdf6 	bl	80051ee <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_SET);
 800d602:	2201      	movs	r2, #1
 800d604:	2110      	movs	r1, #16
 800d606:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d60a:	f7f5 fd5d 	bl	80030c8 <HAL_GPIO_WritePin>
}
 800d60e:	bf00      	nop
 800d610:	3708      	adds	r7, #8
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}
 800d616:	bf00      	nop
 800d618:	20001a50 	.word	0x20001a50
 800d61c:	200019d4 	.word	0x200019d4

0800d620 <pcf8553_clear_buff>:

void pcf8553_clear_buff()
{
 800d620:	b480      	push	{r7}
 800d622:	b083      	sub	sp, #12
 800d624:	af00      	add	r7, sp, #0
    /*
     * Limpia el buffer final, que es mandado directamente al controlador de la
     * pantalla LCD.
     */
    for (int cont_buff_t = 0; cont_buff_t < PCF8553_DATA_SIZE; cont_buff_t++)
 800d626:	2300      	movs	r3, #0
 800d628:	607b      	str	r3, [r7, #4]
 800d62a:	e007      	b.n	800d63c <pcf8553_clear_buff+0x1c>
    {
        g_lcd_map[cont_buff_t] = 0;
 800d62c:	4a08      	ldr	r2, [pc, #32]	; (800d650 <pcf8553_clear_buff+0x30>)
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	4413      	add	r3, r2
 800d632:	2200      	movs	r2, #0
 800d634:	701a      	strb	r2, [r3, #0]
    for (int cont_buff_t = 0; cont_buff_t < PCF8553_DATA_SIZE; cont_buff_t++)
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	3301      	adds	r3, #1
 800d63a:	607b      	str	r3, [r7, #4]
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2b13      	cmp	r3, #19
 800d640:	ddf4      	ble.n	800d62c <pcf8553_clear_buff+0xc>
    }
}
 800d642:	bf00      	nop
 800d644:	bf00      	nop
 800d646:	370c      	adds	r7, #12
 800d648:	46bd      	mov	sp, r7
 800d64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64e:	4770      	bx	lr
 800d650:	20001a38 	.word	0x20001a38

0800d654 <pcf8553_dump>:
 *
 * @param None
 * @retval None
 */
void pcf8553_dump()
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b082      	sub	sp, #8
 800d658:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_RESET);
 800d65a:	2200      	movs	r2, #0
 800d65c:	2110      	movs	r1, #16
 800d65e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d662:	f7f5 fd31 	bl	80030c8 <HAL_GPIO_WritePin>
    prepare_to_send(DATA_ADDRESS);
 800d666:	2004      	movs	r0, #4
 800d668:	f7ff ff4e 	bl	800d508 <prepare_to_send>
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 800d66c:	2300      	movs	r3, #0
 800d66e:	607b      	str	r3, [r7, #4]
 800d670:	e00a      	b.n	800d688 <pcf8553_dump+0x34>
    {
        HAL_SPI_Transmit(&h_spi1, g_lcd_map + i, 1, DEFAULT_DELAY);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	4a0b      	ldr	r2, [pc, #44]	; (800d6a4 <pcf8553_dump+0x50>)
 800d676:	1899      	adds	r1, r3, r2
 800d678:	2314      	movs	r3, #20
 800d67a:	2201      	movs	r2, #1
 800d67c:	480a      	ldr	r0, [pc, #40]	; (800d6a8 <pcf8553_dump+0x54>)
 800d67e:	f7f7 fdb6 	bl	80051ee <HAL_SPI_Transmit>
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	3301      	adds	r3, #1
 800d686:	607b      	str	r3, [r7, #4]
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2b13      	cmp	r3, #19
 800d68c:	ddf1      	ble.n	800d672 <pcf8553_dump+0x1e>
    }
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_SET);
 800d68e:	2201      	movs	r2, #1
 800d690:	2110      	movs	r1, #16
 800d692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d696:	f7f5 fd17 	bl	80030c8 <HAL_GPIO_WritePin>
}
 800d69a:	bf00      	nop
 800d69c:	3708      	adds	r7, #8
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}
 800d6a2:	bf00      	nop
 800d6a4:	20001a38 	.word	0x20001a38
 800d6a8:	200019d4 	.word	0x200019d4

0800d6ac <pcf8553_init>:
 * @brief Llamar a esta función antes de empezar a trabajar con el driver.
 * @param None
 * @retval None
 */
void pcf8553_init()
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	af00      	add	r7, sp, #0
    spi1_init();
 800d6b0:	f7ff ff4c 	bl	800d54c <spi1_init>
    pcf8553_reset();
 800d6b4:	f000 f830 	bl	800d718 <pcf8553_reset>
    HAL_Delay(DEFAULT_DELAY);
 800d6b8:	2314      	movs	r3, #20
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7f3 ff82 	bl	80015c4 <HAL_Delay>
     * @brief El pcf8553 tiene un pin de chip select, la siguiente instruccion
     * habilita el chip, el parametro GPIO_PIN_RESET es muy parecido a un
     * numero magico, se debe buscar una mejor solucion.
     *
     */
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_RESET);
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	2110      	movs	r1, #16
 800d6c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d6c8:	f7f5 fcfe 	bl	80030c8 <HAL_GPIO_WritePin>
     *  Display_crtl_2 = 1 to enable display.
     *  Luego de un tiempo olvidé porque hice este comentario, no parece
     *  tener sentido.
     *
     */
    prepare_to_send(0x1);
 800d6cc:	2001      	movs	r0, #1
 800d6ce:	f7ff ff1b 	bl	800d508 <prepare_to_send>
    HAL_SPI_Transmit(&h_spi1, &(g_device_ctrl.reg_data), 1, DEFAULT_DELAY);
 800d6d2:	2314      	movs	r3, #20
 800d6d4:	2201      	movs	r2, #1
 800d6d6:	490c      	ldr	r1, [pc, #48]	; (800d708 <pcf8553_init+0x5c>)
 800d6d8:	480c      	ldr	r0, [pc, #48]	; (800d70c <pcf8553_init+0x60>)
 800d6da:	f7f7 fd88 	bl	80051ee <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&h_spi1, &(g_display_ctrl_1.reg_data), 1, DEFAULT_DELAY);
 800d6de:	2314      	movs	r3, #20
 800d6e0:	2201      	movs	r2, #1
 800d6e2:	490b      	ldr	r1, [pc, #44]	; (800d710 <pcf8553_init+0x64>)
 800d6e4:	4809      	ldr	r0, [pc, #36]	; (800d70c <pcf8553_init+0x60>)
 800d6e6:	f7f7 fd82 	bl	80051ee <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&h_spi1, &(g_display_ctrl_2.reg_data), 1, DEFAULT_DELAY);
 800d6ea:	2314      	movs	r3, #20
 800d6ec:	2201      	movs	r2, #1
 800d6ee:	4909      	ldr	r1, [pc, #36]	; (800d714 <pcf8553_init+0x68>)
 800d6f0:	4806      	ldr	r0, [pc, #24]	; (800d70c <pcf8553_init+0x60>)
 800d6f2:	f7f7 fd7c 	bl	80051ee <HAL_SPI_Transmit>

    /*
     *  Chip disable.
     *
     */
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_SET);
 800d6f6:	2201      	movs	r2, #1
 800d6f8:	2110      	movs	r1, #16
 800d6fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d6fe:	f7f5 fce3 	bl	80030c8 <HAL_GPIO_WritePin>
}
 800d702:	bf00      	nop
 800d704:	bd80      	pop	{r7, pc}
 800d706:	bf00      	nop
 800d708:	20001a4c 	.word	0x20001a4c
 800d70c:	200019d4 	.word	0x200019d4
 800d710:	20000140 	.word	0x20000140
 800d714:	20001a50 	.word	0x20001a50

0800d718 <pcf8553_reset>:
 * at least 10 μs.
 * @param  None
 * @retval None
 */
void pcf8553_reset()
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PCF8553_RESET_PORT, PCF8553_RESET_PIN, GPIO_PIN_RESET);
 800d71c:	2200      	movs	r2, #0
 800d71e:	2120      	movs	r1, #32
 800d720:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d724:	f7f5 fcd0 	bl	80030c8 <HAL_GPIO_WritePin>
    HAL_Delay(DEFAULT_DELAY);
 800d728:	2314      	movs	r3, #20
 800d72a:	4618      	mov	r0, r3
 800d72c:	f7f3 ff4a 	bl	80015c4 <HAL_Delay>
    HAL_GPIO_WritePin(PCF8553_RESET_PORT, PCF8553_RESET_Pin, GPIO_PIN_SET);
 800d730:	2201      	movs	r2, #1
 800d732:	2140      	movs	r1, #64	; 0x40
 800d734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d738:	f7f5 fcc6 	bl	80030c8 <HAL_GPIO_WritePin>
}
 800d73c:	bf00      	nop
 800d73e:	bd80      	pop	{r7, pc}

0800d740 <pcf8553_write_all>:
 * futuro se hará con una enumeración que lo deje claro, ya sea en esta función
 * o en una de mas alto nivel.
 * @retval None
 */
void pcf8553_write_all(uint8_t data)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b084      	sub	sp, #16
 800d744:	af00      	add	r7, sp, #0
 800d746:	4603      	mov	r3, r0
 800d748:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 800d74a:	2300      	movs	r3, #0
 800d74c:	60fb      	str	r3, [r7, #12]
 800d74e:	e007      	b.n	800d760 <pcf8553_write_all+0x20>
    {
        g_lcd_map[i] = data;
 800d750:	4a08      	ldr	r2, [pc, #32]	; (800d774 <pcf8553_write_all+0x34>)
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	4413      	add	r3, r2
 800d756:	79fa      	ldrb	r2, [r7, #7]
 800d758:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	3301      	adds	r3, #1
 800d75e:	60fb      	str	r3, [r7, #12]
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	2b13      	cmp	r3, #19
 800d764:	ddf4      	ble.n	800d750 <pcf8553_write_all+0x10>
    }
    pcf8553_dump();
 800d766:	f7ff ff75 	bl	800d654 <pcf8553_dump>
}
 800d76a:	bf00      	nop
 800d76c:	3710      	adds	r7, #16
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}
 800d772:	bf00      	nop
 800d774:	20001a38 	.word	0x20001a38

0800d778 <fm_menu_config_date_hour>:
 * @brief Función que imprime el menú de configuración de fecha y hora.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_date_hour(fm_event_t event_id)
{
 800d778:	b5b0      	push	{r4, r5, r7, lr}
 800d77a:	b0b4      	sub	sp, #208	; 0xd0
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	4603      	mov	r3, r0
 800d780:	71fb      	strb	r3, [r7, #7]
    static sel_second second_enum;
    RTC_TimeTypeDef time_final;
    RTC_DateTypeDef date_final;
    extern RTC_HandleTypeDef hrtc;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_date_hour;
 800d782:	4b9c      	ldr	r3, [pc, #624]	; (800d9f4 <fm_menu_config_date_hour+0x27c>)
 800d784:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    fm_event_t event_now;

    if (new_entry == 1)
 800d788:	4b9b      	ldr	r3, [pc, #620]	; (800d9f8 <fm_menu_config_date_hour+0x280>)
 800d78a:	781b      	ldrb	r3, [r3, #0]
 800d78c:	2b01      	cmp	r3, #1
 800d78e:	d107      	bne.n	800d7a0 <fm_menu_config_date_hour+0x28>
    {
        field = DAY;
 800d790:	4b9a      	ldr	r3, [pc, #616]	; (800d9fc <fm_menu_config_date_hour+0x284>)
 800d792:	2200      	movs	r2, #0
 800d794:	701a      	strb	r2, [r3, #0]
        fm_lcd_clear();
 800d796:	f7fd faf6 	bl	800ad86 <fm_lcd_clear>
        new_entry = 0;
 800d79a:	4b97      	ldr	r3, [pc, #604]	; (800d9f8 <fm_menu_config_date_hour+0x280>)
 800d79c:	2200      	movs	r2, #0
 800d79e:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_date_hour(CONFIGURATION, event_id, field);
 800d7a0:	4b96      	ldr	r3, [pc, #600]	; (800d9fc <fm_menu_config_date_hour+0x284>)
 800d7a2:	781a      	ldrb	r2, [r3, #0]
 800d7a4:	79fb      	ldrb	r3, [r7, #7]
 800d7a6:	4619      	mov	r1, r3
 800d7a8:	2001      	movs	r0, #1
 800d7aa:	f7fd faf3 	bl	800ad94 <fm_lcd_date_hour>
    fm_lcd_refresh();
 800d7ae:	f7fd fe08 	bl	800b3c2 <fm_lcd_refresh>

    day_enum = fm_factory_get_date_time().day;
 800d7b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f7fc fda4 	bl	800a304 <fm_factory_get_date_time>
 800d7bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7be:	b2da      	uxtb	r2, r3
 800d7c0:	4b8f      	ldr	r3, [pc, #572]	; (800da00 <fm_menu_config_date_hour+0x288>)
 800d7c2:	701a      	strb	r2, [r3, #0]
    month_enum = fm_factory_get_date_time().month;
 800d7c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f7fc fd9b 	bl	800a304 <fm_factory_get_date_time>
 800d7ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d7d0:	b2da      	uxtb	r2, r3
 800d7d2:	4b8c      	ldr	r3, [pc, #560]	; (800da04 <fm_menu_config_date_hour+0x28c>)
 800d7d4:	701a      	strb	r2, [r3, #0]
    year_enum = fm_factory_get_date_time().year;
 800d7d6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f7fc fd92 	bl	800a304 <fm_factory_get_date_time>
 800d7e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d7e2:	b2da      	uxtb	r2, r3
 800d7e4:	4b88      	ldr	r3, [pc, #544]	; (800da08 <fm_menu_config_date_hour+0x290>)
 800d7e6:	701a      	strb	r2, [r3, #0]
    hour_enum = fm_factory_get_date_time().hour;
 800d7e8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	f7fc fd89 	bl	800a304 <fm_factory_get_date_time>
 800d7f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d7f6:	b2da      	uxtb	r2, r3
 800d7f8:	4b84      	ldr	r3, [pc, #528]	; (800da0c <fm_menu_config_date_hour+0x294>)
 800d7fa:	701a      	strb	r2, [r3, #0]
    minute_enum = fm_factory_get_date_time().minute;
 800d7fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800d800:	4618      	mov	r0, r3
 800d802:	f7fc fd7f 	bl	800a304 <fm_factory_get_date_time>
 800d806:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d80a:	b2da      	uxtb	r2, r3
 800d80c:	4b80      	ldr	r3, [pc, #512]	; (800da10 <fm_menu_config_date_hour+0x298>)
 800d80e:	701a      	strb	r2, [r3, #0]
    second_enum = fm_factory_get_date_time().second;
 800d810:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800d814:	4618      	mov	r0, r3
 800d816:	f7fc fd75 	bl	800a304 <fm_factory_get_date_time>
 800d81a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d81e:	b2da      	uxtb	r2, r3
 800d820:	4b7c      	ldr	r3, [pc, #496]	; (800da14 <fm_menu_config_date_hour+0x29c>)
 800d822:	701a      	strb	r2, [r3, #0]

    switch (event_id)
 800d824:	79fb      	ldrb	r3, [r7, #7]
 800d826:	3b02      	subs	r3, #2
 800d828:	2b03      	cmp	r3, #3
 800d82a:	f200 83bc 	bhi.w	800dfa6 <fm_menu_config_date_hour+0x82e>
 800d82e:	a201      	add	r2, pc, #4	; (adr r2, 800d834 <fm_menu_config_date_hour+0xbc>)
 800d830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d834:	0800d845 	.word	0x0800d845
 800d838:	0800db99 	.word	0x0800db99
 800d83c:	0800df09 	.word	0x0800df09
 800d840:	0800df85 	.word	0x0800df85
    {
        case EVENT_KEY_UP:
            if(correct_password)
 800d844:	4b74      	ldr	r3, [pc, #464]	; (800da18 <fm_menu_config_date_hour+0x2a0>)
 800d846:	781b      	ldrb	r3, [r3, #0]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	f000 83ae 	beq.w	800dfaa <fm_menu_config_date_hour+0x832>
                 * en cuenta la cantidad de días de cada mes, si es un año
                 * bisiesto o no, y que al pasarse del valor máximo o mínimo de
                 * cada parámetro, se vuelva a iniciar desde el valor mínimo o
                 * máximo respectivamente.
                 */
                if(field == DAY)
 800d84e:	4b6b      	ldr	r3, [pc, #428]	; (800d9fc <fm_menu_config_date_hour+0x284>)
 800d850:	781b      	ldrb	r3, [r3, #0]
 800d852:	2b00      	cmp	r3, #0
 800d854:	f040 809b 	bne.w	800d98e <fm_menu_config_date_hour+0x216>
                {
                    if(month_enum == JANUARY ||
 800d858:	4b6a      	ldr	r3, [pc, #424]	; (800da04 <fm_menu_config_date_hour+0x28c>)
 800d85a:	781b      	ldrb	r3, [r3, #0]
 800d85c:	2b01      	cmp	r3, #1
 800d85e:	d017      	beq.n	800d890 <fm_menu_config_date_hour+0x118>
                    month_enum == MARCH      ||
 800d860:	4b68      	ldr	r3, [pc, #416]	; (800da04 <fm_menu_config_date_hour+0x28c>)
 800d862:	781b      	ldrb	r3, [r3, #0]
                    if(month_enum == JANUARY ||
 800d864:	2b03      	cmp	r3, #3
 800d866:	d013      	beq.n	800d890 <fm_menu_config_date_hour+0x118>
                    month_enum == MAY        ||
 800d868:	4b66      	ldr	r3, [pc, #408]	; (800da04 <fm_menu_config_date_hour+0x28c>)
 800d86a:	781b      	ldrb	r3, [r3, #0]
                    month_enum == MARCH      ||
 800d86c:	2b05      	cmp	r3, #5
 800d86e:	d00f      	beq.n	800d890 <fm_menu_config_date_hour+0x118>
                    month_enum == JULY       ||
 800d870:	4b64      	ldr	r3, [pc, #400]	; (800da04 <fm_menu_config_date_hour+0x28c>)
 800d872:	781b      	ldrb	r3, [r3, #0]
                    month_enum == MAY        ||
 800d874:	2b07      	cmp	r3, #7
 800d876:	d00b      	beq.n	800d890 <fm_menu_config_date_hour+0x118>
                    month_enum == AUGUST     ||
 800d878:	4b62      	ldr	r3, [pc, #392]	; (800da04 <fm_menu_config_date_hour+0x28c>)
 800d87a:	781b      	ldrb	r3, [r3, #0]
                    month_enum == JULY       ||
 800d87c:	2b08      	cmp	r3, #8
 800d87e:	d007      	beq.n	800d890 <fm_menu_config_date_hour+0x118>
                    month_enum == OCTOBER    ||
 800d880:	4b60      	ldr	r3, [pc, #384]	; (800da04 <fm_menu_config_date_hour+0x28c>)
 800d882:	781b      	ldrb	r3, [r3, #0]
                    month_enum == AUGUST     ||
 800d884:	2b0a      	cmp	r3, #10
 800d886:	d003      	beq.n	800d890 <fm_menu_config_date_hour+0x118>
                    month_enum == DECEMBER)
 800d888:	4b5e      	ldr	r3, [pc, #376]	; (800da04 <fm_menu_config_date_hour+0x28c>)
 800d88a:	781b      	ldrb	r3, [r3, #0]
                    month_enum == OCTOBER    ||
 800d88c:	2b0c      	cmp	r3, #12
 800d88e:	d119      	bne.n	800d8c4 <fm_menu_config_date_hour+0x14c>
                    {
                        if(day_enum < DAY_31)
 800d890:	4b5b      	ldr	r3, [pc, #364]	; (800da00 <fm_menu_config_date_hour+0x288>)
 800d892:	781b      	ldrb	r3, [r3, #0]
 800d894:	2b1e      	cmp	r3, #30
 800d896:	d80b      	bhi.n	800d8b0 <fm_menu_config_date_hour+0x138>
                        {
                            fm_factory_modify_date(day_enum +
 800d898:	4b59      	ldr	r3, [pc, #356]	; (800da00 <fm_menu_config_date_hour+0x288>)
 800d89a:	781b      	ldrb	r3, [r3, #0]
 800d89c:	3301      	adds	r3, #1
 800d89e:	4a59      	ldr	r2, [pc, #356]	; (800da04 <fm_menu_config_date_hour+0x28c>)
 800d8a0:	7812      	ldrb	r2, [r2, #0]
 800d8a2:	4611      	mov	r1, r2
 800d8a4:	4a58      	ldr	r2, [pc, #352]	; (800da08 <fm_menu_config_date_hour+0x290>)
 800d8a6:	7812      	ldrb	r2, [r2, #0]
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f7fc fda9 	bl	800a400 <fm_factory_modify_date>
                        if(day_enum < DAY_31)
 800d8ae:	e168      	b.n	800db82 <fm_menu_config_date_hour+0x40a>
                            1, month_enum,
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_1,
 800d8b0:	4b54      	ldr	r3, [pc, #336]	; (800da04 <fm_menu_config_date_hour+0x28c>)
 800d8b2:	781b      	ldrb	r3, [r3, #0]
 800d8b4:	4619      	mov	r1, r3
 800d8b6:	4b54      	ldr	r3, [pc, #336]	; (800da08 <fm_menu_config_date_hour+0x290>)
 800d8b8:	781b      	ldrb	r3, [r3, #0]
 800d8ba:	461a      	mov	r2, r3
 800d8bc:	2001      	movs	r0, #1
 800d8be:	f7fc fd9f 	bl	800a400 <fm_factory_modify_date>
                        if(day_enum < DAY_31)
 800d8c2:	e15e      	b.n	800db82 <fm_menu_config_date_hour+0x40a>
                            month_enum,
                            year_enum);
                        }
                    }
                    else if(month_enum == APRIL ||
 800d8c4:	4b4f      	ldr	r3, [pc, #316]	; (800da04 <fm_menu_config_date_hour+0x28c>)
 800d8c6:	781b      	ldrb	r3, [r3, #0]
 800d8c8:	2b04      	cmp	r3, #4
 800d8ca:	d00b      	beq.n	800d8e4 <fm_menu_config_date_hour+0x16c>
                    month_enum == JUNE          ||
 800d8cc:	4b4d      	ldr	r3, [pc, #308]	; (800da04 <fm_menu_config_date_hour+0x28c>)
 800d8ce:	781b      	ldrb	r3, [r3, #0]
                    else if(month_enum == APRIL ||
 800d8d0:	2b06      	cmp	r3, #6
 800d8d2:	d007      	beq.n	800d8e4 <fm_menu_config_date_hour+0x16c>
                    month_enum == SEPTEMBER     ||
 800d8d4:	4b4b      	ldr	r3, [pc, #300]	; (800da04 <fm_menu_config_date_hour+0x28c>)
 800d8d6:	781b      	ldrb	r3, [r3, #0]
                    month_enum == JUNE          ||
 800d8d8:	2b09      	cmp	r3, #9
 800d8da:	d003      	beq.n	800d8e4 <fm_menu_config_date_hour+0x16c>
                    month_enum == NOVEMBER)
 800d8dc:	4b49      	ldr	r3, [pc, #292]	; (800da04 <fm_menu_config_date_hour+0x28c>)
 800d8de:	781b      	ldrb	r3, [r3, #0]
                    month_enum == SEPTEMBER     ||
 800d8e0:	2b0b      	cmp	r3, #11
 800d8e2:	d119      	bne.n	800d918 <fm_menu_config_date_hour+0x1a0>
                    {
                        if(day_enum < DAY_30)
 800d8e4:	4b46      	ldr	r3, [pc, #280]	; (800da00 <fm_menu_config_date_hour+0x288>)
 800d8e6:	781b      	ldrb	r3, [r3, #0]
 800d8e8:	2b1d      	cmp	r3, #29
 800d8ea:	d80b      	bhi.n	800d904 <fm_menu_config_date_hour+0x18c>
                        {
                            fm_factory_modify_date(day_enum + 1, month_enum,
 800d8ec:	4b44      	ldr	r3, [pc, #272]	; (800da00 <fm_menu_config_date_hour+0x288>)
 800d8ee:	781b      	ldrb	r3, [r3, #0]
 800d8f0:	3301      	adds	r3, #1
 800d8f2:	4a44      	ldr	r2, [pc, #272]	; (800da04 <fm_menu_config_date_hour+0x28c>)
 800d8f4:	7812      	ldrb	r2, [r2, #0]
 800d8f6:	4611      	mov	r1, r2
 800d8f8:	4a43      	ldr	r2, [pc, #268]	; (800da08 <fm_menu_config_date_hour+0x290>)
 800d8fa:	7812      	ldrb	r2, [r2, #0]
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f7fc fd7f 	bl	800a400 <fm_factory_modify_date>
                        if(day_enum < DAY_30)
 800d902:	e13e      	b.n	800db82 <fm_menu_config_date_hour+0x40a>
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_1, month_enum,
 800d904:	4b3f      	ldr	r3, [pc, #252]	; (800da04 <fm_menu_config_date_hour+0x28c>)
 800d906:	781b      	ldrb	r3, [r3, #0]
 800d908:	4619      	mov	r1, r3
 800d90a:	4b3f      	ldr	r3, [pc, #252]	; (800da08 <fm_menu_config_date_hour+0x290>)
 800d90c:	781b      	ldrb	r3, [r3, #0]
 800d90e:	461a      	mov	r2, r3
 800d910:	2001      	movs	r0, #1
 800d912:	f7fc fd75 	bl	800a400 <fm_factory_modify_date>
                        if(day_enum < DAY_30)
 800d916:	e134      	b.n	800db82 <fm_menu_config_date_hour+0x40a>
                            year_enum);
                        }
                    }
                    else
                    {
                        if(year_enum % YEAR_4 == 0)
 800d918:	4b3b      	ldr	r3, [pc, #236]	; (800da08 <fm_menu_config_date_hour+0x290>)
 800d91a:	781b      	ldrb	r3, [r3, #0]
 800d91c:	f003 0303 	and.w	r3, r3, #3
 800d920:	b2db      	uxtb	r3, r3
 800d922:	2b00      	cmp	r3, #0
 800d924:	d119      	bne.n	800d95a <fm_menu_config_date_hour+0x1e2>
                        {
                            if(day_enum < DAY_29)
 800d926:	4b36      	ldr	r3, [pc, #216]	; (800da00 <fm_menu_config_date_hour+0x288>)
 800d928:	781b      	ldrb	r3, [r3, #0]
 800d92a:	2b1c      	cmp	r3, #28
 800d92c:	d80b      	bhi.n	800d946 <fm_menu_config_date_hour+0x1ce>
                            {
                                fm_factory_modify_date(day_enum + 1, month_enum,
 800d92e:	4b34      	ldr	r3, [pc, #208]	; (800da00 <fm_menu_config_date_hour+0x288>)
 800d930:	781b      	ldrb	r3, [r3, #0]
 800d932:	3301      	adds	r3, #1
 800d934:	4a33      	ldr	r2, [pc, #204]	; (800da04 <fm_menu_config_date_hour+0x28c>)
 800d936:	7812      	ldrb	r2, [r2, #0]
 800d938:	4611      	mov	r1, r2
 800d93a:	4a33      	ldr	r2, [pc, #204]	; (800da08 <fm_menu_config_date_hour+0x290>)
 800d93c:	7812      	ldrb	r2, [r2, #0]
 800d93e:	4618      	mov	r0, r3
 800d940:	f7fc fd5e 	bl	800a400 <fm_factory_modify_date>
 800d944:	e11d      	b.n	800db82 <fm_menu_config_date_hour+0x40a>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_1, month_enum,
 800d946:	4b2f      	ldr	r3, [pc, #188]	; (800da04 <fm_menu_config_date_hour+0x28c>)
 800d948:	781b      	ldrb	r3, [r3, #0]
 800d94a:	4619      	mov	r1, r3
 800d94c:	4b2e      	ldr	r3, [pc, #184]	; (800da08 <fm_menu_config_date_hour+0x290>)
 800d94e:	781b      	ldrb	r3, [r3, #0]
 800d950:	461a      	mov	r2, r3
 800d952:	2001      	movs	r0, #1
 800d954:	f7fc fd54 	bl	800a400 <fm_factory_modify_date>
 800d958:	e113      	b.n	800db82 <fm_menu_config_date_hour+0x40a>
                                year_enum);
                            }
                        }
                        else
                        {
                            if(day_enum < DAY_28)
 800d95a:	4b29      	ldr	r3, [pc, #164]	; (800da00 <fm_menu_config_date_hour+0x288>)
 800d95c:	781b      	ldrb	r3, [r3, #0]
 800d95e:	2b1b      	cmp	r3, #27
 800d960:	d80b      	bhi.n	800d97a <fm_menu_config_date_hour+0x202>
                            {
                                fm_factory_modify_date(day_enum + 1, month_enum,
 800d962:	4b27      	ldr	r3, [pc, #156]	; (800da00 <fm_menu_config_date_hour+0x288>)
 800d964:	781b      	ldrb	r3, [r3, #0]
 800d966:	3301      	adds	r3, #1
 800d968:	4a26      	ldr	r2, [pc, #152]	; (800da04 <fm_menu_config_date_hour+0x28c>)
 800d96a:	7812      	ldrb	r2, [r2, #0]
 800d96c:	4611      	mov	r1, r2
 800d96e:	4a26      	ldr	r2, [pc, #152]	; (800da08 <fm_menu_config_date_hour+0x290>)
 800d970:	7812      	ldrb	r2, [r2, #0]
 800d972:	4618      	mov	r0, r3
 800d974:	f7fc fd44 	bl	800a400 <fm_factory_modify_date>
 800d978:	e103      	b.n	800db82 <fm_menu_config_date_hour+0x40a>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_1, month_enum,
 800d97a:	4b22      	ldr	r3, [pc, #136]	; (800da04 <fm_menu_config_date_hour+0x28c>)
 800d97c:	781b      	ldrb	r3, [r3, #0]
 800d97e:	4619      	mov	r1, r3
 800d980:	4b21      	ldr	r3, [pc, #132]	; (800da08 <fm_menu_config_date_hour+0x290>)
 800d982:	781b      	ldrb	r3, [r3, #0]
 800d984:	461a      	mov	r2, r3
 800d986:	2001      	movs	r0, #1
 800d988:	f7fc fd3a 	bl	800a400 <fm_factory_modify_date>
 800d98c:	e0f9      	b.n	800db82 <fm_menu_config_date_hour+0x40a>
                                year_enum);
                            }
                        }
                    }
                }
                else if(field == MONTH)
 800d98e:	4b1b      	ldr	r3, [pc, #108]	; (800d9fc <fm_menu_config_date_hour+0x284>)
 800d990:	781b      	ldrb	r3, [r3, #0]
 800d992:	2b01      	cmp	r3, #1
 800d994:	d16a      	bne.n	800da6c <fm_menu_config_date_hour+0x2f4>
                {
                    if(month_enum < DECEMBER)
 800d996:	4b1b      	ldr	r3, [pc, #108]	; (800da04 <fm_menu_config_date_hour+0x28c>)
 800d998:	781b      	ldrb	r3, [r3, #0]
 800d99a:	2b0b      	cmp	r3, #11
 800d99c:	d85c      	bhi.n	800da58 <fm_menu_config_date_hour+0x2e0>
                    {
                        if((month_enum + 1 == APRIL ||
 800d99e:	4b19      	ldr	r3, [pc, #100]	; (800da04 <fm_menu_config_date_hour+0x28c>)
 800d9a0:	781b      	ldrb	r3, [r3, #0]
 800d9a2:	2b03      	cmp	r3, #3
 800d9a4:	d00b      	beq.n	800d9be <fm_menu_config_date_hour+0x246>
                        month_enum + 1 == JUNE      ||
 800d9a6:	4b17      	ldr	r3, [pc, #92]	; (800da04 <fm_menu_config_date_hour+0x28c>)
 800d9a8:	781b      	ldrb	r3, [r3, #0]
                        if((month_enum + 1 == APRIL ||
 800d9aa:	2b05      	cmp	r3, #5
 800d9ac:	d007      	beq.n	800d9be <fm_menu_config_date_hour+0x246>
                        month_enum + 1 == SEPTEMBER ||
 800d9ae:	4b15      	ldr	r3, [pc, #84]	; (800da04 <fm_menu_config_date_hour+0x28c>)
 800d9b0:	781b      	ldrb	r3, [r3, #0]
                        month_enum + 1 == JUNE      ||
 800d9b2:	2b08      	cmp	r3, #8
 800d9b4:	d003      	beq.n	800d9be <fm_menu_config_date_hour+0x246>
                        month_enum + 1 == NOVEMBER)
 800d9b6:	4b13      	ldr	r3, [pc, #76]	; (800da04 <fm_menu_config_date_hour+0x28c>)
 800d9b8:	781b      	ldrb	r3, [r3, #0]
                        month_enum + 1 == SEPTEMBER ||
 800d9ba:	2b0a      	cmp	r3, #10
 800d9bc:	d107      	bne.n	800d9ce <fm_menu_config_date_hour+0x256>
                        && (day_enum > DAY_30))
 800d9be:	4b10      	ldr	r3, [pc, #64]	; (800da00 <fm_menu_config_date_hour+0x288>)
 800d9c0:	781b      	ldrb	r3, [r3, #0]
 800d9c2:	2b1e      	cmp	r3, #30
 800d9c4:	d903      	bls.n	800d9ce <fm_menu_config_date_hour+0x256>
                        {
                            day_enum = DAY_30;
 800d9c6:	4b0e      	ldr	r3, [pc, #56]	; (800da00 <fm_menu_config_date_hour+0x288>)
 800d9c8:	221e      	movs	r2, #30
 800d9ca:	701a      	strb	r2, [r3, #0]
 800d9cc:	e038      	b.n	800da40 <fm_menu_config_date_hour+0x2c8>
                        }
                        else if((month_enum + 1 == FEBRUARY) &&
 800d9ce:	4b0d      	ldr	r3, [pc, #52]	; (800da04 <fm_menu_config_date_hour+0x28c>)
 800d9d0:	781b      	ldrb	r3, [r3, #0]
 800d9d2:	2b01      	cmp	r3, #1
 800d9d4:	d122      	bne.n	800da1c <fm_menu_config_date_hour+0x2a4>
                        (year_enum % YEAR_4 == 0) &&
 800d9d6:	4b0c      	ldr	r3, [pc, #48]	; (800da08 <fm_menu_config_date_hour+0x290>)
 800d9d8:	781b      	ldrb	r3, [r3, #0]
 800d9da:	f003 0303 	and.w	r3, r3, #3
 800d9de:	b2db      	uxtb	r3, r3
                        else if((month_enum + 1 == FEBRUARY) &&
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d11b      	bne.n	800da1c <fm_menu_config_date_hour+0x2a4>
                        (day_enum > DAY_29))
 800d9e4:	4b06      	ldr	r3, [pc, #24]	; (800da00 <fm_menu_config_date_hour+0x288>)
 800d9e6:	781b      	ldrb	r3, [r3, #0]
                        (year_enum % YEAR_4 == 0) &&
 800d9e8:	2b1d      	cmp	r3, #29
 800d9ea:	d917      	bls.n	800da1c <fm_menu_config_date_hour+0x2a4>
                        {
                            day_enum = DAY_29;
 800d9ec:	4b04      	ldr	r3, [pc, #16]	; (800da00 <fm_menu_config_date_hour+0x288>)
 800d9ee:	221d      	movs	r2, #29
 800d9f0:	701a      	strb	r2, [r3, #0]
 800d9f2:	e025      	b.n	800da40 <fm_menu_config_date_hour+0x2c8>
 800d9f4:	0800d779 	.word	0x0800d779
 800d9f8:	20000141 	.word	0x20000141
 800d9fc:	20001a53 	.word	0x20001a53
 800da00:	20001a54 	.word	0x20001a54
 800da04:	20001a55 	.word	0x20001a55
 800da08:	20001a56 	.word	0x20001a56
 800da0c:	20001a57 	.word	0x20001a57
 800da10:	20001a58 	.word	0x20001a58
 800da14:	20001a59 	.word	0x20001a59
 800da18:	20001a52 	.word	0x20001a52
                        }
                        else if((month_enum + 1 == FEBRUARY) &&
 800da1c:	4b93      	ldr	r3, [pc, #588]	; (800dc6c <fm_menu_config_date_hour+0x4f4>)
 800da1e:	781b      	ldrb	r3, [r3, #0]
 800da20:	2b01      	cmp	r3, #1
 800da22:	d10d      	bne.n	800da40 <fm_menu_config_date_hour+0x2c8>
                        (year_enum % YEAR_4 != 0) &&
 800da24:	4b92      	ldr	r3, [pc, #584]	; (800dc70 <fm_menu_config_date_hour+0x4f8>)
 800da26:	781b      	ldrb	r3, [r3, #0]
 800da28:	f003 0303 	and.w	r3, r3, #3
 800da2c:	b2db      	uxtb	r3, r3
                        else if((month_enum + 1 == FEBRUARY) &&
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d006      	beq.n	800da40 <fm_menu_config_date_hour+0x2c8>
                        (day_enum > DAY_28))
 800da32:	4b90      	ldr	r3, [pc, #576]	; (800dc74 <fm_menu_config_date_hour+0x4fc>)
 800da34:	781b      	ldrb	r3, [r3, #0]
                        (year_enum % YEAR_4 != 0) &&
 800da36:	2b1c      	cmp	r3, #28
 800da38:	d902      	bls.n	800da40 <fm_menu_config_date_hour+0x2c8>
                        {
                            day_enum = DAY_28;
 800da3a:	4b8e      	ldr	r3, [pc, #568]	; (800dc74 <fm_menu_config_date_hour+0x4fc>)
 800da3c:	221c      	movs	r2, #28
 800da3e:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum + 1,
 800da40:	4b8c      	ldr	r3, [pc, #560]	; (800dc74 <fm_menu_config_date_hour+0x4fc>)
 800da42:	781b      	ldrb	r3, [r3, #0]
 800da44:	4618      	mov	r0, r3
 800da46:	4b89      	ldr	r3, [pc, #548]	; (800dc6c <fm_menu_config_date_hour+0x4f4>)
 800da48:	781b      	ldrb	r3, [r3, #0]
 800da4a:	3301      	adds	r3, #1
 800da4c:	4a88      	ldr	r2, [pc, #544]	; (800dc70 <fm_menu_config_date_hour+0x4f8>)
 800da4e:	7812      	ldrb	r2, [r2, #0]
 800da50:	4619      	mov	r1, r3
 800da52:	f7fc fcd5 	bl	800a400 <fm_factory_modify_date>
 800da56:	e094      	b.n	800db82 <fm_menu_config_date_hour+0x40a>
                        year_enum);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, JANUARY, year_enum);
 800da58:	4b86      	ldr	r3, [pc, #536]	; (800dc74 <fm_menu_config_date_hour+0x4fc>)
 800da5a:	781b      	ldrb	r3, [r3, #0]
 800da5c:	4618      	mov	r0, r3
 800da5e:	4b84      	ldr	r3, [pc, #528]	; (800dc70 <fm_menu_config_date_hour+0x4f8>)
 800da60:	781b      	ldrb	r3, [r3, #0]
 800da62:	461a      	mov	r2, r3
 800da64:	2101      	movs	r1, #1
 800da66:	f7fc fccb 	bl	800a400 <fm_factory_modify_date>
 800da6a:	e08a      	b.n	800db82 <fm_menu_config_date_hour+0x40a>
                    }
                }
                else if(field == YEAR)
 800da6c:	4b82      	ldr	r3, [pc, #520]	; (800dc78 <fm_menu_config_date_hour+0x500>)
 800da6e:	781b      	ldrb	r3, [r3, #0]
 800da70:	2b02      	cmp	r3, #2
 800da72:	d12c      	bne.n	800dace <fm_menu_config_date_hour+0x356>
                {
                    if(year_enum < YEAR_99)
 800da74:	4b7e      	ldr	r3, [pc, #504]	; (800dc70 <fm_menu_config_date_hour+0x4f8>)
 800da76:	781b      	ldrb	r3, [r3, #0]
 800da78:	2b62      	cmp	r3, #98	; 0x62
 800da7a:	d81e      	bhi.n	800daba <fm_menu_config_date_hour+0x342>
                    {
                        if(((year_enum + 1) % YEAR_4 != YEAR_0) &&
 800da7c:	4b7c      	ldr	r3, [pc, #496]	; (800dc70 <fm_menu_config_date_hour+0x4f8>)
 800da7e:	781b      	ldrb	r3, [r3, #0]
 800da80:	3301      	adds	r3, #1
 800da82:	f003 0303 	and.w	r3, r3, #3
 800da86:	2b00      	cmp	r3, #0
 800da88:	d00a      	beq.n	800daa0 <fm_menu_config_date_hour+0x328>
                        (month_enum == FEBRUARY) &&
 800da8a:	4b78      	ldr	r3, [pc, #480]	; (800dc6c <fm_menu_config_date_hour+0x4f4>)
 800da8c:	781b      	ldrb	r3, [r3, #0]
                        if(((year_enum + 1) % YEAR_4 != YEAR_0) &&
 800da8e:	2b02      	cmp	r3, #2
 800da90:	d106      	bne.n	800daa0 <fm_menu_config_date_hour+0x328>
                        (day_enum > DAY_28))
 800da92:	4b78      	ldr	r3, [pc, #480]	; (800dc74 <fm_menu_config_date_hour+0x4fc>)
 800da94:	781b      	ldrb	r3, [r3, #0]
                        (month_enum == FEBRUARY) &&
 800da96:	2b1c      	cmp	r3, #28
 800da98:	d902      	bls.n	800daa0 <fm_menu_config_date_hour+0x328>
                        {
                            day_enum = DAY_28;
 800da9a:	4b76      	ldr	r3, [pc, #472]	; (800dc74 <fm_menu_config_date_hour+0x4fc>)
 800da9c:	221c      	movs	r2, #28
 800da9e:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum, year_enum
 800daa0:	4b74      	ldr	r3, [pc, #464]	; (800dc74 <fm_menu_config_date_hour+0x4fc>)
 800daa2:	781b      	ldrb	r3, [r3, #0]
 800daa4:	4618      	mov	r0, r3
 800daa6:	4b71      	ldr	r3, [pc, #452]	; (800dc6c <fm_menu_config_date_hour+0x4f4>)
 800daa8:	781b      	ldrb	r3, [r3, #0]
 800daaa:	4619      	mov	r1, r3
 800daac:	4b70      	ldr	r3, [pc, #448]	; (800dc70 <fm_menu_config_date_hour+0x4f8>)
 800daae:	781b      	ldrb	r3, [r3, #0]
 800dab0:	3301      	adds	r3, #1
 800dab2:	461a      	mov	r2, r3
 800dab4:	f7fc fca4 	bl	800a400 <fm_factory_modify_date>
 800dab8:	e063      	b.n	800db82 <fm_menu_config_date_hour+0x40a>
                        + 1);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, month_enum, YEAR_0);
 800daba:	4b6e      	ldr	r3, [pc, #440]	; (800dc74 <fm_menu_config_date_hour+0x4fc>)
 800dabc:	781b      	ldrb	r3, [r3, #0]
 800dabe:	4618      	mov	r0, r3
 800dac0:	4b6a      	ldr	r3, [pc, #424]	; (800dc6c <fm_menu_config_date_hour+0x4f4>)
 800dac2:	781b      	ldrb	r3, [r3, #0]
 800dac4:	2200      	movs	r2, #0
 800dac6:	4619      	mov	r1, r3
 800dac8:	f7fc fc9a 	bl	800a400 <fm_factory_modify_date>
 800dacc:	e059      	b.n	800db82 <fm_menu_config_date_hour+0x40a>
                    }
                }
                else if(field == HOUR)
 800dace:	4b6a      	ldr	r3, [pc, #424]	; (800dc78 <fm_menu_config_date_hour+0x500>)
 800dad0:	781b      	ldrb	r3, [r3, #0]
 800dad2:	2b03      	cmp	r3, #3
 800dad4:	d119      	bne.n	800db0a <fm_menu_config_date_hour+0x392>
                {
                    if(hour_enum < HOUR_23)
 800dad6:	4b69      	ldr	r3, [pc, #420]	; (800dc7c <fm_menu_config_date_hour+0x504>)
 800dad8:	781b      	ldrb	r3, [r3, #0]
 800dada:	2b16      	cmp	r3, #22
 800dadc:	d80b      	bhi.n	800daf6 <fm_menu_config_date_hour+0x37e>
                    {
                        fm_factory_modify_time(hour_enum + 1,
 800dade:	4b67      	ldr	r3, [pc, #412]	; (800dc7c <fm_menu_config_date_hour+0x504>)
 800dae0:	781b      	ldrb	r3, [r3, #0]
 800dae2:	3301      	adds	r3, #1
 800dae4:	4a66      	ldr	r2, [pc, #408]	; (800dc80 <fm_menu_config_date_hour+0x508>)
 800dae6:	7812      	ldrb	r2, [r2, #0]
 800dae8:	4611      	mov	r1, r2
 800daea:	4a66      	ldr	r2, [pc, #408]	; (800dc84 <fm_menu_config_date_hour+0x50c>)
 800daec:	7812      	ldrb	r2, [r2, #0]
 800daee:	4618      	mov	r0, r3
 800daf0:	f7fc fcb2 	bl	800a458 <fm_factory_modify_time>
 800daf4:	e045      	b.n	800db82 <fm_menu_config_date_hour+0x40a>
                        minute_enum,
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(HOUR_0, minute_enum,
 800daf6:	4b62      	ldr	r3, [pc, #392]	; (800dc80 <fm_menu_config_date_hour+0x508>)
 800daf8:	781b      	ldrb	r3, [r3, #0]
 800dafa:	4619      	mov	r1, r3
 800dafc:	4b61      	ldr	r3, [pc, #388]	; (800dc84 <fm_menu_config_date_hour+0x50c>)
 800dafe:	781b      	ldrb	r3, [r3, #0]
 800db00:	461a      	mov	r2, r3
 800db02:	2000      	movs	r0, #0
 800db04:	f7fc fca8 	bl	800a458 <fm_factory_modify_time>
 800db08:	e03b      	b.n	800db82 <fm_menu_config_date_hour+0x40a>
                        second_enum);
                    }
                }
                else if(field == MINUTE)
 800db0a:	4b5b      	ldr	r3, [pc, #364]	; (800dc78 <fm_menu_config_date_hour+0x500>)
 800db0c:	781b      	ldrb	r3, [r3, #0]
 800db0e:	2b04      	cmp	r3, #4
 800db10:	d119      	bne.n	800db46 <fm_menu_config_date_hour+0x3ce>
                {
                    if(minute_enum < MINU_59)
 800db12:	4b5b      	ldr	r3, [pc, #364]	; (800dc80 <fm_menu_config_date_hour+0x508>)
 800db14:	781b      	ldrb	r3, [r3, #0]
 800db16:	2b3a      	cmp	r3, #58	; 0x3a
 800db18:	d80b      	bhi.n	800db32 <fm_menu_config_date_hour+0x3ba>
                    {
                        fm_factory_modify_time(hour_enum,
 800db1a:	4b58      	ldr	r3, [pc, #352]	; (800dc7c <fm_menu_config_date_hour+0x504>)
 800db1c:	781b      	ldrb	r3, [r3, #0]
 800db1e:	4618      	mov	r0, r3
 800db20:	4b57      	ldr	r3, [pc, #348]	; (800dc80 <fm_menu_config_date_hour+0x508>)
 800db22:	781b      	ldrb	r3, [r3, #0]
 800db24:	3301      	adds	r3, #1
 800db26:	4a57      	ldr	r2, [pc, #348]	; (800dc84 <fm_menu_config_date_hour+0x50c>)
 800db28:	7812      	ldrb	r2, [r2, #0]
 800db2a:	4619      	mov	r1, r3
 800db2c:	f7fc fc94 	bl	800a458 <fm_factory_modify_time>
 800db30:	e027      	b.n	800db82 <fm_menu_config_date_hour+0x40a>
                        minute_enum + 1,
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum,
 800db32:	4b52      	ldr	r3, [pc, #328]	; (800dc7c <fm_menu_config_date_hour+0x504>)
 800db34:	781b      	ldrb	r3, [r3, #0]
 800db36:	4618      	mov	r0, r3
 800db38:	4b52      	ldr	r3, [pc, #328]	; (800dc84 <fm_menu_config_date_hour+0x50c>)
 800db3a:	781b      	ldrb	r3, [r3, #0]
 800db3c:	461a      	mov	r2, r3
 800db3e:	2100      	movs	r1, #0
 800db40:	f7fc fc8a 	bl	800a458 <fm_factory_modify_time>
 800db44:	e01d      	b.n	800db82 <fm_menu_config_date_hour+0x40a>
                        MINU_0, second_enum);
                    }
                }
                else if(field == SECOND)
 800db46:	4b4c      	ldr	r3, [pc, #304]	; (800dc78 <fm_menu_config_date_hour+0x500>)
 800db48:	781b      	ldrb	r3, [r3, #0]
 800db4a:	2b05      	cmp	r3, #5
 800db4c:	d119      	bne.n	800db82 <fm_menu_config_date_hour+0x40a>
                {
                    if(second_enum < SEC_59)
 800db4e:	4b4d      	ldr	r3, [pc, #308]	; (800dc84 <fm_menu_config_date_hour+0x50c>)
 800db50:	781b      	ldrb	r3, [r3, #0]
 800db52:	2b3a      	cmp	r3, #58	; 0x3a
 800db54:	d80c      	bhi.n	800db70 <fm_menu_config_date_hour+0x3f8>
                    {
                        fm_factory_modify_time(hour_enum,
 800db56:	4b49      	ldr	r3, [pc, #292]	; (800dc7c <fm_menu_config_date_hour+0x504>)
 800db58:	781b      	ldrb	r3, [r3, #0]
 800db5a:	4618      	mov	r0, r3
 800db5c:	4b48      	ldr	r3, [pc, #288]	; (800dc80 <fm_menu_config_date_hour+0x508>)
 800db5e:	781b      	ldrb	r3, [r3, #0]
 800db60:	4619      	mov	r1, r3
 800db62:	4b48      	ldr	r3, [pc, #288]	; (800dc84 <fm_menu_config_date_hour+0x50c>)
 800db64:	781b      	ldrb	r3, [r3, #0]
 800db66:	3301      	adds	r3, #1
 800db68:	461a      	mov	r2, r3
 800db6a:	f7fc fc75 	bl	800a458 <fm_factory_modify_time>
 800db6e:	e008      	b.n	800db82 <fm_menu_config_date_hour+0x40a>
                        minute_enum,
                        second_enum + 1);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum,
 800db70:	4b42      	ldr	r3, [pc, #264]	; (800dc7c <fm_menu_config_date_hour+0x504>)
 800db72:	781b      	ldrb	r3, [r3, #0]
 800db74:	4618      	mov	r0, r3
 800db76:	4b42      	ldr	r3, [pc, #264]	; (800dc80 <fm_menu_config_date_hour+0x508>)
 800db78:	781b      	ldrb	r3, [r3, #0]
 800db7a:	2200      	movs	r2, #0
 800db7c:	4619      	mov	r1, r3
 800db7e:	f7fc fc6b 	bl	800a458 <fm_factory_modify_time>
                        minute_enum,
                        SEC_0);
                    }
                }
                event_now = EVENT_LCD_REFRESH;
 800db82:	2301      	movs	r3, #1
 800db84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800db88:	f107 0323 	add.w	r3, r7, #35	; 0x23
 800db8c:	2200      	movs	r2, #0
 800db8e:	4619      	mov	r1, r3
 800db90:	483d      	ldr	r0, [pc, #244]	; (800dc88 <fm_menu_config_date_hour+0x510>)
 800db92:	f7fb fe3b 	bl	800980c <_txe_queue_send>
            }
        break;
 800db96:	e208      	b.n	800dfaa <fm_menu_config_date_hour+0x832>
        case EVENT_KEY_DOWN:
            if(correct_password)
 800db98:	4b3c      	ldr	r3, [pc, #240]	; (800dc8c <fm_menu_config_date_hour+0x514>)
 800db9a:	781b      	ldrb	r3, [r3, #0]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	f000 8206 	beq.w	800dfae <fm_menu_config_date_hour+0x836>
                 * en cuenta la cantidad de días de cada mes, si es un año
                 * bisiesto o no, y que al pasarse del valor máximo o mínimo de
                 * cada parámetro, se vuelva a iniciar desde el valor mínimo o
                 * máximo respectivamente.
                 */
                if(field == DAY)
 800dba2:	4b35      	ldr	r3, [pc, #212]	; (800dc78 <fm_menu_config_date_hour+0x500>)
 800dba4:	781b      	ldrb	r3, [r3, #0]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	f040 80ad 	bne.w	800dd06 <fm_menu_config_date_hour+0x58e>
                {
                    if(month_enum == JANUARY || month_enum == MARCH   ||
 800dbac:	4b2f      	ldr	r3, [pc, #188]	; (800dc6c <fm_menu_config_date_hour+0x4f4>)
 800dbae:	781b      	ldrb	r3, [r3, #0]
 800dbb0:	2b01      	cmp	r3, #1
 800dbb2:	d017      	beq.n	800dbe4 <fm_menu_config_date_hour+0x46c>
 800dbb4:	4b2d      	ldr	r3, [pc, #180]	; (800dc6c <fm_menu_config_date_hour+0x4f4>)
 800dbb6:	781b      	ldrb	r3, [r3, #0]
 800dbb8:	2b03      	cmp	r3, #3
 800dbba:	d013      	beq.n	800dbe4 <fm_menu_config_date_hour+0x46c>
                    month_enum == MAY        || month_enum == JULY    ||
 800dbbc:	4b2b      	ldr	r3, [pc, #172]	; (800dc6c <fm_menu_config_date_hour+0x4f4>)
 800dbbe:	781b      	ldrb	r3, [r3, #0]
                    if(month_enum == JANUARY || month_enum == MARCH   ||
 800dbc0:	2b05      	cmp	r3, #5
 800dbc2:	d00f      	beq.n	800dbe4 <fm_menu_config_date_hour+0x46c>
                    month_enum == MAY        || month_enum == JULY    ||
 800dbc4:	4b29      	ldr	r3, [pc, #164]	; (800dc6c <fm_menu_config_date_hour+0x4f4>)
 800dbc6:	781b      	ldrb	r3, [r3, #0]
 800dbc8:	2b07      	cmp	r3, #7
 800dbca:	d00b      	beq.n	800dbe4 <fm_menu_config_date_hour+0x46c>
                    month_enum == AUGUST     || month_enum == OCTOBER ||
 800dbcc:	4b27      	ldr	r3, [pc, #156]	; (800dc6c <fm_menu_config_date_hour+0x4f4>)
 800dbce:	781b      	ldrb	r3, [r3, #0]
                    month_enum == MAY        || month_enum == JULY    ||
 800dbd0:	2b08      	cmp	r3, #8
 800dbd2:	d007      	beq.n	800dbe4 <fm_menu_config_date_hour+0x46c>
                    month_enum == AUGUST     || month_enum == OCTOBER ||
 800dbd4:	4b25      	ldr	r3, [pc, #148]	; (800dc6c <fm_menu_config_date_hour+0x4f4>)
 800dbd6:	781b      	ldrb	r3, [r3, #0]
 800dbd8:	2b0a      	cmp	r3, #10
 800dbda:	d003      	beq.n	800dbe4 <fm_menu_config_date_hour+0x46c>
                    month_enum == DECEMBER)
 800dbdc:	4b23      	ldr	r3, [pc, #140]	; (800dc6c <fm_menu_config_date_hour+0x4f4>)
 800dbde:	781b      	ldrb	r3, [r3, #0]
                    month_enum == AUGUST     || month_enum == OCTOBER ||
 800dbe0:	2b0c      	cmp	r3, #12
 800dbe2:	d119      	bne.n	800dc18 <fm_menu_config_date_hour+0x4a0>
                    {
                        if(day_enum > DAY_1)
 800dbe4:	4b23      	ldr	r3, [pc, #140]	; (800dc74 <fm_menu_config_date_hour+0x4fc>)
 800dbe6:	781b      	ldrb	r3, [r3, #0]
 800dbe8:	2b01      	cmp	r3, #1
 800dbea:	d90b      	bls.n	800dc04 <fm_menu_config_date_hour+0x48c>
                        {
                            fm_factory_modify_date(day_enum - 1, month_enum,
 800dbec:	4b21      	ldr	r3, [pc, #132]	; (800dc74 <fm_menu_config_date_hour+0x4fc>)
 800dbee:	781b      	ldrb	r3, [r3, #0]
 800dbf0:	3b01      	subs	r3, #1
 800dbf2:	4a1e      	ldr	r2, [pc, #120]	; (800dc6c <fm_menu_config_date_hour+0x4f4>)
 800dbf4:	7812      	ldrb	r2, [r2, #0]
 800dbf6:	4611      	mov	r1, r2
 800dbf8:	4a1d      	ldr	r2, [pc, #116]	; (800dc70 <fm_menu_config_date_hour+0x4f8>)
 800dbfa:	7812      	ldrb	r2, [r2, #0]
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	f7fc fbff 	bl	800a400 <fm_factory_modify_date>
                        if(day_enum > DAY_1)
 800dc02:	e166      	b.n	800ded2 <fm_menu_config_date_hour+0x75a>
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_31, month_enum,
 800dc04:	4b19      	ldr	r3, [pc, #100]	; (800dc6c <fm_menu_config_date_hour+0x4f4>)
 800dc06:	781b      	ldrb	r3, [r3, #0]
 800dc08:	4619      	mov	r1, r3
 800dc0a:	4b19      	ldr	r3, [pc, #100]	; (800dc70 <fm_menu_config_date_hour+0x4f8>)
 800dc0c:	781b      	ldrb	r3, [r3, #0]
 800dc0e:	461a      	mov	r2, r3
 800dc10:	201f      	movs	r0, #31
 800dc12:	f7fc fbf5 	bl	800a400 <fm_factory_modify_date>
                        if(day_enum > DAY_1)
 800dc16:	e15c      	b.n	800ded2 <fm_menu_config_date_hour+0x75a>
                            year_enum);
                        }
                    }
                    else if(month_enum == APRIL || month_enum == JUNE ||
 800dc18:	4b14      	ldr	r3, [pc, #80]	; (800dc6c <fm_menu_config_date_hour+0x4f4>)
 800dc1a:	781b      	ldrb	r3, [r3, #0]
 800dc1c:	2b04      	cmp	r3, #4
 800dc1e:	d00b      	beq.n	800dc38 <fm_menu_config_date_hour+0x4c0>
 800dc20:	4b12      	ldr	r3, [pc, #72]	; (800dc6c <fm_menu_config_date_hour+0x4f4>)
 800dc22:	781b      	ldrb	r3, [r3, #0]
 800dc24:	2b06      	cmp	r3, #6
 800dc26:	d007      	beq.n	800dc38 <fm_menu_config_date_hour+0x4c0>
                    month_enum == SEPTEMBER     || month_enum == NOVEMBER)
 800dc28:	4b10      	ldr	r3, [pc, #64]	; (800dc6c <fm_menu_config_date_hour+0x4f4>)
 800dc2a:	781b      	ldrb	r3, [r3, #0]
                    else if(month_enum == APRIL || month_enum == JUNE ||
 800dc2c:	2b09      	cmp	r3, #9
 800dc2e:	d003      	beq.n	800dc38 <fm_menu_config_date_hour+0x4c0>
                    month_enum == SEPTEMBER     || month_enum == NOVEMBER)
 800dc30:	4b0e      	ldr	r3, [pc, #56]	; (800dc6c <fm_menu_config_date_hour+0x4f4>)
 800dc32:	781b      	ldrb	r3, [r3, #0]
 800dc34:	2b0b      	cmp	r3, #11
 800dc36:	d12b      	bne.n	800dc90 <fm_menu_config_date_hour+0x518>
                    {
                        if(day_enum > DAY_1)
 800dc38:	4b0e      	ldr	r3, [pc, #56]	; (800dc74 <fm_menu_config_date_hour+0x4fc>)
 800dc3a:	781b      	ldrb	r3, [r3, #0]
 800dc3c:	2b01      	cmp	r3, #1
 800dc3e:	d90b      	bls.n	800dc58 <fm_menu_config_date_hour+0x4e0>
                        {
                            fm_factory_modify_date(day_enum - 1, month_enum,
 800dc40:	4b0c      	ldr	r3, [pc, #48]	; (800dc74 <fm_menu_config_date_hour+0x4fc>)
 800dc42:	781b      	ldrb	r3, [r3, #0]
 800dc44:	3b01      	subs	r3, #1
 800dc46:	4a09      	ldr	r2, [pc, #36]	; (800dc6c <fm_menu_config_date_hour+0x4f4>)
 800dc48:	7812      	ldrb	r2, [r2, #0]
 800dc4a:	4611      	mov	r1, r2
 800dc4c:	4a08      	ldr	r2, [pc, #32]	; (800dc70 <fm_menu_config_date_hour+0x4f8>)
 800dc4e:	7812      	ldrb	r2, [r2, #0]
 800dc50:	4618      	mov	r0, r3
 800dc52:	f7fc fbd5 	bl	800a400 <fm_factory_modify_date>
                        if(day_enum > DAY_1)
 800dc56:	e13c      	b.n	800ded2 <fm_menu_config_date_hour+0x75a>
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_30, month_enum,
 800dc58:	4b04      	ldr	r3, [pc, #16]	; (800dc6c <fm_menu_config_date_hour+0x4f4>)
 800dc5a:	781b      	ldrb	r3, [r3, #0]
 800dc5c:	4619      	mov	r1, r3
 800dc5e:	4b04      	ldr	r3, [pc, #16]	; (800dc70 <fm_menu_config_date_hour+0x4f8>)
 800dc60:	781b      	ldrb	r3, [r3, #0]
 800dc62:	461a      	mov	r2, r3
 800dc64:	201e      	movs	r0, #30
 800dc66:	f7fc fbcb 	bl	800a400 <fm_factory_modify_date>
                        if(day_enum > DAY_1)
 800dc6a:	e132      	b.n	800ded2 <fm_menu_config_date_hour+0x75a>
 800dc6c:	20001a55 	.word	0x20001a55
 800dc70:	20001a56 	.word	0x20001a56
 800dc74:	20001a54 	.word	0x20001a54
 800dc78:	20001a53 	.word	0x20001a53
 800dc7c:	20001a57 	.word	0x20001a57
 800dc80:	20001a58 	.word	0x20001a58
 800dc84:	20001a59 	.word	0x20001a59
 800dc88:	20001068 	.word	0x20001068
 800dc8c:	20001a52 	.word	0x20001a52
                            year_enum);
                        }
                    }
                    else
                    {
                        if(year_enum % YEAR_4 == 0)
 800dc90:	4b95      	ldr	r3, [pc, #596]	; (800dee8 <fm_menu_config_date_hour+0x770>)
 800dc92:	781b      	ldrb	r3, [r3, #0]
 800dc94:	f003 0303 	and.w	r3, r3, #3
 800dc98:	b2db      	uxtb	r3, r3
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d119      	bne.n	800dcd2 <fm_menu_config_date_hour+0x55a>
                        {
                            if(day_enum > DAY_1)
 800dc9e:	4b93      	ldr	r3, [pc, #588]	; (800deec <fm_menu_config_date_hour+0x774>)
 800dca0:	781b      	ldrb	r3, [r3, #0]
 800dca2:	2b01      	cmp	r3, #1
 800dca4:	d90b      	bls.n	800dcbe <fm_menu_config_date_hour+0x546>
                            {
                                fm_factory_modify_date(day_enum - 1, month_enum,
 800dca6:	4b91      	ldr	r3, [pc, #580]	; (800deec <fm_menu_config_date_hour+0x774>)
 800dca8:	781b      	ldrb	r3, [r3, #0]
 800dcaa:	3b01      	subs	r3, #1
 800dcac:	4a90      	ldr	r2, [pc, #576]	; (800def0 <fm_menu_config_date_hour+0x778>)
 800dcae:	7812      	ldrb	r2, [r2, #0]
 800dcb0:	4611      	mov	r1, r2
 800dcb2:	4a8d      	ldr	r2, [pc, #564]	; (800dee8 <fm_menu_config_date_hour+0x770>)
 800dcb4:	7812      	ldrb	r2, [r2, #0]
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f7fc fba2 	bl	800a400 <fm_factory_modify_date>
 800dcbc:	e109      	b.n	800ded2 <fm_menu_config_date_hour+0x75a>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_29, month_enum,
 800dcbe:	4b8c      	ldr	r3, [pc, #560]	; (800def0 <fm_menu_config_date_hour+0x778>)
 800dcc0:	781b      	ldrb	r3, [r3, #0]
 800dcc2:	4619      	mov	r1, r3
 800dcc4:	4b88      	ldr	r3, [pc, #544]	; (800dee8 <fm_menu_config_date_hour+0x770>)
 800dcc6:	781b      	ldrb	r3, [r3, #0]
 800dcc8:	461a      	mov	r2, r3
 800dcca:	201d      	movs	r0, #29
 800dccc:	f7fc fb98 	bl	800a400 <fm_factory_modify_date>
 800dcd0:	e0ff      	b.n	800ded2 <fm_menu_config_date_hour+0x75a>
                                year_enum);
                            }
                        }
                        else
                        {
                            if(day_enum > DAY_1)
 800dcd2:	4b86      	ldr	r3, [pc, #536]	; (800deec <fm_menu_config_date_hour+0x774>)
 800dcd4:	781b      	ldrb	r3, [r3, #0]
 800dcd6:	2b01      	cmp	r3, #1
 800dcd8:	d90b      	bls.n	800dcf2 <fm_menu_config_date_hour+0x57a>
                            {
                                fm_factory_modify_date(day_enum - 1, month_enum,
 800dcda:	4b84      	ldr	r3, [pc, #528]	; (800deec <fm_menu_config_date_hour+0x774>)
 800dcdc:	781b      	ldrb	r3, [r3, #0]
 800dcde:	3b01      	subs	r3, #1
 800dce0:	4a83      	ldr	r2, [pc, #524]	; (800def0 <fm_menu_config_date_hour+0x778>)
 800dce2:	7812      	ldrb	r2, [r2, #0]
 800dce4:	4611      	mov	r1, r2
 800dce6:	4a80      	ldr	r2, [pc, #512]	; (800dee8 <fm_menu_config_date_hour+0x770>)
 800dce8:	7812      	ldrb	r2, [r2, #0]
 800dcea:	4618      	mov	r0, r3
 800dcec:	f7fc fb88 	bl	800a400 <fm_factory_modify_date>
 800dcf0:	e0ef      	b.n	800ded2 <fm_menu_config_date_hour+0x75a>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_28, month_enum,
 800dcf2:	4b7f      	ldr	r3, [pc, #508]	; (800def0 <fm_menu_config_date_hour+0x778>)
 800dcf4:	781b      	ldrb	r3, [r3, #0]
 800dcf6:	4619      	mov	r1, r3
 800dcf8:	4b7b      	ldr	r3, [pc, #492]	; (800dee8 <fm_menu_config_date_hour+0x770>)
 800dcfa:	781b      	ldrb	r3, [r3, #0]
 800dcfc:	461a      	mov	r2, r3
 800dcfe:	201c      	movs	r0, #28
 800dd00:	f7fc fb7e 	bl	800a400 <fm_factory_modify_date>
 800dd04:	e0e5      	b.n	800ded2 <fm_menu_config_date_hour+0x75a>
                                year_enum);
                            }
                        }
                    }
                }
                else if(field == MONTH)
 800dd06:	4b7b      	ldr	r3, [pc, #492]	; (800def4 <fm_menu_config_date_hour+0x77c>)
 800dd08:	781b      	ldrb	r3, [r3, #0]
 800dd0a:	2b01      	cmp	r3, #1
 800dd0c:	d156      	bne.n	800ddbc <fm_menu_config_date_hour+0x644>
                {
                    if(month_enum > JANUARY)
 800dd0e:	4b78      	ldr	r3, [pc, #480]	; (800def0 <fm_menu_config_date_hour+0x778>)
 800dd10:	781b      	ldrb	r3, [r3, #0]
 800dd12:	2b01      	cmp	r3, #1
 800dd14:	d948      	bls.n	800dda8 <fm_menu_config_date_hour+0x630>
                    {
                        if((month_enum - 1 == APRIL ||
 800dd16:	4b76      	ldr	r3, [pc, #472]	; (800def0 <fm_menu_config_date_hour+0x778>)
 800dd18:	781b      	ldrb	r3, [r3, #0]
 800dd1a:	2b05      	cmp	r3, #5
 800dd1c:	d00b      	beq.n	800dd36 <fm_menu_config_date_hour+0x5be>
                        month_enum - 1 == JUNE      ||
 800dd1e:	4b74      	ldr	r3, [pc, #464]	; (800def0 <fm_menu_config_date_hour+0x778>)
 800dd20:	781b      	ldrb	r3, [r3, #0]
                        if((month_enum - 1 == APRIL ||
 800dd22:	2b07      	cmp	r3, #7
 800dd24:	d007      	beq.n	800dd36 <fm_menu_config_date_hour+0x5be>
                        month_enum - 1 == SEPTEMBER ||
 800dd26:	4b72      	ldr	r3, [pc, #456]	; (800def0 <fm_menu_config_date_hour+0x778>)
 800dd28:	781b      	ldrb	r3, [r3, #0]
                        month_enum - 1 == JUNE      ||
 800dd2a:	2b0a      	cmp	r3, #10
 800dd2c:	d003      	beq.n	800dd36 <fm_menu_config_date_hour+0x5be>
                        month_enum - 1 == NOVEMBER) && (day_enum > DAY_30))
 800dd2e:	4b70      	ldr	r3, [pc, #448]	; (800def0 <fm_menu_config_date_hour+0x778>)
 800dd30:	781b      	ldrb	r3, [r3, #0]
                        month_enum - 1 == SEPTEMBER ||
 800dd32:	2b0c      	cmp	r3, #12
 800dd34:	d107      	bne.n	800dd46 <fm_menu_config_date_hour+0x5ce>
                        month_enum - 1 == NOVEMBER) && (day_enum > DAY_30))
 800dd36:	4b6d      	ldr	r3, [pc, #436]	; (800deec <fm_menu_config_date_hour+0x774>)
 800dd38:	781b      	ldrb	r3, [r3, #0]
 800dd3a:	2b1e      	cmp	r3, #30
 800dd3c:	d903      	bls.n	800dd46 <fm_menu_config_date_hour+0x5ce>
                        {
                            day_enum = DAY_30;
 800dd3e:	4b6b      	ldr	r3, [pc, #428]	; (800deec <fm_menu_config_date_hour+0x774>)
 800dd40:	221e      	movs	r2, #30
 800dd42:	701a      	strb	r2, [r3, #0]
 800dd44:	e024      	b.n	800dd90 <fm_menu_config_date_hour+0x618>
                        }
                        else if((month_enum - 1 == FEBRUARY) &&
 800dd46:	4b6a      	ldr	r3, [pc, #424]	; (800def0 <fm_menu_config_date_hour+0x778>)
 800dd48:	781b      	ldrb	r3, [r3, #0]
 800dd4a:	2b03      	cmp	r3, #3
 800dd4c:	d10e      	bne.n	800dd6c <fm_menu_config_date_hour+0x5f4>
                        (year_enum % YEAR_4 == 0) &&
 800dd4e:	4b66      	ldr	r3, [pc, #408]	; (800dee8 <fm_menu_config_date_hour+0x770>)
 800dd50:	781b      	ldrb	r3, [r3, #0]
 800dd52:	f003 0303 	and.w	r3, r3, #3
 800dd56:	b2db      	uxtb	r3, r3
                        else if((month_enum - 1 == FEBRUARY) &&
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d107      	bne.n	800dd6c <fm_menu_config_date_hour+0x5f4>
                        (day_enum > DAY_29))
 800dd5c:	4b63      	ldr	r3, [pc, #396]	; (800deec <fm_menu_config_date_hour+0x774>)
 800dd5e:	781b      	ldrb	r3, [r3, #0]
                        (year_enum % YEAR_4 == 0) &&
 800dd60:	2b1d      	cmp	r3, #29
 800dd62:	d903      	bls.n	800dd6c <fm_menu_config_date_hour+0x5f4>
                        {
                            day_enum = DAY_29;
 800dd64:	4b61      	ldr	r3, [pc, #388]	; (800deec <fm_menu_config_date_hour+0x774>)
 800dd66:	221d      	movs	r2, #29
 800dd68:	701a      	strb	r2, [r3, #0]
 800dd6a:	e011      	b.n	800dd90 <fm_menu_config_date_hour+0x618>
                        }
                        else if((month_enum - 1 == FEBRUARY) &&
 800dd6c:	4b60      	ldr	r3, [pc, #384]	; (800def0 <fm_menu_config_date_hour+0x778>)
 800dd6e:	781b      	ldrb	r3, [r3, #0]
 800dd70:	2b03      	cmp	r3, #3
 800dd72:	d10d      	bne.n	800dd90 <fm_menu_config_date_hour+0x618>
                        (year_enum % YEAR_4 != 0) &&
 800dd74:	4b5c      	ldr	r3, [pc, #368]	; (800dee8 <fm_menu_config_date_hour+0x770>)
 800dd76:	781b      	ldrb	r3, [r3, #0]
 800dd78:	f003 0303 	and.w	r3, r3, #3
 800dd7c:	b2db      	uxtb	r3, r3
                        else if((month_enum - 1 == FEBRUARY) &&
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d006      	beq.n	800dd90 <fm_menu_config_date_hour+0x618>
                        (day_enum > DAY_28))
 800dd82:	4b5a      	ldr	r3, [pc, #360]	; (800deec <fm_menu_config_date_hour+0x774>)
 800dd84:	781b      	ldrb	r3, [r3, #0]
                        (year_enum % YEAR_4 != 0) &&
 800dd86:	2b1c      	cmp	r3, #28
 800dd88:	d902      	bls.n	800dd90 <fm_menu_config_date_hour+0x618>
                        {
                            day_enum = DAY_28;
 800dd8a:	4b58      	ldr	r3, [pc, #352]	; (800deec <fm_menu_config_date_hour+0x774>)
 800dd8c:	221c      	movs	r2, #28
 800dd8e:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum - 1,
 800dd90:	4b56      	ldr	r3, [pc, #344]	; (800deec <fm_menu_config_date_hour+0x774>)
 800dd92:	781b      	ldrb	r3, [r3, #0]
 800dd94:	4618      	mov	r0, r3
 800dd96:	4b56      	ldr	r3, [pc, #344]	; (800def0 <fm_menu_config_date_hour+0x778>)
 800dd98:	781b      	ldrb	r3, [r3, #0]
 800dd9a:	3b01      	subs	r3, #1
 800dd9c:	4a52      	ldr	r2, [pc, #328]	; (800dee8 <fm_menu_config_date_hour+0x770>)
 800dd9e:	7812      	ldrb	r2, [r2, #0]
 800dda0:	4619      	mov	r1, r3
 800dda2:	f7fc fb2d 	bl	800a400 <fm_factory_modify_date>
 800dda6:	e094      	b.n	800ded2 <fm_menu_config_date_hour+0x75a>
                        year_enum);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, DECEMBER, year_enum);
 800dda8:	4b50      	ldr	r3, [pc, #320]	; (800deec <fm_menu_config_date_hour+0x774>)
 800ddaa:	781b      	ldrb	r3, [r3, #0]
 800ddac:	4618      	mov	r0, r3
 800ddae:	4b4e      	ldr	r3, [pc, #312]	; (800dee8 <fm_menu_config_date_hour+0x770>)
 800ddb0:	781b      	ldrb	r3, [r3, #0]
 800ddb2:	461a      	mov	r2, r3
 800ddb4:	210c      	movs	r1, #12
 800ddb6:	f7fc fb23 	bl	800a400 <fm_factory_modify_date>
 800ddba:	e08a      	b.n	800ded2 <fm_menu_config_date_hour+0x75a>
                    }
                }
                else if(field == YEAR)
 800ddbc:	4b4d      	ldr	r3, [pc, #308]	; (800def4 <fm_menu_config_date_hour+0x77c>)
 800ddbe:	781b      	ldrb	r3, [r3, #0]
 800ddc0:	2b02      	cmp	r3, #2
 800ddc2:	d12c      	bne.n	800de1e <fm_menu_config_date_hour+0x6a6>
                {
                    if(year_enum > YEAR_0)
 800ddc4:	4b48      	ldr	r3, [pc, #288]	; (800dee8 <fm_menu_config_date_hour+0x770>)
 800ddc6:	781b      	ldrb	r3, [r3, #0]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d01e      	beq.n	800de0a <fm_menu_config_date_hour+0x692>
                    {
                        if(((year_enum - 1) % YEAR_4 != YEAR_0) &&
 800ddcc:	4b46      	ldr	r3, [pc, #280]	; (800dee8 <fm_menu_config_date_hour+0x770>)
 800ddce:	781b      	ldrb	r3, [r3, #0]
 800ddd0:	3b01      	subs	r3, #1
 800ddd2:	f003 0303 	and.w	r3, r3, #3
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d00a      	beq.n	800ddf0 <fm_menu_config_date_hour+0x678>
                        (month_enum == FEBRUARY) &&
 800ddda:	4b45      	ldr	r3, [pc, #276]	; (800def0 <fm_menu_config_date_hour+0x778>)
 800dddc:	781b      	ldrb	r3, [r3, #0]
                        if(((year_enum - 1) % YEAR_4 != YEAR_0) &&
 800ddde:	2b02      	cmp	r3, #2
 800dde0:	d106      	bne.n	800ddf0 <fm_menu_config_date_hour+0x678>
                        (day_enum > DAY_28))
 800dde2:	4b42      	ldr	r3, [pc, #264]	; (800deec <fm_menu_config_date_hour+0x774>)
 800dde4:	781b      	ldrb	r3, [r3, #0]
                        (month_enum == FEBRUARY) &&
 800dde6:	2b1c      	cmp	r3, #28
 800dde8:	d902      	bls.n	800ddf0 <fm_menu_config_date_hour+0x678>
                        {
                            day_enum = DAY_28;
 800ddea:	4b40      	ldr	r3, [pc, #256]	; (800deec <fm_menu_config_date_hour+0x774>)
 800ddec:	221c      	movs	r2, #28
 800ddee:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum,
 800ddf0:	4b3e      	ldr	r3, [pc, #248]	; (800deec <fm_menu_config_date_hour+0x774>)
 800ddf2:	781b      	ldrb	r3, [r3, #0]
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	4b3e      	ldr	r3, [pc, #248]	; (800def0 <fm_menu_config_date_hour+0x778>)
 800ddf8:	781b      	ldrb	r3, [r3, #0]
 800ddfa:	4619      	mov	r1, r3
 800ddfc:	4b3a      	ldr	r3, [pc, #232]	; (800dee8 <fm_menu_config_date_hour+0x770>)
 800ddfe:	781b      	ldrb	r3, [r3, #0]
 800de00:	3b01      	subs	r3, #1
 800de02:	461a      	mov	r2, r3
 800de04:	f7fc fafc 	bl	800a400 <fm_factory_modify_date>
 800de08:	e063      	b.n	800ded2 <fm_menu_config_date_hour+0x75a>
                        year_enum - 1);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, month_enum, YEAR_99);
 800de0a:	4b38      	ldr	r3, [pc, #224]	; (800deec <fm_menu_config_date_hour+0x774>)
 800de0c:	781b      	ldrb	r3, [r3, #0]
 800de0e:	4618      	mov	r0, r3
 800de10:	4b37      	ldr	r3, [pc, #220]	; (800def0 <fm_menu_config_date_hour+0x778>)
 800de12:	781b      	ldrb	r3, [r3, #0]
 800de14:	2263      	movs	r2, #99	; 0x63
 800de16:	4619      	mov	r1, r3
 800de18:	f7fc faf2 	bl	800a400 <fm_factory_modify_date>
 800de1c:	e059      	b.n	800ded2 <fm_menu_config_date_hour+0x75a>
                    }
                }
                else if(field == HOUR)
 800de1e:	4b35      	ldr	r3, [pc, #212]	; (800def4 <fm_menu_config_date_hour+0x77c>)
 800de20:	781b      	ldrb	r3, [r3, #0]
 800de22:	2b03      	cmp	r3, #3
 800de24:	d119      	bne.n	800de5a <fm_menu_config_date_hour+0x6e2>
                {
                    if(hour_enum > HOUR_0)
 800de26:	4b34      	ldr	r3, [pc, #208]	; (800def8 <fm_menu_config_date_hour+0x780>)
 800de28:	781b      	ldrb	r3, [r3, #0]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d00b      	beq.n	800de46 <fm_menu_config_date_hour+0x6ce>
                    {
                        fm_factory_modify_time(hour_enum - 1, minute_enum,
 800de2e:	4b32      	ldr	r3, [pc, #200]	; (800def8 <fm_menu_config_date_hour+0x780>)
 800de30:	781b      	ldrb	r3, [r3, #0]
 800de32:	3b01      	subs	r3, #1
 800de34:	4a31      	ldr	r2, [pc, #196]	; (800defc <fm_menu_config_date_hour+0x784>)
 800de36:	7812      	ldrb	r2, [r2, #0]
 800de38:	4611      	mov	r1, r2
 800de3a:	4a31      	ldr	r2, [pc, #196]	; (800df00 <fm_menu_config_date_hour+0x788>)
 800de3c:	7812      	ldrb	r2, [r2, #0]
 800de3e:	4618      	mov	r0, r3
 800de40:	f7fc fb0a 	bl	800a458 <fm_factory_modify_time>
 800de44:	e045      	b.n	800ded2 <fm_menu_config_date_hour+0x75a>
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(HOUR_23, minute_enum,
 800de46:	4b2d      	ldr	r3, [pc, #180]	; (800defc <fm_menu_config_date_hour+0x784>)
 800de48:	781b      	ldrb	r3, [r3, #0]
 800de4a:	4619      	mov	r1, r3
 800de4c:	4b2c      	ldr	r3, [pc, #176]	; (800df00 <fm_menu_config_date_hour+0x788>)
 800de4e:	781b      	ldrb	r3, [r3, #0]
 800de50:	461a      	mov	r2, r3
 800de52:	2017      	movs	r0, #23
 800de54:	f7fc fb00 	bl	800a458 <fm_factory_modify_time>
 800de58:	e03b      	b.n	800ded2 <fm_menu_config_date_hour+0x75a>
                        second_enum);
                    }
                }
                else if(field == MINUTE)
 800de5a:	4b26      	ldr	r3, [pc, #152]	; (800def4 <fm_menu_config_date_hour+0x77c>)
 800de5c:	781b      	ldrb	r3, [r3, #0]
 800de5e:	2b04      	cmp	r3, #4
 800de60:	d119      	bne.n	800de96 <fm_menu_config_date_hour+0x71e>
                {
                    if(minute_enum > MINU_0)
 800de62:	4b26      	ldr	r3, [pc, #152]	; (800defc <fm_menu_config_date_hour+0x784>)
 800de64:	781b      	ldrb	r3, [r3, #0]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d00b      	beq.n	800de82 <fm_menu_config_date_hour+0x70a>
                    {
                        fm_factory_modify_time(hour_enum, minute_enum - 1,
 800de6a:	4b23      	ldr	r3, [pc, #140]	; (800def8 <fm_menu_config_date_hour+0x780>)
 800de6c:	781b      	ldrb	r3, [r3, #0]
 800de6e:	4618      	mov	r0, r3
 800de70:	4b22      	ldr	r3, [pc, #136]	; (800defc <fm_menu_config_date_hour+0x784>)
 800de72:	781b      	ldrb	r3, [r3, #0]
 800de74:	3b01      	subs	r3, #1
 800de76:	4a22      	ldr	r2, [pc, #136]	; (800df00 <fm_menu_config_date_hour+0x788>)
 800de78:	7812      	ldrb	r2, [r2, #0]
 800de7a:	4619      	mov	r1, r3
 800de7c:	f7fc faec 	bl	800a458 <fm_factory_modify_time>
 800de80:	e027      	b.n	800ded2 <fm_menu_config_date_hour+0x75a>
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum, MINU_59, second_enum);
 800de82:	4b1d      	ldr	r3, [pc, #116]	; (800def8 <fm_menu_config_date_hour+0x780>)
 800de84:	781b      	ldrb	r3, [r3, #0]
 800de86:	4618      	mov	r0, r3
 800de88:	4b1d      	ldr	r3, [pc, #116]	; (800df00 <fm_menu_config_date_hour+0x788>)
 800de8a:	781b      	ldrb	r3, [r3, #0]
 800de8c:	461a      	mov	r2, r3
 800de8e:	213b      	movs	r1, #59	; 0x3b
 800de90:	f7fc fae2 	bl	800a458 <fm_factory_modify_time>
 800de94:	e01d      	b.n	800ded2 <fm_menu_config_date_hour+0x75a>
                    }
                }
                else if(field == SECOND)
 800de96:	4b17      	ldr	r3, [pc, #92]	; (800def4 <fm_menu_config_date_hour+0x77c>)
 800de98:	781b      	ldrb	r3, [r3, #0]
 800de9a:	2b05      	cmp	r3, #5
 800de9c:	d119      	bne.n	800ded2 <fm_menu_config_date_hour+0x75a>
                {
                    if(second_enum > SEC_0)
 800de9e:	4b18      	ldr	r3, [pc, #96]	; (800df00 <fm_menu_config_date_hour+0x788>)
 800dea0:	781b      	ldrb	r3, [r3, #0]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d00c      	beq.n	800dec0 <fm_menu_config_date_hour+0x748>
                    {
                        fm_factory_modify_time(hour_enum, minute_enum,
 800dea6:	4b14      	ldr	r3, [pc, #80]	; (800def8 <fm_menu_config_date_hour+0x780>)
 800dea8:	781b      	ldrb	r3, [r3, #0]
 800deaa:	4618      	mov	r0, r3
 800deac:	4b13      	ldr	r3, [pc, #76]	; (800defc <fm_menu_config_date_hour+0x784>)
 800deae:	781b      	ldrb	r3, [r3, #0]
 800deb0:	4619      	mov	r1, r3
 800deb2:	4b13      	ldr	r3, [pc, #76]	; (800df00 <fm_menu_config_date_hour+0x788>)
 800deb4:	781b      	ldrb	r3, [r3, #0]
 800deb6:	3b01      	subs	r3, #1
 800deb8:	461a      	mov	r2, r3
 800deba:	f7fc facd 	bl	800a458 <fm_factory_modify_time>
 800debe:	e008      	b.n	800ded2 <fm_menu_config_date_hour+0x75a>
                        second_enum - 1);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum, minute_enum, SEC_59);
 800dec0:	4b0d      	ldr	r3, [pc, #52]	; (800def8 <fm_menu_config_date_hour+0x780>)
 800dec2:	781b      	ldrb	r3, [r3, #0]
 800dec4:	4618      	mov	r0, r3
 800dec6:	4b0d      	ldr	r3, [pc, #52]	; (800defc <fm_menu_config_date_hour+0x784>)
 800dec8:	781b      	ldrb	r3, [r3, #0]
 800deca:	223b      	movs	r2, #59	; 0x3b
 800decc:	4619      	mov	r1, r3
 800dece:	f7fc fac3 	bl	800a458 <fm_factory_modify_time>
                    }
                }
                event_now = EVENT_LCD_REFRESH;
 800ded2:	2301      	movs	r3, #1
 800ded4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800ded8:	f107 0323 	add.w	r3, r7, #35	; 0x23
 800dedc:	2200      	movs	r2, #0
 800dede:	4619      	mov	r1, r3
 800dee0:	4808      	ldr	r0, [pc, #32]	; (800df04 <fm_menu_config_date_hour+0x78c>)
 800dee2:	f7fb fc93 	bl	800980c <_txe_queue_send>
            }
        break;
 800dee6:	e062      	b.n	800dfae <fm_menu_config_date_hour+0x836>
 800dee8:	20001a56 	.word	0x20001a56
 800deec:	20001a54 	.word	0x20001a54
 800def0:	20001a55 	.word	0x20001a55
 800def4:	20001a53 	.word	0x20001a53
 800def8:	20001a57 	.word	0x20001a57
 800defc:	20001a58 	.word	0x20001a58
 800df00:	20001a59 	.word	0x20001a59
 800df04:	20001068 	.word	0x20001068
        case EVENT_KEY_ENTER:
            if(correct_password)
 800df08:	4b58      	ldr	r3, [pc, #352]	; (800e06c <fm_menu_config_date_hour+0x8f4>)
 800df0a:	781b      	ldrb	r3, [r3, #0]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d050      	beq.n	800dfb2 <fm_menu_config_date_hour+0x83a>
            {
                /*
                 * Se cambia qué parámetro se va a modificar según cual estaba
                 * seleccionado para modificarse actualmente.
                 */
                if(field == DAY)
 800df10:	4b57      	ldr	r3, [pc, #348]	; (800e070 <fm_menu_config_date_hour+0x8f8>)
 800df12:	781b      	ldrb	r3, [r3, #0]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d103      	bne.n	800df20 <fm_menu_config_date_hour+0x7a8>
                {
                    field = MONTH;
 800df18:	4b55      	ldr	r3, [pc, #340]	; (800e070 <fm_menu_config_date_hour+0x8f8>)
 800df1a:	2201      	movs	r2, #1
 800df1c:	701a      	strb	r2, [r3, #0]
 800df1e:	e026      	b.n	800df6e <fm_menu_config_date_hour+0x7f6>
                }
                else if(field == MONTH)
 800df20:	4b53      	ldr	r3, [pc, #332]	; (800e070 <fm_menu_config_date_hour+0x8f8>)
 800df22:	781b      	ldrb	r3, [r3, #0]
 800df24:	2b01      	cmp	r3, #1
 800df26:	d103      	bne.n	800df30 <fm_menu_config_date_hour+0x7b8>
                {
                    field = YEAR;
 800df28:	4b51      	ldr	r3, [pc, #324]	; (800e070 <fm_menu_config_date_hour+0x8f8>)
 800df2a:	2202      	movs	r2, #2
 800df2c:	701a      	strb	r2, [r3, #0]
 800df2e:	e01e      	b.n	800df6e <fm_menu_config_date_hour+0x7f6>
                }
                else if(field == YEAR)
 800df30:	4b4f      	ldr	r3, [pc, #316]	; (800e070 <fm_menu_config_date_hour+0x8f8>)
 800df32:	781b      	ldrb	r3, [r3, #0]
 800df34:	2b02      	cmp	r3, #2
 800df36:	d103      	bne.n	800df40 <fm_menu_config_date_hour+0x7c8>
                {
                    field = HOUR;
 800df38:	4b4d      	ldr	r3, [pc, #308]	; (800e070 <fm_menu_config_date_hour+0x8f8>)
 800df3a:	2203      	movs	r2, #3
 800df3c:	701a      	strb	r2, [r3, #0]
 800df3e:	e016      	b.n	800df6e <fm_menu_config_date_hour+0x7f6>
                }
                else if(field == HOUR)
 800df40:	4b4b      	ldr	r3, [pc, #300]	; (800e070 <fm_menu_config_date_hour+0x8f8>)
 800df42:	781b      	ldrb	r3, [r3, #0]
 800df44:	2b03      	cmp	r3, #3
 800df46:	d103      	bne.n	800df50 <fm_menu_config_date_hour+0x7d8>
                {
                    field = MINUTE;
 800df48:	4b49      	ldr	r3, [pc, #292]	; (800e070 <fm_menu_config_date_hour+0x8f8>)
 800df4a:	2204      	movs	r2, #4
 800df4c:	701a      	strb	r2, [r3, #0]
 800df4e:	e00e      	b.n	800df6e <fm_menu_config_date_hour+0x7f6>
                }
                else if(field == MINUTE)
 800df50:	4b47      	ldr	r3, [pc, #284]	; (800e070 <fm_menu_config_date_hour+0x8f8>)
 800df52:	781b      	ldrb	r3, [r3, #0]
 800df54:	2b04      	cmp	r3, #4
 800df56:	d103      	bne.n	800df60 <fm_menu_config_date_hour+0x7e8>
                {
                    field = SECOND;
 800df58:	4b45      	ldr	r3, [pc, #276]	; (800e070 <fm_menu_config_date_hour+0x8f8>)
 800df5a:	2205      	movs	r2, #5
 800df5c:	701a      	strb	r2, [r3, #0]
 800df5e:	e006      	b.n	800df6e <fm_menu_config_date_hour+0x7f6>
                }
                else if(field == SECOND)
 800df60:	4b43      	ldr	r3, [pc, #268]	; (800e070 <fm_menu_config_date_hour+0x8f8>)
 800df62:	781b      	ldrb	r3, [r3, #0]
 800df64:	2b05      	cmp	r3, #5
 800df66:	d102      	bne.n	800df6e <fm_menu_config_date_hour+0x7f6>
                {
                    field = DAY;
 800df68:	4b41      	ldr	r3, [pc, #260]	; (800e070 <fm_menu_config_date_hour+0x8f8>)
 800df6a:	2200      	movs	r2, #0
 800df6c:	701a      	strb	r2, [r3, #0]
                }
                event_now = EVENT_LCD_REFRESH;
 800df6e:	2301      	movs	r3, #1
 800df70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800df74:	f107 0323 	add.w	r3, r7, #35	; 0x23
 800df78:	2200      	movs	r2, #0
 800df7a:	4619      	mov	r1, r3
 800df7c:	483d      	ldr	r0, [pc, #244]	; (800e074 <fm_menu_config_date_hour+0x8fc>)
 800df7e:	f7fb fc45 	bl	800980c <_txe_queue_send>
            }
        break;
 800df82:	e016      	b.n	800dfb2 <fm_menu_config_date_hour+0x83a>
        case EVENT_KEY_ESC:
            new_exit = 1;
 800df84:	4b3c      	ldr	r3, [pc, #240]	; (800e078 <fm_menu_config_date_hour+0x900>)
 800df86:	2201      	movs	r2, #1
 800df88:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_init;
 800df8a:	4b3c      	ldr	r3, [pc, #240]	; (800e07c <fm_menu_config_date_hour+0x904>)
 800df8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            event_now = EVENT_LCD_REFRESH;
 800df90:	2301      	movs	r3, #1
 800df92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800df96:	f107 0323 	add.w	r3, r7, #35	; 0x23
 800df9a:	2200      	movs	r2, #0
 800df9c:	4619      	mov	r1, r3
 800df9e:	4835      	ldr	r0, [pc, #212]	; (800e074 <fm_menu_config_date_hour+0x8fc>)
 800dfa0:	f7fb fc34 	bl	800980c <_txe_queue_send>
        break;
 800dfa4:	e006      	b.n	800dfb4 <fm_menu_config_date_hour+0x83c>
        default:
        break;
 800dfa6:	bf00      	nop
 800dfa8:	e004      	b.n	800dfb4 <fm_menu_config_date_hour+0x83c>
        break;
 800dfaa:	bf00      	nop
 800dfac:	e002      	b.n	800dfb4 <fm_menu_config_date_hour+0x83c>
        break;
 800dfae:	bf00      	nop
 800dfb0:	e000      	b.n	800dfb4 <fm_menu_config_date_hour+0x83c>
        break;
 800dfb2:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar fecha y hora\n";
 800dfb4:	4b32      	ldr	r3, [pc, #200]	; (800e080 <fm_menu_config_date_hour+0x908>)
 800dfb6:	f107 0408 	add.w	r4, r7, #8
 800dfba:	461d      	mov	r5, r3
 800dfbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dfbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dfc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dfc4:	c403      	stmia	r4!, {r0, r1}
 800dfc6:	7022      	strb	r2, [r4, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 800dfc8:	f107 0308 	add.w	r3, r7, #8
 800dfcc:	2119      	movs	r1, #25
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f7fc f858 	bl	800a084 <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 800dfd4:	4b28      	ldr	r3, [pc, #160]	; (800e078 <fm_menu_config_date_hour+0x900>)
 800dfd6:	781b      	ldrb	r3, [r3, #0]
 800dfd8:	2b01      	cmp	r3, #1
 800dfda:	d140      	bne.n	800e05e <fm_menu_config_date_hour+0x8e6>
    {
        if(correct_password)
 800dfdc:	4b23      	ldr	r3, [pc, #140]	; (800e06c <fm_menu_config_date_hour+0x8f4>)
 800dfde:	781b      	ldrb	r3, [r3, #0]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d036      	beq.n	800e052 <fm_menu_config_date_hour+0x8da>
             * encuentren corrompidos y se lea cualquier cosa. Para mas info de
             * esto ver el link siguiente:
             *
             * http://www.efton.sk/STM32/gotcha/g113.html
             */
            date_final.Date = day_enum;
 800dfe4:	4b27      	ldr	r3, [pc, #156]	; (800e084 <fm_menu_config_date_hour+0x90c>)
 800dfe6:	781b      	ldrb	r3, [r3, #0]
 800dfe8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            date_final.Month = month_enum;
 800dfec:	4b26      	ldr	r3, [pc, #152]	; (800e088 <fm_menu_config_date_hour+0x910>)
 800dfee:	781b      	ldrb	r3, [r3, #0]
 800dff0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            date_final.Year = year_enum;
 800dff4:	4b25      	ldr	r3, [pc, #148]	; (800e08c <fm_menu_config_date_hour+0x914>)
 800dff6:	781b      	ldrb	r3, [r3, #0]
 800dff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            date_final.WeekDay = RTC_WEEKDAY_FRIDAY;
 800dffc:	2305      	movs	r3, #5
 800dffe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

            HAL_RTC_SetDate(&hrtc, &date_final, RTC_FORMAT_BIN);
 800e002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e006:	2200      	movs	r2, #0
 800e008:	4619      	mov	r1, r3
 800e00a:	4821      	ldr	r0, [pc, #132]	; (800e090 <fm_menu_config_date_hour+0x918>)
 800e00c:	f7f6 fd8e 	bl	8004b2c <HAL_RTC_SetDate>

            /*
             * Idem que lo de la fecha escrito arriba, pero para la hora, y en
             * general siempre que se use la HAL completando estructuras.
             */
            time_final.Hours = hour_enum;
 800e010:	4b20      	ldr	r3, [pc, #128]	; (800e094 <fm_menu_config_date_hour+0x91c>)
 800e012:	781b      	ldrb	r3, [r3, #0]
 800e014:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            time_final.Minutes = minute_enum;
 800e018:	4b1f      	ldr	r3, [pc, #124]	; (800e098 <fm_menu_config_date_hour+0x920>)
 800e01a:	781b      	ldrb	r3, [r3, #0]
 800e01c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            time_final.Seconds = second_enum;
 800e020:	4b1e      	ldr	r3, [pc, #120]	; (800e09c <fm_menu_config_date_hour+0x924>)
 800e022:	781b      	ldrb	r3, [r3, #0]
 800e024:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            time_final.SecondFraction = 0;
 800e028:	2300      	movs	r3, #0
 800e02a:	633b      	str	r3, [r7, #48]	; 0x30
            time_final.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800e02c:	2300      	movs	r3, #0
 800e02e:	637b      	str	r3, [r7, #52]	; 0x34
            time_final.StoreOperation = RTC_STOREOPERATION_RESET;
 800e030:	2300      	movs	r3, #0
 800e032:	63bb      	str	r3, [r7, #56]	; 0x38
            time_final.SubSeconds = 0;
 800e034:	2300      	movs	r3, #0
 800e036:	62fb      	str	r3, [r7, #44]	; 0x2c
            time_final.TimeFormat = RTC_HOURFORMAT12_AM;
 800e038:	2300      	movs	r3, #0
 800e03a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            HAL_RTC_SetTime(&hrtc, &time_final, RTC_FORMAT_BIN);
 800e03e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e042:	2200      	movs	r2, #0
 800e044:	4619      	mov	r1, r3
 800e046:	4812      	ldr	r0, [pc, #72]	; (800e090 <fm_menu_config_date_hour+0x918>)
 800e048:	f7f6 fc77 	bl	800493a <HAL_RTC_SetTime>

            correct_password = 0;
 800e04c:	4b07      	ldr	r3, [pc, #28]	; (800e06c <fm_menu_config_date_hour+0x8f4>)
 800e04e:	2200      	movs	r2, #0
 800e050:	701a      	strb	r2, [r3, #0]
        }

        new_entry = 1;
 800e052:	4b13      	ldr	r3, [pc, #76]	; (800e0a0 <fm_menu_config_date_hour+0x928>)
 800e054:	2201      	movs	r2, #1
 800e056:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800e058:	4b07      	ldr	r3, [pc, #28]	; (800e078 <fm_menu_config_date_hour+0x900>)
 800e05a:	2200      	movs	r2, #0
 800e05c:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800e05e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
}
 800e062:	4618      	mov	r0, r3
 800e064:	37d0      	adds	r7, #208	; 0xd0
 800e066:	46bd      	mov	sp, r7
 800e068:	bdb0      	pop	{r4, r5, r7, pc}
 800e06a:	bf00      	nop
 800e06c:	20001a52 	.word	0x20001a52
 800e070:	20001a53 	.word	0x20001a53
 800e074:	20001068 	.word	0x20001068
 800e078:	20001a5a 	.word	0x20001a5a
 800e07c:	0800f34d 	.word	0x0800f34d
 800e080:	08010530 	.word	0x08010530
 800e084:	20001a54 	.word	0x20001a54
 800e088:	20001a55 	.word	0x20001a55
 800e08c:	20001a56 	.word	0x20001a56
 800e090:	20001164 	.word	0x20001164
 800e094:	20001a57 	.word	0x20001a57
 800e098:	20001a58 	.word	0x20001a58
 800e09c:	20001a59 	.word	0x20001a59
 800e0a0:	20000141 	.word	0x20000141

0800e0a4 <fm_menu_config_k_lin_1>:

    return (ret_menu);
}

ptr_ret_menu_t fm_menu_config_k_lin_1(fm_event_t event_id)
{
 800e0a4:	b5b0      	push	{r4, r5, r7, lr}
 800e0a6:	b08c      	sub	sp, #48	; 0x30
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_1;
 800e0ae:	4b4e      	ldr	r3, [pc, #312]	; (800e1e8 <fm_menu_config_k_lin_1+0x144>)
 800e0b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 800e0b2:	4b4e      	ldr	r3, [pc, #312]	; (800e1ec <fm_menu_config_k_lin_1+0x148>)
 800e0b4:	781b      	ldrb	r3, [r3, #0]
 800e0b6:	2b01      	cmp	r3, #1
 800e0b8:	d104      	bne.n	800e0c4 <fm_menu_config_k_lin_1+0x20>
    {
        fm_lcd_clear();
 800e0ba:	f7fc fe64 	bl	800ad86 <fm_lcd_clear>
        new_entry = 0;
 800e0be:	4b4b      	ldr	r3, [pc, #300]	; (800e1ec <fm_menu_config_k_lin_1+0x148>)
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_1, event_id, digit_lin_modify);
 800e0c4:	4b4a      	ldr	r3, [pc, #296]	; (800e1f0 <fm_menu_config_k_lin_1+0x14c>)
 800e0c6:	781a      	ldrb	r2, [r3, #0]
 800e0c8:	79fb      	ldrb	r3, [r7, #7]
 800e0ca:	4619      	mov	r1, r3
 800e0cc:	2001      	movs	r0, #1
 800e0ce:	f7fd f889 	bl	800b1e4 <fm_lcd_k_lin>
    fm_lcd_refresh();
 800e0d2:	f7fd f976 	bl	800b3c2 <fm_lcd_refresh>

    switch (event_id)
 800e0d6:	79fb      	ldrb	r3, [r7, #7]
 800e0d8:	3b02      	subs	r3, #2
 800e0da:	2b03      	cmp	r3, #3
 800e0dc:	d861      	bhi.n	800e1a2 <fm_menu_config_k_lin_1+0xfe>
 800e0de:	a201      	add	r2, pc, #4	; (adr r2, 800e0e4 <fm_menu_config_k_lin_1+0x40>)
 800e0e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0e4:	0800e0f5 	.word	0x0800e0f5
 800e0e8:	0800e11f 	.word	0x0800e11f
 800e0ec:	0800e149 	.word	0x0800e149
 800e0f0:	0800e183 	.word	0x0800e183
    {
        case EVENT_KEY_UP:
            if (correct_password)
 800e0f4:	4b3f      	ldr	r3, [pc, #252]	; (800e1f4 <fm_menu_config_k_lin_1+0x150>)
 800e0f6:	781b      	ldrb	r3, [r3, #0]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d005      	beq.n	800e108 <fm_menu_config_k_lin_1+0x64>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_1);
 800e0fc:	4b3c      	ldr	r3, [pc, #240]	; (800e1f0 <fm_menu_config_k_lin_1+0x14c>)
 800e0fe:	781b      	ldrb	r3, [r3, #0]
 800e100:	2101      	movs	r1, #1
 800e102:	4618      	mov	r0, r3
 800e104:	f7fc fa50 	bl	800a5a8 <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 800e108:	2301      	movs	r3, #1
 800e10a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e10e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e112:	2200      	movs	r2, #0
 800e114:	4619      	mov	r1, r3
 800e116:	4838      	ldr	r0, [pc, #224]	; (800e1f8 <fm_menu_config_k_lin_1+0x154>)
 800e118:	f7fb fb78 	bl	800980c <_txe_queue_send>
        break;
 800e11c:	e042      	b.n	800e1a4 <fm_menu_config_k_lin_1+0x100>
        case EVENT_KEY_DOWN:
            if (correct_password)
 800e11e:	4b35      	ldr	r3, [pc, #212]	; (800e1f4 <fm_menu_config_k_lin_1+0x150>)
 800e120:	781b      	ldrb	r3, [r3, #0]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d005      	beq.n	800e132 <fm_menu_config_k_lin_1+0x8e>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_1);
 800e126:	4b32      	ldr	r3, [pc, #200]	; (800e1f0 <fm_menu_config_k_lin_1+0x14c>)
 800e128:	781b      	ldrb	r3, [r3, #0]
 800e12a:	2101      	movs	r1, #1
 800e12c:	4618      	mov	r0, r3
 800e12e:	f7fc fb27 	bl	800a780 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 800e132:	2301      	movs	r3, #1
 800e134:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e138:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e13c:	2200      	movs	r2, #0
 800e13e:	4619      	mov	r1, r3
 800e140:	482d      	ldr	r0, [pc, #180]	; (800e1f8 <fm_menu_config_k_lin_1+0x154>)
 800e142:	f7fb fb63 	bl	800980c <_txe_queue_send>
        break;
 800e146:	e02d      	b.n	800e1a4 <fm_menu_config_k_lin_1+0x100>
        case EVENT_KEY_ENTER:
            if (correct_password)
 800e148:	4b2a      	ldr	r3, [pc, #168]	; (800e1f4 <fm_menu_config_k_lin_1+0x150>)
 800e14a:	781b      	ldrb	r3, [r3, #0]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d00d      	beq.n	800e16c <fm_menu_config_k_lin_1+0xc8>
            {
                if(digit_lin_modify < DIG_LIN_11)
 800e150:	4b27      	ldr	r3, [pc, #156]	; (800e1f0 <fm_menu_config_k_lin_1+0x14c>)
 800e152:	781b      	ldrb	r3, [r3, #0]
 800e154:	2b0a      	cmp	r3, #10
 800e156:	d806      	bhi.n	800e166 <fm_menu_config_k_lin_1+0xc2>
                {
                    digit_lin_modify++;
 800e158:	4b25      	ldr	r3, [pc, #148]	; (800e1f0 <fm_menu_config_k_lin_1+0x14c>)
 800e15a:	781b      	ldrb	r3, [r3, #0]
 800e15c:	3301      	adds	r3, #1
 800e15e:	b2da      	uxtb	r2, r3
 800e160:	4b23      	ldr	r3, [pc, #140]	; (800e1f0 <fm_menu_config_k_lin_1+0x14c>)
 800e162:	701a      	strb	r2, [r3, #0]
 800e164:	e002      	b.n	800e16c <fm_menu_config_k_lin_1+0xc8>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 800e166:	4b22      	ldr	r3, [pc, #136]	; (800e1f0 <fm_menu_config_k_lin_1+0x14c>)
 800e168:	2200      	movs	r2, #0
 800e16a:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 800e16c:	2301      	movs	r3, #1
 800e16e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e172:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e176:	2200      	movs	r2, #0
 800e178:	4619      	mov	r1, r3
 800e17a:	481f      	ldr	r0, [pc, #124]	; (800e1f8 <fm_menu_config_k_lin_1+0x154>)
 800e17c:	f7fb fb46 	bl	800980c <_txe_queue_send>
        break;
 800e180:	e010      	b.n	800e1a4 <fm_menu_config_k_lin_1+0x100>
        case EVENT_KEY_ESC:
            new_exit = 1;
 800e182:	4b1e      	ldr	r3, [pc, #120]	; (800e1fc <fm_menu_config_k_lin_1+0x158>)
 800e184:	2201      	movs	r2, #1
 800e186:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_2;
 800e188:	4b1d      	ldr	r3, [pc, #116]	; (800e200 <fm_menu_config_k_lin_1+0x15c>)
 800e18a:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 800e18c:	2301      	movs	r3, #1
 800e18e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e192:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e196:	2200      	movs	r2, #0
 800e198:	4619      	mov	r1, r3
 800e19a:	4817      	ldr	r0, [pc, #92]	; (800e1f8 <fm_menu_config_k_lin_1+0x154>)
 800e19c:	f7fb fb36 	bl	800980c <_txe_queue_send>
        break;
 800e1a0:	e000      	b.n	800e1a4 <fm_menu_config_k_lin_1+0x100>
        default:
        break;
 800e1a2:	bf00      	nop
    }

    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar parametro K_lin_1\n";
 800e1a4:	4b17      	ldr	r3, [pc, #92]	; (800e204 <fm_menu_config_k_lin_1+0x160>)
 800e1a6:	f107 040c 	add.w	r4, r7, #12
 800e1aa:	461d      	mov	r5, r3
 800e1ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e1ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e1b0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800e1b4:	c407      	stmia	r4!, {r0, r1, r2}
 800e1b6:	8023      	strh	r3, [r4, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 800e1b8:	f107 030c 	add.w	r3, r7, #12
 800e1bc:	211e      	movs	r1, #30
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f7fb ff60 	bl	800a084 <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 800e1c4:	4b0d      	ldr	r3, [pc, #52]	; (800e1fc <fm_menu_config_k_lin_1+0x158>)
 800e1c6:	781b      	ldrb	r3, [r3, #0]
 800e1c8:	2b01      	cmp	r3, #1
 800e1ca:	d108      	bne.n	800e1de <fm_menu_config_k_lin_1+0x13a>
    {
        digit_lin_modify = DIG_LIN_0;
 800e1cc:	4b08      	ldr	r3, [pc, #32]	; (800e1f0 <fm_menu_config_k_lin_1+0x14c>)
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 800e1d2:	4b06      	ldr	r3, [pc, #24]	; (800e1ec <fm_menu_config_k_lin_1+0x148>)
 800e1d4:	2201      	movs	r2, #1
 800e1d6:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800e1d8:	4b08      	ldr	r3, [pc, #32]	; (800e1fc <fm_menu_config_k_lin_1+0x158>)
 800e1da:	2200      	movs	r2, #0
 800e1dc:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800e1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	3730      	adds	r7, #48	; 0x30
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bdb0      	pop	{r4, r5, r7, pc}
 800e1e8:	0800e0a5 	.word	0x0800e0a5
 800e1ec:	20000142 	.word	0x20000142
 800e1f0:	20001a5b 	.word	0x20001a5b
 800e1f4:	20001a52 	.word	0x20001a52
 800e1f8:	20001068 	.word	0x20001068
 800e1fc:	20001a5c 	.word	0x20001a5c
 800e200:	0800e209 	.word	0x0800e209
 800e204:	0801056c 	.word	0x0801056c

0800e208 <fm_menu_config_k_lin_2>:

ptr_ret_menu_t fm_menu_config_k_lin_2(fm_event_t event_id)
{
 800e208:	b5b0      	push	{r4, r5, r7, lr}
 800e20a:	b08c      	sub	sp, #48	; 0x30
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	4603      	mov	r3, r0
 800e210:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_2;
 800e212:	4b4e      	ldr	r3, [pc, #312]	; (800e34c <fm_menu_config_k_lin_2+0x144>)
 800e214:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 800e216:	4b4e      	ldr	r3, [pc, #312]	; (800e350 <fm_menu_config_k_lin_2+0x148>)
 800e218:	781b      	ldrb	r3, [r3, #0]
 800e21a:	2b01      	cmp	r3, #1
 800e21c:	d104      	bne.n	800e228 <fm_menu_config_k_lin_2+0x20>
    {
        fm_lcd_clear();
 800e21e:	f7fc fdb2 	bl	800ad86 <fm_lcd_clear>
        new_entry = 0;
 800e222:	4b4b      	ldr	r3, [pc, #300]	; (800e350 <fm_menu_config_k_lin_2+0x148>)
 800e224:	2200      	movs	r2, #0
 800e226:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_2, event_id, digit_lin_modify);
 800e228:	4b4a      	ldr	r3, [pc, #296]	; (800e354 <fm_menu_config_k_lin_2+0x14c>)
 800e22a:	781a      	ldrb	r2, [r3, #0]
 800e22c:	79fb      	ldrb	r3, [r7, #7]
 800e22e:	4619      	mov	r1, r3
 800e230:	2002      	movs	r0, #2
 800e232:	f7fc ffd7 	bl	800b1e4 <fm_lcd_k_lin>
    fm_lcd_refresh();
 800e236:	f7fd f8c4 	bl	800b3c2 <fm_lcd_refresh>

    switch (event_id)
 800e23a:	79fb      	ldrb	r3, [r7, #7]
 800e23c:	3b02      	subs	r3, #2
 800e23e:	2b03      	cmp	r3, #3
 800e240:	d861      	bhi.n	800e306 <fm_menu_config_k_lin_2+0xfe>
 800e242:	a201      	add	r2, pc, #4	; (adr r2, 800e248 <fm_menu_config_k_lin_2+0x40>)
 800e244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e248:	0800e259 	.word	0x0800e259
 800e24c:	0800e283 	.word	0x0800e283
 800e250:	0800e2ad 	.word	0x0800e2ad
 800e254:	0800e2e7 	.word	0x0800e2e7
    {
        case EVENT_KEY_UP:
            if (correct_password)
 800e258:	4b3f      	ldr	r3, [pc, #252]	; (800e358 <fm_menu_config_k_lin_2+0x150>)
 800e25a:	781b      	ldrb	r3, [r3, #0]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d005      	beq.n	800e26c <fm_menu_config_k_lin_2+0x64>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_2);
 800e260:	4b3c      	ldr	r3, [pc, #240]	; (800e354 <fm_menu_config_k_lin_2+0x14c>)
 800e262:	781b      	ldrb	r3, [r3, #0]
 800e264:	2102      	movs	r1, #2
 800e266:	4618      	mov	r0, r3
 800e268:	f7fc f99e 	bl	800a5a8 <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 800e26c:	2301      	movs	r3, #1
 800e26e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e272:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e276:	2200      	movs	r2, #0
 800e278:	4619      	mov	r1, r3
 800e27a:	4838      	ldr	r0, [pc, #224]	; (800e35c <fm_menu_config_k_lin_2+0x154>)
 800e27c:	f7fb fac6 	bl	800980c <_txe_queue_send>
        break;
 800e280:	e042      	b.n	800e308 <fm_menu_config_k_lin_2+0x100>
        case EVENT_KEY_DOWN:
            if (correct_password)
 800e282:	4b35      	ldr	r3, [pc, #212]	; (800e358 <fm_menu_config_k_lin_2+0x150>)
 800e284:	781b      	ldrb	r3, [r3, #0]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d005      	beq.n	800e296 <fm_menu_config_k_lin_2+0x8e>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_2);
 800e28a:	4b32      	ldr	r3, [pc, #200]	; (800e354 <fm_menu_config_k_lin_2+0x14c>)
 800e28c:	781b      	ldrb	r3, [r3, #0]
 800e28e:	2102      	movs	r1, #2
 800e290:	4618      	mov	r0, r3
 800e292:	f7fc fa75 	bl	800a780 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 800e296:	2301      	movs	r3, #1
 800e298:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e29c:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	4619      	mov	r1, r3
 800e2a4:	482d      	ldr	r0, [pc, #180]	; (800e35c <fm_menu_config_k_lin_2+0x154>)
 800e2a6:	f7fb fab1 	bl	800980c <_txe_queue_send>
        break;
 800e2aa:	e02d      	b.n	800e308 <fm_menu_config_k_lin_2+0x100>
        case EVENT_KEY_ENTER:
            if (correct_password)
 800e2ac:	4b2a      	ldr	r3, [pc, #168]	; (800e358 <fm_menu_config_k_lin_2+0x150>)
 800e2ae:	781b      	ldrb	r3, [r3, #0]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d00d      	beq.n	800e2d0 <fm_menu_config_k_lin_2+0xc8>
            {
                if(digit_lin_modify < DIG_LIN_11)
 800e2b4:	4b27      	ldr	r3, [pc, #156]	; (800e354 <fm_menu_config_k_lin_2+0x14c>)
 800e2b6:	781b      	ldrb	r3, [r3, #0]
 800e2b8:	2b0a      	cmp	r3, #10
 800e2ba:	d806      	bhi.n	800e2ca <fm_menu_config_k_lin_2+0xc2>
                {
                    digit_lin_modify++;
 800e2bc:	4b25      	ldr	r3, [pc, #148]	; (800e354 <fm_menu_config_k_lin_2+0x14c>)
 800e2be:	781b      	ldrb	r3, [r3, #0]
 800e2c0:	3301      	adds	r3, #1
 800e2c2:	b2da      	uxtb	r2, r3
 800e2c4:	4b23      	ldr	r3, [pc, #140]	; (800e354 <fm_menu_config_k_lin_2+0x14c>)
 800e2c6:	701a      	strb	r2, [r3, #0]
 800e2c8:	e002      	b.n	800e2d0 <fm_menu_config_k_lin_2+0xc8>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 800e2ca:	4b22      	ldr	r3, [pc, #136]	; (800e354 <fm_menu_config_k_lin_2+0x14c>)
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 800e2d0:	2301      	movs	r3, #1
 800e2d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e2d6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e2da:	2200      	movs	r2, #0
 800e2dc:	4619      	mov	r1, r3
 800e2de:	481f      	ldr	r0, [pc, #124]	; (800e35c <fm_menu_config_k_lin_2+0x154>)
 800e2e0:	f7fb fa94 	bl	800980c <_txe_queue_send>
        break;
 800e2e4:	e010      	b.n	800e308 <fm_menu_config_k_lin_2+0x100>
        case EVENT_KEY_ESC:
            new_exit = 1;
 800e2e6:	4b1e      	ldr	r3, [pc, #120]	; (800e360 <fm_menu_config_k_lin_2+0x158>)
 800e2e8:	2201      	movs	r2, #1
 800e2ea:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_3;
 800e2ec:	4b1d      	ldr	r3, [pc, #116]	; (800e364 <fm_menu_config_k_lin_2+0x15c>)
 800e2ee:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 800e2f0:	2301      	movs	r3, #1
 800e2f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e2f6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	4619      	mov	r1, r3
 800e2fe:	4817      	ldr	r0, [pc, #92]	; (800e35c <fm_menu_config_k_lin_2+0x154>)
 800e300:	f7fb fa84 	bl	800980c <_txe_queue_send>
        break;
 800e304:	e000      	b.n	800e308 <fm_menu_config_k_lin_2+0x100>
        default:
        break;
 800e306:	bf00      	nop
    }

    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar parametro K_lin_2\n";
 800e308:	4b17      	ldr	r3, [pc, #92]	; (800e368 <fm_menu_config_k_lin_2+0x160>)
 800e30a:	f107 040c 	add.w	r4, r7, #12
 800e30e:	461d      	mov	r5, r3
 800e310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e314:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800e318:	c407      	stmia	r4!, {r0, r1, r2}
 800e31a:	8023      	strh	r3, [r4, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 800e31c:	f107 030c 	add.w	r3, r7, #12
 800e320:	211e      	movs	r1, #30
 800e322:	4618      	mov	r0, r3
 800e324:	f7fb feae 	bl	800a084 <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 800e328:	4b0d      	ldr	r3, [pc, #52]	; (800e360 <fm_menu_config_k_lin_2+0x158>)
 800e32a:	781b      	ldrb	r3, [r3, #0]
 800e32c:	2b01      	cmp	r3, #1
 800e32e:	d108      	bne.n	800e342 <fm_menu_config_k_lin_2+0x13a>
    {
        digit_lin_modify = DIG_LIN_0;
 800e330:	4b08      	ldr	r3, [pc, #32]	; (800e354 <fm_menu_config_k_lin_2+0x14c>)
 800e332:	2200      	movs	r2, #0
 800e334:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 800e336:	4b06      	ldr	r3, [pc, #24]	; (800e350 <fm_menu_config_k_lin_2+0x148>)
 800e338:	2201      	movs	r2, #1
 800e33a:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800e33c:	4b08      	ldr	r3, [pc, #32]	; (800e360 <fm_menu_config_k_lin_2+0x158>)
 800e33e:	2200      	movs	r2, #0
 800e340:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800e342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e344:	4618      	mov	r0, r3
 800e346:	3730      	adds	r7, #48	; 0x30
 800e348:	46bd      	mov	sp, r7
 800e34a:	bdb0      	pop	{r4, r5, r7, pc}
 800e34c:	0800e209 	.word	0x0800e209
 800e350:	20000143 	.word	0x20000143
 800e354:	20001a5d 	.word	0x20001a5d
 800e358:	20001a52 	.word	0x20001a52
 800e35c:	20001068 	.word	0x20001068
 800e360:	20001a5e 	.word	0x20001a5e
 800e364:	0800e36d 	.word	0x0800e36d
 800e368:	0801058c 	.word	0x0801058c

0800e36c <fm_menu_config_k_lin_3>:

ptr_ret_menu_t fm_menu_config_k_lin_3(fm_event_t event_id)
{
 800e36c:	b5b0      	push	{r4, r5, r7, lr}
 800e36e:	b08c      	sub	sp, #48	; 0x30
 800e370:	af00      	add	r7, sp, #0
 800e372:	4603      	mov	r3, r0
 800e374:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_3;
 800e376:	4b4e      	ldr	r3, [pc, #312]	; (800e4b0 <fm_menu_config_k_lin_3+0x144>)
 800e378:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 800e37a:	4b4e      	ldr	r3, [pc, #312]	; (800e4b4 <fm_menu_config_k_lin_3+0x148>)
 800e37c:	781b      	ldrb	r3, [r3, #0]
 800e37e:	2b01      	cmp	r3, #1
 800e380:	d104      	bne.n	800e38c <fm_menu_config_k_lin_3+0x20>
    {
        fm_lcd_clear();
 800e382:	f7fc fd00 	bl	800ad86 <fm_lcd_clear>
        new_entry = 0;
 800e386:	4b4b      	ldr	r3, [pc, #300]	; (800e4b4 <fm_menu_config_k_lin_3+0x148>)
 800e388:	2200      	movs	r2, #0
 800e38a:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_3, event_id, digit_lin_modify);
 800e38c:	4b4a      	ldr	r3, [pc, #296]	; (800e4b8 <fm_menu_config_k_lin_3+0x14c>)
 800e38e:	781a      	ldrb	r2, [r3, #0]
 800e390:	79fb      	ldrb	r3, [r7, #7]
 800e392:	4619      	mov	r1, r3
 800e394:	2003      	movs	r0, #3
 800e396:	f7fc ff25 	bl	800b1e4 <fm_lcd_k_lin>
    fm_lcd_refresh();
 800e39a:	f7fd f812 	bl	800b3c2 <fm_lcd_refresh>

    switch (event_id)
 800e39e:	79fb      	ldrb	r3, [r7, #7]
 800e3a0:	3b02      	subs	r3, #2
 800e3a2:	2b03      	cmp	r3, #3
 800e3a4:	d861      	bhi.n	800e46a <fm_menu_config_k_lin_3+0xfe>
 800e3a6:	a201      	add	r2, pc, #4	; (adr r2, 800e3ac <fm_menu_config_k_lin_3+0x40>)
 800e3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3ac:	0800e3bd 	.word	0x0800e3bd
 800e3b0:	0800e3e7 	.word	0x0800e3e7
 800e3b4:	0800e411 	.word	0x0800e411
 800e3b8:	0800e44b 	.word	0x0800e44b
    {
        case EVENT_KEY_UP:
            if (correct_password)
 800e3bc:	4b3f      	ldr	r3, [pc, #252]	; (800e4bc <fm_menu_config_k_lin_3+0x150>)
 800e3be:	781b      	ldrb	r3, [r3, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d005      	beq.n	800e3d0 <fm_menu_config_k_lin_3+0x64>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_3);
 800e3c4:	4b3c      	ldr	r3, [pc, #240]	; (800e4b8 <fm_menu_config_k_lin_3+0x14c>)
 800e3c6:	781b      	ldrb	r3, [r3, #0]
 800e3c8:	2103      	movs	r1, #3
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f7fc f8ec 	bl	800a5a8 <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e3d6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e3da:	2200      	movs	r2, #0
 800e3dc:	4619      	mov	r1, r3
 800e3de:	4838      	ldr	r0, [pc, #224]	; (800e4c0 <fm_menu_config_k_lin_3+0x154>)
 800e3e0:	f7fb fa14 	bl	800980c <_txe_queue_send>
        break;
 800e3e4:	e042      	b.n	800e46c <fm_menu_config_k_lin_3+0x100>
        case EVENT_KEY_DOWN:
            if (correct_password)
 800e3e6:	4b35      	ldr	r3, [pc, #212]	; (800e4bc <fm_menu_config_k_lin_3+0x150>)
 800e3e8:	781b      	ldrb	r3, [r3, #0]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d005      	beq.n	800e3fa <fm_menu_config_k_lin_3+0x8e>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_3);
 800e3ee:	4b32      	ldr	r3, [pc, #200]	; (800e4b8 <fm_menu_config_k_lin_3+0x14c>)
 800e3f0:	781b      	ldrb	r3, [r3, #0]
 800e3f2:	2103      	movs	r1, #3
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	f7fc f9c3 	bl	800a780 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 800e3fa:	2301      	movs	r3, #1
 800e3fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e400:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e404:	2200      	movs	r2, #0
 800e406:	4619      	mov	r1, r3
 800e408:	482d      	ldr	r0, [pc, #180]	; (800e4c0 <fm_menu_config_k_lin_3+0x154>)
 800e40a:	f7fb f9ff 	bl	800980c <_txe_queue_send>
        break;
 800e40e:	e02d      	b.n	800e46c <fm_menu_config_k_lin_3+0x100>
        case EVENT_KEY_ENTER:
            if (correct_password)
 800e410:	4b2a      	ldr	r3, [pc, #168]	; (800e4bc <fm_menu_config_k_lin_3+0x150>)
 800e412:	781b      	ldrb	r3, [r3, #0]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d00d      	beq.n	800e434 <fm_menu_config_k_lin_3+0xc8>
            {
                if(digit_lin_modify < DIG_LIN_11)
 800e418:	4b27      	ldr	r3, [pc, #156]	; (800e4b8 <fm_menu_config_k_lin_3+0x14c>)
 800e41a:	781b      	ldrb	r3, [r3, #0]
 800e41c:	2b0a      	cmp	r3, #10
 800e41e:	d806      	bhi.n	800e42e <fm_menu_config_k_lin_3+0xc2>
                {
                    digit_lin_modify++;
 800e420:	4b25      	ldr	r3, [pc, #148]	; (800e4b8 <fm_menu_config_k_lin_3+0x14c>)
 800e422:	781b      	ldrb	r3, [r3, #0]
 800e424:	3301      	adds	r3, #1
 800e426:	b2da      	uxtb	r2, r3
 800e428:	4b23      	ldr	r3, [pc, #140]	; (800e4b8 <fm_menu_config_k_lin_3+0x14c>)
 800e42a:	701a      	strb	r2, [r3, #0]
 800e42c:	e002      	b.n	800e434 <fm_menu_config_k_lin_3+0xc8>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 800e42e:	4b22      	ldr	r3, [pc, #136]	; (800e4b8 <fm_menu_config_k_lin_3+0x14c>)
 800e430:	2200      	movs	r2, #0
 800e432:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 800e434:	2301      	movs	r3, #1
 800e436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e43a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e43e:	2200      	movs	r2, #0
 800e440:	4619      	mov	r1, r3
 800e442:	481f      	ldr	r0, [pc, #124]	; (800e4c0 <fm_menu_config_k_lin_3+0x154>)
 800e444:	f7fb f9e2 	bl	800980c <_txe_queue_send>
        break;
 800e448:	e010      	b.n	800e46c <fm_menu_config_k_lin_3+0x100>
        case EVENT_KEY_ESC:
            new_exit = 1;
 800e44a:	4b1e      	ldr	r3, [pc, #120]	; (800e4c4 <fm_menu_config_k_lin_3+0x158>)
 800e44c:	2201      	movs	r2, #1
 800e44e:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_4;
 800e450:	4b1d      	ldr	r3, [pc, #116]	; (800e4c8 <fm_menu_config_k_lin_3+0x15c>)
 800e452:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 800e454:	2301      	movs	r3, #1
 800e456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e45a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e45e:	2200      	movs	r2, #0
 800e460:	4619      	mov	r1, r3
 800e462:	4817      	ldr	r0, [pc, #92]	; (800e4c0 <fm_menu_config_k_lin_3+0x154>)
 800e464:	f7fb f9d2 	bl	800980c <_txe_queue_send>
        break;
 800e468:	e000      	b.n	800e46c <fm_menu_config_k_lin_3+0x100>
        default:
        break;
 800e46a:	bf00      	nop
    }

    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar parametro K_lin_3\n";
 800e46c:	4b17      	ldr	r3, [pc, #92]	; (800e4cc <fm_menu_config_k_lin_3+0x160>)
 800e46e:	f107 040c 	add.w	r4, r7, #12
 800e472:	461d      	mov	r5, r3
 800e474:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e476:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e478:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800e47c:	c407      	stmia	r4!, {r0, r1, r2}
 800e47e:	8023      	strh	r3, [r4, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 800e480:	f107 030c 	add.w	r3, r7, #12
 800e484:	211e      	movs	r1, #30
 800e486:	4618      	mov	r0, r3
 800e488:	f7fb fdfc 	bl	800a084 <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 800e48c:	4b0d      	ldr	r3, [pc, #52]	; (800e4c4 <fm_menu_config_k_lin_3+0x158>)
 800e48e:	781b      	ldrb	r3, [r3, #0]
 800e490:	2b01      	cmp	r3, #1
 800e492:	d108      	bne.n	800e4a6 <fm_menu_config_k_lin_3+0x13a>
    {
        digit_lin_modify = DIG_LIN_0;
 800e494:	4b08      	ldr	r3, [pc, #32]	; (800e4b8 <fm_menu_config_k_lin_3+0x14c>)
 800e496:	2200      	movs	r2, #0
 800e498:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 800e49a:	4b06      	ldr	r3, [pc, #24]	; (800e4b4 <fm_menu_config_k_lin_3+0x148>)
 800e49c:	2201      	movs	r2, #1
 800e49e:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800e4a0:	4b08      	ldr	r3, [pc, #32]	; (800e4c4 <fm_menu_config_k_lin_3+0x158>)
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800e4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	3730      	adds	r7, #48	; 0x30
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bdb0      	pop	{r4, r5, r7, pc}
 800e4b0:	0800e36d 	.word	0x0800e36d
 800e4b4:	20000144 	.word	0x20000144
 800e4b8:	20001a5f 	.word	0x20001a5f
 800e4bc:	20001a52 	.word	0x20001a52
 800e4c0:	20001068 	.word	0x20001068
 800e4c4:	20001a60 	.word	0x20001a60
 800e4c8:	0800e4d1 	.word	0x0800e4d1
 800e4cc:	080105ac 	.word	0x080105ac

0800e4d0 <fm_menu_config_k_lin_4>:

ptr_ret_menu_t fm_menu_config_k_lin_4(fm_event_t event_id)
{
 800e4d0:	b5b0      	push	{r4, r5, r7, lr}
 800e4d2:	b08c      	sub	sp, #48	; 0x30
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_4;
 800e4da:	4b4e      	ldr	r3, [pc, #312]	; (800e614 <fm_menu_config_k_lin_4+0x144>)
 800e4dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 800e4de:	4b4e      	ldr	r3, [pc, #312]	; (800e618 <fm_menu_config_k_lin_4+0x148>)
 800e4e0:	781b      	ldrb	r3, [r3, #0]
 800e4e2:	2b01      	cmp	r3, #1
 800e4e4:	d104      	bne.n	800e4f0 <fm_menu_config_k_lin_4+0x20>
    {
        fm_lcd_clear();
 800e4e6:	f7fc fc4e 	bl	800ad86 <fm_lcd_clear>
        new_entry = 0;
 800e4ea:	4b4b      	ldr	r3, [pc, #300]	; (800e618 <fm_menu_config_k_lin_4+0x148>)
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_4, event_id, digit_lin_modify);
 800e4f0:	4b4a      	ldr	r3, [pc, #296]	; (800e61c <fm_menu_config_k_lin_4+0x14c>)
 800e4f2:	781a      	ldrb	r2, [r3, #0]
 800e4f4:	79fb      	ldrb	r3, [r7, #7]
 800e4f6:	4619      	mov	r1, r3
 800e4f8:	2004      	movs	r0, #4
 800e4fa:	f7fc fe73 	bl	800b1e4 <fm_lcd_k_lin>
    fm_lcd_refresh();
 800e4fe:	f7fc ff60 	bl	800b3c2 <fm_lcd_refresh>

    switch (event_id)
 800e502:	79fb      	ldrb	r3, [r7, #7]
 800e504:	3b02      	subs	r3, #2
 800e506:	2b03      	cmp	r3, #3
 800e508:	d861      	bhi.n	800e5ce <fm_menu_config_k_lin_4+0xfe>
 800e50a:	a201      	add	r2, pc, #4	; (adr r2, 800e510 <fm_menu_config_k_lin_4+0x40>)
 800e50c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e510:	0800e521 	.word	0x0800e521
 800e514:	0800e54b 	.word	0x0800e54b
 800e518:	0800e575 	.word	0x0800e575
 800e51c:	0800e5af 	.word	0x0800e5af
    {
        case EVENT_KEY_UP:
            if (correct_password)
 800e520:	4b3f      	ldr	r3, [pc, #252]	; (800e620 <fm_menu_config_k_lin_4+0x150>)
 800e522:	781b      	ldrb	r3, [r3, #0]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d005      	beq.n	800e534 <fm_menu_config_k_lin_4+0x64>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_4);
 800e528:	4b3c      	ldr	r3, [pc, #240]	; (800e61c <fm_menu_config_k_lin_4+0x14c>)
 800e52a:	781b      	ldrb	r3, [r3, #0]
 800e52c:	2104      	movs	r1, #4
 800e52e:	4618      	mov	r0, r3
 800e530:	f7fc f83a 	bl	800a5a8 <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 800e534:	2301      	movs	r3, #1
 800e536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e53a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e53e:	2200      	movs	r2, #0
 800e540:	4619      	mov	r1, r3
 800e542:	4838      	ldr	r0, [pc, #224]	; (800e624 <fm_menu_config_k_lin_4+0x154>)
 800e544:	f7fb f962 	bl	800980c <_txe_queue_send>
        break;
 800e548:	e042      	b.n	800e5d0 <fm_menu_config_k_lin_4+0x100>
        case EVENT_KEY_DOWN:
            if (correct_password)
 800e54a:	4b35      	ldr	r3, [pc, #212]	; (800e620 <fm_menu_config_k_lin_4+0x150>)
 800e54c:	781b      	ldrb	r3, [r3, #0]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d005      	beq.n	800e55e <fm_menu_config_k_lin_4+0x8e>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_4);
 800e552:	4b32      	ldr	r3, [pc, #200]	; (800e61c <fm_menu_config_k_lin_4+0x14c>)
 800e554:	781b      	ldrb	r3, [r3, #0]
 800e556:	2104      	movs	r1, #4
 800e558:	4618      	mov	r0, r3
 800e55a:	f7fc f911 	bl	800a780 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 800e55e:	2301      	movs	r3, #1
 800e560:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e564:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e568:	2200      	movs	r2, #0
 800e56a:	4619      	mov	r1, r3
 800e56c:	482d      	ldr	r0, [pc, #180]	; (800e624 <fm_menu_config_k_lin_4+0x154>)
 800e56e:	f7fb f94d 	bl	800980c <_txe_queue_send>
        break;
 800e572:	e02d      	b.n	800e5d0 <fm_menu_config_k_lin_4+0x100>
        case EVENT_KEY_ENTER:
            if (correct_password)
 800e574:	4b2a      	ldr	r3, [pc, #168]	; (800e620 <fm_menu_config_k_lin_4+0x150>)
 800e576:	781b      	ldrb	r3, [r3, #0]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d00d      	beq.n	800e598 <fm_menu_config_k_lin_4+0xc8>
            {
                if(digit_lin_modify < DIG_LIN_11)
 800e57c:	4b27      	ldr	r3, [pc, #156]	; (800e61c <fm_menu_config_k_lin_4+0x14c>)
 800e57e:	781b      	ldrb	r3, [r3, #0]
 800e580:	2b0a      	cmp	r3, #10
 800e582:	d806      	bhi.n	800e592 <fm_menu_config_k_lin_4+0xc2>
                {
                    digit_lin_modify++;
 800e584:	4b25      	ldr	r3, [pc, #148]	; (800e61c <fm_menu_config_k_lin_4+0x14c>)
 800e586:	781b      	ldrb	r3, [r3, #0]
 800e588:	3301      	adds	r3, #1
 800e58a:	b2da      	uxtb	r2, r3
 800e58c:	4b23      	ldr	r3, [pc, #140]	; (800e61c <fm_menu_config_k_lin_4+0x14c>)
 800e58e:	701a      	strb	r2, [r3, #0]
 800e590:	e002      	b.n	800e598 <fm_menu_config_k_lin_4+0xc8>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 800e592:	4b22      	ldr	r3, [pc, #136]	; (800e61c <fm_menu_config_k_lin_4+0x14c>)
 800e594:	2200      	movs	r2, #0
 800e596:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 800e598:	2301      	movs	r3, #1
 800e59a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e59e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	4619      	mov	r1, r3
 800e5a6:	481f      	ldr	r0, [pc, #124]	; (800e624 <fm_menu_config_k_lin_4+0x154>)
 800e5a8:	f7fb f930 	bl	800980c <_txe_queue_send>
        break;
 800e5ac:	e010      	b.n	800e5d0 <fm_menu_config_k_lin_4+0x100>
        case EVENT_KEY_ESC:
            new_exit = 1;
 800e5ae:	4b1e      	ldr	r3, [pc, #120]	; (800e628 <fm_menu_config_k_lin_4+0x158>)
 800e5b0:	2201      	movs	r2, #1
 800e5b2:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_5;
 800e5b4:	4b1d      	ldr	r3, [pc, #116]	; (800e62c <fm_menu_config_k_lin_4+0x15c>)
 800e5b6:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 800e5b8:	2301      	movs	r3, #1
 800e5ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e5be:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	4619      	mov	r1, r3
 800e5c6:	4817      	ldr	r0, [pc, #92]	; (800e624 <fm_menu_config_k_lin_4+0x154>)
 800e5c8:	f7fb f920 	bl	800980c <_txe_queue_send>
        break;
 800e5cc:	e000      	b.n	800e5d0 <fm_menu_config_k_lin_4+0x100>
        default:
        break;
 800e5ce:	bf00      	nop
    }

    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar parametro K_lin_4\n";
 800e5d0:	4b17      	ldr	r3, [pc, #92]	; (800e630 <fm_menu_config_k_lin_4+0x160>)
 800e5d2:	f107 040c 	add.w	r4, r7, #12
 800e5d6:	461d      	mov	r5, r3
 800e5d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e5da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e5dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800e5e0:	c407      	stmia	r4!, {r0, r1, r2}
 800e5e2:	8023      	strh	r3, [r4, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 800e5e4:	f107 030c 	add.w	r3, r7, #12
 800e5e8:	211e      	movs	r1, #30
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f7fb fd4a 	bl	800a084 <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 800e5f0:	4b0d      	ldr	r3, [pc, #52]	; (800e628 <fm_menu_config_k_lin_4+0x158>)
 800e5f2:	781b      	ldrb	r3, [r3, #0]
 800e5f4:	2b01      	cmp	r3, #1
 800e5f6:	d108      	bne.n	800e60a <fm_menu_config_k_lin_4+0x13a>
    {
        digit_lin_modify = DIG_LIN_0;
 800e5f8:	4b08      	ldr	r3, [pc, #32]	; (800e61c <fm_menu_config_k_lin_4+0x14c>)
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 800e5fe:	4b06      	ldr	r3, [pc, #24]	; (800e618 <fm_menu_config_k_lin_4+0x148>)
 800e600:	2201      	movs	r2, #1
 800e602:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800e604:	4b08      	ldr	r3, [pc, #32]	; (800e628 <fm_menu_config_k_lin_4+0x158>)
 800e606:	2200      	movs	r2, #0
 800e608:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800e60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	3730      	adds	r7, #48	; 0x30
 800e610:	46bd      	mov	sp, r7
 800e612:	bdb0      	pop	{r4, r5, r7, pc}
 800e614:	0800e4d1 	.word	0x0800e4d1
 800e618:	20000145 	.word	0x20000145
 800e61c:	20001a61 	.word	0x20001a61
 800e620:	20001a52 	.word	0x20001a52
 800e624:	20001068 	.word	0x20001068
 800e628:	20001a62 	.word	0x20001a62
 800e62c:	0800e635 	.word	0x0800e635
 800e630:	080105cc 	.word	0x080105cc

0800e634 <fm_menu_config_k_lin_5>:

ptr_ret_menu_t fm_menu_config_k_lin_5(fm_event_t event_id)
{
 800e634:	b5b0      	push	{r4, r5, r7, lr}
 800e636:	b08c      	sub	sp, #48	; 0x30
 800e638:	af00      	add	r7, sp, #0
 800e63a:	4603      	mov	r3, r0
 800e63c:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_5;
 800e63e:	4b4e      	ldr	r3, [pc, #312]	; (800e778 <fm_menu_config_k_lin_5+0x144>)
 800e640:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 800e642:	4b4e      	ldr	r3, [pc, #312]	; (800e77c <fm_menu_config_k_lin_5+0x148>)
 800e644:	781b      	ldrb	r3, [r3, #0]
 800e646:	2b01      	cmp	r3, #1
 800e648:	d104      	bne.n	800e654 <fm_menu_config_k_lin_5+0x20>
    {
        fm_lcd_clear();
 800e64a:	f7fc fb9c 	bl	800ad86 <fm_lcd_clear>
        new_entry = 0;
 800e64e:	4b4b      	ldr	r3, [pc, #300]	; (800e77c <fm_menu_config_k_lin_5+0x148>)
 800e650:	2200      	movs	r2, #0
 800e652:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_5, event_id, digit_lin_modify);
 800e654:	4b4a      	ldr	r3, [pc, #296]	; (800e780 <fm_menu_config_k_lin_5+0x14c>)
 800e656:	781a      	ldrb	r2, [r3, #0]
 800e658:	79fb      	ldrb	r3, [r7, #7]
 800e65a:	4619      	mov	r1, r3
 800e65c:	2005      	movs	r0, #5
 800e65e:	f7fc fdc1 	bl	800b1e4 <fm_lcd_k_lin>
    fm_lcd_refresh();
 800e662:	f7fc feae 	bl	800b3c2 <fm_lcd_refresh>

    switch (event_id)
 800e666:	79fb      	ldrb	r3, [r7, #7]
 800e668:	3b02      	subs	r3, #2
 800e66a:	2b03      	cmp	r3, #3
 800e66c:	d861      	bhi.n	800e732 <fm_menu_config_k_lin_5+0xfe>
 800e66e:	a201      	add	r2, pc, #4	; (adr r2, 800e674 <fm_menu_config_k_lin_5+0x40>)
 800e670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e674:	0800e685 	.word	0x0800e685
 800e678:	0800e6af 	.word	0x0800e6af
 800e67c:	0800e6d9 	.word	0x0800e6d9
 800e680:	0800e713 	.word	0x0800e713
    {
        case EVENT_KEY_UP:
            if (correct_password)
 800e684:	4b3f      	ldr	r3, [pc, #252]	; (800e784 <fm_menu_config_k_lin_5+0x150>)
 800e686:	781b      	ldrb	r3, [r3, #0]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d005      	beq.n	800e698 <fm_menu_config_k_lin_5+0x64>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_5);
 800e68c:	4b3c      	ldr	r3, [pc, #240]	; (800e780 <fm_menu_config_k_lin_5+0x14c>)
 800e68e:	781b      	ldrb	r3, [r3, #0]
 800e690:	2105      	movs	r1, #5
 800e692:	4618      	mov	r0, r3
 800e694:	f7fb ff88 	bl	800a5a8 <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 800e698:	2301      	movs	r3, #1
 800e69a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e69e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	4619      	mov	r1, r3
 800e6a6:	4838      	ldr	r0, [pc, #224]	; (800e788 <fm_menu_config_k_lin_5+0x154>)
 800e6a8:	f7fb f8b0 	bl	800980c <_txe_queue_send>
        break;
 800e6ac:	e042      	b.n	800e734 <fm_menu_config_k_lin_5+0x100>
        case EVENT_KEY_DOWN:
            if (correct_password)
 800e6ae:	4b35      	ldr	r3, [pc, #212]	; (800e784 <fm_menu_config_k_lin_5+0x150>)
 800e6b0:	781b      	ldrb	r3, [r3, #0]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d005      	beq.n	800e6c2 <fm_menu_config_k_lin_5+0x8e>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_5);
 800e6b6:	4b32      	ldr	r3, [pc, #200]	; (800e780 <fm_menu_config_k_lin_5+0x14c>)
 800e6b8:	781b      	ldrb	r3, [r3, #0]
 800e6ba:	2105      	movs	r1, #5
 800e6bc:	4618      	mov	r0, r3
 800e6be:	f7fc f85f 	bl	800a780 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 800e6c2:	2301      	movs	r3, #1
 800e6c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e6c8:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	4619      	mov	r1, r3
 800e6d0:	482d      	ldr	r0, [pc, #180]	; (800e788 <fm_menu_config_k_lin_5+0x154>)
 800e6d2:	f7fb f89b 	bl	800980c <_txe_queue_send>
        break;
 800e6d6:	e02d      	b.n	800e734 <fm_menu_config_k_lin_5+0x100>
        case EVENT_KEY_ENTER:
            if (correct_password)
 800e6d8:	4b2a      	ldr	r3, [pc, #168]	; (800e784 <fm_menu_config_k_lin_5+0x150>)
 800e6da:	781b      	ldrb	r3, [r3, #0]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d00d      	beq.n	800e6fc <fm_menu_config_k_lin_5+0xc8>
            {
                if(digit_lin_modify < DIG_LIN_11)
 800e6e0:	4b27      	ldr	r3, [pc, #156]	; (800e780 <fm_menu_config_k_lin_5+0x14c>)
 800e6e2:	781b      	ldrb	r3, [r3, #0]
 800e6e4:	2b0a      	cmp	r3, #10
 800e6e6:	d806      	bhi.n	800e6f6 <fm_menu_config_k_lin_5+0xc2>
                {
                    digit_lin_modify++;
 800e6e8:	4b25      	ldr	r3, [pc, #148]	; (800e780 <fm_menu_config_k_lin_5+0x14c>)
 800e6ea:	781b      	ldrb	r3, [r3, #0]
 800e6ec:	3301      	adds	r3, #1
 800e6ee:	b2da      	uxtb	r2, r3
 800e6f0:	4b23      	ldr	r3, [pc, #140]	; (800e780 <fm_menu_config_k_lin_5+0x14c>)
 800e6f2:	701a      	strb	r2, [r3, #0]
 800e6f4:	e002      	b.n	800e6fc <fm_menu_config_k_lin_5+0xc8>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 800e6f6:	4b22      	ldr	r3, [pc, #136]	; (800e780 <fm_menu_config_k_lin_5+0x14c>)
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 800e6fc:	2301      	movs	r3, #1
 800e6fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e702:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e706:	2200      	movs	r2, #0
 800e708:	4619      	mov	r1, r3
 800e70a:	481f      	ldr	r0, [pc, #124]	; (800e788 <fm_menu_config_k_lin_5+0x154>)
 800e70c:	f7fb f87e 	bl	800980c <_txe_queue_send>
        break;
 800e710:	e010      	b.n	800e734 <fm_menu_config_k_lin_5+0x100>
        case EVENT_KEY_ESC:
            new_exit = 1;
 800e712:	4b1e      	ldr	r3, [pc, #120]	; (800e78c <fm_menu_config_k_lin_5+0x158>)
 800e714:	2201      	movs	r2, #1
 800e716:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_units_vol;
 800e718:	4b1d      	ldr	r3, [pc, #116]	; (800e790 <fm_menu_config_k_lin_5+0x15c>)
 800e71a:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 800e71c:	2301      	movs	r3, #1
 800e71e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e722:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e726:	2200      	movs	r2, #0
 800e728:	4619      	mov	r1, r3
 800e72a:	4817      	ldr	r0, [pc, #92]	; (800e788 <fm_menu_config_k_lin_5+0x154>)
 800e72c:	f7fb f86e 	bl	800980c <_txe_queue_send>
        break;
 800e730:	e000      	b.n	800e734 <fm_menu_config_k_lin_5+0x100>
        default:
        break;
 800e732:	bf00      	nop
    }

    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar parametro K_lin_5\n";
 800e734:	4b17      	ldr	r3, [pc, #92]	; (800e794 <fm_menu_config_k_lin_5+0x160>)
 800e736:	f107 040c 	add.w	r4, r7, #12
 800e73a:	461d      	mov	r5, r3
 800e73c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e73e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e740:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800e744:	c407      	stmia	r4!, {r0, r1, r2}
 800e746:	8023      	strh	r3, [r4, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 800e748:	f107 030c 	add.w	r3, r7, #12
 800e74c:	211e      	movs	r1, #30
 800e74e:	4618      	mov	r0, r3
 800e750:	f7fb fc98 	bl	800a084 <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 800e754:	4b0d      	ldr	r3, [pc, #52]	; (800e78c <fm_menu_config_k_lin_5+0x158>)
 800e756:	781b      	ldrb	r3, [r3, #0]
 800e758:	2b01      	cmp	r3, #1
 800e75a:	d108      	bne.n	800e76e <fm_menu_config_k_lin_5+0x13a>
    {
        digit_lin_modify = DIG_LIN_0;
 800e75c:	4b08      	ldr	r3, [pc, #32]	; (800e780 <fm_menu_config_k_lin_5+0x14c>)
 800e75e:	2200      	movs	r2, #0
 800e760:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 800e762:	4b06      	ldr	r3, [pc, #24]	; (800e77c <fm_menu_config_k_lin_5+0x148>)
 800e764:	2201      	movs	r2, #1
 800e766:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800e768:	4b08      	ldr	r3, [pc, #32]	; (800e78c <fm_menu_config_k_lin_5+0x158>)
 800e76a:	2200      	movs	r2, #0
 800e76c:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800e76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e770:	4618      	mov	r0, r3
 800e772:	3730      	adds	r7, #48	; 0x30
 800e774:	46bd      	mov	sp, r7
 800e776:	bdb0      	pop	{r4, r5, r7, pc}
 800e778:	0800e635 	.word	0x0800e635
 800e77c:	20000146 	.word	0x20000146
 800e780:	20001a63 	.word	0x20001a63
 800e784:	20001a52 	.word	0x20001a52
 800e788:	20001068 	.word	0x20001068
 800e78c:	20001a64 	.word	0x20001a64
 800e790:	0800ee11 	.word	0x0800ee11
 800e794:	080105ec 	.word	0x080105ec

0800e798 <fm_menu_config_k_param>:
 * K.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_k_param(fm_event_t event_id)
{
 800e798:	b5b0      	push	{r4, r5, r7, lr}
 800e79a:	b08a      	sub	sp, #40	; 0x28
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	4603      	mov	r3, r0
 800e7a0:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_t digit_modify = DIG_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
 800e7a2:	4b67      	ldr	r3, [pc, #412]	; (800e940 <fm_menu_config_k_param+0x1a8>)
 800e7a4:	627b      	str	r3, [r7, #36]	; 0x24
    fm_event_t event_now;

    if (new_entry == 1)
 800e7a6:	4b67      	ldr	r3, [pc, #412]	; (800e944 <fm_menu_config_k_param+0x1ac>)
 800e7a8:	781b      	ldrb	r3, [r3, #0]
 800e7aa:	2b01      	cmp	r3, #1
 800e7ac:	d104      	bne.n	800e7b8 <fm_menu_config_k_param+0x20>
    {
        fm_lcd_clear();
 800e7ae:	f7fc faea 	bl	800ad86 <fm_lcd_clear>
        new_entry = 0;
 800e7b2:	4b64      	ldr	r3, [pc, #400]	; (800e944 <fm_menu_config_k_param+0x1ac>)
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_factor(event_id, digit_modify);
 800e7b8:	4b63      	ldr	r3, [pc, #396]	; (800e948 <fm_menu_config_k_param+0x1b0>)
 800e7ba:	781a      	ldrb	r2, [r3, #0]
 800e7bc:	79fb      	ldrb	r3, [r7, #7]
 800e7be:	4611      	mov	r1, r2
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f7fc fcc3 	bl	800b14c <fm_lcd_k_factor>
    fm_lcd_refresh();
 800e7c6:	f7fc fdfc 	bl	800b3c2 <fm_lcd_refresh>

    switch (event_id)
 800e7ca:	79fb      	ldrb	r3, [r7, #7]
 800e7cc:	3b02      	subs	r3, #2
 800e7ce:	2b03      	cmp	r3, #3
 800e7d0:	f200 8092 	bhi.w	800e8f8 <fm_menu_config_k_param+0x160>
 800e7d4:	a201      	add	r2, pc, #4	; (adr r2, 800e7dc <fm_menu_config_k_param+0x44>)
 800e7d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7da:	bf00      	nop
 800e7dc:	0800e7ed 	.word	0x0800e7ed
 800e7e0:	0800e815 	.word	0x0800e815
 800e7e4:	0800e83d 	.word	0x0800e83d
 800e7e8:	0800e8d9 	.word	0x0800e8d9
    {
        case EVENT_KEY_UP:
            if (correct_password)
 800e7ec:	4b57      	ldr	r3, [pc, #348]	; (800e94c <fm_menu_config_k_param+0x1b4>)
 800e7ee:	781b      	ldrb	r3, [r3, #0]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d004      	beq.n	800e7fe <fm_menu_config_k_param+0x66>
            {
                fm_factory_modify_k_factor_add(digit_modify);
 800e7f4:	4b54      	ldr	r3, [pc, #336]	; (800e948 <fm_menu_config_k_param+0x1b0>)
 800e7f6:	781b      	ldrb	r3, [r3, #0]
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	f7fb fe55 	bl	800a4a8 <fm_factory_modify_k_factor_add>
            }
            event_now = EVENT_LCD_REFRESH;
 800e7fe:	2301      	movs	r3, #1
 800e800:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e804:	f107 0323 	add.w	r3, r7, #35	; 0x23
 800e808:	2200      	movs	r2, #0
 800e80a:	4619      	mov	r1, r3
 800e80c:	4850      	ldr	r0, [pc, #320]	; (800e950 <fm_menu_config_k_param+0x1b8>)
 800e80e:	f7fa fffd 	bl	800980c <_txe_queue_send>
        break;
 800e812:	e072      	b.n	800e8fa <fm_menu_config_k_param+0x162>
        case EVENT_KEY_DOWN:
            if (correct_password)
 800e814:	4b4d      	ldr	r3, [pc, #308]	; (800e94c <fm_menu_config_k_param+0x1b4>)
 800e816:	781b      	ldrb	r3, [r3, #0]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d004      	beq.n	800e826 <fm_menu_config_k_param+0x8e>
            {
                fm_factory_modify_k_factor_subs(digit_modify);
 800e81c:	4b4a      	ldr	r3, [pc, #296]	; (800e948 <fm_menu_config_k_param+0x1b0>)
 800e81e:	781b      	ldrb	r3, [r3, #0]
 800e820:	4618      	mov	r0, r3
 800e822:	f7fb fe81 	bl	800a528 <fm_factory_modify_k_factor_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 800e826:	2301      	movs	r3, #1
 800e828:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e82c:	f107 0323 	add.w	r3, r7, #35	; 0x23
 800e830:	2200      	movs	r2, #0
 800e832:	4619      	mov	r1, r3
 800e834:	4846      	ldr	r0, [pc, #280]	; (800e950 <fm_menu_config_k_param+0x1b8>)
 800e836:	f7fa ffe9 	bl	800980c <_txe_queue_send>
        break;
 800e83a:	e05e      	b.n	800e8fa <fm_menu_config_k_param+0x162>
        case EVENT_KEY_ENTER:
            if (correct_password)
 800e83c:	4b43      	ldr	r3, [pc, #268]	; (800e94c <fm_menu_config_k_param+0x1b4>)
 800e83e:	781b      	ldrb	r3, [r3, #0]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d03e      	beq.n	800e8c2 <fm_menu_config_k_param+0x12a>
            {
                if (digit_modify == DIG_0)
 800e844:	4b40      	ldr	r3, [pc, #256]	; (800e948 <fm_menu_config_k_param+0x1b0>)
 800e846:	781b      	ldrb	r3, [r3, #0]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d103      	bne.n	800e854 <fm_menu_config_k_param+0xbc>
                {
                    digit_modify = DIG_1;
 800e84c:	4b3e      	ldr	r3, [pc, #248]	; (800e948 <fm_menu_config_k_param+0x1b0>)
 800e84e:	2201      	movs	r2, #1
 800e850:	701a      	strb	r2, [r3, #0]
 800e852:	e036      	b.n	800e8c2 <fm_menu_config_k_param+0x12a>
                }
                else if (digit_modify == DIG_1)
 800e854:	4b3c      	ldr	r3, [pc, #240]	; (800e948 <fm_menu_config_k_param+0x1b0>)
 800e856:	781b      	ldrb	r3, [r3, #0]
 800e858:	2b01      	cmp	r3, #1
 800e85a:	d103      	bne.n	800e864 <fm_menu_config_k_param+0xcc>
                {
                    digit_modify = DIG_2;
 800e85c:	4b3a      	ldr	r3, [pc, #232]	; (800e948 <fm_menu_config_k_param+0x1b0>)
 800e85e:	2202      	movs	r2, #2
 800e860:	701a      	strb	r2, [r3, #0]
 800e862:	e02e      	b.n	800e8c2 <fm_menu_config_k_param+0x12a>
                }
                else if (digit_modify == DIG_2)
 800e864:	4b38      	ldr	r3, [pc, #224]	; (800e948 <fm_menu_config_k_param+0x1b0>)
 800e866:	781b      	ldrb	r3, [r3, #0]
 800e868:	2b02      	cmp	r3, #2
 800e86a:	d103      	bne.n	800e874 <fm_menu_config_k_param+0xdc>
                {
                    digit_modify = DIG_3;
 800e86c:	4b36      	ldr	r3, [pc, #216]	; (800e948 <fm_menu_config_k_param+0x1b0>)
 800e86e:	2203      	movs	r2, #3
 800e870:	701a      	strb	r2, [r3, #0]
 800e872:	e026      	b.n	800e8c2 <fm_menu_config_k_param+0x12a>
                }
                else if (digit_modify == DIG_3)
 800e874:	4b34      	ldr	r3, [pc, #208]	; (800e948 <fm_menu_config_k_param+0x1b0>)
 800e876:	781b      	ldrb	r3, [r3, #0]
 800e878:	2b03      	cmp	r3, #3
 800e87a:	d103      	bne.n	800e884 <fm_menu_config_k_param+0xec>
                {
                    digit_modify = DIG_4;
 800e87c:	4b32      	ldr	r3, [pc, #200]	; (800e948 <fm_menu_config_k_param+0x1b0>)
 800e87e:	2204      	movs	r2, #4
 800e880:	701a      	strb	r2, [r3, #0]
 800e882:	e01e      	b.n	800e8c2 <fm_menu_config_k_param+0x12a>
                }
                else if (digit_modify == DIG_4)
 800e884:	4b30      	ldr	r3, [pc, #192]	; (800e948 <fm_menu_config_k_param+0x1b0>)
 800e886:	781b      	ldrb	r3, [r3, #0]
 800e888:	2b04      	cmp	r3, #4
 800e88a:	d103      	bne.n	800e894 <fm_menu_config_k_param+0xfc>
                {
                    digit_modify = DIG_5;
 800e88c:	4b2e      	ldr	r3, [pc, #184]	; (800e948 <fm_menu_config_k_param+0x1b0>)
 800e88e:	2205      	movs	r2, #5
 800e890:	701a      	strb	r2, [r3, #0]
 800e892:	e016      	b.n	800e8c2 <fm_menu_config_k_param+0x12a>
                }
                else if (digit_modify == DIG_5)
 800e894:	4b2c      	ldr	r3, [pc, #176]	; (800e948 <fm_menu_config_k_param+0x1b0>)
 800e896:	781b      	ldrb	r3, [r3, #0]
 800e898:	2b05      	cmp	r3, #5
 800e89a:	d103      	bne.n	800e8a4 <fm_menu_config_k_param+0x10c>
                {
                    digit_modify = DIG_6;
 800e89c:	4b2a      	ldr	r3, [pc, #168]	; (800e948 <fm_menu_config_k_param+0x1b0>)
 800e89e:	2206      	movs	r2, #6
 800e8a0:	701a      	strb	r2, [r3, #0]
 800e8a2:	e00e      	b.n	800e8c2 <fm_menu_config_k_param+0x12a>
                }
                else if (digit_modify == DIG_6)
 800e8a4:	4b28      	ldr	r3, [pc, #160]	; (800e948 <fm_menu_config_k_param+0x1b0>)
 800e8a6:	781b      	ldrb	r3, [r3, #0]
 800e8a8:	2b06      	cmp	r3, #6
 800e8aa:	d103      	bne.n	800e8b4 <fm_menu_config_k_param+0x11c>
                {
                    digit_modify = DIG_7;
 800e8ac:	4b26      	ldr	r3, [pc, #152]	; (800e948 <fm_menu_config_k_param+0x1b0>)
 800e8ae:	2207      	movs	r2, #7
 800e8b0:	701a      	strb	r2, [r3, #0]
 800e8b2:	e006      	b.n	800e8c2 <fm_menu_config_k_param+0x12a>
                }
                else if (digit_modify == DIG_7)
 800e8b4:	4b24      	ldr	r3, [pc, #144]	; (800e948 <fm_menu_config_k_param+0x1b0>)
 800e8b6:	781b      	ldrb	r3, [r3, #0]
 800e8b8:	2b07      	cmp	r3, #7
 800e8ba:	d102      	bne.n	800e8c2 <fm_menu_config_k_param+0x12a>
                {
                    digit_modify = DIG_0;
 800e8bc:	4b22      	ldr	r3, [pc, #136]	; (800e948 <fm_menu_config_k_param+0x1b0>)
 800e8be:	2200      	movs	r2, #0
 800e8c0:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 800e8c2:	2301      	movs	r3, #1
 800e8c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e8c8:	f107 0323 	add.w	r3, r7, #35	; 0x23
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	4619      	mov	r1, r3
 800e8d0:	481f      	ldr	r0, [pc, #124]	; (800e950 <fm_menu_config_k_param+0x1b8>)
 800e8d2:	f7fa ff9b 	bl	800980c <_txe_queue_send>
        break;
 800e8d6:	e010      	b.n	800e8fa <fm_menu_config_k_param+0x162>
        case EVENT_KEY_ESC:
            new_exit = 1;
 800e8d8:	4b1e      	ldr	r3, [pc, #120]	; (800e954 <fm_menu_config_k_param+0x1bc>)
 800e8da:	2201      	movs	r2, #1
 800e8dc:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_1;
 800e8de:	4b1e      	ldr	r3, [pc, #120]	; (800e958 <fm_menu_config_k_param+0x1c0>)
 800e8e0:	627b      	str	r3, [r7, #36]	; 0x24
            event_now = EVENT_LCD_REFRESH;
 800e8e2:	2301      	movs	r3, #1
 800e8e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800e8e8:	f107 0323 	add.w	r3, r7, #35	; 0x23
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	4619      	mov	r1, r3
 800e8f0:	4817      	ldr	r0, [pc, #92]	; (800e950 <fm_menu_config_k_param+0x1b8>)
 800e8f2:	f7fa ff8b 	bl	800980c <_txe_queue_send>
        break;
 800e8f6:	e000      	b.n	800e8fa <fm_menu_config_k_param+0x162>
        default:
        break;
 800e8f8:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar parametro K\n";
 800e8fa:	4b18      	ldr	r3, [pc, #96]	; (800e95c <fm_menu_config_k_param+0x1c4>)
 800e8fc:	f107 0408 	add.w	r4, r7, #8
 800e900:	461d      	mov	r5, r3
 800e902:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e904:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e906:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e90a:	e884 0003 	stmia.w	r4, {r0, r1}
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 800e90e:	f107 0308 	add.w	r3, r7, #8
 800e912:	2118      	movs	r1, #24
 800e914:	4618      	mov	r0, r3
 800e916:	f7fb fbb5 	bl	800a084 <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 800e91a:	4b0e      	ldr	r3, [pc, #56]	; (800e954 <fm_menu_config_k_param+0x1bc>)
 800e91c:	781b      	ldrb	r3, [r3, #0]
 800e91e:	2b01      	cmp	r3, #1
 800e920:	d108      	bne.n	800e934 <fm_menu_config_k_param+0x19c>
    {
        digit_modify = DIG_0;
 800e922:	4b09      	ldr	r3, [pc, #36]	; (800e948 <fm_menu_config_k_param+0x1b0>)
 800e924:	2200      	movs	r2, #0
 800e926:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 800e928:	4b06      	ldr	r3, [pc, #24]	; (800e944 <fm_menu_config_k_param+0x1ac>)
 800e92a:	2201      	movs	r2, #1
 800e92c:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800e92e:	4b09      	ldr	r3, [pc, #36]	; (800e954 <fm_menu_config_k_param+0x1bc>)
 800e930:	2200      	movs	r2, #0
 800e932:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800e934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e936:	4618      	mov	r0, r3
 800e938:	3728      	adds	r7, #40	; 0x28
 800e93a:	46bd      	mov	sp, r7
 800e93c:	bdb0      	pop	{r4, r5, r7, pc}
 800e93e:	bf00      	nop
 800e940:	0800e799 	.word	0x0800e799
 800e944:	20000147 	.word	0x20000147
 800e948:	20001a65 	.word	0x20001a65
 800e94c:	20001a52 	.word	0x20001a52
 800e950:	20001068 	.word	0x20001068
 800e954:	20001a66 	.word	0x20001a66
 800e958:	0800e0a5 	.word	0x0800e0a5
 800e95c:	0801060c 	.word	0x0801060c

0800e960 <fm_menu_config_pass>:
 * almacenada en memoria (DOWN -> UP -> UP -> ENTER).
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_pass(fm_event_t event_id)
{
 800e960:	b5b0      	push	{r4, r5, r7, lr}
 800e962:	b086      	sub	sp, #24
 800e964:	af00      	add	r7, sp, #0
 800e966:	4603      	mov	r3, r0
 800e968:	71fb      	strb	r3, [r7, #7]
        0,
        0
    };
    static uint8_t password_index = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 800e96a:	4ba0      	ldr	r3, [pc, #640]	; (800ebec <fm_menu_config_pass+0x28c>)
 800e96c:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 800e96e:	4ba0      	ldr	r3, [pc, #640]	; (800ebf0 <fm_menu_config_pass+0x290>)
 800e970:	781b      	ldrb	r3, [r3, #0]
 800e972:	2b01      	cmp	r3, #1
 800e974:	d107      	bne.n	800e986 <fm_menu_config_pass+0x26>
    {
        correct_password = 0;
 800e976:	4b9f      	ldr	r3, [pc, #636]	; (800ebf4 <fm_menu_config_pass+0x294>)
 800e978:	2200      	movs	r2, #0
 800e97a:	701a      	strb	r2, [r3, #0]
        fm_lcd_clear();
 800e97c:	f7fc fa03 	bl	800ad86 <fm_lcd_clear>
        new_entry = 0;
 800e980:	4b9b      	ldr	r3, [pc, #620]	; (800ebf0 <fm_menu_config_pass+0x290>)
 800e982:	2200      	movs	r2, #0
 800e984:	701a      	strb	r2, [r3, #0]
    }

    lcd_set_symbol(PASS, 0x00);
 800e986:	2100      	movs	r1, #0
 800e988:	200a      	movs	r0, #10
 800e98a:	f7fd ffc1 	bl	800c910 <lcd_set_symbol>
    /*
     * Cada vez que se introduce un dígito de la contraseña, aparece un 8 nuevo
     * en la pantalla, hasta 3 veces (luego de la cuarta vez, se pasa al menú
     * de configuración del factor K).
     */
    if (password_index == 1)
 800e98e:	4b9a      	ldr	r3, [pc, #616]	; (800ebf8 <fm_menu_config_pass+0x298>)
 800e990:	781b      	ldrb	r3, [r3, #0]
 800e992:	2b01      	cmp	r3, #1
 800e994:	d104      	bne.n	800e9a0 <fm_menu_config_pass+0x40>
    {
        lcd_set_symbol(PASS1, 0x00);
 800e996:	2100      	movs	r1, #0
 800e998:	200d      	movs	r0, #13
 800e99a:	f7fd ffb9 	bl	800c910 <lcd_set_symbol>
 800e99e:	e010      	b.n	800e9c2 <fm_menu_config_pass+0x62>
    }
    else if (password_index == 2)
 800e9a0:	4b95      	ldr	r3, [pc, #596]	; (800ebf8 <fm_menu_config_pass+0x298>)
 800e9a2:	781b      	ldrb	r3, [r3, #0]
 800e9a4:	2b02      	cmp	r3, #2
 800e9a6:	d104      	bne.n	800e9b2 <fm_menu_config_pass+0x52>
    {
        lcd_set_symbol(PASS2, 0x00);
 800e9a8:	2100      	movs	r1, #0
 800e9aa:	200e      	movs	r0, #14
 800e9ac:	f7fd ffb0 	bl	800c910 <lcd_set_symbol>
 800e9b0:	e007      	b.n	800e9c2 <fm_menu_config_pass+0x62>
    }
    else if (password_index == PASSWORD_LENGTH - 1)
 800e9b2:	4b91      	ldr	r3, [pc, #580]	; (800ebf8 <fm_menu_config_pass+0x298>)
 800e9b4:	781b      	ldrb	r3, [r3, #0]
 800e9b6:	2b03      	cmp	r3, #3
 800e9b8:	d103      	bne.n	800e9c2 <fm_menu_config_pass+0x62>
    {
        lcd_set_symbol(PASS3, 0x00);
 800e9ba:	2100      	movs	r1, #0
 800e9bc:	200f      	movs	r0, #15
 800e9be:	f7fd ffa7 	bl	800c910 <lcd_set_symbol>
    }
    fm_lcd_refresh();
 800e9c2:	f7fc fcfe 	bl	800b3c2 <fm_lcd_refresh>

    switch (event_id)
 800e9c6:	79fb      	ldrb	r3, [r7, #7]
 800e9c8:	3b02      	subs	r3, #2
 800e9ca:	2b03      	cmp	r3, #3
 800e9cc:	f200 80b0 	bhi.w	800eb30 <fm_menu_config_pass+0x1d0>
 800e9d0:	a201      	add	r2, pc, #4	; (adr r2, 800e9d8 <fm_menu_config_pass+0x78>)
 800e9d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9d6:	bf00      	nop
 800e9d8:	0800e9e9 	.word	0x0800e9e9
 800e9dc:	0800ea3b 	.word	0x0800ea3b
 800e9e0:	0800ea8d 	.word	0x0800ea8d
 800e9e4:	0800eadf 	.word	0x0800eadf
    {
        case EVENT_KEY_UP:
            password[password_index] = 1;
 800e9e8:	4b83      	ldr	r3, [pc, #524]	; (800ebf8 <fm_menu_config_pass+0x298>)
 800e9ea:	781b      	ldrb	r3, [r3, #0]
 800e9ec:	461a      	mov	r2, r3
 800e9ee:	4b83      	ldr	r3, [pc, #524]	; (800ebfc <fm_menu_config_pass+0x29c>)
 800e9f0:	2101      	movs	r1, #1
 800e9f2:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 800e9f4:	4b80      	ldr	r3, [pc, #512]	; (800ebf8 <fm_menu_config_pass+0x298>)
 800e9f6:	781b      	ldrb	r3, [r3, #0]
 800e9f8:	2b02      	cmp	r3, #2
 800e9fa:	d80f      	bhi.n	800ea1c <fm_menu_config_pass+0xbc>
            {
                event_now = EVENT_LCD_REFRESH;
 800e9fc:	2301      	movs	r3, #1
 800e9fe:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800ea00:	f107 0313 	add.w	r3, r7, #19
 800ea04:	2200      	movs	r2, #0
 800ea06:	4619      	mov	r1, r3
 800ea08:	487d      	ldr	r0, [pc, #500]	; (800ec00 <fm_menu_config_pass+0x2a0>)
 800ea0a:	f7fa feff 	bl	800980c <_txe_queue_send>
                password_index++;
 800ea0e:	4b7a      	ldr	r3, [pc, #488]	; (800ebf8 <fm_menu_config_pass+0x298>)
 800ea10:	781b      	ldrb	r3, [r3, #0]
 800ea12:	3301      	adds	r3, #1
 800ea14:	b2da      	uxtb	r2, r3
 800ea16:	4b78      	ldr	r3, [pc, #480]	; (800ebf8 <fm_menu_config_pass+0x298>)
 800ea18:	701a      	strb	r2, [r3, #0]
                new_exit = 1;
                ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
                event_now = EVENT_LCD_REFRESH;
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
            }
        break;
 800ea1a:	e08a      	b.n	800eb32 <fm_menu_config_pass+0x1d2>
                new_exit = 1;
 800ea1c:	4b79      	ldr	r3, [pc, #484]	; (800ec04 <fm_menu_config_pass+0x2a4>)
 800ea1e:	2201      	movs	r2, #1
 800ea20:	701a      	strb	r2, [r3, #0]
                ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
 800ea22:	4b79      	ldr	r3, [pc, #484]	; (800ec08 <fm_menu_config_pass+0x2a8>)
 800ea24:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 800ea26:	2301      	movs	r3, #1
 800ea28:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800ea2a:	f107 0313 	add.w	r3, r7, #19
 800ea2e:	2200      	movs	r2, #0
 800ea30:	4619      	mov	r1, r3
 800ea32:	4873      	ldr	r0, [pc, #460]	; (800ec00 <fm_menu_config_pass+0x2a0>)
 800ea34:	f7fa feea 	bl	800980c <_txe_queue_send>
        break;
 800ea38:	e07b      	b.n	800eb32 <fm_menu_config_pass+0x1d2>
        case EVENT_KEY_DOWN:
            password[password_index] = 2;
 800ea3a:	4b6f      	ldr	r3, [pc, #444]	; (800ebf8 <fm_menu_config_pass+0x298>)
 800ea3c:	781b      	ldrb	r3, [r3, #0]
 800ea3e:	461a      	mov	r2, r3
 800ea40:	4b6e      	ldr	r3, [pc, #440]	; (800ebfc <fm_menu_config_pass+0x29c>)
 800ea42:	2102      	movs	r1, #2
 800ea44:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 800ea46:	4b6c      	ldr	r3, [pc, #432]	; (800ebf8 <fm_menu_config_pass+0x298>)
 800ea48:	781b      	ldrb	r3, [r3, #0]
 800ea4a:	2b02      	cmp	r3, #2
 800ea4c:	d80f      	bhi.n	800ea6e <fm_menu_config_pass+0x10e>
            {
                event_now = EVENT_LCD_REFRESH;
 800ea4e:	2301      	movs	r3, #1
 800ea50:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800ea52:	f107 0313 	add.w	r3, r7, #19
 800ea56:	2200      	movs	r2, #0
 800ea58:	4619      	mov	r1, r3
 800ea5a:	4869      	ldr	r0, [pc, #420]	; (800ec00 <fm_menu_config_pass+0x2a0>)
 800ea5c:	f7fa fed6 	bl	800980c <_txe_queue_send>
                password_index++;
 800ea60:	4b65      	ldr	r3, [pc, #404]	; (800ebf8 <fm_menu_config_pass+0x298>)
 800ea62:	781b      	ldrb	r3, [r3, #0]
 800ea64:	3301      	adds	r3, #1
 800ea66:	b2da      	uxtb	r2, r3
 800ea68:	4b63      	ldr	r3, [pc, #396]	; (800ebf8 <fm_menu_config_pass+0x298>)
 800ea6a:	701a      	strb	r2, [r3, #0]
                new_exit = 1;
                ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
                event_now = EVENT_LCD_REFRESH;
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
            }
        break;
 800ea6c:	e061      	b.n	800eb32 <fm_menu_config_pass+0x1d2>
                new_exit = 1;
 800ea6e:	4b65      	ldr	r3, [pc, #404]	; (800ec04 <fm_menu_config_pass+0x2a4>)
 800ea70:	2201      	movs	r2, #1
 800ea72:	701a      	strb	r2, [r3, #0]
                ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
 800ea74:	4b64      	ldr	r3, [pc, #400]	; (800ec08 <fm_menu_config_pass+0x2a8>)
 800ea76:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 800ea78:	2301      	movs	r3, #1
 800ea7a:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800ea7c:	f107 0313 	add.w	r3, r7, #19
 800ea80:	2200      	movs	r2, #0
 800ea82:	4619      	mov	r1, r3
 800ea84:	485e      	ldr	r0, [pc, #376]	; (800ec00 <fm_menu_config_pass+0x2a0>)
 800ea86:	f7fa fec1 	bl	800980c <_txe_queue_send>
        break;
 800ea8a:	e052      	b.n	800eb32 <fm_menu_config_pass+0x1d2>
        case EVENT_KEY_ENTER:
            password[password_index] = 3; // @suppress("Avoid magic numbers")
 800ea8c:	4b5a      	ldr	r3, [pc, #360]	; (800ebf8 <fm_menu_config_pass+0x298>)
 800ea8e:	781b      	ldrb	r3, [r3, #0]
 800ea90:	461a      	mov	r2, r3
 800ea92:	4b5a      	ldr	r3, [pc, #360]	; (800ebfc <fm_menu_config_pass+0x29c>)
 800ea94:	2103      	movs	r1, #3
 800ea96:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 800ea98:	4b57      	ldr	r3, [pc, #348]	; (800ebf8 <fm_menu_config_pass+0x298>)
 800ea9a:	781b      	ldrb	r3, [r3, #0]
 800ea9c:	2b02      	cmp	r3, #2
 800ea9e:	d80f      	bhi.n	800eac0 <fm_menu_config_pass+0x160>
            {
                event_now = EVENT_LCD_REFRESH;
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800eaa4:	f107 0313 	add.w	r3, r7, #19
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	4619      	mov	r1, r3
 800eaac:	4854      	ldr	r0, [pc, #336]	; (800ec00 <fm_menu_config_pass+0x2a0>)
 800eaae:	f7fa fead 	bl	800980c <_txe_queue_send>
                password_index++;
 800eab2:	4b51      	ldr	r3, [pc, #324]	; (800ebf8 <fm_menu_config_pass+0x298>)
 800eab4:	781b      	ldrb	r3, [r3, #0]
 800eab6:	3301      	adds	r3, #1
 800eab8:	b2da      	uxtb	r2, r3
 800eaba:	4b4f      	ldr	r3, [pc, #316]	; (800ebf8 <fm_menu_config_pass+0x298>)
 800eabc:	701a      	strb	r2, [r3, #0]
                new_exit = 1;
                ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
                event_now = EVENT_LCD_REFRESH;
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
            }
        break;
 800eabe:	e038      	b.n	800eb32 <fm_menu_config_pass+0x1d2>
                new_exit = 1;
 800eac0:	4b50      	ldr	r3, [pc, #320]	; (800ec04 <fm_menu_config_pass+0x2a4>)
 800eac2:	2201      	movs	r2, #1
 800eac4:	701a      	strb	r2, [r3, #0]
                ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
 800eac6:	4b50      	ldr	r3, [pc, #320]	; (800ec08 <fm_menu_config_pass+0x2a8>)
 800eac8:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 800eaca:	2301      	movs	r3, #1
 800eacc:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800eace:	f107 0313 	add.w	r3, r7, #19
 800ead2:	2200      	movs	r2, #0
 800ead4:	4619      	mov	r1, r3
 800ead6:	484a      	ldr	r0, [pc, #296]	; (800ec00 <fm_menu_config_pass+0x2a0>)
 800ead8:	f7fa fe98 	bl	800980c <_txe_queue_send>
        break;
 800eadc:	e029      	b.n	800eb32 <fm_menu_config_pass+0x1d2>
        case EVENT_KEY_ESC:
            password[password_index] = 4; // @suppress("Avoid magic numbers")
 800eade:	4b46      	ldr	r3, [pc, #280]	; (800ebf8 <fm_menu_config_pass+0x298>)
 800eae0:	781b      	ldrb	r3, [r3, #0]
 800eae2:	461a      	mov	r2, r3
 800eae4:	4b45      	ldr	r3, [pc, #276]	; (800ebfc <fm_menu_config_pass+0x29c>)
 800eae6:	2104      	movs	r1, #4
 800eae8:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 800eaea:	4b43      	ldr	r3, [pc, #268]	; (800ebf8 <fm_menu_config_pass+0x298>)
 800eaec:	781b      	ldrb	r3, [r3, #0]
 800eaee:	2b02      	cmp	r3, #2
 800eaf0:	d80f      	bhi.n	800eb12 <fm_menu_config_pass+0x1b2>
            {
                event_now = EVENT_LCD_REFRESH;
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800eaf6:	f107 0313 	add.w	r3, r7, #19
 800eafa:	2200      	movs	r2, #0
 800eafc:	4619      	mov	r1, r3
 800eafe:	4840      	ldr	r0, [pc, #256]	; (800ec00 <fm_menu_config_pass+0x2a0>)
 800eb00:	f7fa fe84 	bl	800980c <_txe_queue_send>
                password_index++;
 800eb04:	4b3c      	ldr	r3, [pc, #240]	; (800ebf8 <fm_menu_config_pass+0x298>)
 800eb06:	781b      	ldrb	r3, [r3, #0]
 800eb08:	3301      	adds	r3, #1
 800eb0a:	b2da      	uxtb	r2, r3
 800eb0c:	4b3a      	ldr	r3, [pc, #232]	; (800ebf8 <fm_menu_config_pass+0x298>)
 800eb0e:	701a      	strb	r2, [r3, #0]
                new_exit = 1;
                ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
                event_now = EVENT_LCD_REFRESH;
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
            }
        break;
 800eb10:	e00f      	b.n	800eb32 <fm_menu_config_pass+0x1d2>
                new_exit = 1;
 800eb12:	4b3c      	ldr	r3, [pc, #240]	; (800ec04 <fm_menu_config_pass+0x2a4>)
 800eb14:	2201      	movs	r2, #1
 800eb16:	701a      	strb	r2, [r3, #0]
                ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
 800eb18:	4b3b      	ldr	r3, [pc, #236]	; (800ec08 <fm_menu_config_pass+0x2a8>)
 800eb1a:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 800eb1c:	2301      	movs	r3, #1
 800eb1e:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800eb20:	f107 0313 	add.w	r3, r7, #19
 800eb24:	2200      	movs	r2, #0
 800eb26:	4619      	mov	r1, r3
 800eb28:	4835      	ldr	r0, [pc, #212]	; (800ec00 <fm_menu_config_pass+0x2a0>)
 800eb2a:	f7fa fe6f 	bl	800980c <_txe_queue_send>
        break;
 800eb2e:	e000      	b.n	800eb32 <fm_menu_config_pass+0x1d2>
        default:
        break;
 800eb30:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Password\n";
 800eb32:	4a36      	ldr	r2, [pc, #216]	; (800ec0c <fm_menu_config_pass+0x2ac>)
 800eb34:	f107 0308 	add.w	r3, r7, #8
 800eb38:	ca07      	ldmia	r2, {r0, r1, r2}
 800eb3a:	c303      	stmia	r3!, {r0, r1}
 800eb3c:	801a      	strh	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 800eb3e:	f107 0308 	add.w	r3, r7, #8
 800eb42:	210a      	movs	r1, #10
 800eb44:	4618      	mov	r0, r3
 800eb46:	f7fb fa9d 	bl	800a084 <fm_debug_msg_uart>
#endif

    if (new_exit == 1 && password_index >= PASSWORD_LENGTH - 1)
 800eb4a:	4b2e      	ldr	r3, [pc, #184]	; (800ec04 <fm_menu_config_pass+0x2a4>)
 800eb4c:	781b      	ldrb	r3, [r3, #0]
 800eb4e:	2b01      	cmp	r3, #1
 800eb50:	d147      	bne.n	800ebe2 <fm_menu_config_pass+0x282>
 800eb52:	4b29      	ldr	r3, [pc, #164]	; (800ebf8 <fm_menu_config_pass+0x298>)
 800eb54:	781b      	ldrb	r3, [r3, #0]
 800eb56:	2b02      	cmp	r3, #2
 800eb58:	d943      	bls.n	800ebe2 <fm_menu_config_pass+0x282>
    {
        /*
         * Si la contraseña ingresada es correcta, se activa una flag global que
         * permite modificar los parámetros de los menús de configuración.
         */
        if (password[0] == 2 && password[1] == 1 && password[2] == 1
 800eb5a:	4b28      	ldr	r3, [pc, #160]	; (800ebfc <fm_menu_config_pass+0x29c>)
 800eb5c:	781b      	ldrb	r3, [r3, #0]
 800eb5e:	2b02      	cmp	r3, #2
 800eb60:	d10e      	bne.n	800eb80 <fm_menu_config_pass+0x220>
 800eb62:	4b26      	ldr	r3, [pc, #152]	; (800ebfc <fm_menu_config_pass+0x29c>)
 800eb64:	785b      	ldrb	r3, [r3, #1]
 800eb66:	2b01      	cmp	r3, #1
 800eb68:	d10a      	bne.n	800eb80 <fm_menu_config_pass+0x220>
 800eb6a:	4b24      	ldr	r3, [pc, #144]	; (800ebfc <fm_menu_config_pass+0x29c>)
 800eb6c:	789b      	ldrb	r3, [r3, #2]
 800eb6e:	2b01      	cmp	r3, #1
 800eb70:	d106      	bne.n	800eb80 <fm_menu_config_pass+0x220>
        && password[PASSWORD_LENGTH - 1] == 3)
 800eb72:	4b22      	ldr	r3, [pc, #136]	; (800ebfc <fm_menu_config_pass+0x29c>)
 800eb74:	78db      	ldrb	r3, [r3, #3]
 800eb76:	2b03      	cmp	r3, #3
 800eb78:	d102      	bne.n	800eb80 <fm_menu_config_pass+0x220>
        {
            correct_password = 1;
 800eb7a:	4b1e      	ldr	r3, [pc, #120]	; (800ebf4 <fm_menu_config_pass+0x294>)
 800eb7c:	2201      	movs	r2, #1
 800eb7e:	701a      	strb	r2, [r3, #0]
        }
        fm_factory_modify_date(fm_calendar_get_day(),
 800eb80:	f7fb fa16 	bl	8009fb0 <fm_calendar_get_day>
 800eb84:	4604      	mov	r4, r0
 800eb86:	f7fb fa1d 	bl	8009fc4 <fm_calendar_get_month>
 800eb8a:	4605      	mov	r5, r0
 800eb8c:	f7fb fa24 	bl	8009fd8 <fm_calendar_get_year>
 800eb90:	4603      	mov	r3, r0
 800eb92:	461a      	mov	r2, r3
 800eb94:	4629      	mov	r1, r5
 800eb96:	4620      	mov	r0, r4
 800eb98:	f7fb fc32 	bl	800a400 <fm_factory_modify_date>
        fm_calendar_get_month(), fm_calendar_get_year());

        fm_factory_modify_time(fm_calendar_get_hour(),
 800eb9c:	f7fb f9ea 	bl	8009f74 <fm_calendar_get_hour>
 800eba0:	4604      	mov	r4, r0
 800eba2:	f7fb f9f1 	bl	8009f88 <fm_calendar_get_minute>
 800eba6:	4605      	mov	r5, r0
 800eba8:	f7fb f9f8 	bl	8009f9c <fm_calendar_get_second>
 800ebac:	4603      	mov	r3, r0
 800ebae:	461a      	mov	r2, r3
 800ebb0:	4629      	mov	r1, r5
 800ebb2:	4620      	mov	r0, r4
 800ebb4:	f7fb fc50 	bl	800a458 <fm_factory_modify_time>
        fm_calendar_get_minute(), fm_calendar_get_second());
        /*
         * Reinicio el arreglo de la contraseña ingresada.
         */
        password_index = 0;
 800ebb8:	4b0f      	ldr	r3, [pc, #60]	; (800ebf8 <fm_menu_config_pass+0x298>)
 800ebba:	2200      	movs	r2, #0
 800ebbc:	701a      	strb	r2, [r3, #0]
        password[0] = 0;
 800ebbe:	4b0f      	ldr	r3, [pc, #60]	; (800ebfc <fm_menu_config_pass+0x29c>)
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	701a      	strb	r2, [r3, #0]
        password[1] = 0;
 800ebc4:	4b0d      	ldr	r3, [pc, #52]	; (800ebfc <fm_menu_config_pass+0x29c>)
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	705a      	strb	r2, [r3, #1]
        password[2] = 0;
 800ebca:	4b0c      	ldr	r3, [pc, #48]	; (800ebfc <fm_menu_config_pass+0x29c>)
 800ebcc:	2200      	movs	r2, #0
 800ebce:	709a      	strb	r2, [r3, #2]
        password[PASSWORD_LENGTH - 1] = 0;
 800ebd0:	4b0a      	ldr	r3, [pc, #40]	; (800ebfc <fm_menu_config_pass+0x29c>)
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	70da      	strb	r2, [r3, #3]
        new_entry = 1;
 800ebd6:	4b06      	ldr	r3, [pc, #24]	; (800ebf0 <fm_menu_config_pass+0x290>)
 800ebd8:	2201      	movs	r2, #1
 800ebda:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800ebdc:	4b09      	ldr	r3, [pc, #36]	; (800ec04 <fm_menu_config_pass+0x2a4>)
 800ebde:	2200      	movs	r2, #0
 800ebe0:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800ebe2:	697b      	ldr	r3, [r7, #20]
}
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	3718      	adds	r7, #24
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	bdb0      	pop	{r4, r5, r7, pc}
 800ebec:	0800e961 	.word	0x0800e961
 800ebf0:	20000148 	.word	0x20000148
 800ebf4:	20001a52 	.word	0x20001a52
 800ebf8:	20001a67 	.word	0x20001a67
 800ebfc:	20001a68 	.word	0x20001a68
 800ec00:	20001068 	.word	0x20001068
 800ec04:	20001a6c 	.word	0x20001a6c
 800ec08:	0800e799 	.word	0x0800e799
 800ec0c:	08010640 	.word	0x08010640

0800ec10 <fm_menu_config_units_tim>:
 * volumen y tiempo, como de la resolución de las medidas.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_units_tim(fm_event_t event_id)
{
 800ec10:	b5b0      	push	{r4, r5, r7, lr}
 800ec12:	b0b8      	sub	sp, #224	; 0xe0
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	4603      	mov	r3, r0
 800ec18:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_units_tim;
 800ec1a:	4b76      	ldr	r3, [pc, #472]	; (800edf4 <fm_menu_config_units_tim+0x1e4>)
 800ec1c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    fm_event_t event_now;

    if (new_entry == 1)
 800ec20:	4b75      	ldr	r3, [pc, #468]	; (800edf8 <fm_menu_config_units_tim+0x1e8>)
 800ec22:	781b      	ldrb	r3, [r3, #0]
 800ec24:	2b01      	cmp	r3, #1
 800ec26:	d104      	bne.n	800ec32 <fm_menu_config_units_tim+0x22>
    {
        fm_lcd_clear();
 800ec28:	f7fc f8ad 	bl	800ad86 <fm_lcd_clear>
        new_entry = 0;
 800ec2c:	4b72      	ldr	r3, [pc, #456]	; (800edf8 <fm_menu_config_units_tim+0x1e8>)
 800ec2e:	2200      	movs	r2, #0
 800ec30:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_units_tim(event_id);
 800ec32:	79fb      	ldrb	r3, [r7, #7]
 800ec34:	4618      	mov	r0, r3
 800ec36:	f7fc fc35 	bl	800b4a4 <fm_lcd_units_tim>
    fm_lcd_refresh();
 800ec3a:	f7fc fbc2 	bl	800b3c2 <fm_lcd_refresh>

    switch (event_id)
 800ec3e:	79fb      	ldrb	r3, [r7, #7]
 800ec40:	3b02      	subs	r3, #2
 800ec42:	2b03      	cmp	r3, #3
 800ec44:	f200 80b2 	bhi.w	800edac <fm_menu_config_units_tim+0x19c>
 800ec48:	a201      	add	r2, pc, #4	; (adr r2, 800ec50 <fm_menu_config_units_tim+0x40>)
 800ec4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec4e:	bf00      	nop
 800ec50:	0800ec61 	.word	0x0800ec61
 800ec54:	0800ece9 	.word	0x0800ece9
 800ec58:	0800ecff 	.word	0x0800ecff
 800ec5c:	0800ed8b 	.word	0x0800ed8b
    {
        case EVENT_KEY_UP:
            if (correct_password)
 800ec60:	4b66      	ldr	r3, [pc, #408]	; (800edfc <fm_menu_config_units_tim+0x1ec>)
 800ec62:	781b      	ldrb	r3, [r3, #0]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d034      	beq.n	800ecd2 <fm_menu_config_units_tim+0xc2>
            {
                if (fm_factory_get_rate().unit_time == H)
 800ec68:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	f7fb fa51 	bl	800a114 <fm_factory_get_rate>
 800ec72:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d103      	bne.n	800ec82 <fm_menu_config_units_tim+0x72>
                {
                    fm_factory_modify_time_units(D);
 800ec7a:	2001      	movs	r0, #1
 800ec7c:	f7fb fea2 	bl	800a9c4 <fm_factory_modify_time_units>
 800ec80:	e025      	b.n	800ecce <fm_menu_config_units_tim+0xbe>
                }
                else if (fm_factory_get_rate().unit_time == D)
 800ec82:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ec86:	4618      	mov	r0, r3
 800ec88:	f7fb fa44 	bl	800a114 <fm_factory_get_rate>
 800ec8c:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 800ec90:	2b01      	cmp	r3, #1
 800ec92:	d103      	bne.n	800ec9c <fm_menu_config_units_tim+0x8c>
                {
                    fm_factory_modify_time_units(S);
 800ec94:	2002      	movs	r0, #2
 800ec96:	f7fb fe95 	bl	800a9c4 <fm_factory_modify_time_units>
 800ec9a:	e018      	b.n	800ecce <fm_menu_config_units_tim+0xbe>
                }
                else if (fm_factory_get_rate().unit_time == S)
 800ec9c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800eca0:	4618      	mov	r0, r3
 800eca2:	f7fb fa37 	bl	800a114 <fm_factory_get_rate>
 800eca6:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 800ecaa:	2b02      	cmp	r3, #2
 800ecac:	d103      	bne.n	800ecb6 <fm_menu_config_units_tim+0xa6>
                {
                    fm_factory_modify_time_units(M);
 800ecae:	2003      	movs	r0, #3
 800ecb0:	f7fb fe88 	bl	800a9c4 <fm_factory_modify_time_units>
 800ecb4:	e00b      	b.n	800ecce <fm_menu_config_units_tim+0xbe>
                }
                else if (fm_factory_get_rate().unit_time == M)
 800ecb6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f7fb fa2a 	bl	800a114 <fm_factory_get_rate>
 800ecc0:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 800ecc4:	2b03      	cmp	r3, #3
 800ecc6:	d102      	bne.n	800ecce <fm_menu_config_units_tim+0xbe>
                {
                    fm_factory_modify_time_units(H);
 800ecc8:	2000      	movs	r0, #0
 800ecca:	f7fb fe7b 	bl	800a9c4 <fm_factory_modify_time_units>
                }
                fm_lcd_clear();
 800ecce:	f7fc f85a 	bl	800ad86 <fm_lcd_clear>
            }
            event_now = EVENT_LCD_REFRESH;
 800ecd2:	2301      	movs	r3, #1
 800ecd4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800ecd8:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800ecdc:	2200      	movs	r2, #0
 800ecde:	4619      	mov	r1, r3
 800ece0:	4847      	ldr	r0, [pc, #284]	; (800ee00 <fm_menu_config_units_tim+0x1f0>)
 800ece2:	f7fa fd93 	bl	800980c <_txe_queue_send>
        break;
 800ece6:	e062      	b.n	800edae <fm_menu_config_units_tim+0x19e>
        case EVENT_KEY_DOWN:
            event_now = EVENT_LCD_REFRESH;
 800ece8:	2301      	movs	r3, #1
 800ecea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800ecee:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	4619      	mov	r1, r3
 800ecf6:	4842      	ldr	r0, [pc, #264]	; (800ee00 <fm_menu_config_units_tim+0x1f0>)
 800ecf8:	f7fa fd88 	bl	800980c <_txe_queue_send>
        break;
 800ecfc:	e057      	b.n	800edae <fm_menu_config_units_tim+0x19e>
        case EVENT_KEY_ENTER:
            if (correct_password)
 800ecfe:	4b3f      	ldr	r3, [pc, #252]	; (800edfc <fm_menu_config_units_tim+0x1ec>)
 800ed00:	781b      	ldrb	r3, [r3, #0]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d036      	beq.n	800ed74 <fm_menu_config_units_tim+0x164>
            {
                if (fm_factory_get_units_tim().res == RES_0)
 800ed06:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	f7fb fa2a 	bl	800a164 <fm_factory_get_units_tim>
 800ed10:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d104      	bne.n	800ed22 <fm_menu_config_units_tim+0x112>
                {
                    fm_factory_modify_res_rate(RES_1, RES_1);
 800ed18:	2101      	movs	r1, #1
 800ed1a:	2001      	movs	r0, #1
 800ed1c:	f7fb fe3a 	bl	800a994 <fm_factory_modify_res_rate>
 800ed20:	e028      	b.n	800ed74 <fm_menu_config_units_tim+0x164>
                }
                else if (fm_factory_get_units_tim().res == RES_1)
 800ed22:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800ed26:	4618      	mov	r0, r3
 800ed28:	f7fb fa1c 	bl	800a164 <fm_factory_get_units_tim>
 800ed2c:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 800ed30:	2b01      	cmp	r3, #1
 800ed32:	d104      	bne.n	800ed3e <fm_menu_config_units_tim+0x12e>
                {
                    fm_factory_modify_res_rate(RES_2, RES_2);
 800ed34:	2102      	movs	r1, #2
 800ed36:	2002      	movs	r0, #2
 800ed38:	f7fb fe2c 	bl	800a994 <fm_factory_modify_res_rate>
 800ed3c:	e01a      	b.n	800ed74 <fm_menu_config_units_tim+0x164>
                }
                else if (fm_factory_get_units_tim().res == RES_2)
 800ed3e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800ed42:	4618      	mov	r0, r3
 800ed44:	f7fb fa0e 	bl	800a164 <fm_factory_get_units_tim>
 800ed48:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
 800ed4c:	2b02      	cmp	r3, #2
 800ed4e:	d104      	bne.n	800ed5a <fm_menu_config_units_tim+0x14a>
                {
                    fm_factory_modify_res_rate(RES_3, RES_3);
 800ed50:	2103      	movs	r1, #3
 800ed52:	2003      	movs	r0, #3
 800ed54:	f7fb fe1e 	bl	800a994 <fm_factory_modify_res_rate>
 800ed58:	e00c      	b.n	800ed74 <fm_menu_config_units_tim+0x164>
                }
                else if (fm_factory_get_units_tim().res == RES_3)
 800ed5a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f7fb fa00 	bl	800a164 <fm_factory_get_units_tim>
 800ed64:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 800ed68:	2b03      	cmp	r3, #3
 800ed6a:	d103      	bne.n	800ed74 <fm_menu_config_units_tim+0x164>
                {
                    fm_factory_modify_res_rate(RES_0, RES_0);
 800ed6c:	2100      	movs	r1, #0
 800ed6e:	2000      	movs	r0, #0
 800ed70:	f7fb fe10 	bl	800a994 <fm_factory_modify_res_rate>
                }
            }
            event_now = EVENT_LCD_REFRESH;
 800ed74:	2301      	movs	r3, #1
 800ed76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800ed7a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800ed7e:	2200      	movs	r2, #0
 800ed80:	4619      	mov	r1, r3
 800ed82:	481f      	ldr	r0, [pc, #124]	; (800ee00 <fm_menu_config_units_tim+0x1f0>)
 800ed84:	f7fa fd42 	bl	800980c <_txe_queue_send>
        break;
 800ed88:	e011      	b.n	800edae <fm_menu_config_units_tim+0x19e>
        case EVENT_KEY_ESC:
            new_exit = 1;
 800ed8a:	4b1e      	ldr	r3, [pc, #120]	; (800ee04 <fm_menu_config_units_tim+0x1f4>)
 800ed8c:	2201      	movs	r2, #1
 800ed8e:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_date_hour;
 800ed90:	4b1d      	ldr	r3, [pc, #116]	; (800ee08 <fm_menu_config_units_tim+0x1f8>)
 800ed92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            event_now = EVENT_LCD_REFRESH;
 800ed96:	2301      	movs	r3, #1
 800ed98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800ed9c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800eda0:	2200      	movs	r2, #0
 800eda2:	4619      	mov	r1, r3
 800eda4:	4816      	ldr	r0, [pc, #88]	; (800ee00 <fm_menu_config_units_tim+0x1f0>)
 800eda6:	f7fa fd31 	bl	800980c <_txe_queue_send>
        break;
 800edaa:	e000      	b.n	800edae <fm_menu_config_units_tim+0x19e>
        default:
        break;
 800edac:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar unidades de tiempo y resolucion\n";
 800edae:	4b17      	ldr	r3, [pc, #92]	; (800ee0c <fm_menu_config_units_tim+0x1fc>)
 800edb0:	f107 0408 	add.w	r4, r7, #8
 800edb4:	461d      	mov	r5, r3
 800edb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800edb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800edba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800edbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800edbe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800edc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 800edc6:	f107 0308 	add.w	r3, r7, #8
 800edca:	212c      	movs	r1, #44	; 0x2c
 800edcc:	4618      	mov	r0, r3
 800edce:	f7fb f959 	bl	800a084 <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 800edd2:	4b0c      	ldr	r3, [pc, #48]	; (800ee04 <fm_menu_config_units_tim+0x1f4>)
 800edd4:	781b      	ldrb	r3, [r3, #0]
 800edd6:	2b01      	cmp	r3, #1
 800edd8:	d105      	bne.n	800ede6 <fm_menu_config_units_tim+0x1d6>
    {
        new_entry = 1;
 800edda:	4b07      	ldr	r3, [pc, #28]	; (800edf8 <fm_menu_config_units_tim+0x1e8>)
 800eddc:	2201      	movs	r2, #1
 800edde:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800ede0:	4b08      	ldr	r3, [pc, #32]	; (800ee04 <fm_menu_config_units_tim+0x1f4>)
 800ede2:	2200      	movs	r2, #0
 800ede4:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800ede6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
}
 800edea:	4618      	mov	r0, r3
 800edec:	37e0      	adds	r7, #224	; 0xe0
 800edee:	46bd      	mov	sp, r7
 800edf0:	bdb0      	pop	{r4, r5, r7, pc}
 800edf2:	bf00      	nop
 800edf4:	0800ec11 	.word	0x0800ec11
 800edf8:	20000149 	.word	0x20000149
 800edfc:	20001a52 	.word	0x20001a52
 800ee00:	20001068 	.word	0x20001068
 800ee04:	20001a6d 	.word	0x20001a6d
 800ee08:	0800d779 	.word	0x0800d779
 800ee0c:	08010660 	.word	0x08010660

0800ee10 <fm_menu_config_units_vol>:
 * volumen y tiempo, como de la resolución de las medidas.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_units_vol(fm_event_t event_id)
{
 800ee10:	b5b0      	push	{r4, r5, r7, lr}
 800ee12:	b0c8      	sub	sp, #288	; 0x120
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	4602      	mov	r2, r0
 800ee18:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800ee1c:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800ee20:	701a      	strb	r2, [r3, #0]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_units_vol;
 800ee22:	4b8b      	ldr	r3, [pc, #556]	; (800f050 <fm_menu_config_units_vol+0x240>)
 800ee24:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    fm_event_t event_now;

    if (new_entry == 1)
 800ee28:	4b8a      	ldr	r3, [pc, #552]	; (800f054 <fm_menu_config_units_vol+0x244>)
 800ee2a:	781b      	ldrb	r3, [r3, #0]
 800ee2c:	2b01      	cmp	r3, #1
 800ee2e:	d104      	bne.n	800ee3a <fm_menu_config_units_vol+0x2a>
    {
        fm_lcd_clear();
 800ee30:	f7fb ffa9 	bl	800ad86 <fm_lcd_clear>
        new_entry = 0;
 800ee34:	4b87      	ldr	r3, [pc, #540]	; (800f054 <fm_menu_config_units_vol+0x244>)
 800ee36:	2200      	movs	r2, #0
 800ee38:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_units_vol(event_id);
 800ee3a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800ee3e:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800ee42:	781b      	ldrb	r3, [r3, #0]
 800ee44:	4618      	mov	r0, r3
 800ee46:	f7fc fbb9 	bl	800b5bc <fm_lcd_units_vol>
    fm_lcd_refresh();
 800ee4a:	f7fc faba 	bl	800b3c2 <fm_lcd_refresh>

    switch (event_id)
 800ee4e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800ee52:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800ee56:	781b      	ldrb	r3, [r3, #0]
 800ee58:	3b02      	subs	r3, #2
 800ee5a:	2b03      	cmp	r3, #3
 800ee5c:	f200 80d0 	bhi.w	800f000 <fm_menu_config_units_vol+0x1f0>
 800ee60:	a201      	add	r2, pc, #4	; (adr r2, 800ee68 <fm_menu_config_units_vol+0x58>)
 800ee62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee66:	bf00      	nop
 800ee68:	0800ee79 	.word	0x0800ee79
 800ee6c:	0800ef35 	.word	0x0800ef35
 800ee70:	0800ef4b 	.word	0x0800ef4b
 800ee74:	0800efdf 	.word	0x0800efdf
    {
        case EVENT_KEY_UP:
            if (correct_password)
 800ee78:	4b77      	ldr	r3, [pc, #476]	; (800f058 <fm_menu_config_units_vol+0x248>)
 800ee7a:	781b      	ldrb	r3, [r3, #0]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d04e      	beq.n	800ef1e <fm_menu_config_units_vol+0x10e>
            {
                if (fm_factory_get_acm().unit_volume == LT)
 800ee80:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ee84:	4618      	mov	r0, r3
 800ee86:	f7fb f919 	bl	800a0bc <fm_factory_get_acm>
 800ee8a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d103      	bne.n	800ee9a <fm_menu_config_units_vol+0x8a>
                {
                    fm_factory_modify_volume_units(M3);
 800ee92:	2001      	movs	r0, #1
 800ee94:	f7fb fdb0 	bl	800a9f8 <fm_factory_modify_volume_units>
 800ee98:	e03f      	b.n	800ef1a <fm_menu_config_units_vol+0x10a>
                }
                else if (fm_factory_get_acm().unit_volume == M3)
 800ee9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ee9e:	4618      	mov	r0, r3
 800eea0:	f7fb f90c 	bl	800a0bc <fm_factory_get_acm>
 800eea4:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800eea8:	2b01      	cmp	r3, #1
 800eeaa:	d103      	bne.n	800eeb4 <fm_menu_config_units_vol+0xa4>
                {
                    fm_factory_modify_volume_units(KG);
 800eeac:	2002      	movs	r0, #2
 800eeae:	f7fb fda3 	bl	800a9f8 <fm_factory_modify_volume_units>
 800eeb2:	e032      	b.n	800ef1a <fm_menu_config_units_vol+0x10a>
                }
                else if (fm_factory_get_acm().unit_volume == KG)
 800eeb4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f7fb f8ff 	bl	800a0bc <fm_factory_get_acm>
 800eebe:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 800eec2:	2b02      	cmp	r3, #2
 800eec4:	d103      	bne.n	800eece <fm_menu_config_units_vol+0xbe>
                {
                    fm_factory_modify_volume_units(GL);
 800eec6:	2003      	movs	r0, #3
 800eec8:	f7fb fd96 	bl	800a9f8 <fm_factory_modify_volume_units>
 800eecc:	e025      	b.n	800ef1a <fm_menu_config_units_vol+0x10a>
                }
                else if (fm_factory_get_acm().unit_volume == GL)
 800eece:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800eed2:	4618      	mov	r0, r3
 800eed4:	f7fb f8f2 	bl	800a0bc <fm_factory_get_acm>
 800eed8:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 800eedc:	2b03      	cmp	r3, #3
 800eede:	d103      	bne.n	800eee8 <fm_menu_config_units_vol+0xd8>
                {
                    fm_factory_modify_volume_units(BR);
 800eee0:	2004      	movs	r0, #4
 800eee2:	f7fb fd89 	bl	800a9f8 <fm_factory_modify_volume_units>
 800eee6:	e018      	b.n	800ef1a <fm_menu_config_units_vol+0x10a>
                }
                else if (fm_factory_get_acm().unit_volume == BR)
 800eee8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800eeec:	4618      	mov	r0, r3
 800eeee:	f7fb f8e5 	bl	800a0bc <fm_factory_get_acm>
 800eef2:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
 800eef6:	2b04      	cmp	r3, #4
 800eef8:	d103      	bne.n	800ef02 <fm_menu_config_units_vol+0xf2>
                {
                    fm_factory_modify_volume_units(NOTHING);
 800eefa:	2006      	movs	r0, #6
 800eefc:	f7fb fd7c 	bl	800a9f8 <fm_factory_modify_volume_units>
 800ef00:	e00b      	b.n	800ef1a <fm_menu_config_units_vol+0x10a>
                }
                else if (fm_factory_get_acm().unit_volume == NOTHING)
 800ef02:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800ef06:	4618      	mov	r0, r3
 800ef08:	f7fb f8d8 	bl	800a0bc <fm_factory_get_acm>
 800ef0c:	f897 30f0 	ldrb.w	r3, [r7, #240]	; 0xf0
 800ef10:	2b06      	cmp	r3, #6
 800ef12:	d102      	bne.n	800ef1a <fm_menu_config_units_vol+0x10a>
                {
                    fm_factory_modify_volume_units(LT);
 800ef14:	2000      	movs	r0, #0
 800ef16:	f7fb fd6f 	bl	800a9f8 <fm_factory_modify_volume_units>
                }
                fm_lcd_clear();
 800ef1a:	f7fb ff34 	bl	800ad86 <fm_lcd_clear>
            }
            event_now = EVENT_LCD_REFRESH;
 800ef1e:	2301      	movs	r3, #1
 800ef20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800ef24:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800ef28:	2200      	movs	r2, #0
 800ef2a:	4619      	mov	r1, r3
 800ef2c:	484b      	ldr	r0, [pc, #300]	; (800f05c <fm_menu_config_units_vol+0x24c>)
 800ef2e:	f7fa fc6d 	bl	800980c <_txe_queue_send>
        break;
 800ef32:	e066      	b.n	800f002 <fm_menu_config_units_vol+0x1f2>
        case EVENT_KEY_DOWN:
            event_now = EVENT_LCD_REFRESH;
 800ef34:	2301      	movs	r3, #1
 800ef36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800ef3a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800ef3e:	2200      	movs	r2, #0
 800ef40:	4619      	mov	r1, r3
 800ef42:	4846      	ldr	r0, [pc, #280]	; (800f05c <fm_menu_config_units_vol+0x24c>)
 800ef44:	f7fa fc62 	bl	800980c <_txe_queue_send>
        break;
 800ef48:	e05b      	b.n	800f002 <fm_menu_config_units_vol+0x1f2>
        case EVENT_KEY_ENTER:
            if (correct_password)
 800ef4a:	4b43      	ldr	r3, [pc, #268]	; (800f058 <fm_menu_config_units_vol+0x248>)
 800ef4c:	781b      	ldrb	r3, [r3, #0]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d03a      	beq.n	800efc8 <fm_menu_config_units_vol+0x1b8>
            {
                if (fm_factory_get_units_vol().res == RES_0)
 800ef52:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800ef56:	4618      	mov	r0, r3
 800ef58:	f7fb f916 	bl	800a188 <fm_factory_get_units_vol>
 800ef5c:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d105      	bne.n	800ef70 <fm_menu_config_units_vol+0x160>
                {
                    fm_factory_modify_res_acm_ttl(RES_1, RES_1, RES_1);
 800ef64:	2201      	movs	r2, #1
 800ef66:	2101      	movs	r1, #1
 800ef68:	2001      	movs	r0, #1
 800ef6a:	f7fb fcf5 	bl	800a958 <fm_factory_modify_res_acm_ttl>
 800ef6e:	e02b      	b.n	800efc8 <fm_menu_config_units_vol+0x1b8>
                }
                else if (fm_factory_get_units_vol().res == RES_1)
 800ef70:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800ef74:	4618      	mov	r0, r3
 800ef76:	f7fb f907 	bl	800a188 <fm_factory_get_units_vol>
 800ef7a:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 800ef7e:	2b01      	cmp	r3, #1
 800ef80:	d105      	bne.n	800ef8e <fm_menu_config_units_vol+0x17e>
                {
                    fm_factory_modify_res_acm_ttl(RES_2, RES_2, RES_2);
 800ef82:	2202      	movs	r2, #2
 800ef84:	2102      	movs	r1, #2
 800ef86:	2002      	movs	r0, #2
 800ef88:	f7fb fce6 	bl	800a958 <fm_factory_modify_res_acm_ttl>
 800ef8c:	e01c      	b.n	800efc8 <fm_menu_config_units_vol+0x1b8>
                }
                else if (fm_factory_get_units_vol().res == RES_2)
 800ef8e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800ef92:	4618      	mov	r0, r3
 800ef94:	f7fb f8f8 	bl	800a188 <fm_factory_get_units_vol>
 800ef98:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 800ef9c:	2b02      	cmp	r3, #2
 800ef9e:	d105      	bne.n	800efac <fm_menu_config_units_vol+0x19c>
                {
                    fm_factory_modify_res_acm_ttl(RES_3, RES_3, RES_3);
 800efa0:	2203      	movs	r2, #3
 800efa2:	2103      	movs	r1, #3
 800efa4:	2003      	movs	r0, #3
 800efa6:	f7fb fcd7 	bl	800a958 <fm_factory_modify_res_acm_ttl>
 800efaa:	e00d      	b.n	800efc8 <fm_menu_config_units_vol+0x1b8>
                }
                else if (fm_factory_get_units_vol().res == RES_3)
 800efac:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800efb0:	4618      	mov	r0, r3
 800efb2:	f7fb f8e9 	bl	800a188 <fm_factory_get_units_vol>
 800efb6:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 800efba:	2b03      	cmp	r3, #3
 800efbc:	d104      	bne.n	800efc8 <fm_menu_config_units_vol+0x1b8>
                {
                    fm_factory_modify_res_acm_ttl(RES_0, RES_0, RES_0);
 800efbe:	2200      	movs	r2, #0
 800efc0:	2100      	movs	r1, #0
 800efc2:	2000      	movs	r0, #0
 800efc4:	f7fb fcc8 	bl	800a958 <fm_factory_modify_res_acm_ttl>
                }
            }
            event_now = EVENT_LCD_REFRESH;
 800efc8:	2301      	movs	r3, #1
 800efca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800efce:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800efd2:	2200      	movs	r2, #0
 800efd4:	4619      	mov	r1, r3
 800efd6:	4821      	ldr	r0, [pc, #132]	; (800f05c <fm_menu_config_units_vol+0x24c>)
 800efd8:	f7fa fc18 	bl	800980c <_txe_queue_send>
        break;
 800efdc:	e011      	b.n	800f002 <fm_menu_config_units_vol+0x1f2>
        case EVENT_KEY_ESC:
            new_exit = 1;
 800efde:	4b20      	ldr	r3, [pc, #128]	; (800f060 <fm_menu_config_units_vol+0x250>)
 800efe0:	2201      	movs	r2, #1
 800efe2:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_units_tim;
 800efe4:	4b1f      	ldr	r3, [pc, #124]	; (800f064 <fm_menu_config_units_vol+0x254>)
 800efe6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            event_now = EVENT_LCD_REFRESH;
 800efea:	2301      	movs	r3, #1
 800efec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800eff0:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800eff4:	2200      	movs	r2, #0
 800eff6:	4619      	mov	r1, r3
 800eff8:	4818      	ldr	r0, [pc, #96]	; (800f05c <fm_menu_config_units_vol+0x24c>)
 800effa:	f7fa fc07 	bl	800980c <_txe_queue_send>
        break;
 800effe:	e000      	b.n	800f002 <fm_menu_config_units_vol+0x1f2>
        default:
        break;
 800f000:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar unidades de volumen y resolucion\n";
 800f002:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800f006:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800f00a:	4a17      	ldr	r2, [pc, #92]	; (800f068 <fm_menu_config_units_vol+0x258>)
 800f00c:	461c      	mov	r4, r3
 800f00e:	4615      	mov	r5, r2
 800f010:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f012:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f014:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f016:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f018:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f01c:	c407      	stmia	r4!, {r0, r1, r2}
 800f01e:	7023      	strb	r3, [r4, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 800f020:	f107 0308 	add.w	r3, r7, #8
 800f024:	212d      	movs	r1, #45	; 0x2d
 800f026:	4618      	mov	r0, r3
 800f028:	f7fb f82c 	bl	800a084 <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 800f02c:	4b0c      	ldr	r3, [pc, #48]	; (800f060 <fm_menu_config_units_vol+0x250>)
 800f02e:	781b      	ldrb	r3, [r3, #0]
 800f030:	2b01      	cmp	r3, #1
 800f032:	d105      	bne.n	800f040 <fm_menu_config_units_vol+0x230>
    {
        new_entry = 1;
 800f034:	4b07      	ldr	r3, [pc, #28]	; (800f054 <fm_menu_config_units_vol+0x244>)
 800f036:	2201      	movs	r2, #1
 800f038:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800f03a:	4b09      	ldr	r3, [pc, #36]	; (800f060 <fm_menu_config_units_vol+0x250>)
 800f03c:	2200      	movs	r2, #0
 800f03e:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800f040:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
}
 800f044:	4618      	mov	r0, r3
 800f046:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800f04a:	46bd      	mov	sp, r7
 800f04c:	bdb0      	pop	{r4, r5, r7, pc}
 800f04e:	bf00      	nop
 800f050:	0800ee11 	.word	0x0800ee11
 800f054:	2000014a 	.word	0x2000014a
 800f058:	20001a52 	.word	0x20001a52
 800f05c:	20001068 	.word	0x20001068
 800f060:	20001a6e 	.word	0x20001a6e
 800f064:	0800ec11 	.word	0x0800ec11
 800f068:	0801068c 	.word	0x0801068c

0800f06c <fm_menu_show_acm_rate>:
 * unidades y puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_acm_rate(fm_event_t event_id)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b086      	sub	sp, #24
 800f070:	af00      	add	r7, sp, #0
 800f072:	4603      	mov	r3, r0
 800f074:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_rate;
 800f076:	4b34      	ldr	r3, [pc, #208]	; (800f148 <fm_menu_show_acm_rate+0xdc>)
 800f078:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 800f07a:	4b34      	ldr	r3, [pc, #208]	; (800f14c <fm_menu_show_acm_rate+0xe0>)
 800f07c:	781b      	ldrb	r3, [r3, #0]
 800f07e:	2b01      	cmp	r3, #1
 800f080:	d104      	bne.n	800f08c <fm_menu_show_acm_rate+0x20>
    {
        fm_lcd_clear();
 800f082:	f7fb fe80 	bl	800ad86 <fm_lcd_clear>
        new_entry = 0;
 800f086:	4b31      	ldr	r3, [pc, #196]	; (800f14c <fm_menu_show_acm_rate+0xe0>)
 800f088:	2200      	movs	r2, #0
 800f08a:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_acm_rate();
 800f08c:	f7fb fdb8 	bl	800ac00 <fm_lcd_acm_rate>
    fm_lcd_refresh();
 800f090:	f7fc f997 	bl	800b3c2 <fm_lcd_refresh>

    switch (event_id)
 800f094:	79fb      	ldrb	r3, [r7, #7]
 800f096:	3b02      	subs	r3, #2
 800f098:	2b03      	cmp	r3, #3
 800f09a:	d838      	bhi.n	800f10e <fm_menu_show_acm_rate+0xa2>
 800f09c:	a201      	add	r2, pc, #4	; (adr r2, 800f0a4 <fm_menu_show_acm_rate+0x38>)
 800f09e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0a2:	bf00      	nop
 800f0a4:	0800f0b5 	.word	0x0800f0b5
 800f0a8:	0800f0d3 	.word	0x0800f0d3
 800f0ac:	0800f10f 	.word	0x0800f10f
 800f0b0:	0800f0f1 	.word	0x0800f0f1
    {
        case EVENT_KEY_UP:
            new_exit = 1;
 800f0b4:	4b26      	ldr	r3, [pc, #152]	; (800f150 <fm_menu_show_acm_rate+0xe4>)
 800f0b6:	2201      	movs	r2, #1
 800f0b8:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 800f0ba:	4b26      	ldr	r3, [pc, #152]	; (800f154 <fm_menu_show_acm_rate+0xe8>)
 800f0bc:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 800f0be:	2301      	movs	r3, #1
 800f0c0:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800f0c2:	f107 0313 	add.w	r3, r7, #19
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	4619      	mov	r1, r3
 800f0ca:	4823      	ldr	r0, [pc, #140]	; (800f158 <fm_menu_show_acm_rate+0xec>)
 800f0cc:	f7fa fb9e 	bl	800980c <_txe_queue_send>
        break;
 800f0d0:	e01e      	b.n	800f110 <fm_menu_show_acm_rate+0xa4>
        case EVENT_KEY_DOWN:
            new_exit = 1;
 800f0d2:	4b1f      	ldr	r3, [pc, #124]	; (800f150 <fm_menu_show_acm_rate+0xe4>)
 800f0d4:	2201      	movs	r2, #1
 800f0d6:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_temp;
 800f0d8:	4b20      	ldr	r3, [pc, #128]	; (800f15c <fm_menu_show_acm_rate+0xf0>)
 800f0da:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 800f0dc:	2301      	movs	r3, #1
 800f0de:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800f0e0:	f107 0313 	add.w	r3, r7, #19
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	4619      	mov	r1, r3
 800f0e8:	481b      	ldr	r0, [pc, #108]	; (800f158 <fm_menu_show_acm_rate+0xec>)
 800f0ea:	f7fa fb8f 	bl	800980c <_txe_queue_send>
        break;
 800f0ee:	e00f      	b.n	800f110 <fm_menu_show_acm_rate+0xa4>
        case EVENT_KEY_ENTER:
        break;
        case EVENT_KEY_ESC:
            new_exit = 1;
 800f0f0:	4b17      	ldr	r3, [pc, #92]	; (800f150 <fm_menu_show_acm_rate+0xe4>)
 800f0f2:	2201      	movs	r2, #1
 800f0f4:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 800f0f6:	4b1a      	ldr	r3, [pc, #104]	; (800f160 <fm_menu_show_acm_rate+0xf4>)
 800f0f8:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 800f0fa:	2301      	movs	r3, #1
 800f0fc:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800f0fe:	f107 0313 	add.w	r3, r7, #19
 800f102:	2200      	movs	r2, #0
 800f104:	4619      	mov	r1, r3
 800f106:	4814      	ldr	r0, [pc, #80]	; (800f158 <fm_menu_show_acm_rate+0xec>)
 800f108:	f7fa fb80 	bl	800980c <_txe_queue_send>
        break;
 800f10c:	e000      	b.n	800f110 <fm_menu_show_acm_rate+0xa4>
        default:
        break;
 800f10e:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "acm_rate\n";
 800f110:	4a14      	ldr	r2, [pc, #80]	; (800f164 <fm_menu_show_acm_rate+0xf8>)
 800f112:	f107 0308 	add.w	r3, r7, #8
 800f116:	ca07      	ldmia	r2, {r0, r1, r2}
 800f118:	c303      	stmia	r3!, {r0, r1}
 800f11a:	801a      	strh	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 800f11c:	f107 0308 	add.w	r3, r7, #8
 800f120:	210a      	movs	r1, #10
 800f122:	4618      	mov	r0, r3
 800f124:	f7fa ffae 	bl	800a084 <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 800f128:	4b09      	ldr	r3, [pc, #36]	; (800f150 <fm_menu_show_acm_rate+0xe4>)
 800f12a:	781b      	ldrb	r3, [r3, #0]
 800f12c:	2b01      	cmp	r3, #1
 800f12e:	d105      	bne.n	800f13c <fm_menu_show_acm_rate+0xd0>
    {
        new_entry = 1;
 800f130:	4b06      	ldr	r3, [pc, #24]	; (800f14c <fm_menu_show_acm_rate+0xe0>)
 800f132:	2201      	movs	r2, #1
 800f134:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800f136:	4b06      	ldr	r3, [pc, #24]	; (800f150 <fm_menu_show_acm_rate+0xe4>)
 800f138:	2200      	movs	r2, #0
 800f13a:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800f13c:	697b      	ldr	r3, [r7, #20]
}
 800f13e:	4618      	mov	r0, r3
 800f140:	3718      	adds	r7, #24
 800f142:	46bd      	mov	sp, r7
 800f144:	bd80      	pop	{r7, pc}
 800f146:	bf00      	nop
 800f148:	0800f06d 	.word	0x0800f06d
 800f14c:	2000014b 	.word	0x2000014b
 800f150:	20001a6f 	.word	0x20001a6f
 800f154:	0800f46d 	.word	0x0800f46d
 800f158:	20001068 	.word	0x20001068
 800f15c:	0800f169 	.word	0x0800f169
 800f160:	0800e961 	.word	0x0800e961
 800f164:	080106bc 	.word	0x080106bc

0800f168 <fm_menu_show_acm_temp>:
 * la pantalla.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_acm_temp(fm_event_t event_id)
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b086      	sub	sp, #24
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	4603      	mov	r3, r0
 800f170:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_temp;
 800f172:	4b34      	ldr	r3, [pc, #208]	; (800f244 <fm_menu_show_acm_temp+0xdc>)
 800f174:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 800f176:	4b34      	ldr	r3, [pc, #208]	; (800f248 <fm_menu_show_acm_temp+0xe0>)
 800f178:	781b      	ldrb	r3, [r3, #0]
 800f17a:	2b01      	cmp	r3, #1
 800f17c:	d104      	bne.n	800f188 <fm_menu_show_acm_temp+0x20>
    {
        fm_lcd_clear();
 800f17e:	f7fb fe02 	bl	800ad86 <fm_lcd_clear>
        new_entry = 0;
 800f182:	4b31      	ldr	r3, [pc, #196]	; (800f248 <fm_menu_show_acm_temp+0xe0>)
 800f184:	2200      	movs	r2, #0
 800f186:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_acm_temp();
 800f188:	f7fb fda5 	bl	800acd6 <fm_lcd_acm_temp>
    fm_lcd_refresh();
 800f18c:	f7fc f919 	bl	800b3c2 <fm_lcd_refresh>

    switch (event_id)
 800f190:	79fb      	ldrb	r3, [r7, #7]
 800f192:	3b02      	subs	r3, #2
 800f194:	2b03      	cmp	r3, #3
 800f196:	d838      	bhi.n	800f20a <fm_menu_show_acm_temp+0xa2>
 800f198:	a201      	add	r2, pc, #4	; (adr r2, 800f1a0 <fm_menu_show_acm_temp+0x38>)
 800f19a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f19e:	bf00      	nop
 800f1a0:	0800f1b1 	.word	0x0800f1b1
 800f1a4:	0800f1cf 	.word	0x0800f1cf
 800f1a8:	0800f20b 	.word	0x0800f20b
 800f1ac:	0800f1ed 	.word	0x0800f1ed
    {
        case EVENT_KEY_UP:
            new_exit = 1;
 800f1b0:	4b26      	ldr	r3, [pc, #152]	; (800f24c <fm_menu_show_acm_temp+0xe4>)
 800f1b2:	2201      	movs	r2, #1
 800f1b4:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_rate;
 800f1b6:	4b26      	ldr	r3, [pc, #152]	; (800f250 <fm_menu_show_acm_temp+0xe8>)
 800f1b8:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 800f1ba:	2301      	movs	r3, #1
 800f1bc:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800f1be:	f107 0313 	add.w	r3, r7, #19
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	4619      	mov	r1, r3
 800f1c6:	4823      	ldr	r0, [pc, #140]	; (800f254 <fm_menu_show_acm_temp+0xec>)
 800f1c8:	f7fa fb20 	bl	800980c <_txe_queue_send>
        break;
 800f1cc:	e01e      	b.n	800f20c <fm_menu_show_acm_temp+0xa4>
        case EVENT_KEY_DOWN:
            new_exit = 1;
 800f1ce:	4b1f      	ldr	r3, [pc, #124]	; (800f24c <fm_menu_show_acm_temp+0xe4>)
 800f1d0:	2201      	movs	r2, #1
 800f1d2:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_date_hour;
 800f1d4:	4b20      	ldr	r3, [pc, #128]	; (800f258 <fm_menu_show_acm_temp+0xf0>)
 800f1d6:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 800f1d8:	2301      	movs	r3, #1
 800f1da:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800f1dc:	f107 0313 	add.w	r3, r7, #19
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	4619      	mov	r1, r3
 800f1e4:	481b      	ldr	r0, [pc, #108]	; (800f254 <fm_menu_show_acm_temp+0xec>)
 800f1e6:	f7fa fb11 	bl	800980c <_txe_queue_send>
        break;
 800f1ea:	e00f      	b.n	800f20c <fm_menu_show_acm_temp+0xa4>
        case EVENT_KEY_ENTER:
        break;
        case EVENT_KEY_ESC:
            new_exit = 1;
 800f1ec:	4b17      	ldr	r3, [pc, #92]	; (800f24c <fm_menu_show_acm_temp+0xe4>)
 800f1ee:	2201      	movs	r2, #1
 800f1f0:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 800f1f2:	4b1a      	ldr	r3, [pc, #104]	; (800f25c <fm_menu_show_acm_temp+0xf4>)
 800f1f4:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 800f1f6:	2301      	movs	r3, #1
 800f1f8:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800f1fa:	f107 0313 	add.w	r3, r7, #19
 800f1fe:	2200      	movs	r2, #0
 800f200:	4619      	mov	r1, r3
 800f202:	4814      	ldr	r0, [pc, #80]	; (800f254 <fm_menu_show_acm_temp+0xec>)
 800f204:	f7fa fb02 	bl	800980c <_txe_queue_send>
        break;
 800f208:	e000      	b.n	800f20c <fm_menu_show_acm_temp+0xa4>
        default:
        break;
 800f20a:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "acm_temp\n";
 800f20c:	4a14      	ldr	r2, [pc, #80]	; (800f260 <fm_menu_show_acm_temp+0xf8>)
 800f20e:	f107 0308 	add.w	r3, r7, #8
 800f212:	ca07      	ldmia	r2, {r0, r1, r2}
 800f214:	c303      	stmia	r3!, {r0, r1}
 800f216:	801a      	strh	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 800f218:	f107 0308 	add.w	r3, r7, #8
 800f21c:	210a      	movs	r1, #10
 800f21e:	4618      	mov	r0, r3
 800f220:	f7fa ff30 	bl	800a084 <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 800f224:	4b09      	ldr	r3, [pc, #36]	; (800f24c <fm_menu_show_acm_temp+0xe4>)
 800f226:	781b      	ldrb	r3, [r3, #0]
 800f228:	2b01      	cmp	r3, #1
 800f22a:	d105      	bne.n	800f238 <fm_menu_show_acm_temp+0xd0>
    {
        new_entry = 1;
 800f22c:	4b06      	ldr	r3, [pc, #24]	; (800f248 <fm_menu_show_acm_temp+0xe0>)
 800f22e:	2201      	movs	r2, #1
 800f230:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800f232:	4b06      	ldr	r3, [pc, #24]	; (800f24c <fm_menu_show_acm_temp+0xe4>)
 800f234:	2200      	movs	r2, #0
 800f236:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800f238:	697b      	ldr	r3, [r7, #20]
}
 800f23a:	4618      	mov	r0, r3
 800f23c:	3718      	adds	r7, #24
 800f23e:	46bd      	mov	sp, r7
 800f240:	bd80      	pop	{r7, pc}
 800f242:	bf00      	nop
 800f244:	0800f169 	.word	0x0800f169
 800f248:	2000014c 	.word	0x2000014c
 800f24c:	20001a70 	.word	0x20001a70
 800f250:	0800f06d 	.word	0x0800f06d
 800f254:	20001068 	.word	0x20001068
 800f258:	0800f265 	.word	0x0800f265
 800f25c:	0800e961 	.word	0x0800e961
 800f260:	080106c8 	.word	0x080106c8

0800f264 <fm_menu_show_date_hour>:
 * unidades y puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_date_hour(fm_event_t event_id)
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b086      	sub	sp, #24
 800f268:	af00      	add	r7, sp, #0
 800f26a:	4603      	mov	r3, r0
 800f26c:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_date_hour;
 800f26e:	4b30      	ldr	r3, [pc, #192]	; (800f330 <fm_menu_show_date_hour+0xcc>)
 800f270:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 800f272:	4b30      	ldr	r3, [pc, #192]	; (800f334 <fm_menu_show_date_hour+0xd0>)
 800f274:	781b      	ldrb	r3, [r3, #0]
 800f276:	2b01      	cmp	r3, #1
 800f278:	d104      	bne.n	800f284 <fm_menu_show_date_hour+0x20>
    {
        fm_lcd_clear();
 800f27a:	f7fb fd84 	bl	800ad86 <fm_lcd_clear>
        new_entry = 0;
 800f27e:	4b2d      	ldr	r3, [pc, #180]	; (800f334 <fm_menu_show_date_hour+0xd0>)
 800f280:	2200      	movs	r2, #0
 800f282:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_date_hour(USER, event_id, DAY);
 800f284:	79fb      	ldrb	r3, [r7, #7]
 800f286:	2200      	movs	r2, #0
 800f288:	4619      	mov	r1, r3
 800f28a:	2000      	movs	r0, #0
 800f28c:	f7fb fd82 	bl	800ad94 <fm_lcd_date_hour>

    fm_lcd_refresh();
 800f290:	f7fc f897 	bl	800b3c2 <fm_lcd_refresh>

    switch (event_id)
 800f294:	79fb      	ldrb	r3, [r7, #7]
 800f296:	3b02      	subs	r3, #2
 800f298:	2b03      	cmp	r3, #3
 800f29a:	d829      	bhi.n	800f2f0 <fm_menu_show_date_hour+0x8c>
 800f29c:	a201      	add	r2, pc, #4	; (adr r2, 800f2a4 <fm_menu_show_date_hour+0x40>)
 800f29e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2a2:	bf00      	nop
 800f2a4:	0800f2b5 	.word	0x0800f2b5
 800f2a8:	0800f2f1 	.word	0x0800f2f1
 800f2ac:	0800f2f1 	.word	0x0800f2f1
 800f2b0:	0800f2d3 	.word	0x0800f2d3
    {
        case EVENT_KEY_UP:
            new_exit = 1;
 800f2b4:	4b20      	ldr	r3, [pc, #128]	; (800f338 <fm_menu_show_date_hour+0xd4>)
 800f2b6:	2201      	movs	r2, #1
 800f2b8:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_temp;
 800f2ba:	4b20      	ldr	r3, [pc, #128]	; (800f33c <fm_menu_show_date_hour+0xd8>)
 800f2bc:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 800f2be:	2301      	movs	r3, #1
 800f2c0:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800f2c2:	f107 0313 	add.w	r3, r7, #19
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	4619      	mov	r1, r3
 800f2ca:	481d      	ldr	r0, [pc, #116]	; (800f340 <fm_menu_show_date_hour+0xdc>)
 800f2cc:	f7fa fa9e 	bl	800980c <_txe_queue_send>
        break;
 800f2d0:	e00f      	b.n	800f2f2 <fm_menu_show_date_hour+0x8e>
        case EVENT_KEY_DOWN:
        break;
        case EVENT_KEY_ENTER:
        break;
        case EVENT_KEY_ESC:
            new_exit = 1;
 800f2d2:	4b19      	ldr	r3, [pc, #100]	; (800f338 <fm_menu_show_date_hour+0xd4>)
 800f2d4:	2201      	movs	r2, #1
 800f2d6:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 800f2d8:	4b1a      	ldr	r3, [pc, #104]	; (800f344 <fm_menu_show_date_hour+0xe0>)
 800f2da:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 800f2dc:	2301      	movs	r3, #1
 800f2de:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800f2e0:	f107 0313 	add.w	r3, r7, #19
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	4619      	mov	r1, r3
 800f2e8:	4815      	ldr	r0, [pc, #84]	; (800f340 <fm_menu_show_date_hour+0xdc>)
 800f2ea:	f7fa fa8f 	bl	800980c <_txe_queue_send>
        break;
 800f2ee:	e000      	b.n	800f2f2 <fm_menu_show_date_hour+0x8e>
        default:
        break;
 800f2f0:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer3[] = "date_hour\n";
 800f2f2:	4a15      	ldr	r2, [pc, #84]	; (800f348 <fm_menu_show_date_hour+0xe4>)
 800f2f4:	f107 0308 	add.w	r3, r7, #8
 800f2f8:	ca07      	ldmia	r2, {r0, r1, r2}
 800f2fa:	c303      	stmia	r3!, {r0, r1}
 800f2fc:	801a      	strh	r2, [r3, #0]
 800f2fe:	3302      	adds	r3, #2
 800f300:	0c12      	lsrs	r2, r2, #16
 800f302:	701a      	strb	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer3, sizeof(msg_buffer3));
 800f304:	f107 0308 	add.w	r3, r7, #8
 800f308:	210b      	movs	r1, #11
 800f30a:	4618      	mov	r0, r3
 800f30c:	f7fa feba 	bl	800a084 <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 800f310:	4b09      	ldr	r3, [pc, #36]	; (800f338 <fm_menu_show_date_hour+0xd4>)
 800f312:	781b      	ldrb	r3, [r3, #0]
 800f314:	2b01      	cmp	r3, #1
 800f316:	d105      	bne.n	800f324 <fm_menu_show_date_hour+0xc0>
    {
        new_entry = 1;
 800f318:	4b06      	ldr	r3, [pc, #24]	; (800f334 <fm_menu_show_date_hour+0xd0>)
 800f31a:	2201      	movs	r2, #1
 800f31c:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800f31e:	4b06      	ldr	r3, [pc, #24]	; (800f338 <fm_menu_show_date_hour+0xd4>)
 800f320:	2200      	movs	r2, #0
 800f322:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800f324:	697b      	ldr	r3, [r7, #20]
}
 800f326:	4618      	mov	r0, r3
 800f328:	3718      	adds	r7, #24
 800f32a:	46bd      	mov	sp, r7
 800f32c:	bd80      	pop	{r7, pc}
 800f32e:	bf00      	nop
 800f330:	0800f265 	.word	0x0800f265
 800f334:	2000014d 	.word	0x2000014d
 800f338:	20001a71 	.word	0x20001a71
 800f33c:	0800f169 	.word	0x0800f169
 800f340:	20001068 	.word	0x20001068
 800f344:	0800e961 	.word	0x0800e961
 800f348:	080106d4 	.word	0x080106d4

0800f34c <fm_menu_show_init>:

ptr_ret_menu_t fm_menu_show_init(fm_event_t event_id)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b086      	sub	sp, #24
 800f350:	af00      	add	r7, sp, #0
 800f352:	4603      	mov	r3, r0
 800f354:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static uint8_t counter = 0;
    const  uint8_t counter_max = 30;
 800f356:	231e      	movs	r3, #30
 800f358:	74fb      	strb	r3, [r7, #19]

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_init;
 800f35a:	4b3d      	ldr	r3, [pc, #244]	; (800f450 <fm_menu_show_init+0x104>)
 800f35c:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 800f35e:	4b3d      	ldr	r3, [pc, #244]	; (800f454 <fm_menu_show_init+0x108>)
 800f360:	781b      	ldrb	r3, [r3, #0]
 800f362:	2b01      	cmp	r3, #1
 800f364:	d106      	bne.n	800f374 <fm_menu_show_init+0x28>
    {
        fm_lcd_init();
 800f366:	f7fb fee9 	bl	800b13c <fm_lcd_init>
        fm_lcd_clear();
 800f36a:	f7fb fd0c 	bl	800ad86 <fm_lcd_clear>
        new_entry = 0;
 800f36e:	4b39      	ldr	r3, [pc, #228]	; (800f454 <fm_menu_show_init+0x108>)
 800f370:	2200      	movs	r2, #0
 800f372:	701a      	strb	r2, [r3, #0]
    }

    pcf8553_write_all(0xFF); // @suppress("Avoid magic numbers")
 800f374:	20ff      	movs	r0, #255	; 0xff
 800f376:	f7fe f9e3 	bl	800d740 <pcf8553_write_all>

    switch (event_id)
 800f37a:	79fb      	ldrb	r3, [r7, #7]
 800f37c:	3b02      	subs	r3, #2
 800f37e:	2b03      	cmp	r3, #3
 800f380:	d81c      	bhi.n	800f3bc <fm_menu_show_init+0x70>
 800f382:	a201      	add	r2, pc, #4	; (adr r2, 800f388 <fm_menu_show_init+0x3c>)
 800f384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f388:	0800f411 	.word	0x0800f411
 800f38c:	0800f411 	.word	0x0800f411
 800f390:	0800f399 	.word	0x0800f399
 800f394:	0800f411 	.word	0x0800f411
        case EVENT_KEY_UP:
        break;
        case EVENT_KEY_DOWN:
        break;
        case EVENT_KEY_ENTER:
            tx_queue_flush(&event_queue_ptr);
 800f398:	482f      	ldr	r0, [pc, #188]	; (800f458 <fm_menu_show_init+0x10c>)
 800f39a:	f7fa f9cf 	bl	800973c <_txe_queue_flush>
            ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
 800f39e:	4b2f      	ldr	r3, [pc, #188]	; (800f45c <fm_menu_show_init+0x110>)
 800f3a0:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 800f3a2:	2301      	movs	r3, #1
 800f3a4:	74bb      	strb	r3, [r7, #18]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800f3a6:	f107 0312 	add.w	r3, r7, #18
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	4619      	mov	r1, r3
 800f3ae:	482a      	ldr	r0, [pc, #168]	; (800f458 <fm_menu_show_init+0x10c>)
 800f3b0:	f7fa fa2c 	bl	800980c <_txe_queue_send>
            new_exit = 1;
 800f3b4:	4b2a      	ldr	r3, [pc, #168]	; (800f460 <fm_menu_show_init+0x114>)
 800f3b6:	2201      	movs	r2, #1
 800f3b8:	701a      	strb	r2, [r3, #0]
        break;
 800f3ba:	e02a      	b.n	800f412 <fm_menu_show_init+0xc6>
        case EVENT_KEY_ESC:
        break;
        default:
            if(counter < counter_max)
 800f3bc:	4b29      	ldr	r3, [pc, #164]	; (800f464 <fm_menu_show_init+0x118>)
 800f3be:	781b      	ldrb	r3, [r3, #0]
 800f3c0:	7cfa      	ldrb	r2, [r7, #19]
 800f3c2:	429a      	cmp	r2, r3
 800f3c4:	d912      	bls.n	800f3ec <fm_menu_show_init+0xa0>
            {
                HAL_Delay(100); // @suppress("Avoid magic numbers")
 800f3c6:	2064      	movs	r0, #100	; 0x64
 800f3c8:	f7f2 f8fc 	bl	80015c4 <HAL_Delay>
                counter++;
 800f3cc:	4b25      	ldr	r3, [pc, #148]	; (800f464 <fm_menu_show_init+0x118>)
 800f3ce:	781b      	ldrb	r3, [r3, #0]
 800f3d0:	3301      	adds	r3, #1
 800f3d2:	b2da      	uxtb	r2, r3
 800f3d4:	4b23      	ldr	r3, [pc, #140]	; (800f464 <fm_menu_show_init+0x118>)
 800f3d6:	701a      	strb	r2, [r3, #0]
                event_now = EVENT_LCD_REFRESH;
 800f3d8:	2301      	movs	r3, #1
 800f3da:	74bb      	strb	r3, [r7, #18]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800f3dc:	f107 0312 	add.w	r3, r7, #18
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	4619      	mov	r1, r3
 800f3e4:	481c      	ldr	r0, [pc, #112]	; (800f458 <fm_menu_show_init+0x10c>)
 800f3e6:	f7fa fa11 	bl	800980c <_txe_queue_send>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
                event_now = EVENT_LCD_REFRESH;
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
                new_exit = 1;
            }
        break;
 800f3ea:	e012      	b.n	800f412 <fm_menu_show_init+0xc6>
                tx_queue_flush(&event_queue_ptr);
 800f3ec:	481a      	ldr	r0, [pc, #104]	; (800f458 <fm_menu_show_init+0x10c>)
 800f3ee:	f7fa f9a5 	bl	800973c <_txe_queue_flush>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
 800f3f2:	4b1a      	ldr	r3, [pc, #104]	; (800f45c <fm_menu_show_init+0x110>)
 800f3f4:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 800f3f6:	2301      	movs	r3, #1
 800f3f8:	74bb      	strb	r3, [r7, #18]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800f3fa:	f107 0312 	add.w	r3, r7, #18
 800f3fe:	2200      	movs	r2, #0
 800f400:	4619      	mov	r1, r3
 800f402:	4815      	ldr	r0, [pc, #84]	; (800f458 <fm_menu_show_init+0x10c>)
 800f404:	f7fa fa02 	bl	800980c <_txe_queue_send>
                new_exit = 1;
 800f408:	4b15      	ldr	r3, [pc, #84]	; (800f460 <fm_menu_show_init+0x114>)
 800f40a:	2201      	movs	r2, #1
 800f40c:	701a      	strb	r2, [r3, #0]
        break;
 800f40e:	e000      	b.n	800f412 <fm_menu_show_init+0xc6>
        break;
 800f410:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "version\n";
 800f412:	4a15      	ldr	r2, [pc, #84]	; (800f468 <fm_menu_show_init+0x11c>)
 800f414:	f107 0308 	add.w	r3, r7, #8
 800f418:	ca07      	ldmia	r2, {r0, r1, r2}
 800f41a:	c303      	stmia	r3!, {r0, r1}
 800f41c:	701a      	strb	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 800f41e:	f107 0308 	add.w	r3, r7, #8
 800f422:	2109      	movs	r1, #9
 800f424:	4618      	mov	r0, r3
 800f426:	f7fa fe2d 	bl	800a084 <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 800f42a:	4b0d      	ldr	r3, [pc, #52]	; (800f460 <fm_menu_show_init+0x114>)
 800f42c:	781b      	ldrb	r3, [r3, #0]
 800f42e:	2b01      	cmp	r3, #1
 800f430:	d108      	bne.n	800f444 <fm_menu_show_init+0xf8>
    {
        counter = 0;
 800f432:	4b0c      	ldr	r3, [pc, #48]	; (800f464 <fm_menu_show_init+0x118>)
 800f434:	2200      	movs	r2, #0
 800f436:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 800f438:	4b06      	ldr	r3, [pc, #24]	; (800f454 <fm_menu_show_init+0x108>)
 800f43a:	2201      	movs	r2, #1
 800f43c:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800f43e:	4b08      	ldr	r3, [pc, #32]	; (800f460 <fm_menu_show_init+0x114>)
 800f440:	2200      	movs	r2, #0
 800f442:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800f444:	697b      	ldr	r3, [r7, #20]
}
 800f446:	4618      	mov	r0, r3
 800f448:	3718      	adds	r7, #24
 800f44a:	46bd      	mov	sp, r7
 800f44c:	bd80      	pop	{r7, pc}
 800f44e:	bf00      	nop
 800f450:	0800f34d 	.word	0x0800f34d
 800f454:	2000014e 	.word	0x2000014e
 800f458:	20001068 	.word	0x20001068
 800f45c:	0800f545 	.word	0x0800f545
 800f460:	20001a72 	.word	0x20001a72
 800f464:	20001a73 	.word	0x20001a73
 800f468:	080106e0 	.word	0x080106e0

0800f46c <fm_menu_show_ttl_rate>:
 * unidades y puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_ttl_rate(fm_event_t event_id)
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b086      	sub	sp, #24
 800f470:	af00      	add	r7, sp, #0
 800f472:	4603      	mov	r3, r0
 800f474:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 800f476:	4b2c      	ldr	r3, [pc, #176]	; (800f528 <fm_menu_show_ttl_rate+0xbc>)
 800f478:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 800f47a:	4b2c      	ldr	r3, [pc, #176]	; (800f52c <fm_menu_show_ttl_rate+0xc0>)
 800f47c:	781b      	ldrb	r3, [r3, #0]
 800f47e:	2b01      	cmp	r3, #1
 800f480:	d104      	bne.n	800f48c <fm_menu_show_ttl_rate+0x20>
    {
        fm_lcd_clear();
 800f482:	f7fb fc80 	bl	800ad86 <fm_lcd_clear>
        new_entry = 0;
 800f486:	4b29      	ldr	r3, [pc, #164]	; (800f52c <fm_menu_show_ttl_rate+0xc0>)
 800f488:	2200      	movs	r2, #0
 800f48a:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_ttl_rate();
 800f48c:	f7fb ff9f 	bl	800b3ce <fm_lcd_ttl_rate>
    fm_lcd_refresh();
 800f490:	f7fb ff97 	bl	800b3c2 <fm_lcd_refresh>

    switch (event_id)
 800f494:	79fb      	ldrb	r3, [r7, #7]
 800f496:	3b02      	subs	r3, #2
 800f498:	2b03      	cmp	r3, #3
 800f49a:	d829      	bhi.n	800f4f0 <fm_menu_show_ttl_rate+0x84>
 800f49c:	a201      	add	r2, pc, #4	; (adr r2, 800f4a4 <fm_menu_show_ttl_rate+0x38>)
 800f49e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4a2:	bf00      	nop
 800f4a4:	0800f4f1 	.word	0x0800f4f1
 800f4a8:	0800f4b5 	.word	0x0800f4b5
 800f4ac:	0800f4f1 	.word	0x0800f4f1
 800f4b0:	0800f4d3 	.word	0x0800f4d3
    {
        case EVENT_KEY_UP:
        break;
        case EVENT_KEY_DOWN:
            new_exit = 1;
 800f4b4:	4b1e      	ldr	r3, [pc, #120]	; (800f530 <fm_menu_show_ttl_rate+0xc4>)
 800f4b6:	2201      	movs	r2, #1
 800f4b8:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_rate;
 800f4ba:	4b1e      	ldr	r3, [pc, #120]	; (800f534 <fm_menu_show_ttl_rate+0xc8>)
 800f4bc:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 800f4be:	2301      	movs	r3, #1
 800f4c0:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800f4c2:	f107 0313 	add.w	r3, r7, #19
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	4619      	mov	r1, r3
 800f4ca:	481b      	ldr	r0, [pc, #108]	; (800f538 <fm_menu_show_ttl_rate+0xcc>)
 800f4cc:	f7fa f99e 	bl	800980c <_txe_queue_send>
        break;
 800f4d0:	e00f      	b.n	800f4f2 <fm_menu_show_ttl_rate+0x86>
        case EVENT_KEY_ENTER:
        break;
        case EVENT_KEY_ESC:
            new_exit = 1;
 800f4d2:	4b17      	ldr	r3, [pc, #92]	; (800f530 <fm_menu_show_ttl_rate+0xc4>)
 800f4d4:	2201      	movs	r2, #1
 800f4d6:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 800f4d8:	4b18      	ldr	r3, [pc, #96]	; (800f53c <fm_menu_show_ttl_rate+0xd0>)
 800f4da:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 800f4dc:	2301      	movs	r3, #1
 800f4de:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800f4e0:	f107 0313 	add.w	r3, r7, #19
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	4619      	mov	r1, r3
 800f4e8:	4813      	ldr	r0, [pc, #76]	; (800f538 <fm_menu_show_ttl_rate+0xcc>)
 800f4ea:	f7fa f98f 	bl	800980c <_txe_queue_send>
        break;
 800f4ee:	e000      	b.n	800f4f2 <fm_menu_show_ttl_rate+0x86>
        default:
        break;
 800f4f0:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "ttl_rate\n";
 800f4f2:	4a13      	ldr	r2, [pc, #76]	; (800f540 <fm_menu_show_ttl_rate+0xd4>)
 800f4f4:	f107 0308 	add.w	r3, r7, #8
 800f4f8:	ca07      	ldmia	r2, {r0, r1, r2}
 800f4fa:	c303      	stmia	r3!, {r0, r1}
 800f4fc:	801a      	strh	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 800f4fe:	f107 0308 	add.w	r3, r7, #8
 800f502:	210a      	movs	r1, #10
 800f504:	4618      	mov	r0, r3
 800f506:	f7fa fdbd 	bl	800a084 <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 800f50a:	4b09      	ldr	r3, [pc, #36]	; (800f530 <fm_menu_show_ttl_rate+0xc4>)
 800f50c:	781b      	ldrb	r3, [r3, #0]
 800f50e:	2b01      	cmp	r3, #1
 800f510:	d105      	bne.n	800f51e <fm_menu_show_ttl_rate+0xb2>
    {
        new_entry = 1;
 800f512:	4b06      	ldr	r3, [pc, #24]	; (800f52c <fm_menu_show_ttl_rate+0xc0>)
 800f514:	2201      	movs	r2, #1
 800f516:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800f518:	4b05      	ldr	r3, [pc, #20]	; (800f530 <fm_menu_show_ttl_rate+0xc4>)
 800f51a:	2200      	movs	r2, #0
 800f51c:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800f51e:	697b      	ldr	r3, [r7, #20]
}
 800f520:	4618      	mov	r0, r3
 800f522:	3718      	adds	r7, #24
 800f524:	46bd      	mov	sp, r7
 800f526:	bd80      	pop	{r7, pc}
 800f528:	0800f46d 	.word	0x0800f46d
 800f52c:	2000014f 	.word	0x2000014f
 800f530:	20001a74 	.word	0x20001a74
 800f534:	0800f06d 	.word	0x0800f06d
 800f538:	20001068 	.word	0x20001068
 800f53c:	0800e961 	.word	0x0800e961
 800f540:	080106ec 	.word	0x080106ec

0800f544 <fm_menu_show_version>:
 * pantalla, con puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_version(fm_event_t event_id)
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b086      	sub	sp, #24
 800f548:	af00      	add	r7, sp, #0
 800f54a:	4603      	mov	r3, r0
 800f54c:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static uint8_t counter = 0;
    const  uint8_t counter_max = 30;
 800f54e:	231e      	movs	r3, #30
 800f550:	74fb      	strb	r3, [r7, #19]

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
 800f552:	4b3e      	ldr	r3, [pc, #248]	; (800f64c <fm_menu_show_version+0x108>)
 800f554:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 800f556:	4b3e      	ldr	r3, [pc, #248]	; (800f650 <fm_menu_show_version+0x10c>)
 800f558:	781b      	ldrb	r3, [r3, #0]
 800f55a:	2b01      	cmp	r3, #1
 800f55c:	d104      	bne.n	800f568 <fm_menu_show_version+0x24>
    {
        fm_lcd_clear();
 800f55e:	f7fb fc12 	bl	800ad86 <fm_lcd_clear>
        new_entry = 0;
 800f562:	4b3b      	ldr	r3, [pc, #236]	; (800f650 <fm_menu_show_version+0x10c>)
 800f564:	2200      	movs	r2, #0
 800f566:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_version(PNT_3, PNT_4);
 800f568:	2104      	movs	r1, #4
 800f56a:	2003      	movs	r0, #3
 800f56c:	f7fc f8b6 	bl	800b6dc <fm_lcd_version>
    fm_lcd_refresh();
 800f570:	f7fb ff27 	bl	800b3c2 <fm_lcd_refresh>

    switch (event_id)
 800f574:	79fb      	ldrb	r3, [r7, #7]
 800f576:	3b02      	subs	r3, #2
 800f578:	2b03      	cmp	r3, #3
 800f57a:	d81d      	bhi.n	800f5b8 <fm_menu_show_version+0x74>
 800f57c:	a201      	add	r2, pc, #4	; (adr r2, 800f584 <fm_menu_show_version+0x40>)
 800f57e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f582:	bf00      	nop
 800f584:	0800f60d 	.word	0x0800f60d
 800f588:	0800f60d 	.word	0x0800f60d
 800f58c:	0800f595 	.word	0x0800f595
 800f590:	0800f60d 	.word	0x0800f60d
        case EVENT_KEY_UP:
        break;
        case EVENT_KEY_DOWN:
        break;
        case EVENT_KEY_ENTER:
            tx_queue_flush(&event_queue_ptr);
 800f594:	482f      	ldr	r0, [pc, #188]	; (800f654 <fm_menu_show_version+0x110>)
 800f596:	f7fa f8d1 	bl	800973c <_txe_queue_flush>
            ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 800f59a:	4b2f      	ldr	r3, [pc, #188]	; (800f658 <fm_menu_show_version+0x114>)
 800f59c:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 800f59e:	2301      	movs	r3, #1
 800f5a0:	74bb      	strb	r3, [r7, #18]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800f5a2:	f107 0312 	add.w	r3, r7, #18
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	4619      	mov	r1, r3
 800f5aa:	482a      	ldr	r0, [pc, #168]	; (800f654 <fm_menu_show_version+0x110>)
 800f5ac:	f7fa f92e 	bl	800980c <_txe_queue_send>
            new_exit = 1;
 800f5b0:	4b2a      	ldr	r3, [pc, #168]	; (800f65c <fm_menu_show_version+0x118>)
 800f5b2:	2201      	movs	r2, #1
 800f5b4:	701a      	strb	r2, [r3, #0]
        break;
 800f5b6:	e02a      	b.n	800f60e <fm_menu_show_version+0xca>
        case EVENT_KEY_ESC:
        break;
        default:
            if(counter < counter_max)
 800f5b8:	4b29      	ldr	r3, [pc, #164]	; (800f660 <fm_menu_show_version+0x11c>)
 800f5ba:	781b      	ldrb	r3, [r3, #0]
 800f5bc:	7cfa      	ldrb	r2, [r7, #19]
 800f5be:	429a      	cmp	r2, r3
 800f5c0:	d912      	bls.n	800f5e8 <fm_menu_show_version+0xa4>
            {
                HAL_Delay(100); // @suppress("Avoid magic numbers")
 800f5c2:	2064      	movs	r0, #100	; 0x64
 800f5c4:	f7f1 fffe 	bl	80015c4 <HAL_Delay>
                counter++;
 800f5c8:	4b25      	ldr	r3, [pc, #148]	; (800f660 <fm_menu_show_version+0x11c>)
 800f5ca:	781b      	ldrb	r3, [r3, #0]
 800f5cc:	3301      	adds	r3, #1
 800f5ce:	b2da      	uxtb	r2, r3
 800f5d0:	4b23      	ldr	r3, [pc, #140]	; (800f660 <fm_menu_show_version+0x11c>)
 800f5d2:	701a      	strb	r2, [r3, #0]
                event_now = EVENT_LCD_REFRESH;
 800f5d4:	2301      	movs	r3, #1
 800f5d6:	74bb      	strb	r3, [r7, #18]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800f5d8:	f107 0312 	add.w	r3, r7, #18
 800f5dc:	2200      	movs	r2, #0
 800f5de:	4619      	mov	r1, r3
 800f5e0:	481c      	ldr	r0, [pc, #112]	; (800f654 <fm_menu_show_version+0x110>)
 800f5e2:	f7fa f913 	bl	800980c <_txe_queue_send>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
                event_now = EVENT_LCD_REFRESH;
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
                new_exit = 1;
            }
        break;
 800f5e6:	e012      	b.n	800f60e <fm_menu_show_version+0xca>
                tx_queue_flush(&event_queue_ptr);
 800f5e8:	481a      	ldr	r0, [pc, #104]	; (800f654 <fm_menu_show_version+0x110>)
 800f5ea:	f7fa f8a7 	bl	800973c <_txe_queue_flush>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 800f5ee:	4b1a      	ldr	r3, [pc, #104]	; (800f658 <fm_menu_show_version+0x114>)
 800f5f0:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 800f5f2:	2301      	movs	r3, #1
 800f5f4:	74bb      	strb	r3, [r7, #18]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800f5f6:	f107 0312 	add.w	r3, r7, #18
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	4619      	mov	r1, r3
 800f5fe:	4815      	ldr	r0, [pc, #84]	; (800f654 <fm_menu_show_version+0x110>)
 800f600:	f7fa f904 	bl	800980c <_txe_queue_send>
                new_exit = 1;
 800f604:	4b15      	ldr	r3, [pc, #84]	; (800f65c <fm_menu_show_version+0x118>)
 800f606:	2201      	movs	r2, #1
 800f608:	701a      	strb	r2, [r3, #0]
        break;
 800f60a:	e000      	b.n	800f60e <fm_menu_show_version+0xca>
        break;
 800f60c:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "version\n";
 800f60e:	4a15      	ldr	r2, [pc, #84]	; (800f664 <fm_menu_show_version+0x120>)
 800f610:	f107 0308 	add.w	r3, r7, #8
 800f614:	ca07      	ldmia	r2, {r0, r1, r2}
 800f616:	c303      	stmia	r3!, {r0, r1}
 800f618:	701a      	strb	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 800f61a:	f107 0308 	add.w	r3, r7, #8
 800f61e:	2109      	movs	r1, #9
 800f620:	4618      	mov	r0, r3
 800f622:	f7fa fd2f 	bl	800a084 <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 800f626:	4b0d      	ldr	r3, [pc, #52]	; (800f65c <fm_menu_show_version+0x118>)
 800f628:	781b      	ldrb	r3, [r3, #0]
 800f62a:	2b01      	cmp	r3, #1
 800f62c:	d108      	bne.n	800f640 <fm_menu_show_version+0xfc>
    {
        counter = 0;
 800f62e:	4b0c      	ldr	r3, [pc, #48]	; (800f660 <fm_menu_show_version+0x11c>)
 800f630:	2200      	movs	r2, #0
 800f632:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 800f634:	4b06      	ldr	r3, [pc, #24]	; (800f650 <fm_menu_show_version+0x10c>)
 800f636:	2201      	movs	r2, #1
 800f638:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800f63a:	4b08      	ldr	r3, [pc, #32]	; (800f65c <fm_menu_show_version+0x118>)
 800f63c:	2200      	movs	r2, #0
 800f63e:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800f640:	697b      	ldr	r3, [r7, #20]
}
 800f642:	4618      	mov	r0, r3
 800f644:	3718      	adds	r7, #24
 800f646:	46bd      	mov	sp, r7
 800f648:	bd80      	pop	{r7, pc}
 800f64a:	bf00      	nop
 800f64c:	0800f545 	.word	0x0800f545
 800f650:	20000150 	.word	0x20000150
 800f654:	20001068 	.word	0x20001068
 800f658:	0800f46d 	.word	0x0800f46d
 800f65c:	20001a75 	.word	0x20001a75
 800f660:	20001a76 	.word	0x20001a76
 800f664:	080106e0 	.word	0x080106e0

0800f668 <fm_temp_stm32_get>:
// Private function bodies.

// Public function bodies.

void fm_temp_stm32_get()
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b082      	sub	sp, #8
 800f66c:	af00      	add	r7, sp, #0
    const uint8_t poll_time = 100;
 800f66e:	2364      	movs	r3, #100	; 0x64
 800f670:	71fb      	strb	r3, [r7, #7]

    HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800f672:	217f      	movs	r1, #127	; 0x7f
 800f674:	4808      	ldr	r0, [pc, #32]	; (800f698 <fm_temp_stm32_get+0x30>)
 800f676:	f7f3 fa39 	bl	8002aec <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start(&hadc1);
 800f67a:	4807      	ldr	r0, [pc, #28]	; (800f698 <fm_temp_stm32_get+0x30>)
 800f67c:	f7f2 fb3a 	bl	8001cf4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, poll_time);
 800f680:	79fb      	ldrb	r3, [r7, #7]
 800f682:	4619      	mov	r1, r3
 800f684:	4804      	ldr	r0, [pc, #16]	; (800f698 <fm_temp_stm32_get+0x30>)
 800f686:	f7f2 fbcb 	bl	8001e20 <HAL_ADC_PollForConversion>
    HAL_ADC_Stop(&hadc1);
 800f68a:	4803      	ldr	r0, [pc, #12]	; (800f698 <fm_temp_stm32_get+0x30>)
 800f68c:	f7f2 fb95 	bl	8001dba <HAL_ADC_Stop>
}
 800f690:	bf00      	nop
 800f692:	3708      	adds	r7, #8
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}
 800f698:	200010c4 	.word	0x200010c4

0800f69c <fm_temp_stm32_format>:

int fm_temp_stm32_format()
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b082      	sub	sp, #8
 800f6a0:	af00      	add	r7, sp, #0
    uint16_t raw_value;
    int temp_celcius;

    fm_temp_stm32_get();
 800f6a2:	f7ff ffe1 	bl	800f668 <fm_temp_stm32_get>
    raw_value = HAL_ADC_GetValue(&hadc1);
 800f6a6:	4812      	ldr	r0, [pc, #72]	; (800f6f0 <fm_temp_stm32_format+0x54>)
 800f6a8:	f7f2 fc49 	bl	8001f3e <HAL_ADC_GetValue>
 800f6ac:	4603      	mov	r3, r0
 800f6ae:	80fb      	strh	r3, [r7, #6]
    temp_celcius = __HAL_ADC_CALC_TEMPERATURE(3285, raw_value,
 800f6b0:	88fb      	ldrh	r3, [r7, #6]
 800f6b2:	f640 42d5 	movw	r2, #3285	; 0xcd5
 800f6b6:	fb02 f303 	mul.w	r3, r2, r3
 800f6ba:	461a      	mov	r2, r3
 800f6bc:	4b0d      	ldr	r3, [pc, #52]	; (800f6f4 <fm_temp_stm32_format+0x58>)
 800f6be:	fba3 2302 	umull	r2, r3, r3, r2
 800f6c2:	099b      	lsrs	r3, r3, #6
 800f6c4:	461a      	mov	r2, r3
 800f6c6:	4b0c      	ldr	r3, [pc, #48]	; (800f6f8 <fm_temp_stm32_format+0x5c>)
 800f6c8:	881b      	ldrh	r3, [r3, #0]
 800f6ca:	1ad3      	subs	r3, r2, r3
 800f6cc:	2264      	movs	r2, #100	; 0x64
 800f6ce:	fb03 f202 	mul.w	r2, r3, r2
 800f6d2:	4b0a      	ldr	r3, [pc, #40]	; (800f6fc <fm_temp_stm32_format+0x60>)
 800f6d4:	881b      	ldrh	r3, [r3, #0]
 800f6d6:	4619      	mov	r1, r3
 800f6d8:	4b07      	ldr	r3, [pc, #28]	; (800f6f8 <fm_temp_stm32_format+0x5c>)
 800f6da:	881b      	ldrh	r3, [r3, #0]
 800f6dc:	1acb      	subs	r3, r1, r3
 800f6de:	fb92 f3f3 	sdiv	r3, r2, r3
 800f6e2:	331e      	adds	r3, #30
 800f6e4:	603b      	str	r3, [r7, #0]
    ADC_RESOLUTION_12B);

    return (temp_celcius);
 800f6e6:	683b      	ldr	r3, [r7, #0]
}
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	3708      	adds	r7, #8
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	bd80      	pop	{r7, pc}
 800f6f0:	200010c4 	.word	0x200010c4
 800f6f4:	057619f1 	.word	0x057619f1
 800f6f8:	1fff75a8 	.word	0x1fff75a8
 800f6fc:	1fff75ca 	.word	0x1fff75ca

0800f700 <fm_version_get>:
 * actualizado este valor.
 * @param None
 * @retval Número de versión en formato VRR.
 */
uint32_t fm_version_get()
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b088      	sub	sp, #32
 800f704:	af02      	add	r7, sp, #8
    uint32_t version = 0;
 800f706:	2300      	movs	r3, #0
 800f708:	617b      	str	r3, [r7, #20]
    char version_arr[PCF8553_DATA_SIZE];

    sprintf(version_arr, "%d%d%d", VERSION, REVISION, RELEASE);
 800f70a:	4638      	mov	r0, r7
 800f70c:	2300      	movs	r3, #0
 800f70e:	9300      	str	r3, [sp, #0]
 800f710:	2301      	movs	r3, #1
 800f712:	2201      	movs	r2, #1
 800f714:	4906      	ldr	r1, [pc, #24]	; (800f730 <fm_version_get+0x30>)
 800f716:	f000 f9bb 	bl	800fa90 <siprintf>
    /*
     * Esta instrucción está de mas ya que después se vuelve a formatear el
     * entero en un arreglo, pero por ahora se va a quedar así hasta que se
     * elimine el formatter de la libreria fm_lcd.h
     */
    version = atoi(version_arr);
 800f71a:	463b      	mov	r3, r7
 800f71c:	4618      	mov	r0, r3
 800f71e:	f000 f94d 	bl	800f9bc <atoi>
 800f722:	4603      	mov	r3, r0
 800f724:	617b      	str	r3, [r7, #20]

    return (version);
 800f726:	697b      	ldr	r3, [r7, #20]
}
 800f728:	4618      	mov	r0, r3
 800f72a:	3718      	adds	r7, #24
 800f72c:	46bd      	mov	sp, r7
 800f72e:	bd80      	pop	{r7, pc}
 800f730:	080106f8 	.word	0x080106f8

0800f734 <fmc_get_acm>:
 * parámetro de retorno.
 * @param  None
 * @retval Volumen acumulado como estructura.
 */
fmc_totalizer_t fmc_get_acm()
{
 800f734:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f736:	b093      	sub	sp, #76	; 0x4c
 800f738:	af06      	add	r7, sp, #24
 800f73a:	62f8      	str	r0, [r7, #44]	; 0x2c
    acm = fm_factory_get_acm();
 800f73c:	4c1c      	ldr	r4, [pc, #112]	; (800f7b0 <fmc_get_acm+0x7c>)
 800f73e:	f107 0308 	add.w	r3, r7, #8
 800f742:	4618      	mov	r0, r3
 800f744:	f7fa fcba 	bl	800a0bc <fm_factory_get_acm>
 800f748:	4625      	mov	r5, r4
 800f74a:	f107 0408 	add.w	r4, r7, #8
 800f74e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f750:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f752:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f756:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    acm = fmc_totalizer_init(acm);
 800f75a:	4b15      	ldr	r3, [pc, #84]	; (800f7b0 <fmc_get_acm+0x7c>)
 800f75c:	607b      	str	r3, [r7, #4]
 800f75e:	f107 0c08 	add.w	ip, r7, #8
 800f762:	4e13      	ldr	r6, [pc, #76]	; (800f7b0 <fmc_get_acm+0x7c>)
 800f764:	466d      	mov	r5, sp
 800f766:	f106 0408 	add.w	r4, r6, #8
 800f76a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f76c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f76e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f772:	e885 0003 	stmia.w	r5, {r0, r1}
 800f776:	e896 000c 	ldmia.w	r6, {r2, r3}
 800f77a:	4660      	mov	r0, ip
 800f77c:	f000 f8c0 	bl	800f900 <fmc_totalizer_init>
 800f780:	687d      	ldr	r5, [r7, #4]
 800f782:	f107 0408 	add.w	r4, r7, #8
 800f786:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f788:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f78a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f78e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    return (acm);
 800f792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f794:	4a06      	ldr	r2, [pc, #24]	; (800f7b0 <fmc_get_acm+0x7c>)
 800f796:	461c      	mov	r4, r3
 800f798:	4615      	mov	r5, r2
 800f79a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f79c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f79e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f7a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800f7a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f7a8:	3734      	adds	r7, #52	; 0x34
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7ae:	bf00      	nop
 800f7b0:	20001a78 	.word	0x20001a78

0800f7b4 <fmc_get_stm32_temp>:
 * @retval temperatura interna del microcontrolador como una estructura que
 * contiene su valor, resolución y unidad.
 * global.
 */
fmc_temp_t fmc_get_stm32_temp()
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b088      	sub	sp, #32
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
    int_temperature.temperature.num = fm_temp_stm32_format();
 800f7bc:	f7ff ff6e 	bl	800f69c <fm_temp_stm32_format>
 800f7c0:	4603      	mov	r3, r0
 800f7c2:	461a      	mov	r2, r3
 800f7c4:	4b0d      	ldr	r3, [pc, #52]	; (800f7fc <fmc_get_stm32_temp+0x48>)
 800f7c6:	601a      	str	r2, [r3, #0]
    int_temperature.temperature.res = fm_factory_get_temp().temperature.res;
 800f7c8:	f107 0308 	add.w	r3, r7, #8
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	f7fa fcb7 	bl	800a140 <fm_factory_get_temp>
 800f7d2:	7b3a      	ldrb	r2, [r7, #12]
 800f7d4:	4b09      	ldr	r3, [pc, #36]	; (800f7fc <fmc_get_stm32_temp+0x48>)
 800f7d6:	711a      	strb	r2, [r3, #4]
    int_temperature.unit_volume_temp = fm_factory_get_temp().unit_volume_temp;
 800f7d8:	f107 0314 	add.w	r3, r7, #20
 800f7dc:	4618      	mov	r0, r3
 800f7de:	f7fa fcaf 	bl	800a140 <fm_factory_get_temp>
 800f7e2:	7f3a      	ldrb	r2, [r7, #28]
 800f7e4:	4b05      	ldr	r3, [pc, #20]	; (800f7fc <fmc_get_stm32_temp+0x48>)
 800f7e6:	721a      	strb	r2, [r3, #8]

    return (int_temperature);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	4a04      	ldr	r2, [pc, #16]	; (800f7fc <fmc_get_stm32_temp+0x48>)
 800f7ec:	ca07      	ldmia	r2, {r0, r1, r2}
 800f7ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800f7f2:	6878      	ldr	r0, [r7, #4]
 800f7f4:	3720      	adds	r7, #32
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}
 800f7fa:	bf00      	nop
 800f7fc:	20001ad8 	.word	0x20001ad8

0800f800 <fmc_get_rate>:
 * devuelve como parámetro de retorno.
 * @param  None
 * @retval caudal instantaneo como estructura.
 */
fmc_totalizer_t fmc_get_rate()
{
 800f800:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f802:	b093      	sub	sp, #76	; 0x4c
 800f804:	af06      	add	r7, sp, #24
 800f806:	62f8      	str	r0, [r7, #44]	; 0x2c
    rate = fm_factory_get_rate();
 800f808:	4c1c      	ldr	r4, [pc, #112]	; (800f87c <fmc_get_rate+0x7c>)
 800f80a:	f107 0308 	add.w	r3, r7, #8
 800f80e:	4618      	mov	r0, r3
 800f810:	f7fa fc80 	bl	800a114 <fm_factory_get_rate>
 800f814:	4625      	mov	r5, r4
 800f816:	f107 0408 	add.w	r4, r7, #8
 800f81a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f81c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f81e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f822:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    rate = fmc_totalizer_init(rate);
 800f826:	4b15      	ldr	r3, [pc, #84]	; (800f87c <fmc_get_rate+0x7c>)
 800f828:	607b      	str	r3, [r7, #4]
 800f82a:	f107 0c08 	add.w	ip, r7, #8
 800f82e:	4e13      	ldr	r6, [pc, #76]	; (800f87c <fmc_get_rate+0x7c>)
 800f830:	466d      	mov	r5, sp
 800f832:	f106 0408 	add.w	r4, r6, #8
 800f836:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f838:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f83a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f83e:	e885 0003 	stmia.w	r5, {r0, r1}
 800f842:	e896 000c 	ldmia.w	r6, {r2, r3}
 800f846:	4660      	mov	r0, ip
 800f848:	f000 f85a 	bl	800f900 <fmc_totalizer_init>
 800f84c:	687d      	ldr	r5, [r7, #4]
 800f84e:	f107 0408 	add.w	r4, r7, #8
 800f852:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f854:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f856:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f85a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    return (rate);
 800f85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f860:	4a06      	ldr	r2, [pc, #24]	; (800f87c <fmc_get_rate+0x7c>)
 800f862:	461c      	mov	r4, r3
 800f864:	4615      	mov	r5, r2
 800f866:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f868:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f86a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f86e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800f872:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f874:	3734      	adds	r7, #52	; 0x34
 800f876:	46bd      	mov	sp, r7
 800f878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f87a:	bf00      	nop
 800f87c:	20001a98 	.word	0x20001a98

0800f880 <fmc_get_ttl>:
 * parámetro de retorno.
 * @param  None
 * @retval volumen histórico como estructura.
 */
fmc_totalizer_t fmc_get_ttl()
{
 800f880:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f882:	b093      	sub	sp, #76	; 0x4c
 800f884:	af06      	add	r7, sp, #24
 800f886:	62f8      	str	r0, [r7, #44]	; 0x2c
    ttl = fm_factory_get_ttl();
 800f888:	4c1c      	ldr	r4, [pc, #112]	; (800f8fc <fmc_get_ttl+0x7c>)
 800f88a:	f107 0308 	add.w	r3, r7, #8
 800f88e:	4618      	mov	r0, r3
 800f890:	f7fa fc2a 	bl	800a0e8 <fm_factory_get_ttl>
 800f894:	4625      	mov	r5, r4
 800f896:	f107 0408 	add.w	r4, r7, #8
 800f89a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f89c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f89e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f8a2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    ttl = fmc_totalizer_init(ttl);
 800f8a6:	4b15      	ldr	r3, [pc, #84]	; (800f8fc <fmc_get_ttl+0x7c>)
 800f8a8:	607b      	str	r3, [r7, #4]
 800f8aa:	f107 0c08 	add.w	ip, r7, #8
 800f8ae:	4e13      	ldr	r6, [pc, #76]	; (800f8fc <fmc_get_ttl+0x7c>)
 800f8b0:	466d      	mov	r5, sp
 800f8b2:	f106 0408 	add.w	r4, r6, #8
 800f8b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f8b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f8ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f8be:	e885 0003 	stmia.w	r5, {r0, r1}
 800f8c2:	e896 000c 	ldmia.w	r6, {r2, r3}
 800f8c6:	4660      	mov	r0, ip
 800f8c8:	f000 f81a 	bl	800f900 <fmc_totalizer_init>
 800f8cc:	687d      	ldr	r5, [r7, #4]
 800f8ce:	f107 0408 	add.w	r4, r7, #8
 800f8d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f8d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f8d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f8da:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    return (ttl);
 800f8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8e0:	4a06      	ldr	r2, [pc, #24]	; (800f8fc <fmc_get_ttl+0x7c>)
 800f8e2:	461c      	mov	r4, r3
 800f8e4:	4615      	mov	r5, r2
 800f8e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f8e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f8ea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f8ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800f8f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f8f4:	3734      	adds	r7, #52	; 0x34
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8fa:	bf00      	nop
 800f8fc:	20001ab8 	.word	0x20001ab8

0800f900 <fmc_totalizer_init>:
 * @brief
 * @param
 * @retval None
 */
fmc_totalizer_t fmc_totalizer_init(fmc_totalizer_t totalizer)
{
 800f900:	b082      	sub	sp, #8
 800f902:	b5b0      	push	{r4, r5, r7, lr}
 800f904:	b082      	sub	sp, #8
 800f906:	af00      	add	r7, sp, #0
 800f908:	6078      	str	r0, [r7, #4]
 800f90a:	f107 0118 	add.w	r1, r7, #24
 800f90e:	e881 000c 	stmia.w	r1, {r2, r3}
    fmc_totalizer_refresh(&totalizer);
 800f912:	f107 0018 	add.w	r0, r7, #24
 800f916:	f000 f811 	bl	800f93c <fmc_totalizer_refresh>

    return (totalizer);
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	461d      	mov	r5, r3
 800f91e:	f107 0418 	add.w	r4, r7, #24
 800f922:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f924:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f926:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f92a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800f92e:	6878      	ldr	r0, [r7, #4]
 800f930:	3708      	adds	r7, #8
 800f932:	46bd      	mov	sp, r7
 800f934:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800f938:	b002      	add	sp, #8
 800f93a:	4770      	bx	lr

0800f93c <fmc_totalizer_refresh>:
 * @param  puntero a estructura que contiene datos como la cantidad de pulsos
 * leidos, valor y resolución del caudal/volumen, entre otros.
 * @retval None
 */
void fmc_totalizer_refresh(fmc_totalizer_t *p_totalizer)
{
 800f93c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800f940:	b084      	sub	sp, #16
 800f942:	af00      	add	r7, sp, #0
 800f944:	6078      	str	r0, [r7, #4]
    uint64_t result;

    /*
     * result es la cantidad de pulsos almacenados en la estructura p_totalizer.
     */
    result = (uint64_t) p_totalizer->pulse;
 800f946:	6879      	ldr	r1, [r7, #4]
 800f948:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f94c:	e9c7 0102 	strd	r0, r1, [r7, #8]

    /*
     * Pulsos escalados en el factor y en la resolucion a mostrar.
     */
    result *= g_scalar[p_totalizer->factor.res + p_totalizer->volume.res];
 800f950:	6879      	ldr	r1, [r7, #4]
 800f952:	7d09      	ldrb	r1, [r1, #20]
 800f954:	4608      	mov	r0, r1
 800f956:	6879      	ldr	r1, [r7, #4]
 800f958:	7b09      	ldrb	r1, [r1, #12]
 800f95a:	4401      	add	r1, r0
 800f95c:	4816      	ldr	r0, [pc, #88]	; (800f9b8 <fmc_totalizer_refresh+0x7c>)
 800f95e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800f962:	2000      	movs	r0, #0
 800f964:	460c      	mov	r4, r1
 800f966:	4605      	mov	r5, r0
 800f968:	68f9      	ldr	r1, [r7, #12]
 800f96a:	fb04 f001 	mul.w	r0, r4, r1
 800f96e:	68b9      	ldr	r1, [r7, #8]
 800f970:	fb05 f101 	mul.w	r1, r5, r1
 800f974:	4401      	add	r1, r0
 800f976:	68b8      	ldr	r0, [r7, #8]
 800f978:	fba0 2304 	umull	r2, r3, r0, r4
 800f97c:	4419      	add	r1, r3
 800f97e:	460b      	mov	r3, r1
 800f980:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800f984:	e9c7 2302 	strd	r2, r3, [r7, #8]

    /*
     * Obtengo el valor numérico del volumen dividiendo los pulsos escalados
     * por el factor.
     */
    result /= p_totalizer->factor.num;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	691b      	ldr	r3, [r3, #16]
 800f98c:	2200      	movs	r2, #0
 800f98e:	4698      	mov	r8, r3
 800f990:	4691      	mov	r9, r2
 800f992:	4642      	mov	r2, r8
 800f994:	464b      	mov	r3, r9
 800f996:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f99a:	f7f0 fda1 	bl	80004e0 <__aeabi_uldivmod>
 800f99e:	4602      	mov	r2, r0
 800f9a0:	460b      	mov	r3, r1
 800f9a2:	e9c7 2302 	strd	r2, r3, [r7, #8]

    p_totalizer->volume.num = (uint32_t) result;
 800f9a6:	68ba      	ldr	r2, [r7, #8]
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	609a      	str	r2, [r3, #8]

}
 800f9ac:	bf00      	nop
 800f9ae:	3710      	adds	r7, #16
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800f9b6:	bf00      	nop
 800f9b8:	08010748 	.word	0x08010748

0800f9bc <atoi>:
 800f9bc:	220a      	movs	r2, #10
 800f9be:	2100      	movs	r1, #0
 800f9c0:	f000 b908 	b.w	800fbd4 <strtol>

0800f9c4 <__errno>:
 800f9c4:	4b01      	ldr	r3, [pc, #4]	; (800f9cc <__errno+0x8>)
 800f9c6:	6818      	ldr	r0, [r3, #0]
 800f9c8:	4770      	bx	lr
 800f9ca:	bf00      	nop
 800f9cc:	20000154 	.word	0x20000154

0800f9d0 <__libc_init_array>:
 800f9d0:	b570      	push	{r4, r5, r6, lr}
 800f9d2:	4d0d      	ldr	r5, [pc, #52]	; (800fa08 <__libc_init_array+0x38>)
 800f9d4:	4c0d      	ldr	r4, [pc, #52]	; (800fa0c <__libc_init_array+0x3c>)
 800f9d6:	1b64      	subs	r4, r4, r5
 800f9d8:	10a4      	asrs	r4, r4, #2
 800f9da:	2600      	movs	r6, #0
 800f9dc:	42a6      	cmp	r6, r4
 800f9de:	d109      	bne.n	800f9f4 <__libc_init_array+0x24>
 800f9e0:	4d0b      	ldr	r5, [pc, #44]	; (800fa10 <__libc_init_array+0x40>)
 800f9e2:	4c0c      	ldr	r4, [pc, #48]	; (800fa14 <__libc_init_array+0x44>)
 800f9e4:	f000 fd4e 	bl	8010484 <_init>
 800f9e8:	1b64      	subs	r4, r4, r5
 800f9ea:	10a4      	asrs	r4, r4, #2
 800f9ec:	2600      	movs	r6, #0
 800f9ee:	42a6      	cmp	r6, r4
 800f9f0:	d105      	bne.n	800f9fe <__libc_init_array+0x2e>
 800f9f2:	bd70      	pop	{r4, r5, r6, pc}
 800f9f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f9f8:	4798      	blx	r3
 800f9fa:	3601      	adds	r6, #1
 800f9fc:	e7ee      	b.n	800f9dc <__libc_init_array+0xc>
 800f9fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa02:	4798      	blx	r3
 800fa04:	3601      	adds	r6, #1
 800fa06:	e7f2      	b.n	800f9ee <__libc_init_array+0x1e>
 800fa08:	080108a0 	.word	0x080108a0
 800fa0c:	080108a0 	.word	0x080108a0
 800fa10:	080108a0 	.word	0x080108a0
 800fa14:	080108a4 	.word	0x080108a4

0800fa18 <memset>:
 800fa18:	4402      	add	r2, r0
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	4293      	cmp	r3, r2
 800fa1e:	d100      	bne.n	800fa22 <memset+0xa>
 800fa20:	4770      	bx	lr
 800fa22:	f803 1b01 	strb.w	r1, [r3], #1
 800fa26:	e7f9      	b.n	800fa1c <memset+0x4>

0800fa28 <sniprintf>:
 800fa28:	b40c      	push	{r2, r3}
 800fa2a:	b530      	push	{r4, r5, lr}
 800fa2c:	4b17      	ldr	r3, [pc, #92]	; (800fa8c <sniprintf+0x64>)
 800fa2e:	1e0c      	subs	r4, r1, #0
 800fa30:	681d      	ldr	r5, [r3, #0]
 800fa32:	b09d      	sub	sp, #116	; 0x74
 800fa34:	da08      	bge.n	800fa48 <sniprintf+0x20>
 800fa36:	238b      	movs	r3, #139	; 0x8b
 800fa38:	602b      	str	r3, [r5, #0]
 800fa3a:	f04f 30ff 	mov.w	r0, #4294967295
 800fa3e:	b01d      	add	sp, #116	; 0x74
 800fa40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fa44:	b002      	add	sp, #8
 800fa46:	4770      	bx	lr
 800fa48:	f44f 7302 	mov.w	r3, #520	; 0x208
 800fa4c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fa50:	bf14      	ite	ne
 800fa52:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fa56:	4623      	moveq	r3, r4
 800fa58:	9304      	str	r3, [sp, #16]
 800fa5a:	9307      	str	r3, [sp, #28]
 800fa5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fa60:	9002      	str	r0, [sp, #8]
 800fa62:	9006      	str	r0, [sp, #24]
 800fa64:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fa68:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800fa6a:	ab21      	add	r3, sp, #132	; 0x84
 800fa6c:	a902      	add	r1, sp, #8
 800fa6e:	4628      	mov	r0, r5
 800fa70:	9301      	str	r3, [sp, #4]
 800fa72:	f000 f915 	bl	800fca0 <_svfiprintf_r>
 800fa76:	1c43      	adds	r3, r0, #1
 800fa78:	bfbc      	itt	lt
 800fa7a:	238b      	movlt	r3, #139	; 0x8b
 800fa7c:	602b      	strlt	r3, [r5, #0]
 800fa7e:	2c00      	cmp	r4, #0
 800fa80:	d0dd      	beq.n	800fa3e <sniprintf+0x16>
 800fa82:	9b02      	ldr	r3, [sp, #8]
 800fa84:	2200      	movs	r2, #0
 800fa86:	701a      	strb	r2, [r3, #0]
 800fa88:	e7d9      	b.n	800fa3e <sniprintf+0x16>
 800fa8a:	bf00      	nop
 800fa8c:	20000154 	.word	0x20000154

0800fa90 <siprintf>:
 800fa90:	b40e      	push	{r1, r2, r3}
 800fa92:	b500      	push	{lr}
 800fa94:	b09c      	sub	sp, #112	; 0x70
 800fa96:	ab1d      	add	r3, sp, #116	; 0x74
 800fa98:	9002      	str	r0, [sp, #8]
 800fa9a:	9006      	str	r0, [sp, #24]
 800fa9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800faa0:	4809      	ldr	r0, [pc, #36]	; (800fac8 <siprintf+0x38>)
 800faa2:	9107      	str	r1, [sp, #28]
 800faa4:	9104      	str	r1, [sp, #16]
 800faa6:	4909      	ldr	r1, [pc, #36]	; (800facc <siprintf+0x3c>)
 800faa8:	f853 2b04 	ldr.w	r2, [r3], #4
 800faac:	9105      	str	r1, [sp, #20]
 800faae:	6800      	ldr	r0, [r0, #0]
 800fab0:	9301      	str	r3, [sp, #4]
 800fab2:	a902      	add	r1, sp, #8
 800fab4:	f000 f8f4 	bl	800fca0 <_svfiprintf_r>
 800fab8:	9b02      	ldr	r3, [sp, #8]
 800faba:	2200      	movs	r2, #0
 800fabc:	701a      	strb	r2, [r3, #0]
 800fabe:	b01c      	add	sp, #112	; 0x70
 800fac0:	f85d eb04 	ldr.w	lr, [sp], #4
 800fac4:	b003      	add	sp, #12
 800fac6:	4770      	bx	lr
 800fac8:	20000154 	.word	0x20000154
 800facc:	ffff0208 	.word	0xffff0208

0800fad0 <_strtol_l.constprop.0>:
 800fad0:	2b01      	cmp	r3, #1
 800fad2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fad6:	d001      	beq.n	800fadc <_strtol_l.constprop.0+0xc>
 800fad8:	2b24      	cmp	r3, #36	; 0x24
 800fada:	d906      	bls.n	800faea <_strtol_l.constprop.0+0x1a>
 800fadc:	f7ff ff72 	bl	800f9c4 <__errno>
 800fae0:	2316      	movs	r3, #22
 800fae2:	6003      	str	r3, [r0, #0]
 800fae4:	2000      	movs	r0, #0
 800fae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800faea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800fbd0 <_strtol_l.constprop.0+0x100>
 800faee:	460d      	mov	r5, r1
 800faf0:	462e      	mov	r6, r5
 800faf2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800faf6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800fafa:	f017 0708 	ands.w	r7, r7, #8
 800fafe:	d1f7      	bne.n	800faf0 <_strtol_l.constprop.0+0x20>
 800fb00:	2c2d      	cmp	r4, #45	; 0x2d
 800fb02:	d132      	bne.n	800fb6a <_strtol_l.constprop.0+0x9a>
 800fb04:	782c      	ldrb	r4, [r5, #0]
 800fb06:	2701      	movs	r7, #1
 800fb08:	1cb5      	adds	r5, r6, #2
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d05b      	beq.n	800fbc6 <_strtol_l.constprop.0+0xf6>
 800fb0e:	2b10      	cmp	r3, #16
 800fb10:	d109      	bne.n	800fb26 <_strtol_l.constprop.0+0x56>
 800fb12:	2c30      	cmp	r4, #48	; 0x30
 800fb14:	d107      	bne.n	800fb26 <_strtol_l.constprop.0+0x56>
 800fb16:	782c      	ldrb	r4, [r5, #0]
 800fb18:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800fb1c:	2c58      	cmp	r4, #88	; 0x58
 800fb1e:	d14d      	bne.n	800fbbc <_strtol_l.constprop.0+0xec>
 800fb20:	786c      	ldrb	r4, [r5, #1]
 800fb22:	2310      	movs	r3, #16
 800fb24:	3502      	adds	r5, #2
 800fb26:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800fb2a:	f108 38ff 	add.w	r8, r8, #4294967295
 800fb2e:	f04f 0c00 	mov.w	ip, #0
 800fb32:	fbb8 f9f3 	udiv	r9, r8, r3
 800fb36:	4666      	mov	r6, ip
 800fb38:	fb03 8a19 	mls	sl, r3, r9, r8
 800fb3c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800fb40:	f1be 0f09 	cmp.w	lr, #9
 800fb44:	d816      	bhi.n	800fb74 <_strtol_l.constprop.0+0xa4>
 800fb46:	4674      	mov	r4, lr
 800fb48:	42a3      	cmp	r3, r4
 800fb4a:	dd24      	ble.n	800fb96 <_strtol_l.constprop.0+0xc6>
 800fb4c:	f1bc 0f00 	cmp.w	ip, #0
 800fb50:	db1e      	blt.n	800fb90 <_strtol_l.constprop.0+0xc0>
 800fb52:	45b1      	cmp	r9, r6
 800fb54:	d31c      	bcc.n	800fb90 <_strtol_l.constprop.0+0xc0>
 800fb56:	d101      	bne.n	800fb5c <_strtol_l.constprop.0+0x8c>
 800fb58:	45a2      	cmp	sl, r4
 800fb5a:	db19      	blt.n	800fb90 <_strtol_l.constprop.0+0xc0>
 800fb5c:	fb06 4603 	mla	r6, r6, r3, r4
 800fb60:	f04f 0c01 	mov.w	ip, #1
 800fb64:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fb68:	e7e8      	b.n	800fb3c <_strtol_l.constprop.0+0x6c>
 800fb6a:	2c2b      	cmp	r4, #43	; 0x2b
 800fb6c:	bf04      	itt	eq
 800fb6e:	782c      	ldrbeq	r4, [r5, #0]
 800fb70:	1cb5      	addeq	r5, r6, #2
 800fb72:	e7ca      	b.n	800fb0a <_strtol_l.constprop.0+0x3a>
 800fb74:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800fb78:	f1be 0f19 	cmp.w	lr, #25
 800fb7c:	d801      	bhi.n	800fb82 <_strtol_l.constprop.0+0xb2>
 800fb7e:	3c37      	subs	r4, #55	; 0x37
 800fb80:	e7e2      	b.n	800fb48 <_strtol_l.constprop.0+0x78>
 800fb82:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800fb86:	f1be 0f19 	cmp.w	lr, #25
 800fb8a:	d804      	bhi.n	800fb96 <_strtol_l.constprop.0+0xc6>
 800fb8c:	3c57      	subs	r4, #87	; 0x57
 800fb8e:	e7db      	b.n	800fb48 <_strtol_l.constprop.0+0x78>
 800fb90:	f04f 3cff 	mov.w	ip, #4294967295
 800fb94:	e7e6      	b.n	800fb64 <_strtol_l.constprop.0+0x94>
 800fb96:	f1bc 0f00 	cmp.w	ip, #0
 800fb9a:	da05      	bge.n	800fba8 <_strtol_l.constprop.0+0xd8>
 800fb9c:	2322      	movs	r3, #34	; 0x22
 800fb9e:	6003      	str	r3, [r0, #0]
 800fba0:	4646      	mov	r6, r8
 800fba2:	b942      	cbnz	r2, 800fbb6 <_strtol_l.constprop.0+0xe6>
 800fba4:	4630      	mov	r0, r6
 800fba6:	e79e      	b.n	800fae6 <_strtol_l.constprop.0+0x16>
 800fba8:	b107      	cbz	r7, 800fbac <_strtol_l.constprop.0+0xdc>
 800fbaa:	4276      	negs	r6, r6
 800fbac:	2a00      	cmp	r2, #0
 800fbae:	d0f9      	beq.n	800fba4 <_strtol_l.constprop.0+0xd4>
 800fbb0:	f1bc 0f00 	cmp.w	ip, #0
 800fbb4:	d000      	beq.n	800fbb8 <_strtol_l.constprop.0+0xe8>
 800fbb6:	1e69      	subs	r1, r5, #1
 800fbb8:	6011      	str	r1, [r2, #0]
 800fbba:	e7f3      	b.n	800fba4 <_strtol_l.constprop.0+0xd4>
 800fbbc:	2430      	movs	r4, #48	; 0x30
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d1b1      	bne.n	800fb26 <_strtol_l.constprop.0+0x56>
 800fbc2:	2308      	movs	r3, #8
 800fbc4:	e7af      	b.n	800fb26 <_strtol_l.constprop.0+0x56>
 800fbc6:	2c30      	cmp	r4, #48	; 0x30
 800fbc8:	d0a5      	beq.n	800fb16 <_strtol_l.constprop.0+0x46>
 800fbca:	230a      	movs	r3, #10
 800fbcc:	e7ab      	b.n	800fb26 <_strtol_l.constprop.0+0x56>
 800fbce:	bf00      	nop
 800fbd0:	08010765 	.word	0x08010765

0800fbd4 <strtol>:
 800fbd4:	4613      	mov	r3, r2
 800fbd6:	460a      	mov	r2, r1
 800fbd8:	4601      	mov	r1, r0
 800fbda:	4802      	ldr	r0, [pc, #8]	; (800fbe4 <strtol+0x10>)
 800fbdc:	6800      	ldr	r0, [r0, #0]
 800fbde:	f7ff bf77 	b.w	800fad0 <_strtol_l.constprop.0>
 800fbe2:	bf00      	nop
 800fbe4:	20000154 	.word	0x20000154

0800fbe8 <__ssputs_r>:
 800fbe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbec:	688e      	ldr	r6, [r1, #8]
 800fbee:	429e      	cmp	r6, r3
 800fbf0:	4682      	mov	sl, r0
 800fbf2:	460c      	mov	r4, r1
 800fbf4:	4690      	mov	r8, r2
 800fbf6:	461f      	mov	r7, r3
 800fbf8:	d838      	bhi.n	800fc6c <__ssputs_r+0x84>
 800fbfa:	898a      	ldrh	r2, [r1, #12]
 800fbfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fc00:	d032      	beq.n	800fc68 <__ssputs_r+0x80>
 800fc02:	6825      	ldr	r5, [r4, #0]
 800fc04:	6909      	ldr	r1, [r1, #16]
 800fc06:	eba5 0901 	sub.w	r9, r5, r1
 800fc0a:	6965      	ldr	r5, [r4, #20]
 800fc0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fc10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fc14:	3301      	adds	r3, #1
 800fc16:	444b      	add	r3, r9
 800fc18:	106d      	asrs	r5, r5, #1
 800fc1a:	429d      	cmp	r5, r3
 800fc1c:	bf38      	it	cc
 800fc1e:	461d      	movcc	r5, r3
 800fc20:	0553      	lsls	r3, r2, #21
 800fc22:	d531      	bpl.n	800fc88 <__ssputs_r+0xa0>
 800fc24:	4629      	mov	r1, r5
 800fc26:	f000 fb63 	bl	80102f0 <_malloc_r>
 800fc2a:	4606      	mov	r6, r0
 800fc2c:	b950      	cbnz	r0, 800fc44 <__ssputs_r+0x5c>
 800fc2e:	230c      	movs	r3, #12
 800fc30:	f8ca 3000 	str.w	r3, [sl]
 800fc34:	89a3      	ldrh	r3, [r4, #12]
 800fc36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc3a:	81a3      	strh	r3, [r4, #12]
 800fc3c:	f04f 30ff 	mov.w	r0, #4294967295
 800fc40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc44:	6921      	ldr	r1, [r4, #16]
 800fc46:	464a      	mov	r2, r9
 800fc48:	f000 fabe 	bl	80101c8 <memcpy>
 800fc4c:	89a3      	ldrh	r3, [r4, #12]
 800fc4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fc52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc56:	81a3      	strh	r3, [r4, #12]
 800fc58:	6126      	str	r6, [r4, #16]
 800fc5a:	6165      	str	r5, [r4, #20]
 800fc5c:	444e      	add	r6, r9
 800fc5e:	eba5 0509 	sub.w	r5, r5, r9
 800fc62:	6026      	str	r6, [r4, #0]
 800fc64:	60a5      	str	r5, [r4, #8]
 800fc66:	463e      	mov	r6, r7
 800fc68:	42be      	cmp	r6, r7
 800fc6a:	d900      	bls.n	800fc6e <__ssputs_r+0x86>
 800fc6c:	463e      	mov	r6, r7
 800fc6e:	6820      	ldr	r0, [r4, #0]
 800fc70:	4632      	mov	r2, r6
 800fc72:	4641      	mov	r1, r8
 800fc74:	f000 fab6 	bl	80101e4 <memmove>
 800fc78:	68a3      	ldr	r3, [r4, #8]
 800fc7a:	1b9b      	subs	r3, r3, r6
 800fc7c:	60a3      	str	r3, [r4, #8]
 800fc7e:	6823      	ldr	r3, [r4, #0]
 800fc80:	4433      	add	r3, r6
 800fc82:	6023      	str	r3, [r4, #0]
 800fc84:	2000      	movs	r0, #0
 800fc86:	e7db      	b.n	800fc40 <__ssputs_r+0x58>
 800fc88:	462a      	mov	r2, r5
 800fc8a:	f000 fba5 	bl	80103d8 <_realloc_r>
 800fc8e:	4606      	mov	r6, r0
 800fc90:	2800      	cmp	r0, #0
 800fc92:	d1e1      	bne.n	800fc58 <__ssputs_r+0x70>
 800fc94:	6921      	ldr	r1, [r4, #16]
 800fc96:	4650      	mov	r0, sl
 800fc98:	f000 fabe 	bl	8010218 <_free_r>
 800fc9c:	e7c7      	b.n	800fc2e <__ssputs_r+0x46>
	...

0800fca0 <_svfiprintf_r>:
 800fca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fca4:	4698      	mov	r8, r3
 800fca6:	898b      	ldrh	r3, [r1, #12]
 800fca8:	061b      	lsls	r3, r3, #24
 800fcaa:	b09d      	sub	sp, #116	; 0x74
 800fcac:	4607      	mov	r7, r0
 800fcae:	460d      	mov	r5, r1
 800fcb0:	4614      	mov	r4, r2
 800fcb2:	d50e      	bpl.n	800fcd2 <_svfiprintf_r+0x32>
 800fcb4:	690b      	ldr	r3, [r1, #16]
 800fcb6:	b963      	cbnz	r3, 800fcd2 <_svfiprintf_r+0x32>
 800fcb8:	2140      	movs	r1, #64	; 0x40
 800fcba:	f000 fb19 	bl	80102f0 <_malloc_r>
 800fcbe:	6028      	str	r0, [r5, #0]
 800fcc0:	6128      	str	r0, [r5, #16]
 800fcc2:	b920      	cbnz	r0, 800fcce <_svfiprintf_r+0x2e>
 800fcc4:	230c      	movs	r3, #12
 800fcc6:	603b      	str	r3, [r7, #0]
 800fcc8:	f04f 30ff 	mov.w	r0, #4294967295
 800fccc:	e0d1      	b.n	800fe72 <_svfiprintf_r+0x1d2>
 800fcce:	2340      	movs	r3, #64	; 0x40
 800fcd0:	616b      	str	r3, [r5, #20]
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	9309      	str	r3, [sp, #36]	; 0x24
 800fcd6:	2320      	movs	r3, #32
 800fcd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fcdc:	f8cd 800c 	str.w	r8, [sp, #12]
 800fce0:	2330      	movs	r3, #48	; 0x30
 800fce2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fe8c <_svfiprintf_r+0x1ec>
 800fce6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fcea:	f04f 0901 	mov.w	r9, #1
 800fcee:	4623      	mov	r3, r4
 800fcf0:	469a      	mov	sl, r3
 800fcf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fcf6:	b10a      	cbz	r2, 800fcfc <_svfiprintf_r+0x5c>
 800fcf8:	2a25      	cmp	r2, #37	; 0x25
 800fcfa:	d1f9      	bne.n	800fcf0 <_svfiprintf_r+0x50>
 800fcfc:	ebba 0b04 	subs.w	fp, sl, r4
 800fd00:	d00b      	beq.n	800fd1a <_svfiprintf_r+0x7a>
 800fd02:	465b      	mov	r3, fp
 800fd04:	4622      	mov	r2, r4
 800fd06:	4629      	mov	r1, r5
 800fd08:	4638      	mov	r0, r7
 800fd0a:	f7ff ff6d 	bl	800fbe8 <__ssputs_r>
 800fd0e:	3001      	adds	r0, #1
 800fd10:	f000 80aa 	beq.w	800fe68 <_svfiprintf_r+0x1c8>
 800fd14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd16:	445a      	add	r2, fp
 800fd18:	9209      	str	r2, [sp, #36]	; 0x24
 800fd1a:	f89a 3000 	ldrb.w	r3, [sl]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	f000 80a2 	beq.w	800fe68 <_svfiprintf_r+0x1c8>
 800fd24:	2300      	movs	r3, #0
 800fd26:	f04f 32ff 	mov.w	r2, #4294967295
 800fd2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd2e:	f10a 0a01 	add.w	sl, sl, #1
 800fd32:	9304      	str	r3, [sp, #16]
 800fd34:	9307      	str	r3, [sp, #28]
 800fd36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fd3a:	931a      	str	r3, [sp, #104]	; 0x68
 800fd3c:	4654      	mov	r4, sl
 800fd3e:	2205      	movs	r2, #5
 800fd40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd44:	4851      	ldr	r0, [pc, #324]	; (800fe8c <_svfiprintf_r+0x1ec>)
 800fd46:	f7f0 fb7b 	bl	8000440 <memchr>
 800fd4a:	9a04      	ldr	r2, [sp, #16]
 800fd4c:	b9d8      	cbnz	r0, 800fd86 <_svfiprintf_r+0xe6>
 800fd4e:	06d0      	lsls	r0, r2, #27
 800fd50:	bf44      	itt	mi
 800fd52:	2320      	movmi	r3, #32
 800fd54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd58:	0711      	lsls	r1, r2, #28
 800fd5a:	bf44      	itt	mi
 800fd5c:	232b      	movmi	r3, #43	; 0x2b
 800fd5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd62:	f89a 3000 	ldrb.w	r3, [sl]
 800fd66:	2b2a      	cmp	r3, #42	; 0x2a
 800fd68:	d015      	beq.n	800fd96 <_svfiprintf_r+0xf6>
 800fd6a:	9a07      	ldr	r2, [sp, #28]
 800fd6c:	4654      	mov	r4, sl
 800fd6e:	2000      	movs	r0, #0
 800fd70:	f04f 0c0a 	mov.w	ip, #10
 800fd74:	4621      	mov	r1, r4
 800fd76:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd7a:	3b30      	subs	r3, #48	; 0x30
 800fd7c:	2b09      	cmp	r3, #9
 800fd7e:	d94e      	bls.n	800fe1e <_svfiprintf_r+0x17e>
 800fd80:	b1b0      	cbz	r0, 800fdb0 <_svfiprintf_r+0x110>
 800fd82:	9207      	str	r2, [sp, #28]
 800fd84:	e014      	b.n	800fdb0 <_svfiprintf_r+0x110>
 800fd86:	eba0 0308 	sub.w	r3, r0, r8
 800fd8a:	fa09 f303 	lsl.w	r3, r9, r3
 800fd8e:	4313      	orrs	r3, r2
 800fd90:	9304      	str	r3, [sp, #16]
 800fd92:	46a2      	mov	sl, r4
 800fd94:	e7d2      	b.n	800fd3c <_svfiprintf_r+0x9c>
 800fd96:	9b03      	ldr	r3, [sp, #12]
 800fd98:	1d19      	adds	r1, r3, #4
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	9103      	str	r1, [sp, #12]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	bfbb      	ittet	lt
 800fda2:	425b      	neglt	r3, r3
 800fda4:	f042 0202 	orrlt.w	r2, r2, #2
 800fda8:	9307      	strge	r3, [sp, #28]
 800fdaa:	9307      	strlt	r3, [sp, #28]
 800fdac:	bfb8      	it	lt
 800fdae:	9204      	strlt	r2, [sp, #16]
 800fdb0:	7823      	ldrb	r3, [r4, #0]
 800fdb2:	2b2e      	cmp	r3, #46	; 0x2e
 800fdb4:	d10c      	bne.n	800fdd0 <_svfiprintf_r+0x130>
 800fdb6:	7863      	ldrb	r3, [r4, #1]
 800fdb8:	2b2a      	cmp	r3, #42	; 0x2a
 800fdba:	d135      	bne.n	800fe28 <_svfiprintf_r+0x188>
 800fdbc:	9b03      	ldr	r3, [sp, #12]
 800fdbe:	1d1a      	adds	r2, r3, #4
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	9203      	str	r2, [sp, #12]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	bfb8      	it	lt
 800fdc8:	f04f 33ff 	movlt.w	r3, #4294967295
 800fdcc:	3402      	adds	r4, #2
 800fdce:	9305      	str	r3, [sp, #20]
 800fdd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fe9c <_svfiprintf_r+0x1fc>
 800fdd4:	7821      	ldrb	r1, [r4, #0]
 800fdd6:	2203      	movs	r2, #3
 800fdd8:	4650      	mov	r0, sl
 800fdda:	f7f0 fb31 	bl	8000440 <memchr>
 800fdde:	b140      	cbz	r0, 800fdf2 <_svfiprintf_r+0x152>
 800fde0:	2340      	movs	r3, #64	; 0x40
 800fde2:	eba0 000a 	sub.w	r0, r0, sl
 800fde6:	fa03 f000 	lsl.w	r0, r3, r0
 800fdea:	9b04      	ldr	r3, [sp, #16]
 800fdec:	4303      	orrs	r3, r0
 800fdee:	3401      	adds	r4, #1
 800fdf0:	9304      	str	r3, [sp, #16]
 800fdf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdf6:	4826      	ldr	r0, [pc, #152]	; (800fe90 <_svfiprintf_r+0x1f0>)
 800fdf8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fdfc:	2206      	movs	r2, #6
 800fdfe:	f7f0 fb1f 	bl	8000440 <memchr>
 800fe02:	2800      	cmp	r0, #0
 800fe04:	d038      	beq.n	800fe78 <_svfiprintf_r+0x1d8>
 800fe06:	4b23      	ldr	r3, [pc, #140]	; (800fe94 <_svfiprintf_r+0x1f4>)
 800fe08:	bb1b      	cbnz	r3, 800fe52 <_svfiprintf_r+0x1b2>
 800fe0a:	9b03      	ldr	r3, [sp, #12]
 800fe0c:	3307      	adds	r3, #7
 800fe0e:	f023 0307 	bic.w	r3, r3, #7
 800fe12:	3308      	adds	r3, #8
 800fe14:	9303      	str	r3, [sp, #12]
 800fe16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe18:	4433      	add	r3, r6
 800fe1a:	9309      	str	r3, [sp, #36]	; 0x24
 800fe1c:	e767      	b.n	800fcee <_svfiprintf_r+0x4e>
 800fe1e:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe22:	460c      	mov	r4, r1
 800fe24:	2001      	movs	r0, #1
 800fe26:	e7a5      	b.n	800fd74 <_svfiprintf_r+0xd4>
 800fe28:	2300      	movs	r3, #0
 800fe2a:	3401      	adds	r4, #1
 800fe2c:	9305      	str	r3, [sp, #20]
 800fe2e:	4619      	mov	r1, r3
 800fe30:	f04f 0c0a 	mov.w	ip, #10
 800fe34:	4620      	mov	r0, r4
 800fe36:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe3a:	3a30      	subs	r2, #48	; 0x30
 800fe3c:	2a09      	cmp	r2, #9
 800fe3e:	d903      	bls.n	800fe48 <_svfiprintf_r+0x1a8>
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d0c5      	beq.n	800fdd0 <_svfiprintf_r+0x130>
 800fe44:	9105      	str	r1, [sp, #20]
 800fe46:	e7c3      	b.n	800fdd0 <_svfiprintf_r+0x130>
 800fe48:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe4c:	4604      	mov	r4, r0
 800fe4e:	2301      	movs	r3, #1
 800fe50:	e7f0      	b.n	800fe34 <_svfiprintf_r+0x194>
 800fe52:	ab03      	add	r3, sp, #12
 800fe54:	9300      	str	r3, [sp, #0]
 800fe56:	462a      	mov	r2, r5
 800fe58:	4b0f      	ldr	r3, [pc, #60]	; (800fe98 <_svfiprintf_r+0x1f8>)
 800fe5a:	a904      	add	r1, sp, #16
 800fe5c:	4638      	mov	r0, r7
 800fe5e:	f3af 8000 	nop.w
 800fe62:	1c42      	adds	r2, r0, #1
 800fe64:	4606      	mov	r6, r0
 800fe66:	d1d6      	bne.n	800fe16 <_svfiprintf_r+0x176>
 800fe68:	89ab      	ldrh	r3, [r5, #12]
 800fe6a:	065b      	lsls	r3, r3, #25
 800fe6c:	f53f af2c 	bmi.w	800fcc8 <_svfiprintf_r+0x28>
 800fe70:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe72:	b01d      	add	sp, #116	; 0x74
 800fe74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe78:	ab03      	add	r3, sp, #12
 800fe7a:	9300      	str	r3, [sp, #0]
 800fe7c:	462a      	mov	r2, r5
 800fe7e:	4b06      	ldr	r3, [pc, #24]	; (800fe98 <_svfiprintf_r+0x1f8>)
 800fe80:	a904      	add	r1, sp, #16
 800fe82:	4638      	mov	r0, r7
 800fe84:	f000 f87a 	bl	800ff7c <_printf_i>
 800fe88:	e7eb      	b.n	800fe62 <_svfiprintf_r+0x1c2>
 800fe8a:	bf00      	nop
 800fe8c:	08010865 	.word	0x08010865
 800fe90:	0801086f 	.word	0x0801086f
 800fe94:	00000000 	.word	0x00000000
 800fe98:	0800fbe9 	.word	0x0800fbe9
 800fe9c:	0801086b 	.word	0x0801086b

0800fea0 <_printf_common>:
 800fea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fea4:	4616      	mov	r6, r2
 800fea6:	4699      	mov	r9, r3
 800fea8:	688a      	ldr	r2, [r1, #8]
 800feaa:	690b      	ldr	r3, [r1, #16]
 800feac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800feb0:	4293      	cmp	r3, r2
 800feb2:	bfb8      	it	lt
 800feb4:	4613      	movlt	r3, r2
 800feb6:	6033      	str	r3, [r6, #0]
 800feb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800febc:	4607      	mov	r7, r0
 800febe:	460c      	mov	r4, r1
 800fec0:	b10a      	cbz	r2, 800fec6 <_printf_common+0x26>
 800fec2:	3301      	adds	r3, #1
 800fec4:	6033      	str	r3, [r6, #0]
 800fec6:	6823      	ldr	r3, [r4, #0]
 800fec8:	0699      	lsls	r1, r3, #26
 800feca:	bf42      	ittt	mi
 800fecc:	6833      	ldrmi	r3, [r6, #0]
 800fece:	3302      	addmi	r3, #2
 800fed0:	6033      	strmi	r3, [r6, #0]
 800fed2:	6825      	ldr	r5, [r4, #0]
 800fed4:	f015 0506 	ands.w	r5, r5, #6
 800fed8:	d106      	bne.n	800fee8 <_printf_common+0x48>
 800feda:	f104 0a19 	add.w	sl, r4, #25
 800fede:	68e3      	ldr	r3, [r4, #12]
 800fee0:	6832      	ldr	r2, [r6, #0]
 800fee2:	1a9b      	subs	r3, r3, r2
 800fee4:	42ab      	cmp	r3, r5
 800fee6:	dc26      	bgt.n	800ff36 <_printf_common+0x96>
 800fee8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800feec:	1e13      	subs	r3, r2, #0
 800feee:	6822      	ldr	r2, [r4, #0]
 800fef0:	bf18      	it	ne
 800fef2:	2301      	movne	r3, #1
 800fef4:	0692      	lsls	r2, r2, #26
 800fef6:	d42b      	bmi.n	800ff50 <_printf_common+0xb0>
 800fef8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fefc:	4649      	mov	r1, r9
 800fefe:	4638      	mov	r0, r7
 800ff00:	47c0      	blx	r8
 800ff02:	3001      	adds	r0, #1
 800ff04:	d01e      	beq.n	800ff44 <_printf_common+0xa4>
 800ff06:	6823      	ldr	r3, [r4, #0]
 800ff08:	68e5      	ldr	r5, [r4, #12]
 800ff0a:	6832      	ldr	r2, [r6, #0]
 800ff0c:	f003 0306 	and.w	r3, r3, #6
 800ff10:	2b04      	cmp	r3, #4
 800ff12:	bf08      	it	eq
 800ff14:	1aad      	subeq	r5, r5, r2
 800ff16:	68a3      	ldr	r3, [r4, #8]
 800ff18:	6922      	ldr	r2, [r4, #16]
 800ff1a:	bf0c      	ite	eq
 800ff1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ff20:	2500      	movne	r5, #0
 800ff22:	4293      	cmp	r3, r2
 800ff24:	bfc4      	itt	gt
 800ff26:	1a9b      	subgt	r3, r3, r2
 800ff28:	18ed      	addgt	r5, r5, r3
 800ff2a:	2600      	movs	r6, #0
 800ff2c:	341a      	adds	r4, #26
 800ff2e:	42b5      	cmp	r5, r6
 800ff30:	d11a      	bne.n	800ff68 <_printf_common+0xc8>
 800ff32:	2000      	movs	r0, #0
 800ff34:	e008      	b.n	800ff48 <_printf_common+0xa8>
 800ff36:	2301      	movs	r3, #1
 800ff38:	4652      	mov	r2, sl
 800ff3a:	4649      	mov	r1, r9
 800ff3c:	4638      	mov	r0, r7
 800ff3e:	47c0      	blx	r8
 800ff40:	3001      	adds	r0, #1
 800ff42:	d103      	bne.n	800ff4c <_printf_common+0xac>
 800ff44:	f04f 30ff 	mov.w	r0, #4294967295
 800ff48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff4c:	3501      	adds	r5, #1
 800ff4e:	e7c6      	b.n	800fede <_printf_common+0x3e>
 800ff50:	18e1      	adds	r1, r4, r3
 800ff52:	1c5a      	adds	r2, r3, #1
 800ff54:	2030      	movs	r0, #48	; 0x30
 800ff56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ff5a:	4422      	add	r2, r4
 800ff5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ff60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ff64:	3302      	adds	r3, #2
 800ff66:	e7c7      	b.n	800fef8 <_printf_common+0x58>
 800ff68:	2301      	movs	r3, #1
 800ff6a:	4622      	mov	r2, r4
 800ff6c:	4649      	mov	r1, r9
 800ff6e:	4638      	mov	r0, r7
 800ff70:	47c0      	blx	r8
 800ff72:	3001      	adds	r0, #1
 800ff74:	d0e6      	beq.n	800ff44 <_printf_common+0xa4>
 800ff76:	3601      	adds	r6, #1
 800ff78:	e7d9      	b.n	800ff2e <_printf_common+0x8e>
	...

0800ff7c <_printf_i>:
 800ff7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff80:	7e0f      	ldrb	r7, [r1, #24]
 800ff82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ff84:	2f78      	cmp	r7, #120	; 0x78
 800ff86:	4691      	mov	r9, r2
 800ff88:	4680      	mov	r8, r0
 800ff8a:	460c      	mov	r4, r1
 800ff8c:	469a      	mov	sl, r3
 800ff8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ff92:	d807      	bhi.n	800ffa4 <_printf_i+0x28>
 800ff94:	2f62      	cmp	r7, #98	; 0x62
 800ff96:	d80a      	bhi.n	800ffae <_printf_i+0x32>
 800ff98:	2f00      	cmp	r7, #0
 800ff9a:	f000 80d8 	beq.w	801014e <_printf_i+0x1d2>
 800ff9e:	2f58      	cmp	r7, #88	; 0x58
 800ffa0:	f000 80a3 	beq.w	80100ea <_printf_i+0x16e>
 800ffa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ffa8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ffac:	e03a      	b.n	8010024 <_printf_i+0xa8>
 800ffae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ffb2:	2b15      	cmp	r3, #21
 800ffb4:	d8f6      	bhi.n	800ffa4 <_printf_i+0x28>
 800ffb6:	a101      	add	r1, pc, #4	; (adr r1, 800ffbc <_printf_i+0x40>)
 800ffb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ffbc:	08010015 	.word	0x08010015
 800ffc0:	08010029 	.word	0x08010029
 800ffc4:	0800ffa5 	.word	0x0800ffa5
 800ffc8:	0800ffa5 	.word	0x0800ffa5
 800ffcc:	0800ffa5 	.word	0x0800ffa5
 800ffd0:	0800ffa5 	.word	0x0800ffa5
 800ffd4:	08010029 	.word	0x08010029
 800ffd8:	0800ffa5 	.word	0x0800ffa5
 800ffdc:	0800ffa5 	.word	0x0800ffa5
 800ffe0:	0800ffa5 	.word	0x0800ffa5
 800ffe4:	0800ffa5 	.word	0x0800ffa5
 800ffe8:	08010135 	.word	0x08010135
 800ffec:	08010059 	.word	0x08010059
 800fff0:	08010117 	.word	0x08010117
 800fff4:	0800ffa5 	.word	0x0800ffa5
 800fff8:	0800ffa5 	.word	0x0800ffa5
 800fffc:	08010157 	.word	0x08010157
 8010000:	0800ffa5 	.word	0x0800ffa5
 8010004:	08010059 	.word	0x08010059
 8010008:	0800ffa5 	.word	0x0800ffa5
 801000c:	0800ffa5 	.word	0x0800ffa5
 8010010:	0801011f 	.word	0x0801011f
 8010014:	682b      	ldr	r3, [r5, #0]
 8010016:	1d1a      	adds	r2, r3, #4
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	602a      	str	r2, [r5, #0]
 801001c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010020:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010024:	2301      	movs	r3, #1
 8010026:	e0a3      	b.n	8010170 <_printf_i+0x1f4>
 8010028:	6820      	ldr	r0, [r4, #0]
 801002a:	6829      	ldr	r1, [r5, #0]
 801002c:	0606      	lsls	r6, r0, #24
 801002e:	f101 0304 	add.w	r3, r1, #4
 8010032:	d50a      	bpl.n	801004a <_printf_i+0xce>
 8010034:	680e      	ldr	r6, [r1, #0]
 8010036:	602b      	str	r3, [r5, #0]
 8010038:	2e00      	cmp	r6, #0
 801003a:	da03      	bge.n	8010044 <_printf_i+0xc8>
 801003c:	232d      	movs	r3, #45	; 0x2d
 801003e:	4276      	negs	r6, r6
 8010040:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010044:	485e      	ldr	r0, [pc, #376]	; (80101c0 <_printf_i+0x244>)
 8010046:	230a      	movs	r3, #10
 8010048:	e019      	b.n	801007e <_printf_i+0x102>
 801004a:	680e      	ldr	r6, [r1, #0]
 801004c:	602b      	str	r3, [r5, #0]
 801004e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010052:	bf18      	it	ne
 8010054:	b236      	sxthne	r6, r6
 8010056:	e7ef      	b.n	8010038 <_printf_i+0xbc>
 8010058:	682b      	ldr	r3, [r5, #0]
 801005a:	6820      	ldr	r0, [r4, #0]
 801005c:	1d19      	adds	r1, r3, #4
 801005e:	6029      	str	r1, [r5, #0]
 8010060:	0601      	lsls	r1, r0, #24
 8010062:	d501      	bpl.n	8010068 <_printf_i+0xec>
 8010064:	681e      	ldr	r6, [r3, #0]
 8010066:	e002      	b.n	801006e <_printf_i+0xf2>
 8010068:	0646      	lsls	r6, r0, #25
 801006a:	d5fb      	bpl.n	8010064 <_printf_i+0xe8>
 801006c:	881e      	ldrh	r6, [r3, #0]
 801006e:	4854      	ldr	r0, [pc, #336]	; (80101c0 <_printf_i+0x244>)
 8010070:	2f6f      	cmp	r7, #111	; 0x6f
 8010072:	bf0c      	ite	eq
 8010074:	2308      	moveq	r3, #8
 8010076:	230a      	movne	r3, #10
 8010078:	2100      	movs	r1, #0
 801007a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801007e:	6865      	ldr	r5, [r4, #4]
 8010080:	60a5      	str	r5, [r4, #8]
 8010082:	2d00      	cmp	r5, #0
 8010084:	bfa2      	ittt	ge
 8010086:	6821      	ldrge	r1, [r4, #0]
 8010088:	f021 0104 	bicge.w	r1, r1, #4
 801008c:	6021      	strge	r1, [r4, #0]
 801008e:	b90e      	cbnz	r6, 8010094 <_printf_i+0x118>
 8010090:	2d00      	cmp	r5, #0
 8010092:	d04d      	beq.n	8010130 <_printf_i+0x1b4>
 8010094:	4615      	mov	r5, r2
 8010096:	fbb6 f1f3 	udiv	r1, r6, r3
 801009a:	fb03 6711 	mls	r7, r3, r1, r6
 801009e:	5dc7      	ldrb	r7, [r0, r7]
 80100a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80100a4:	4637      	mov	r7, r6
 80100a6:	42bb      	cmp	r3, r7
 80100a8:	460e      	mov	r6, r1
 80100aa:	d9f4      	bls.n	8010096 <_printf_i+0x11a>
 80100ac:	2b08      	cmp	r3, #8
 80100ae:	d10b      	bne.n	80100c8 <_printf_i+0x14c>
 80100b0:	6823      	ldr	r3, [r4, #0]
 80100b2:	07de      	lsls	r6, r3, #31
 80100b4:	d508      	bpl.n	80100c8 <_printf_i+0x14c>
 80100b6:	6923      	ldr	r3, [r4, #16]
 80100b8:	6861      	ldr	r1, [r4, #4]
 80100ba:	4299      	cmp	r1, r3
 80100bc:	bfde      	ittt	le
 80100be:	2330      	movle	r3, #48	; 0x30
 80100c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80100c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80100c8:	1b52      	subs	r2, r2, r5
 80100ca:	6122      	str	r2, [r4, #16]
 80100cc:	f8cd a000 	str.w	sl, [sp]
 80100d0:	464b      	mov	r3, r9
 80100d2:	aa03      	add	r2, sp, #12
 80100d4:	4621      	mov	r1, r4
 80100d6:	4640      	mov	r0, r8
 80100d8:	f7ff fee2 	bl	800fea0 <_printf_common>
 80100dc:	3001      	adds	r0, #1
 80100de:	d14c      	bne.n	801017a <_printf_i+0x1fe>
 80100e0:	f04f 30ff 	mov.w	r0, #4294967295
 80100e4:	b004      	add	sp, #16
 80100e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100ea:	4835      	ldr	r0, [pc, #212]	; (80101c0 <_printf_i+0x244>)
 80100ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80100f0:	6829      	ldr	r1, [r5, #0]
 80100f2:	6823      	ldr	r3, [r4, #0]
 80100f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80100f8:	6029      	str	r1, [r5, #0]
 80100fa:	061d      	lsls	r5, r3, #24
 80100fc:	d514      	bpl.n	8010128 <_printf_i+0x1ac>
 80100fe:	07df      	lsls	r7, r3, #31
 8010100:	bf44      	itt	mi
 8010102:	f043 0320 	orrmi.w	r3, r3, #32
 8010106:	6023      	strmi	r3, [r4, #0]
 8010108:	b91e      	cbnz	r6, 8010112 <_printf_i+0x196>
 801010a:	6823      	ldr	r3, [r4, #0]
 801010c:	f023 0320 	bic.w	r3, r3, #32
 8010110:	6023      	str	r3, [r4, #0]
 8010112:	2310      	movs	r3, #16
 8010114:	e7b0      	b.n	8010078 <_printf_i+0xfc>
 8010116:	6823      	ldr	r3, [r4, #0]
 8010118:	f043 0320 	orr.w	r3, r3, #32
 801011c:	6023      	str	r3, [r4, #0]
 801011e:	2378      	movs	r3, #120	; 0x78
 8010120:	4828      	ldr	r0, [pc, #160]	; (80101c4 <_printf_i+0x248>)
 8010122:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010126:	e7e3      	b.n	80100f0 <_printf_i+0x174>
 8010128:	0659      	lsls	r1, r3, #25
 801012a:	bf48      	it	mi
 801012c:	b2b6      	uxthmi	r6, r6
 801012e:	e7e6      	b.n	80100fe <_printf_i+0x182>
 8010130:	4615      	mov	r5, r2
 8010132:	e7bb      	b.n	80100ac <_printf_i+0x130>
 8010134:	682b      	ldr	r3, [r5, #0]
 8010136:	6826      	ldr	r6, [r4, #0]
 8010138:	6961      	ldr	r1, [r4, #20]
 801013a:	1d18      	adds	r0, r3, #4
 801013c:	6028      	str	r0, [r5, #0]
 801013e:	0635      	lsls	r5, r6, #24
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	d501      	bpl.n	8010148 <_printf_i+0x1cc>
 8010144:	6019      	str	r1, [r3, #0]
 8010146:	e002      	b.n	801014e <_printf_i+0x1d2>
 8010148:	0670      	lsls	r0, r6, #25
 801014a:	d5fb      	bpl.n	8010144 <_printf_i+0x1c8>
 801014c:	8019      	strh	r1, [r3, #0]
 801014e:	2300      	movs	r3, #0
 8010150:	6123      	str	r3, [r4, #16]
 8010152:	4615      	mov	r5, r2
 8010154:	e7ba      	b.n	80100cc <_printf_i+0x150>
 8010156:	682b      	ldr	r3, [r5, #0]
 8010158:	1d1a      	adds	r2, r3, #4
 801015a:	602a      	str	r2, [r5, #0]
 801015c:	681d      	ldr	r5, [r3, #0]
 801015e:	6862      	ldr	r2, [r4, #4]
 8010160:	2100      	movs	r1, #0
 8010162:	4628      	mov	r0, r5
 8010164:	f7f0 f96c 	bl	8000440 <memchr>
 8010168:	b108      	cbz	r0, 801016e <_printf_i+0x1f2>
 801016a:	1b40      	subs	r0, r0, r5
 801016c:	6060      	str	r0, [r4, #4]
 801016e:	6863      	ldr	r3, [r4, #4]
 8010170:	6123      	str	r3, [r4, #16]
 8010172:	2300      	movs	r3, #0
 8010174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010178:	e7a8      	b.n	80100cc <_printf_i+0x150>
 801017a:	6923      	ldr	r3, [r4, #16]
 801017c:	462a      	mov	r2, r5
 801017e:	4649      	mov	r1, r9
 8010180:	4640      	mov	r0, r8
 8010182:	47d0      	blx	sl
 8010184:	3001      	adds	r0, #1
 8010186:	d0ab      	beq.n	80100e0 <_printf_i+0x164>
 8010188:	6823      	ldr	r3, [r4, #0]
 801018a:	079b      	lsls	r3, r3, #30
 801018c:	d413      	bmi.n	80101b6 <_printf_i+0x23a>
 801018e:	68e0      	ldr	r0, [r4, #12]
 8010190:	9b03      	ldr	r3, [sp, #12]
 8010192:	4298      	cmp	r0, r3
 8010194:	bfb8      	it	lt
 8010196:	4618      	movlt	r0, r3
 8010198:	e7a4      	b.n	80100e4 <_printf_i+0x168>
 801019a:	2301      	movs	r3, #1
 801019c:	4632      	mov	r2, r6
 801019e:	4649      	mov	r1, r9
 80101a0:	4640      	mov	r0, r8
 80101a2:	47d0      	blx	sl
 80101a4:	3001      	adds	r0, #1
 80101a6:	d09b      	beq.n	80100e0 <_printf_i+0x164>
 80101a8:	3501      	adds	r5, #1
 80101aa:	68e3      	ldr	r3, [r4, #12]
 80101ac:	9903      	ldr	r1, [sp, #12]
 80101ae:	1a5b      	subs	r3, r3, r1
 80101b0:	42ab      	cmp	r3, r5
 80101b2:	dcf2      	bgt.n	801019a <_printf_i+0x21e>
 80101b4:	e7eb      	b.n	801018e <_printf_i+0x212>
 80101b6:	2500      	movs	r5, #0
 80101b8:	f104 0619 	add.w	r6, r4, #25
 80101bc:	e7f5      	b.n	80101aa <_printf_i+0x22e>
 80101be:	bf00      	nop
 80101c0:	08010876 	.word	0x08010876
 80101c4:	08010887 	.word	0x08010887

080101c8 <memcpy>:
 80101c8:	440a      	add	r2, r1
 80101ca:	4291      	cmp	r1, r2
 80101cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80101d0:	d100      	bne.n	80101d4 <memcpy+0xc>
 80101d2:	4770      	bx	lr
 80101d4:	b510      	push	{r4, lr}
 80101d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80101da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80101de:	4291      	cmp	r1, r2
 80101e0:	d1f9      	bne.n	80101d6 <memcpy+0xe>
 80101e2:	bd10      	pop	{r4, pc}

080101e4 <memmove>:
 80101e4:	4288      	cmp	r0, r1
 80101e6:	b510      	push	{r4, lr}
 80101e8:	eb01 0402 	add.w	r4, r1, r2
 80101ec:	d902      	bls.n	80101f4 <memmove+0x10>
 80101ee:	4284      	cmp	r4, r0
 80101f0:	4623      	mov	r3, r4
 80101f2:	d807      	bhi.n	8010204 <memmove+0x20>
 80101f4:	1e43      	subs	r3, r0, #1
 80101f6:	42a1      	cmp	r1, r4
 80101f8:	d008      	beq.n	801020c <memmove+0x28>
 80101fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80101fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010202:	e7f8      	b.n	80101f6 <memmove+0x12>
 8010204:	4402      	add	r2, r0
 8010206:	4601      	mov	r1, r0
 8010208:	428a      	cmp	r2, r1
 801020a:	d100      	bne.n	801020e <memmove+0x2a>
 801020c:	bd10      	pop	{r4, pc}
 801020e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010212:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010216:	e7f7      	b.n	8010208 <memmove+0x24>

08010218 <_free_r>:
 8010218:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801021a:	2900      	cmp	r1, #0
 801021c:	d044      	beq.n	80102a8 <_free_r+0x90>
 801021e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010222:	9001      	str	r0, [sp, #4]
 8010224:	2b00      	cmp	r3, #0
 8010226:	f1a1 0404 	sub.w	r4, r1, #4
 801022a:	bfb8      	it	lt
 801022c:	18e4      	addlt	r4, r4, r3
 801022e:	f000 f913 	bl	8010458 <__malloc_lock>
 8010232:	4a1e      	ldr	r2, [pc, #120]	; (80102ac <_free_r+0x94>)
 8010234:	9801      	ldr	r0, [sp, #4]
 8010236:	6813      	ldr	r3, [r2, #0]
 8010238:	b933      	cbnz	r3, 8010248 <_free_r+0x30>
 801023a:	6063      	str	r3, [r4, #4]
 801023c:	6014      	str	r4, [r2, #0]
 801023e:	b003      	add	sp, #12
 8010240:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010244:	f000 b90e 	b.w	8010464 <__malloc_unlock>
 8010248:	42a3      	cmp	r3, r4
 801024a:	d908      	bls.n	801025e <_free_r+0x46>
 801024c:	6825      	ldr	r5, [r4, #0]
 801024e:	1961      	adds	r1, r4, r5
 8010250:	428b      	cmp	r3, r1
 8010252:	bf01      	itttt	eq
 8010254:	6819      	ldreq	r1, [r3, #0]
 8010256:	685b      	ldreq	r3, [r3, #4]
 8010258:	1949      	addeq	r1, r1, r5
 801025a:	6021      	streq	r1, [r4, #0]
 801025c:	e7ed      	b.n	801023a <_free_r+0x22>
 801025e:	461a      	mov	r2, r3
 8010260:	685b      	ldr	r3, [r3, #4]
 8010262:	b10b      	cbz	r3, 8010268 <_free_r+0x50>
 8010264:	42a3      	cmp	r3, r4
 8010266:	d9fa      	bls.n	801025e <_free_r+0x46>
 8010268:	6811      	ldr	r1, [r2, #0]
 801026a:	1855      	adds	r5, r2, r1
 801026c:	42a5      	cmp	r5, r4
 801026e:	d10b      	bne.n	8010288 <_free_r+0x70>
 8010270:	6824      	ldr	r4, [r4, #0]
 8010272:	4421      	add	r1, r4
 8010274:	1854      	adds	r4, r2, r1
 8010276:	42a3      	cmp	r3, r4
 8010278:	6011      	str	r1, [r2, #0]
 801027a:	d1e0      	bne.n	801023e <_free_r+0x26>
 801027c:	681c      	ldr	r4, [r3, #0]
 801027e:	685b      	ldr	r3, [r3, #4]
 8010280:	6053      	str	r3, [r2, #4]
 8010282:	4421      	add	r1, r4
 8010284:	6011      	str	r1, [r2, #0]
 8010286:	e7da      	b.n	801023e <_free_r+0x26>
 8010288:	d902      	bls.n	8010290 <_free_r+0x78>
 801028a:	230c      	movs	r3, #12
 801028c:	6003      	str	r3, [r0, #0]
 801028e:	e7d6      	b.n	801023e <_free_r+0x26>
 8010290:	6825      	ldr	r5, [r4, #0]
 8010292:	1961      	adds	r1, r4, r5
 8010294:	428b      	cmp	r3, r1
 8010296:	bf04      	itt	eq
 8010298:	6819      	ldreq	r1, [r3, #0]
 801029a:	685b      	ldreq	r3, [r3, #4]
 801029c:	6063      	str	r3, [r4, #4]
 801029e:	bf04      	itt	eq
 80102a0:	1949      	addeq	r1, r1, r5
 80102a2:	6021      	streq	r1, [r4, #0]
 80102a4:	6054      	str	r4, [r2, #4]
 80102a6:	e7ca      	b.n	801023e <_free_r+0x26>
 80102a8:	b003      	add	sp, #12
 80102aa:	bd30      	pop	{r4, r5, pc}
 80102ac:	20001ae4 	.word	0x20001ae4

080102b0 <sbrk_aligned>:
 80102b0:	b570      	push	{r4, r5, r6, lr}
 80102b2:	4e0e      	ldr	r6, [pc, #56]	; (80102ec <sbrk_aligned+0x3c>)
 80102b4:	460c      	mov	r4, r1
 80102b6:	6831      	ldr	r1, [r6, #0]
 80102b8:	4605      	mov	r5, r0
 80102ba:	b911      	cbnz	r1, 80102c2 <sbrk_aligned+0x12>
 80102bc:	f000 f8bc 	bl	8010438 <_sbrk_r>
 80102c0:	6030      	str	r0, [r6, #0]
 80102c2:	4621      	mov	r1, r4
 80102c4:	4628      	mov	r0, r5
 80102c6:	f000 f8b7 	bl	8010438 <_sbrk_r>
 80102ca:	1c43      	adds	r3, r0, #1
 80102cc:	d00a      	beq.n	80102e4 <sbrk_aligned+0x34>
 80102ce:	1cc4      	adds	r4, r0, #3
 80102d0:	f024 0403 	bic.w	r4, r4, #3
 80102d4:	42a0      	cmp	r0, r4
 80102d6:	d007      	beq.n	80102e8 <sbrk_aligned+0x38>
 80102d8:	1a21      	subs	r1, r4, r0
 80102da:	4628      	mov	r0, r5
 80102dc:	f000 f8ac 	bl	8010438 <_sbrk_r>
 80102e0:	3001      	adds	r0, #1
 80102e2:	d101      	bne.n	80102e8 <sbrk_aligned+0x38>
 80102e4:	f04f 34ff 	mov.w	r4, #4294967295
 80102e8:	4620      	mov	r0, r4
 80102ea:	bd70      	pop	{r4, r5, r6, pc}
 80102ec:	20001ae8 	.word	0x20001ae8

080102f0 <_malloc_r>:
 80102f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102f4:	1ccd      	adds	r5, r1, #3
 80102f6:	f025 0503 	bic.w	r5, r5, #3
 80102fa:	3508      	adds	r5, #8
 80102fc:	2d0c      	cmp	r5, #12
 80102fe:	bf38      	it	cc
 8010300:	250c      	movcc	r5, #12
 8010302:	2d00      	cmp	r5, #0
 8010304:	4607      	mov	r7, r0
 8010306:	db01      	blt.n	801030c <_malloc_r+0x1c>
 8010308:	42a9      	cmp	r1, r5
 801030a:	d905      	bls.n	8010318 <_malloc_r+0x28>
 801030c:	230c      	movs	r3, #12
 801030e:	603b      	str	r3, [r7, #0]
 8010310:	2600      	movs	r6, #0
 8010312:	4630      	mov	r0, r6
 8010314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010318:	4e2e      	ldr	r6, [pc, #184]	; (80103d4 <_malloc_r+0xe4>)
 801031a:	f000 f89d 	bl	8010458 <__malloc_lock>
 801031e:	6833      	ldr	r3, [r6, #0]
 8010320:	461c      	mov	r4, r3
 8010322:	bb34      	cbnz	r4, 8010372 <_malloc_r+0x82>
 8010324:	4629      	mov	r1, r5
 8010326:	4638      	mov	r0, r7
 8010328:	f7ff ffc2 	bl	80102b0 <sbrk_aligned>
 801032c:	1c43      	adds	r3, r0, #1
 801032e:	4604      	mov	r4, r0
 8010330:	d14d      	bne.n	80103ce <_malloc_r+0xde>
 8010332:	6834      	ldr	r4, [r6, #0]
 8010334:	4626      	mov	r6, r4
 8010336:	2e00      	cmp	r6, #0
 8010338:	d140      	bne.n	80103bc <_malloc_r+0xcc>
 801033a:	6823      	ldr	r3, [r4, #0]
 801033c:	4631      	mov	r1, r6
 801033e:	4638      	mov	r0, r7
 8010340:	eb04 0803 	add.w	r8, r4, r3
 8010344:	f000 f878 	bl	8010438 <_sbrk_r>
 8010348:	4580      	cmp	r8, r0
 801034a:	d13a      	bne.n	80103c2 <_malloc_r+0xd2>
 801034c:	6821      	ldr	r1, [r4, #0]
 801034e:	3503      	adds	r5, #3
 8010350:	1a6d      	subs	r5, r5, r1
 8010352:	f025 0503 	bic.w	r5, r5, #3
 8010356:	3508      	adds	r5, #8
 8010358:	2d0c      	cmp	r5, #12
 801035a:	bf38      	it	cc
 801035c:	250c      	movcc	r5, #12
 801035e:	4629      	mov	r1, r5
 8010360:	4638      	mov	r0, r7
 8010362:	f7ff ffa5 	bl	80102b0 <sbrk_aligned>
 8010366:	3001      	adds	r0, #1
 8010368:	d02b      	beq.n	80103c2 <_malloc_r+0xd2>
 801036a:	6823      	ldr	r3, [r4, #0]
 801036c:	442b      	add	r3, r5
 801036e:	6023      	str	r3, [r4, #0]
 8010370:	e00e      	b.n	8010390 <_malloc_r+0xa0>
 8010372:	6822      	ldr	r2, [r4, #0]
 8010374:	1b52      	subs	r2, r2, r5
 8010376:	d41e      	bmi.n	80103b6 <_malloc_r+0xc6>
 8010378:	2a0b      	cmp	r2, #11
 801037a:	d916      	bls.n	80103aa <_malloc_r+0xba>
 801037c:	1961      	adds	r1, r4, r5
 801037e:	42a3      	cmp	r3, r4
 8010380:	6025      	str	r5, [r4, #0]
 8010382:	bf18      	it	ne
 8010384:	6059      	strne	r1, [r3, #4]
 8010386:	6863      	ldr	r3, [r4, #4]
 8010388:	bf08      	it	eq
 801038a:	6031      	streq	r1, [r6, #0]
 801038c:	5162      	str	r2, [r4, r5]
 801038e:	604b      	str	r3, [r1, #4]
 8010390:	4638      	mov	r0, r7
 8010392:	f104 060b 	add.w	r6, r4, #11
 8010396:	f000 f865 	bl	8010464 <__malloc_unlock>
 801039a:	f026 0607 	bic.w	r6, r6, #7
 801039e:	1d23      	adds	r3, r4, #4
 80103a0:	1af2      	subs	r2, r6, r3
 80103a2:	d0b6      	beq.n	8010312 <_malloc_r+0x22>
 80103a4:	1b9b      	subs	r3, r3, r6
 80103a6:	50a3      	str	r3, [r4, r2]
 80103a8:	e7b3      	b.n	8010312 <_malloc_r+0x22>
 80103aa:	6862      	ldr	r2, [r4, #4]
 80103ac:	42a3      	cmp	r3, r4
 80103ae:	bf0c      	ite	eq
 80103b0:	6032      	streq	r2, [r6, #0]
 80103b2:	605a      	strne	r2, [r3, #4]
 80103b4:	e7ec      	b.n	8010390 <_malloc_r+0xa0>
 80103b6:	4623      	mov	r3, r4
 80103b8:	6864      	ldr	r4, [r4, #4]
 80103ba:	e7b2      	b.n	8010322 <_malloc_r+0x32>
 80103bc:	4634      	mov	r4, r6
 80103be:	6876      	ldr	r6, [r6, #4]
 80103c0:	e7b9      	b.n	8010336 <_malloc_r+0x46>
 80103c2:	230c      	movs	r3, #12
 80103c4:	603b      	str	r3, [r7, #0]
 80103c6:	4638      	mov	r0, r7
 80103c8:	f000 f84c 	bl	8010464 <__malloc_unlock>
 80103cc:	e7a1      	b.n	8010312 <_malloc_r+0x22>
 80103ce:	6025      	str	r5, [r4, #0]
 80103d0:	e7de      	b.n	8010390 <_malloc_r+0xa0>
 80103d2:	bf00      	nop
 80103d4:	20001ae4 	.word	0x20001ae4

080103d8 <_realloc_r>:
 80103d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103dc:	4680      	mov	r8, r0
 80103de:	4614      	mov	r4, r2
 80103e0:	460e      	mov	r6, r1
 80103e2:	b921      	cbnz	r1, 80103ee <_realloc_r+0x16>
 80103e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80103e8:	4611      	mov	r1, r2
 80103ea:	f7ff bf81 	b.w	80102f0 <_malloc_r>
 80103ee:	b92a      	cbnz	r2, 80103fc <_realloc_r+0x24>
 80103f0:	f7ff ff12 	bl	8010218 <_free_r>
 80103f4:	4625      	mov	r5, r4
 80103f6:	4628      	mov	r0, r5
 80103f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103fc:	f000 f838 	bl	8010470 <_malloc_usable_size_r>
 8010400:	4284      	cmp	r4, r0
 8010402:	4607      	mov	r7, r0
 8010404:	d802      	bhi.n	801040c <_realloc_r+0x34>
 8010406:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801040a:	d812      	bhi.n	8010432 <_realloc_r+0x5a>
 801040c:	4621      	mov	r1, r4
 801040e:	4640      	mov	r0, r8
 8010410:	f7ff ff6e 	bl	80102f0 <_malloc_r>
 8010414:	4605      	mov	r5, r0
 8010416:	2800      	cmp	r0, #0
 8010418:	d0ed      	beq.n	80103f6 <_realloc_r+0x1e>
 801041a:	42bc      	cmp	r4, r7
 801041c:	4622      	mov	r2, r4
 801041e:	4631      	mov	r1, r6
 8010420:	bf28      	it	cs
 8010422:	463a      	movcs	r2, r7
 8010424:	f7ff fed0 	bl	80101c8 <memcpy>
 8010428:	4631      	mov	r1, r6
 801042a:	4640      	mov	r0, r8
 801042c:	f7ff fef4 	bl	8010218 <_free_r>
 8010430:	e7e1      	b.n	80103f6 <_realloc_r+0x1e>
 8010432:	4635      	mov	r5, r6
 8010434:	e7df      	b.n	80103f6 <_realloc_r+0x1e>
	...

08010438 <_sbrk_r>:
 8010438:	b538      	push	{r3, r4, r5, lr}
 801043a:	4d06      	ldr	r5, [pc, #24]	; (8010454 <_sbrk_r+0x1c>)
 801043c:	2300      	movs	r3, #0
 801043e:	4604      	mov	r4, r0
 8010440:	4608      	mov	r0, r1
 8010442:	602b      	str	r3, [r5, #0]
 8010444:	f7f1 f814 	bl	8001470 <_sbrk>
 8010448:	1c43      	adds	r3, r0, #1
 801044a:	d102      	bne.n	8010452 <_sbrk_r+0x1a>
 801044c:	682b      	ldr	r3, [r5, #0]
 801044e:	b103      	cbz	r3, 8010452 <_sbrk_r+0x1a>
 8010450:	6023      	str	r3, [r4, #0]
 8010452:	bd38      	pop	{r3, r4, r5, pc}
 8010454:	20001aec 	.word	0x20001aec

08010458 <__malloc_lock>:
 8010458:	4801      	ldr	r0, [pc, #4]	; (8010460 <__malloc_lock+0x8>)
 801045a:	f000 b811 	b.w	8010480 <__retarget_lock_acquire_recursive>
 801045e:	bf00      	nop
 8010460:	20001af0 	.word	0x20001af0

08010464 <__malloc_unlock>:
 8010464:	4801      	ldr	r0, [pc, #4]	; (801046c <__malloc_unlock+0x8>)
 8010466:	f000 b80c 	b.w	8010482 <__retarget_lock_release_recursive>
 801046a:	bf00      	nop
 801046c:	20001af0 	.word	0x20001af0

08010470 <_malloc_usable_size_r>:
 8010470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010474:	1f18      	subs	r0, r3, #4
 8010476:	2b00      	cmp	r3, #0
 8010478:	bfbc      	itt	lt
 801047a:	580b      	ldrlt	r3, [r1, r0]
 801047c:	18c0      	addlt	r0, r0, r3
 801047e:	4770      	bx	lr

08010480 <__retarget_lock_acquire_recursive>:
 8010480:	4770      	bx	lr

08010482 <__retarget_lock_release_recursive>:
 8010482:	4770      	bx	lr

08010484 <_init>:
 8010484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010486:	bf00      	nop
 8010488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801048a:	bc08      	pop	{r3}
 801048c:	469e      	mov	lr, r3
 801048e:	4770      	bx	lr

08010490 <_fini>:
 8010490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010492:	bf00      	nop
 8010494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010496:	bc08      	pop	{r3}
 8010498:	469e      	mov	lr, r3
 801049a:	4770      	bx	lr
