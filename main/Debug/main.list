
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d484  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  0800d624  0800d624  0001d624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da08  0800da08  0002011c  2**0
                  CONTENTS
  4 .ARM          00000008  0800da08  0800da08  0001da08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da10  0800da10  0002011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da10  0800da10  0001da10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da14  0800da14  0001da14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  0800da18  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000038bc  20000120  0800db34  00020120  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200039dc  0800db34  000239dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b93d  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005bc1  00000000  00000000  0004ba89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022f0  00000000  00000000  00051650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002078  00000000  00000000  00053940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bd2b  00000000  00000000  000559b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b977  00000000  00000000  000816e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe3b4  00000000  00000000  000ad05a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ab40e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009880  00000000  00000000  001ab460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000120 	.word	0x20000120
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d60c 	.word	0x0800d60c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000124 	.word	0x20000124
 80001dc:	0800d60c 	.word	0x0800d60c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <PreSleepProcessing>:

/* USER CODE END FunctionPrototypes */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
    /* place for user code */
    uint32_t delay_ms = ulExpectedIdleTime * 2048;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	02db      	lsls	r3, r3, #11
 80005a0:	60fb      	str	r3, [r7, #12]

    HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2120      	movs	r1, #32
 80005a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005aa:	f002 fb7d 	bl	8002ca8 <HAL_GPIO_WritePin>
    delay_ms /= 1000;
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	4a10      	ldr	r2, [pc, #64]	; (80005f4 <PreSleepProcessing+0x60>)
 80005b2:	fba2 2303 	umull	r2, r3, r2, r3
 80005b6:	099b      	lsrs	r3, r3, #6
 80005b8:	60fb      	str	r3, [r7, #12]
//    fm_debug_uint32_uart(ulExpectedIdleTime);
    HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, delay_ms, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 80005ba:	2200      	movs	r2, #0
 80005bc:	68f9      	ldr	r1, [r7, #12]
 80005be:	480e      	ldr	r0, [pc, #56]	; (80005f8 <PreSleepProcessing+0x64>)
 80005c0:	f004 f934 	bl	800482c <HAL_RTCEx_SetWakeUpTimer_IT>
    ulExpectedIdleTime = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
    HAL_SuspendTick();
 80005c8:	f000 fce0 	bl	8000f8c <HAL_SuspendTick>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005cc:	f3bf 8f4f 	dsb	sy
}
 80005d0:	bf00      	nop

    __DSB();
    HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80005d2:	2001      	movs	r0, #1
 80005d4:	f002 fc0c 	bl	8002df0 <HAL_PWREx_EnterSTOP2Mode>
  __ASM volatile ("isb 0xF":::"memory");
 80005d8:	f3bf 8f6f 	isb	sy
}
 80005dc:	bf00      	nop
    __ISB();
    HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80005de:	2201      	movs	r2, #1
 80005e0:	2120      	movs	r1, #32
 80005e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e6:	f002 fb5f 	bl	8002ca8 <HAL_GPIO_WritePin>
}
 80005ea:	bf00      	nop
 80005ec:	3710      	adds	r7, #16
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	10624dd3 	.word	0x10624dd3
 80005f8:	200001a4 	.word	0x200001a4

080005fc <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
    /* place for user code */
    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8000604:	4804      	ldr	r0, [pc, #16]	; (8000618 <PostSleepProcessing+0x1c>)
 8000606:	f004 f9a5 	bl	8004954 <HAL_RTCEx_DeactivateWakeUpTimer>
    HAL_ResumeTick();
 800060a:	f000 fcd1 	bl	8000fb0 <HAL_ResumeTick>
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200001a4 	.word	0x200001a4

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fd87 	bl	8001132 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f844 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 f9fc 	bl	8000a24 <MX_GPIO_Init>
  MX_SPI1_Init();
 800062c:	f000 f966 	bl	80008fc <MX_SPI1_Init>
  MX_RTC_Init();
 8000630:	f000 f8fc 	bl	800082c <MX_RTC_Init>
  MX_TIM16_Init();
 8000634:	f000 f9a0 	bl	8000978 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8000638:	f000 f9c4 	bl	80009c4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800063c:	f000 f88e 	bl	800075c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  fm_lcd_clear();
 8000640:	f009 fe1d 	bl	800a27e <fm_lcd_clear>
  fm_event_init();
 8000644:	f009 fb86 	bl	8009d54 <fm_event_init>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000648:	217f      	movs	r1, #127	; 0x7f
 800064a:	4810      	ldr	r0, [pc, #64]	; (800068c <main+0x70>)
 800064c:	f002 f83e 	bl	80026cc <HAL_ADCEx_Calibration_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000650:	f005 fd68 	bl	8006124 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of debounce_semaphore */
  debounce_semaphoreHandle = osSemaphoreNew(1, 1, &debounce_semaphore_attributes);
 8000654:	4a0e      	ldr	r2, [pc, #56]	; (8000690 <main+0x74>)
 8000656:	2101      	movs	r1, #1
 8000658:	2001      	movs	r0, #1
 800065a:	f005 fe5a 	bl	8006312 <osSemaphoreNew>
 800065e:	4603      	mov	r3, r0
 8000660:	4a0c      	ldr	r2, [pc, #48]	; (8000694 <main+0x78>)
 8000662:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of MenuTask */
  MenuTaskHandle = osThreadNew(menu_task, NULL, &MenuTask_attributes);
 8000664:	4a0c      	ldr	r2, [pc, #48]	; (8000698 <main+0x7c>)
 8000666:	2100      	movs	r1, #0
 8000668:	480c      	ldr	r0, [pc, #48]	; (800069c <main+0x80>)
 800066a:	f005 fda5 	bl	80061b8 <osThreadNew>
 800066e:	4603      	mov	r3, r0
 8000670:	4a0b      	ldr	r2, [pc, #44]	; (80006a0 <main+0x84>)
 8000672:	6013      	str	r3, [r2, #0]

  /* creation of DebounceTask */
  DebounceTaskHandle = osThreadNew(debounce_task, NULL, &DebounceTask_attributes);
 8000674:	4a0b      	ldr	r2, [pc, #44]	; (80006a4 <main+0x88>)
 8000676:	2100      	movs	r1, #0
 8000678:	480b      	ldr	r0, [pc, #44]	; (80006a8 <main+0x8c>)
 800067a:	f005 fd9d 	bl	80061b8 <osThreadNew>
 800067e:	4603      	mov	r3, r0
 8000680:	4a0a      	ldr	r2, [pc, #40]	; (80006ac <main+0x90>)
 8000682:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000684:	f005 fd72 	bl	800616c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000688:	e7fe      	b.n	8000688 <main+0x6c>
 800068a:	bf00      	nop
 800068c:	2000013c 	.word	0x2000013c
 8000690:	0800d7e8 	.word	0x0800d7e8
 8000694:	20000304 	.word	0x20000304
 8000698:	0800d7a0 	.word	0x0800d7a0
 800069c:	08000b25 	.word	0x08000b25
 80006a0:	200002fc 	.word	0x200002fc
 80006a4:	0800d7c4 	.word	0x0800d7c4
 80006a8:	08000b71 	.word	0x08000b71
 80006ac:	20000300 	.word	0x20000300

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b096      	sub	sp, #88	; 0x58
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	2244      	movs	r2, #68	; 0x44
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f00c fa14 	bl	800caec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	463b      	mov	r3, r7
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 80006d2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80006d6:	f002 fb35 	bl	8002d44 <HAL_PWREx_ControlVoltageScaling>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006e0:	f000 fa82 	bl	8000be8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006e4:	f002 fb10 	bl	8002d08 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006e8:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <SystemClock_Config+0xa8>)
 80006ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006ee:	4a1a      	ldr	r2, [pc, #104]	; (8000758 <SystemClock_Config+0xa8>)
 80006f0:	f023 0318 	bic.w	r3, r3, #24
 80006f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006f8:	2314      	movs	r3, #20
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006fc:	2301      	movs	r3, #1
 80006fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000700:	2301      	movs	r3, #1
 8000702:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000708:	2360      	movs	r3, #96	; 0x60
 800070a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800070c:	2300      	movs	r3, #0
 800070e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	4618      	mov	r0, r3
 8000716:	f002 fb97 	bl	8002e48 <HAL_RCC_OscConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000720:	f000 fa62 	bl	8000be8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000724:	230f      	movs	r3, #15
 8000726:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000728:	2300      	movs	r3, #0
 800072a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000738:	463b      	mov	r3, r7
 800073a:	2100      	movs	r1, #0
 800073c:	4618      	mov	r0, r3
 800073e:	f002 ff97 	bl	8003670 <HAL_RCC_ClockConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000748:	f000 fa4e 	bl	8000be8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800074c:	f003 fc52 	bl	8003ff4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000750:	bf00      	nop
 8000752:	3758      	adds	r7, #88	; 0x58
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40021000 	.word	0x40021000

0800075c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000762:	463b      	mov	r3, r7
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
 8000770:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000772:	4b2b      	ldr	r3, [pc, #172]	; (8000820 <MX_ADC1_Init+0xc4>)
 8000774:	4a2b      	ldr	r2, [pc, #172]	; (8000824 <MX_ADC1_Init+0xc8>)
 8000776:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000778:	4b29      	ldr	r3, [pc, #164]	; (8000820 <MX_ADC1_Init+0xc4>)
 800077a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800077e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000780:	4b27      	ldr	r3, [pc, #156]	; (8000820 <MX_ADC1_Init+0xc4>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000786:	4b26      	ldr	r3, [pc, #152]	; (8000820 <MX_ADC1_Init+0xc4>)
 8000788:	2200      	movs	r2, #0
 800078a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800078c:	4b24      	ldr	r3, [pc, #144]	; (8000820 <MX_ADC1_Init+0xc4>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000792:	4b23      	ldr	r3, [pc, #140]	; (8000820 <MX_ADC1_Init+0xc4>)
 8000794:	2204      	movs	r2, #4
 8000796:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000798:	4b21      	ldr	r3, [pc, #132]	; (8000820 <MX_ADC1_Init+0xc4>)
 800079a:	2200      	movs	r2, #0
 800079c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800079e:	4b20      	ldr	r3, [pc, #128]	; (8000820 <MX_ADC1_Init+0xc4>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007a4:	4b1e      	ldr	r3, [pc, #120]	; (8000820 <MX_ADC1_Init+0xc4>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007aa:	4b1d      	ldr	r3, [pc, #116]	; (8000820 <MX_ADC1_Init+0xc4>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007b2:	4b1b      	ldr	r3, [pc, #108]	; (8000820 <MX_ADC1_Init+0xc4>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007b8:	4b19      	ldr	r3, [pc, #100]	; (8000820 <MX_ADC1_Init+0xc4>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007be:	4b18      	ldr	r3, [pc, #96]	; (8000820 <MX_ADC1_Init+0xc4>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007c6:	4b16      	ldr	r3, [pc, #88]	; (8000820 <MX_ADC1_Init+0xc4>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007cc:	4b14      	ldr	r3, [pc, #80]	; (8000820 <MX_ADC1_Init+0xc4>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <MX_ADC1_Init+0xc4>)
 80007d6:	2204      	movs	r2, #4
 80007d8:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007da:	4811      	ldr	r0, [pc, #68]	; (8000820 <MX_ADC1_Init+0xc4>)
 80007dc:	f000 ff2e 	bl	800163c <HAL_ADC_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80007e6:	f000 f9ff 	bl	8000be8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_ADC1_Init+0xcc>)
 80007ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007ee:	2306      	movs	r3, #6
 80007f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80007f2:	2305      	movs	r3, #5
 80007f4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007f6:	237f      	movs	r3, #127	; 0x7f
 80007f8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007fa:	2304      	movs	r3, #4
 80007fc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000802:	463b      	mov	r3, r7
 8000804:	4619      	mov	r1, r3
 8000806:	4806      	ldr	r0, [pc, #24]	; (8000820 <MX_ADC1_Init+0xc4>)
 8000808:	f001 f996 	bl	8001b38 <HAL_ADC_ConfigChannel>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8000812:	f000 f9e9 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	2000013c 	.word	0x2000013c
 8000824:	50040000 	.word	0x50040000
 8000828:	c7520000 	.word	0xc7520000

0800082c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000840:	2300      	movs	r3, #0
 8000842:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000844:	4b2b      	ldr	r3, [pc, #172]	; (80008f4 <MX_RTC_Init+0xc8>)
 8000846:	4a2c      	ldr	r2, [pc, #176]	; (80008f8 <MX_RTC_Init+0xcc>)
 8000848:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800084a:	4b2a      	ldr	r3, [pc, #168]	; (80008f4 <MX_RTC_Init+0xc8>)
 800084c:	2200      	movs	r2, #0
 800084e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000850:	4b28      	ldr	r3, [pc, #160]	; (80008f4 <MX_RTC_Init+0xc8>)
 8000852:	227f      	movs	r2, #127	; 0x7f
 8000854:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000856:	4b27      	ldr	r3, [pc, #156]	; (80008f4 <MX_RTC_Init+0xc8>)
 8000858:	22ff      	movs	r2, #255	; 0xff
 800085a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800085c:	4b25      	ldr	r3, [pc, #148]	; (80008f4 <MX_RTC_Init+0xc8>)
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000862:	4b24      	ldr	r3, [pc, #144]	; (80008f4 <MX_RTC_Init+0xc8>)
 8000864:	2200      	movs	r2, #0
 8000866:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000868:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <MX_RTC_Init+0xc8>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800086e:	4b21      	ldr	r3, [pc, #132]	; (80008f4 <MX_RTC_Init+0xc8>)
 8000870:	2200      	movs	r2, #0
 8000872:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000874:	481f      	ldr	r0, [pc, #124]	; (80008f4 <MX_RTC_Init+0xc8>)
 8000876:	f003 fcbf 	bl	80041f8 <HAL_RTC_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000880:	f000 f9b2 	bl	8000be8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 8000884:	2309      	movs	r3, #9
 8000886:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x35;
 8000888:	2335      	movs	r3, #53	; 0x35
 800088a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800088c:	2300      	movs	r3, #0
 800088e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000890:	2300      	movs	r3, #0
 8000892:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2201      	movs	r2, #1
 800089c:	4619      	mov	r1, r3
 800089e:	4815      	ldr	r0, [pc, #84]	; (80008f4 <MX_RTC_Init+0xc8>)
 80008a0:	f003 fd25 	bl	80042ee <HAL_RTC_SetTime>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80008aa:	f000 f99d 	bl	8000be8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 80008ae:	2305      	movs	r3, #5
 80008b0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MARCH;
 80008b2:	2303      	movs	r3, #3
 80008b4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x31;
 80008b6:	2331      	movs	r3, #49	; 0x31
 80008b8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 80008ba:	2323      	movs	r3, #35	; 0x23
 80008bc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80008be:	463b      	mov	r3, r7
 80008c0:	2201      	movs	r2, #1
 80008c2:	4619      	mov	r1, r3
 80008c4:	480b      	ldr	r0, [pc, #44]	; (80008f4 <MX_RTC_Init+0xc8>)
 80008c6:	f003 fe0b 	bl	80044e0 <HAL_RTC_SetDate>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80008d0:	f000 f98a 	bl	8000be8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2048, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80008d4:	2200      	movs	r2, #0
 80008d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008da:	4806      	ldr	r0, [pc, #24]	; (80008f4 <MX_RTC_Init+0xc8>)
 80008dc:	f003 ffa6 	bl	800482c <HAL_RTCEx_SetWakeUpTimer_IT>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_RTC_Init+0xbe>
  {
    Error_Handler();
 80008e6:	f000 f97f 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	200001a4 	.word	0x200001a4
 80008f8:	40002800 	.word	0x40002800

080008fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000900:	4b1b      	ldr	r3, [pc, #108]	; (8000970 <MX_SPI1_Init+0x74>)
 8000902:	4a1c      	ldr	r2, [pc, #112]	; (8000974 <MX_SPI1_Init+0x78>)
 8000904:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000906:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <MX_SPI1_Init+0x74>)
 8000908:	f44f 7282 	mov.w	r2, #260	; 0x104
 800090c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800090e:	4b18      	ldr	r3, [pc, #96]	; (8000970 <MX_SPI1_Init+0x74>)
 8000910:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000914:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000916:	4b16      	ldr	r3, [pc, #88]	; (8000970 <MX_SPI1_Init+0x74>)
 8000918:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800091c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800091e:	4b14      	ldr	r3, [pc, #80]	; (8000970 <MX_SPI1_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000924:	4b12      	ldr	r3, [pc, #72]	; (8000970 <MX_SPI1_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_SPI1_Init+0x74>)
 800092c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000930:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000932:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <MX_SPI1_Init+0x74>)
 8000934:	2218      	movs	r2, #24
 8000936:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000938:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <MX_SPI1_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800093e:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_SPI1_Init+0x74>)
 8000940:	2200      	movs	r2, #0
 8000942:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000944:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <MX_SPI1_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_SPI1_Init+0x74>)
 800094c:	2207      	movs	r2, #7
 800094e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000950:	4b07      	ldr	r3, [pc, #28]	; (8000970 <MX_SPI1_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_SPI1_Init+0x74>)
 8000958:	2200      	movs	r2, #0
 800095a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800095c:	4804      	ldr	r0, [pc, #16]	; (8000970 <MX_SPI1_Init+0x74>)
 800095e:	f004 f887 	bl	8004a70 <HAL_SPI_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000968:	f000 f93e 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	200001c8 	.word	0x200001c8
 8000974:	40013000 	.word	0x40013000

08000978 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_TIM16_Init+0x44>)
 800097e:	4a10      	ldr	r2, [pc, #64]	; (80009c0 <MX_TIM16_Init+0x48>)
 8000980:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 24-1;
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_TIM16_Init+0x44>)
 8000984:	2217      	movs	r2, #23
 8000986:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_TIM16_Init+0x44>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <MX_TIM16_Init+0x44>)
 8000990:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000994:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_TIM16_Init+0x44>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800099c:	4b07      	ldr	r3, [pc, #28]	; (80009bc <MX_TIM16_Init+0x44>)
 800099e:	2200      	movs	r2, #0
 80009a0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_TIM16_Init+0x44>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80009a8:	4804      	ldr	r0, [pc, #16]	; (80009bc <MX_TIM16_Init+0x44>)
 80009aa:	f004 fbd7 	bl	800515c <HAL_TIM_Base_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80009b4:	f000 f918 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	2000022c 	.word	0x2000022c
 80009c0:	40014400 	.word	0x40014400

080009c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009c8:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009ca:	4a15      	ldr	r2, [pc, #84]	; (8000a20 <MX_USART2_UART_Init+0x5c>)
 80009cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ce:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009ea:	220c      	movs	r2, #12
 80009ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a06:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 8000a08:	f004 fe30 	bl	800566c <HAL_UART_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a12:	f000 f8e9 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000278 	.word	0x20000278
 8000a20:	40004400 	.word	0x40004400

08000a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b088      	sub	sp, #32
 8000a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	f107 030c 	add.w	r3, r7, #12
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3a:	4b38      	ldr	r3, [pc, #224]	; (8000b1c <MX_GPIO_Init+0xf8>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	4a37      	ldr	r2, [pc, #220]	; (8000b1c <MX_GPIO_Init+0xf8>)
 8000a40:	f043 0304 	orr.w	r3, r3, #4
 8000a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a46:	4b35      	ldr	r3, [pc, #212]	; (8000b1c <MX_GPIO_Init+0xf8>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	f003 0304 	and.w	r3, r3, #4
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	4b32      	ldr	r3, [pc, #200]	; (8000b1c <MX_GPIO_Init+0xf8>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	4a31      	ldr	r2, [pc, #196]	; (8000b1c <MX_GPIO_Init+0xf8>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5e:	4b2f      	ldr	r3, [pc, #188]	; (8000b1c <MX_GPIO_Init+0xf8>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6a:	4b2c      	ldr	r3, [pc, #176]	; (8000b1c <MX_GPIO_Init+0xf8>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	4a2b      	ldr	r2, [pc, #172]	; (8000b1c <MX_GPIO_Init+0xf8>)
 8000a70:	f043 0302 	orr.w	r3, r3, #2
 8000a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a76:	4b29      	ldr	r3, [pc, #164]	; (8000b1c <MX_GPIO_Init+0xf8>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PCF8553_CE_Pin|LED_GREEN_Pin|PCF8553_RESET_Pin, GPIO_PIN_RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2170      	movs	r1, #112	; 0x70
 8000a86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8a:	f002 f90d 	bl	8002ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCF8553_CE_Pin LED_GREEN_Pin PCF8553_RESET_Pin */
  GPIO_InitStruct.Pin = PCF8553_CE_Pin|LED_GREEN_Pin|PCF8553_RESET_Pin;
 8000a8e:	2370      	movs	r3, #112	; 0x70
 8000a90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a92:	2301      	movs	r3, #1
 8000a94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa8:	f001 ff84 	bl	80029b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_ESC_Pin */
  GPIO_InitStruct.Pin = KEY_ESC_Pin;
 8000aac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ab2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ab6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(KEY_ESC_GPIO_Port, &GPIO_InitStruct);
 8000abc:	f107 030c 	add.w	r3, r7, #12
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4817      	ldr	r0, [pc, #92]	; (8000b20 <MX_GPIO_Init+0xfc>)
 8000ac4:	f001 ff76 	bl	80029b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_UP_Pin KEY_ENTER_Pin */
  GPIO_InitStruct.Pin = KEY_UP_Pin|KEY_ENTER_Pin;
 8000ac8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000acc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ace:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ad2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad8:	f107 030c 	add.w	r3, r7, #12
 8000adc:	4619      	mov	r1, r3
 8000ade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae2:	f001 ff67 	bl	80029b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_DOWN_Pin */
  GPIO_InitStruct.Pin = KEY_DOWN_Pin;
 8000ae6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000aea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000af0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000af2:	2302      	movs	r3, #2
 8000af4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(KEY_DOWN_GPIO_Port, &GPIO_InitStruct);
 8000af6:	f107 030c 	add.w	r3, r7, #12
 8000afa:	4619      	mov	r1, r3
 8000afc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b00:	f001 ff58 	bl	80029b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2105      	movs	r1, #5
 8000b08:	2028      	movs	r0, #40	; 0x28
 8000b0a:	f001 ff1b 	bl	8002944 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b0e:	2028      	movs	r0, #40	; 0x28
 8000b10:	f001 ff34 	bl	800297c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b14:	bf00      	nop
 8000b16:	3720      	adds	r7, #32
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	48000400 	.word	0x48000400

08000b24 <menu_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_menu_task */
void menu_task(void *argument)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	ptr_fun_menu_t ptr_menu = fm_menu_show_version;
 8000b2c:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <menu_task+0x44>)
 8000b2e:	617b      	str	r3, [r7, #20]
	fm_event_t event_next = EVENT_LCD_REFRESH;
 8000b30:	2301      	movs	r3, #1
 8000b32:	73fb      	strb	r3, [r7, #15]
	osStatus_t ret_status;

	/* Infinite loop */
	for (;;)
	{
	    ret_status = osMessageQueueGet(h_event_queue, &event_next, 0, 1000); // @suppress("Avoid magic numbers")
 8000b34:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <menu_task+0x48>)
 8000b36:	6818      	ldr	r0, [r3, #0]
 8000b38:	f107 010f 	add.w	r1, r7, #15
 8000b3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b40:	2200      	movs	r2, #0
 8000b42:	f005 fdd9 	bl	80066f8 <osMessageQueueGet>
 8000b46:	6138      	str	r0, [r7, #16]
		if(ret_status == osOK)
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d105      	bne.n	8000b5a <menu_task+0x36>
		{
		    ptr_menu = (ptr_fun_menu_t)(*ptr_menu)(event_next);
 8000b4e:	7bfa      	ldrb	r2, [r7, #15]
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	4610      	mov	r0, r2
 8000b54:	4798      	blx	r3
 8000b56:	6178      	str	r0, [r7, #20]
 8000b58:	e7ec      	b.n	8000b34 <menu_task+0x10>
		}
		else
		{
		    // por el momento no tiene sentido esta sentencia.
		    ptr_menu = (ptr_fun_menu_t)(*ptr_menu)(event_next);
 8000b5a:	7bfa      	ldrb	r2, [r7, #15]
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	4610      	mov	r0, r2
 8000b60:	4798      	blx	r3
 8000b62:	6178      	str	r0, [r7, #20]
	    ret_status = osMessageQueueGet(h_event_queue, &event_next, 0, 1000); // @suppress("Avoid magic numbers")
 8000b64:	e7e6      	b.n	8000b34 <menu_task+0x10>
 8000b66:	bf00      	nop
 8000b68:	0800c619 	.word	0x0800c619
 8000b6c:	200038a0 	.word	0x200038a0

08000b70 <debounce_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_debounce_task */
void debounce_task(void *argument)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN debounce_task */

  const uint8_t debounce_time = 200; //Tiempo prudente de espera por rebotes.
 8000b78:	23c8      	movs	r3, #200	; 0xc8
 8000b7a:	73fb      	strb	r3, [r7, #15]
  {
    /*
     * Bloqueo el programa con un semáforo que solo se libera luego de presionar
     * un botón.
     */
    osSemaphoreAcquire(debounce_semaphoreHandle, HAL_MAX_DELAY);
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <debounce_task+0x4c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f04f 31ff 	mov.w	r1, #4294967295
 8000b84:	4618      	mov	r0, r3
 8000b86:	f005 fc4d 	bl	8006424 <osSemaphoreAcquire>

    /*
     * Espero un tiempo prudente para que no haya rebotes, pero que permita
     * cambiar de pantalla de forma rápida.
     */
    osDelay(debounce_time); // @suppress("Avoid magic numbers")
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f005 fba5 	bl	80062dc <osDelay>
     * Al terminar el delay que debería saltearse los rebotes, debo también
     * limpiar las flags de los EXTI de los botones que fueron presionados (o
     * fueron víctimas de un rebote) mientras se encontraban deshabilitadas las
     * interrupciones.
     */
    __HAL_GPIO_EXTI_CLEAR_IT(KEY_UP_Pin);
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <debounce_task+0x50>)
 8000b94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b98:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(KEY_DOWN_Pin);
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <debounce_task+0x50>)
 8000b9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ba0:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(KEY_ENTER_Pin);
 8000ba2:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <debounce_task+0x50>)
 8000ba4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ba8:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(KEY_ESC_Pin);
 8000baa:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <debounce_task+0x50>)
 8000bac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bb0:	615a      	str	r2, [r3, #20]

    /*
     * Habilito nuevamente las interrupciones para que puedan presionarse
     * nuevamente los botones y pueda cambiarse de pantalla.
     */
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bb2:	2028      	movs	r0, #40	; 0x28
 8000bb4:	f001 fee2 	bl	800297c <HAL_NVIC_EnableIRQ>
    osSemaphoreAcquire(debounce_semaphoreHandle, HAL_MAX_DELAY);
 8000bb8:	e7e0      	b.n	8000b7c <debounce_task+0xc>
 8000bba:	bf00      	nop
 8000bbc:	20000304 	.word	0x20000304
 8000bc0:	40010400 	.word	0x40010400

08000bc4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d101      	bne.n	8000bda <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bd6:	f000 fac5 	bl	8001164 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40001000 	.word	0x40001000

08000be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000bec:	b672      	cpsid	i
}
 8000bee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <Error_Handler+0x8>
	...

08000bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfa:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <HAL_MspInit+0x4c>)
 8000bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bfe:	4a10      	ldr	r2, [pc, #64]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6613      	str	r3, [r2, #96]	; 0x60
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c16:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	210f      	movs	r1, #15
 8000c2e:	f06f 0001 	mvn.w	r0, #1
 8000c32:	f001 fe87 	bl	8002944 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40021000 	.word	0x40021000

08000c44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b09e      	sub	sp, #120	; 0x78
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c4c:	f107 0310 	add.w	r3, r7, #16
 8000c50:	2268      	movs	r2, #104	; 0x68
 8000c52:	2100      	movs	r1, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f00b ff49 	bl	800caec <memset>
  if(hadc->Instance==ADC1)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a11      	ldr	r2, [pc, #68]	; (8000ca4 <HAL_ADC_MspInit+0x60>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d11b      	bne.n	8000c9c <HAL_ADC_MspInit+0x58>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c68:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000c6a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000c6e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c70:	f107 0310 	add.w	r3, r7, #16
 8000c74:	4618      	mov	r0, r3
 8000c76:	f002 ff51 	bl	8003b1c <HAL_RCCEx_PeriphCLKConfig>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 8000c80:	f7ff ffb2 	bl	8000be8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <HAL_ADC_MspInit+0x64>)
 8000c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c88:	4a07      	ldr	r2, [pc, #28]	; (8000ca8 <HAL_ADC_MspInit+0x64>)
 8000c8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <HAL_ADC_MspInit+0x64>)
 8000c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c9c:	bf00      	nop
 8000c9e:	3778      	adds	r7, #120	; 0x78
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	50040000 	.word	0x50040000
 8000ca8:	40021000 	.word	0x40021000

08000cac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b09c      	sub	sp, #112	; 0x70
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cb4:	f107 0308 	add.w	r3, r7, #8
 8000cb8:	2268      	movs	r2, #104	; 0x68
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f00b ff15 	bl	800caec <memset>
  if(hrtc->Instance==RTC)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a13      	ldr	r2, [pc, #76]	; (8000d14 <HAL_RTC_MspInit+0x68>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d11f      	bne.n	8000d0c <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ccc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cd0:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000cd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cd6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd8:	f107 0308 	add.w	r3, r7, #8
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f002 ff1d 	bl	8003b1c <HAL_RCCEx_PeriphCLKConfig>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000ce8:	f7ff ff7e 	bl	8000be8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000cec:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <HAL_RTC_MspInit+0x6c>)
 8000cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000cf2:	4a09      	ldr	r2, [pc, #36]	; (8000d18 <HAL_RTC_MspInit+0x6c>)
 8000cf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 5, 0);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2105      	movs	r1, #5
 8000d00:	2003      	movs	r0, #3
 8000d02:	f001 fe1f 	bl	8002944 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000d06:	2003      	movs	r0, #3
 8000d08:	f001 fe38 	bl	800297c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000d0c:	bf00      	nop
 8000d0e:	3770      	adds	r7, #112	; 0x70
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40002800 	.word	0x40002800
 8000d18:	40021000 	.word	0x40021000

08000d1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08a      	sub	sp, #40	; 0x28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a17      	ldr	r2, [pc, #92]	; (8000d98 <HAL_SPI_MspInit+0x7c>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d128      	bne.n	8000d90 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d3e:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <HAL_SPI_MspInit+0x80>)
 8000d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d42:	4a16      	ldr	r2, [pc, #88]	; (8000d9c <HAL_SPI_MspInit+0x80>)
 8000d44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d48:	6613      	str	r3, [r2, #96]	; 0x60
 8000d4a:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <HAL_SPI_MspInit+0x80>)
 8000d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <HAL_SPI_MspInit+0x80>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5a:	4a10      	ldr	r2, [pc, #64]	; (8000d9c <HAL_SPI_MspInit+0x80>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <HAL_SPI_MspInit+0x80>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = PCF8553_SCL_Pin|PCF8553_SDIO_Pin;
 8000d6e:	2382      	movs	r3, #130	; 0x82
 8000d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d7e:	2305      	movs	r3, #5
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	4619      	mov	r1, r3
 8000d88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d8c:	f001 fe12 	bl	80029b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d90:	bf00      	nop
 8000d92:	3728      	adds	r7, #40	; 0x28
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40013000 	.word	0x40013000
 8000d9c:	40021000 	.word	0x40021000

08000da0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <HAL_TIM_Base_MspInit+0x38>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d10b      	bne.n	8000dca <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000db2:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <HAL_TIM_Base_MspInit+0x3c>)
 8000db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000db6:	4a09      	ldr	r2, [pc, #36]	; (8000ddc <HAL_TIM_Base_MspInit+0x3c>)
 8000db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dbc:	6613      	str	r3, [r2, #96]	; 0x60
 8000dbe:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <HAL_TIM_Base_MspInit+0x3c>)
 8000dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	40014400 	.word	0x40014400
 8000ddc:	40021000 	.word	0x40021000

08000de0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b0a4      	sub	sp, #144	; 0x90
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	2268      	movs	r2, #104	; 0x68
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f00b fe73 	bl	800caec <memset>
  if(huart->Instance==USART2)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a21      	ldr	r2, [pc, #132]	; (8000e90 <HAL_UART_MspInit+0xb0>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d13a      	bne.n	8000e86 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e10:	2302      	movs	r3, #2
 8000e12:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f002 fe7d 	bl	8003b1c <HAL_RCCEx_PeriphCLKConfig>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e28:	f7ff fede 	bl	8000be8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e2c:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <HAL_UART_MspInit+0xb4>)
 8000e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e30:	4a18      	ldr	r2, [pc, #96]	; (8000e94 <HAL_UART_MspInit+0xb4>)
 8000e32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e36:	6593      	str	r3, [r2, #88]	; 0x58
 8000e38:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <HAL_UART_MspInit+0xb4>)
 8000e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e44:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <HAL_UART_MspInit+0xb4>)
 8000e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e48:	4a12      	ldr	r2, [pc, #72]	; (8000e94 <HAL_UART_MspInit+0xb4>)
 8000e4a:	f043 0301 	orr.w	r3, r3, #1
 8000e4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e50:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <HAL_UART_MspInit+0xb4>)
 8000e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e5c:	230c      	movs	r3, #12
 8000e5e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e72:	2307      	movs	r3, #7
 8000e74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e78:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e82:	f001 fd97 	bl	80029b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e86:	bf00      	nop
 8000e88:	3790      	adds	r7, #144	; 0x90
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40004400 	.word	0x40004400
 8000e94:	40021000 	.word	0x40021000

08000e98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08e      	sub	sp, #56	; 0x38
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ea6:	4b34      	ldr	r3, [pc, #208]	; (8000f78 <HAL_InitTick+0xe0>)
 8000ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eaa:	4a33      	ldr	r2, [pc, #204]	; (8000f78 <HAL_InitTick+0xe0>)
 8000eac:	f043 0310 	orr.w	r3, r3, #16
 8000eb0:	6593      	str	r3, [r2, #88]	; 0x58
 8000eb2:	4b31      	ldr	r3, [pc, #196]	; (8000f78 <HAL_InitTick+0xe0>)
 8000eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb6:	f003 0310 	and.w	r3, r3, #16
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ebe:	f107 0210 	add.w	r2, r7, #16
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f002 fd95 	bl	80039f8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ece:	6a3b      	ldr	r3, [r7, #32]
 8000ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d103      	bne.n	8000ee0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ed8:	f002 fd62 	bl	80039a0 <HAL_RCC_GetPCLK1Freq>
 8000edc:	6378      	str	r0, [r7, #52]	; 0x34
 8000ede:	e004      	b.n	8000eea <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ee0:	f002 fd5e 	bl	80039a0 <HAL_RCC_GetPCLK1Freq>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eec:	4a23      	ldr	r2, [pc, #140]	; (8000f7c <HAL_InitTick+0xe4>)
 8000eee:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef2:	0c9b      	lsrs	r3, r3, #18
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ef8:	4b21      	ldr	r3, [pc, #132]	; (8000f80 <HAL_InitTick+0xe8>)
 8000efa:	4a22      	ldr	r2, [pc, #136]	; (8000f84 <HAL_InitTick+0xec>)
 8000efc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000efe:	4b20      	ldr	r3, [pc, #128]	; (8000f80 <HAL_InitTick+0xe8>)
 8000f00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f04:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f06:	4a1e      	ldr	r2, [pc, #120]	; (8000f80 <HAL_InitTick+0xe8>)
 8000f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f0a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f0c:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <HAL_InitTick+0xe8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f12:	4b1b      	ldr	r3, [pc, #108]	; (8000f80 <HAL_InitTick+0xe8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f18:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <HAL_InitTick+0xe8>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000f1e:	4818      	ldr	r0, [pc, #96]	; (8000f80 <HAL_InitTick+0xe8>)
 8000f20:	f004 f91c 	bl	800515c <HAL_TIM_Base_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000f2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d11b      	bne.n	8000f6a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f32:	4813      	ldr	r0, [pc, #76]	; (8000f80 <HAL_InitTick+0xe8>)
 8000f34:	f004 f96a 	bl	800520c <HAL_TIM_Base_Start_IT>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000f3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d111      	bne.n	8000f6a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f46:	2036      	movs	r0, #54	; 0x36
 8000f48:	f001 fd18 	bl	800297c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b0f      	cmp	r3, #15
 8000f50:	d808      	bhi.n	8000f64 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f52:	2200      	movs	r2, #0
 8000f54:	6879      	ldr	r1, [r7, #4]
 8000f56:	2036      	movs	r0, #54	; 0x36
 8000f58:	f001 fcf4 	bl	8002944 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f5c:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <HAL_InitTick+0xf0>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	e002      	b.n	8000f6a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3738      	adds	r7, #56	; 0x38
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	431bde83 	.word	0x431bde83
 8000f80:	20000308 	.word	0x20000308
 8000f84:	40001000 	.word	0x40001000
 8000f88:	20000004 	.word	0x20000004

08000f8c <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM6 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* Disable TIM6 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim6, TIM_IT_UPDATE);
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_SuspendTick+0x20>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	68da      	ldr	r2, [r3, #12]
 8000f96:	4b05      	ldr	r3, [pc, #20]	; (8000fac <HAL_SuspendTick+0x20>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f022 0201 	bic.w	r2, r2, #1
 8000f9e:	60da      	str	r2, [r3, #12]
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	20000308 	.word	0x20000308

08000fb0 <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM6 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* Enable TIM6 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim6, TIM_IT_UPDATE);
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <HAL_ResumeTick+0x20>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	68da      	ldr	r2, [r3, #12]
 8000fba:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <HAL_ResumeTick+0x20>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f042 0201 	orr.w	r2, r2, #1
 8000fc2:	60da      	str	r2, [r3, #12]
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000308 	.word	0x20000308

08000fd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <NMI_Handler+0x4>

08000fda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fde:	e7fe      	b.n	8000fde <HardFault_Handler+0x4>

08000fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <MemManage_Handler+0x4>

08000fe6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fea:	e7fe      	b.n	8000fea <BusFault_Handler+0x4>

08000fec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <UsageFault_Handler+0x4>

08000ff2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <RTC_WKUP_IRQHandler+0x10>)
 8001006:	f003 fd03 	bl	8004a10 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200001a4 	.word	0x200001a4

08001014 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_UP_Pin);
 8001018:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800101c:	f001 fe5c 	bl	8002cd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(KEY_DOWN_Pin);
 8001020:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001024:	f001 fe58 	bl	8002cd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(KEY_ENTER_Pin);
 8001028:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800102c:	f001 fe54 	bl	8002cd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(KEY_ESC_Pin);
 8001030:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001034:	f001 fe50 	bl	8002cd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}

0800103c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001040:	4802      	ldr	r0, [pc, #8]	; (800104c <TIM6_DAC_IRQHandler+0x10>)
 8001042:	f004 f93f 	bl	80052c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000308 	.word	0x20000308

08001050 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8001058:	4a14      	ldr	r2, [pc, #80]	; (80010ac <_sbrk+0x5c>)
	- (uint32_t) &_Min_Stack_Size;
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end)
 8001064:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <_sbrk+0x64>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d102      	bne.n	8001072 <_sbrk+0x22>
	{
		__sbrk_heap_end = &_end;
 800106c:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <_sbrk+0x64>)
 800106e:	4a12      	ldr	r2, [pc, #72]	; (80010b8 <_sbrk+0x68>)
 8001070:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap)
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <_sbrk+0x64>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	429a      	cmp	r2, r3
 800107e:	d207      	bcs.n	8001090 <_sbrk+0x40>
	{
		errno = ENOMEM;
 8001080:	f00b fcfa 	bl	800ca78 <__errno>
 8001084:	4603      	mov	r3, r0
 8001086:	220c      	movs	r2, #12
 8001088:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800108a:	f04f 33ff 	mov.w	r3, #4294967295
 800108e:	e009      	b.n	80010a4 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8001090:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <_sbrk+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8001096:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <_sbrk+0x64>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	4a05      	ldr	r2, [pc, #20]	; (80010b4 <_sbrk+0x64>)
 80010a0:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80010a2:	68fb      	ldr	r3, [r7, #12]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20028000 	.word	0x20028000
 80010b0:	00000400 	.word	0x00000400
 80010b4:	20000354 	.word	0x20000354
 80010b8:	200039e0 	.word	0x200039e0

080010bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <SystemInit+0x20>)
 80010c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010c6:	4a05      	ldr	r2, [pc, #20]	; (80010dc <SystemInit+0x20>)
 80010c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001118 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010e4:	f7ff ffea 	bl	80010bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010e8:	480c      	ldr	r0, [pc, #48]	; (800111c <LoopForever+0x6>)
  ldr r1, =_edata
 80010ea:	490d      	ldr	r1, [pc, #52]	; (8001120 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010ec:	4a0d      	ldr	r2, [pc, #52]	; (8001124 <LoopForever+0xe>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f0:	e002      	b.n	80010f8 <LoopCopyDataInit>

080010f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010f6:	3304      	adds	r3, #4

080010f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010fc:	d3f9      	bcc.n	80010f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010fe:	4a0a      	ldr	r2, [pc, #40]	; (8001128 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001100:	4c0a      	ldr	r4, [pc, #40]	; (800112c <LoopForever+0x16>)
  movs r3, #0
 8001102:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001104:	e001      	b.n	800110a <LoopFillZerobss>

08001106 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001106:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001108:	3204      	adds	r2, #4

0800110a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800110a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800110c:	d3fb      	bcc.n	8001106 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800110e:	f00b fcb9 	bl	800ca84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001112:	f7ff fa83 	bl	800061c <main>

08001116 <LoopForever>:

LoopForever:
    b LoopForever
 8001116:	e7fe      	b.n	8001116 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001118:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 800111c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001120:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 8001124:	0800da18 	.word	0x0800da18
  ldr r2, =_sbss
 8001128:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 800112c:	200039dc 	.word	0x200039dc

08001130 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001130:	e7fe      	b.n	8001130 <ADC1_IRQHandler>

08001132 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001138:	2300      	movs	r3, #0
 800113a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800113c:	2003      	movs	r0, #3
 800113e:	f001 fbf6 	bl	800292e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001142:	200f      	movs	r0, #15
 8001144:	f7ff fea8 	bl	8000e98 <HAL_InitTick>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d002      	beq.n	8001154 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	71fb      	strb	r3, [r7, #7]
 8001152:	e001      	b.n	8001158 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001154:	f7ff fd4e 	bl	8000bf4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001158:	79fb      	ldrb	r3, [r7, #7]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_IncTick+0x20>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	461a      	mov	r2, r3
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_IncTick+0x24>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4413      	add	r3, r2
 8001174:	4a04      	ldr	r2, [pc, #16]	; (8001188 <HAL_IncTick+0x24>)
 8001176:	6013      	str	r3, [r2, #0]
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20000008 	.word	0x20000008
 8001188:	20000358 	.word	0x20000358

0800118c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return uwTick;
 8001190:	4b03      	ldr	r3, [pc, #12]	; (80011a0 <HAL_GetTick+0x14>)
 8001192:	681b      	ldr	r3, [r3, #0]
}
 8001194:	4618      	mov	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	20000358 	.word	0x20000358

080011a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011ac:	f7ff ffee 	bl	800118c <HAL_GetTick>
 80011b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011bc:	d005      	beq.n	80011ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <HAL_Delay+0x44>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	461a      	mov	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4413      	add	r3, r2
 80011c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ca:	bf00      	nop
 80011cc:	f7ff ffde 	bl	800118c <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d8f7      	bhi.n	80011cc <HAL_Delay+0x28>
  {
  }
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000008 	.word	0x20000008

080011ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	431a      	orrs	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	609a      	str	r2, [r3, #8]
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001212:	b480      	push	{r7}
 8001214:	b083      	sub	sp, #12
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
 800121a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	431a      	orrs	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	609a      	str	r2, [r3, #8]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001248:	4618      	mov	r0, r3
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001254:	b480      	push	{r7}
 8001256:	b087      	sub	sp, #28
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
 8001260:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	3360      	adds	r3, #96	; 0x60
 8001266:	461a      	mov	r2, r3
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <LL_ADC_SetOffset+0x44>)
 8001276:	4013      	ands	r3, r2
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800127e:	683a      	ldr	r2, [r7, #0]
 8001280:	430a      	orrs	r2, r1
 8001282:	4313      	orrs	r3, r2
 8001284:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800128c:	bf00      	nop
 800128e:	371c      	adds	r7, #28
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	03fff000 	.word	0x03fff000

0800129c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3360      	adds	r3, #96	; 0x60
 80012aa:	461a      	mov	r2, r3
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	4413      	add	r3, r2
 80012b2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b087      	sub	sp, #28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	3360      	adds	r3, #96	; 0x60
 80012d8:	461a      	mov	r2, r3
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4413      	add	r3, r2
 80012e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	431a      	orrs	r2, r3
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80012f2:	bf00      	nop
 80012f4:	371c      	adds	r7, #28
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	695b      	ldr	r3, [r3, #20]
 800130c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	431a      	orrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	615a      	str	r2, [r3, #20]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001334:	2b00      	cmp	r3, #0
 8001336:	d101      	bne.n	800133c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001338:	2301      	movs	r3, #1
 800133a:	e000      	b.n	800133e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800134a:	b480      	push	{r7}
 800134c:	b087      	sub	sp, #28
 800134e:	af00      	add	r7, sp, #0
 8001350:	60f8      	str	r0, [r7, #12]
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	3330      	adds	r3, #48	; 0x30
 800135a:	461a      	mov	r2, r3
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	0a1b      	lsrs	r3, r3, #8
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	f003 030c 	and.w	r3, r3, #12
 8001366:	4413      	add	r3, r2
 8001368:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	f003 031f 	and.w	r3, r3, #31
 8001374:	211f      	movs	r1, #31
 8001376:	fa01 f303 	lsl.w	r3, r1, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	401a      	ands	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	0e9b      	lsrs	r3, r3, #26
 8001382:	f003 011f 	and.w	r1, r3, #31
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	f003 031f 	and.w	r3, r3, #31
 800138c:	fa01 f303 	lsl.w	r3, r1, r3
 8001390:	431a      	orrs	r2, r3
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001396:	bf00      	nop
 8001398:	371c      	adds	r7, #28
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b087      	sub	sp, #28
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	60f8      	str	r0, [r7, #12]
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	3314      	adds	r3, #20
 80013b2:	461a      	mov	r2, r3
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	0e5b      	lsrs	r3, r3, #25
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	f003 0304 	and.w	r3, r3, #4
 80013be:	4413      	add	r3, r2
 80013c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	0d1b      	lsrs	r3, r3, #20
 80013ca:	f003 031f 	and.w	r3, r3, #31
 80013ce:	2107      	movs	r1, #7
 80013d0:	fa01 f303 	lsl.w	r3, r1, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	401a      	ands	r2, r3
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	0d1b      	lsrs	r3, r3, #20
 80013dc:	f003 031f 	and.w	r3, r3, #31
 80013e0:	6879      	ldr	r1, [r7, #4]
 80013e2:	fa01 f303 	lsl.w	r3, r1, r3
 80013e6:	431a      	orrs	r2, r3
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013ec:	bf00      	nop
 80013ee:	371c      	adds	r7, #28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001410:	43db      	mvns	r3, r3
 8001412:	401a      	ands	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f003 0318 	and.w	r3, r3, #24
 800141a:	4908      	ldr	r1, [pc, #32]	; (800143c <LL_ADC_SetChannelSingleDiff+0x44>)
 800141c:	40d9      	lsrs	r1, r3
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	400b      	ands	r3, r1
 8001422:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001426:	431a      	orrs	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800142e:	bf00      	nop
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	0007ffff 	.word	0x0007ffff

08001440 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001450:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	6093      	str	r3, [r2, #8]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001474:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001478:	d101      	bne.n	800147e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800147a:	2301      	movs	r3, #1
 800147c:	e000      	b.n	8001480 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800147e:	2300      	movs	r3, #0
}
 8001480:	4618      	mov	r0, r3
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800149c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80014c8:	d101      	bne.n	80014ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80014ca:	2301      	movs	r3, #1
 80014cc:	e000      	b.n	80014d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014f0:	f043 0201 	orr.w	r2, r3, #1
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001514:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001518:	f043 0202 	orr.w	r2, r3, #2
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	2b01      	cmp	r3, #1
 800153e:	d101      	bne.n	8001544 <LL_ADC_IsEnabled+0x18>
 8001540:	2301      	movs	r3, #1
 8001542:	e000      	b.n	8001546 <LL_ADC_IsEnabled+0x1a>
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b02      	cmp	r3, #2
 8001564:	d101      	bne.n	800156a <LL_ADC_IsDisableOngoing+0x18>
 8001566:	2301      	movs	r3, #1
 8001568:	e000      	b.n	800156c <LL_ADC_IsDisableOngoing+0x1a>
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001588:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800158c:	f043 0204 	orr.w	r2, r3, #4
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015b4:	f043 0210 	orr.w	r2, r3, #16
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	2b04      	cmp	r3, #4
 80015da:	d101      	bne.n	80015e0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80015dc:	2301      	movs	r3, #1
 80015de:	e000      	b.n	80015e2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001602:	f043 0220 	orr.w	r2, r3, #32
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	2b08      	cmp	r3, #8
 8001628:	d101      	bne.n	800162e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800162a:	2301      	movs	r3, #1
 800162c:	e000      	b.n	8001630 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001644:	2300      	movs	r3, #0
 8001646:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001648:	2300      	movs	r3, #0
 800164a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e12f      	b.n	80018b6 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001660:	2b00      	cmp	r3, #0
 8001662:	d109      	bne.n	8001678 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff faed 	bl	8000c44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff fef1 	bl	8001464 <LL_ADC_IsDeepPowerDownEnabled>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d004      	beq.n	8001692 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fed7 	bl	8001440 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff ff0c 	bl	80014b4 <LL_ADC_IsInternalRegulatorEnabled>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d115      	bne.n	80016ce <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fef0 	bl	800148c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016ac:	4b84      	ldr	r3, [pc, #528]	; (80018c0 <HAL_ADC_Init+0x284>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	099b      	lsrs	r3, r3, #6
 80016b2:	4a84      	ldr	r2, [pc, #528]	; (80018c4 <HAL_ADC_Init+0x288>)
 80016b4:	fba2 2303 	umull	r2, r3, r2, r3
 80016b8:	099b      	lsrs	r3, r3, #6
 80016ba:	3301      	adds	r3, #1
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016c0:	e002      	b.n	80016c8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	3b01      	subs	r3, #1
 80016c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f9      	bne.n	80016c2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff feee 	bl	80014b4 <LL_ADC_IsInternalRegulatorEnabled>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d10d      	bne.n	80016fa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e2:	f043 0210 	orr.w	r2, r3, #16
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ee:	f043 0201 	orr.w	r2, r3, #1
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff ff62 	bl	80015c8 <LL_ADC_REG_IsConversionOngoing>
 8001704:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170a:	f003 0310 	and.w	r3, r3, #16
 800170e:	2b00      	cmp	r3, #0
 8001710:	f040 80c8 	bne.w	80018a4 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	2b00      	cmp	r3, #0
 8001718:	f040 80c4 	bne.w	80018a4 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001720:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001724:	f043 0202 	orr.w	r2, r3, #2
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fefb 	bl	800152c <LL_ADC_IsEnabled>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d10b      	bne.n	8001754 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800173c:	4862      	ldr	r0, [pc, #392]	; (80018c8 <HAL_ADC_Init+0x28c>)
 800173e:	f7ff fef5 	bl	800152c <LL_ADC_IsEnabled>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d105      	bne.n	8001754 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	4619      	mov	r1, r3
 800174e:	485f      	ldr	r0, [pc, #380]	; (80018cc <HAL_ADC_Init+0x290>)
 8001750:	f7ff fd4c 	bl	80011ec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	7e5b      	ldrb	r3, [r3, #25]
 8001758:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800175e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001764:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800176a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001772:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001774:	4313      	orrs	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d106      	bne.n	8001790 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001786:	3b01      	subs	r3, #1
 8001788:	045b      	lsls	r3, r3, #17
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4313      	orrs	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001794:	2b00      	cmp	r3, #0
 8001796:	d009      	beq.n	80017ac <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68da      	ldr	r2, [r3, #12]
 80017b2:	4b47      	ldr	r3, [pc, #284]	; (80018d0 <HAL_ADC_Init+0x294>)
 80017b4:	4013      	ands	r3, r2
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6812      	ldr	r2, [r2, #0]
 80017ba:	69b9      	ldr	r1, [r7, #24]
 80017bc:	430b      	orrs	r3, r1
 80017be:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff feff 	bl	80015c8 <LL_ADC_REG_IsConversionOngoing>
 80017ca:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ff20 	bl	8001616 <LL_ADC_INJ_IsConversionOngoing>
 80017d6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d140      	bne.n	8001860 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d13d      	bne.n	8001860 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	7e1b      	ldrb	r3, [r3, #24]
 80017ec:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80017ee:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017f6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80017f8:	4313      	orrs	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001806:	f023 0306 	bic.w	r3, r3, #6
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6812      	ldr	r2, [r2, #0]
 800180e:	69b9      	ldr	r1, [r7, #24]
 8001810:	430b      	orrs	r3, r1
 8001812:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800181a:	2b01      	cmp	r3, #1
 800181c:	d118      	bne.n	8001850 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001828:	f023 0304 	bic.w	r3, r3, #4
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001834:	4311      	orrs	r1, r2
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800183a:	4311      	orrs	r1, r2
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001840:	430a      	orrs	r2, r1
 8001842:	431a      	orrs	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f042 0201 	orr.w	r2, r2, #1
 800184c:	611a      	str	r2, [r3, #16]
 800184e:	e007      	b.n	8001860 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	691a      	ldr	r2, [r3, #16]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f022 0201 	bic.w	r2, r2, #1
 800185e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d10c      	bne.n	8001882 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f023 010f 	bic.w	r1, r3, #15
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	1e5a      	subs	r2, r3, #1
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	430a      	orrs	r2, r1
 800187e:	631a      	str	r2, [r3, #48]	; 0x30
 8001880:	e007      	b.n	8001892 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f022 020f 	bic.w	r2, r2, #15
 8001890:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001896:	f023 0303 	bic.w	r3, r3, #3
 800189a:	f043 0201 	orr.w	r2, r3, #1
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	659a      	str	r2, [r3, #88]	; 0x58
 80018a2:	e007      	b.n	80018b4 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a8:	f043 0210 	orr.w	r2, r3, #16
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80018b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3720      	adds	r7, #32
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000000 	.word	0x20000000
 80018c4:	053e2d63 	.word	0x053e2d63
 80018c8:	50040000 	.word	0x50040000
 80018cc:	50040300 	.word	0x50040300
 80018d0:	fff0c007 	.word	0xfff0c007

080018d4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fe71 	bl	80015c8 <LL_ADC_REG_IsConversionOngoing>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d14f      	bne.n	800198c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d101      	bne.n	80018fa <HAL_ADC_Start+0x26>
 80018f6:	2302      	movs	r3, #2
 80018f8:	e04b      	b.n	8001992 <HAL_ADC_Start+0xbe>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f000 fdd0 	bl	80024a8 <ADC_Enable>
 8001908:	4603      	mov	r3, r0
 800190a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d137      	bne.n	8001982 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001916:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800191a:	f023 0301 	bic.w	r3, r3, #1
 800191e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800192e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001932:	d106      	bne.n	8001942 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001938:	f023 0206 	bic.w	r2, r3, #6
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001940:	e002      	b.n	8001948 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	221c      	movs	r2, #28
 800194e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d007      	beq.n	8001976 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800196e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff fdfc 	bl	8001578 <LL_ADC_REG_StartConversion>
 8001980:	e006      	b.n	8001990 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800198a:	e001      	b.n	8001990 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800198c:	2302      	movs	r3, #2
 800198e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001990:	7bfb      	ldrb	r3, [r7, #15]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b084      	sub	sp, #16
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d101      	bne.n	80019b0 <HAL_ADC_Stop+0x16>
 80019ac:	2302      	movs	r3, #2
 80019ae:	e023      	b.n	80019f8 <HAL_ADC_Stop+0x5e>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80019b8:	2103      	movs	r1, #3
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 fcb8 	bl	8002330 <ADC_ConversionStop>
 80019c0:	4603      	mov	r3, r0
 80019c2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d111      	bne.n	80019ee <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 fdf2 	bl	80025b4 <ADC_Disable>
 80019d0:	4603      	mov	r3, r0
 80019d2:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d109      	bne.n	80019ee <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019e2:	f023 0301 	bic.w	r3, r3, #1
 80019e6:	f043 0201 	orr.w	r2, r3, #1
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	2b08      	cmp	r3, #8
 8001a10:	d102      	bne.n	8001a18 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001a12:	2308      	movs	r3, #8
 8001a14:	617b      	str	r3, [r7, #20]
 8001a16:	e010      	b.n	8001a3a <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d007      	beq.n	8001a36 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2a:	f043 0220 	orr.w	r2, r3, #32
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e06f      	b.n	8001b16 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001a36:	2304      	movs	r3, #4
 8001a38:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001a3a:	f7ff fba7 	bl	800118c <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a40:	e021      	b.n	8001a86 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a48:	d01d      	beq.n	8001a86 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001a4a:	f7ff fb9f 	bl	800118c <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d302      	bcc.n	8001a60 <HAL_ADC_PollForConversion+0x60>
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d112      	bne.n	8001a86 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10b      	bne.n	8001a86 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a72:	f043 0204 	orr.w	r2, r3, #4
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e047      	b.n	8001b16 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0d6      	beq.n	8001a42 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a98:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff fc3d 	bl	8001324 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d01c      	beq.n	8001aea <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	7e5b      	ldrb	r3, [r3, #25]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d118      	bne.n	8001aea <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	2b08      	cmp	r3, #8
 8001ac4:	d111      	bne.n	8001aea <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d105      	bne.n	8001aea <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae2:	f043 0201 	orr.w	r2, r3, #1
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	2b08      	cmp	r3, #8
 8001af6:	d104      	bne.n	8001b02 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2208      	movs	r2, #8
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	e008      	b.n	8001b14 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d103      	bne.n	8001b14 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	220c      	movs	r2, #12
 8001b12:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b0b6      	sub	sp, #216	; 0xd8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b42:	2300      	movs	r3, #0
 8001b44:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d101      	bne.n	8001b5a <HAL_ADC_ConfigChannel+0x22>
 8001b56:	2302      	movs	r3, #2
 8001b58:	e3d5      	b.n	8002306 <HAL_ADC_ConfigChannel+0x7ce>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff fd2e 	bl	80015c8 <LL_ADC_REG_IsConversionOngoing>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f040 83ba 	bne.w	80022e8 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b05      	cmp	r3, #5
 8001b7a:	d824      	bhi.n	8001bc6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	3b02      	subs	r3, #2
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	d81b      	bhi.n	8001bbe <HAL_ADC_ConfigChannel+0x86>
 8001b86:	a201      	add	r2, pc, #4	; (adr r2, 8001b8c <HAL_ADC_ConfigChannel+0x54>)
 8001b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b8c:	08001b9d 	.word	0x08001b9d
 8001b90:	08001ba5 	.word	0x08001ba5
 8001b94:	08001bad 	.word	0x08001bad
 8001b98:	08001bb5 	.word	0x08001bb5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	220c      	movs	r2, #12
 8001ba0:	605a      	str	r2, [r3, #4]
          break;
 8001ba2:	e011      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	2212      	movs	r2, #18
 8001ba8:	605a      	str	r2, [r3, #4]
          break;
 8001baa:	e00d      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	2218      	movs	r2, #24
 8001bb0:	605a      	str	r2, [r3, #4]
          break;
 8001bb2:	e009      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bba:	605a      	str	r2, [r3, #4]
          break;
 8001bbc:	e004      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	2206      	movs	r2, #6
 8001bc2:	605a      	str	r2, [r3, #4]
          break;
 8001bc4:	e000      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001bc6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6818      	ldr	r0, [r3, #0]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	6859      	ldr	r1, [r3, #4]
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	f7ff fbb8 	bl	800134a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff fcf2 	bl	80015c8 <LL_ADC_REG_IsConversionOngoing>
 8001be4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fd12 	bl	8001616 <LL_ADC_INJ_IsConversionOngoing>
 8001bf2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bf6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f040 81c1 	bne.w	8001f82 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f040 81bc 	bne.w	8001f82 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c12:	d10f      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6818      	ldr	r0, [r3, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f7ff fbbf 	bl	80013a2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fb66 	bl	80012fe <LL_ADC_SetSamplingTimeCommonConfig>
 8001c32:	e00e      	b.n	8001c52 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6818      	ldr	r0, [r3, #0]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	6819      	ldr	r1, [r3, #0]
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	461a      	mov	r2, r3
 8001c42:	f7ff fbae 	bl	80013a2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff fb56 	bl	80012fe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	695a      	ldr	r2, [r3, #20]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	08db      	lsrs	r3, r3, #3
 8001c5e:	f003 0303 	and.w	r3, r3, #3
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d00a      	beq.n	8001c8a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6818      	ldr	r0, [r3, #0]
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	6919      	ldr	r1, [r3, #16]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001c84:	f7ff fae6 	bl	8001254 <LL_ADC_SetOffset>
 8001c88:	e17b      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2100      	movs	r1, #0
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff fb03 	bl	800129c <LL_ADC_GetOffsetChannel>
 8001c96:	4603      	mov	r3, r0
 8001c98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d10a      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0x17e>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff faf8 	bl	800129c <LL_ADC_GetOffsetChannel>
 8001cac:	4603      	mov	r3, r0
 8001cae:	0e9b      	lsrs	r3, r3, #26
 8001cb0:	f003 021f 	and.w	r2, r3, #31
 8001cb4:	e01e      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x1bc>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff faed 	bl	800129c <LL_ADC_GetOffsetChannel>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ccc:	fa93 f3a3 	rbit	r3, r3
 8001cd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001cd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001cd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001cdc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001ce4:	2320      	movs	r3, #32
 8001ce6:	e004      	b.n	8001cf2 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001ce8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001cec:	fab3 f383 	clz	r3, r3
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d105      	bne.n	8001d0c <HAL_ADC_ConfigChannel+0x1d4>
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	0e9b      	lsrs	r3, r3, #26
 8001d06:	f003 031f 	and.w	r3, r3, #31
 8001d0a:	e018      	b.n	8001d3e <HAL_ADC_ConfigChannel+0x206>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001d18:	fa93 f3a3 	rbit	r3, r3
 8001d1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001d20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001d28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001d30:	2320      	movs	r3, #32
 8001d32:	e004      	b.n	8001d3e <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001d34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001d38:	fab3 f383 	clz	r3, r3
 8001d3c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d106      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2200      	movs	r2, #0
 8001d48:	2100      	movs	r1, #0
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff fabc 	bl	80012c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2101      	movs	r1, #1
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff faa0 	bl	800129c <LL_ADC_GetOffsetChannel>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10a      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x244>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fa95 	bl	800129c <LL_ADC_GetOffsetChannel>
 8001d72:	4603      	mov	r3, r0
 8001d74:	0e9b      	lsrs	r3, r3, #26
 8001d76:	f003 021f 	and.w	r2, r3, #31
 8001d7a:	e01e      	b.n	8001dba <HAL_ADC_ConfigChannel+0x282>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2101      	movs	r1, #1
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff fa8a 	bl	800129c <LL_ADC_GetOffsetChannel>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d92:	fa93 f3a3 	rbit	r3, r3
 8001d96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001d9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001da2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001daa:	2320      	movs	r3, #32
 8001dac:	e004      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001dae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001db2:	fab3 f383 	clz	r3, r3
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d105      	bne.n	8001dd2 <HAL_ADC_ConfigChannel+0x29a>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	0e9b      	lsrs	r3, r3, #26
 8001dcc:	f003 031f 	and.w	r3, r3, #31
 8001dd0:	e018      	b.n	8001e04 <HAL_ADC_ConfigChannel+0x2cc>
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dda:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001dde:	fa93 f3a3 	rbit	r3, r3
 8001de2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001de6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001dea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001dee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001df6:	2320      	movs	r3, #32
 8001df8:	e004      	b.n	8001e04 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001dfa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001dfe:	fab3 f383 	clz	r3, r3
 8001e02:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d106      	bne.n	8001e16 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2101      	movs	r1, #1
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff fa59 	bl	80012c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2102      	movs	r1, #2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fa3d 	bl	800129c <LL_ADC_GetOffsetChannel>
 8001e22:	4603      	mov	r3, r0
 8001e24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d10a      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x30a>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2102      	movs	r1, #2
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff fa32 	bl	800129c <LL_ADC_GetOffsetChannel>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	0e9b      	lsrs	r3, r3, #26
 8001e3c:	f003 021f 	and.w	r2, r3, #31
 8001e40:	e01e      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x348>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2102      	movs	r1, #2
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff fa27 	bl	800129c <LL_ADC_GetOffsetChannel>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e58:	fa93 f3a3 	rbit	r3, r3
 8001e5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001e60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001e68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001e70:	2320      	movs	r3, #32
 8001e72:	e004      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001e74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e78:	fab3 f383 	clz	r3, r3
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d105      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x360>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	0e9b      	lsrs	r3, r3, #26
 8001e92:	f003 031f 	and.w	r3, r3, #31
 8001e96:	e016      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x38e>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ea4:	fa93 f3a3 	rbit	r3, r3
 8001ea8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001eaa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001eac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001eb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001eb8:	2320      	movs	r3, #32
 8001eba:	e004      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001ebc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ec0:	fab3 f383 	clz	r3, r3
 8001ec4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d106      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2102      	movs	r1, #2
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff f9f8 	bl	80012c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2103      	movs	r1, #3
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff f9dc 	bl	800129c <LL_ADC_GetOffsetChannel>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10a      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x3cc>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2103      	movs	r1, #3
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff f9d1 	bl	800129c <LL_ADC_GetOffsetChannel>
 8001efa:	4603      	mov	r3, r0
 8001efc:	0e9b      	lsrs	r3, r3, #26
 8001efe:	f003 021f 	and.w	r2, r3, #31
 8001f02:	e017      	b.n	8001f34 <HAL_ADC_ConfigChannel+0x3fc>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2103      	movs	r1, #3
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff f9c6 	bl	800129c <LL_ADC_GetOffsetChannel>
 8001f10:	4603      	mov	r3, r0
 8001f12:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f16:	fa93 f3a3 	rbit	r3, r3
 8001f1a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001f1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f1e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001f20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001f26:	2320      	movs	r3, #32
 8001f28:	e003      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001f2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f2c:	fab3 f383 	clz	r3, r3
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d105      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x414>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	0e9b      	lsrs	r3, r3, #26
 8001f46:	f003 031f 	and.w	r3, r3, #31
 8001f4a:	e011      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x438>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f54:	fa93 f3a3 	rbit	r3, r3
 8001f58:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001f5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f5c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d101      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001f64:	2320      	movs	r3, #32
 8001f66:	e003      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f6a:	fab3 f383 	clz	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d106      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2103      	movs	r1, #3
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff f9a3 	bl	80012c8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff fad0 	bl	800152c <LL_ADC_IsEnabled>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f040 8140 	bne.w	8002214 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6818      	ldr	r0, [r3, #0]
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	6819      	ldr	r1, [r3, #0]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	f7ff fa29 	bl	80013f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	4a8f      	ldr	r2, [pc, #572]	; (80021e8 <HAL_ADC_ConfigChannel+0x6b0>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	f040 8131 	bne.w	8002214 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10b      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x4a2>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	0e9b      	lsrs	r3, r3, #26
 8001fc8:	3301      	adds	r3, #1
 8001fca:	f003 031f 	and.w	r3, r3, #31
 8001fce:	2b09      	cmp	r3, #9
 8001fd0:	bf94      	ite	ls
 8001fd2:	2301      	movls	r3, #1
 8001fd4:	2300      	movhi	r3, #0
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	e019      	b.n	800200e <HAL_ADC_ConfigChannel+0x4d6>
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fe2:	fa93 f3a3 	rbit	r3, r3
 8001fe6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001fe8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fea:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001fec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001ff2:	2320      	movs	r3, #32
 8001ff4:	e003      	b.n	8001ffe <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001ff6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ff8:	fab3 f383 	clz	r3, r3
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	3301      	adds	r3, #1
 8002000:	f003 031f 	and.w	r3, r3, #31
 8002004:	2b09      	cmp	r3, #9
 8002006:	bf94      	ite	ls
 8002008:	2301      	movls	r3, #1
 800200a:	2300      	movhi	r3, #0
 800200c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800200e:	2b00      	cmp	r3, #0
 8002010:	d079      	beq.n	8002106 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800201a:	2b00      	cmp	r3, #0
 800201c:	d107      	bne.n	800202e <HAL_ADC_ConfigChannel+0x4f6>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	0e9b      	lsrs	r3, r3, #26
 8002024:	3301      	adds	r3, #1
 8002026:	069b      	lsls	r3, r3, #26
 8002028:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800202c:	e015      	b.n	800205a <HAL_ADC_ConfigChannel+0x522>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002036:	fa93 f3a3 	rbit	r3, r3
 800203a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800203c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800203e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8002046:	2320      	movs	r3, #32
 8002048:	e003      	b.n	8002052 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800204a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800204c:	fab3 f383 	clz	r3, r3
 8002050:	b2db      	uxtb	r3, r3
 8002052:	3301      	adds	r3, #1
 8002054:	069b      	lsls	r3, r3, #26
 8002056:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002062:	2b00      	cmp	r3, #0
 8002064:	d109      	bne.n	800207a <HAL_ADC_ConfigChannel+0x542>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	0e9b      	lsrs	r3, r3, #26
 800206c:	3301      	adds	r3, #1
 800206e:	f003 031f 	and.w	r3, r3, #31
 8002072:	2101      	movs	r1, #1
 8002074:	fa01 f303 	lsl.w	r3, r1, r3
 8002078:	e017      	b.n	80020aa <HAL_ADC_ConfigChannel+0x572>
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002082:	fa93 f3a3 	rbit	r3, r3
 8002086:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800208a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800208c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002092:	2320      	movs	r3, #32
 8002094:	e003      	b.n	800209e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002096:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002098:	fab3 f383 	clz	r3, r3
 800209c:	b2db      	uxtb	r3, r3
 800209e:	3301      	adds	r3, #1
 80020a0:	f003 031f 	and.w	r3, r3, #31
 80020a4:	2101      	movs	r1, #1
 80020a6:	fa01 f303 	lsl.w	r3, r1, r3
 80020aa:	ea42 0103 	orr.w	r1, r2, r3
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10a      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x598>
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	0e9b      	lsrs	r3, r3, #26
 80020c0:	3301      	adds	r3, #1
 80020c2:	f003 021f 	and.w	r2, r3, #31
 80020c6:	4613      	mov	r3, r2
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	4413      	add	r3, r2
 80020cc:	051b      	lsls	r3, r3, #20
 80020ce:	e018      	b.n	8002102 <HAL_ADC_ConfigChannel+0x5ca>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020d8:	fa93 f3a3 	rbit	r3, r3
 80020dc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80020de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80020e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80020e8:	2320      	movs	r3, #32
 80020ea:	e003      	b.n	80020f4 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80020ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020ee:	fab3 f383 	clz	r3, r3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	3301      	adds	r3, #1
 80020f6:	f003 021f 	and.w	r2, r3, #31
 80020fa:	4613      	mov	r3, r2
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	4413      	add	r3, r2
 8002100:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002102:	430b      	orrs	r3, r1
 8002104:	e081      	b.n	800220a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800210e:	2b00      	cmp	r3, #0
 8002110:	d107      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x5ea>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	0e9b      	lsrs	r3, r3, #26
 8002118:	3301      	adds	r3, #1
 800211a:	069b      	lsls	r3, r3, #26
 800211c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002120:	e015      	b.n	800214e <HAL_ADC_ConfigChannel+0x616>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800212a:	fa93 f3a3 	rbit	r3, r3
 800212e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002132:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800213a:	2320      	movs	r3, #32
 800213c:	e003      	b.n	8002146 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800213e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002140:	fab3 f383 	clz	r3, r3
 8002144:	b2db      	uxtb	r3, r3
 8002146:	3301      	adds	r3, #1
 8002148:	069b      	lsls	r3, r3, #26
 800214a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002156:	2b00      	cmp	r3, #0
 8002158:	d109      	bne.n	800216e <HAL_ADC_ConfigChannel+0x636>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	0e9b      	lsrs	r3, r3, #26
 8002160:	3301      	adds	r3, #1
 8002162:	f003 031f 	and.w	r3, r3, #31
 8002166:	2101      	movs	r1, #1
 8002168:	fa01 f303 	lsl.w	r3, r1, r3
 800216c:	e017      	b.n	800219e <HAL_ADC_ConfigChannel+0x666>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002174:	6a3b      	ldr	r3, [r7, #32]
 8002176:	fa93 f3a3 	rbit	r3, r3
 800217a:	61fb      	str	r3, [r7, #28]
  return result;
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002186:	2320      	movs	r3, #32
 8002188:	e003      	b.n	8002192 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	fab3 f383 	clz	r3, r3
 8002190:	b2db      	uxtb	r3, r3
 8002192:	3301      	adds	r3, #1
 8002194:	f003 031f 	and.w	r3, r3, #31
 8002198:	2101      	movs	r1, #1
 800219a:	fa01 f303 	lsl.w	r3, r1, r3
 800219e:	ea42 0103 	orr.w	r1, r2, r3
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10d      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x692>
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	0e9b      	lsrs	r3, r3, #26
 80021b4:	3301      	adds	r3, #1
 80021b6:	f003 021f 	and.w	r2, r3, #31
 80021ba:	4613      	mov	r3, r2
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	4413      	add	r3, r2
 80021c0:	3b1e      	subs	r3, #30
 80021c2:	051b      	lsls	r3, r3, #20
 80021c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021c8:	e01e      	b.n	8002208 <HAL_ADC_ConfigChannel+0x6d0>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	fa93 f3a3 	rbit	r3, r3
 80021d6:	613b      	str	r3, [r7, #16]
  return result;
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d104      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80021e2:	2320      	movs	r3, #32
 80021e4:	e006      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x6bc>
 80021e6:	bf00      	nop
 80021e8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	fab3 f383 	clz	r3, r3
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	3301      	adds	r3, #1
 80021f6:	f003 021f 	and.w	r2, r3, #31
 80021fa:	4613      	mov	r3, r2
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	4413      	add	r3, r2
 8002200:	3b1e      	subs	r3, #30
 8002202:	051b      	lsls	r3, r3, #20
 8002204:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002208:	430b      	orrs	r3, r1
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	6892      	ldr	r2, [r2, #8]
 800220e:	4619      	mov	r1, r3
 8002210:	f7ff f8c7 	bl	80013a2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	4b3d      	ldr	r3, [pc, #244]	; (8002310 <HAL_ADC_ConfigChannel+0x7d8>)
 800221a:	4013      	ands	r3, r2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d06c      	beq.n	80022fa <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002220:	483c      	ldr	r0, [pc, #240]	; (8002314 <HAL_ADC_ConfigChannel+0x7dc>)
 8002222:	f7ff f809 	bl	8001238 <LL_ADC_GetCommonPathInternalCh>
 8002226:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a3a      	ldr	r2, [pc, #232]	; (8002318 <HAL_ADC_ConfigChannel+0x7e0>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d127      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002234:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002238:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d121      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a35      	ldr	r2, [pc, #212]	; (800231c <HAL_ADC_ConfigChannel+0x7e4>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d157      	bne.n	80022fa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800224a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800224e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002252:	4619      	mov	r1, r3
 8002254:	482f      	ldr	r0, [pc, #188]	; (8002314 <HAL_ADC_ConfigChannel+0x7dc>)
 8002256:	f7fe ffdc 	bl	8001212 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800225a:	4b31      	ldr	r3, [pc, #196]	; (8002320 <HAL_ADC_ConfigChannel+0x7e8>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	099b      	lsrs	r3, r3, #6
 8002260:	4a30      	ldr	r2, [pc, #192]	; (8002324 <HAL_ADC_ConfigChannel+0x7ec>)
 8002262:	fba2 2303 	umull	r2, r3, r2, r3
 8002266:	099b      	lsrs	r3, r3, #6
 8002268:	1c5a      	adds	r2, r3, #1
 800226a:	4613      	mov	r3, r2
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	4413      	add	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002274:	e002      	b.n	800227c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	3b01      	subs	r3, #1
 800227a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f9      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002282:	e03a      	b.n	80022fa <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a27      	ldr	r2, [pc, #156]	; (8002328 <HAL_ADC_ConfigChannel+0x7f0>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d113      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x77e>
 800228e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002292:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10d      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a1f      	ldr	r2, [pc, #124]	; (800231c <HAL_ADC_ConfigChannel+0x7e4>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d12a      	bne.n	80022fa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ac:	4619      	mov	r1, r3
 80022ae:	4819      	ldr	r0, [pc, #100]	; (8002314 <HAL_ADC_ConfigChannel+0x7dc>)
 80022b0:	f7fe ffaf 	bl	8001212 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022b4:	e021      	b.n	80022fa <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a1c      	ldr	r2, [pc, #112]	; (800232c <HAL_ADC_ConfigChannel+0x7f4>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d11c      	bne.n	80022fa <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80022c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d116      	bne.n	80022fa <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a12      	ldr	r2, [pc, #72]	; (800231c <HAL_ADC_ConfigChannel+0x7e4>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d111      	bne.n	80022fa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022de:	4619      	mov	r1, r3
 80022e0:	480c      	ldr	r0, [pc, #48]	; (8002314 <HAL_ADC_ConfigChannel+0x7dc>)
 80022e2:	f7fe ff96 	bl	8001212 <LL_ADC_SetCommonPathInternalCh>
 80022e6:	e008      	b.n	80022fa <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ec:	f043 0220 	orr.w	r2, r3, #32
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002302:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002306:	4618      	mov	r0, r3
 8002308:	37d8      	adds	r7, #216	; 0xd8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	80080000 	.word	0x80080000
 8002314:	50040300 	.word	0x50040300
 8002318:	c7520000 	.word	0xc7520000
 800231c:	50040000 	.word	0x50040000
 8002320:	20000000 	.word	0x20000000
 8002324:	053e2d63 	.word	0x053e2d63
 8002328:	cb840000 	.word	0xcb840000
 800232c:	80000001 	.word	0x80000001

08002330 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff f93e 	bl	80015c8 <LL_ADC_REG_IsConversionOngoing>
 800234c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff f95f 	bl	8001616 <LL_ADC_INJ_IsConversionOngoing>
 8002358:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d103      	bne.n	8002368 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2b00      	cmp	r3, #0
 8002364:	f000 8098 	beq.w	8002498 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d02a      	beq.n	80023cc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	7e5b      	ldrb	r3, [r3, #25]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d126      	bne.n	80023cc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	7e1b      	ldrb	r3, [r3, #24]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d122      	bne.n	80023cc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002386:	2301      	movs	r3, #1
 8002388:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800238a:	e014      	b.n	80023b6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	4a45      	ldr	r2, [pc, #276]	; (80024a4 <ADC_ConversionStop+0x174>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d90d      	bls.n	80023b0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002398:	f043 0210 	orr.w	r2, r3, #16
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a4:	f043 0201 	orr.w	r2, r3, #1
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e074      	b.n	800249a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	3301      	adds	r3, #1
 80023b4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c0:	2b40      	cmp	r3, #64	; 0x40
 80023c2:	d1e3      	bne.n	800238c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2240      	movs	r2, #64	; 0x40
 80023ca:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d014      	beq.n	80023fc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff f8f6 	bl	80015c8 <LL_ADC_REG_IsConversionOngoing>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00c      	beq.n	80023fc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff f8b3 	bl	8001552 <LL_ADC_IsDisableOngoing>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d104      	bne.n	80023fc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff f8d2 	bl	80015a0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d014      	beq.n	800242c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff f905 	bl	8001616 <LL_ADC_INJ_IsConversionOngoing>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00c      	beq.n	800242c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff f89b 	bl	8001552 <LL_ADC_IsDisableOngoing>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d104      	bne.n	800242c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff f8e1 	bl	80015ee <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d005      	beq.n	800243e <ADC_ConversionStop+0x10e>
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	2b03      	cmp	r3, #3
 8002436:	d105      	bne.n	8002444 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002438:	230c      	movs	r3, #12
 800243a:	617b      	str	r3, [r7, #20]
        break;
 800243c:	e005      	b.n	800244a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800243e:	2308      	movs	r3, #8
 8002440:	617b      	str	r3, [r7, #20]
        break;
 8002442:	e002      	b.n	800244a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002444:	2304      	movs	r3, #4
 8002446:	617b      	str	r3, [r7, #20]
        break;
 8002448:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800244a:	f7fe fe9f 	bl	800118c <HAL_GetTick>
 800244e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002450:	e01b      	b.n	800248a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002452:	f7fe fe9b 	bl	800118c <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b05      	cmp	r3, #5
 800245e:	d914      	bls.n	800248a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	4013      	ands	r3, r2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00d      	beq.n	800248a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002472:	f043 0210 	orr.w	r2, r3, #16
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247e:	f043 0201 	orr.w	r2, r3, #1
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e007      	b.n	800249a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	4013      	ands	r3, r2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1dc      	bne.n	8002452 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3720      	adds	r7, #32
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	a33fffff 	.word	0xa33fffff

080024a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff f837 	bl	800152c <LL_ADC_IsEnabled>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d169      	bne.n	8002598 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	4b36      	ldr	r3, [pc, #216]	; (80025a4 <ADC_Enable+0xfc>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00d      	beq.n	80024ee <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d6:	f043 0210 	orr.w	r2, r3, #16
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e2:	f043 0201 	orr.w	r2, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e055      	b.n	800259a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fe fff2 	bl	80014dc <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80024f8:	482b      	ldr	r0, [pc, #172]	; (80025a8 <ADC_Enable+0x100>)
 80024fa:	f7fe fe9d 	bl	8001238 <LL_ADC_GetCommonPathInternalCh>
 80024fe:	4603      	mov	r3, r0
 8002500:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d013      	beq.n	8002530 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002508:	4b28      	ldr	r3, [pc, #160]	; (80025ac <ADC_Enable+0x104>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	099b      	lsrs	r3, r3, #6
 800250e:	4a28      	ldr	r2, [pc, #160]	; (80025b0 <ADC_Enable+0x108>)
 8002510:	fba2 2303 	umull	r2, r3, r2, r3
 8002514:	099b      	lsrs	r3, r3, #6
 8002516:	1c5a      	adds	r2, r3, #1
 8002518:	4613      	mov	r3, r2
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	4413      	add	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002522:	e002      	b.n	800252a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	3b01      	subs	r3, #1
 8002528:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1f9      	bne.n	8002524 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002530:	f7fe fe2c 	bl	800118c <HAL_GetTick>
 8002534:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002536:	e028      	b.n	800258a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f7fe fff5 	bl	800152c <LL_ADC_IsEnabled>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d104      	bne.n	8002552 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f7fe ffc5 	bl	80014dc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002552:	f7fe fe1b 	bl	800118c <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d914      	bls.n	800258a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b01      	cmp	r3, #1
 800256c:	d00d      	beq.n	800258a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002572:	f043 0210 	orr.w	r2, r3, #16
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257e:	f043 0201 	orr.w	r2, r3, #1
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e007      	b.n	800259a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b01      	cmp	r3, #1
 8002596:	d1cf      	bne.n	8002538 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	8000003f 	.word	0x8000003f
 80025a8:	50040300 	.word	0x50040300
 80025ac:	20000000 	.word	0x20000000
 80025b0:	053e2d63 	.word	0x053e2d63

080025b4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fe ffc6 	bl	8001552 <LL_ADC_IsDisableOngoing>
 80025c6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fe ffad 	bl	800152c <LL_ADC_IsEnabled>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d047      	beq.n	8002668 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d144      	bne.n	8002668 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 030d 	and.w	r3, r3, #13
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d10c      	bne.n	8002606 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fe ff87 	bl	8001504 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2203      	movs	r2, #3
 80025fc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80025fe:	f7fe fdc5 	bl	800118c <HAL_GetTick>
 8002602:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002604:	e029      	b.n	800265a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260a:	f043 0210 	orr.w	r2, r3, #16
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002616:	f043 0201 	orr.w	r2, r3, #1
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e023      	b.n	800266a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002622:	f7fe fdb3 	bl	800118c <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d914      	bls.n	800265a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00d      	beq.n	800265a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002642:	f043 0210 	orr.w	r2, r3, #16
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264e:	f043 0201 	orr.w	r2, r3, #1
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e007      	b.n	800266a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1dc      	bne.n	8002622 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <LL_ADC_StartCalibration>:
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
 800267a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002684:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800268e:	4313      	orrs	r3, r2
 8002690:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	609a      	str	r2, [r3, #8]
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <LL_ADC_IsCalibrationOnGoing>:
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026b8:	d101      	bne.n	80026be <LL_ADC_IsCalibrationOnGoing+0x1a>
 80026ba:	2301      	movs	r3, #1
 80026bc:	e000      	b.n	80026c0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d101      	bne.n	80026e8 <HAL_ADCEx_Calibration_Start+0x1c>
 80026e4:	2302      	movs	r3, #2
 80026e6:	e04d      	b.n	8002784 <HAL_ADCEx_Calibration_Start+0xb8>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f7ff ff5f 	bl	80025b4 <ADC_Disable>
 80026f6:	4603      	mov	r3, r0
 80026f8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d136      	bne.n	800276e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002704:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002708:	f023 0302 	bic.w	r3, r3, #2
 800270c:	f043 0202 	orr.w	r2, r3, #2
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6839      	ldr	r1, [r7, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff ffa9 	bl	8002672 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002720:	e014      	b.n	800274c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	3301      	adds	r3, #1
 8002726:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800272e:	d30d      	bcc.n	800274c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002734:	f023 0312 	bic.w	r3, r3, #18
 8002738:	f043 0210 	orr.w	r2, r3, #16
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e01b      	b.n	8002784 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff ffa7 	bl	80026a4 <LL_ADC_IsCalibrationOnGoing>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1e2      	bne.n	8002722 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002760:	f023 0303 	bic.w	r3, r3, #3
 8002764:	f043 0201 	orr.w	r2, r3, #1
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	659a      	str	r2, [r3, #88]	; 0x58
 800276c:	e005      	b.n	800277a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002772:	f043 0210 	orr.w	r2, r3, #16
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002782:	7bfb      	ldrb	r3, [r7, #15]
}
 8002784:	4618      	mov	r0, r3
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800279c:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <__NVIC_SetPriorityGrouping+0x44>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027a2:	68ba      	ldr	r2, [r7, #8]
 80027a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027a8:	4013      	ands	r3, r2
 80027aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027be:	4a04      	ldr	r2, [pc, #16]	; (80027d0 <__NVIC_SetPriorityGrouping+0x44>)
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	60d3      	str	r3, [r2, #12]
}
 80027c4:	bf00      	nop
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027d8:	4b04      	ldr	r3, [pc, #16]	; (80027ec <__NVIC_GetPriorityGrouping+0x18>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	0a1b      	lsrs	r3, r3, #8
 80027de:	f003 0307 	and.w	r3, r3, #7
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	e000ed00 	.word	0xe000ed00

080027f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	db0b      	blt.n	800281a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	f003 021f 	and.w	r2, r3, #31
 8002808:	4907      	ldr	r1, [pc, #28]	; (8002828 <__NVIC_EnableIRQ+0x38>)
 800280a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280e:	095b      	lsrs	r3, r3, #5
 8002810:	2001      	movs	r0, #1
 8002812:	fa00 f202 	lsl.w	r2, r0, r2
 8002816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	e000e100 	.word	0xe000e100

0800282c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283a:	2b00      	cmp	r3, #0
 800283c:	db12      	blt.n	8002864 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	f003 021f 	and.w	r2, r3, #31
 8002844:	490a      	ldr	r1, [pc, #40]	; (8002870 <__NVIC_DisableIRQ+0x44>)
 8002846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284a:	095b      	lsrs	r3, r3, #5
 800284c:	2001      	movs	r0, #1
 800284e:	fa00 f202 	lsl.w	r2, r0, r2
 8002852:	3320      	adds	r3, #32
 8002854:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002858:	f3bf 8f4f 	dsb	sy
}
 800285c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800285e:	f3bf 8f6f 	isb	sy
}
 8002862:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	e000e100 	.word	0xe000e100

08002874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	6039      	str	r1, [r7, #0]
 800287e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002884:	2b00      	cmp	r3, #0
 8002886:	db0a      	blt.n	800289e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	b2da      	uxtb	r2, r3
 800288c:	490c      	ldr	r1, [pc, #48]	; (80028c0 <__NVIC_SetPriority+0x4c>)
 800288e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002892:	0112      	lsls	r2, r2, #4
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	440b      	add	r3, r1
 8002898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800289c:	e00a      	b.n	80028b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	4908      	ldr	r1, [pc, #32]	; (80028c4 <__NVIC_SetPriority+0x50>)
 80028a4:	79fb      	ldrb	r3, [r7, #7]
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	3b04      	subs	r3, #4
 80028ac:	0112      	lsls	r2, r2, #4
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	440b      	add	r3, r1
 80028b2:	761a      	strb	r2, [r3, #24]
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	e000e100 	.word	0xe000e100
 80028c4:	e000ed00 	.word	0xe000ed00

080028c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b089      	sub	sp, #36	; 0x24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f1c3 0307 	rsb	r3, r3, #7
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	bf28      	it	cs
 80028e6:	2304      	movcs	r3, #4
 80028e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	3304      	adds	r3, #4
 80028ee:	2b06      	cmp	r3, #6
 80028f0:	d902      	bls.n	80028f8 <NVIC_EncodePriority+0x30>
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	3b03      	subs	r3, #3
 80028f6:	e000      	b.n	80028fa <NVIC_EncodePriority+0x32>
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43da      	mvns	r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	401a      	ands	r2, r3
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002910:	f04f 31ff 	mov.w	r1, #4294967295
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	fa01 f303 	lsl.w	r3, r1, r3
 800291a:	43d9      	mvns	r1, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002920:	4313      	orrs	r3, r2
         );
}
 8002922:	4618      	mov	r0, r3
 8002924:	3724      	adds	r7, #36	; 0x24
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7ff ff28 	bl	800278c <__NVIC_SetPriorityGrouping>
}
 800293c:	bf00      	nop
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
 8002950:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002956:	f7ff ff3d 	bl	80027d4 <__NVIC_GetPriorityGrouping>
 800295a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	68b9      	ldr	r1, [r7, #8]
 8002960:	6978      	ldr	r0, [r7, #20]
 8002962:	f7ff ffb1 	bl	80028c8 <NVIC_EncodePriority>
 8002966:	4602      	mov	r2, r0
 8002968:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800296c:	4611      	mov	r1, r2
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff ff80 	bl	8002874 <__NVIC_SetPriority>
}
 8002974:	bf00      	nop
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff ff30 	bl	80027f0 <__NVIC_EnableIRQ>
}
 8002990:	bf00      	nop
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80029a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff ff40 	bl	800282c <__NVIC_DisableIRQ>
}
 80029ac:	bf00      	nop
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029c2:	e154      	b.n	8002c6e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	2101      	movs	r1, #1
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	fa01 f303 	lsl.w	r3, r1, r3
 80029d0:	4013      	ands	r3, r2
 80029d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 8146 	beq.w	8002c68 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 0303 	and.w	r3, r3, #3
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d005      	beq.n	80029f4 <HAL_GPIO_Init+0x40>
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 0303 	and.w	r3, r3, #3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d130      	bne.n	8002a56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	2203      	movs	r2, #3
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	43db      	mvns	r3, r3
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	4013      	ands	r3, r2
 8002a38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	091b      	lsrs	r3, r3, #4
 8002a40:	f003 0201 	and.w	r2, r3, #1
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f003 0303 	and.w	r3, r3, #3
 8002a5e:	2b03      	cmp	r3, #3
 8002a60:	d017      	beq.n	8002a92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	2203      	movs	r2, #3
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	43db      	mvns	r3, r3
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	4013      	ands	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d123      	bne.n	8002ae6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	08da      	lsrs	r2, r3, #3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3208      	adds	r2, #8
 8002aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	220f      	movs	r2, #15
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43db      	mvns	r3, r3
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	691a      	ldr	r2, [r3, #16]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	08da      	lsrs	r2, r3, #3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3208      	adds	r2, #8
 8002ae0:	6939      	ldr	r1, [r7, #16]
 8002ae2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	2203      	movs	r2, #3
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	43db      	mvns	r3, r3
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	4013      	ands	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f003 0203 	and.w	r2, r3, #3
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f000 80a0 	beq.w	8002c68 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b28:	4b58      	ldr	r3, [pc, #352]	; (8002c8c <HAL_GPIO_Init+0x2d8>)
 8002b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b2c:	4a57      	ldr	r2, [pc, #348]	; (8002c8c <HAL_GPIO_Init+0x2d8>)
 8002b2e:	f043 0301 	orr.w	r3, r3, #1
 8002b32:	6613      	str	r3, [r2, #96]	; 0x60
 8002b34:	4b55      	ldr	r3, [pc, #340]	; (8002c8c <HAL_GPIO_Init+0x2d8>)
 8002b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	60bb      	str	r3, [r7, #8]
 8002b3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b40:	4a53      	ldr	r2, [pc, #332]	; (8002c90 <HAL_GPIO_Init+0x2dc>)
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	089b      	lsrs	r3, r3, #2
 8002b46:	3302      	adds	r3, #2
 8002b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f003 0303 	and.w	r3, r3, #3
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	220f      	movs	r2, #15
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	4013      	ands	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b6a:	d019      	beq.n	8002ba0 <HAL_GPIO_Init+0x1ec>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a49      	ldr	r2, [pc, #292]	; (8002c94 <HAL_GPIO_Init+0x2e0>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d013      	beq.n	8002b9c <HAL_GPIO_Init+0x1e8>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a48      	ldr	r2, [pc, #288]	; (8002c98 <HAL_GPIO_Init+0x2e4>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d00d      	beq.n	8002b98 <HAL_GPIO_Init+0x1e4>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a47      	ldr	r2, [pc, #284]	; (8002c9c <HAL_GPIO_Init+0x2e8>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d007      	beq.n	8002b94 <HAL_GPIO_Init+0x1e0>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a46      	ldr	r2, [pc, #280]	; (8002ca0 <HAL_GPIO_Init+0x2ec>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d101      	bne.n	8002b90 <HAL_GPIO_Init+0x1dc>
 8002b8c:	2304      	movs	r3, #4
 8002b8e:	e008      	b.n	8002ba2 <HAL_GPIO_Init+0x1ee>
 8002b90:	2307      	movs	r3, #7
 8002b92:	e006      	b.n	8002ba2 <HAL_GPIO_Init+0x1ee>
 8002b94:	2303      	movs	r3, #3
 8002b96:	e004      	b.n	8002ba2 <HAL_GPIO_Init+0x1ee>
 8002b98:	2302      	movs	r3, #2
 8002b9a:	e002      	b.n	8002ba2 <HAL_GPIO_Init+0x1ee>
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e000      	b.n	8002ba2 <HAL_GPIO_Init+0x1ee>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	f002 0203 	and.w	r2, r2, #3
 8002ba8:	0092      	lsls	r2, r2, #2
 8002baa:	4093      	lsls	r3, r2
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002bb2:	4937      	ldr	r1, [pc, #220]	; (8002c90 <HAL_GPIO_Init+0x2dc>)
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	089b      	lsrs	r3, r3, #2
 8002bb8:	3302      	adds	r3, #2
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bc0:	4b38      	ldr	r3, [pc, #224]	; (8002ca4 <HAL_GPIO_Init+0x2f0>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d003      	beq.n	8002be4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002be4:	4a2f      	ldr	r2, [pc, #188]	; (8002ca4 <HAL_GPIO_Init+0x2f0>)
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002bea:	4b2e      	ldr	r3, [pc, #184]	; (8002ca4 <HAL_GPIO_Init+0x2f0>)
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c0e:	4a25      	ldr	r2, [pc, #148]	; (8002ca4 <HAL_GPIO_Init+0x2f0>)
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c14:	4b23      	ldr	r3, [pc, #140]	; (8002ca4 <HAL_GPIO_Init+0x2f0>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	4013      	ands	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d003      	beq.n	8002c38 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c38:	4a1a      	ldr	r2, [pc, #104]	; (8002ca4 <HAL_GPIO_Init+0x2f0>)
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c3e:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <HAL_GPIO_Init+0x2f0>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	43db      	mvns	r3, r3
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c62:	4a10      	ldr	r2, [pc, #64]	; (8002ca4 <HAL_GPIO_Init+0x2f0>)
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	fa22 f303 	lsr.w	r3, r2, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f47f aea3 	bne.w	80029c4 <HAL_GPIO_Init+0x10>
  }
}
 8002c7e:	bf00      	nop
 8002c80:	bf00      	nop
 8002c82:	371c      	adds	r7, #28
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	40010000 	.word	0x40010000
 8002c94:	48000400 	.word	0x48000400
 8002c98:	48000800 	.word	0x48000800
 8002c9c:	48000c00 	.word	0x48000c00
 8002ca0:	48001000 	.word	0x48001000
 8002ca4:	40010400 	.word	0x40010400

08002ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	807b      	strh	r3, [r7, #2]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cb8:	787b      	ldrb	r3, [r7, #1]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cbe:	887a      	ldrh	r2, [r7, #2]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002cc4:	e002      	b.n	8002ccc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cc6:	887a      	ldrh	r2, [r7, #2]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ce2:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ce4:	695a      	ldr	r2, [r3, #20]
 8002ce6:	88fb      	ldrh	r3, [r7, #6]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d006      	beq.n	8002cfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cee:	4a05      	ldr	r2, [pc, #20]	; (8002d04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cf0:	88fb      	ldrh	r3, [r7, #6]
 8002cf2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cf4:	88fb      	ldrh	r3, [r7, #6]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f007 f9c0 	bl	800a07c <HAL_GPIO_EXTI_Callback>
  }
}
 8002cfc:	bf00      	nop
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40010400 	.word	0x40010400

08002d08 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d0c:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a04      	ldr	r2, [pc, #16]	; (8002d24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d16:	6013      	str	r3, [r2, #0]
}
 8002d18:	bf00      	nop
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	40007000 	.word	0x40007000

08002d28 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002d2c:	4b04      	ldr	r3, [pc, #16]	; (8002d40 <HAL_PWREx_GetVoltageRange+0x18>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40007000 	.word	0x40007000

08002d44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d52:	d130      	bne.n	8002db6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d54:	4b23      	ldr	r3, [pc, #140]	; (8002de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d60:	d038      	beq.n	8002dd4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d62:	4b20      	ldr	r3, [pc, #128]	; (8002de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d6a:	4a1e      	ldr	r2, [pc, #120]	; (8002de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d70:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d72:	4b1d      	ldr	r3, [pc, #116]	; (8002de8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2232      	movs	r2, #50	; 0x32
 8002d78:	fb02 f303 	mul.w	r3, r2, r3
 8002d7c:	4a1b      	ldr	r2, [pc, #108]	; (8002dec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d82:	0c9b      	lsrs	r3, r3, #18
 8002d84:	3301      	adds	r3, #1
 8002d86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d88:	e002      	b.n	8002d90 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d90:	4b14      	ldr	r3, [pc, #80]	; (8002de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d9c:	d102      	bne.n	8002da4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1f2      	bne.n	8002d8a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002da4:	4b0f      	ldr	r3, [pc, #60]	; (8002de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002db0:	d110      	bne.n	8002dd4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e00f      	b.n	8002dd6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002db6:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dc2:	d007      	beq.n	8002dd4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002dc4:	4b07      	ldr	r3, [pc, #28]	; (8002de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002dcc:	4a05      	ldr	r2, [pc, #20]	; (8002de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dd2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	40007000 	.word	0x40007000
 8002de8:	20000000 	.word	0x20000000
 8002dec:	431bde83 	.word	0x431bde83

08002df0 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	4603      	mov	r3, r0
 8002df8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 8002dfa:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f023 0307 	bic.w	r3, r3, #7
 8002e02:	4a0f      	ldr	r2, [pc, #60]	; (8002e40 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002e04:	f043 0302 	orr.w	r3, r3, #2
 8002e08:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002e0a:	4b0e      	ldr	r3, [pc, #56]	; (8002e44 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	4a0d      	ldr	r2, [pc, #52]	; (8002e44 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8002e10:	f043 0304 	orr.w	r3, r3, #4
 8002e14:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002e16:	79fb      	ldrb	r3, [r7, #7]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d101      	bne.n	8002e20 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002e1c:	bf30      	wfi
 8002e1e:	e002      	b.n	8002e26 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002e20:	bf40      	sev
    __WFE();
 8002e22:	bf20      	wfe
    __WFE();
 8002e24:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002e26:	4b07      	ldr	r3, [pc, #28]	; (8002e44 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	4a06      	ldr	r2, [pc, #24]	; (8002e44 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8002e2c:	f023 0304 	bic.w	r3, r3, #4
 8002e30:	6113      	str	r3, [r2, #16]
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	40007000 	.word	0x40007000
 8002e44:	e000ed00 	.word	0xe000ed00

08002e48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b088      	sub	sp, #32
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d102      	bne.n	8002e5c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	f000 bc02 	b.w	8003660 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e5c:	4b96      	ldr	r3, [pc, #600]	; (80030b8 <HAL_RCC_OscConfig+0x270>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 030c 	and.w	r3, r3, #12
 8002e64:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e66:	4b94      	ldr	r3, [pc, #592]	; (80030b8 <HAL_RCC_OscConfig+0x270>)
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0310 	and.w	r3, r3, #16
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 80e4 	beq.w	8003046 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d007      	beq.n	8002e94 <HAL_RCC_OscConfig+0x4c>
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	2b0c      	cmp	r3, #12
 8002e88:	f040 808b 	bne.w	8002fa2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	f040 8087 	bne.w	8002fa2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e94:	4b88      	ldr	r3, [pc, #544]	; (80030b8 <HAL_RCC_OscConfig+0x270>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d005      	beq.n	8002eac <HAL_RCC_OscConfig+0x64>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e3d9      	b.n	8003660 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a1a      	ldr	r2, [r3, #32]
 8002eb0:	4b81      	ldr	r3, [pc, #516]	; (80030b8 <HAL_RCC_OscConfig+0x270>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d004      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x7e>
 8002ebc:	4b7e      	ldr	r3, [pc, #504]	; (80030b8 <HAL_RCC_OscConfig+0x270>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ec4:	e005      	b.n	8002ed2 <HAL_RCC_OscConfig+0x8a>
 8002ec6:	4b7c      	ldr	r3, [pc, #496]	; (80030b8 <HAL_RCC_OscConfig+0x270>)
 8002ec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ecc:	091b      	lsrs	r3, r3, #4
 8002ece:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d223      	bcs.n	8002f1e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 fdbe 	bl	8003a5c <RCC_SetFlashLatencyFromMSIRange>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e3ba      	b.n	8003660 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002eea:	4b73      	ldr	r3, [pc, #460]	; (80030b8 <HAL_RCC_OscConfig+0x270>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a72      	ldr	r2, [pc, #456]	; (80030b8 <HAL_RCC_OscConfig+0x270>)
 8002ef0:	f043 0308 	orr.w	r3, r3, #8
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	4b70      	ldr	r3, [pc, #448]	; (80030b8 <HAL_RCC_OscConfig+0x270>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	496d      	ldr	r1, [pc, #436]	; (80030b8 <HAL_RCC_OscConfig+0x270>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f08:	4b6b      	ldr	r3, [pc, #428]	; (80030b8 <HAL_RCC_OscConfig+0x270>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	021b      	lsls	r3, r3, #8
 8002f16:	4968      	ldr	r1, [pc, #416]	; (80030b8 <HAL_RCC_OscConfig+0x270>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	604b      	str	r3, [r1, #4]
 8002f1c:	e025      	b.n	8002f6a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f1e:	4b66      	ldr	r3, [pc, #408]	; (80030b8 <HAL_RCC_OscConfig+0x270>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a65      	ldr	r2, [pc, #404]	; (80030b8 <HAL_RCC_OscConfig+0x270>)
 8002f24:	f043 0308 	orr.w	r3, r3, #8
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	4b63      	ldr	r3, [pc, #396]	; (80030b8 <HAL_RCC_OscConfig+0x270>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	4960      	ldr	r1, [pc, #384]	; (80030b8 <HAL_RCC_OscConfig+0x270>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f3c:	4b5e      	ldr	r3, [pc, #376]	; (80030b8 <HAL_RCC_OscConfig+0x270>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	021b      	lsls	r3, r3, #8
 8002f4a:	495b      	ldr	r1, [pc, #364]	; (80030b8 <HAL_RCC_OscConfig+0x270>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d109      	bne.n	8002f6a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 fd7e 	bl	8003a5c <RCC_SetFlashLatencyFromMSIRange>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e37a      	b.n	8003660 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f6a:	f000 fc81 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	4b51      	ldr	r3, [pc, #324]	; (80030b8 <HAL_RCC_OscConfig+0x270>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	091b      	lsrs	r3, r3, #4
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	4950      	ldr	r1, [pc, #320]	; (80030bc <HAL_RCC_OscConfig+0x274>)
 8002f7c:	5ccb      	ldrb	r3, [r1, r3]
 8002f7e:	f003 031f 	and.w	r3, r3, #31
 8002f82:	fa22 f303 	lsr.w	r3, r2, r3
 8002f86:	4a4e      	ldr	r2, [pc, #312]	; (80030c0 <HAL_RCC_OscConfig+0x278>)
 8002f88:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f8a:	4b4e      	ldr	r3, [pc, #312]	; (80030c4 <HAL_RCC_OscConfig+0x27c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7fd ff82 	bl	8000e98 <HAL_InitTick>
 8002f94:	4603      	mov	r3, r0
 8002f96:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d052      	beq.n	8003044 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
 8002fa0:	e35e      	b.n	8003660 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d032      	beq.n	8003010 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002faa:	4b43      	ldr	r3, [pc, #268]	; (80030b8 <HAL_RCC_OscConfig+0x270>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a42      	ldr	r2, [pc, #264]	; (80030b8 <HAL_RCC_OscConfig+0x270>)
 8002fb0:	f043 0301 	orr.w	r3, r3, #1
 8002fb4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fb6:	f7fe f8e9 	bl	800118c <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fbe:	f7fe f8e5 	bl	800118c <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e347      	b.n	8003660 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fd0:	4b39      	ldr	r3, [pc, #228]	; (80030b8 <HAL_RCC_OscConfig+0x270>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0f0      	beq.n	8002fbe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fdc:	4b36      	ldr	r3, [pc, #216]	; (80030b8 <HAL_RCC_OscConfig+0x270>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a35      	ldr	r2, [pc, #212]	; (80030b8 <HAL_RCC_OscConfig+0x270>)
 8002fe2:	f043 0308 	orr.w	r3, r3, #8
 8002fe6:	6013      	str	r3, [r2, #0]
 8002fe8:	4b33      	ldr	r3, [pc, #204]	; (80030b8 <HAL_RCC_OscConfig+0x270>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	4930      	ldr	r1, [pc, #192]	; (80030b8 <HAL_RCC_OscConfig+0x270>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ffa:	4b2f      	ldr	r3, [pc, #188]	; (80030b8 <HAL_RCC_OscConfig+0x270>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	021b      	lsls	r3, r3, #8
 8003008:	492b      	ldr	r1, [pc, #172]	; (80030b8 <HAL_RCC_OscConfig+0x270>)
 800300a:	4313      	orrs	r3, r2
 800300c:	604b      	str	r3, [r1, #4]
 800300e:	e01a      	b.n	8003046 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003010:	4b29      	ldr	r3, [pc, #164]	; (80030b8 <HAL_RCC_OscConfig+0x270>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a28      	ldr	r2, [pc, #160]	; (80030b8 <HAL_RCC_OscConfig+0x270>)
 8003016:	f023 0301 	bic.w	r3, r3, #1
 800301a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800301c:	f7fe f8b6 	bl	800118c <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003024:	f7fe f8b2 	bl	800118c <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e314      	b.n	8003660 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003036:	4b20      	ldr	r3, [pc, #128]	; (80030b8 <HAL_RCC_OscConfig+0x270>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f0      	bne.n	8003024 <HAL_RCC_OscConfig+0x1dc>
 8003042:	e000      	b.n	8003046 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003044:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d073      	beq.n	800313a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	2b08      	cmp	r3, #8
 8003056:	d005      	beq.n	8003064 <HAL_RCC_OscConfig+0x21c>
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	2b0c      	cmp	r3, #12
 800305c:	d10e      	bne.n	800307c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2b03      	cmp	r3, #3
 8003062:	d10b      	bne.n	800307c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003064:	4b14      	ldr	r3, [pc, #80]	; (80030b8 <HAL_RCC_OscConfig+0x270>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d063      	beq.n	8003138 <HAL_RCC_OscConfig+0x2f0>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d15f      	bne.n	8003138 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e2f1      	b.n	8003660 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003084:	d106      	bne.n	8003094 <HAL_RCC_OscConfig+0x24c>
 8003086:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <HAL_RCC_OscConfig+0x270>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a0b      	ldr	r2, [pc, #44]	; (80030b8 <HAL_RCC_OscConfig+0x270>)
 800308c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003090:	6013      	str	r3, [r2, #0]
 8003092:	e025      	b.n	80030e0 <HAL_RCC_OscConfig+0x298>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800309c:	d114      	bne.n	80030c8 <HAL_RCC_OscConfig+0x280>
 800309e:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <HAL_RCC_OscConfig+0x270>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a05      	ldr	r2, [pc, #20]	; (80030b8 <HAL_RCC_OscConfig+0x270>)
 80030a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030a8:	6013      	str	r3, [r2, #0]
 80030aa:	4b03      	ldr	r3, [pc, #12]	; (80030b8 <HAL_RCC_OscConfig+0x270>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a02      	ldr	r2, [pc, #8]	; (80030b8 <HAL_RCC_OscConfig+0x270>)
 80030b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	e013      	b.n	80030e0 <HAL_RCC_OscConfig+0x298>
 80030b8:	40021000 	.word	0x40021000
 80030bc:	0800d7f8 	.word	0x0800d7f8
 80030c0:	20000000 	.word	0x20000000
 80030c4:	20000004 	.word	0x20000004
 80030c8:	4ba0      	ldr	r3, [pc, #640]	; (800334c <HAL_RCC_OscConfig+0x504>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a9f      	ldr	r2, [pc, #636]	; (800334c <HAL_RCC_OscConfig+0x504>)
 80030ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030d2:	6013      	str	r3, [r2, #0]
 80030d4:	4b9d      	ldr	r3, [pc, #628]	; (800334c <HAL_RCC_OscConfig+0x504>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a9c      	ldr	r2, [pc, #624]	; (800334c <HAL_RCC_OscConfig+0x504>)
 80030da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d013      	beq.n	8003110 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e8:	f7fe f850 	bl	800118c <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f0:	f7fe f84c 	bl	800118c <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b64      	cmp	r3, #100	; 0x64
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e2ae      	b.n	8003660 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003102:	4b92      	ldr	r3, [pc, #584]	; (800334c <HAL_RCC_OscConfig+0x504>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0f0      	beq.n	80030f0 <HAL_RCC_OscConfig+0x2a8>
 800310e:	e014      	b.n	800313a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003110:	f7fe f83c 	bl	800118c <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003118:	f7fe f838 	bl	800118c <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b64      	cmp	r3, #100	; 0x64
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e29a      	b.n	8003660 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800312a:	4b88      	ldr	r3, [pc, #544]	; (800334c <HAL_RCC_OscConfig+0x504>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1f0      	bne.n	8003118 <HAL_RCC_OscConfig+0x2d0>
 8003136:	e000      	b.n	800313a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d060      	beq.n	8003208 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	2b04      	cmp	r3, #4
 800314a:	d005      	beq.n	8003158 <HAL_RCC_OscConfig+0x310>
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	2b0c      	cmp	r3, #12
 8003150:	d119      	bne.n	8003186 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	2b02      	cmp	r3, #2
 8003156:	d116      	bne.n	8003186 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003158:	4b7c      	ldr	r3, [pc, #496]	; (800334c <HAL_RCC_OscConfig+0x504>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003160:	2b00      	cmp	r3, #0
 8003162:	d005      	beq.n	8003170 <HAL_RCC_OscConfig+0x328>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e277      	b.n	8003660 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003170:	4b76      	ldr	r3, [pc, #472]	; (800334c <HAL_RCC_OscConfig+0x504>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	061b      	lsls	r3, r3, #24
 800317e:	4973      	ldr	r1, [pc, #460]	; (800334c <HAL_RCC_OscConfig+0x504>)
 8003180:	4313      	orrs	r3, r2
 8003182:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003184:	e040      	b.n	8003208 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d023      	beq.n	80031d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800318e:	4b6f      	ldr	r3, [pc, #444]	; (800334c <HAL_RCC_OscConfig+0x504>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a6e      	ldr	r2, [pc, #440]	; (800334c <HAL_RCC_OscConfig+0x504>)
 8003194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319a:	f7fd fff7 	bl	800118c <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031a2:	f7fd fff3 	bl	800118c <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e255      	b.n	8003660 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031b4:	4b65      	ldr	r3, [pc, #404]	; (800334c <HAL_RCC_OscConfig+0x504>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0f0      	beq.n	80031a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c0:	4b62      	ldr	r3, [pc, #392]	; (800334c <HAL_RCC_OscConfig+0x504>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	061b      	lsls	r3, r3, #24
 80031ce:	495f      	ldr	r1, [pc, #380]	; (800334c <HAL_RCC_OscConfig+0x504>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	604b      	str	r3, [r1, #4]
 80031d4:	e018      	b.n	8003208 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031d6:	4b5d      	ldr	r3, [pc, #372]	; (800334c <HAL_RCC_OscConfig+0x504>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a5c      	ldr	r2, [pc, #368]	; (800334c <HAL_RCC_OscConfig+0x504>)
 80031dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e2:	f7fd ffd3 	bl	800118c <HAL_GetTick>
 80031e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031e8:	e008      	b.n	80031fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ea:	f7fd ffcf 	bl	800118c <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e231      	b.n	8003660 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031fc:	4b53      	ldr	r3, [pc, #332]	; (800334c <HAL_RCC_OscConfig+0x504>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1f0      	bne.n	80031ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0308 	and.w	r3, r3, #8
 8003210:	2b00      	cmp	r3, #0
 8003212:	d03c      	beq.n	800328e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d01c      	beq.n	8003256 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800321c:	4b4b      	ldr	r3, [pc, #300]	; (800334c <HAL_RCC_OscConfig+0x504>)
 800321e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003222:	4a4a      	ldr	r2, [pc, #296]	; (800334c <HAL_RCC_OscConfig+0x504>)
 8003224:	f043 0301 	orr.w	r3, r3, #1
 8003228:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322c:	f7fd ffae 	bl	800118c <HAL_GetTick>
 8003230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003232:	e008      	b.n	8003246 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003234:	f7fd ffaa 	bl	800118c <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e20c      	b.n	8003660 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003246:	4b41      	ldr	r3, [pc, #260]	; (800334c <HAL_RCC_OscConfig+0x504>)
 8003248:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0ef      	beq.n	8003234 <HAL_RCC_OscConfig+0x3ec>
 8003254:	e01b      	b.n	800328e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003256:	4b3d      	ldr	r3, [pc, #244]	; (800334c <HAL_RCC_OscConfig+0x504>)
 8003258:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800325c:	4a3b      	ldr	r2, [pc, #236]	; (800334c <HAL_RCC_OscConfig+0x504>)
 800325e:	f023 0301 	bic.w	r3, r3, #1
 8003262:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003266:	f7fd ff91 	bl	800118c <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800326c:	e008      	b.n	8003280 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800326e:	f7fd ff8d 	bl	800118c <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e1ef      	b.n	8003660 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003280:	4b32      	ldr	r3, [pc, #200]	; (800334c <HAL_RCC_OscConfig+0x504>)
 8003282:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1ef      	bne.n	800326e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0304 	and.w	r3, r3, #4
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 80a6 	beq.w	80033e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800329c:	2300      	movs	r3, #0
 800329e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80032a0:	4b2a      	ldr	r3, [pc, #168]	; (800334c <HAL_RCC_OscConfig+0x504>)
 80032a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10d      	bne.n	80032c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ac:	4b27      	ldr	r3, [pc, #156]	; (800334c <HAL_RCC_OscConfig+0x504>)
 80032ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b0:	4a26      	ldr	r2, [pc, #152]	; (800334c <HAL_RCC_OscConfig+0x504>)
 80032b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032b6:	6593      	str	r3, [r2, #88]	; 0x58
 80032b8:	4b24      	ldr	r3, [pc, #144]	; (800334c <HAL_RCC_OscConfig+0x504>)
 80032ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c0:	60bb      	str	r3, [r7, #8]
 80032c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032c4:	2301      	movs	r3, #1
 80032c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032c8:	4b21      	ldr	r3, [pc, #132]	; (8003350 <HAL_RCC_OscConfig+0x508>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d118      	bne.n	8003306 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032d4:	4b1e      	ldr	r3, [pc, #120]	; (8003350 <HAL_RCC_OscConfig+0x508>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a1d      	ldr	r2, [pc, #116]	; (8003350 <HAL_RCC_OscConfig+0x508>)
 80032da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032e0:	f7fd ff54 	bl	800118c <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032e8:	f7fd ff50 	bl	800118c <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e1b2      	b.n	8003660 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032fa:	4b15      	ldr	r3, [pc, #84]	; (8003350 <HAL_RCC_OscConfig+0x508>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0f0      	beq.n	80032e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d108      	bne.n	8003320 <HAL_RCC_OscConfig+0x4d8>
 800330e:	4b0f      	ldr	r3, [pc, #60]	; (800334c <HAL_RCC_OscConfig+0x504>)
 8003310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003314:	4a0d      	ldr	r2, [pc, #52]	; (800334c <HAL_RCC_OscConfig+0x504>)
 8003316:	f043 0301 	orr.w	r3, r3, #1
 800331a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800331e:	e029      	b.n	8003374 <HAL_RCC_OscConfig+0x52c>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	2b05      	cmp	r3, #5
 8003326:	d115      	bne.n	8003354 <HAL_RCC_OscConfig+0x50c>
 8003328:	4b08      	ldr	r3, [pc, #32]	; (800334c <HAL_RCC_OscConfig+0x504>)
 800332a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332e:	4a07      	ldr	r2, [pc, #28]	; (800334c <HAL_RCC_OscConfig+0x504>)
 8003330:	f043 0304 	orr.w	r3, r3, #4
 8003334:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003338:	4b04      	ldr	r3, [pc, #16]	; (800334c <HAL_RCC_OscConfig+0x504>)
 800333a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800333e:	4a03      	ldr	r2, [pc, #12]	; (800334c <HAL_RCC_OscConfig+0x504>)
 8003340:	f043 0301 	orr.w	r3, r3, #1
 8003344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003348:	e014      	b.n	8003374 <HAL_RCC_OscConfig+0x52c>
 800334a:	bf00      	nop
 800334c:	40021000 	.word	0x40021000
 8003350:	40007000 	.word	0x40007000
 8003354:	4b9a      	ldr	r3, [pc, #616]	; (80035c0 <HAL_RCC_OscConfig+0x778>)
 8003356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335a:	4a99      	ldr	r2, [pc, #612]	; (80035c0 <HAL_RCC_OscConfig+0x778>)
 800335c:	f023 0301 	bic.w	r3, r3, #1
 8003360:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003364:	4b96      	ldr	r3, [pc, #600]	; (80035c0 <HAL_RCC_OscConfig+0x778>)
 8003366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336a:	4a95      	ldr	r2, [pc, #596]	; (80035c0 <HAL_RCC_OscConfig+0x778>)
 800336c:	f023 0304 	bic.w	r3, r3, #4
 8003370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d016      	beq.n	80033aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337c:	f7fd ff06 	bl	800118c <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003382:	e00a      	b.n	800339a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003384:	f7fd ff02 	bl	800118c <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003392:	4293      	cmp	r3, r2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e162      	b.n	8003660 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800339a:	4b89      	ldr	r3, [pc, #548]	; (80035c0 <HAL_RCC_OscConfig+0x778>)
 800339c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0ed      	beq.n	8003384 <HAL_RCC_OscConfig+0x53c>
 80033a8:	e015      	b.n	80033d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033aa:	f7fd feef 	bl	800118c <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033b0:	e00a      	b.n	80033c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b2:	f7fd feeb 	bl	800118c <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e14b      	b.n	8003660 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033c8:	4b7d      	ldr	r3, [pc, #500]	; (80035c0 <HAL_RCC_OscConfig+0x778>)
 80033ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1ed      	bne.n	80033b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033d6:	7ffb      	ldrb	r3, [r7, #31]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d105      	bne.n	80033e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033dc:	4b78      	ldr	r3, [pc, #480]	; (80035c0 <HAL_RCC_OscConfig+0x778>)
 80033de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e0:	4a77      	ldr	r2, [pc, #476]	; (80035c0 <HAL_RCC_OscConfig+0x778>)
 80033e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033e6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0320 	and.w	r3, r3, #32
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d03c      	beq.n	800346e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d01c      	beq.n	8003436 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033fc:	4b70      	ldr	r3, [pc, #448]	; (80035c0 <HAL_RCC_OscConfig+0x778>)
 80033fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003402:	4a6f      	ldr	r2, [pc, #444]	; (80035c0 <HAL_RCC_OscConfig+0x778>)
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340c:	f7fd febe 	bl	800118c <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003414:	f7fd feba 	bl	800118c <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e11c      	b.n	8003660 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003426:	4b66      	ldr	r3, [pc, #408]	; (80035c0 <HAL_RCC_OscConfig+0x778>)
 8003428:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0ef      	beq.n	8003414 <HAL_RCC_OscConfig+0x5cc>
 8003434:	e01b      	b.n	800346e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003436:	4b62      	ldr	r3, [pc, #392]	; (80035c0 <HAL_RCC_OscConfig+0x778>)
 8003438:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800343c:	4a60      	ldr	r2, [pc, #384]	; (80035c0 <HAL_RCC_OscConfig+0x778>)
 800343e:	f023 0301 	bic.w	r3, r3, #1
 8003442:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003446:	f7fd fea1 	bl	800118c <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800344c:	e008      	b.n	8003460 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800344e:	f7fd fe9d 	bl	800118c <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d901      	bls.n	8003460 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e0ff      	b.n	8003660 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003460:	4b57      	ldr	r3, [pc, #348]	; (80035c0 <HAL_RCC_OscConfig+0x778>)
 8003462:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1ef      	bne.n	800344e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 80f3 	beq.w	800365e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347c:	2b02      	cmp	r3, #2
 800347e:	f040 80c9 	bne.w	8003614 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003482:	4b4f      	ldr	r3, [pc, #316]	; (80035c0 <HAL_RCC_OscConfig+0x778>)
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f003 0203 	and.w	r2, r3, #3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003492:	429a      	cmp	r2, r3
 8003494:	d12c      	bne.n	80034f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a0:	3b01      	subs	r3, #1
 80034a2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d123      	bne.n	80034f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d11b      	bne.n	80034f0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d113      	bne.n	80034f0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d2:	085b      	lsrs	r3, r3, #1
 80034d4:	3b01      	subs	r3, #1
 80034d6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034d8:	429a      	cmp	r2, r3
 80034da:	d109      	bne.n	80034f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	085b      	lsrs	r3, r3, #1
 80034e8:	3b01      	subs	r3, #1
 80034ea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d06b      	beq.n	80035c8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	2b0c      	cmp	r3, #12
 80034f4:	d062      	beq.n	80035bc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80034f6:	4b32      	ldr	r3, [pc, #200]	; (80035c0 <HAL_RCC_OscConfig+0x778>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e0ac      	b.n	8003660 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003506:	4b2e      	ldr	r3, [pc, #184]	; (80035c0 <HAL_RCC_OscConfig+0x778>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a2d      	ldr	r2, [pc, #180]	; (80035c0 <HAL_RCC_OscConfig+0x778>)
 800350c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003510:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003512:	f7fd fe3b 	bl	800118c <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800351a:	f7fd fe37 	bl	800118c <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e099      	b.n	8003660 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800352c:	4b24      	ldr	r3, [pc, #144]	; (80035c0 <HAL_RCC_OscConfig+0x778>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1f0      	bne.n	800351a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003538:	4b21      	ldr	r3, [pc, #132]	; (80035c0 <HAL_RCC_OscConfig+0x778>)
 800353a:	68da      	ldr	r2, [r3, #12]
 800353c:	4b21      	ldr	r3, [pc, #132]	; (80035c4 <HAL_RCC_OscConfig+0x77c>)
 800353e:	4013      	ands	r3, r2
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003548:	3a01      	subs	r2, #1
 800354a:	0112      	lsls	r2, r2, #4
 800354c:	4311      	orrs	r1, r2
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003552:	0212      	lsls	r2, r2, #8
 8003554:	4311      	orrs	r1, r2
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800355a:	0852      	lsrs	r2, r2, #1
 800355c:	3a01      	subs	r2, #1
 800355e:	0552      	lsls	r2, r2, #21
 8003560:	4311      	orrs	r1, r2
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003566:	0852      	lsrs	r2, r2, #1
 8003568:	3a01      	subs	r2, #1
 800356a:	0652      	lsls	r2, r2, #25
 800356c:	4311      	orrs	r1, r2
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003572:	06d2      	lsls	r2, r2, #27
 8003574:	430a      	orrs	r2, r1
 8003576:	4912      	ldr	r1, [pc, #72]	; (80035c0 <HAL_RCC_OscConfig+0x778>)
 8003578:	4313      	orrs	r3, r2
 800357a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800357c:	4b10      	ldr	r3, [pc, #64]	; (80035c0 <HAL_RCC_OscConfig+0x778>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a0f      	ldr	r2, [pc, #60]	; (80035c0 <HAL_RCC_OscConfig+0x778>)
 8003582:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003586:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003588:	4b0d      	ldr	r3, [pc, #52]	; (80035c0 <HAL_RCC_OscConfig+0x778>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	4a0c      	ldr	r2, [pc, #48]	; (80035c0 <HAL_RCC_OscConfig+0x778>)
 800358e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003592:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003594:	f7fd fdfa 	bl	800118c <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800359c:	f7fd fdf6 	bl	800118c <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e058      	b.n	8003660 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ae:	4b04      	ldr	r3, [pc, #16]	; (80035c0 <HAL_RCC_OscConfig+0x778>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d0f0      	beq.n	800359c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035ba:	e050      	b.n	800365e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e04f      	b.n	8003660 <HAL_RCC_OscConfig+0x818>
 80035c0:	40021000 	.word	0x40021000
 80035c4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035c8:	4b27      	ldr	r3, [pc, #156]	; (8003668 <HAL_RCC_OscConfig+0x820>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d144      	bne.n	800365e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80035d4:	4b24      	ldr	r3, [pc, #144]	; (8003668 <HAL_RCC_OscConfig+0x820>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a23      	ldr	r2, [pc, #140]	; (8003668 <HAL_RCC_OscConfig+0x820>)
 80035da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035e0:	4b21      	ldr	r3, [pc, #132]	; (8003668 <HAL_RCC_OscConfig+0x820>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	4a20      	ldr	r2, [pc, #128]	; (8003668 <HAL_RCC_OscConfig+0x820>)
 80035e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035ec:	f7fd fdce 	bl	800118c <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f4:	f7fd fdca 	bl	800118c <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e02c      	b.n	8003660 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003606:	4b18      	ldr	r3, [pc, #96]	; (8003668 <HAL_RCC_OscConfig+0x820>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0f0      	beq.n	80035f4 <HAL_RCC_OscConfig+0x7ac>
 8003612:	e024      	b.n	800365e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	2b0c      	cmp	r3, #12
 8003618:	d01f      	beq.n	800365a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800361a:	4b13      	ldr	r3, [pc, #76]	; (8003668 <HAL_RCC_OscConfig+0x820>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a12      	ldr	r2, [pc, #72]	; (8003668 <HAL_RCC_OscConfig+0x820>)
 8003620:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003624:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003626:	f7fd fdb1 	bl	800118c <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800362e:	f7fd fdad 	bl	800118c <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e00f      	b.n	8003660 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003640:	4b09      	ldr	r3, [pc, #36]	; (8003668 <HAL_RCC_OscConfig+0x820>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1f0      	bne.n	800362e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800364c:	4b06      	ldr	r3, [pc, #24]	; (8003668 <HAL_RCC_OscConfig+0x820>)
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	4905      	ldr	r1, [pc, #20]	; (8003668 <HAL_RCC_OscConfig+0x820>)
 8003652:	4b06      	ldr	r3, [pc, #24]	; (800366c <HAL_RCC_OscConfig+0x824>)
 8003654:	4013      	ands	r3, r2
 8003656:	60cb      	str	r3, [r1, #12]
 8003658:	e001      	b.n	800365e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e000      	b.n	8003660 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3720      	adds	r7, #32
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40021000 	.word	0x40021000
 800366c:	feeefffc 	.word	0xfeeefffc

08003670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e0e7      	b.n	8003854 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003684:	4b75      	ldr	r3, [pc, #468]	; (800385c <HAL_RCC_ClockConfig+0x1ec>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	429a      	cmp	r2, r3
 8003690:	d910      	bls.n	80036b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003692:	4b72      	ldr	r3, [pc, #456]	; (800385c <HAL_RCC_ClockConfig+0x1ec>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f023 0207 	bic.w	r2, r3, #7
 800369a:	4970      	ldr	r1, [pc, #448]	; (800385c <HAL_RCC_ClockConfig+0x1ec>)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	4313      	orrs	r3, r2
 80036a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a2:	4b6e      	ldr	r3, [pc, #440]	; (800385c <HAL_RCC_ClockConfig+0x1ec>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0307 	and.w	r3, r3, #7
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d001      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e0cf      	b.n	8003854 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d010      	beq.n	80036e2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	4b66      	ldr	r3, [pc, #408]	; (8003860 <HAL_RCC_ClockConfig+0x1f0>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d908      	bls.n	80036e2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036d0:	4b63      	ldr	r3, [pc, #396]	; (8003860 <HAL_RCC_ClockConfig+0x1f0>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	4960      	ldr	r1, [pc, #384]	; (8003860 <HAL_RCC_ClockConfig+0x1f0>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d04c      	beq.n	8003788 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	d107      	bne.n	8003706 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036f6:	4b5a      	ldr	r3, [pc, #360]	; (8003860 <HAL_RCC_ClockConfig+0x1f0>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d121      	bne.n	8003746 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e0a6      	b.n	8003854 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b02      	cmp	r3, #2
 800370c:	d107      	bne.n	800371e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800370e:	4b54      	ldr	r3, [pc, #336]	; (8003860 <HAL_RCC_ClockConfig+0x1f0>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d115      	bne.n	8003746 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e09a      	b.n	8003854 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d107      	bne.n	8003736 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003726:	4b4e      	ldr	r3, [pc, #312]	; (8003860 <HAL_RCC_ClockConfig+0x1f0>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d109      	bne.n	8003746 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e08e      	b.n	8003854 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003736:	4b4a      	ldr	r3, [pc, #296]	; (8003860 <HAL_RCC_ClockConfig+0x1f0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e086      	b.n	8003854 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003746:	4b46      	ldr	r3, [pc, #280]	; (8003860 <HAL_RCC_ClockConfig+0x1f0>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f023 0203 	bic.w	r2, r3, #3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	4943      	ldr	r1, [pc, #268]	; (8003860 <HAL_RCC_ClockConfig+0x1f0>)
 8003754:	4313      	orrs	r3, r2
 8003756:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003758:	f7fd fd18 	bl	800118c <HAL_GetTick>
 800375c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800375e:	e00a      	b.n	8003776 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003760:	f7fd fd14 	bl	800118c <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	f241 3288 	movw	r2, #5000	; 0x1388
 800376e:	4293      	cmp	r3, r2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e06e      	b.n	8003854 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003776:	4b3a      	ldr	r3, [pc, #232]	; (8003860 <HAL_RCC_ClockConfig+0x1f0>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 020c 	and.w	r2, r3, #12
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	429a      	cmp	r2, r3
 8003786:	d1eb      	bne.n	8003760 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d010      	beq.n	80037b6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	4b31      	ldr	r3, [pc, #196]	; (8003860 <HAL_RCC_ClockConfig+0x1f0>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d208      	bcs.n	80037b6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037a4:	4b2e      	ldr	r3, [pc, #184]	; (8003860 <HAL_RCC_ClockConfig+0x1f0>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	492b      	ldr	r1, [pc, #172]	; (8003860 <HAL_RCC_ClockConfig+0x1f0>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037b6:	4b29      	ldr	r3, [pc, #164]	; (800385c <HAL_RCC_ClockConfig+0x1ec>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0307 	and.w	r3, r3, #7
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d210      	bcs.n	80037e6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037c4:	4b25      	ldr	r3, [pc, #148]	; (800385c <HAL_RCC_ClockConfig+0x1ec>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f023 0207 	bic.w	r2, r3, #7
 80037cc:	4923      	ldr	r1, [pc, #140]	; (800385c <HAL_RCC_ClockConfig+0x1ec>)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d4:	4b21      	ldr	r3, [pc, #132]	; (800385c <HAL_RCC_ClockConfig+0x1ec>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0307 	and.w	r3, r3, #7
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d001      	beq.n	80037e6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e036      	b.n	8003854 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0304 	and.w	r3, r3, #4
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d008      	beq.n	8003804 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037f2:	4b1b      	ldr	r3, [pc, #108]	; (8003860 <HAL_RCC_ClockConfig+0x1f0>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	4918      	ldr	r1, [pc, #96]	; (8003860 <HAL_RCC_ClockConfig+0x1f0>)
 8003800:	4313      	orrs	r3, r2
 8003802:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0308 	and.w	r3, r3, #8
 800380c:	2b00      	cmp	r3, #0
 800380e:	d009      	beq.n	8003824 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003810:	4b13      	ldr	r3, [pc, #76]	; (8003860 <HAL_RCC_ClockConfig+0x1f0>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	4910      	ldr	r1, [pc, #64]	; (8003860 <HAL_RCC_ClockConfig+0x1f0>)
 8003820:	4313      	orrs	r3, r2
 8003822:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003824:	f000 f824 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 8003828:	4602      	mov	r2, r0
 800382a:	4b0d      	ldr	r3, [pc, #52]	; (8003860 <HAL_RCC_ClockConfig+0x1f0>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	091b      	lsrs	r3, r3, #4
 8003830:	f003 030f 	and.w	r3, r3, #15
 8003834:	490b      	ldr	r1, [pc, #44]	; (8003864 <HAL_RCC_ClockConfig+0x1f4>)
 8003836:	5ccb      	ldrb	r3, [r1, r3]
 8003838:	f003 031f 	and.w	r3, r3, #31
 800383c:	fa22 f303 	lsr.w	r3, r2, r3
 8003840:	4a09      	ldr	r2, [pc, #36]	; (8003868 <HAL_RCC_ClockConfig+0x1f8>)
 8003842:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003844:	4b09      	ldr	r3, [pc, #36]	; (800386c <HAL_RCC_ClockConfig+0x1fc>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4618      	mov	r0, r3
 800384a:	f7fd fb25 	bl	8000e98 <HAL_InitTick>
 800384e:	4603      	mov	r3, r0
 8003850:	72fb      	strb	r3, [r7, #11]

  return status;
 8003852:	7afb      	ldrb	r3, [r7, #11]
}
 8003854:	4618      	mov	r0, r3
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40022000 	.word	0x40022000
 8003860:	40021000 	.word	0x40021000
 8003864:	0800d7f8 	.word	0x0800d7f8
 8003868:	20000000 	.word	0x20000000
 800386c:	20000004 	.word	0x20000004

08003870 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003870:	b480      	push	{r7}
 8003872:	b089      	sub	sp, #36	; 0x24
 8003874:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003876:	2300      	movs	r3, #0
 8003878:	61fb      	str	r3, [r7, #28]
 800387a:	2300      	movs	r3, #0
 800387c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800387e:	4b3e      	ldr	r3, [pc, #248]	; (8003978 <HAL_RCC_GetSysClockFreq+0x108>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f003 030c 	and.w	r3, r3, #12
 8003886:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003888:	4b3b      	ldr	r3, [pc, #236]	; (8003978 <HAL_RCC_GetSysClockFreq+0x108>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f003 0303 	and.w	r3, r3, #3
 8003890:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d005      	beq.n	80038a4 <HAL_RCC_GetSysClockFreq+0x34>
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	2b0c      	cmp	r3, #12
 800389c:	d121      	bne.n	80038e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d11e      	bne.n	80038e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80038a4:	4b34      	ldr	r3, [pc, #208]	; (8003978 <HAL_RCC_GetSysClockFreq+0x108>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0308 	and.w	r3, r3, #8
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d107      	bne.n	80038c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80038b0:	4b31      	ldr	r3, [pc, #196]	; (8003978 <HAL_RCC_GetSysClockFreq+0x108>)
 80038b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038b6:	0a1b      	lsrs	r3, r3, #8
 80038b8:	f003 030f 	and.w	r3, r3, #15
 80038bc:	61fb      	str	r3, [r7, #28]
 80038be:	e005      	b.n	80038cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80038c0:	4b2d      	ldr	r3, [pc, #180]	; (8003978 <HAL_RCC_GetSysClockFreq+0x108>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	091b      	lsrs	r3, r3, #4
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80038cc:	4a2b      	ldr	r2, [pc, #172]	; (800397c <HAL_RCC_GetSysClockFreq+0x10c>)
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10d      	bne.n	80038f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038e0:	e00a      	b.n	80038f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	2b04      	cmp	r3, #4
 80038e6:	d102      	bne.n	80038ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038e8:	4b25      	ldr	r3, [pc, #148]	; (8003980 <HAL_RCC_GetSysClockFreq+0x110>)
 80038ea:	61bb      	str	r3, [r7, #24]
 80038ec:	e004      	b.n	80038f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d101      	bne.n	80038f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038f4:	4b23      	ldr	r3, [pc, #140]	; (8003984 <HAL_RCC_GetSysClockFreq+0x114>)
 80038f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	2b0c      	cmp	r3, #12
 80038fc:	d134      	bne.n	8003968 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038fe:	4b1e      	ldr	r3, [pc, #120]	; (8003978 <HAL_RCC_GetSysClockFreq+0x108>)
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	2b02      	cmp	r3, #2
 800390c:	d003      	beq.n	8003916 <HAL_RCC_GetSysClockFreq+0xa6>
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	2b03      	cmp	r3, #3
 8003912:	d003      	beq.n	800391c <HAL_RCC_GetSysClockFreq+0xac>
 8003914:	e005      	b.n	8003922 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003916:	4b1a      	ldr	r3, [pc, #104]	; (8003980 <HAL_RCC_GetSysClockFreq+0x110>)
 8003918:	617b      	str	r3, [r7, #20]
      break;
 800391a:	e005      	b.n	8003928 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800391c:	4b19      	ldr	r3, [pc, #100]	; (8003984 <HAL_RCC_GetSysClockFreq+0x114>)
 800391e:	617b      	str	r3, [r7, #20]
      break;
 8003920:	e002      	b.n	8003928 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	617b      	str	r3, [r7, #20]
      break;
 8003926:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003928:	4b13      	ldr	r3, [pc, #76]	; (8003978 <HAL_RCC_GetSysClockFreq+0x108>)
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	091b      	lsrs	r3, r3, #4
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	3301      	adds	r3, #1
 8003934:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003936:	4b10      	ldr	r3, [pc, #64]	; (8003978 <HAL_RCC_GetSysClockFreq+0x108>)
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	0a1b      	lsrs	r3, r3, #8
 800393c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	fb03 f202 	mul.w	r2, r3, r2
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	fbb2 f3f3 	udiv	r3, r2, r3
 800394c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800394e:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <HAL_RCC_GetSysClockFreq+0x108>)
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	0e5b      	lsrs	r3, r3, #25
 8003954:	f003 0303 	and.w	r3, r3, #3
 8003958:	3301      	adds	r3, #1
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	fbb2 f3f3 	udiv	r3, r2, r3
 8003966:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003968:	69bb      	ldr	r3, [r7, #24]
}
 800396a:	4618      	mov	r0, r3
 800396c:	3724      	adds	r7, #36	; 0x24
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	40021000 	.word	0x40021000
 800397c:	0800d810 	.word	0x0800d810
 8003980:	00f42400 	.word	0x00f42400
 8003984:	007a1200 	.word	0x007a1200

08003988 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800398c:	4b03      	ldr	r3, [pc, #12]	; (800399c <HAL_RCC_GetHCLKFreq+0x14>)
 800398e:	681b      	ldr	r3, [r3, #0]
}
 8003990:	4618      	mov	r0, r3
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	20000000 	.word	0x20000000

080039a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80039a4:	f7ff fff0 	bl	8003988 <HAL_RCC_GetHCLKFreq>
 80039a8:	4602      	mov	r2, r0
 80039aa:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	0a1b      	lsrs	r3, r3, #8
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	4904      	ldr	r1, [pc, #16]	; (80039c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80039b6:	5ccb      	ldrb	r3, [r1, r3]
 80039b8:	f003 031f 	and.w	r3, r3, #31
 80039bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40021000 	.word	0x40021000
 80039c8:	0800d808 	.word	0x0800d808

080039cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80039d0:	f7ff ffda 	bl	8003988 <HAL_RCC_GetHCLKFreq>
 80039d4:	4602      	mov	r2, r0
 80039d6:	4b06      	ldr	r3, [pc, #24]	; (80039f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	0adb      	lsrs	r3, r3, #11
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	4904      	ldr	r1, [pc, #16]	; (80039f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80039e2:	5ccb      	ldrb	r3, [r1, r3]
 80039e4:	f003 031f 	and.w	r3, r3, #31
 80039e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	40021000 	.word	0x40021000
 80039f4:	0800d808 	.word	0x0800d808

080039f8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	220f      	movs	r2, #15
 8003a06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003a08:	4b12      	ldr	r3, [pc, #72]	; (8003a54 <HAL_RCC_GetClockConfig+0x5c>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f003 0203 	and.w	r2, r3, #3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003a14:	4b0f      	ldr	r3, [pc, #60]	; (8003a54 <HAL_RCC_GetClockConfig+0x5c>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003a20:	4b0c      	ldr	r3, [pc, #48]	; (8003a54 <HAL_RCC_GetClockConfig+0x5c>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003a2c:	4b09      	ldr	r3, [pc, #36]	; (8003a54 <HAL_RCC_GetClockConfig+0x5c>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	08db      	lsrs	r3, r3, #3
 8003a32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003a3a:	4b07      	ldr	r3, [pc, #28]	; (8003a58 <HAL_RCC_GetClockConfig+0x60>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0207 	and.w	r2, r3, #7
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	601a      	str	r2, [r3, #0]
}
 8003a46:	bf00      	nop
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	40021000 	.word	0x40021000
 8003a58:	40022000 	.word	0x40022000

08003a5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a64:	2300      	movs	r3, #0
 8003a66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a68:	4b2a      	ldr	r3, [pc, #168]	; (8003b14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a74:	f7ff f958 	bl	8002d28 <HAL_PWREx_GetVoltageRange>
 8003a78:	6178      	str	r0, [r7, #20]
 8003a7a:	e014      	b.n	8003aa6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a7c:	4b25      	ldr	r3, [pc, #148]	; (8003b14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a80:	4a24      	ldr	r2, [pc, #144]	; (8003b14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a86:	6593      	str	r3, [r2, #88]	; 0x58
 8003a88:	4b22      	ldr	r3, [pc, #136]	; (8003b14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a94:	f7ff f948 	bl	8002d28 <HAL_PWREx_GetVoltageRange>
 8003a98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a9a:	4b1e      	ldr	r3, [pc, #120]	; (8003b14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9e:	4a1d      	ldr	r2, [pc, #116]	; (8003b14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aa4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aac:	d10b      	bne.n	8003ac6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2b80      	cmp	r3, #128	; 0x80
 8003ab2:	d919      	bls.n	8003ae8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2ba0      	cmp	r3, #160	; 0xa0
 8003ab8:	d902      	bls.n	8003ac0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003aba:	2302      	movs	r3, #2
 8003abc:	613b      	str	r3, [r7, #16]
 8003abe:	e013      	b.n	8003ae8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	613b      	str	r3, [r7, #16]
 8003ac4:	e010      	b.n	8003ae8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b80      	cmp	r3, #128	; 0x80
 8003aca:	d902      	bls.n	8003ad2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003acc:	2303      	movs	r3, #3
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	e00a      	b.n	8003ae8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b80      	cmp	r3, #128	; 0x80
 8003ad6:	d102      	bne.n	8003ade <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ad8:	2302      	movs	r3, #2
 8003ada:	613b      	str	r3, [r7, #16]
 8003adc:	e004      	b.n	8003ae8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b70      	cmp	r3, #112	; 0x70
 8003ae2:	d101      	bne.n	8003ae8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ae8:	4b0b      	ldr	r3, [pc, #44]	; (8003b18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f023 0207 	bic.w	r2, r3, #7
 8003af0:	4909      	ldr	r1, [pc, #36]	; (8003b18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003af8:	4b07      	ldr	r3, [pc, #28]	; (8003b18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0307 	and.w	r3, r3, #7
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d001      	beq.n	8003b0a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e000      	b.n	8003b0c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3718      	adds	r7, #24
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40021000 	.word	0x40021000
 8003b18:	40022000 	.word	0x40022000

08003b1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b24:	2300      	movs	r3, #0
 8003b26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b28:	2300      	movs	r3, #0
 8003b2a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d031      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b3c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b40:	d01a      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003b42:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b46:	d814      	bhi.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d009      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b50:	d10f      	bne.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003b52:	4b5d      	ldr	r3, [pc, #372]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	4a5c      	ldr	r2, [pc, #368]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b5c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b5e:	e00c      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	3304      	adds	r3, #4
 8003b64:	2100      	movs	r1, #0
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 fa54 	bl	8004014 <RCCEx_PLLSAI1_Config>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b70:	e003      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	74fb      	strb	r3, [r7, #19]
      break;
 8003b76:	e000      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003b78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b7a:	7cfb      	ldrb	r3, [r7, #19]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10b      	bne.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b80:	4b51      	ldr	r3, [pc, #324]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b8e:	494e      	ldr	r1, [pc, #312]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b96:	e001      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b98:	7cfb      	ldrb	r3, [r7, #19]
 8003b9a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 809e 	beq.w	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003baa:	2300      	movs	r3, #0
 8003bac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bae:	4b46      	ldr	r3, [pc, #280]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00d      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bc4:	4b40      	ldr	r3, [pc, #256]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc8:	4a3f      	ldr	r2, [pc, #252]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bce:	6593      	str	r3, [r2, #88]	; 0x58
 8003bd0:	4b3d      	ldr	r3, [pc, #244]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd8:	60bb      	str	r3, [r7, #8]
 8003bda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003be0:	4b3a      	ldr	r3, [pc, #232]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a39      	ldr	r2, [pc, #228]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bec:	f7fd face 	bl	800118c <HAL_GetTick>
 8003bf0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bf2:	e009      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bf4:	f7fd faca 	bl	800118c <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d902      	bls.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	74fb      	strb	r3, [r7, #19]
        break;
 8003c06:	e005      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c08:	4b30      	ldr	r3, [pc, #192]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0ef      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003c14:	7cfb      	ldrb	r3, [r7, #19]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d15a      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c1a:	4b2b      	ldr	r3, [pc, #172]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c24:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d01e      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d019      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c36:	4b24      	ldr	r3, [pc, #144]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c40:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c42:	4b21      	ldr	r3, [pc, #132]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c48:	4a1f      	ldr	r2, [pc, #124]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c52:	4b1d      	ldr	r3, [pc, #116]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c58:	4a1b      	ldr	r2, [pc, #108]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c62:	4a19      	ldr	r2, [pc, #100]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d016      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c74:	f7fd fa8a 	bl	800118c <HAL_GetTick>
 8003c78:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c7a:	e00b      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c7c:	f7fd fa86 	bl	800118c <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d902      	bls.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	74fb      	strb	r3, [r7, #19]
            break;
 8003c92:	e006      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c94:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0ec      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003ca2:	7cfb      	ldrb	r3, [r7, #19]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10b      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ca8:	4b07      	ldr	r3, [pc, #28]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cb6:	4904      	ldr	r1, [pc, #16]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003cbe:	e009      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cc0:	7cfb      	ldrb	r3, [r7, #19]
 8003cc2:	74bb      	strb	r3, [r7, #18]
 8003cc4:	e006      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003cc6:	bf00      	nop
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd0:	7cfb      	ldrb	r3, [r7, #19]
 8003cd2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cd4:	7c7b      	ldrb	r3, [r7, #17]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d105      	bne.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cda:	4b9e      	ldr	r3, [pc, #632]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cde:	4a9d      	ldr	r2, [pc, #628]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ce4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00a      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cf2:	4b98      	ldr	r3, [pc, #608]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf8:	f023 0203 	bic.w	r2, r3, #3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	4994      	ldr	r1, [pc, #592]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00a      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d14:	4b8f      	ldr	r3, [pc, #572]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1a:	f023 020c 	bic.w	r2, r3, #12
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	498c      	ldr	r1, [pc, #560]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00a      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d36:	4b87      	ldr	r3, [pc, #540]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d44:	4983      	ldr	r1, [pc, #524]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0308 	and.w	r3, r3, #8
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00a      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d58:	4b7e      	ldr	r3, [pc, #504]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d66:	497b      	ldr	r1, [pc, #492]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0320 	and.w	r3, r3, #32
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00a      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d7a:	4b76      	ldr	r3, [pc, #472]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d80:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d88:	4972      	ldr	r1, [pc, #456]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00a      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d9c:	4b6d      	ldr	r3, [pc, #436]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003daa:	496a      	ldr	r1, [pc, #424]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00a      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003dbe:	4b65      	ldr	r3, [pc, #404]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dcc:	4961      	ldr	r1, [pc, #388]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00a      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003de0:	4b5c      	ldr	r3, [pc, #368]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dee:	4959      	ldr	r1, [pc, #356]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00a      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e02:	4b54      	ldr	r3, [pc, #336]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e10:	4950      	ldr	r1, [pc, #320]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00a      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e24:	4b4b      	ldr	r3, [pc, #300]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e32:	4948      	ldr	r1, [pc, #288]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00a      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e46:	4b43      	ldr	r3, [pc, #268]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e4c:	f023 0203 	bic.w	r2, r3, #3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e54:	493f      	ldr	r1, [pc, #252]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d028      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e68:	4b3a      	ldr	r3, [pc, #232]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e76:	4937      	ldr	r1, [pc, #220]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e86:	d106      	bne.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e88:	4b32      	ldr	r3, [pc, #200]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	4a31      	ldr	r2, [pc, #196]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e92:	60d3      	str	r3, [r2, #12]
 8003e94:	e011      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e9e:	d10c      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 f8b4 	bl	8004014 <RCCEx_PLLSAI1_Config>
 8003eac:	4603      	mov	r3, r0
 8003eae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003eb0:	7cfb      	ldrb	r3, [r7, #19]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8003eb6:	7cfb      	ldrb	r3, [r7, #19]
 8003eb8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d028      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ec6:	4b23      	ldr	r3, [pc, #140]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ecc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed4:	491f      	ldr	r1, [pc, #124]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ee4:	d106      	bne.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ee6:	4b1b      	ldr	r3, [pc, #108]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	4a1a      	ldr	r2, [pc, #104]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003eec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ef0:	60d3      	str	r3, [r2, #12]
 8003ef2:	e011      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003efc:	d10c      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	3304      	adds	r3, #4
 8003f02:	2101      	movs	r1, #1
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 f885 	bl	8004014 <RCCEx_PLLSAI1_Config>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f0e:	7cfb      	ldrb	r3, [r7, #19]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d001      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8003f14:	7cfb      	ldrb	r3, [r7, #19]
 8003f16:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d02b      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f24:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f32:	4908      	ldr	r1, [pc, #32]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f42:	d109      	bne.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f44:	4b03      	ldr	r3, [pc, #12]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	4a02      	ldr	r2, [pc, #8]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f4e:	60d3      	str	r3, [r2, #12]
 8003f50:	e014      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x460>
 8003f52:	bf00      	nop
 8003f54:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f60:	d10c      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	3304      	adds	r3, #4
 8003f66:	2101      	movs	r1, #1
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f000 f853 	bl	8004014 <RCCEx_PLLSAI1_Config>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f72:	7cfb      	ldrb	r3, [r7, #19]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8003f78:	7cfb      	ldrb	r3, [r7, #19]
 8003f7a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d01c      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f88:	4b19      	ldr	r3, [pc, #100]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f96:	4916      	ldr	r1, [pc, #88]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fa6:	d10c      	bne.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3304      	adds	r3, #4
 8003fac:	2102      	movs	r1, #2
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 f830 	bl	8004014 <RCCEx_PLLSAI1_Config>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fb8:	7cfb      	ldrb	r3, [r7, #19]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8003fbe:	7cfb      	ldrb	r3, [r7, #19]
 8003fc0:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00a      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003fce:	4b08      	ldr	r3, [pc, #32]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fdc:	4904      	ldr	r1, [pc, #16]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003fe4:	7cbb      	ldrb	r3, [r7, #18]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3718      	adds	r7, #24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	40021000 	.word	0x40021000

08003ff4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003ff8:	4b05      	ldr	r3, [pc, #20]	; (8004010 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a04      	ldr	r2, [pc, #16]	; (8004010 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003ffe:	f043 0304 	orr.w	r3, r3, #4
 8004002:	6013      	str	r3, [r2, #0]
}
 8004004:	bf00      	nop
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	40021000 	.word	0x40021000

08004014 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800401e:	2300      	movs	r3, #0
 8004020:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004022:	4b74      	ldr	r3, [pc, #464]	; (80041f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d018      	beq.n	8004060 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800402e:	4b71      	ldr	r3, [pc, #452]	; (80041f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	f003 0203 	and.w	r2, r3, #3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	429a      	cmp	r2, r3
 800403c:	d10d      	bne.n	800405a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
       ||
 8004042:	2b00      	cmp	r3, #0
 8004044:	d009      	beq.n	800405a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004046:	4b6b      	ldr	r3, [pc, #428]	; (80041f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	091b      	lsrs	r3, r3, #4
 800404c:	f003 0307 	and.w	r3, r3, #7
 8004050:	1c5a      	adds	r2, r3, #1
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
       ||
 8004056:	429a      	cmp	r2, r3
 8004058:	d047      	beq.n	80040ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	73fb      	strb	r3, [r7, #15]
 800405e:	e044      	b.n	80040ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2b03      	cmp	r3, #3
 8004066:	d018      	beq.n	800409a <RCCEx_PLLSAI1_Config+0x86>
 8004068:	2b03      	cmp	r3, #3
 800406a:	d825      	bhi.n	80040b8 <RCCEx_PLLSAI1_Config+0xa4>
 800406c:	2b01      	cmp	r3, #1
 800406e:	d002      	beq.n	8004076 <RCCEx_PLLSAI1_Config+0x62>
 8004070:	2b02      	cmp	r3, #2
 8004072:	d009      	beq.n	8004088 <RCCEx_PLLSAI1_Config+0x74>
 8004074:	e020      	b.n	80040b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004076:	4b5f      	ldr	r3, [pc, #380]	; (80041f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d11d      	bne.n	80040be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004086:	e01a      	b.n	80040be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004088:	4b5a      	ldr	r3, [pc, #360]	; (80041f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004090:	2b00      	cmp	r3, #0
 8004092:	d116      	bne.n	80040c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004098:	e013      	b.n	80040c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800409a:	4b56      	ldr	r3, [pc, #344]	; (80041f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10f      	bne.n	80040c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040a6:	4b53      	ldr	r3, [pc, #332]	; (80041f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d109      	bne.n	80040c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040b6:	e006      	b.n	80040c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	73fb      	strb	r3, [r7, #15]
      break;
 80040bc:	e004      	b.n	80040c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040be:	bf00      	nop
 80040c0:	e002      	b.n	80040c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040c2:	bf00      	nop
 80040c4:	e000      	b.n	80040c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80040c8:	7bfb      	ldrb	r3, [r7, #15]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10d      	bne.n	80040ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80040ce:	4b49      	ldr	r3, [pc, #292]	; (80041f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6819      	ldr	r1, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	3b01      	subs	r3, #1
 80040e0:	011b      	lsls	r3, r3, #4
 80040e2:	430b      	orrs	r3, r1
 80040e4:	4943      	ldr	r1, [pc, #268]	; (80041f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80040ea:	7bfb      	ldrb	r3, [r7, #15]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d17c      	bne.n	80041ea <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80040f0:	4b40      	ldr	r3, [pc, #256]	; (80041f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a3f      	ldr	r2, [pc, #252]	; (80041f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040fc:	f7fd f846 	bl	800118c <HAL_GetTick>
 8004100:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004102:	e009      	b.n	8004118 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004104:	f7fd f842 	bl	800118c <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d902      	bls.n	8004118 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	73fb      	strb	r3, [r7, #15]
        break;
 8004116:	e005      	b.n	8004124 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004118:	4b36      	ldr	r3, [pc, #216]	; (80041f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1ef      	bne.n	8004104 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004124:	7bfb      	ldrb	r3, [r7, #15]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d15f      	bne.n	80041ea <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d110      	bne.n	8004152 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004130:	4b30      	ldr	r3, [pc, #192]	; (80041f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004138:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	6892      	ldr	r2, [r2, #8]
 8004140:	0211      	lsls	r1, r2, #8
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	68d2      	ldr	r2, [r2, #12]
 8004146:	06d2      	lsls	r2, r2, #27
 8004148:	430a      	orrs	r2, r1
 800414a:	492a      	ldr	r1, [pc, #168]	; (80041f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800414c:	4313      	orrs	r3, r2
 800414e:	610b      	str	r3, [r1, #16]
 8004150:	e027      	b.n	80041a2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d112      	bne.n	800417e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004158:	4b26      	ldr	r3, [pc, #152]	; (80041f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004160:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6892      	ldr	r2, [r2, #8]
 8004168:	0211      	lsls	r1, r2, #8
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	6912      	ldr	r2, [r2, #16]
 800416e:	0852      	lsrs	r2, r2, #1
 8004170:	3a01      	subs	r2, #1
 8004172:	0552      	lsls	r2, r2, #21
 8004174:	430a      	orrs	r2, r1
 8004176:	491f      	ldr	r1, [pc, #124]	; (80041f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004178:	4313      	orrs	r3, r2
 800417a:	610b      	str	r3, [r1, #16]
 800417c:	e011      	b.n	80041a2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800417e:	4b1d      	ldr	r3, [pc, #116]	; (80041f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004186:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6892      	ldr	r2, [r2, #8]
 800418e:	0211      	lsls	r1, r2, #8
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	6952      	ldr	r2, [r2, #20]
 8004194:	0852      	lsrs	r2, r2, #1
 8004196:	3a01      	subs	r2, #1
 8004198:	0652      	lsls	r2, r2, #25
 800419a:	430a      	orrs	r2, r1
 800419c:	4915      	ldr	r1, [pc, #84]	; (80041f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80041a2:	4b14      	ldr	r3, [pc, #80]	; (80041f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a13      	ldr	r2, [pc, #76]	; (80041f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041ac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ae:	f7fc ffed 	bl	800118c <HAL_GetTick>
 80041b2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041b4:	e009      	b.n	80041ca <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041b6:	f7fc ffe9 	bl	800118c <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d902      	bls.n	80041ca <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	73fb      	strb	r3, [r7, #15]
          break;
 80041c8:	e005      	b.n	80041d6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041ca:	4b0a      	ldr	r3, [pc, #40]	; (80041f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0ef      	beq.n	80041b6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80041d6:	7bfb      	ldrb	r3, [r7, #15]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d106      	bne.n	80041ea <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80041dc:	4b05      	ldr	r3, [pc, #20]	; (80041f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041de:	691a      	ldr	r2, [r3, #16]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	4903      	ldr	r1, [pc, #12]	; (80041f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80041ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40021000 	.word	0x40021000

080041f8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d06c      	beq.n	80042e4 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d106      	bne.n	8004224 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7fc fd44 	bl	8000cac <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2202      	movs	r2, #2
 8004228:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	22ca      	movs	r2, #202	; 0xca
 8004232:	625a      	str	r2, [r3, #36]	; 0x24
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2253      	movs	r2, #83	; 0x53
 800423a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 fa49 	bl	80046d4 <RTC_EnterInitMode>
 8004242:	4603      	mov	r3, r0
 8004244:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004246:	7bfb      	ldrb	r3, [r7, #15]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d14b      	bne.n	80042e4 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	6812      	ldr	r2, [r2, #0]
 8004256:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800425a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800425e:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6899      	ldr	r1, [r3, #8]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	431a      	orrs	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	68d2      	ldr	r2, [r2, #12]
 8004286:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6919      	ldr	r1, [r3, #16]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	041a      	lsls	r2, r3, #16
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	430a      	orrs	r2, r1
 800429a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 fa4d 	bl	800473c <RTC_ExitInitMode>
 80042a2:	4603      	mov	r3, r0
 80042a4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80042a6:	7bfb      	ldrb	r3, [r7, #15]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d11b      	bne.n	80042e4 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 0203 	bic.w	r2, r2, #3
 80042ba:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	69da      	ldr	r2, [r3, #28]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	431a      	orrs	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	22ff      	movs	r2, #255	; 0xff
 80042da:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80042e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80042ee:	b590      	push	{r4, r7, lr}
 80042f0:	b087      	sub	sp, #28
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	60f8      	str	r0, [r7, #12]
 80042f6:	60b9      	str	r1, [r7, #8]
 80042f8:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d101      	bne.n	8004308 <HAL_RTC_SetTime+0x1a>
 8004304:	2302      	movs	r3, #2
 8004306:	e08b      	b.n	8004420 <HAL_RTC_SetTime+0x132>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	22ca      	movs	r2, #202	; 0xca
 800431e:	625a      	str	r2, [r3, #36]	; 0x24
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2253      	movs	r2, #83	; 0x53
 8004326:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f000 f9d3 	bl	80046d4 <RTC_EnterInitMode>
 800432e:	4603      	mov	r3, r0
 8004330:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004332:	7cfb      	ldrb	r3, [r7, #19]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d163      	bne.n	8004400 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d126      	bne.n	800438c <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004348:	2b00      	cmp	r3, #0
 800434a:	d102      	bne.n	8004352 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	2200      	movs	r2, #0
 8004350:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	4618      	mov	r0, r3
 8004358:	f000 fa2e 	bl	80047b8 <RTC_ByteToBcd2>
 800435c:	4603      	mov	r3, r0
 800435e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	785b      	ldrb	r3, [r3, #1]
 8004364:	4618      	mov	r0, r3
 8004366:	f000 fa27 	bl	80047b8 <RTC_ByteToBcd2>
 800436a:	4603      	mov	r3, r0
 800436c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800436e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	789b      	ldrb	r3, [r3, #2]
 8004374:	4618      	mov	r0, r3
 8004376:	f000 fa1f 	bl	80047b8 <RTC_ByteToBcd2>
 800437a:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800437c:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	78db      	ldrb	r3, [r3, #3]
 8004384:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004386:	4313      	orrs	r3, r2
 8004388:	617b      	str	r3, [r7, #20]
 800438a:	e018      	b.n	80043be <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004396:	2b00      	cmp	r3, #0
 8004398:	d102      	bne.n	80043a0 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	2200      	movs	r2, #0
 800439e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	785b      	ldrb	r3, [r3, #1]
 80043aa:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80043ac:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80043b2:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	78db      	ldrb	r3, [r3, #3]
 80043b8:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80043ba:	4313      	orrs	r3, r2
 80043bc:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80043c8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80043cc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80043dc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	6899      	ldr	r1, [r3, #8]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	68da      	ldr	r2, [r3, #12]
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	431a      	orrs	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 f9a0 	bl	800473c <RTC_ExitInitMode>
 80043fc:	4603      	mov	r3, r0
 80043fe:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	22ff      	movs	r2, #255	; 0xff
 8004406:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004408:	7cfb      	ldrb	r3, [r7, #19]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d103      	bne.n	8004416 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800441e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004420:	4618      	mov	r0, r3
 8004422:	371c      	adds	r7, #28
 8004424:	46bd      	mov	sp, r7
 8004426:	bd90      	pop	{r4, r7, pc}

08004428 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004456:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800445a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	0c1b      	lsrs	r3, r3, #16
 8004460:	b2db      	uxtb	r3, r3
 8004462:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004466:	b2da      	uxtb	r2, r3
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	0a1b      	lsrs	r3, r3, #8
 8004470:	b2db      	uxtb	r3, r3
 8004472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004476:	b2da      	uxtb	r2, r3
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	b2db      	uxtb	r3, r3
 8004480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004484:	b2da      	uxtb	r2, r3
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	0d9b      	lsrs	r3, r3, #22
 800448e:	b2db      	uxtb	r3, r3
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	b2da      	uxtb	r2, r3
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d11a      	bne.n	80044d6 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 f9a7 	bl	80047f8 <RTC_Bcd2ToByte>
 80044aa:	4603      	mov	r3, r0
 80044ac:	461a      	mov	r2, r3
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	785b      	ldrb	r3, [r3, #1]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 f99e 	bl	80047f8 <RTC_Bcd2ToByte>
 80044bc:	4603      	mov	r3, r0
 80044be:	461a      	mov	r2, r3
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	789b      	ldrb	r3, [r3, #2]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 f995 	bl	80047f8 <RTC_Bcd2ToByte>
 80044ce:	4603      	mov	r3, r0
 80044d0:	461a      	mov	r2, r3
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3718      	adds	r7, #24
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80044e0:	b590      	push	{r4, r7, lr}
 80044e2:	b087      	sub	sp, #28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d101      	bne.n	80044fa <HAL_RTC_SetDate+0x1a>
 80044f6:	2302      	movs	r3, #2
 80044f8:	e075      	b.n	80045e6 <HAL_RTC_SetDate+0x106>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2202      	movs	r2, #2
 8004506:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10e      	bne.n	800452e <HAL_RTC_SetDate+0x4e>
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	785b      	ldrb	r3, [r3, #1]
 8004514:	f003 0310 	and.w	r3, r3, #16
 8004518:	2b00      	cmp	r3, #0
 800451a:	d008      	beq.n	800452e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	785b      	ldrb	r3, [r3, #1]
 8004520:	f023 0310 	bic.w	r3, r3, #16
 8004524:	b2db      	uxtb	r3, r3
 8004526:	330a      	adds	r3, #10
 8004528:	b2da      	uxtb	r2, r3
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d11c      	bne.n	800456e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	78db      	ldrb	r3, [r3, #3]
 8004538:	4618      	mov	r0, r3
 800453a:	f000 f93d 	bl	80047b8 <RTC_ByteToBcd2>
 800453e:	4603      	mov	r3, r0
 8004540:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	785b      	ldrb	r3, [r3, #1]
 8004546:	4618      	mov	r0, r3
 8004548:	f000 f936 	bl	80047b8 <RTC_ByteToBcd2>
 800454c:	4603      	mov	r3, r0
 800454e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004550:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	789b      	ldrb	r3, [r3, #2]
 8004556:	4618      	mov	r0, r3
 8004558:	f000 f92e 	bl	80047b8 <RTC_ByteToBcd2>
 800455c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800455e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004568:	4313      	orrs	r3, r2
 800456a:	617b      	str	r3, [r7, #20]
 800456c:	e00e      	b.n	800458c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	78db      	ldrb	r3, [r3, #3]
 8004572:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	785b      	ldrb	r3, [r3, #1]
 8004578:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800457a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004580:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004588:	4313      	orrs	r3, r2
 800458a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	22ca      	movs	r2, #202	; 0xca
 8004592:	625a      	str	r2, [r3, #36]	; 0x24
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2253      	movs	r2, #83	; 0x53
 800459a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 f899 	bl	80046d4 <RTC_EnterInitMode>
 80045a2:	4603      	mov	r3, r0
 80045a4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80045a6:	7cfb      	ldrb	r3, [r7, #19]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10c      	bne.n	80045c6 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80045b6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80045ba:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 f8bd 	bl	800473c <RTC_ExitInitMode>
 80045c2:	4603      	mov	r3, r0
 80045c4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	22ff      	movs	r2, #255	; 0xff
 80045cc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80045ce:	7cfb      	ldrb	r3, [r7, #19]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d103      	bne.n	80045dc <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80045e4:	7cfb      	ldrb	r3, [r7, #19]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	371c      	adds	r7, #28
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd90      	pop	{r4, r7, pc}

080045ee <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b086      	sub	sp, #24
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	60f8      	str	r0, [r7, #12]
 80045f6:	60b9      	str	r1, [r7, #8]
 80045f8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004604:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004608:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	0c1b      	lsrs	r3, r3, #16
 800460e:	b2da      	uxtb	r2, r3
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	0a1b      	lsrs	r3, r3, #8
 8004618:	b2db      	uxtb	r3, r3
 800461a:	f003 031f 	and.w	r3, r3, #31
 800461e:	b2da      	uxtb	r2, r3
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	b2db      	uxtb	r3, r3
 8004628:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800462c:	b2da      	uxtb	r2, r3
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	0b5b      	lsrs	r3, r3, #13
 8004636:	b2db      	uxtb	r3, r3
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	b2da      	uxtb	r2, r3
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d11a      	bne.n	800467e <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	78db      	ldrb	r3, [r3, #3]
 800464c:	4618      	mov	r0, r3
 800464e:	f000 f8d3 	bl	80047f8 <RTC_Bcd2ToByte>
 8004652:	4603      	mov	r3, r0
 8004654:	461a      	mov	r2, r3
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	785b      	ldrb	r3, [r3, #1]
 800465e:	4618      	mov	r0, r3
 8004660:	f000 f8ca 	bl	80047f8 <RTC_Bcd2ToByte>
 8004664:	4603      	mov	r3, r0
 8004666:	461a      	mov	r2, r3
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	789b      	ldrb	r3, [r3, #2]
 8004670:	4618      	mov	r0, r3
 8004672:	f000 f8c1 	bl	80047f8 <RTC_Bcd2ToByte>
 8004676:	4603      	mov	r3, r0
 8004678:	461a      	mov	r2, r3
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68da      	ldr	r2, [r3, #12]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800469e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80046a0:	f7fc fd74 	bl	800118c <HAL_GetTick>
 80046a4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80046a6:	e009      	b.n	80046bc <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80046a8:	f7fc fd70 	bl	800118c <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046b6:	d901      	bls.n	80046bc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e007      	b.n	80046cc <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	f003 0320 	and.w	r3, r3, #32
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0ee      	beq.n	80046a8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046dc:	2300      	movs	r3, #0
 80046de:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d120      	bne.n	8004730 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f04f 32ff 	mov.w	r2, #4294967295
 80046f6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80046f8:	f7fc fd48 	bl	800118c <HAL_GetTick>
 80046fc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80046fe:	e00d      	b.n	800471c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004700:	f7fc fd44 	bl	800118c <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800470e:	d905      	bls.n	800471c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2203      	movs	r2, #3
 8004718:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004726:	2b00      	cmp	r3, #0
 8004728:	d102      	bne.n	8004730 <RTC_EnterInitMode+0x5c>
 800472a:	7bfb      	ldrb	r3, [r7, #15]
 800472c:	2b03      	cmp	r3, #3
 800472e:	d1e7      	bne.n	8004700 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004730:	7bfb      	ldrb	r3, [r7, #15]
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
	...

0800473c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004744:	2300      	movs	r3, #0
 8004746:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004748:	4b1a      	ldr	r3, [pc, #104]	; (80047b4 <RTC_ExitInitMode+0x78>)
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	4a19      	ldr	r2, [pc, #100]	; (80047b4 <RTC_ExitInitMode+0x78>)
 800474e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004752:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004754:	4b17      	ldr	r3, [pc, #92]	; (80047b4 <RTC_ExitInitMode+0x78>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 0320 	and.w	r3, r3, #32
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10c      	bne.n	800477a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f7ff ff91 	bl	8004688 <HAL_RTC_WaitForSynchro>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d01e      	beq.n	80047aa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2203      	movs	r2, #3
 8004770:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	73fb      	strb	r3, [r7, #15]
 8004778:	e017      	b.n	80047aa <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800477a:	4b0e      	ldr	r3, [pc, #56]	; (80047b4 <RTC_ExitInitMode+0x78>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	4a0d      	ldr	r2, [pc, #52]	; (80047b4 <RTC_ExitInitMode+0x78>)
 8004780:	f023 0320 	bic.w	r3, r3, #32
 8004784:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7ff ff7e 	bl	8004688 <HAL_RTC_WaitForSynchro>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d005      	beq.n	800479e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2203      	movs	r2, #3
 8004796:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800479e:	4b05      	ldr	r3, [pc, #20]	; (80047b4 <RTC_ExitInitMode+0x78>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	4a04      	ldr	r2, [pc, #16]	; (80047b4 <RTC_ExitInitMode+0x78>)
 80047a4:	f043 0320 	orr.w	r3, r3, #32
 80047a8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80047aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	40002800 	.word	0x40002800

080047b8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	4603      	mov	r3, r0
 80047c0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80047c6:	79fb      	ldrb	r3, [r7, #7]
 80047c8:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80047ca:	e005      	b.n	80047d8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	3301      	adds	r3, #1
 80047d0:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80047d2:	7afb      	ldrb	r3, [r7, #11]
 80047d4:	3b0a      	subs	r3, #10
 80047d6:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80047d8:	7afb      	ldrb	r3, [r7, #11]
 80047da:	2b09      	cmp	r3, #9
 80047dc:	d8f6      	bhi.n	80047cc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	b2da      	uxtb	r2, r3
 80047e6:	7afb      	ldrb	r3, [r7, #11]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	b2db      	uxtb	r3, r3
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	4603      	mov	r3, r0
 8004800:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8004802:	79fb      	ldrb	r3, [r7, #7]
 8004804:	091b      	lsrs	r3, r3, #4
 8004806:	b2db      	uxtb	r3, r3
 8004808:	461a      	mov	r2, r3
 800480a:	0092      	lsls	r2, r2, #2
 800480c:	4413      	add	r3, r2
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8004812:	79fb      	ldrb	r3, [r7, #7]
 8004814:	f003 030f 	and.w	r3, r3, #15
 8004818:	b2da      	uxtb	r2, r3
 800481a:	7bfb      	ldrb	r3, [r7, #15]
 800481c:	4413      	add	r3, r2
 800481e:	b2db      	uxtb	r3, r3
}
 8004820:	4618      	mov	r0, r3
 8004822:	3714      	adds	r7, #20
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d101      	bne.n	8004846 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8004842:	2302      	movs	r3, #2
 8004844:	e07f      	b.n	8004946 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2202      	movs	r2, #2
 8004852:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	22ca      	movs	r2, #202	; 0xca
 800485c:	625a      	str	r2, [r3, #36]	; 0x24
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2253      	movs	r2, #83	; 0x53
 8004864:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004874:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	b2da      	uxtb	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004886:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004892:	2b00      	cmp	r3, #0
 8004894:	d120      	bne.n	80048d8 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8004896:	f7fc fc79 	bl	800118c <HAL_GetTick>
 800489a:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 800489c:	e015      	b.n	80048ca <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800489e:	f7fc fc75 	bl	800118c <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048ac:	d90d      	bls.n	80048ca <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	22ff      	movs	r2, #255	; 0xff
 80048b4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2203      	movs	r2, #3
 80048ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e03d      	b.n	8004946 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d0e2      	beq.n	800489e <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f023 0107 	bic.w	r1, r3, #7
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80048f4:	4b16      	ldr	r3, [pc, #88]	; (8004950 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a15      	ldr	r2, [pc, #84]	; (8004950 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80048fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048fe:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8004900:	4b13      	ldr	r3, [pc, #76]	; (8004950 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	4a12      	ldr	r2, [pc, #72]	; (8004950 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8004906:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800490a:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689a      	ldr	r2, [r3, #8]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800491a:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689a      	ldr	r2, [r3, #8]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800492a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	22ff      	movs	r2, #255	; 0xff
 8004932:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	40010400 	.word	0x40010400

08004954 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d101      	bne.n	800496a <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8004966:	2302      	movs	r3, #2
 8004968:	e04d      	b.n	8004a06 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2202      	movs	r2, #2
 8004976:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	22ca      	movs	r2, #202	; 0xca
 8004980:	625a      	str	r2, [r3, #36]	; 0x24
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2253      	movs	r2, #83	; 0x53
 8004988:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004998:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	689a      	ldr	r2, [r3, #8]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80049a8:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 80049aa:	f7fc fbef 	bl	800118c <HAL_GetTick>
 80049ae:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80049b0:	e015      	b.n	80049de <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80049b2:	f7fc fbeb 	bl	800118c <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049c0:	d90d      	bls.n	80049de <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	22ff      	movs	r2, #255	; 0xff
 80049c8:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2203      	movs	r2, #3
 80049ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e013      	b.n	8004a06 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d0e2      	beq.n	80049b2 <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	22ff      	movs	r2, #255	; 0xff
 80049f2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
	...

08004a10 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8004a18:	4b0f      	ldr	r3, [pc, #60]	; (8004a58 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8004a1a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a1e:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00b      	beq.n	8004a46 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	b2da      	uxtb	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004a3e:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f80b 	bl	8004a5c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8004a4e:	bf00      	nop
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	40010400 	.word	0x40010400

08004a5c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e095      	b.n	8004bae <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d108      	bne.n	8004a9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a92:	d009      	beq.n	8004aa8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	61da      	str	r2, [r3, #28]
 8004a9a:	e005      	b.n	8004aa8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d106      	bne.n	8004ac8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7fc f92a 	bl	8000d1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ade:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ae8:	d902      	bls.n	8004af0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004aea:	2300      	movs	r3, #0
 8004aec:	60fb      	str	r3, [r7, #12]
 8004aee:	e002      	b.n	8004af6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004af0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004af4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004afe:	d007      	beq.n	8004b10 <HAL_SPI_Init+0xa0>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b08:	d002      	beq.n	8004b10 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b20:	431a      	orrs	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	431a      	orrs	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	69db      	ldr	r3, [r3, #28]
 8004b44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b52:	ea42 0103 	orr.w	r1, r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	0c1b      	lsrs	r3, r3, #16
 8004b6c:	f003 0204 	and.w	r2, r3, #4
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b74:	f003 0310 	and.w	r3, r3, #16
 8004b78:	431a      	orrs	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004b8c:	ea42 0103 	orr.w	r1, r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b088      	sub	sp, #32
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	60f8      	str	r0, [r7, #12]
 8004bbe:	60b9      	str	r1, [r7, #8]
 8004bc0:	603b      	str	r3, [r7, #0]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d101      	bne.n	8004bd8 <HAL_SPI_Transmit+0x22>
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	e158      	b.n	8004e8a <HAL_SPI_Transmit+0x2d4>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004be0:	f7fc fad4 	bl	800118c <HAL_GetTick>
 8004be4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004be6:	88fb      	ldrh	r3, [r7, #6]
 8004be8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d002      	beq.n	8004bfc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004bfa:	e13d      	b.n	8004e78 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d002      	beq.n	8004c08 <HAL_SPI_Transmit+0x52>
 8004c02:	88fb      	ldrh	r3, [r7, #6]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d102      	bne.n	8004c0e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c0c:	e134      	b.n	8004e78 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2203      	movs	r2, #3
 8004c12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	88fa      	ldrh	r2, [r7, #6]
 8004c26:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	88fa      	ldrh	r2, [r7, #6]
 8004c2c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c58:	d10f      	bne.n	8004c7a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c78:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c84:	2b40      	cmp	r3, #64	; 0x40
 8004c86:	d007      	beq.n	8004c98 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ca0:	d94b      	bls.n	8004d3a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d002      	beq.n	8004cb0 <HAL_SPI_Transmit+0xfa>
 8004caa:	8afb      	ldrh	r3, [r7, #22]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d13e      	bne.n	8004d2e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb4:	881a      	ldrh	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc0:	1c9a      	adds	r2, r3, #2
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004cd4:	e02b      	b.n	8004d2e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d112      	bne.n	8004d0a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce8:	881a      	ldrh	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf4:	1c9a      	adds	r2, r3, #2
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	3b01      	subs	r3, #1
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d08:	e011      	b.n	8004d2e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d0a:	f7fc fa3f 	bl	800118c <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	683a      	ldr	r2, [r7, #0]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d803      	bhi.n	8004d22 <HAL_SPI_Transmit+0x16c>
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d20:	d102      	bne.n	8004d28 <HAL_SPI_Transmit+0x172>
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d102      	bne.n	8004d2e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d2c:	e0a4      	b.n	8004e78 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1ce      	bne.n	8004cd6 <HAL_SPI_Transmit+0x120>
 8004d38:	e07c      	b.n	8004e34 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <HAL_SPI_Transmit+0x192>
 8004d42:	8afb      	ldrh	r3, [r7, #22]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d170      	bne.n	8004e2a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d912      	bls.n	8004d78 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d56:	881a      	ldrh	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d62:	1c9a      	adds	r2, r3, #2
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	3b02      	subs	r3, #2
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d76:	e058      	b.n	8004e2a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	330c      	adds	r3, #12
 8004d82:	7812      	ldrb	r2, [r2, #0]
 8004d84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8a:	1c5a      	adds	r2, r3, #1
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	3b01      	subs	r3, #1
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004d9e:	e044      	b.n	8004e2a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d12b      	bne.n	8004e06 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d912      	bls.n	8004dde <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbc:	881a      	ldrh	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc8:	1c9a      	adds	r2, r3, #2
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	3b02      	subs	r3, #2
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ddc:	e025      	b.n	8004e2a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	330c      	adds	r3, #12
 8004de8:	7812      	ldrb	r2, [r2, #0]
 8004dea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df0:	1c5a      	adds	r2, r3, #1
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e04:	e011      	b.n	8004e2a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e06:	f7fc f9c1 	bl	800118c <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	683a      	ldr	r2, [r7, #0]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d803      	bhi.n	8004e1e <HAL_SPI_Transmit+0x268>
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e1c:	d102      	bne.n	8004e24 <HAL_SPI_Transmit+0x26e>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d102      	bne.n	8004e2a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e28:	e026      	b.n	8004e78 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1b5      	bne.n	8004da0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	6839      	ldr	r1, [r7, #0]
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 f949 	bl	80050d0 <SPI_EndRxTxTransaction>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d002      	beq.n	8004e4a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2220      	movs	r2, #32
 8004e48:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10a      	bne.n	8004e68 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e52:	2300      	movs	r3, #0
 8004e54:	613b      	str	r3, [r7, #16]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	613b      	str	r3, [r7, #16]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	613b      	str	r3, [r7, #16]
 8004e66:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d002      	beq.n	8004e76 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	77fb      	strb	r3, [r7, #31]
 8004e74:	e000      	b.n	8004e78 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004e76:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004e88:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3720      	adds	r7, #32
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
	...

08004e94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b088      	sub	sp, #32
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	603b      	str	r3, [r7, #0]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ea4:	f7fc f972 	bl	800118c <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eac:	1a9b      	subs	r3, r3, r2
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004eb4:	f7fc f96a 	bl	800118c <HAL_GetTick>
 8004eb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004eba:	4b39      	ldr	r3, [pc, #228]	; (8004fa0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	015b      	lsls	r3, r3, #5
 8004ec0:	0d1b      	lsrs	r3, r3, #20
 8004ec2:	69fa      	ldr	r2, [r7, #28]
 8004ec4:	fb02 f303 	mul.w	r3, r2, r3
 8004ec8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004eca:	e054      	b.n	8004f76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed2:	d050      	beq.n	8004f76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ed4:	f7fc f95a 	bl	800118c <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	69fa      	ldr	r2, [r7, #28]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d902      	bls.n	8004eea <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d13d      	bne.n	8004f66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ef8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f02:	d111      	bne.n	8004f28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f0c:	d004      	beq.n	8004f18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f16:	d107      	bne.n	8004f28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f30:	d10f      	bne.n	8004f52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f40:	601a      	str	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e017      	b.n	8004f96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	3b01      	subs	r3, #1
 8004f74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	689a      	ldr	r2, [r3, #8]
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	bf0c      	ite	eq
 8004f86:	2301      	moveq	r3, #1
 8004f88:	2300      	movne	r3, #0
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	79fb      	ldrb	r3, [r7, #7]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d19b      	bne.n	8004ecc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3720      	adds	r7, #32
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	20000000 	.word	0x20000000

08004fa4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b08a      	sub	sp, #40	; 0x28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
 8004fb0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004fb6:	f7fc f8e9 	bl	800118c <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbe:	1a9b      	subs	r3, r3, r2
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004fc6:	f7fc f8e1 	bl	800118c <HAL_GetTick>
 8004fca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	330c      	adds	r3, #12
 8004fd2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004fd4:	4b3d      	ldr	r3, [pc, #244]	; (80050cc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	00da      	lsls	r2, r3, #3
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	0d1b      	lsrs	r3, r3, #20
 8004fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe6:	fb02 f303 	mul.w	r3, r2, r3
 8004fea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004fec:	e060      	b.n	80050b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004ff4:	d107      	bne.n	8005006 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d104      	bne.n	8005006 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	b2db      	uxtb	r3, r3
 8005002:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005004:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800500c:	d050      	beq.n	80050b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800500e:	f7fc f8bd 	bl	800118c <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	6a3b      	ldr	r3, [r7, #32]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800501a:	429a      	cmp	r2, r3
 800501c:	d902      	bls.n	8005024 <SPI_WaitFifoStateUntilTimeout+0x80>
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	2b00      	cmp	r3, #0
 8005022:	d13d      	bne.n	80050a0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005032:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800503c:	d111      	bne.n	8005062 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005046:	d004      	beq.n	8005052 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005050:	d107      	bne.n	8005062 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005060:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005066:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800506a:	d10f      	bne.n	800508c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800508a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e010      	b.n	80050c2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d101      	bne.n	80050aa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	3b01      	subs	r3, #1
 80050ae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	689a      	ldr	r2, [r3, #8]
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	4013      	ands	r3, r2
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d196      	bne.n	8004fee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3728      	adds	r7, #40	; 0x28
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	20000000 	.word	0x20000000

080050d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af02      	add	r7, sp, #8
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	9300      	str	r3, [sp, #0]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f7ff ff5b 	bl	8004fa4 <SPI_WaitFifoStateUntilTimeout>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d007      	beq.n	8005104 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050f8:	f043 0220 	orr.w	r2, r3, #32
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e027      	b.n	8005154 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2200      	movs	r2, #0
 800510c:	2180      	movs	r1, #128	; 0x80
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f7ff fec0 	bl	8004e94 <SPI_WaitFlagStateUntilTimeout>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d007      	beq.n	800512a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800511e:	f043 0220 	orr.w	r2, r3, #32
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e014      	b.n	8005154 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	2200      	movs	r2, #0
 8005132:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f7ff ff34 	bl	8004fa4 <SPI_WaitFifoStateUntilTimeout>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d007      	beq.n	8005152 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005146:	f043 0220 	orr.w	r2, r3, #32
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e000      	b.n	8005154 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e049      	b.n	8005202 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d106      	bne.n	8005188 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7fb fe0c 	bl	8000da0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2202      	movs	r2, #2
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3304      	adds	r3, #4
 8005198:	4619      	mov	r1, r3
 800519a:	4610      	mov	r0, r2
 800519c:	f000 f9da 	bl	8005554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
	...

0800520c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b01      	cmp	r3, #1
 800521e:	d001      	beq.n	8005224 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e040      	b.n	80052a6 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2202      	movs	r2, #2
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68da      	ldr	r2, [r3, #12]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0201 	orr.w	r2, r2, #1
 800523a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a1c      	ldr	r2, [pc, #112]	; (80052b4 <HAL_TIM_Base_Start_IT+0xa8>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d00e      	beq.n	8005264 <HAL_TIM_Base_Start_IT+0x58>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800524e:	d009      	beq.n	8005264 <HAL_TIM_Base_Start_IT+0x58>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a18      	ldr	r2, [pc, #96]	; (80052b8 <HAL_TIM_Base_Start_IT+0xac>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d004      	beq.n	8005264 <HAL_TIM_Base_Start_IT+0x58>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a17      	ldr	r2, [pc, #92]	; (80052bc <HAL_TIM_Base_Start_IT+0xb0>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d115      	bne.n	8005290 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689a      	ldr	r2, [r3, #8]
 800526a:	4b15      	ldr	r3, [pc, #84]	; (80052c0 <HAL_TIM_Base_Start_IT+0xb4>)
 800526c:	4013      	ands	r3, r2
 800526e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2b06      	cmp	r3, #6
 8005274:	d015      	beq.n	80052a2 <HAL_TIM_Base_Start_IT+0x96>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800527c:	d011      	beq.n	80052a2 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f042 0201 	orr.w	r2, r2, #1
 800528c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800528e:	e008      	b.n	80052a2 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f042 0201 	orr.w	r2, r2, #1
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	e000      	b.n	80052a4 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3714      	adds	r7, #20
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	40012c00 	.word	0x40012c00
 80052b8:	40000400 	.word	0x40000400
 80052bc:	40014000 	.word	0x40014000
 80052c0:	00010007 	.word	0x00010007

080052c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d122      	bne.n	8005320 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	f003 0302 	and.w	r3, r3, #2
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d11b      	bne.n	8005320 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f06f 0202 	mvn.w	r2, #2
 80052f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	f003 0303 	and.w	r3, r3, #3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f905 	bl	8005516 <HAL_TIM_IC_CaptureCallback>
 800530c:	e005      	b.n	800531a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f8f7 	bl	8005502 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f908 	bl	800552a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	f003 0304 	and.w	r3, r3, #4
 800532a:	2b04      	cmp	r3, #4
 800532c:	d122      	bne.n	8005374 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	f003 0304 	and.w	r3, r3, #4
 8005338:	2b04      	cmp	r3, #4
 800533a:	d11b      	bne.n	8005374 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f06f 0204 	mvn.w	r2, #4
 8005344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2202      	movs	r2, #2
 800534a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005356:	2b00      	cmp	r3, #0
 8005358:	d003      	beq.n	8005362 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f8db 	bl	8005516 <HAL_TIM_IC_CaptureCallback>
 8005360:	e005      	b.n	800536e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f8cd 	bl	8005502 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f8de 	bl	800552a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	f003 0308 	and.w	r3, r3, #8
 800537e:	2b08      	cmp	r3, #8
 8005380:	d122      	bne.n	80053c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	f003 0308 	and.w	r3, r3, #8
 800538c:	2b08      	cmp	r3, #8
 800538e:	d11b      	bne.n	80053c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f06f 0208 	mvn.w	r2, #8
 8005398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2204      	movs	r2, #4
 800539e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	f003 0303 	and.w	r3, r3, #3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d003      	beq.n	80053b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f8b1 	bl	8005516 <HAL_TIM_IC_CaptureCallback>
 80053b4:	e005      	b.n	80053c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f8a3 	bl	8005502 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f8b4 	bl	800552a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	f003 0310 	and.w	r3, r3, #16
 80053d2:	2b10      	cmp	r3, #16
 80053d4:	d122      	bne.n	800541c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	f003 0310 	and.w	r3, r3, #16
 80053e0:	2b10      	cmp	r3, #16
 80053e2:	d11b      	bne.n	800541c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f06f 0210 	mvn.w	r2, #16
 80053ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2208      	movs	r2, #8
 80053f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	69db      	ldr	r3, [r3, #28]
 80053fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d003      	beq.n	800540a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 f887 	bl	8005516 <HAL_TIM_IC_CaptureCallback>
 8005408:	e005      	b.n	8005416 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f879 	bl	8005502 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 f88a 	bl	800552a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	2b01      	cmp	r3, #1
 8005428:	d10e      	bne.n	8005448 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	f003 0301 	and.w	r3, r3, #1
 8005434:	2b01      	cmp	r3, #1
 8005436:	d107      	bne.n	8005448 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f06f 0201 	mvn.w	r2, #1
 8005440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f7fb fbbe 	bl	8000bc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005452:	2b80      	cmp	r3, #128	; 0x80
 8005454:	d10e      	bne.n	8005474 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005460:	2b80      	cmp	r3, #128	; 0x80
 8005462:	d107      	bne.n	8005474 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800546c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f8e8 	bl	8005644 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800547e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005482:	d10e      	bne.n	80054a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800548e:	2b80      	cmp	r3, #128	; 0x80
 8005490:	d107      	bne.n	80054a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800549a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 f8db 	bl	8005658 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ac:	2b40      	cmp	r3, #64	; 0x40
 80054ae:	d10e      	bne.n	80054ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ba:	2b40      	cmp	r3, #64	; 0x40
 80054bc:	d107      	bne.n	80054ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f838 	bl	800553e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	f003 0320 	and.w	r3, r3, #32
 80054d8:	2b20      	cmp	r3, #32
 80054da:	d10e      	bne.n	80054fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	f003 0320 	and.w	r3, r3, #32
 80054e6:	2b20      	cmp	r3, #32
 80054e8:	d107      	bne.n	80054fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f06f 0220 	mvn.w	r2, #32
 80054f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 f89b 	bl	8005630 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054fa:	bf00      	nop
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005502:	b480      	push	{r7}
 8005504:	b083      	sub	sp, #12
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800550a:	bf00      	nop
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005516:	b480      	push	{r7}
 8005518:	b083      	sub	sp, #12
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800551e:	bf00      	nop
 8005520:	370c      	adds	r7, #12
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr

0800552a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800552a:	b480      	push	{r7}
 800552c:	b083      	sub	sp, #12
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005532:	bf00      	nop
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800553e:	b480      	push	{r7}
 8005540:	b083      	sub	sp, #12
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005546:	bf00      	nop
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
	...

08005554 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a2e      	ldr	r2, [pc, #184]	; (8005620 <TIM_Base_SetConfig+0xcc>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d007      	beq.n	800557c <TIM_Base_SetConfig+0x28>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005572:	d003      	beq.n	800557c <TIM_Base_SetConfig+0x28>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a2b      	ldr	r2, [pc, #172]	; (8005624 <TIM_Base_SetConfig+0xd0>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d108      	bne.n	800558e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005582:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	4313      	orrs	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a23      	ldr	r2, [pc, #140]	; (8005620 <TIM_Base_SetConfig+0xcc>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d00f      	beq.n	80055b6 <TIM_Base_SetConfig+0x62>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800559c:	d00b      	beq.n	80055b6 <TIM_Base_SetConfig+0x62>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a20      	ldr	r2, [pc, #128]	; (8005624 <TIM_Base_SetConfig+0xd0>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d007      	beq.n	80055b6 <TIM_Base_SetConfig+0x62>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a1f      	ldr	r2, [pc, #124]	; (8005628 <TIM_Base_SetConfig+0xd4>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d003      	beq.n	80055b6 <TIM_Base_SetConfig+0x62>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a1e      	ldr	r2, [pc, #120]	; (800562c <TIM_Base_SetConfig+0xd8>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d108      	bne.n	80055c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	689a      	ldr	r2, [r3, #8]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a0c      	ldr	r2, [pc, #48]	; (8005620 <TIM_Base_SetConfig+0xcc>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d007      	beq.n	8005604 <TIM_Base_SetConfig+0xb0>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a0c      	ldr	r2, [pc, #48]	; (8005628 <TIM_Base_SetConfig+0xd4>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d003      	beq.n	8005604 <TIM_Base_SetConfig+0xb0>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a0b      	ldr	r2, [pc, #44]	; (800562c <TIM_Base_SetConfig+0xd8>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d103      	bne.n	800560c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	691a      	ldr	r2, [r3, #16]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	615a      	str	r2, [r3, #20]
}
 8005612:	bf00      	nop
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	40012c00 	.word	0x40012c00
 8005624:	40000400 	.word	0x40000400
 8005628:	40014000 	.word	0x40014000
 800562c:	40014400 	.word	0x40014400

08005630 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d101      	bne.n	800567e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e040      	b.n	8005700 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005682:	2b00      	cmp	r3, #0
 8005684:	d106      	bne.n	8005694 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7fb fba6 	bl	8000de0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2224      	movs	r2, #36	; 0x24
 8005698:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 0201 	bic.w	r2, r2, #1
 80056a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 f8c0 	bl	8005830 <UART_SetConfig>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d101      	bne.n	80056ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e022      	b.n	8005700 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d002      	beq.n	80056c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 fb3a 	bl	8005d3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689a      	ldr	r2, [r3, #8]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f042 0201 	orr.w	r2, r2, #1
 80056f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 fbc1 	bl	8005e80 <UART_CheckIdleState>
 80056fe:	4603      	mov	r3, r0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3708      	adds	r7, #8
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b08a      	sub	sp, #40	; 0x28
 800570c:	af02      	add	r7, sp, #8
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	603b      	str	r3, [r7, #0]
 8005714:	4613      	mov	r3, r2
 8005716:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800571c:	2b20      	cmp	r3, #32
 800571e:	f040 8082 	bne.w	8005826 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d002      	beq.n	800572e <HAL_UART_Transmit+0x26>
 8005728:	88fb      	ldrh	r3, [r7, #6]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e07a      	b.n	8005828 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005738:	2b01      	cmp	r3, #1
 800573a:	d101      	bne.n	8005740 <HAL_UART_Transmit+0x38>
 800573c:	2302      	movs	r3, #2
 800573e:	e073      	b.n	8005828 <HAL_UART_Transmit+0x120>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2221      	movs	r2, #33	; 0x21
 8005754:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005756:	f7fb fd19 	bl	800118c <HAL_GetTick>
 800575a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	88fa      	ldrh	r2, [r7, #6]
 8005760:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	88fa      	ldrh	r2, [r7, #6]
 8005768:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005774:	d108      	bne.n	8005788 <HAL_UART_Transmit+0x80>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d104      	bne.n	8005788 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800577e:	2300      	movs	r3, #0
 8005780:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	61bb      	str	r3, [r7, #24]
 8005786:	e003      	b.n	8005790 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800578c:	2300      	movs	r3, #0
 800578e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005798:	e02d      	b.n	80057f6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	2200      	movs	r2, #0
 80057a2:	2180      	movs	r1, #128	; 0x80
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f000 fbb4 	bl	8005f12 <UART_WaitOnFlagUntilTimeout>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e039      	b.n	8005828 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10b      	bne.n	80057d2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	881a      	ldrh	r2, [r3, #0]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057c6:	b292      	uxth	r2, r2
 80057c8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	3302      	adds	r3, #2
 80057ce:	61bb      	str	r3, [r7, #24]
 80057d0:	e008      	b.n	80057e4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	781a      	ldrb	r2, [r3, #0]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	b292      	uxth	r2, r2
 80057dc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	3301      	adds	r3, #1
 80057e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	3b01      	subs	r3, #1
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1cb      	bne.n	800579a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	9300      	str	r3, [sp, #0]
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	2200      	movs	r2, #0
 800580a:	2140      	movs	r1, #64	; 0x40
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f000 fb80 	bl	8005f12 <UART_WaitOnFlagUntilTimeout>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d001      	beq.n	800581c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e005      	b.n	8005828 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2220      	movs	r2, #32
 8005820:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005822:	2300      	movs	r3, #0
 8005824:	e000      	b.n	8005828 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005826:	2302      	movs	r3, #2
  }
}
 8005828:	4618      	mov	r0, r3
 800582a:	3720      	adds	r7, #32
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005834:	b08a      	sub	sp, #40	; 0x28
 8005836:	af00      	add	r7, sp, #0
 8005838:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800583a:	2300      	movs	r3, #0
 800583c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	689a      	ldr	r2, [r3, #8]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	431a      	orrs	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	431a      	orrs	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	69db      	ldr	r3, [r3, #28]
 8005854:	4313      	orrs	r3, r2
 8005856:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	4ba5      	ldr	r3, [pc, #660]	; (8005af4 <UART_SetConfig+0x2c4>)
 8005860:	4013      	ands	r3, r2
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	6812      	ldr	r2, [r2, #0]
 8005866:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005868:	430b      	orrs	r3, r1
 800586a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	68da      	ldr	r2, [r3, #12]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	430a      	orrs	r2, r1
 8005880:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a9a      	ldr	r2, [pc, #616]	; (8005af8 <UART_SetConfig+0x2c8>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d004      	beq.n	800589c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005898:	4313      	orrs	r3, r2
 800589a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ac:	430a      	orrs	r2, r1
 80058ae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a91      	ldr	r2, [pc, #580]	; (8005afc <UART_SetConfig+0x2cc>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d126      	bne.n	8005908 <UART_SetConfig+0xd8>
 80058ba:	4b91      	ldr	r3, [pc, #580]	; (8005b00 <UART_SetConfig+0x2d0>)
 80058bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c0:	f003 0303 	and.w	r3, r3, #3
 80058c4:	2b03      	cmp	r3, #3
 80058c6:	d81b      	bhi.n	8005900 <UART_SetConfig+0xd0>
 80058c8:	a201      	add	r2, pc, #4	; (adr r2, 80058d0 <UART_SetConfig+0xa0>)
 80058ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ce:	bf00      	nop
 80058d0:	080058e1 	.word	0x080058e1
 80058d4:	080058f1 	.word	0x080058f1
 80058d8:	080058e9 	.word	0x080058e9
 80058dc:	080058f9 	.word	0x080058f9
 80058e0:	2301      	movs	r3, #1
 80058e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058e6:	e0d6      	b.n	8005a96 <UART_SetConfig+0x266>
 80058e8:	2302      	movs	r3, #2
 80058ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058ee:	e0d2      	b.n	8005a96 <UART_SetConfig+0x266>
 80058f0:	2304      	movs	r3, #4
 80058f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058f6:	e0ce      	b.n	8005a96 <UART_SetConfig+0x266>
 80058f8:	2308      	movs	r3, #8
 80058fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058fe:	e0ca      	b.n	8005a96 <UART_SetConfig+0x266>
 8005900:	2310      	movs	r3, #16
 8005902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005906:	e0c6      	b.n	8005a96 <UART_SetConfig+0x266>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a7d      	ldr	r2, [pc, #500]	; (8005b04 <UART_SetConfig+0x2d4>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d138      	bne.n	8005984 <UART_SetConfig+0x154>
 8005912:	4b7b      	ldr	r3, [pc, #492]	; (8005b00 <UART_SetConfig+0x2d0>)
 8005914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005918:	f003 030c 	and.w	r3, r3, #12
 800591c:	2b0c      	cmp	r3, #12
 800591e:	d82d      	bhi.n	800597c <UART_SetConfig+0x14c>
 8005920:	a201      	add	r2, pc, #4	; (adr r2, 8005928 <UART_SetConfig+0xf8>)
 8005922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005926:	bf00      	nop
 8005928:	0800595d 	.word	0x0800595d
 800592c:	0800597d 	.word	0x0800597d
 8005930:	0800597d 	.word	0x0800597d
 8005934:	0800597d 	.word	0x0800597d
 8005938:	0800596d 	.word	0x0800596d
 800593c:	0800597d 	.word	0x0800597d
 8005940:	0800597d 	.word	0x0800597d
 8005944:	0800597d 	.word	0x0800597d
 8005948:	08005965 	.word	0x08005965
 800594c:	0800597d 	.word	0x0800597d
 8005950:	0800597d 	.word	0x0800597d
 8005954:	0800597d 	.word	0x0800597d
 8005958:	08005975 	.word	0x08005975
 800595c:	2300      	movs	r3, #0
 800595e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005962:	e098      	b.n	8005a96 <UART_SetConfig+0x266>
 8005964:	2302      	movs	r3, #2
 8005966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800596a:	e094      	b.n	8005a96 <UART_SetConfig+0x266>
 800596c:	2304      	movs	r3, #4
 800596e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005972:	e090      	b.n	8005a96 <UART_SetConfig+0x266>
 8005974:	2308      	movs	r3, #8
 8005976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800597a:	e08c      	b.n	8005a96 <UART_SetConfig+0x266>
 800597c:	2310      	movs	r3, #16
 800597e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005982:	e088      	b.n	8005a96 <UART_SetConfig+0x266>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a5f      	ldr	r2, [pc, #380]	; (8005b08 <UART_SetConfig+0x2d8>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d125      	bne.n	80059da <UART_SetConfig+0x1aa>
 800598e:	4b5c      	ldr	r3, [pc, #368]	; (8005b00 <UART_SetConfig+0x2d0>)
 8005990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005994:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005998:	2b30      	cmp	r3, #48	; 0x30
 800599a:	d016      	beq.n	80059ca <UART_SetConfig+0x19a>
 800599c:	2b30      	cmp	r3, #48	; 0x30
 800599e:	d818      	bhi.n	80059d2 <UART_SetConfig+0x1a2>
 80059a0:	2b20      	cmp	r3, #32
 80059a2:	d00a      	beq.n	80059ba <UART_SetConfig+0x18a>
 80059a4:	2b20      	cmp	r3, #32
 80059a6:	d814      	bhi.n	80059d2 <UART_SetConfig+0x1a2>
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d002      	beq.n	80059b2 <UART_SetConfig+0x182>
 80059ac:	2b10      	cmp	r3, #16
 80059ae:	d008      	beq.n	80059c2 <UART_SetConfig+0x192>
 80059b0:	e00f      	b.n	80059d2 <UART_SetConfig+0x1a2>
 80059b2:	2300      	movs	r3, #0
 80059b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059b8:	e06d      	b.n	8005a96 <UART_SetConfig+0x266>
 80059ba:	2302      	movs	r3, #2
 80059bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059c0:	e069      	b.n	8005a96 <UART_SetConfig+0x266>
 80059c2:	2304      	movs	r3, #4
 80059c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059c8:	e065      	b.n	8005a96 <UART_SetConfig+0x266>
 80059ca:	2308      	movs	r3, #8
 80059cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059d0:	e061      	b.n	8005a96 <UART_SetConfig+0x266>
 80059d2:	2310      	movs	r3, #16
 80059d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059d8:	e05d      	b.n	8005a96 <UART_SetConfig+0x266>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a4b      	ldr	r2, [pc, #300]	; (8005b0c <UART_SetConfig+0x2dc>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d125      	bne.n	8005a30 <UART_SetConfig+0x200>
 80059e4:	4b46      	ldr	r3, [pc, #280]	; (8005b00 <UART_SetConfig+0x2d0>)
 80059e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80059ee:	2bc0      	cmp	r3, #192	; 0xc0
 80059f0:	d016      	beq.n	8005a20 <UART_SetConfig+0x1f0>
 80059f2:	2bc0      	cmp	r3, #192	; 0xc0
 80059f4:	d818      	bhi.n	8005a28 <UART_SetConfig+0x1f8>
 80059f6:	2b80      	cmp	r3, #128	; 0x80
 80059f8:	d00a      	beq.n	8005a10 <UART_SetConfig+0x1e0>
 80059fa:	2b80      	cmp	r3, #128	; 0x80
 80059fc:	d814      	bhi.n	8005a28 <UART_SetConfig+0x1f8>
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d002      	beq.n	8005a08 <UART_SetConfig+0x1d8>
 8005a02:	2b40      	cmp	r3, #64	; 0x40
 8005a04:	d008      	beq.n	8005a18 <UART_SetConfig+0x1e8>
 8005a06:	e00f      	b.n	8005a28 <UART_SetConfig+0x1f8>
 8005a08:	2300      	movs	r3, #0
 8005a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a0e:	e042      	b.n	8005a96 <UART_SetConfig+0x266>
 8005a10:	2302      	movs	r3, #2
 8005a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a16:	e03e      	b.n	8005a96 <UART_SetConfig+0x266>
 8005a18:	2304      	movs	r3, #4
 8005a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a1e:	e03a      	b.n	8005a96 <UART_SetConfig+0x266>
 8005a20:	2308      	movs	r3, #8
 8005a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a26:	e036      	b.n	8005a96 <UART_SetConfig+0x266>
 8005a28:	2310      	movs	r3, #16
 8005a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a2e:	e032      	b.n	8005a96 <UART_SetConfig+0x266>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a30      	ldr	r2, [pc, #192]	; (8005af8 <UART_SetConfig+0x2c8>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d12a      	bne.n	8005a90 <UART_SetConfig+0x260>
 8005a3a:	4b31      	ldr	r3, [pc, #196]	; (8005b00 <UART_SetConfig+0x2d0>)
 8005a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a48:	d01a      	beq.n	8005a80 <UART_SetConfig+0x250>
 8005a4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a4e:	d81b      	bhi.n	8005a88 <UART_SetConfig+0x258>
 8005a50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a54:	d00c      	beq.n	8005a70 <UART_SetConfig+0x240>
 8005a56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a5a:	d815      	bhi.n	8005a88 <UART_SetConfig+0x258>
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d003      	beq.n	8005a68 <UART_SetConfig+0x238>
 8005a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a64:	d008      	beq.n	8005a78 <UART_SetConfig+0x248>
 8005a66:	e00f      	b.n	8005a88 <UART_SetConfig+0x258>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a6e:	e012      	b.n	8005a96 <UART_SetConfig+0x266>
 8005a70:	2302      	movs	r3, #2
 8005a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a76:	e00e      	b.n	8005a96 <UART_SetConfig+0x266>
 8005a78:	2304      	movs	r3, #4
 8005a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a7e:	e00a      	b.n	8005a96 <UART_SetConfig+0x266>
 8005a80:	2308      	movs	r3, #8
 8005a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a86:	e006      	b.n	8005a96 <UART_SetConfig+0x266>
 8005a88:	2310      	movs	r3, #16
 8005a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a8e:	e002      	b.n	8005a96 <UART_SetConfig+0x266>
 8005a90:	2310      	movs	r3, #16
 8005a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a17      	ldr	r2, [pc, #92]	; (8005af8 <UART_SetConfig+0x2c8>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	f040 808b 	bne.w	8005bb8 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005aa2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005aa6:	2b08      	cmp	r3, #8
 8005aa8:	d834      	bhi.n	8005b14 <UART_SetConfig+0x2e4>
 8005aaa:	a201      	add	r2, pc, #4	; (adr r2, 8005ab0 <UART_SetConfig+0x280>)
 8005aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab0:	08005ad5 	.word	0x08005ad5
 8005ab4:	08005b15 	.word	0x08005b15
 8005ab8:	08005add 	.word	0x08005add
 8005abc:	08005b15 	.word	0x08005b15
 8005ac0:	08005ae3 	.word	0x08005ae3
 8005ac4:	08005b15 	.word	0x08005b15
 8005ac8:	08005b15 	.word	0x08005b15
 8005acc:	08005b15 	.word	0x08005b15
 8005ad0:	08005aeb 	.word	0x08005aeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ad4:	f7fd ff64 	bl	80039a0 <HAL_RCC_GetPCLK1Freq>
 8005ad8:	61f8      	str	r0, [r7, #28]
        break;
 8005ada:	e021      	b.n	8005b20 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005adc:	4b0c      	ldr	r3, [pc, #48]	; (8005b10 <UART_SetConfig+0x2e0>)
 8005ade:	61fb      	str	r3, [r7, #28]
        break;
 8005ae0:	e01e      	b.n	8005b20 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ae2:	f7fd fec5 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 8005ae6:	61f8      	str	r0, [r7, #28]
        break;
 8005ae8:	e01a      	b.n	8005b20 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aee:	61fb      	str	r3, [r7, #28]
        break;
 8005af0:	e016      	b.n	8005b20 <UART_SetConfig+0x2f0>
 8005af2:	bf00      	nop
 8005af4:	efff69f3 	.word	0xefff69f3
 8005af8:	40008000 	.word	0x40008000
 8005afc:	40013800 	.word	0x40013800
 8005b00:	40021000 	.word	0x40021000
 8005b04:	40004400 	.word	0x40004400
 8005b08:	40004800 	.word	0x40004800
 8005b0c:	40004c00 	.word	0x40004c00
 8005b10:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005b14:	2300      	movs	r3, #0
 8005b16:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005b1e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f000 80fa 	beq.w	8005d1c <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	685a      	ldr	r2, [r3, #4]
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	005b      	lsls	r3, r3, #1
 8005b30:	4413      	add	r3, r2
 8005b32:	69fa      	ldr	r2, [r7, #28]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d305      	bcc.n	8005b44 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b3e:	69fa      	ldr	r2, [r7, #28]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d903      	bls.n	8005b4c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005b4a:	e0e7      	b.n	8005d1c <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	461c      	mov	r4, r3
 8005b52:	4615      	mov	r5, r2
 8005b54:	f04f 0200 	mov.w	r2, #0
 8005b58:	f04f 0300 	mov.w	r3, #0
 8005b5c:	022b      	lsls	r3, r5, #8
 8005b5e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005b62:	0222      	lsls	r2, r4, #8
 8005b64:	68f9      	ldr	r1, [r7, #12]
 8005b66:	6849      	ldr	r1, [r1, #4]
 8005b68:	0849      	lsrs	r1, r1, #1
 8005b6a:	2000      	movs	r0, #0
 8005b6c:	4688      	mov	r8, r1
 8005b6e:	4681      	mov	r9, r0
 8005b70:	eb12 0a08 	adds.w	sl, r2, r8
 8005b74:	eb43 0b09 	adc.w	fp, r3, r9
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	603b      	str	r3, [r7, #0]
 8005b80:	607a      	str	r2, [r7, #4]
 8005b82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b86:	4650      	mov	r0, sl
 8005b88:	4659      	mov	r1, fp
 8005b8a:	f7fa fb81 	bl	8000290 <__aeabi_uldivmod>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	460b      	mov	r3, r1
 8005b92:	4613      	mov	r3, r2
 8005b94:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b9c:	d308      	bcc.n	8005bb0 <UART_SetConfig+0x380>
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ba4:	d204      	bcs.n	8005bb0 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	69ba      	ldr	r2, [r7, #24]
 8005bac:	60da      	str	r2, [r3, #12]
 8005bae:	e0b5      	b.n	8005d1c <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005bb6:	e0b1      	b.n	8005d1c <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	69db      	ldr	r3, [r3, #28]
 8005bbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bc0:	d15d      	bne.n	8005c7e <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8005bc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005bc6:	2b08      	cmp	r3, #8
 8005bc8:	d827      	bhi.n	8005c1a <UART_SetConfig+0x3ea>
 8005bca:	a201      	add	r2, pc, #4	; (adr r2, 8005bd0 <UART_SetConfig+0x3a0>)
 8005bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd0:	08005bf5 	.word	0x08005bf5
 8005bd4:	08005bfd 	.word	0x08005bfd
 8005bd8:	08005c05 	.word	0x08005c05
 8005bdc:	08005c1b 	.word	0x08005c1b
 8005be0:	08005c0b 	.word	0x08005c0b
 8005be4:	08005c1b 	.word	0x08005c1b
 8005be8:	08005c1b 	.word	0x08005c1b
 8005bec:	08005c1b 	.word	0x08005c1b
 8005bf0:	08005c13 	.word	0x08005c13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bf4:	f7fd fed4 	bl	80039a0 <HAL_RCC_GetPCLK1Freq>
 8005bf8:	61f8      	str	r0, [r7, #28]
        break;
 8005bfa:	e014      	b.n	8005c26 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bfc:	f7fd fee6 	bl	80039cc <HAL_RCC_GetPCLK2Freq>
 8005c00:	61f8      	str	r0, [r7, #28]
        break;
 8005c02:	e010      	b.n	8005c26 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c04:	4b4c      	ldr	r3, [pc, #304]	; (8005d38 <UART_SetConfig+0x508>)
 8005c06:	61fb      	str	r3, [r7, #28]
        break;
 8005c08:	e00d      	b.n	8005c26 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c0a:	f7fd fe31 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 8005c0e:	61f8      	str	r0, [r7, #28]
        break;
 8005c10:	e009      	b.n	8005c26 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c16:	61fb      	str	r3, [r7, #28]
        break;
 8005c18:	e005      	b.n	8005c26 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005c24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d077      	beq.n	8005d1c <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	005a      	lsls	r2, r3, #1
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	085b      	lsrs	r3, r3, #1
 8005c36:	441a      	add	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c40:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	2b0f      	cmp	r3, #15
 8005c46:	d916      	bls.n	8005c76 <UART_SetConfig+0x446>
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c4e:	d212      	bcs.n	8005c76 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	f023 030f 	bic.w	r3, r3, #15
 8005c58:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	085b      	lsrs	r3, r3, #1
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	f003 0307 	and.w	r3, r3, #7
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	8afb      	ldrh	r3, [r7, #22]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	8afa      	ldrh	r2, [r7, #22]
 8005c72:	60da      	str	r2, [r3, #12]
 8005c74:	e052      	b.n	8005d1c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005c7c:	e04e      	b.n	8005d1c <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c82:	2b08      	cmp	r3, #8
 8005c84:	d827      	bhi.n	8005cd6 <UART_SetConfig+0x4a6>
 8005c86:	a201      	add	r2, pc, #4	; (adr r2, 8005c8c <UART_SetConfig+0x45c>)
 8005c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c8c:	08005cb1 	.word	0x08005cb1
 8005c90:	08005cb9 	.word	0x08005cb9
 8005c94:	08005cc1 	.word	0x08005cc1
 8005c98:	08005cd7 	.word	0x08005cd7
 8005c9c:	08005cc7 	.word	0x08005cc7
 8005ca0:	08005cd7 	.word	0x08005cd7
 8005ca4:	08005cd7 	.word	0x08005cd7
 8005ca8:	08005cd7 	.word	0x08005cd7
 8005cac:	08005ccf 	.word	0x08005ccf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cb0:	f7fd fe76 	bl	80039a0 <HAL_RCC_GetPCLK1Freq>
 8005cb4:	61f8      	str	r0, [r7, #28]
        break;
 8005cb6:	e014      	b.n	8005ce2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cb8:	f7fd fe88 	bl	80039cc <HAL_RCC_GetPCLK2Freq>
 8005cbc:	61f8      	str	r0, [r7, #28]
        break;
 8005cbe:	e010      	b.n	8005ce2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cc0:	4b1d      	ldr	r3, [pc, #116]	; (8005d38 <UART_SetConfig+0x508>)
 8005cc2:	61fb      	str	r3, [r7, #28]
        break;
 8005cc4:	e00d      	b.n	8005ce2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cc6:	f7fd fdd3 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 8005cca:	61f8      	str	r0, [r7, #28]
        break;
 8005ccc:	e009      	b.n	8005ce2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cd2:	61fb      	str	r3, [r7, #28]
        break;
 8005cd4:	e005      	b.n	8005ce2 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005ce0:	bf00      	nop
    }

    if (pclk != 0U)
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d019      	beq.n	8005d1c <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	085a      	lsrs	r2, r3, #1
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	441a      	add	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cfa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	2b0f      	cmp	r3, #15
 8005d00:	d909      	bls.n	8005d16 <UART_SetConfig+0x4e6>
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d08:	d205      	bcs.n	8005d16 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	60da      	str	r2, [r3, #12]
 8005d14:	e002      	b.n	8005d1c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005d28:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3728      	adds	r7, #40	; 0x28
 8005d30:	46bd      	mov	sp, r7
 8005d32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d36:	bf00      	nop
 8005d38:	00f42400 	.word	0x00f42400

08005d3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00a      	beq.n	8005d66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00a      	beq.n	8005d88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8c:	f003 0304 	and.w	r3, r3, #4
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00a      	beq.n	8005daa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	430a      	orrs	r2, r1
 8005da8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dae:	f003 0308 	and.w	r3, r3, #8
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00a      	beq.n	8005dcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	f003 0310 	and.w	r3, r3, #16
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00a      	beq.n	8005dee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	430a      	orrs	r2, r1
 8005dec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df2:	f003 0320 	and.w	r3, r3, #32
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00a      	beq.n	8005e10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d01a      	beq.n	8005e52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e3a:	d10a      	bne.n	8005e52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	430a      	orrs	r2, r1
 8005e50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00a      	beq.n	8005e74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	430a      	orrs	r2, r1
 8005e72:	605a      	str	r2, [r3, #4]
  }
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af02      	add	r7, sp, #8
 8005e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e90:	f7fb f97c 	bl	800118c <HAL_GetTick>
 8005e94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0308 	and.w	r3, r3, #8
 8005ea0:	2b08      	cmp	r3, #8
 8005ea2:	d10e      	bne.n	8005ec2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ea4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ea8:	9300      	str	r3, [sp, #0]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f82d 	bl	8005f12 <UART_WaitOnFlagUntilTimeout>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d001      	beq.n	8005ec2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e023      	b.n	8005f0a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0304 	and.w	r3, r3, #4
 8005ecc:	2b04      	cmp	r3, #4
 8005ece:	d10e      	bne.n	8005eee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ed0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ed4:	9300      	str	r3, [sp, #0]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 f817 	bl	8005f12 <UART_WaitOnFlagUntilTimeout>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d001      	beq.n	8005eee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e00d      	b.n	8005f0a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b09c      	sub	sp, #112	; 0x70
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	60f8      	str	r0, [r7, #12]
 8005f1a:	60b9      	str	r1, [r7, #8]
 8005f1c:	603b      	str	r3, [r7, #0]
 8005f1e:	4613      	mov	r3, r2
 8005f20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f22:	e0a5      	b.n	8006070 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f2a:	f000 80a1 	beq.w	8006070 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f2e:	f7fb f92d 	bl	800118c <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d302      	bcc.n	8005f44 <UART_WaitOnFlagUntilTimeout+0x32>
 8005f3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d13e      	bne.n	8005fc2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f4c:	e853 3f00 	ldrex	r3, [r3]
 8005f50:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f58:	667b      	str	r3, [r7, #100]	; 0x64
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f64:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005f68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f6a:	e841 2300 	strex	r3, r2, [r1]
 8005f6e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005f70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1e6      	bne.n	8005f44 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	3308      	adds	r3, #8
 8005f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f80:	e853 3f00 	ldrex	r3, [r3]
 8005f84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f88:	f023 0301 	bic.w	r3, r3, #1
 8005f8c:	663b      	str	r3, [r7, #96]	; 0x60
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	3308      	adds	r3, #8
 8005f94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f96:	64ba      	str	r2, [r7, #72]	; 0x48
 8005f98:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f9e:	e841 2300 	strex	r3, r2, [r1]
 8005fa2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005fa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1e5      	bne.n	8005f76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2220      	movs	r2, #32
 8005fae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2220      	movs	r2, #32
 8005fb4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e067      	b.n	8006092 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0304 	and.w	r3, r3, #4
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d04f      	beq.n	8006070 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fde:	d147      	bne.n	8006070 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fe8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff2:	e853 3f00 	ldrex	r3, [r3]
 8005ff6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ffe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	461a      	mov	r2, r3
 8006006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006008:	637b      	str	r3, [r7, #52]	; 0x34
 800600a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800600e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006010:	e841 2300 	strex	r3, r2, [r1]
 8006014:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1e6      	bne.n	8005fea <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	3308      	adds	r3, #8
 8006022:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	e853 3f00 	ldrex	r3, [r3]
 800602a:	613b      	str	r3, [r7, #16]
   return(result);
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	f023 0301 	bic.w	r3, r3, #1
 8006032:	66bb      	str	r3, [r7, #104]	; 0x68
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	3308      	adds	r3, #8
 800603a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800603c:	623a      	str	r2, [r7, #32]
 800603e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006040:	69f9      	ldr	r1, [r7, #28]
 8006042:	6a3a      	ldr	r2, [r7, #32]
 8006044:	e841 2300 	strex	r3, r2, [r1]
 8006048:	61bb      	str	r3, [r7, #24]
   return(result);
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1e5      	bne.n	800601c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2220      	movs	r2, #32
 8006054:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2220      	movs	r2, #32
 800605a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2220      	movs	r2, #32
 8006060:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e010      	b.n	8006092 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	69da      	ldr	r2, [r3, #28]
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	4013      	ands	r3, r2
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	429a      	cmp	r2, r3
 800607e:	bf0c      	ite	eq
 8006080:	2301      	moveq	r3, #1
 8006082:	2300      	movne	r3, #0
 8006084:	b2db      	uxtb	r3, r3
 8006086:	461a      	mov	r2, r3
 8006088:	79fb      	ldrb	r3, [r7, #7]
 800608a:	429a      	cmp	r2, r3
 800608c:	f43f af4a 	beq.w	8005f24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3770      	adds	r7, #112	; 0x70
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
	...

0800609c <__NVIC_SetPriority>:
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	4603      	mov	r3, r0
 80060a4:	6039      	str	r1, [r7, #0]
 80060a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	db0a      	blt.n	80060c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	b2da      	uxtb	r2, r3
 80060b4:	490c      	ldr	r1, [pc, #48]	; (80060e8 <__NVIC_SetPriority+0x4c>)
 80060b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060ba:	0112      	lsls	r2, r2, #4
 80060bc:	b2d2      	uxtb	r2, r2
 80060be:	440b      	add	r3, r1
 80060c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80060c4:	e00a      	b.n	80060dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	b2da      	uxtb	r2, r3
 80060ca:	4908      	ldr	r1, [pc, #32]	; (80060ec <__NVIC_SetPriority+0x50>)
 80060cc:	79fb      	ldrb	r3, [r7, #7]
 80060ce:	f003 030f 	and.w	r3, r3, #15
 80060d2:	3b04      	subs	r3, #4
 80060d4:	0112      	lsls	r2, r2, #4
 80060d6:	b2d2      	uxtb	r2, r2
 80060d8:	440b      	add	r3, r1
 80060da:	761a      	strb	r2, [r3, #24]
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr
 80060e8:	e000e100 	.word	0xe000e100
 80060ec:	e000ed00 	.word	0xe000ed00

080060f0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80060f0:	b580      	push	{r7, lr}
 80060f2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80060f4:	4b05      	ldr	r3, [pc, #20]	; (800610c <SysTick_Handler+0x1c>)
 80060f6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80060f8:	f002 fb74 	bl	80087e4 <xTaskGetSchedulerState>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d001      	beq.n	8006106 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006102:	f003 fa59 	bl	80095b8 <xPortSysTickHandler>
  }
}
 8006106:	bf00      	nop
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	e000e010 	.word	0xe000e010

08006110 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006110:	b580      	push	{r7, lr}
 8006112:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006114:	2100      	movs	r1, #0
 8006116:	f06f 0004 	mvn.w	r0, #4
 800611a:	f7ff ffbf 	bl	800609c <__NVIC_SetPriority>
#endif
}
 800611e:	bf00      	nop
 8006120:	bd80      	pop	{r7, pc}
	...

08006124 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800612a:	f3ef 8305 	mrs	r3, IPSR
 800612e:	603b      	str	r3, [r7, #0]
  return(result);
 8006130:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006132:	2b00      	cmp	r3, #0
 8006134:	d003      	beq.n	800613e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006136:	f06f 0305 	mvn.w	r3, #5
 800613a:	607b      	str	r3, [r7, #4]
 800613c:	e00c      	b.n	8006158 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800613e:	4b0a      	ldr	r3, [pc, #40]	; (8006168 <osKernelInitialize+0x44>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d105      	bne.n	8006152 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006146:	4b08      	ldr	r3, [pc, #32]	; (8006168 <osKernelInitialize+0x44>)
 8006148:	2201      	movs	r2, #1
 800614a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800614c:	2300      	movs	r3, #0
 800614e:	607b      	str	r3, [r7, #4]
 8006150:	e002      	b.n	8006158 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006152:	f04f 33ff 	mov.w	r3, #4294967295
 8006156:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006158:	687b      	ldr	r3, [r7, #4]
}
 800615a:	4618      	mov	r0, r3
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	2000035c 	.word	0x2000035c

0800616c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006172:	f3ef 8305 	mrs	r3, IPSR
 8006176:	603b      	str	r3, [r7, #0]
  return(result);
 8006178:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800617a:	2b00      	cmp	r3, #0
 800617c:	d003      	beq.n	8006186 <osKernelStart+0x1a>
    stat = osErrorISR;
 800617e:	f06f 0305 	mvn.w	r3, #5
 8006182:	607b      	str	r3, [r7, #4]
 8006184:	e010      	b.n	80061a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006186:	4b0b      	ldr	r3, [pc, #44]	; (80061b4 <osKernelStart+0x48>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2b01      	cmp	r3, #1
 800618c:	d109      	bne.n	80061a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800618e:	f7ff ffbf 	bl	8006110 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006192:	4b08      	ldr	r3, [pc, #32]	; (80061b4 <osKernelStart+0x48>)
 8006194:	2202      	movs	r2, #2
 8006196:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006198:	f001 fe10 	bl	8007dbc <vTaskStartScheduler>
      stat = osOK;
 800619c:	2300      	movs	r3, #0
 800619e:	607b      	str	r3, [r7, #4]
 80061a0:	e002      	b.n	80061a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80061a2:	f04f 33ff 	mov.w	r3, #4294967295
 80061a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80061a8:	687b      	ldr	r3, [r7, #4]
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3708      	adds	r7, #8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	2000035c 	.word	0x2000035c

080061b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b08e      	sub	sp, #56	; 0x38
 80061bc:	af04      	add	r7, sp, #16
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80061c4:	2300      	movs	r3, #0
 80061c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061c8:	f3ef 8305 	mrs	r3, IPSR
 80061cc:	617b      	str	r3, [r7, #20]
  return(result);
 80061ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d17e      	bne.n	80062d2 <osThreadNew+0x11a>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d07b      	beq.n	80062d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80061da:	2380      	movs	r3, #128	; 0x80
 80061dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80061de:	2318      	movs	r3, #24
 80061e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80061e2:	2300      	movs	r3, #0
 80061e4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80061e6:	f04f 33ff 	mov.w	r3, #4294967295
 80061ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d045      	beq.n	800627e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d002      	beq.n	8006200 <osThreadNew+0x48>
        name = attr->name;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d002      	beq.n	800620e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d008      	beq.n	8006226 <osThreadNew+0x6e>
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	2b38      	cmp	r3, #56	; 0x38
 8006218:	d805      	bhi.n	8006226 <osThreadNew+0x6e>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	f003 0301 	and.w	r3, r3, #1
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <osThreadNew+0x72>
        return (NULL);
 8006226:	2300      	movs	r3, #0
 8006228:	e054      	b.n	80062d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	089b      	lsrs	r3, r3, #2
 8006238:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00e      	beq.n	8006260 <osThreadNew+0xa8>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	2bbb      	cmp	r3, #187	; 0xbb
 8006248:	d90a      	bls.n	8006260 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800624e:	2b00      	cmp	r3, #0
 8006250:	d006      	beq.n	8006260 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d002      	beq.n	8006260 <osThreadNew+0xa8>
        mem = 1;
 800625a:	2301      	movs	r3, #1
 800625c:	61bb      	str	r3, [r7, #24]
 800625e:	e010      	b.n	8006282 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d10c      	bne.n	8006282 <osThreadNew+0xca>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d108      	bne.n	8006282 <osThreadNew+0xca>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d104      	bne.n	8006282 <osThreadNew+0xca>
          mem = 0;
 8006278:	2300      	movs	r3, #0
 800627a:	61bb      	str	r3, [r7, #24]
 800627c:	e001      	b.n	8006282 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800627e:	2300      	movs	r3, #0
 8006280:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d110      	bne.n	80062aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006290:	9202      	str	r2, [sp, #8]
 8006292:	9301      	str	r3, [sp, #4]
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	6a3a      	ldr	r2, [r7, #32]
 800629c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f001 fba0 	bl	80079e4 <xTaskCreateStatic>
 80062a4:	4603      	mov	r3, r0
 80062a6:	613b      	str	r3, [r7, #16]
 80062a8:	e013      	b.n	80062d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d110      	bne.n	80062d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80062b0:	6a3b      	ldr	r3, [r7, #32]
 80062b2:	b29a      	uxth	r2, r3
 80062b4:	f107 0310 	add.w	r3, r7, #16
 80062b8:	9301      	str	r3, [sp, #4]
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80062c2:	68f8      	ldr	r0, [r7, #12]
 80062c4:	f001 fbeb 	bl	8007a9e <xTaskCreate>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d001      	beq.n	80062d2 <osThreadNew+0x11a>
            hTask = NULL;
 80062ce:	2300      	movs	r3, #0
 80062d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80062d2:	693b      	ldr	r3, [r7, #16]
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3728      	adds	r7, #40	; 0x28
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062e4:	f3ef 8305 	mrs	r3, IPSR
 80062e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80062ea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d003      	beq.n	80062f8 <osDelay+0x1c>
    stat = osErrorISR;
 80062f0:	f06f 0305 	mvn.w	r3, #5
 80062f4:	60fb      	str	r3, [r7, #12]
 80062f6:	e007      	b.n	8006308 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80062f8:	2300      	movs	r3, #0
 80062fa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d002      	beq.n	8006308 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f001 fd26 	bl	8007d54 <vTaskDelay>
    }
  }

  return (stat);
 8006308:	68fb      	ldr	r3, [r7, #12]
}
 800630a:	4618      	mov	r0, r3
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006312:	b580      	push	{r7, lr}
 8006314:	b08a      	sub	sp, #40	; 0x28
 8006316:	af02      	add	r7, sp, #8
 8006318:	60f8      	str	r0, [r7, #12]
 800631a:	60b9      	str	r1, [r7, #8]
 800631c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800631e:	2300      	movs	r3, #0
 8006320:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006322:	f3ef 8305 	mrs	r3, IPSR
 8006326:	613b      	str	r3, [r7, #16]
  return(result);
 8006328:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800632a:	2b00      	cmp	r3, #0
 800632c:	d175      	bne.n	800641a <osSemaphoreNew+0x108>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d072      	beq.n	800641a <osSemaphoreNew+0x108>
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	429a      	cmp	r2, r3
 800633a:	d86e      	bhi.n	800641a <osSemaphoreNew+0x108>
    mem = -1;
 800633c:	f04f 33ff 	mov.w	r3, #4294967295
 8006340:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d015      	beq.n	8006374 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d006      	beq.n	800635e <osSemaphoreNew+0x4c>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	2b4f      	cmp	r3, #79	; 0x4f
 8006356:	d902      	bls.n	800635e <osSemaphoreNew+0x4c>
        mem = 1;
 8006358:	2301      	movs	r3, #1
 800635a:	61bb      	str	r3, [r7, #24]
 800635c:	e00c      	b.n	8006378 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d108      	bne.n	8006378 <osSemaphoreNew+0x66>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d104      	bne.n	8006378 <osSemaphoreNew+0x66>
          mem = 0;
 800636e:	2300      	movs	r3, #0
 8006370:	61bb      	str	r3, [r7, #24]
 8006372:	e001      	b.n	8006378 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006374:	2300      	movs	r3, #0
 8006376:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800637e:	d04c      	beq.n	800641a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2b01      	cmp	r3, #1
 8006384:	d128      	bne.n	80063d8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	2b01      	cmp	r3, #1
 800638a:	d10a      	bne.n	80063a2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	2203      	movs	r2, #3
 8006392:	9200      	str	r2, [sp, #0]
 8006394:	2200      	movs	r2, #0
 8006396:	2100      	movs	r1, #0
 8006398:	2001      	movs	r0, #1
 800639a:	f000 fb7d 	bl	8006a98 <xQueueGenericCreateStatic>
 800639e:	61f8      	str	r0, [r7, #28]
 80063a0:	e005      	b.n	80063ae <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80063a2:	2203      	movs	r2, #3
 80063a4:	2100      	movs	r1, #0
 80063a6:	2001      	movs	r0, #1
 80063a8:	f000 fbee 	bl	8006b88 <xQueueGenericCreate>
 80063ac:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d022      	beq.n	80063fa <osSemaphoreNew+0xe8>
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d01f      	beq.n	80063fa <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80063ba:	2300      	movs	r3, #0
 80063bc:	2200      	movs	r2, #0
 80063be:	2100      	movs	r1, #0
 80063c0:	69f8      	ldr	r0, [r7, #28]
 80063c2:	f000 fca9 	bl	8006d18 <xQueueGenericSend>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d016      	beq.n	80063fa <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80063cc:	69f8      	ldr	r0, [r7, #28]
 80063ce:	f001 f935 	bl	800763c <vQueueDelete>
            hSemaphore = NULL;
 80063d2:	2300      	movs	r3, #0
 80063d4:	61fb      	str	r3, [r7, #28]
 80063d6:	e010      	b.n	80063fa <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d108      	bne.n	80063f0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	461a      	mov	r2, r3
 80063e4:	68b9      	ldr	r1, [r7, #8]
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f000 fc2b 	bl	8006c42 <xQueueCreateCountingSemaphoreStatic>
 80063ec:	61f8      	str	r0, [r7, #28]
 80063ee:	e004      	b.n	80063fa <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80063f0:	68b9      	ldr	r1, [r7, #8]
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f000 fc5c 	bl	8006cb0 <xQueueCreateCountingSemaphore>
 80063f8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00c      	beq.n	800641a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d003      	beq.n	800640e <osSemaphoreNew+0xfc>
          name = attr->name;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	617b      	str	r3, [r7, #20]
 800640c:	e001      	b.n	8006412 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800640e:	2300      	movs	r3, #0
 8006410:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006412:	6979      	ldr	r1, [r7, #20]
 8006414:	69f8      	ldr	r0, [r7, #28]
 8006416:	f001 fa5d 	bl	80078d4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800641a:	69fb      	ldr	r3, [r7, #28]
}
 800641c:	4618      	mov	r0, r3
 800641e:	3720      	adds	r7, #32
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006424:	b580      	push	{r7, lr}
 8006426:	b086      	sub	sp, #24
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006432:	2300      	movs	r3, #0
 8006434:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d103      	bne.n	8006444 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800643c:	f06f 0303 	mvn.w	r3, #3
 8006440:	617b      	str	r3, [r7, #20]
 8006442:	e039      	b.n	80064b8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006444:	f3ef 8305 	mrs	r3, IPSR
 8006448:	60fb      	str	r3, [r7, #12]
  return(result);
 800644a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800644c:	2b00      	cmp	r3, #0
 800644e:	d022      	beq.n	8006496 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d003      	beq.n	800645e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8006456:	f06f 0303 	mvn.w	r3, #3
 800645a:	617b      	str	r3, [r7, #20]
 800645c:	e02c      	b.n	80064b8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800645e:	2300      	movs	r3, #0
 8006460:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006462:	f107 0308 	add.w	r3, r7, #8
 8006466:	461a      	mov	r2, r3
 8006468:	2100      	movs	r1, #0
 800646a:	6938      	ldr	r0, [r7, #16]
 800646c:	f001 f866 	bl	800753c <xQueueReceiveFromISR>
 8006470:	4603      	mov	r3, r0
 8006472:	2b01      	cmp	r3, #1
 8006474:	d003      	beq.n	800647e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8006476:	f06f 0302 	mvn.w	r3, #2
 800647a:	617b      	str	r3, [r7, #20]
 800647c:	e01c      	b.n	80064b8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d019      	beq.n	80064b8 <osSemaphoreAcquire+0x94>
 8006484:	4b0f      	ldr	r3, [pc, #60]	; (80064c4 <osSemaphoreAcquire+0xa0>)
 8006486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800648a:	601a      	str	r2, [r3, #0]
 800648c:	f3bf 8f4f 	dsb	sy
 8006490:	f3bf 8f6f 	isb	sy
 8006494:	e010      	b.n	80064b8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006496:	6839      	ldr	r1, [r7, #0]
 8006498:	6938      	ldr	r0, [r7, #16]
 800649a:	f000 ff43 	bl	8007324 <xQueueSemaphoreTake>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d009      	beq.n	80064b8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d003      	beq.n	80064b2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80064aa:	f06f 0301 	mvn.w	r3, #1
 80064ae:	617b      	str	r3, [r7, #20]
 80064b0:	e002      	b.n	80064b8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80064b2:	f06f 0302 	mvn.w	r3, #2
 80064b6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80064b8:	697b      	ldr	r3, [r7, #20]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3718      	adds	r7, #24
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	e000ed04 	.word	0xe000ed04

080064c8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b086      	sub	sp, #24
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80064d4:	2300      	movs	r3, #0
 80064d6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d103      	bne.n	80064e6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80064de:	f06f 0303 	mvn.w	r3, #3
 80064e2:	617b      	str	r3, [r7, #20]
 80064e4:	e02c      	b.n	8006540 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064e6:	f3ef 8305 	mrs	r3, IPSR
 80064ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80064ec:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d01a      	beq.n	8006528 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80064f2:	2300      	movs	r3, #0
 80064f4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80064f6:	f107 0308 	add.w	r3, r7, #8
 80064fa:	4619      	mov	r1, r3
 80064fc:	6938      	ldr	r0, [r7, #16]
 80064fe:	f000 fda4 	bl	800704a <xQueueGiveFromISR>
 8006502:	4603      	mov	r3, r0
 8006504:	2b01      	cmp	r3, #1
 8006506:	d003      	beq.n	8006510 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006508:	f06f 0302 	mvn.w	r3, #2
 800650c:	617b      	str	r3, [r7, #20]
 800650e:	e017      	b.n	8006540 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d014      	beq.n	8006540 <osSemaphoreRelease+0x78>
 8006516:	4b0d      	ldr	r3, [pc, #52]	; (800654c <osSemaphoreRelease+0x84>)
 8006518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800651c:	601a      	str	r2, [r3, #0]
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	e00b      	b.n	8006540 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006528:	2300      	movs	r3, #0
 800652a:	2200      	movs	r2, #0
 800652c:	2100      	movs	r1, #0
 800652e:	6938      	ldr	r0, [r7, #16]
 8006530:	f000 fbf2 	bl	8006d18 <xQueueGenericSend>
 8006534:	4603      	mov	r3, r0
 8006536:	2b01      	cmp	r3, #1
 8006538:	d002      	beq.n	8006540 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800653a:	f06f 0302 	mvn.w	r3, #2
 800653e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006540:	697b      	ldr	r3, [r7, #20]
}
 8006542:	4618      	mov	r0, r3
 8006544:	3718      	adds	r7, #24
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	e000ed04 	.word	0xe000ed04

08006550 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006550:	b580      	push	{r7, lr}
 8006552:	b08a      	sub	sp, #40	; 0x28
 8006554:	af02      	add	r7, sp, #8
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800655c:	2300      	movs	r3, #0
 800655e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006560:	f3ef 8305 	mrs	r3, IPSR
 8006564:	613b      	str	r3, [r7, #16]
  return(result);
 8006566:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006568:	2b00      	cmp	r3, #0
 800656a:	d15f      	bne.n	800662c <osMessageQueueNew+0xdc>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d05c      	beq.n	800662c <osMessageQueueNew+0xdc>
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d059      	beq.n	800662c <osMessageQueueNew+0xdc>
    mem = -1;
 8006578:	f04f 33ff 	mov.w	r3, #4294967295
 800657c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d029      	beq.n	80065d8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d012      	beq.n	80065b2 <osMessageQueueNew+0x62>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	2b4f      	cmp	r3, #79	; 0x4f
 8006592:	d90e      	bls.n	80065b2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00a      	beq.n	80065b2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	695a      	ldr	r2, [r3, #20]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	68b9      	ldr	r1, [r7, #8]
 80065a4:	fb01 f303 	mul.w	r3, r1, r3
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d302      	bcc.n	80065b2 <osMessageQueueNew+0x62>
        mem = 1;
 80065ac:	2301      	movs	r3, #1
 80065ae:	61bb      	str	r3, [r7, #24]
 80065b0:	e014      	b.n	80065dc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d110      	bne.n	80065dc <osMessageQueueNew+0x8c>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10c      	bne.n	80065dc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d108      	bne.n	80065dc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d104      	bne.n	80065dc <osMessageQueueNew+0x8c>
          mem = 0;
 80065d2:	2300      	movs	r3, #0
 80065d4:	61bb      	str	r3, [r7, #24]
 80065d6:	e001      	b.n	80065dc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80065d8:	2300      	movs	r3, #0
 80065da:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d10b      	bne.n	80065fa <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	691a      	ldr	r2, [r3, #16]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	2100      	movs	r1, #0
 80065ec:	9100      	str	r1, [sp, #0]
 80065ee:	68b9      	ldr	r1, [r7, #8]
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f000 fa51 	bl	8006a98 <xQueueGenericCreateStatic>
 80065f6:	61f8      	str	r0, [r7, #28]
 80065f8:	e008      	b.n	800660c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d105      	bne.n	800660c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006600:	2200      	movs	r2, #0
 8006602:	68b9      	ldr	r1, [r7, #8]
 8006604:	68f8      	ldr	r0, [r7, #12]
 8006606:	f000 fabf 	bl	8006b88 <xQueueGenericCreate>
 800660a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00c      	beq.n	800662c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d003      	beq.n	8006620 <osMessageQueueNew+0xd0>
        name = attr->name;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	617b      	str	r3, [r7, #20]
 800661e:	e001      	b.n	8006624 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006620:	2300      	movs	r3, #0
 8006622:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006624:	6979      	ldr	r1, [r7, #20]
 8006626:	69f8      	ldr	r0, [r7, #28]
 8006628:	f001 f954 	bl	80078d4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800662c:	69fb      	ldr	r3, [r7, #28]
}
 800662e:	4618      	mov	r0, r3
 8006630:	3720      	adds	r7, #32
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
	...

08006638 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006638:	b580      	push	{r7, lr}
 800663a:	b088      	sub	sp, #32
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	603b      	str	r3, [r7, #0]
 8006644:	4613      	mov	r3, r2
 8006646:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800664c:	2300      	movs	r3, #0
 800664e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006650:	f3ef 8305 	mrs	r3, IPSR
 8006654:	617b      	str	r3, [r7, #20]
  return(result);
 8006656:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006658:	2b00      	cmp	r3, #0
 800665a:	d028      	beq.n	80066ae <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d005      	beq.n	800666e <osMessageQueuePut+0x36>
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d002      	beq.n	800666e <osMessageQueuePut+0x36>
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d003      	beq.n	8006676 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800666e:	f06f 0303 	mvn.w	r3, #3
 8006672:	61fb      	str	r3, [r7, #28]
 8006674:	e038      	b.n	80066e8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006676:	2300      	movs	r3, #0
 8006678:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800667a:	f107 0210 	add.w	r2, r7, #16
 800667e:	2300      	movs	r3, #0
 8006680:	68b9      	ldr	r1, [r7, #8]
 8006682:	69b8      	ldr	r0, [r7, #24]
 8006684:	f000 fc46 	bl	8006f14 <xQueueGenericSendFromISR>
 8006688:	4603      	mov	r3, r0
 800668a:	2b01      	cmp	r3, #1
 800668c:	d003      	beq.n	8006696 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800668e:	f06f 0302 	mvn.w	r3, #2
 8006692:	61fb      	str	r3, [r7, #28]
 8006694:	e028      	b.n	80066e8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d025      	beq.n	80066e8 <osMessageQueuePut+0xb0>
 800669c:	4b15      	ldr	r3, [pc, #84]	; (80066f4 <osMessageQueuePut+0xbc>)
 800669e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	f3bf 8f4f 	dsb	sy
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	e01c      	b.n	80066e8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d002      	beq.n	80066ba <osMessageQueuePut+0x82>
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d103      	bne.n	80066c2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80066ba:	f06f 0303 	mvn.w	r3, #3
 80066be:	61fb      	str	r3, [r7, #28]
 80066c0:	e012      	b.n	80066e8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80066c2:	2300      	movs	r3, #0
 80066c4:	683a      	ldr	r2, [r7, #0]
 80066c6:	68b9      	ldr	r1, [r7, #8]
 80066c8:	69b8      	ldr	r0, [r7, #24]
 80066ca:	f000 fb25 	bl	8006d18 <xQueueGenericSend>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d009      	beq.n	80066e8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d003      	beq.n	80066e2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80066da:	f06f 0301 	mvn.w	r3, #1
 80066de:	61fb      	str	r3, [r7, #28]
 80066e0:	e002      	b.n	80066e8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80066e2:	f06f 0302 	mvn.w	r3, #2
 80066e6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80066e8:	69fb      	ldr	r3, [r7, #28]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3720      	adds	r7, #32
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	e000ed04 	.word	0xe000ed04

080066f8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b088      	sub	sp, #32
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
 8006704:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800670a:	2300      	movs	r3, #0
 800670c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800670e:	f3ef 8305 	mrs	r3, IPSR
 8006712:	617b      	str	r3, [r7, #20]
  return(result);
 8006714:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006716:	2b00      	cmp	r3, #0
 8006718:	d028      	beq.n	800676c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d005      	beq.n	800672c <osMessageQueueGet+0x34>
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d002      	beq.n	800672c <osMessageQueueGet+0x34>
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d003      	beq.n	8006734 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800672c:	f06f 0303 	mvn.w	r3, #3
 8006730:	61fb      	str	r3, [r7, #28]
 8006732:	e037      	b.n	80067a4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006734:	2300      	movs	r3, #0
 8006736:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006738:	f107 0310 	add.w	r3, r7, #16
 800673c:	461a      	mov	r2, r3
 800673e:	68b9      	ldr	r1, [r7, #8]
 8006740:	69b8      	ldr	r0, [r7, #24]
 8006742:	f000 fefb 	bl	800753c <xQueueReceiveFromISR>
 8006746:	4603      	mov	r3, r0
 8006748:	2b01      	cmp	r3, #1
 800674a:	d003      	beq.n	8006754 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800674c:	f06f 0302 	mvn.w	r3, #2
 8006750:	61fb      	str	r3, [r7, #28]
 8006752:	e027      	b.n	80067a4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d024      	beq.n	80067a4 <osMessageQueueGet+0xac>
 800675a:	4b15      	ldr	r3, [pc, #84]	; (80067b0 <osMessageQueueGet+0xb8>)
 800675c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006760:	601a      	str	r2, [r3, #0]
 8006762:	f3bf 8f4f 	dsb	sy
 8006766:	f3bf 8f6f 	isb	sy
 800676a:	e01b      	b.n	80067a4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d002      	beq.n	8006778 <osMessageQueueGet+0x80>
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d103      	bne.n	8006780 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006778:	f06f 0303 	mvn.w	r3, #3
 800677c:	61fb      	str	r3, [r7, #28]
 800677e:	e011      	b.n	80067a4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006780:	683a      	ldr	r2, [r7, #0]
 8006782:	68b9      	ldr	r1, [r7, #8]
 8006784:	69b8      	ldr	r0, [r7, #24]
 8006786:	f000 fced 	bl	8007164 <xQueueReceive>
 800678a:	4603      	mov	r3, r0
 800678c:	2b01      	cmp	r3, #1
 800678e:	d009      	beq.n	80067a4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006796:	f06f 0301 	mvn.w	r3, #1
 800679a:	61fb      	str	r3, [r7, #28]
 800679c:	e002      	b.n	80067a4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800679e:	f06f 0302 	mvn.w	r3, #2
 80067a2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80067a4:	69fb      	ldr	r3, [r7, #28]
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3720      	adds	r7, #32
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	e000ed04 	.word	0xe000ed04

080067b4 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b086      	sub	sp, #24
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067c0:	f3ef 8305 	mrs	r3, IPSR
 80067c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80067c6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d003      	beq.n	80067d4 <osMessageQueueReset+0x20>
    stat = osErrorISR;
 80067cc:	f06f 0305 	mvn.w	r3, #5
 80067d0:	617b      	str	r3, [r7, #20]
 80067d2:	e00c      	b.n	80067ee <osMessageQueueReset+0x3a>
  }
  else if (hQueue == NULL) {
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d103      	bne.n	80067e2 <osMessageQueueReset+0x2e>
    stat = osErrorParameter;
 80067da:	f06f 0303 	mvn.w	r3, #3
 80067de:	617b      	str	r3, [r7, #20]
 80067e0:	e005      	b.n	80067ee <osMessageQueueReset+0x3a>
  }
  else {
    stat = osOK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	617b      	str	r3, [r7, #20]
    (void)xQueueReset (hQueue);
 80067e6:	2100      	movs	r1, #0
 80067e8:	6938      	ldr	r0, [r7, #16]
 80067ea:	f000 f8ed 	bl	80069c8 <xQueueGenericReset>
  }

  return (stat);
 80067ee:	697b      	ldr	r3, [r7, #20]
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3718      	adds	r7, #24
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	4a07      	ldr	r2, [pc, #28]	; (8006824 <vApplicationGetIdleTaskMemory+0x2c>)
 8006808:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	4a06      	ldr	r2, [pc, #24]	; (8006828 <vApplicationGetIdleTaskMemory+0x30>)
 800680e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2280      	movs	r2, #128	; 0x80
 8006814:	601a      	str	r2, [r3, #0]
}
 8006816:	bf00      	nop
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	20000360 	.word	0x20000360
 8006828:	2000041c 	.word	0x2000041c

0800682c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	4a07      	ldr	r2, [pc, #28]	; (8006858 <vApplicationGetTimerTaskMemory+0x2c>)
 800683c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	4a06      	ldr	r2, [pc, #24]	; (800685c <vApplicationGetTimerTaskMemory+0x30>)
 8006842:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f44f 7280 	mov.w	r2, #256	; 0x100
 800684a:	601a      	str	r2, [r3, #0]
}
 800684c:	bf00      	nop
 800684e:	3714      	adds	r7, #20
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr
 8006858:	2000061c 	.word	0x2000061c
 800685c:	200006d8 	.word	0x200006d8

08006860 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f103 0208 	add.w	r2, r3, #8
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f04f 32ff 	mov.w	r2, #4294967295
 8006878:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f103 0208 	add.w	r2, r3, #8
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f103 0208 	add.w	r2, r3, #8
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80068ae:	bf00      	nop
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068ba:	b480      	push	{r7}
 80068bc:	b085      	sub	sp, #20
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
 80068c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	689a      	ldr	r2, [r3, #8]
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	683a      	ldr	r2, [r7, #0]
 80068de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	683a      	ldr	r2, [r7, #0]
 80068e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	1c5a      	adds	r2, r3, #1
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	601a      	str	r2, [r3, #0]
}
 80068f6:	bf00      	nop
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006902:	b480      	push	{r7}
 8006904:	b085      	sub	sp, #20
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
 800690a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006918:	d103      	bne.n	8006922 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	60fb      	str	r3, [r7, #12]
 8006920:	e00c      	b.n	800693c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	3308      	adds	r3, #8
 8006926:	60fb      	str	r3, [r7, #12]
 8006928:	e002      	b.n	8006930 <vListInsert+0x2e>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	60fb      	str	r3, [r7, #12]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68ba      	ldr	r2, [r7, #8]
 8006938:	429a      	cmp	r2, r3
 800693a:	d2f6      	bcs.n	800692a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	685a      	ldr	r2, [r3, #4]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	683a      	ldr	r2, [r7, #0]
 800694a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	683a      	ldr	r2, [r7, #0]
 8006956:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	1c5a      	adds	r2, r3, #1
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	601a      	str	r2, [r3, #0]
}
 8006968:	bf00      	nop
 800696a:	3714      	adds	r7, #20
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	6892      	ldr	r2, [r2, #8]
 800698a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	6852      	ldr	r2, [r2, #4]
 8006994:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	429a      	cmp	r2, r3
 800699e:	d103      	bne.n	80069a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	689a      	ldr	r2, [r3, #8]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	1e5a      	subs	r2, r3, #1
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3714      	adds	r7, #20
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d10a      	bne.n	80069f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80069dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e0:	f383 8811 	msr	BASEPRI, r3
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80069ee:	bf00      	nop
 80069f0:	e7fe      	b.n	80069f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80069f2:	f002 fd4f 	bl	8009494 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069fe:	68f9      	ldr	r1, [r7, #12]
 8006a00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a02:	fb01 f303 	mul.w	r3, r1, r3
 8006a06:	441a      	add	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a22:	3b01      	subs	r3, #1
 8006a24:	68f9      	ldr	r1, [r7, #12]
 8006a26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a28:	fb01 f303 	mul.w	r3, r1, r3
 8006a2c:	441a      	add	r2, r3
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	22ff      	movs	r2, #255	; 0xff
 8006a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	22ff      	movs	r2, #255	; 0xff
 8006a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d114      	bne.n	8006a72 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d01a      	beq.n	8006a86 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	3310      	adds	r3, #16
 8006a54:	4618      	mov	r0, r3
 8006a56:	f001 fcab 	bl	80083b0 <xTaskRemoveFromEventList>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d012      	beq.n	8006a86 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006a60:	4b0c      	ldr	r3, [pc, #48]	; (8006a94 <xQueueGenericReset+0xcc>)
 8006a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a66:	601a      	str	r2, [r3, #0]
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	f3bf 8f6f 	isb	sy
 8006a70:	e009      	b.n	8006a86 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	3310      	adds	r3, #16
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7ff fef2 	bl	8006860 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	3324      	adds	r3, #36	; 0x24
 8006a80:	4618      	mov	r0, r3
 8006a82:	f7ff feed 	bl	8006860 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006a86:	f002 fd35 	bl	80094f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006a8a:	2301      	movs	r3, #1
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3710      	adds	r7, #16
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	e000ed04 	.word	0xe000ed04

08006a98 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b08e      	sub	sp, #56	; 0x38
 8006a9c:	af02      	add	r7, sp, #8
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
 8006aa4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10a      	bne.n	8006ac2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab0:	f383 8811 	msr	BASEPRI, r3
 8006ab4:	f3bf 8f6f 	isb	sy
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006abe:	bf00      	nop
 8006ac0:	e7fe      	b.n	8006ac0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10a      	bne.n	8006ade <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006acc:	f383 8811 	msr	BASEPRI, r3
 8006ad0:	f3bf 8f6f 	isb	sy
 8006ad4:	f3bf 8f4f 	dsb	sy
 8006ad8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ada:	bf00      	nop
 8006adc:	e7fe      	b.n	8006adc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d002      	beq.n	8006aea <xQueueGenericCreateStatic+0x52>
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d001      	beq.n	8006aee <xQueueGenericCreateStatic+0x56>
 8006aea:	2301      	movs	r3, #1
 8006aec:	e000      	b.n	8006af0 <xQueueGenericCreateStatic+0x58>
 8006aee:	2300      	movs	r3, #0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d10a      	bne.n	8006b0a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af8:	f383 8811 	msr	BASEPRI, r3
 8006afc:	f3bf 8f6f 	isb	sy
 8006b00:	f3bf 8f4f 	dsb	sy
 8006b04:	623b      	str	r3, [r7, #32]
}
 8006b06:	bf00      	nop
 8006b08:	e7fe      	b.n	8006b08 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d102      	bne.n	8006b16 <xQueueGenericCreateStatic+0x7e>
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d101      	bne.n	8006b1a <xQueueGenericCreateStatic+0x82>
 8006b16:	2301      	movs	r3, #1
 8006b18:	e000      	b.n	8006b1c <xQueueGenericCreateStatic+0x84>
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d10a      	bne.n	8006b36 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b24:	f383 8811 	msr	BASEPRI, r3
 8006b28:	f3bf 8f6f 	isb	sy
 8006b2c:	f3bf 8f4f 	dsb	sy
 8006b30:	61fb      	str	r3, [r7, #28]
}
 8006b32:	bf00      	nop
 8006b34:	e7fe      	b.n	8006b34 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006b36:	2350      	movs	r3, #80	; 0x50
 8006b38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	2b50      	cmp	r3, #80	; 0x50
 8006b3e:	d00a      	beq.n	8006b56 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b44:	f383 8811 	msr	BASEPRI, r3
 8006b48:	f3bf 8f6f 	isb	sy
 8006b4c:	f3bf 8f4f 	dsb	sy
 8006b50:	61bb      	str	r3, [r7, #24]
}
 8006b52:	bf00      	nop
 8006b54:	e7fe      	b.n	8006b54 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006b56:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00d      	beq.n	8006b7e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b64:	2201      	movs	r2, #1
 8006b66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b6a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	4613      	mov	r3, r2
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	68b9      	ldr	r1, [r7, #8]
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f000 f83f 	bl	8006bfc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3730      	adds	r7, #48	; 0x30
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b08a      	sub	sp, #40	; 0x28
 8006b8c:	af02      	add	r7, sp, #8
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	4613      	mov	r3, r2
 8006b94:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10a      	bne.n	8006bb2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba0:	f383 8811 	msr	BASEPRI, r3
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	613b      	str	r3, [r7, #16]
}
 8006bae:	bf00      	nop
 8006bb0:	e7fe      	b.n	8006bb0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	fb02 f303 	mul.w	r3, r2, r3
 8006bba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	3350      	adds	r3, #80	; 0x50
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f002 fe65 	bl	8009890 <pvPortMalloc>
 8006bc6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d011      	beq.n	8006bf2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	3350      	adds	r3, #80	; 0x50
 8006bd6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006be0:	79fa      	ldrb	r2, [r7, #7]
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	9300      	str	r3, [sp, #0]
 8006be6:	4613      	mov	r3, r2
 8006be8:	697a      	ldr	r2, [r7, #20]
 8006bea:	68b9      	ldr	r1, [r7, #8]
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f000 f805 	bl	8006bfc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006bf2:	69bb      	ldr	r3, [r7, #24]
	}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3720      	adds	r7, #32
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	607a      	str	r2, [r7, #4]
 8006c08:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d103      	bne.n	8006c18 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	69ba      	ldr	r2, [r7, #24]
 8006c14:	601a      	str	r2, [r3, #0]
 8006c16:	e002      	b.n	8006c1e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006c2a:	2101      	movs	r1, #1
 8006c2c:	69b8      	ldr	r0, [r7, #24]
 8006c2e:	f7ff fecb 	bl	80069c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	78fa      	ldrb	r2, [r7, #3]
 8006c36:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006c3a:	bf00      	nop
 8006c3c:	3710      	adds	r7, #16
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b08a      	sub	sp, #40	; 0x28
 8006c46:	af02      	add	r7, sp, #8
 8006c48:	60f8      	str	r0, [r7, #12]
 8006c4a:	60b9      	str	r1, [r7, #8]
 8006c4c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10a      	bne.n	8006c6a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c58:	f383 8811 	msr	BASEPRI, r3
 8006c5c:	f3bf 8f6f 	isb	sy
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	61bb      	str	r3, [r7, #24]
}
 8006c66:	bf00      	nop
 8006c68:	e7fe      	b.n	8006c68 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006c6a:	68ba      	ldr	r2, [r7, #8]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d90a      	bls.n	8006c88 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c76:	f383 8811 	msr	BASEPRI, r3
 8006c7a:	f3bf 8f6f 	isb	sy
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	617b      	str	r3, [r7, #20]
}
 8006c84:	bf00      	nop
 8006c86:	e7fe      	b.n	8006c86 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006c88:	2302      	movs	r3, #2
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	2100      	movs	r1, #0
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f7ff ff00 	bl	8006a98 <xQueueGenericCreateStatic>
 8006c98:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d002      	beq.n	8006ca6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	68ba      	ldr	r2, [r7, #8]
 8006ca4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006ca6:	69fb      	ldr	r3, [r7, #28]
	}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3720      	adds	r7, #32
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d10a      	bne.n	8006cd6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc4:	f383 8811 	msr	BASEPRI, r3
 8006cc8:	f3bf 8f6f 	isb	sy
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	613b      	str	r3, [r7, #16]
}
 8006cd2:	bf00      	nop
 8006cd4:	e7fe      	b.n	8006cd4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006cd6:	683a      	ldr	r2, [r7, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d90a      	bls.n	8006cf4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce2:	f383 8811 	msr	BASEPRI, r3
 8006ce6:	f3bf 8f6f 	isb	sy
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	60fb      	str	r3, [r7, #12]
}
 8006cf0:	bf00      	nop
 8006cf2:	e7fe      	b.n	8006cf2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006cf4:	2202      	movs	r2, #2
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f7ff ff45 	bl	8006b88 <xQueueGenericCreate>
 8006cfe:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d002      	beq.n	8006d0c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	683a      	ldr	r2, [r7, #0]
 8006d0a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006d0c:	697b      	ldr	r3, [r7, #20]
	}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3718      	adds	r7, #24
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
	...

08006d18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b08e      	sub	sp, #56	; 0x38
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]
 8006d24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006d26:	2300      	movs	r3, #0
 8006d28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10a      	bne.n	8006d4a <xQueueGenericSend+0x32>
	__asm volatile
 8006d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d38:	f383 8811 	msr	BASEPRI, r3
 8006d3c:	f3bf 8f6f 	isb	sy
 8006d40:	f3bf 8f4f 	dsb	sy
 8006d44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d46:	bf00      	nop
 8006d48:	e7fe      	b.n	8006d48 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d103      	bne.n	8006d58 <xQueueGenericSend+0x40>
 8006d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d101      	bne.n	8006d5c <xQueueGenericSend+0x44>
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e000      	b.n	8006d5e <xQueueGenericSend+0x46>
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10a      	bne.n	8006d78 <xQueueGenericSend+0x60>
	__asm volatile
 8006d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d66:	f383 8811 	msr	BASEPRI, r3
 8006d6a:	f3bf 8f6f 	isb	sy
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d74:	bf00      	nop
 8006d76:	e7fe      	b.n	8006d76 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d103      	bne.n	8006d86 <xQueueGenericSend+0x6e>
 8006d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d101      	bne.n	8006d8a <xQueueGenericSend+0x72>
 8006d86:	2301      	movs	r3, #1
 8006d88:	e000      	b.n	8006d8c <xQueueGenericSend+0x74>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10a      	bne.n	8006da6 <xQueueGenericSend+0x8e>
	__asm volatile
 8006d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d94:	f383 8811 	msr	BASEPRI, r3
 8006d98:	f3bf 8f6f 	isb	sy
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	623b      	str	r3, [r7, #32]
}
 8006da2:	bf00      	nop
 8006da4:	e7fe      	b.n	8006da4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006da6:	f001 fd1d 	bl	80087e4 <xTaskGetSchedulerState>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d102      	bne.n	8006db6 <xQueueGenericSend+0x9e>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d101      	bne.n	8006dba <xQueueGenericSend+0xa2>
 8006db6:	2301      	movs	r3, #1
 8006db8:	e000      	b.n	8006dbc <xQueueGenericSend+0xa4>
 8006dba:	2300      	movs	r3, #0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10a      	bne.n	8006dd6 <xQueueGenericSend+0xbe>
	__asm volatile
 8006dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc4:	f383 8811 	msr	BASEPRI, r3
 8006dc8:	f3bf 8f6f 	isb	sy
 8006dcc:	f3bf 8f4f 	dsb	sy
 8006dd0:	61fb      	str	r3, [r7, #28]
}
 8006dd2:	bf00      	nop
 8006dd4:	e7fe      	b.n	8006dd4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006dd6:	f002 fb5d 	bl	8009494 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ddc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d302      	bcc.n	8006dec <xQueueGenericSend+0xd4>
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d129      	bne.n	8006e40 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006dec:	683a      	ldr	r2, [r7, #0]
 8006dee:	68b9      	ldr	r1, [r7, #8]
 8006df0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006df2:	f000 fc5e 	bl	80076b2 <prvCopyDataToQueue>
 8006df6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d010      	beq.n	8006e22 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e02:	3324      	adds	r3, #36	; 0x24
 8006e04:	4618      	mov	r0, r3
 8006e06:	f001 fad3 	bl	80083b0 <xTaskRemoveFromEventList>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d013      	beq.n	8006e38 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006e10:	4b3f      	ldr	r3, [pc, #252]	; (8006f10 <xQueueGenericSend+0x1f8>)
 8006e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e16:	601a      	str	r2, [r3, #0]
 8006e18:	f3bf 8f4f 	dsb	sy
 8006e1c:	f3bf 8f6f 	isb	sy
 8006e20:	e00a      	b.n	8006e38 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d007      	beq.n	8006e38 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006e28:	4b39      	ldr	r3, [pc, #228]	; (8006f10 <xQueueGenericSend+0x1f8>)
 8006e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e2e:	601a      	str	r2, [r3, #0]
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006e38:	f002 fb5c 	bl	80094f4 <vPortExitCritical>
				return pdPASS;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e063      	b.n	8006f08 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d103      	bne.n	8006e4e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e46:	f002 fb55 	bl	80094f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	e05c      	b.n	8006f08 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d106      	bne.n	8006e62 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e54:	f107 0314 	add.w	r3, r7, #20
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f001 fb0f 	bl	800847c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e62:	f002 fb47 	bl	80094f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e66:	f001 f819 	bl	8007e9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e6a:	f002 fb13 	bl	8009494 <vPortEnterCritical>
 8006e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e74:	b25b      	sxtb	r3, r3
 8006e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e7a:	d103      	bne.n	8006e84 <xQueueGenericSend+0x16c>
 8006e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e8a:	b25b      	sxtb	r3, r3
 8006e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e90:	d103      	bne.n	8006e9a <xQueueGenericSend+0x182>
 8006e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e9a:	f002 fb2b 	bl	80094f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e9e:	1d3a      	adds	r2, r7, #4
 8006ea0:	f107 0314 	add.w	r3, r7, #20
 8006ea4:	4611      	mov	r1, r2
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f001 fafe 	bl	80084a8 <xTaskCheckForTimeOut>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d124      	bne.n	8006efc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006eb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006eb4:	f000 fcf5 	bl	80078a2 <prvIsQueueFull>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d018      	beq.n	8006ef0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec0:	3310      	adds	r3, #16
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	4611      	mov	r1, r2
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f001 fa22 	bl	8008310 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006ecc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ece:	f000 fc80 	bl	80077d2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006ed2:	f001 f829 	bl	8007f28 <xTaskResumeAll>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f47f af7c 	bne.w	8006dd6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006ede:	4b0c      	ldr	r3, [pc, #48]	; (8006f10 <xQueueGenericSend+0x1f8>)
 8006ee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ee4:	601a      	str	r2, [r3, #0]
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	f3bf 8f6f 	isb	sy
 8006eee:	e772      	b.n	8006dd6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ef0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ef2:	f000 fc6e 	bl	80077d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ef6:	f001 f817 	bl	8007f28 <xTaskResumeAll>
 8006efa:	e76c      	b.n	8006dd6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006efc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006efe:	f000 fc68 	bl	80077d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f02:	f001 f811 	bl	8007f28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006f06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3738      	adds	r7, #56	; 0x38
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	e000ed04 	.word	0xe000ed04

08006f14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b090      	sub	sp, #64	; 0x40
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	607a      	str	r2, [r7, #4]
 8006f20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10a      	bne.n	8006f42 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f30:	f383 8811 	msr	BASEPRI, r3
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f3e:	bf00      	nop
 8006f40:	e7fe      	b.n	8006f40 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d103      	bne.n	8006f50 <xQueueGenericSendFromISR+0x3c>
 8006f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d101      	bne.n	8006f54 <xQueueGenericSendFromISR+0x40>
 8006f50:	2301      	movs	r3, #1
 8006f52:	e000      	b.n	8006f56 <xQueueGenericSendFromISR+0x42>
 8006f54:	2300      	movs	r3, #0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10a      	bne.n	8006f70 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5e:	f383 8811 	msr	BASEPRI, r3
 8006f62:	f3bf 8f6f 	isb	sy
 8006f66:	f3bf 8f4f 	dsb	sy
 8006f6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f6c:	bf00      	nop
 8006f6e:	e7fe      	b.n	8006f6e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d103      	bne.n	8006f7e <xQueueGenericSendFromISR+0x6a>
 8006f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d101      	bne.n	8006f82 <xQueueGenericSendFromISR+0x6e>
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e000      	b.n	8006f84 <xQueueGenericSendFromISR+0x70>
 8006f82:	2300      	movs	r3, #0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10a      	bne.n	8006f9e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8c:	f383 8811 	msr	BASEPRI, r3
 8006f90:	f3bf 8f6f 	isb	sy
 8006f94:	f3bf 8f4f 	dsb	sy
 8006f98:	623b      	str	r3, [r7, #32]
}
 8006f9a:	bf00      	nop
 8006f9c:	e7fe      	b.n	8006f9c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f9e:	f002 fc37 	bl	8009810 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006fa2:	f3ef 8211 	mrs	r2, BASEPRI
 8006fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006faa:	f383 8811 	msr	BASEPRI, r3
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	f3bf 8f4f 	dsb	sy
 8006fb6:	61fa      	str	r2, [r7, #28]
 8006fb8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006fba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006fbc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d302      	bcc.n	8006fd0 <xQueueGenericSendFromISR+0xbc>
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	d12f      	bne.n	8007030 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fde:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006fe0:	683a      	ldr	r2, [r7, #0]
 8006fe2:	68b9      	ldr	r1, [r7, #8]
 8006fe4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006fe6:	f000 fb64 	bl	80076b2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006fea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff2:	d112      	bne.n	800701a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d016      	beq.n	800702a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffe:	3324      	adds	r3, #36	; 0x24
 8007000:	4618      	mov	r0, r3
 8007002:	f001 f9d5 	bl	80083b0 <xTaskRemoveFromEventList>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00e      	beq.n	800702a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00b      	beq.n	800702a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2201      	movs	r2, #1
 8007016:	601a      	str	r2, [r3, #0]
 8007018:	e007      	b.n	800702a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800701a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800701e:	3301      	adds	r3, #1
 8007020:	b2db      	uxtb	r3, r3
 8007022:	b25a      	sxtb	r2, r3
 8007024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007026:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800702a:	2301      	movs	r3, #1
 800702c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800702e:	e001      	b.n	8007034 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007030:	2300      	movs	r3, #0
 8007032:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007036:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800703e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007042:	4618      	mov	r0, r3
 8007044:	3740      	adds	r7, #64	; 0x40
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b08e      	sub	sp, #56	; 0x38
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
 8007052:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705a:	2b00      	cmp	r3, #0
 800705c:	d10a      	bne.n	8007074 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800705e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007062:	f383 8811 	msr	BASEPRI, r3
 8007066:	f3bf 8f6f 	isb	sy
 800706a:	f3bf 8f4f 	dsb	sy
 800706e:	623b      	str	r3, [r7, #32]
}
 8007070:	bf00      	nop
 8007072:	e7fe      	b.n	8007072 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00a      	beq.n	8007092 <xQueueGiveFromISR+0x48>
	__asm volatile
 800707c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007080:	f383 8811 	msr	BASEPRI, r3
 8007084:	f3bf 8f6f 	isb	sy
 8007088:	f3bf 8f4f 	dsb	sy
 800708c:	61fb      	str	r3, [r7, #28]
}
 800708e:	bf00      	nop
 8007090:	e7fe      	b.n	8007090 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d103      	bne.n	80070a2 <xQueueGiveFromISR+0x58>
 800709a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d101      	bne.n	80070a6 <xQueueGiveFromISR+0x5c>
 80070a2:	2301      	movs	r3, #1
 80070a4:	e000      	b.n	80070a8 <xQueueGiveFromISR+0x5e>
 80070a6:	2300      	movs	r3, #0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10a      	bne.n	80070c2 <xQueueGiveFromISR+0x78>
	__asm volatile
 80070ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b0:	f383 8811 	msr	BASEPRI, r3
 80070b4:	f3bf 8f6f 	isb	sy
 80070b8:	f3bf 8f4f 	dsb	sy
 80070bc:	61bb      	str	r3, [r7, #24]
}
 80070be:	bf00      	nop
 80070c0:	e7fe      	b.n	80070c0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070c2:	f002 fba5 	bl	8009810 <vPortValidateInterruptPriority>
	__asm volatile
 80070c6:	f3ef 8211 	mrs	r2, BASEPRI
 80070ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ce:	f383 8811 	msr	BASEPRI, r3
 80070d2:	f3bf 8f6f 	isb	sy
 80070d6:	f3bf 8f4f 	dsb	sy
 80070da:	617a      	str	r2, [r7, #20]
 80070dc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80070de:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80070e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80070e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d22b      	bcs.n	800714a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80070f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80070fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fe:	1c5a      	adds	r2, r3, #1
 8007100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007102:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007104:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800710c:	d112      	bne.n	8007134 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800710e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007112:	2b00      	cmp	r3, #0
 8007114:	d016      	beq.n	8007144 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007118:	3324      	adds	r3, #36	; 0x24
 800711a:	4618      	mov	r0, r3
 800711c:	f001 f948 	bl	80083b0 <xTaskRemoveFromEventList>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00e      	beq.n	8007144 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00b      	beq.n	8007144 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	2201      	movs	r2, #1
 8007130:	601a      	str	r2, [r3, #0]
 8007132:	e007      	b.n	8007144 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007134:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007138:	3301      	adds	r3, #1
 800713a:	b2db      	uxtb	r3, r3
 800713c:	b25a      	sxtb	r2, r3
 800713e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007144:	2301      	movs	r3, #1
 8007146:	637b      	str	r3, [r7, #52]	; 0x34
 8007148:	e001      	b.n	800714e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800714a:	2300      	movs	r3, #0
 800714c:	637b      	str	r3, [r7, #52]	; 0x34
 800714e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007150:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f383 8811 	msr	BASEPRI, r3
}
 8007158:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800715a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800715c:	4618      	mov	r0, r3
 800715e:	3738      	adds	r7, #56	; 0x38
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b08c      	sub	sp, #48	; 0x30
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007170:	2300      	movs	r3, #0
 8007172:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717a:	2b00      	cmp	r3, #0
 800717c:	d10a      	bne.n	8007194 <xQueueReceive+0x30>
	__asm volatile
 800717e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007182:	f383 8811 	msr	BASEPRI, r3
 8007186:	f3bf 8f6f 	isb	sy
 800718a:	f3bf 8f4f 	dsb	sy
 800718e:	623b      	str	r3, [r7, #32]
}
 8007190:	bf00      	nop
 8007192:	e7fe      	b.n	8007192 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d103      	bne.n	80071a2 <xQueueReceive+0x3e>
 800719a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <xQueueReceive+0x42>
 80071a2:	2301      	movs	r3, #1
 80071a4:	e000      	b.n	80071a8 <xQueueReceive+0x44>
 80071a6:	2300      	movs	r3, #0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d10a      	bne.n	80071c2 <xQueueReceive+0x5e>
	__asm volatile
 80071ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b0:	f383 8811 	msr	BASEPRI, r3
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	61fb      	str	r3, [r7, #28]
}
 80071be:	bf00      	nop
 80071c0:	e7fe      	b.n	80071c0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071c2:	f001 fb0f 	bl	80087e4 <xTaskGetSchedulerState>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d102      	bne.n	80071d2 <xQueueReceive+0x6e>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d101      	bne.n	80071d6 <xQueueReceive+0x72>
 80071d2:	2301      	movs	r3, #1
 80071d4:	e000      	b.n	80071d8 <xQueueReceive+0x74>
 80071d6:	2300      	movs	r3, #0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10a      	bne.n	80071f2 <xQueueReceive+0x8e>
	__asm volatile
 80071dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e0:	f383 8811 	msr	BASEPRI, r3
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	61bb      	str	r3, [r7, #24]
}
 80071ee:	bf00      	nop
 80071f0:	e7fe      	b.n	80071f0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80071f2:	f002 f94f 	bl	8009494 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071fa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d01f      	beq.n	8007242 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007202:	68b9      	ldr	r1, [r7, #8]
 8007204:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007206:	f000 fabe 	bl	8007786 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800720a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720c:	1e5a      	subs	r2, r3, #1
 800720e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007210:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00f      	beq.n	800723a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800721a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721c:	3310      	adds	r3, #16
 800721e:	4618      	mov	r0, r3
 8007220:	f001 f8c6 	bl	80083b0 <xTaskRemoveFromEventList>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d007      	beq.n	800723a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800722a:	4b3d      	ldr	r3, [pc, #244]	; (8007320 <xQueueReceive+0x1bc>)
 800722c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007230:	601a      	str	r2, [r3, #0]
 8007232:	f3bf 8f4f 	dsb	sy
 8007236:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800723a:	f002 f95b 	bl	80094f4 <vPortExitCritical>
				return pdPASS;
 800723e:	2301      	movs	r3, #1
 8007240:	e069      	b.n	8007316 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d103      	bne.n	8007250 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007248:	f002 f954 	bl	80094f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800724c:	2300      	movs	r3, #0
 800724e:	e062      	b.n	8007316 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007252:	2b00      	cmp	r3, #0
 8007254:	d106      	bne.n	8007264 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007256:	f107 0310 	add.w	r3, r7, #16
 800725a:	4618      	mov	r0, r3
 800725c:	f001 f90e 	bl	800847c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007260:	2301      	movs	r3, #1
 8007262:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007264:	f002 f946 	bl	80094f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007268:	f000 fe18 	bl	8007e9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800726c:	f002 f912 	bl	8009494 <vPortEnterCritical>
 8007270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007272:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007276:	b25b      	sxtb	r3, r3
 8007278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800727c:	d103      	bne.n	8007286 <xQueueReceive+0x122>
 800727e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007280:	2200      	movs	r2, #0
 8007282:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007288:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800728c:	b25b      	sxtb	r3, r3
 800728e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007292:	d103      	bne.n	800729c <xQueueReceive+0x138>
 8007294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007296:	2200      	movs	r2, #0
 8007298:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800729c:	f002 f92a 	bl	80094f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072a0:	1d3a      	adds	r2, r7, #4
 80072a2:	f107 0310 	add.w	r3, r7, #16
 80072a6:	4611      	mov	r1, r2
 80072a8:	4618      	mov	r0, r3
 80072aa:	f001 f8fd 	bl	80084a8 <xTaskCheckForTimeOut>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d123      	bne.n	80072fc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072b6:	f000 fade 	bl	8007876 <prvIsQueueEmpty>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d017      	beq.n	80072f0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80072c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c2:	3324      	adds	r3, #36	; 0x24
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	4611      	mov	r1, r2
 80072c8:	4618      	mov	r0, r3
 80072ca:	f001 f821 	bl	8008310 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80072ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072d0:	f000 fa7f 	bl	80077d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80072d4:	f000 fe28 	bl	8007f28 <xTaskResumeAll>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d189      	bne.n	80071f2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80072de:	4b10      	ldr	r3, [pc, #64]	; (8007320 <xQueueReceive+0x1bc>)
 80072e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072e4:	601a      	str	r2, [r3, #0]
 80072e6:	f3bf 8f4f 	dsb	sy
 80072ea:	f3bf 8f6f 	isb	sy
 80072ee:	e780      	b.n	80071f2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80072f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072f2:	f000 fa6e 	bl	80077d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80072f6:	f000 fe17 	bl	8007f28 <xTaskResumeAll>
 80072fa:	e77a      	b.n	80071f2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80072fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072fe:	f000 fa68 	bl	80077d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007302:	f000 fe11 	bl	8007f28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007306:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007308:	f000 fab5 	bl	8007876 <prvIsQueueEmpty>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	f43f af6f 	beq.w	80071f2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007314:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007316:	4618      	mov	r0, r3
 8007318:	3730      	adds	r7, #48	; 0x30
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	e000ed04 	.word	0xe000ed04

08007324 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b08e      	sub	sp, #56	; 0x38
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800732e:	2300      	movs	r3, #0
 8007330:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007336:	2300      	movs	r3, #0
 8007338:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800733a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10a      	bne.n	8007356 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007344:	f383 8811 	msr	BASEPRI, r3
 8007348:	f3bf 8f6f 	isb	sy
 800734c:	f3bf 8f4f 	dsb	sy
 8007350:	623b      	str	r3, [r7, #32]
}
 8007352:	bf00      	nop
 8007354:	e7fe      	b.n	8007354 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00a      	beq.n	8007374 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800735e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007362:	f383 8811 	msr	BASEPRI, r3
 8007366:	f3bf 8f6f 	isb	sy
 800736a:	f3bf 8f4f 	dsb	sy
 800736e:	61fb      	str	r3, [r7, #28]
}
 8007370:	bf00      	nop
 8007372:	e7fe      	b.n	8007372 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007374:	f001 fa36 	bl	80087e4 <xTaskGetSchedulerState>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d102      	bne.n	8007384 <xQueueSemaphoreTake+0x60>
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d101      	bne.n	8007388 <xQueueSemaphoreTake+0x64>
 8007384:	2301      	movs	r3, #1
 8007386:	e000      	b.n	800738a <xQueueSemaphoreTake+0x66>
 8007388:	2300      	movs	r3, #0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d10a      	bne.n	80073a4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800738e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007392:	f383 8811 	msr	BASEPRI, r3
 8007396:	f3bf 8f6f 	isb	sy
 800739a:	f3bf 8f4f 	dsb	sy
 800739e:	61bb      	str	r3, [r7, #24]
}
 80073a0:	bf00      	nop
 80073a2:	e7fe      	b.n	80073a2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80073a4:	f002 f876 	bl	8009494 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80073a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80073ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d024      	beq.n	80073fe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80073b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b6:	1e5a      	subs	r2, r3, #1
 80073b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d104      	bne.n	80073ce <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80073c4:	f001 fb84 	bl	8008ad0 <pvTaskIncrementMutexHeldCount>
 80073c8:	4602      	mov	r2, r0
 80073ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073cc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00f      	beq.n	80073f6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d8:	3310      	adds	r3, #16
 80073da:	4618      	mov	r0, r3
 80073dc:	f000 ffe8 	bl	80083b0 <xTaskRemoveFromEventList>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d007      	beq.n	80073f6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80073e6:	4b54      	ldr	r3, [pc, #336]	; (8007538 <xQueueSemaphoreTake+0x214>)
 80073e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073ec:	601a      	str	r2, [r3, #0]
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80073f6:	f002 f87d 	bl	80094f4 <vPortExitCritical>
				return pdPASS;
 80073fa:	2301      	movs	r3, #1
 80073fc:	e097      	b.n	800752e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d111      	bne.n	8007428 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00a      	beq.n	8007420 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800740a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740e:	f383 8811 	msr	BASEPRI, r3
 8007412:	f3bf 8f6f 	isb	sy
 8007416:	f3bf 8f4f 	dsb	sy
 800741a:	617b      	str	r3, [r7, #20]
}
 800741c:	bf00      	nop
 800741e:	e7fe      	b.n	800741e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007420:	f002 f868 	bl	80094f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007424:	2300      	movs	r3, #0
 8007426:	e082      	b.n	800752e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800742a:	2b00      	cmp	r3, #0
 800742c:	d106      	bne.n	800743c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800742e:	f107 030c 	add.w	r3, r7, #12
 8007432:	4618      	mov	r0, r3
 8007434:	f001 f822 	bl	800847c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007438:	2301      	movs	r3, #1
 800743a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800743c:	f002 f85a 	bl	80094f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007440:	f000 fd2c 	bl	8007e9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007444:	f002 f826 	bl	8009494 <vPortEnterCritical>
 8007448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800744e:	b25b      	sxtb	r3, r3
 8007450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007454:	d103      	bne.n	800745e <xQueueSemaphoreTake+0x13a>
 8007456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007458:	2200      	movs	r2, #0
 800745a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800745e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007460:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007464:	b25b      	sxtb	r3, r3
 8007466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800746a:	d103      	bne.n	8007474 <xQueueSemaphoreTake+0x150>
 800746c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800746e:	2200      	movs	r2, #0
 8007470:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007474:	f002 f83e 	bl	80094f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007478:	463a      	mov	r2, r7
 800747a:	f107 030c 	add.w	r3, r7, #12
 800747e:	4611      	mov	r1, r2
 8007480:	4618      	mov	r0, r3
 8007482:	f001 f811 	bl	80084a8 <xTaskCheckForTimeOut>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d132      	bne.n	80074f2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800748c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800748e:	f000 f9f2 	bl	8007876 <prvIsQueueEmpty>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d026      	beq.n	80074e6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d109      	bne.n	80074b4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80074a0:	f001 fff8 	bl	8009494 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80074a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	4618      	mov	r0, r3
 80074aa:	f001 f9b9 	bl	8008820 <xTaskPriorityInherit>
 80074ae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80074b0:	f002 f820 	bl	80094f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80074b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b6:	3324      	adds	r3, #36	; 0x24
 80074b8:	683a      	ldr	r2, [r7, #0]
 80074ba:	4611      	mov	r1, r2
 80074bc:	4618      	mov	r0, r3
 80074be:	f000 ff27 	bl	8008310 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80074c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80074c4:	f000 f985 	bl	80077d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80074c8:	f000 fd2e 	bl	8007f28 <xTaskResumeAll>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	f47f af68 	bne.w	80073a4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80074d4:	4b18      	ldr	r3, [pc, #96]	; (8007538 <xQueueSemaphoreTake+0x214>)
 80074d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074da:	601a      	str	r2, [r3, #0]
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	f3bf 8f6f 	isb	sy
 80074e4:	e75e      	b.n	80073a4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80074e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80074e8:	f000 f973 	bl	80077d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074ec:	f000 fd1c 	bl	8007f28 <xTaskResumeAll>
 80074f0:	e758      	b.n	80073a4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80074f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80074f4:	f000 f96d 	bl	80077d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074f8:	f000 fd16 	bl	8007f28 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80074fe:	f000 f9ba 	bl	8007876 <prvIsQueueEmpty>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	f43f af4d 	beq.w	80073a4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800750a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00d      	beq.n	800752c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007510:	f001 ffc0 	bl	8009494 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007514:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007516:	f000 f8b4 	bl	8007682 <prvGetDisinheritPriorityAfterTimeout>
 800751a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800751c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007522:	4618      	mov	r0, r3
 8007524:	f001 fa52 	bl	80089cc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007528:	f001 ffe4 	bl	80094f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800752c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800752e:	4618      	mov	r0, r3
 8007530:	3738      	adds	r7, #56	; 0x38
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	e000ed04 	.word	0xe000ed04

0800753c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b08e      	sub	sp, #56	; 0x38
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800754c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754e:	2b00      	cmp	r3, #0
 8007550:	d10a      	bne.n	8007568 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007556:	f383 8811 	msr	BASEPRI, r3
 800755a:	f3bf 8f6f 	isb	sy
 800755e:	f3bf 8f4f 	dsb	sy
 8007562:	623b      	str	r3, [r7, #32]
}
 8007564:	bf00      	nop
 8007566:	e7fe      	b.n	8007566 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d103      	bne.n	8007576 <xQueueReceiveFromISR+0x3a>
 800756e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007572:	2b00      	cmp	r3, #0
 8007574:	d101      	bne.n	800757a <xQueueReceiveFromISR+0x3e>
 8007576:	2301      	movs	r3, #1
 8007578:	e000      	b.n	800757c <xQueueReceiveFromISR+0x40>
 800757a:	2300      	movs	r3, #0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d10a      	bne.n	8007596 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007584:	f383 8811 	msr	BASEPRI, r3
 8007588:	f3bf 8f6f 	isb	sy
 800758c:	f3bf 8f4f 	dsb	sy
 8007590:	61fb      	str	r3, [r7, #28]
}
 8007592:	bf00      	nop
 8007594:	e7fe      	b.n	8007594 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007596:	f002 f93b 	bl	8009810 <vPortValidateInterruptPriority>
	__asm volatile
 800759a:	f3ef 8211 	mrs	r2, BASEPRI
 800759e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a2:	f383 8811 	msr	BASEPRI, r3
 80075a6:	f3bf 8f6f 	isb	sy
 80075aa:	f3bf 8f4f 	dsb	sy
 80075ae:	61ba      	str	r2, [r7, #24]
 80075b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80075b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80075b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d02f      	beq.n	8007622 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80075c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80075cc:	68b9      	ldr	r1, [r7, #8]
 80075ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075d0:	f000 f8d9 	bl	8007786 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80075d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d6:	1e5a      	subs	r2, r3, #1
 80075d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075da:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80075dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80075e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075e4:	d112      	bne.n	800760c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d016      	beq.n	800761c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f0:	3310      	adds	r3, #16
 80075f2:	4618      	mov	r0, r3
 80075f4:	f000 fedc 	bl	80083b0 <xTaskRemoveFromEventList>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00e      	beq.n	800761c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00b      	beq.n	800761c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	601a      	str	r2, [r3, #0]
 800760a:	e007      	b.n	800761c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800760c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007610:	3301      	adds	r3, #1
 8007612:	b2db      	uxtb	r3, r3
 8007614:	b25a      	sxtb	r2, r3
 8007616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800761c:	2301      	movs	r3, #1
 800761e:	637b      	str	r3, [r7, #52]	; 0x34
 8007620:	e001      	b.n	8007626 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007622:	2300      	movs	r3, #0
 8007624:	637b      	str	r3, [r7, #52]	; 0x34
 8007626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007628:	613b      	str	r3, [r7, #16]
	__asm volatile
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	f383 8811 	msr	BASEPRI, r3
}
 8007630:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007634:	4618      	mov	r0, r3
 8007636:	3738      	adds	r7, #56	; 0x38
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d10a      	bne.n	8007664 <vQueueDelete+0x28>
	__asm volatile
 800764e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007652:	f383 8811 	msr	BASEPRI, r3
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	60bb      	str	r3, [r7, #8]
}
 8007660:	bf00      	nop
 8007662:	e7fe      	b.n	8007662 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007664:	68f8      	ldr	r0, [r7, #12]
 8007666:	f000 f95f 	bl	8007928 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007670:	2b00      	cmp	r3, #0
 8007672:	d102      	bne.n	800767a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f002 f9d7 	bl	8009a28 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800767a:	bf00      	nop
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007682:	b480      	push	{r7}
 8007684:	b085      	sub	sp, #20
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768e:	2b00      	cmp	r3, #0
 8007690:	d006      	beq.n	80076a0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800769c:	60fb      	str	r3, [r7, #12]
 800769e:	e001      	b.n	80076a4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80076a0:	2300      	movs	r3, #0
 80076a2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80076a4:	68fb      	ldr	r3, [r7, #12]
	}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3714      	adds	r7, #20
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr

080076b2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b086      	sub	sp, #24
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	60f8      	str	r0, [r7, #12]
 80076ba:	60b9      	str	r1, [r7, #8]
 80076bc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80076be:	2300      	movs	r3, #0
 80076c0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10d      	bne.n	80076ec <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d14d      	bne.n	8007774 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	4618      	mov	r0, r3
 80076de:	f001 f907 	bl	80088f0 <xTaskPriorityDisinherit>
 80076e2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	609a      	str	r2, [r3, #8]
 80076ea:	e043      	b.n	8007774 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d119      	bne.n	8007726 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6858      	ldr	r0, [r3, #4]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076fa:	461a      	mov	r2, r3
 80076fc:	68b9      	ldr	r1, [r7, #8]
 80076fe:	f005 f9e7 	bl	800cad0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	685a      	ldr	r2, [r3, #4]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770a:	441a      	add	r2, r3
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	685a      	ldr	r2, [r3, #4]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	429a      	cmp	r2, r3
 800771a:	d32b      	bcc.n	8007774 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	605a      	str	r2, [r3, #4]
 8007724:	e026      	b.n	8007774 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	68d8      	ldr	r0, [r3, #12]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772e:	461a      	mov	r2, r3
 8007730:	68b9      	ldr	r1, [r7, #8]
 8007732:	f005 f9cd 	bl	800cad0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	68da      	ldr	r2, [r3, #12]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773e:	425b      	negs	r3, r3
 8007740:	441a      	add	r2, r3
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	68da      	ldr	r2, [r3, #12]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	429a      	cmp	r2, r3
 8007750:	d207      	bcs.n	8007762 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	689a      	ldr	r2, [r3, #8]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775a:	425b      	negs	r3, r3
 800775c:	441a      	add	r2, r3
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2b02      	cmp	r3, #2
 8007766:	d105      	bne.n	8007774 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d002      	beq.n	8007774 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	3b01      	subs	r3, #1
 8007772:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	1c5a      	adds	r2, r3, #1
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800777c:	697b      	ldr	r3, [r7, #20]
}
 800777e:	4618      	mov	r0, r3
 8007780:	3718      	adds	r7, #24
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b082      	sub	sp, #8
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
 800778e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007794:	2b00      	cmp	r3, #0
 8007796:	d018      	beq.n	80077ca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	68da      	ldr	r2, [r3, #12]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a0:	441a      	add	r2, r3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	68da      	ldr	r2, [r3, #12]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d303      	bcc.n	80077ba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	68d9      	ldr	r1, [r3, #12]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c2:	461a      	mov	r2, r3
 80077c4:	6838      	ldr	r0, [r7, #0]
 80077c6:	f005 f983 	bl	800cad0 <memcpy>
	}
}
 80077ca:	bf00      	nop
 80077cc:	3708      	adds	r7, #8
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b084      	sub	sp, #16
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80077da:	f001 fe5b 	bl	8009494 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077e4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80077e6:	e011      	b.n	800780c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d012      	beq.n	8007816 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	3324      	adds	r3, #36	; 0x24
 80077f4:	4618      	mov	r0, r3
 80077f6:	f000 fddb 	bl	80083b0 <xTaskRemoveFromEventList>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d001      	beq.n	8007804 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007800:	f000 feb4 	bl	800856c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007804:	7bfb      	ldrb	r3, [r7, #15]
 8007806:	3b01      	subs	r3, #1
 8007808:	b2db      	uxtb	r3, r3
 800780a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800780c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007810:	2b00      	cmp	r3, #0
 8007812:	dce9      	bgt.n	80077e8 <prvUnlockQueue+0x16>
 8007814:	e000      	b.n	8007818 <prvUnlockQueue+0x46>
					break;
 8007816:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	22ff      	movs	r2, #255	; 0xff
 800781c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007820:	f001 fe68 	bl	80094f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007824:	f001 fe36 	bl	8009494 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800782e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007830:	e011      	b.n	8007856 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d012      	beq.n	8007860 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	3310      	adds	r3, #16
 800783e:	4618      	mov	r0, r3
 8007840:	f000 fdb6 	bl	80083b0 <xTaskRemoveFromEventList>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d001      	beq.n	800784e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800784a:	f000 fe8f 	bl	800856c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800784e:	7bbb      	ldrb	r3, [r7, #14]
 8007850:	3b01      	subs	r3, #1
 8007852:	b2db      	uxtb	r3, r3
 8007854:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007856:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800785a:	2b00      	cmp	r3, #0
 800785c:	dce9      	bgt.n	8007832 <prvUnlockQueue+0x60>
 800785e:	e000      	b.n	8007862 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007860:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	22ff      	movs	r2, #255	; 0xff
 8007866:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800786a:	f001 fe43 	bl	80094f4 <vPortExitCritical>
}
 800786e:	bf00      	nop
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b084      	sub	sp, #16
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800787e:	f001 fe09 	bl	8009494 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007886:	2b00      	cmp	r3, #0
 8007888:	d102      	bne.n	8007890 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800788a:	2301      	movs	r3, #1
 800788c:	60fb      	str	r3, [r7, #12]
 800788e:	e001      	b.n	8007894 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007890:	2300      	movs	r3, #0
 8007892:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007894:	f001 fe2e 	bl	80094f4 <vPortExitCritical>

	return xReturn;
 8007898:	68fb      	ldr	r3, [r7, #12]
}
 800789a:	4618      	mov	r0, r3
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b084      	sub	sp, #16
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80078aa:	f001 fdf3 	bl	8009494 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d102      	bne.n	80078c0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80078ba:	2301      	movs	r3, #1
 80078bc:	60fb      	str	r3, [r7, #12]
 80078be:	e001      	b.n	80078c4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80078c0:	2300      	movs	r3, #0
 80078c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80078c4:	f001 fe16 	bl	80094f4 <vPortExitCritical>

	return xReturn;
 80078c8:	68fb      	ldr	r3, [r7, #12]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
	...

080078d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80078d4:	b480      	push	{r7}
 80078d6:	b085      	sub	sp, #20
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80078de:	2300      	movs	r3, #0
 80078e0:	60fb      	str	r3, [r7, #12]
 80078e2:	e014      	b.n	800790e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80078e4:	4a0f      	ldr	r2, [pc, #60]	; (8007924 <vQueueAddToRegistry+0x50>)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d10b      	bne.n	8007908 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80078f0:	490c      	ldr	r1, [pc, #48]	; (8007924 <vQueueAddToRegistry+0x50>)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	683a      	ldr	r2, [r7, #0]
 80078f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80078fa:	4a0a      	ldr	r2, [pc, #40]	; (8007924 <vQueueAddToRegistry+0x50>)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	00db      	lsls	r3, r3, #3
 8007900:	4413      	add	r3, r2
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007906:	e006      	b.n	8007916 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	3301      	adds	r3, #1
 800790c:	60fb      	str	r3, [r7, #12]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2b07      	cmp	r3, #7
 8007912:	d9e7      	bls.n	80078e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007914:	bf00      	nop
 8007916:	bf00      	nop
 8007918:	3714      	adds	r7, #20
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	20000ad8 	.word	0x20000ad8

08007928 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007928:	b480      	push	{r7}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007930:	2300      	movs	r3, #0
 8007932:	60fb      	str	r3, [r7, #12]
 8007934:	e016      	b.n	8007964 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007936:	4a10      	ldr	r2, [pc, #64]	; (8007978 <vQueueUnregisterQueue+0x50>)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	00db      	lsls	r3, r3, #3
 800793c:	4413      	add	r3, r2
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	429a      	cmp	r2, r3
 8007944:	d10b      	bne.n	800795e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007946:	4a0c      	ldr	r2, [pc, #48]	; (8007978 <vQueueUnregisterQueue+0x50>)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2100      	movs	r1, #0
 800794c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007950:	4a09      	ldr	r2, [pc, #36]	; (8007978 <vQueueUnregisterQueue+0x50>)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	00db      	lsls	r3, r3, #3
 8007956:	4413      	add	r3, r2
 8007958:	2200      	movs	r2, #0
 800795a:	605a      	str	r2, [r3, #4]
				break;
 800795c:	e006      	b.n	800796c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	3301      	adds	r3, #1
 8007962:	60fb      	str	r3, [r7, #12]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2b07      	cmp	r3, #7
 8007968:	d9e5      	bls.n	8007936 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800796a:	bf00      	nop
 800796c:	bf00      	nop
 800796e:	3714      	adds	r7, #20
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr
 8007978:	20000ad8 	.word	0x20000ad8

0800797c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800797c:	b580      	push	{r7, lr}
 800797e:	b086      	sub	sp, #24
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800798c:	f001 fd82 	bl	8009494 <vPortEnterCritical>
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007996:	b25b      	sxtb	r3, r3
 8007998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800799c:	d103      	bne.n	80079a6 <vQueueWaitForMessageRestricted+0x2a>
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079ac:	b25b      	sxtb	r3, r3
 80079ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079b2:	d103      	bne.n	80079bc <vQueueWaitForMessageRestricted+0x40>
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079bc:	f001 fd9a 	bl	80094f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d106      	bne.n	80079d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	3324      	adds	r3, #36	; 0x24
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	68b9      	ldr	r1, [r7, #8]
 80079d0:	4618      	mov	r0, r3
 80079d2:	f000 fcc1 	bl	8008358 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80079d6:	6978      	ldr	r0, [r7, #20]
 80079d8:	f7ff fefb 	bl	80077d2 <prvUnlockQueue>
	}
 80079dc:	bf00      	nop
 80079de:	3718      	adds	r7, #24
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b08e      	sub	sp, #56	; 0x38
 80079e8:	af04      	add	r7, sp, #16
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	607a      	str	r2, [r7, #4]
 80079f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80079f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d10a      	bne.n	8007a0e <xTaskCreateStatic+0x2a>
	__asm volatile
 80079f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fc:	f383 8811 	msr	BASEPRI, r3
 8007a00:	f3bf 8f6f 	isb	sy
 8007a04:	f3bf 8f4f 	dsb	sy
 8007a08:	623b      	str	r3, [r7, #32]
}
 8007a0a:	bf00      	nop
 8007a0c:	e7fe      	b.n	8007a0c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d10a      	bne.n	8007a2a <xTaskCreateStatic+0x46>
	__asm volatile
 8007a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a18:	f383 8811 	msr	BASEPRI, r3
 8007a1c:	f3bf 8f6f 	isb	sy
 8007a20:	f3bf 8f4f 	dsb	sy
 8007a24:	61fb      	str	r3, [r7, #28]
}
 8007a26:	bf00      	nop
 8007a28:	e7fe      	b.n	8007a28 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007a2a:	23bc      	movs	r3, #188	; 0xbc
 8007a2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	2bbc      	cmp	r3, #188	; 0xbc
 8007a32:	d00a      	beq.n	8007a4a <xTaskCreateStatic+0x66>
	__asm volatile
 8007a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a38:	f383 8811 	msr	BASEPRI, r3
 8007a3c:	f3bf 8f6f 	isb	sy
 8007a40:	f3bf 8f4f 	dsb	sy
 8007a44:	61bb      	str	r3, [r7, #24]
}
 8007a46:	bf00      	nop
 8007a48:	e7fe      	b.n	8007a48 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007a4a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d01e      	beq.n	8007a90 <xTaskCreateStatic+0xac>
 8007a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d01b      	beq.n	8007a90 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a5a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a60:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a64:	2202      	movs	r2, #2
 8007a66:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	9303      	str	r3, [sp, #12]
 8007a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a70:	9302      	str	r3, [sp, #8]
 8007a72:	f107 0314 	add.w	r3, r7, #20
 8007a76:	9301      	str	r3, [sp, #4]
 8007a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7a:	9300      	str	r3, [sp, #0]
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	68b9      	ldr	r1, [r7, #8]
 8007a82:	68f8      	ldr	r0, [r7, #12]
 8007a84:	f000 f850 	bl	8007b28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a8a:	f000 f8f3 	bl	8007c74 <prvAddNewTaskToReadyList>
 8007a8e:	e001      	b.n	8007a94 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007a90:	2300      	movs	r3, #0
 8007a92:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007a94:	697b      	ldr	r3, [r7, #20]
	}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3728      	adds	r7, #40	; 0x28
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b08c      	sub	sp, #48	; 0x30
 8007aa2:	af04      	add	r7, sp, #16
 8007aa4:	60f8      	str	r0, [r7, #12]
 8007aa6:	60b9      	str	r1, [r7, #8]
 8007aa8:	603b      	str	r3, [r7, #0]
 8007aaa:	4613      	mov	r3, r2
 8007aac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007aae:	88fb      	ldrh	r3, [r7, #6]
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f001 feec 	bl	8009890 <pvPortMalloc>
 8007ab8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00e      	beq.n	8007ade <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007ac0:	20bc      	movs	r0, #188	; 0xbc
 8007ac2:	f001 fee5 	bl	8009890 <pvPortMalloc>
 8007ac6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d003      	beq.n	8007ad6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	697a      	ldr	r2, [r7, #20]
 8007ad2:	631a      	str	r2, [r3, #48]	; 0x30
 8007ad4:	e005      	b.n	8007ae2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007ad6:	6978      	ldr	r0, [r7, #20]
 8007ad8:	f001 ffa6 	bl	8009a28 <vPortFree>
 8007adc:	e001      	b.n	8007ae2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d017      	beq.n	8007b18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007af0:	88fa      	ldrh	r2, [r7, #6]
 8007af2:	2300      	movs	r3, #0
 8007af4:	9303      	str	r3, [sp, #12]
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	9302      	str	r3, [sp, #8]
 8007afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afc:	9301      	str	r3, [sp, #4]
 8007afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b00:	9300      	str	r3, [sp, #0]
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	68b9      	ldr	r1, [r7, #8]
 8007b06:	68f8      	ldr	r0, [r7, #12]
 8007b08:	f000 f80e 	bl	8007b28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b0c:	69f8      	ldr	r0, [r7, #28]
 8007b0e:	f000 f8b1 	bl	8007c74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007b12:	2301      	movs	r3, #1
 8007b14:	61bb      	str	r3, [r7, #24]
 8007b16:	e002      	b.n	8007b1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007b18:	f04f 33ff 	mov.w	r3, #4294967295
 8007b1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007b1e:	69bb      	ldr	r3, [r7, #24]
	}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3720      	adds	r7, #32
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b088      	sub	sp, #32
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	607a      	str	r2, [r7, #4]
 8007b34:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b38:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	461a      	mov	r2, r3
 8007b40:	21a5      	movs	r1, #165	; 0xa5
 8007b42:	f004 ffd3 	bl	800caec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007b50:	3b01      	subs	r3, #1
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	4413      	add	r3, r2
 8007b56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	f023 0307 	bic.w	r3, r3, #7
 8007b5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007b60:	69bb      	ldr	r3, [r7, #24]
 8007b62:	f003 0307 	and.w	r3, r3, #7
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00a      	beq.n	8007b80 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6e:	f383 8811 	msr	BASEPRI, r3
 8007b72:	f3bf 8f6f 	isb	sy
 8007b76:	f3bf 8f4f 	dsb	sy
 8007b7a:	617b      	str	r3, [r7, #20]
}
 8007b7c:	bf00      	nop
 8007b7e:	e7fe      	b.n	8007b7e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d01f      	beq.n	8007bc6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b86:	2300      	movs	r3, #0
 8007b88:	61fb      	str	r3, [r7, #28]
 8007b8a:	e012      	b.n	8007bb2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007b8c:	68ba      	ldr	r2, [r7, #8]
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	4413      	add	r3, r2
 8007b92:	7819      	ldrb	r1, [r3, #0]
 8007b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	4413      	add	r3, r2
 8007b9a:	3334      	adds	r3, #52	; 0x34
 8007b9c:	460a      	mov	r2, r1
 8007b9e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007ba0:	68ba      	ldr	r2, [r7, #8]
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d006      	beq.n	8007bba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	3301      	adds	r3, #1
 8007bb0:	61fb      	str	r3, [r7, #28]
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	2b0f      	cmp	r3, #15
 8007bb6:	d9e9      	bls.n	8007b8c <prvInitialiseNewTask+0x64>
 8007bb8:	e000      	b.n	8007bbc <prvInitialiseNewTask+0x94>
			{
				break;
 8007bba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007bc4:	e003      	b.n	8007bce <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd0:	2b37      	cmp	r3, #55	; 0x37
 8007bd2:	d901      	bls.n	8007bd8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007bd4:	2337      	movs	r3, #55	; 0x37
 8007bd6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bdc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007be2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be6:	2200      	movs	r2, #0
 8007be8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bec:	3304      	adds	r3, #4
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7fe fe56 	bl	80068a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf6:	3318      	adds	r3, #24
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7fe fe51 	bl	80068a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c02:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c12:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c16:	2200      	movs	r2, #0
 8007c18:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c26:	3354      	adds	r3, #84	; 0x54
 8007c28:	2260      	movs	r2, #96	; 0x60
 8007c2a:	2100      	movs	r1, #0
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f004 ff5d 	bl	800caec <memset>
 8007c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c34:	4a0c      	ldr	r2, [pc, #48]	; (8007c68 <prvInitialiseNewTask+0x140>)
 8007c36:	659a      	str	r2, [r3, #88]	; 0x58
 8007c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3a:	4a0c      	ldr	r2, [pc, #48]	; (8007c6c <prvInitialiseNewTask+0x144>)
 8007c3c:	65da      	str	r2, [r3, #92]	; 0x5c
 8007c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c40:	4a0b      	ldr	r2, [pc, #44]	; (8007c70 <prvInitialiseNewTask+0x148>)
 8007c42:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007c44:	683a      	ldr	r2, [r7, #0]
 8007c46:	68f9      	ldr	r1, [r7, #12]
 8007c48:	69b8      	ldr	r0, [r7, #24]
 8007c4a:	f001 faf7 	bl	800923c <pxPortInitialiseStack>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c52:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d002      	beq.n	8007c60 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c5e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c60:	bf00      	nop
 8007c62:	3720      	adds	r7, #32
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	0800d894 	.word	0x0800d894
 8007c6c:	0800d8b4 	.word	0x0800d8b4
 8007c70:	0800d874 	.word	0x0800d874

08007c74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007c7c:	f001 fc0a 	bl	8009494 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007c80:	4b2d      	ldr	r3, [pc, #180]	; (8007d38 <prvAddNewTaskToReadyList+0xc4>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	3301      	adds	r3, #1
 8007c86:	4a2c      	ldr	r2, [pc, #176]	; (8007d38 <prvAddNewTaskToReadyList+0xc4>)
 8007c88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007c8a:	4b2c      	ldr	r3, [pc, #176]	; (8007d3c <prvAddNewTaskToReadyList+0xc8>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d109      	bne.n	8007ca6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007c92:	4a2a      	ldr	r2, [pc, #168]	; (8007d3c <prvAddNewTaskToReadyList+0xc8>)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007c98:	4b27      	ldr	r3, [pc, #156]	; (8007d38 <prvAddNewTaskToReadyList+0xc4>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d110      	bne.n	8007cc2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007ca0:	f000 fcde 	bl	8008660 <prvInitialiseTaskLists>
 8007ca4:	e00d      	b.n	8007cc2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007ca6:	4b26      	ldr	r3, [pc, #152]	; (8007d40 <prvAddNewTaskToReadyList+0xcc>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d109      	bne.n	8007cc2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007cae:	4b23      	ldr	r3, [pc, #140]	; (8007d3c <prvAddNewTaskToReadyList+0xc8>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d802      	bhi.n	8007cc2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007cbc:	4a1f      	ldr	r2, [pc, #124]	; (8007d3c <prvAddNewTaskToReadyList+0xc8>)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007cc2:	4b20      	ldr	r3, [pc, #128]	; (8007d44 <prvAddNewTaskToReadyList+0xd0>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	4a1e      	ldr	r2, [pc, #120]	; (8007d44 <prvAddNewTaskToReadyList+0xd0>)
 8007cca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007ccc:	4b1d      	ldr	r3, [pc, #116]	; (8007d44 <prvAddNewTaskToReadyList+0xd0>)
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cd8:	4b1b      	ldr	r3, [pc, #108]	; (8007d48 <prvAddNewTaskToReadyList+0xd4>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d903      	bls.n	8007ce8 <prvAddNewTaskToReadyList+0x74>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce4:	4a18      	ldr	r2, [pc, #96]	; (8007d48 <prvAddNewTaskToReadyList+0xd4>)
 8007ce6:	6013      	str	r3, [r2, #0]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cec:	4613      	mov	r3, r2
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	4413      	add	r3, r2
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	4a15      	ldr	r2, [pc, #84]	; (8007d4c <prvAddNewTaskToReadyList+0xd8>)
 8007cf6:	441a      	add	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	3304      	adds	r3, #4
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	4610      	mov	r0, r2
 8007d00:	f7fe fddb 	bl	80068ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007d04:	f001 fbf6 	bl	80094f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007d08:	4b0d      	ldr	r3, [pc, #52]	; (8007d40 <prvAddNewTaskToReadyList+0xcc>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d00e      	beq.n	8007d2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007d10:	4b0a      	ldr	r3, [pc, #40]	; (8007d3c <prvAddNewTaskToReadyList+0xc8>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d207      	bcs.n	8007d2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007d1e:	4b0c      	ldr	r3, [pc, #48]	; (8007d50 <prvAddNewTaskToReadyList+0xdc>)
 8007d20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d24:	601a      	str	r2, [r3, #0]
 8007d26:	f3bf 8f4f 	dsb	sy
 8007d2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d2e:	bf00      	nop
 8007d30:	3708      	adds	r7, #8
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	20000fec 	.word	0x20000fec
 8007d3c:	20000b18 	.word	0x20000b18
 8007d40:	20000ff8 	.word	0x20000ff8
 8007d44:	20001008 	.word	0x20001008
 8007d48:	20000ff4 	.word	0x20000ff4
 8007d4c:	20000b1c 	.word	0x20000b1c
 8007d50:	e000ed04 	.word	0xe000ed04

08007d54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d017      	beq.n	8007d96 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007d66:	4b13      	ldr	r3, [pc, #76]	; (8007db4 <vTaskDelay+0x60>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00a      	beq.n	8007d84 <vTaskDelay+0x30>
	__asm volatile
 8007d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d72:	f383 8811 	msr	BASEPRI, r3
 8007d76:	f3bf 8f6f 	isb	sy
 8007d7a:	f3bf 8f4f 	dsb	sy
 8007d7e:	60bb      	str	r3, [r7, #8]
}
 8007d80:	bf00      	nop
 8007d82:	e7fe      	b.n	8007d82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007d84:	f000 f88a 	bl	8007e9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007d88:	2100      	movs	r1, #0
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 feb4 	bl	8008af8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007d90:	f000 f8ca 	bl	8007f28 <xTaskResumeAll>
 8007d94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d107      	bne.n	8007dac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007d9c:	4b06      	ldr	r3, [pc, #24]	; (8007db8 <vTaskDelay+0x64>)
 8007d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007da2:	601a      	str	r2, [r3, #0]
 8007da4:	f3bf 8f4f 	dsb	sy
 8007da8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007dac:	bf00      	nop
 8007dae:	3710      	adds	r7, #16
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	20001014 	.word	0x20001014
 8007db8:	e000ed04 	.word	0xe000ed04

08007dbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b08a      	sub	sp, #40	; 0x28
 8007dc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007dca:	463a      	mov	r2, r7
 8007dcc:	1d39      	adds	r1, r7, #4
 8007dce:	f107 0308 	add.w	r3, r7, #8
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7fe fd10 	bl	80067f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007dd8:	6839      	ldr	r1, [r7, #0]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	68ba      	ldr	r2, [r7, #8]
 8007dde:	9202      	str	r2, [sp, #8]
 8007de0:	9301      	str	r3, [sp, #4]
 8007de2:	2300      	movs	r3, #0
 8007de4:	9300      	str	r3, [sp, #0]
 8007de6:	2300      	movs	r3, #0
 8007de8:	460a      	mov	r2, r1
 8007dea:	4924      	ldr	r1, [pc, #144]	; (8007e7c <vTaskStartScheduler+0xc0>)
 8007dec:	4824      	ldr	r0, [pc, #144]	; (8007e80 <vTaskStartScheduler+0xc4>)
 8007dee:	f7ff fdf9 	bl	80079e4 <xTaskCreateStatic>
 8007df2:	4603      	mov	r3, r0
 8007df4:	4a23      	ldr	r2, [pc, #140]	; (8007e84 <vTaskStartScheduler+0xc8>)
 8007df6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007df8:	4b22      	ldr	r3, [pc, #136]	; (8007e84 <vTaskStartScheduler+0xc8>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d002      	beq.n	8007e06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007e00:	2301      	movs	r3, #1
 8007e02:	617b      	str	r3, [r7, #20]
 8007e04:	e001      	b.n	8007e0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007e06:	2300      	movs	r3, #0
 8007e08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d102      	bne.n	8007e16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007e10:	f000 fec6 	bl	8008ba0 <xTimerCreateTimerTask>
 8007e14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d11b      	bne.n	8007e54 <vTaskStartScheduler+0x98>
	__asm volatile
 8007e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e20:	f383 8811 	msr	BASEPRI, r3
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	613b      	str	r3, [r7, #16]
}
 8007e2e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007e30:	4b15      	ldr	r3, [pc, #84]	; (8007e88 <vTaskStartScheduler+0xcc>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	3354      	adds	r3, #84	; 0x54
 8007e36:	4a15      	ldr	r2, [pc, #84]	; (8007e8c <vTaskStartScheduler+0xd0>)
 8007e38:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007e3a:	4b15      	ldr	r3, [pc, #84]	; (8007e90 <vTaskStartScheduler+0xd4>)
 8007e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8007e40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007e42:	4b14      	ldr	r3, [pc, #80]	; (8007e94 <vTaskStartScheduler+0xd8>)
 8007e44:	2201      	movs	r2, #1
 8007e46:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007e48:	4b13      	ldr	r3, [pc, #76]	; (8007e98 <vTaskStartScheduler+0xdc>)
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007e4e:	f001 fa7f 	bl	8009350 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007e52:	e00e      	b.n	8007e72 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e5a:	d10a      	bne.n	8007e72 <vTaskStartScheduler+0xb6>
	__asm volatile
 8007e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e60:	f383 8811 	msr	BASEPRI, r3
 8007e64:	f3bf 8f6f 	isb	sy
 8007e68:	f3bf 8f4f 	dsb	sy
 8007e6c:	60fb      	str	r3, [r7, #12]
}
 8007e6e:	bf00      	nop
 8007e70:	e7fe      	b.n	8007e70 <vTaskStartScheduler+0xb4>
}
 8007e72:	bf00      	nop
 8007e74:	3718      	adds	r7, #24
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	0800d654 	.word	0x0800d654
 8007e80:	08008585 	.word	0x08008585
 8007e84:	20001010 	.word	0x20001010
 8007e88:	20000b18 	.word	0x20000b18
 8007e8c:	200000b8 	.word	0x200000b8
 8007e90:	2000100c 	.word	0x2000100c
 8007e94:	20000ff8 	.word	0x20000ff8
 8007e98:	20000ff0 	.word	0x20000ff0

08007e9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007ea0:	4b04      	ldr	r3, [pc, #16]	; (8007eb4 <vTaskSuspendAll+0x18>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	4a03      	ldr	r2, [pc, #12]	; (8007eb4 <vTaskSuspendAll+0x18>)
 8007ea8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007eaa:	bf00      	nop
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr
 8007eb4:	20001014 	.word	0x20001014

08007eb8 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8007ec2:	4b14      	ldr	r3, [pc, #80]	; (8007f14 <prvGetExpectedIdleTime+0x5c>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d001      	beq.n	8007ece <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8007ece:	4b12      	ldr	r3, [pc, #72]	; (8007f18 <prvGetExpectedIdleTime+0x60>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d002      	beq.n	8007ede <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	607b      	str	r3, [r7, #4]
 8007edc:	e012      	b.n	8007f04 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8007ede:	4b0f      	ldr	r3, [pc, #60]	; (8007f1c <prvGetExpectedIdleTime+0x64>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d902      	bls.n	8007eec <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	607b      	str	r3, [r7, #4]
 8007eea:	e00b      	b.n	8007f04 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d002      	beq.n	8007ef8 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	607b      	str	r3, [r7, #4]
 8007ef6:	e005      	b.n	8007f04 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8007ef8:	4b09      	ldr	r3, [pc, #36]	; (8007f20 <prvGetExpectedIdleTime+0x68>)
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	4b09      	ldr	r3, [pc, #36]	; (8007f24 <prvGetExpectedIdleTime+0x6c>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	1ad3      	subs	r3, r2, r3
 8007f02:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8007f04:	687b      	ldr	r3, [r7, #4]
	}
 8007f06:	4618      	mov	r0, r3
 8007f08:	370c      	adds	r7, #12
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	20000ff4 	.word	0x20000ff4
 8007f18:	20000b18 	.word	0x20000b18
 8007f1c:	20000b1c 	.word	0x20000b1c
 8007f20:	2000100c 	.word	0x2000100c
 8007f24:	20000ff0 	.word	0x20000ff0

08007f28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007f32:	2300      	movs	r3, #0
 8007f34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007f36:	4b42      	ldr	r3, [pc, #264]	; (8008040 <xTaskResumeAll+0x118>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d10a      	bne.n	8007f54 <xTaskResumeAll+0x2c>
	__asm volatile
 8007f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f42:	f383 8811 	msr	BASEPRI, r3
 8007f46:	f3bf 8f6f 	isb	sy
 8007f4a:	f3bf 8f4f 	dsb	sy
 8007f4e:	603b      	str	r3, [r7, #0]
}
 8007f50:	bf00      	nop
 8007f52:	e7fe      	b.n	8007f52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007f54:	f001 fa9e 	bl	8009494 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007f58:	4b39      	ldr	r3, [pc, #228]	; (8008040 <xTaskResumeAll+0x118>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	3b01      	subs	r3, #1
 8007f5e:	4a38      	ldr	r2, [pc, #224]	; (8008040 <xTaskResumeAll+0x118>)
 8007f60:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f62:	4b37      	ldr	r3, [pc, #220]	; (8008040 <xTaskResumeAll+0x118>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d162      	bne.n	8008030 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007f6a:	4b36      	ldr	r3, [pc, #216]	; (8008044 <xTaskResumeAll+0x11c>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d05e      	beq.n	8008030 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f72:	e02f      	b.n	8007fd4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f74:	4b34      	ldr	r3, [pc, #208]	; (8008048 <xTaskResumeAll+0x120>)
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	3318      	adds	r3, #24
 8007f80:	4618      	mov	r0, r3
 8007f82:	f7fe fcf7 	bl	8006974 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	3304      	adds	r3, #4
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7fe fcf2 	bl	8006974 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f94:	4b2d      	ldr	r3, [pc, #180]	; (800804c <xTaskResumeAll+0x124>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d903      	bls.n	8007fa4 <xTaskResumeAll+0x7c>
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa0:	4a2a      	ldr	r2, [pc, #168]	; (800804c <xTaskResumeAll+0x124>)
 8007fa2:	6013      	str	r3, [r2, #0]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fa8:	4613      	mov	r3, r2
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	4413      	add	r3, r2
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	4a27      	ldr	r2, [pc, #156]	; (8008050 <xTaskResumeAll+0x128>)
 8007fb2:	441a      	add	r2, r3
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	3304      	adds	r3, #4
 8007fb8:	4619      	mov	r1, r3
 8007fba:	4610      	mov	r0, r2
 8007fbc:	f7fe fc7d 	bl	80068ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fc4:	4b23      	ldr	r3, [pc, #140]	; (8008054 <xTaskResumeAll+0x12c>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d302      	bcc.n	8007fd4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007fce:	4b22      	ldr	r3, [pc, #136]	; (8008058 <xTaskResumeAll+0x130>)
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007fd4:	4b1c      	ldr	r3, [pc, #112]	; (8008048 <xTaskResumeAll+0x120>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d1cb      	bne.n	8007f74 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d001      	beq.n	8007fe6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007fe2:	f000 fbdf 	bl	80087a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007fe6:	4b1d      	ldr	r3, [pc, #116]	; (800805c <xTaskResumeAll+0x134>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d010      	beq.n	8008014 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007ff2:	f000 f86f 	bl	80080d4 <xTaskIncrementTick>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d002      	beq.n	8008002 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007ffc:	4b16      	ldr	r3, [pc, #88]	; (8008058 <xTaskResumeAll+0x130>)
 8007ffe:	2201      	movs	r2, #1
 8008000:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	3b01      	subs	r3, #1
 8008006:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d1f1      	bne.n	8007ff2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800800e:	4b13      	ldr	r3, [pc, #76]	; (800805c <xTaskResumeAll+0x134>)
 8008010:	2200      	movs	r2, #0
 8008012:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008014:	4b10      	ldr	r3, [pc, #64]	; (8008058 <xTaskResumeAll+0x130>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d009      	beq.n	8008030 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800801c:	2301      	movs	r3, #1
 800801e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008020:	4b0f      	ldr	r3, [pc, #60]	; (8008060 <xTaskResumeAll+0x138>)
 8008022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008026:	601a      	str	r2, [r3, #0]
 8008028:	f3bf 8f4f 	dsb	sy
 800802c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008030:	f001 fa60 	bl	80094f4 <vPortExitCritical>

	return xAlreadyYielded;
 8008034:	68bb      	ldr	r3, [r7, #8]
}
 8008036:	4618      	mov	r0, r3
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	20001014 	.word	0x20001014
 8008044:	20000fec 	.word	0x20000fec
 8008048:	20000fac 	.word	0x20000fac
 800804c:	20000ff4 	.word	0x20000ff4
 8008050:	20000b1c 	.word	0x20000b1c
 8008054:	20000b18 	.word	0x20000b18
 8008058:	20001000 	.word	0x20001000
 800805c:	20000ffc 	.word	0x20000ffc
 8008060:	e000ed04 	.word	0xe000ed04

08008064 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800806a:	4b05      	ldr	r3, [pc, #20]	; (8008080 <xTaskGetTickCount+0x1c>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008070:	687b      	ldr	r3, [r7, #4]
}
 8008072:	4618      	mov	r0, r3
 8008074:	370c      	adds	r7, #12
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop
 8008080:	20000ff0 	.word	0x20000ff0

08008084 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800808c:	4b0f      	ldr	r3, [pc, #60]	; (80080cc <vTaskStepTick+0x48>)
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	441a      	add	r2, r3
 8008094:	4b0e      	ldr	r3, [pc, #56]	; (80080d0 <vTaskStepTick+0x4c>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	429a      	cmp	r2, r3
 800809a:	d90a      	bls.n	80080b2 <vTaskStepTick+0x2e>
	__asm volatile
 800809c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a0:	f383 8811 	msr	BASEPRI, r3
 80080a4:	f3bf 8f6f 	isb	sy
 80080a8:	f3bf 8f4f 	dsb	sy
 80080ac:	60fb      	str	r3, [r7, #12]
}
 80080ae:	bf00      	nop
 80080b0:	e7fe      	b.n	80080b0 <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 80080b2:	4b06      	ldr	r3, [pc, #24]	; (80080cc <vTaskStepTick+0x48>)
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4413      	add	r3, r2
 80080ba:	4a04      	ldr	r2, [pc, #16]	; (80080cc <vTaskStepTick+0x48>)
 80080bc:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 80080be:	bf00      	nop
 80080c0:	3714      	adds	r7, #20
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	20000ff0 	.word	0x20000ff0
 80080d0:	2000100c 	.word	0x2000100c

080080d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b086      	sub	sp, #24
 80080d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80080da:	2300      	movs	r3, #0
 80080dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080de:	4b4f      	ldr	r3, [pc, #316]	; (800821c <xTaskIncrementTick+0x148>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	f040 808f 	bne.w	8008206 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80080e8:	4b4d      	ldr	r3, [pc, #308]	; (8008220 <xTaskIncrementTick+0x14c>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	3301      	adds	r3, #1
 80080ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80080f0:	4a4b      	ldr	r2, [pc, #300]	; (8008220 <xTaskIncrementTick+0x14c>)
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d120      	bne.n	800813e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80080fc:	4b49      	ldr	r3, [pc, #292]	; (8008224 <xTaskIncrementTick+0x150>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d00a      	beq.n	800811c <xTaskIncrementTick+0x48>
	__asm volatile
 8008106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810a:	f383 8811 	msr	BASEPRI, r3
 800810e:	f3bf 8f6f 	isb	sy
 8008112:	f3bf 8f4f 	dsb	sy
 8008116:	603b      	str	r3, [r7, #0]
}
 8008118:	bf00      	nop
 800811a:	e7fe      	b.n	800811a <xTaskIncrementTick+0x46>
 800811c:	4b41      	ldr	r3, [pc, #260]	; (8008224 <xTaskIncrementTick+0x150>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	60fb      	str	r3, [r7, #12]
 8008122:	4b41      	ldr	r3, [pc, #260]	; (8008228 <xTaskIncrementTick+0x154>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a3f      	ldr	r2, [pc, #252]	; (8008224 <xTaskIncrementTick+0x150>)
 8008128:	6013      	str	r3, [r2, #0]
 800812a:	4a3f      	ldr	r2, [pc, #252]	; (8008228 <xTaskIncrementTick+0x154>)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6013      	str	r3, [r2, #0]
 8008130:	4b3e      	ldr	r3, [pc, #248]	; (800822c <xTaskIncrementTick+0x158>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	3301      	adds	r3, #1
 8008136:	4a3d      	ldr	r2, [pc, #244]	; (800822c <xTaskIncrementTick+0x158>)
 8008138:	6013      	str	r3, [r2, #0]
 800813a:	f000 fb33 	bl	80087a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800813e:	4b3c      	ldr	r3, [pc, #240]	; (8008230 <xTaskIncrementTick+0x15c>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	693a      	ldr	r2, [r7, #16]
 8008144:	429a      	cmp	r2, r3
 8008146:	d349      	bcc.n	80081dc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008148:	4b36      	ldr	r3, [pc, #216]	; (8008224 <xTaskIncrementTick+0x150>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d104      	bne.n	800815c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008152:	4b37      	ldr	r3, [pc, #220]	; (8008230 <xTaskIncrementTick+0x15c>)
 8008154:	f04f 32ff 	mov.w	r2, #4294967295
 8008158:	601a      	str	r2, [r3, #0]
					break;
 800815a:	e03f      	b.n	80081dc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800815c:	4b31      	ldr	r3, [pc, #196]	; (8008224 <xTaskIncrementTick+0x150>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800816c:	693a      	ldr	r2, [r7, #16]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	429a      	cmp	r2, r3
 8008172:	d203      	bcs.n	800817c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008174:	4a2e      	ldr	r2, [pc, #184]	; (8008230 <xTaskIncrementTick+0x15c>)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800817a:	e02f      	b.n	80081dc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	3304      	adds	r3, #4
 8008180:	4618      	mov	r0, r3
 8008182:	f7fe fbf7 	bl	8006974 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800818a:	2b00      	cmp	r3, #0
 800818c:	d004      	beq.n	8008198 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	3318      	adds	r3, #24
 8008192:	4618      	mov	r0, r3
 8008194:	f7fe fbee 	bl	8006974 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800819c:	4b25      	ldr	r3, [pc, #148]	; (8008234 <xTaskIncrementTick+0x160>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d903      	bls.n	80081ac <xTaskIncrementTick+0xd8>
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a8:	4a22      	ldr	r2, [pc, #136]	; (8008234 <xTaskIncrementTick+0x160>)
 80081aa:	6013      	str	r3, [r2, #0]
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081b0:	4613      	mov	r3, r2
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	4413      	add	r3, r2
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	4a1f      	ldr	r2, [pc, #124]	; (8008238 <xTaskIncrementTick+0x164>)
 80081ba:	441a      	add	r2, r3
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	3304      	adds	r3, #4
 80081c0:	4619      	mov	r1, r3
 80081c2:	4610      	mov	r0, r2
 80081c4:	f7fe fb79 	bl	80068ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081cc:	4b1b      	ldr	r3, [pc, #108]	; (800823c <xTaskIncrementTick+0x168>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d3b8      	bcc.n	8008148 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80081d6:	2301      	movs	r3, #1
 80081d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081da:	e7b5      	b.n	8008148 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80081dc:	4b17      	ldr	r3, [pc, #92]	; (800823c <xTaskIncrementTick+0x168>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e2:	4915      	ldr	r1, [pc, #84]	; (8008238 <xTaskIncrementTick+0x164>)
 80081e4:	4613      	mov	r3, r2
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	4413      	add	r3, r2
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	440b      	add	r3, r1
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d901      	bls.n	80081f8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80081f4:	2301      	movs	r3, #1
 80081f6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80081f8:	4b11      	ldr	r3, [pc, #68]	; (8008240 <xTaskIncrementTick+0x16c>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d007      	beq.n	8008210 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008200:	2301      	movs	r3, #1
 8008202:	617b      	str	r3, [r7, #20]
 8008204:	e004      	b.n	8008210 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008206:	4b0f      	ldr	r3, [pc, #60]	; (8008244 <xTaskIncrementTick+0x170>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	3301      	adds	r3, #1
 800820c:	4a0d      	ldr	r2, [pc, #52]	; (8008244 <xTaskIncrementTick+0x170>)
 800820e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008210:	697b      	ldr	r3, [r7, #20]
}
 8008212:	4618      	mov	r0, r3
 8008214:	3718      	adds	r7, #24
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	20001014 	.word	0x20001014
 8008220:	20000ff0 	.word	0x20000ff0
 8008224:	20000fa4 	.word	0x20000fa4
 8008228:	20000fa8 	.word	0x20000fa8
 800822c:	20001004 	.word	0x20001004
 8008230:	2000100c 	.word	0x2000100c
 8008234:	20000ff4 	.word	0x20000ff4
 8008238:	20000b1c 	.word	0x20000b1c
 800823c:	20000b18 	.word	0x20000b18
 8008240:	20001000 	.word	0x20001000
 8008244:	20000ffc 	.word	0x20000ffc

08008248 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800824e:	4b2a      	ldr	r3, [pc, #168]	; (80082f8 <vTaskSwitchContext+0xb0>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d003      	beq.n	800825e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008256:	4b29      	ldr	r3, [pc, #164]	; (80082fc <vTaskSwitchContext+0xb4>)
 8008258:	2201      	movs	r2, #1
 800825a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800825c:	e046      	b.n	80082ec <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800825e:	4b27      	ldr	r3, [pc, #156]	; (80082fc <vTaskSwitchContext+0xb4>)
 8008260:	2200      	movs	r2, #0
 8008262:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008264:	4b26      	ldr	r3, [pc, #152]	; (8008300 <vTaskSwitchContext+0xb8>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	60fb      	str	r3, [r7, #12]
 800826a:	e010      	b.n	800828e <vTaskSwitchContext+0x46>
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d10a      	bne.n	8008288 <vTaskSwitchContext+0x40>
	__asm volatile
 8008272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008276:	f383 8811 	msr	BASEPRI, r3
 800827a:	f3bf 8f6f 	isb	sy
 800827e:	f3bf 8f4f 	dsb	sy
 8008282:	607b      	str	r3, [r7, #4]
}
 8008284:	bf00      	nop
 8008286:	e7fe      	b.n	8008286 <vTaskSwitchContext+0x3e>
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	3b01      	subs	r3, #1
 800828c:	60fb      	str	r3, [r7, #12]
 800828e:	491d      	ldr	r1, [pc, #116]	; (8008304 <vTaskSwitchContext+0xbc>)
 8008290:	68fa      	ldr	r2, [r7, #12]
 8008292:	4613      	mov	r3, r2
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	4413      	add	r3, r2
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	440b      	add	r3, r1
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d0e4      	beq.n	800826c <vTaskSwitchContext+0x24>
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	4613      	mov	r3, r2
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	4413      	add	r3, r2
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	4a15      	ldr	r2, [pc, #84]	; (8008304 <vTaskSwitchContext+0xbc>)
 80082ae:	4413      	add	r3, r2
 80082b0:	60bb      	str	r3, [r7, #8]
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	685a      	ldr	r2, [r3, #4]
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	605a      	str	r2, [r3, #4]
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	685a      	ldr	r2, [r3, #4]
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	3308      	adds	r3, #8
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d104      	bne.n	80082d2 <vTaskSwitchContext+0x8a>
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	685a      	ldr	r2, [r3, #4]
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	605a      	str	r2, [r3, #4]
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	4a0b      	ldr	r2, [pc, #44]	; (8008308 <vTaskSwitchContext+0xc0>)
 80082da:	6013      	str	r3, [r2, #0]
 80082dc:	4a08      	ldr	r2, [pc, #32]	; (8008300 <vTaskSwitchContext+0xb8>)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80082e2:	4b09      	ldr	r3, [pc, #36]	; (8008308 <vTaskSwitchContext+0xc0>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	3354      	adds	r3, #84	; 0x54
 80082e8:	4a08      	ldr	r2, [pc, #32]	; (800830c <vTaskSwitchContext+0xc4>)
 80082ea:	6013      	str	r3, [r2, #0]
}
 80082ec:	bf00      	nop
 80082ee:	3714      	adds	r7, #20
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr
 80082f8:	20001014 	.word	0x20001014
 80082fc:	20001000 	.word	0x20001000
 8008300:	20000ff4 	.word	0x20000ff4
 8008304:	20000b1c 	.word	0x20000b1c
 8008308:	20000b18 	.word	0x20000b18
 800830c:	200000b8 	.word	0x200000b8

08008310 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d10a      	bne.n	8008336 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008324:	f383 8811 	msr	BASEPRI, r3
 8008328:	f3bf 8f6f 	isb	sy
 800832c:	f3bf 8f4f 	dsb	sy
 8008330:	60fb      	str	r3, [r7, #12]
}
 8008332:	bf00      	nop
 8008334:	e7fe      	b.n	8008334 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008336:	4b07      	ldr	r3, [pc, #28]	; (8008354 <vTaskPlaceOnEventList+0x44>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	3318      	adds	r3, #24
 800833c:	4619      	mov	r1, r3
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f7fe fadf 	bl	8006902 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008344:	2101      	movs	r1, #1
 8008346:	6838      	ldr	r0, [r7, #0]
 8008348:	f000 fbd6 	bl	8008af8 <prvAddCurrentTaskToDelayedList>
}
 800834c:	bf00      	nop
 800834e:	3710      	adds	r7, #16
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}
 8008354:	20000b18 	.word	0x20000b18

08008358 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008358:	b580      	push	{r7, lr}
 800835a:	b086      	sub	sp, #24
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d10a      	bne.n	8008380 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800836a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836e:	f383 8811 	msr	BASEPRI, r3
 8008372:	f3bf 8f6f 	isb	sy
 8008376:	f3bf 8f4f 	dsb	sy
 800837a:	617b      	str	r3, [r7, #20]
}
 800837c:	bf00      	nop
 800837e:	e7fe      	b.n	800837e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008380:	4b0a      	ldr	r3, [pc, #40]	; (80083ac <vTaskPlaceOnEventListRestricted+0x54>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	3318      	adds	r3, #24
 8008386:	4619      	mov	r1, r3
 8008388:	68f8      	ldr	r0, [r7, #12]
 800838a:	f7fe fa96 	bl	80068ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d002      	beq.n	800839a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008394:	f04f 33ff 	mov.w	r3, #4294967295
 8008398:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800839a:	6879      	ldr	r1, [r7, #4]
 800839c:	68b8      	ldr	r0, [r7, #8]
 800839e:	f000 fbab 	bl	8008af8 <prvAddCurrentTaskToDelayedList>
	}
 80083a2:	bf00      	nop
 80083a4:	3718      	adds	r7, #24
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	20000b18 	.word	0x20000b18

080083b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b086      	sub	sp, #24
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d10a      	bne.n	80083dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80083c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ca:	f383 8811 	msr	BASEPRI, r3
 80083ce:	f3bf 8f6f 	isb	sy
 80083d2:	f3bf 8f4f 	dsb	sy
 80083d6:	60fb      	str	r3, [r7, #12]
}
 80083d8:	bf00      	nop
 80083da:	e7fe      	b.n	80083da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	3318      	adds	r3, #24
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7fe fac7 	bl	8006974 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083e6:	4b1f      	ldr	r3, [pc, #124]	; (8008464 <xTaskRemoveFromEventList+0xb4>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d11f      	bne.n	800842e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	3304      	adds	r3, #4
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7fe fabe 	bl	8006974 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083fc:	4b1a      	ldr	r3, [pc, #104]	; (8008468 <xTaskRemoveFromEventList+0xb8>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	429a      	cmp	r2, r3
 8008402:	d903      	bls.n	800840c <xTaskRemoveFromEventList+0x5c>
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008408:	4a17      	ldr	r2, [pc, #92]	; (8008468 <xTaskRemoveFromEventList+0xb8>)
 800840a:	6013      	str	r3, [r2, #0]
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008410:	4613      	mov	r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	4413      	add	r3, r2
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	4a14      	ldr	r2, [pc, #80]	; (800846c <xTaskRemoveFromEventList+0xbc>)
 800841a:	441a      	add	r2, r3
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	3304      	adds	r3, #4
 8008420:	4619      	mov	r1, r3
 8008422:	4610      	mov	r0, r2
 8008424:	f7fe fa49 	bl	80068ba <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 8008428:	f000 f9bc 	bl	80087a4 <prvResetNextTaskUnblockTime>
 800842c:	e005      	b.n	800843a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	3318      	adds	r3, #24
 8008432:	4619      	mov	r1, r3
 8008434:	480e      	ldr	r0, [pc, #56]	; (8008470 <xTaskRemoveFromEventList+0xc0>)
 8008436:	f7fe fa40 	bl	80068ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800843e:	4b0d      	ldr	r3, [pc, #52]	; (8008474 <xTaskRemoveFromEventList+0xc4>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008444:	429a      	cmp	r2, r3
 8008446:	d905      	bls.n	8008454 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008448:	2301      	movs	r3, #1
 800844a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800844c:	4b0a      	ldr	r3, [pc, #40]	; (8008478 <xTaskRemoveFromEventList+0xc8>)
 800844e:	2201      	movs	r2, #1
 8008450:	601a      	str	r2, [r3, #0]
 8008452:	e001      	b.n	8008458 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008454:	2300      	movs	r3, #0
 8008456:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008458:	697b      	ldr	r3, [r7, #20]
}
 800845a:	4618      	mov	r0, r3
 800845c:	3718      	adds	r7, #24
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	20001014 	.word	0x20001014
 8008468:	20000ff4 	.word	0x20000ff4
 800846c:	20000b1c 	.word	0x20000b1c
 8008470:	20000fac 	.word	0x20000fac
 8008474:	20000b18 	.word	0x20000b18
 8008478:	20001000 	.word	0x20001000

0800847c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008484:	4b06      	ldr	r3, [pc, #24]	; (80084a0 <vTaskInternalSetTimeOutState+0x24>)
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800848c:	4b05      	ldr	r3, [pc, #20]	; (80084a4 <vTaskInternalSetTimeOutState+0x28>)
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	605a      	str	r2, [r3, #4]
}
 8008494:	bf00      	nop
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr
 80084a0:	20001004 	.word	0x20001004
 80084a4:	20000ff0 	.word	0x20000ff0

080084a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b088      	sub	sp, #32
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d10a      	bne.n	80084ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80084b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084bc:	f383 8811 	msr	BASEPRI, r3
 80084c0:	f3bf 8f6f 	isb	sy
 80084c4:	f3bf 8f4f 	dsb	sy
 80084c8:	613b      	str	r3, [r7, #16]
}
 80084ca:	bf00      	nop
 80084cc:	e7fe      	b.n	80084cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d10a      	bne.n	80084ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80084d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d8:	f383 8811 	msr	BASEPRI, r3
 80084dc:	f3bf 8f6f 	isb	sy
 80084e0:	f3bf 8f4f 	dsb	sy
 80084e4:	60fb      	str	r3, [r7, #12]
}
 80084e6:	bf00      	nop
 80084e8:	e7fe      	b.n	80084e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80084ea:	f000 ffd3 	bl	8009494 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80084ee:	4b1d      	ldr	r3, [pc, #116]	; (8008564 <xTaskCheckForTimeOut+0xbc>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	69ba      	ldr	r2, [r7, #24]
 80084fa:	1ad3      	subs	r3, r2, r3
 80084fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008506:	d102      	bne.n	800850e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008508:	2300      	movs	r3, #0
 800850a:	61fb      	str	r3, [r7, #28]
 800850c:	e023      	b.n	8008556 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	4b15      	ldr	r3, [pc, #84]	; (8008568 <xTaskCheckForTimeOut+0xc0>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	429a      	cmp	r2, r3
 8008518:	d007      	beq.n	800852a <xTaskCheckForTimeOut+0x82>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	69ba      	ldr	r2, [r7, #24]
 8008520:	429a      	cmp	r2, r3
 8008522:	d302      	bcc.n	800852a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008524:	2301      	movs	r3, #1
 8008526:	61fb      	str	r3, [r7, #28]
 8008528:	e015      	b.n	8008556 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	697a      	ldr	r2, [r7, #20]
 8008530:	429a      	cmp	r2, r3
 8008532:	d20b      	bcs.n	800854c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	1ad2      	subs	r2, r2, r3
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f7ff ff9b 	bl	800847c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008546:	2300      	movs	r3, #0
 8008548:	61fb      	str	r3, [r7, #28]
 800854a:	e004      	b.n	8008556 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	2200      	movs	r2, #0
 8008550:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008552:	2301      	movs	r3, #1
 8008554:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008556:	f000 ffcd 	bl	80094f4 <vPortExitCritical>

	return xReturn;
 800855a:	69fb      	ldr	r3, [r7, #28]
}
 800855c:	4618      	mov	r0, r3
 800855e:	3720      	adds	r7, #32
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	20000ff0 	.word	0x20000ff0
 8008568:	20001004 	.word	0x20001004

0800856c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800856c:	b480      	push	{r7}
 800856e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008570:	4b03      	ldr	r3, [pc, #12]	; (8008580 <vTaskMissedYield+0x14>)
 8008572:	2201      	movs	r2, #1
 8008574:	601a      	str	r2, [r3, #0]
}
 8008576:	bf00      	nop
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr
 8008580:	20001000 	.word	0x20001000

08008584 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800858c:	f000 f8a8 	bl	80086e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008590:	4b18      	ldr	r3, [pc, #96]	; (80085f4 <prvIdleTask+0x70>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2b01      	cmp	r3, #1
 8008596:	d907      	bls.n	80085a8 <prvIdleTask+0x24>
			{
				taskYIELD();
 8008598:	4b17      	ldr	r3, [pc, #92]	; (80085f8 <prvIdleTask+0x74>)
 800859a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800859e:	601a      	str	r2, [r3, #0]
 80085a0:	f3bf 8f4f 	dsb	sy
 80085a4:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 80085a8:	f7ff fc86 	bl	8007eb8 <prvGetExpectedIdleTime>
 80085ac:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d9eb      	bls.n	800858c <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 80085b4:	f7ff fc72 	bl	8007e9c <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 80085b8:	4b10      	ldr	r3, [pc, #64]	; (80085fc <prvIdleTask+0x78>)
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	4b10      	ldr	r3, [pc, #64]	; (8008600 <prvIdleTask+0x7c>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d20a      	bcs.n	80085da <prvIdleTask+0x56>
	__asm volatile
 80085c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c8:	f383 8811 	msr	BASEPRI, r3
 80085cc:	f3bf 8f6f 	isb	sy
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	60bb      	str	r3, [r7, #8]
}
 80085d6:	bf00      	nop
 80085d8:	e7fe      	b.n	80085d8 <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 80085da:	f7ff fc6d 	bl	8007eb8 <prvGetExpectedIdleTime>
 80085de:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d902      	bls.n	80085ec <prvIdleTask+0x68>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 80085e6:	68f8      	ldr	r0, [r7, #12]
 80085e8:	f001 f808 	bl	80095fc <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 80085ec:	f7ff fc9c 	bl	8007f28 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 80085f0:	e7cc      	b.n	800858c <prvIdleTask+0x8>
 80085f2:	bf00      	nop
 80085f4:	20000b1c 	.word	0x20000b1c
 80085f8:	e000ed04 	.word	0xe000ed04
 80085fc:	2000100c 	.word	0x2000100c
 8008600:	20000ff0 	.word	0x20000ff0

08008604 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800860a:	2301      	movs	r3, #1
 800860c:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800860e:	2301      	movs	r3, #1
 8008610:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 8008612:	4b0f      	ldr	r3, [pc, #60]	; (8008650 <eTaskConfirmSleepModeStatus+0x4c>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d002      	beq.n	8008620 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800861a:	2300      	movs	r3, #0
 800861c:	71fb      	strb	r3, [r7, #7]
 800861e:	e010      	b.n	8008642 <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 8008620:	4b0c      	ldr	r3, [pc, #48]	; (8008654 <eTaskConfirmSleepModeStatus+0x50>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d002      	beq.n	800862e <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8008628:	2300      	movs	r3, #0
 800862a:	71fb      	strb	r3, [r7, #7]
 800862c:	e009      	b.n	8008642 <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800862e:	4b0a      	ldr	r3, [pc, #40]	; (8008658 <eTaskConfirmSleepModeStatus+0x54>)
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	4b0a      	ldr	r3, [pc, #40]	; (800865c <eTaskConfirmSleepModeStatus+0x58>)
 8008634:	6819      	ldr	r1, [r3, #0]
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	1acb      	subs	r3, r1, r3
 800863a:	429a      	cmp	r2, r3
 800863c:	d101      	bne.n	8008642 <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800863e:	2302      	movs	r3, #2
 8008640:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 8008642:	79fb      	ldrb	r3, [r7, #7]
	}
 8008644:	4618      	mov	r0, r3
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr
 8008650:	20000fac 	.word	0x20000fac
 8008654:	20001000 	.word	0x20001000
 8008658:	20000fd8 	.word	0x20000fd8
 800865c:	20000fec 	.word	0x20000fec

08008660 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008666:	2300      	movs	r3, #0
 8008668:	607b      	str	r3, [r7, #4]
 800866a:	e00c      	b.n	8008686 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	4613      	mov	r3, r2
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	4413      	add	r3, r2
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	4a12      	ldr	r2, [pc, #72]	; (80086c0 <prvInitialiseTaskLists+0x60>)
 8008678:	4413      	add	r3, r2
 800867a:	4618      	mov	r0, r3
 800867c:	f7fe f8f0 	bl	8006860 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	3301      	adds	r3, #1
 8008684:	607b      	str	r3, [r7, #4]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2b37      	cmp	r3, #55	; 0x37
 800868a:	d9ef      	bls.n	800866c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800868c:	480d      	ldr	r0, [pc, #52]	; (80086c4 <prvInitialiseTaskLists+0x64>)
 800868e:	f7fe f8e7 	bl	8006860 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008692:	480d      	ldr	r0, [pc, #52]	; (80086c8 <prvInitialiseTaskLists+0x68>)
 8008694:	f7fe f8e4 	bl	8006860 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008698:	480c      	ldr	r0, [pc, #48]	; (80086cc <prvInitialiseTaskLists+0x6c>)
 800869a:	f7fe f8e1 	bl	8006860 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800869e:	480c      	ldr	r0, [pc, #48]	; (80086d0 <prvInitialiseTaskLists+0x70>)
 80086a0:	f7fe f8de 	bl	8006860 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80086a4:	480b      	ldr	r0, [pc, #44]	; (80086d4 <prvInitialiseTaskLists+0x74>)
 80086a6:	f7fe f8db 	bl	8006860 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80086aa:	4b0b      	ldr	r3, [pc, #44]	; (80086d8 <prvInitialiseTaskLists+0x78>)
 80086ac:	4a05      	ldr	r2, [pc, #20]	; (80086c4 <prvInitialiseTaskLists+0x64>)
 80086ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80086b0:	4b0a      	ldr	r3, [pc, #40]	; (80086dc <prvInitialiseTaskLists+0x7c>)
 80086b2:	4a05      	ldr	r2, [pc, #20]	; (80086c8 <prvInitialiseTaskLists+0x68>)
 80086b4:	601a      	str	r2, [r3, #0]
}
 80086b6:	bf00      	nop
 80086b8:	3708      	adds	r7, #8
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	20000b1c 	.word	0x20000b1c
 80086c4:	20000f7c 	.word	0x20000f7c
 80086c8:	20000f90 	.word	0x20000f90
 80086cc:	20000fac 	.word	0x20000fac
 80086d0:	20000fc0 	.word	0x20000fc0
 80086d4:	20000fd8 	.word	0x20000fd8
 80086d8:	20000fa4 	.word	0x20000fa4
 80086dc:	20000fa8 	.word	0x20000fa8

080086e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086e6:	e019      	b.n	800871c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80086e8:	f000 fed4 	bl	8009494 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086ec:	4b10      	ldr	r3, [pc, #64]	; (8008730 <prvCheckTasksWaitingTermination+0x50>)
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	3304      	adds	r3, #4
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7fe f93b 	bl	8006974 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80086fe:	4b0d      	ldr	r3, [pc, #52]	; (8008734 <prvCheckTasksWaitingTermination+0x54>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	3b01      	subs	r3, #1
 8008704:	4a0b      	ldr	r2, [pc, #44]	; (8008734 <prvCheckTasksWaitingTermination+0x54>)
 8008706:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008708:	4b0b      	ldr	r3, [pc, #44]	; (8008738 <prvCheckTasksWaitingTermination+0x58>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	3b01      	subs	r3, #1
 800870e:	4a0a      	ldr	r2, [pc, #40]	; (8008738 <prvCheckTasksWaitingTermination+0x58>)
 8008710:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008712:	f000 feef 	bl	80094f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 f810 	bl	800873c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800871c:	4b06      	ldr	r3, [pc, #24]	; (8008738 <prvCheckTasksWaitingTermination+0x58>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d1e1      	bne.n	80086e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008724:	bf00      	nop
 8008726:	bf00      	nop
 8008728:	3708      	adds	r7, #8
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	20000fc0 	.word	0x20000fc0
 8008734:	20000fec 	.word	0x20000fec
 8008738:	20000fd4 	.word	0x20000fd4

0800873c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	3354      	adds	r3, #84	; 0x54
 8008748:	4618      	mov	r0, r3
 800874a:	f004 fa79 	bl	800cc40 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008754:	2b00      	cmp	r3, #0
 8008756:	d108      	bne.n	800876a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875c:	4618      	mov	r0, r3
 800875e:	f001 f963 	bl	8009a28 <vPortFree>
				vPortFree( pxTCB );
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f001 f960 	bl	8009a28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008768:	e018      	b.n	800879c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008770:	2b01      	cmp	r3, #1
 8008772:	d103      	bne.n	800877c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f001 f957 	bl	8009a28 <vPortFree>
	}
 800877a:	e00f      	b.n	800879c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008782:	2b02      	cmp	r3, #2
 8008784:	d00a      	beq.n	800879c <prvDeleteTCB+0x60>
	__asm volatile
 8008786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878a:	f383 8811 	msr	BASEPRI, r3
 800878e:	f3bf 8f6f 	isb	sy
 8008792:	f3bf 8f4f 	dsb	sy
 8008796:	60fb      	str	r3, [r7, #12]
}
 8008798:	bf00      	nop
 800879a:	e7fe      	b.n	800879a <prvDeleteTCB+0x5e>
	}
 800879c:	bf00      	nop
 800879e:	3710      	adds	r7, #16
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087aa:	4b0c      	ldr	r3, [pc, #48]	; (80087dc <prvResetNextTaskUnblockTime+0x38>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d104      	bne.n	80087be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80087b4:	4b0a      	ldr	r3, [pc, #40]	; (80087e0 <prvResetNextTaskUnblockTime+0x3c>)
 80087b6:	f04f 32ff 	mov.w	r2, #4294967295
 80087ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80087bc:	e008      	b.n	80087d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087be:	4b07      	ldr	r3, [pc, #28]	; (80087dc <prvResetNextTaskUnblockTime+0x38>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	4a04      	ldr	r2, [pc, #16]	; (80087e0 <prvResetNextTaskUnblockTime+0x3c>)
 80087ce:	6013      	str	r3, [r2, #0]
}
 80087d0:	bf00      	nop
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr
 80087dc:	20000fa4 	.word	0x20000fa4
 80087e0:	2000100c 	.word	0x2000100c

080087e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80087ea:	4b0b      	ldr	r3, [pc, #44]	; (8008818 <xTaskGetSchedulerState+0x34>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d102      	bne.n	80087f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80087f2:	2301      	movs	r3, #1
 80087f4:	607b      	str	r3, [r7, #4]
 80087f6:	e008      	b.n	800880a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087f8:	4b08      	ldr	r3, [pc, #32]	; (800881c <xTaskGetSchedulerState+0x38>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d102      	bne.n	8008806 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008800:	2302      	movs	r3, #2
 8008802:	607b      	str	r3, [r7, #4]
 8008804:	e001      	b.n	800880a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008806:	2300      	movs	r3, #0
 8008808:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800880a:	687b      	ldr	r3, [r7, #4]
	}
 800880c:	4618      	mov	r0, r3
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr
 8008818:	20000ff8 	.word	0x20000ff8
 800881c:	20001014 	.word	0x20001014

08008820 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800882c:	2300      	movs	r3, #0
 800882e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d051      	beq.n	80088da <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800883a:	4b2a      	ldr	r3, [pc, #168]	; (80088e4 <xTaskPriorityInherit+0xc4>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008840:	429a      	cmp	r2, r3
 8008842:	d241      	bcs.n	80088c8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	699b      	ldr	r3, [r3, #24]
 8008848:	2b00      	cmp	r3, #0
 800884a:	db06      	blt.n	800885a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800884c:	4b25      	ldr	r3, [pc, #148]	; (80088e4 <xTaskPriorityInherit+0xc4>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008852:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	6959      	ldr	r1, [r3, #20]
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008862:	4613      	mov	r3, r2
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	4413      	add	r3, r2
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	4a1f      	ldr	r2, [pc, #124]	; (80088e8 <xTaskPriorityInherit+0xc8>)
 800886c:	4413      	add	r3, r2
 800886e:	4299      	cmp	r1, r3
 8008870:	d122      	bne.n	80088b8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	3304      	adds	r3, #4
 8008876:	4618      	mov	r0, r3
 8008878:	f7fe f87c 	bl	8006974 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800887c:	4b19      	ldr	r3, [pc, #100]	; (80088e4 <xTaskPriorityInherit+0xc4>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800888a:	4b18      	ldr	r3, [pc, #96]	; (80088ec <xTaskPriorityInherit+0xcc>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	429a      	cmp	r2, r3
 8008890:	d903      	bls.n	800889a <xTaskPriorityInherit+0x7a>
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008896:	4a15      	ldr	r2, [pc, #84]	; (80088ec <xTaskPriorityInherit+0xcc>)
 8008898:	6013      	str	r3, [r2, #0]
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800889e:	4613      	mov	r3, r2
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	4413      	add	r3, r2
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	4a10      	ldr	r2, [pc, #64]	; (80088e8 <xTaskPriorityInherit+0xc8>)
 80088a8:	441a      	add	r2, r3
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	3304      	adds	r3, #4
 80088ae:	4619      	mov	r1, r3
 80088b0:	4610      	mov	r0, r2
 80088b2:	f7fe f802 	bl	80068ba <vListInsertEnd>
 80088b6:	e004      	b.n	80088c2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80088b8:	4b0a      	ldr	r3, [pc, #40]	; (80088e4 <xTaskPriorityInherit+0xc4>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80088c2:	2301      	movs	r3, #1
 80088c4:	60fb      	str	r3, [r7, #12]
 80088c6:	e008      	b.n	80088da <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80088cc:	4b05      	ldr	r3, [pc, #20]	; (80088e4 <xTaskPriorityInherit+0xc4>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d201      	bcs.n	80088da <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80088d6:	2301      	movs	r3, #1
 80088d8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80088da:	68fb      	ldr	r3, [r7, #12]
	}
 80088dc:	4618      	mov	r0, r3
 80088de:	3710      	adds	r7, #16
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}
 80088e4:	20000b18 	.word	0x20000b18
 80088e8:	20000b1c 	.word	0x20000b1c
 80088ec:	20000ff4 	.word	0x20000ff4

080088f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b086      	sub	sp, #24
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80088fc:	2300      	movs	r3, #0
 80088fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d056      	beq.n	80089b4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008906:	4b2e      	ldr	r3, [pc, #184]	; (80089c0 <xTaskPriorityDisinherit+0xd0>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	693a      	ldr	r2, [r7, #16]
 800890c:	429a      	cmp	r2, r3
 800890e:	d00a      	beq.n	8008926 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008914:	f383 8811 	msr	BASEPRI, r3
 8008918:	f3bf 8f6f 	isb	sy
 800891c:	f3bf 8f4f 	dsb	sy
 8008920:	60fb      	str	r3, [r7, #12]
}
 8008922:	bf00      	nop
 8008924:	e7fe      	b.n	8008924 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800892a:	2b00      	cmp	r3, #0
 800892c:	d10a      	bne.n	8008944 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800892e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008932:	f383 8811 	msr	BASEPRI, r3
 8008936:	f3bf 8f6f 	isb	sy
 800893a:	f3bf 8f4f 	dsb	sy
 800893e:	60bb      	str	r3, [r7, #8]
}
 8008940:	bf00      	nop
 8008942:	e7fe      	b.n	8008942 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008948:	1e5a      	subs	r2, r3, #1
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008956:	429a      	cmp	r2, r3
 8008958:	d02c      	beq.n	80089b4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800895e:	2b00      	cmp	r3, #0
 8008960:	d128      	bne.n	80089b4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	3304      	adds	r3, #4
 8008966:	4618      	mov	r0, r3
 8008968:	f7fe f804 	bl	8006974 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008978:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008984:	4b0f      	ldr	r3, [pc, #60]	; (80089c4 <xTaskPriorityDisinherit+0xd4>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	429a      	cmp	r2, r3
 800898a:	d903      	bls.n	8008994 <xTaskPriorityDisinherit+0xa4>
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008990:	4a0c      	ldr	r2, [pc, #48]	; (80089c4 <xTaskPriorityDisinherit+0xd4>)
 8008992:	6013      	str	r3, [r2, #0]
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008998:	4613      	mov	r3, r2
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	4413      	add	r3, r2
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	4a09      	ldr	r2, [pc, #36]	; (80089c8 <xTaskPriorityDisinherit+0xd8>)
 80089a2:	441a      	add	r2, r3
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	3304      	adds	r3, #4
 80089a8:	4619      	mov	r1, r3
 80089aa:	4610      	mov	r0, r2
 80089ac:	f7fd ff85 	bl	80068ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80089b0:	2301      	movs	r3, #1
 80089b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80089b4:	697b      	ldr	r3, [r7, #20]
	}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3718      	adds	r7, #24
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	20000b18 	.word	0x20000b18
 80089c4:	20000ff4 	.word	0x20000ff4
 80089c8:	20000b1c 	.word	0x20000b1c

080089cc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b088      	sub	sp, #32
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80089da:	2301      	movs	r3, #1
 80089dc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d06a      	beq.n	8008aba <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80089e4:	69bb      	ldr	r3, [r7, #24]
 80089e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d10a      	bne.n	8008a02 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80089ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f0:	f383 8811 	msr	BASEPRI, r3
 80089f4:	f3bf 8f6f 	isb	sy
 80089f8:	f3bf 8f4f 	dsb	sy
 80089fc:	60fb      	str	r3, [r7, #12]
}
 80089fe:	bf00      	nop
 8008a00:	e7fe      	b.n	8008a00 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008a02:	69bb      	ldr	r3, [r7, #24]
 8008a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a06:	683a      	ldr	r2, [r7, #0]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d902      	bls.n	8008a12 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	61fb      	str	r3, [r7, #28]
 8008a10:	e002      	b.n	8008a18 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a16:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a1c:	69fa      	ldr	r2, [r7, #28]
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d04b      	beq.n	8008aba <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a26:	697a      	ldr	r2, [r7, #20]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d146      	bne.n	8008aba <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008a2c:	4b25      	ldr	r3, [pc, #148]	; (8008ac4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	69ba      	ldr	r2, [r7, #24]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d10a      	bne.n	8008a4c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a3a:	f383 8811 	msr	BASEPRI, r3
 8008a3e:	f3bf 8f6f 	isb	sy
 8008a42:	f3bf 8f4f 	dsb	sy
 8008a46:	60bb      	str	r3, [r7, #8]
}
 8008a48:	bf00      	nop
 8008a4a:	e7fe      	b.n	8008a4a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008a4c:	69bb      	ldr	r3, [r7, #24]
 8008a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a50:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	69fa      	ldr	r2, [r7, #28]
 8008a56:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	699b      	ldr	r3, [r3, #24]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	db04      	blt.n	8008a6a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008a66:	69bb      	ldr	r3, [r7, #24]
 8008a68:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008a6a:	69bb      	ldr	r3, [r7, #24]
 8008a6c:	6959      	ldr	r1, [r3, #20]
 8008a6e:	693a      	ldr	r2, [r7, #16]
 8008a70:	4613      	mov	r3, r2
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	4413      	add	r3, r2
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	4a13      	ldr	r2, [pc, #76]	; (8008ac8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008a7a:	4413      	add	r3, r2
 8008a7c:	4299      	cmp	r1, r3
 8008a7e:	d11c      	bne.n	8008aba <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a80:	69bb      	ldr	r3, [r7, #24]
 8008a82:	3304      	adds	r3, #4
 8008a84:	4618      	mov	r0, r3
 8008a86:	f7fd ff75 	bl	8006974 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a8e:	4b0f      	ldr	r3, [pc, #60]	; (8008acc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d903      	bls.n	8008a9e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008a96:	69bb      	ldr	r3, [r7, #24]
 8008a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a9a:	4a0c      	ldr	r2, [pc, #48]	; (8008acc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008a9c:	6013      	str	r3, [r2, #0]
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aa2:	4613      	mov	r3, r2
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	4413      	add	r3, r2
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	4a07      	ldr	r2, [pc, #28]	; (8008ac8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008aac:	441a      	add	r2, r3
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	3304      	adds	r3, #4
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	4610      	mov	r0, r2
 8008ab6:	f7fd ff00 	bl	80068ba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008aba:	bf00      	nop
 8008abc:	3720      	adds	r7, #32
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	20000b18 	.word	0x20000b18
 8008ac8:	20000b1c 	.word	0x20000b1c
 8008acc:	20000ff4 	.word	0x20000ff4

08008ad0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008ad0:	b480      	push	{r7}
 8008ad2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008ad4:	4b07      	ldr	r3, [pc, #28]	; (8008af4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d004      	beq.n	8008ae6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008adc:	4b05      	ldr	r3, [pc, #20]	; (8008af4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ae2:	3201      	adds	r2, #1
 8008ae4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008ae6:	4b03      	ldr	r3, [pc, #12]	; (8008af4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
	}
 8008aea:	4618      	mov	r0, r3
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr
 8008af4:	20000b18 	.word	0x20000b18

08008af8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008b02:	4b21      	ldr	r3, [pc, #132]	; (8008b88 <prvAddCurrentTaskToDelayedList+0x90>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b08:	4b20      	ldr	r3, [pc, #128]	; (8008b8c <prvAddCurrentTaskToDelayedList+0x94>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	3304      	adds	r3, #4
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7fd ff30 	bl	8006974 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b1a:	d10a      	bne.n	8008b32 <prvAddCurrentTaskToDelayedList+0x3a>
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d007      	beq.n	8008b32 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b22:	4b1a      	ldr	r3, [pc, #104]	; (8008b8c <prvAddCurrentTaskToDelayedList+0x94>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	3304      	adds	r3, #4
 8008b28:	4619      	mov	r1, r3
 8008b2a:	4819      	ldr	r0, [pc, #100]	; (8008b90 <prvAddCurrentTaskToDelayedList+0x98>)
 8008b2c:	f7fd fec5 	bl	80068ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008b30:	e026      	b.n	8008b80 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008b32:	68fa      	ldr	r2, [r7, #12]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	4413      	add	r3, r2
 8008b38:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008b3a:	4b14      	ldr	r3, [pc, #80]	; (8008b8c <prvAddCurrentTaskToDelayedList+0x94>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	68ba      	ldr	r2, [r7, #8]
 8008b40:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008b42:	68ba      	ldr	r2, [r7, #8]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d209      	bcs.n	8008b5e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b4a:	4b12      	ldr	r3, [pc, #72]	; (8008b94 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	4b0f      	ldr	r3, [pc, #60]	; (8008b8c <prvAddCurrentTaskToDelayedList+0x94>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	3304      	adds	r3, #4
 8008b54:	4619      	mov	r1, r3
 8008b56:	4610      	mov	r0, r2
 8008b58:	f7fd fed3 	bl	8006902 <vListInsert>
}
 8008b5c:	e010      	b.n	8008b80 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b5e:	4b0e      	ldr	r3, [pc, #56]	; (8008b98 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	4b0a      	ldr	r3, [pc, #40]	; (8008b8c <prvAddCurrentTaskToDelayedList+0x94>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	3304      	adds	r3, #4
 8008b68:	4619      	mov	r1, r3
 8008b6a:	4610      	mov	r0, r2
 8008b6c:	f7fd fec9 	bl	8006902 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008b70:	4b0a      	ldr	r3, [pc, #40]	; (8008b9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	68ba      	ldr	r2, [r7, #8]
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d202      	bcs.n	8008b80 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008b7a:	4a08      	ldr	r2, [pc, #32]	; (8008b9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	6013      	str	r3, [r2, #0]
}
 8008b80:	bf00      	nop
 8008b82:	3710      	adds	r7, #16
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	20000ff0 	.word	0x20000ff0
 8008b8c:	20000b18 	.word	0x20000b18
 8008b90:	20000fd8 	.word	0x20000fd8
 8008b94:	20000fa8 	.word	0x20000fa8
 8008b98:	20000fa4 	.word	0x20000fa4
 8008b9c:	2000100c 	.word	0x2000100c

08008ba0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b08a      	sub	sp, #40	; 0x28
 8008ba4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008baa:	f000 fb07 	bl	80091bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008bae:	4b1c      	ldr	r3, [pc, #112]	; (8008c20 <xTimerCreateTimerTask+0x80>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d021      	beq.n	8008bfa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008bbe:	1d3a      	adds	r2, r7, #4
 8008bc0:	f107 0108 	add.w	r1, r7, #8
 8008bc4:	f107 030c 	add.w	r3, r7, #12
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f7fd fe2f 	bl	800682c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008bce:	6879      	ldr	r1, [r7, #4]
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	68fa      	ldr	r2, [r7, #12]
 8008bd4:	9202      	str	r2, [sp, #8]
 8008bd6:	9301      	str	r3, [sp, #4]
 8008bd8:	2302      	movs	r3, #2
 8008bda:	9300      	str	r3, [sp, #0]
 8008bdc:	2300      	movs	r3, #0
 8008bde:	460a      	mov	r2, r1
 8008be0:	4910      	ldr	r1, [pc, #64]	; (8008c24 <xTimerCreateTimerTask+0x84>)
 8008be2:	4811      	ldr	r0, [pc, #68]	; (8008c28 <xTimerCreateTimerTask+0x88>)
 8008be4:	f7fe fefe 	bl	80079e4 <xTaskCreateStatic>
 8008be8:	4603      	mov	r3, r0
 8008bea:	4a10      	ldr	r2, [pc, #64]	; (8008c2c <xTimerCreateTimerTask+0x8c>)
 8008bec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008bee:	4b0f      	ldr	r3, [pc, #60]	; (8008c2c <xTimerCreateTimerTask+0x8c>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d001      	beq.n	8008bfa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d10a      	bne.n	8008c16 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c04:	f383 8811 	msr	BASEPRI, r3
 8008c08:	f3bf 8f6f 	isb	sy
 8008c0c:	f3bf 8f4f 	dsb	sy
 8008c10:	613b      	str	r3, [r7, #16]
}
 8008c12:	bf00      	nop
 8008c14:	e7fe      	b.n	8008c14 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008c16:	697b      	ldr	r3, [r7, #20]
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3718      	adds	r7, #24
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	20001048 	.word	0x20001048
 8008c24:	0800d65c 	.word	0x0800d65c
 8008c28:	08008d65 	.word	0x08008d65
 8008c2c:	2000104c 	.word	0x2000104c

08008c30 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b08a      	sub	sp, #40	; 0x28
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	607a      	str	r2, [r7, #4]
 8008c3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d10a      	bne.n	8008c5e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c4c:	f383 8811 	msr	BASEPRI, r3
 8008c50:	f3bf 8f6f 	isb	sy
 8008c54:	f3bf 8f4f 	dsb	sy
 8008c58:	623b      	str	r3, [r7, #32]
}
 8008c5a:	bf00      	nop
 8008c5c:	e7fe      	b.n	8008c5c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008c5e:	4b1a      	ldr	r3, [pc, #104]	; (8008cc8 <xTimerGenericCommand+0x98>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d02a      	beq.n	8008cbc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	2b05      	cmp	r3, #5
 8008c76:	dc18      	bgt.n	8008caa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008c78:	f7ff fdb4 	bl	80087e4 <xTaskGetSchedulerState>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b02      	cmp	r3, #2
 8008c80:	d109      	bne.n	8008c96 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008c82:	4b11      	ldr	r3, [pc, #68]	; (8008cc8 <xTimerGenericCommand+0x98>)
 8008c84:	6818      	ldr	r0, [r3, #0]
 8008c86:	f107 0110 	add.w	r1, r7, #16
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c8e:	f7fe f843 	bl	8006d18 <xQueueGenericSend>
 8008c92:	6278      	str	r0, [r7, #36]	; 0x24
 8008c94:	e012      	b.n	8008cbc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008c96:	4b0c      	ldr	r3, [pc, #48]	; (8008cc8 <xTimerGenericCommand+0x98>)
 8008c98:	6818      	ldr	r0, [r3, #0]
 8008c9a:	f107 0110 	add.w	r1, r7, #16
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f7fe f839 	bl	8006d18 <xQueueGenericSend>
 8008ca6:	6278      	str	r0, [r7, #36]	; 0x24
 8008ca8:	e008      	b.n	8008cbc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008caa:	4b07      	ldr	r3, [pc, #28]	; (8008cc8 <xTimerGenericCommand+0x98>)
 8008cac:	6818      	ldr	r0, [r3, #0]
 8008cae:	f107 0110 	add.w	r1, r7, #16
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	683a      	ldr	r2, [r7, #0]
 8008cb6:	f7fe f92d 	bl	8006f14 <xQueueGenericSendFromISR>
 8008cba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3728      	adds	r7, #40	; 0x28
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	20001048 	.word	0x20001048

08008ccc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b088      	sub	sp, #32
 8008cd0:	af02      	add	r7, sp, #8
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cd6:	4b22      	ldr	r3, [pc, #136]	; (8008d60 <prvProcessExpiredTimer+0x94>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	3304      	adds	r3, #4
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f7fd fe45 	bl	8006974 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cf0:	f003 0304 	and.w	r3, r3, #4
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d022      	beq.n	8008d3e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	699a      	ldr	r2, [r3, #24]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	18d1      	adds	r1, r2, r3
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	683a      	ldr	r2, [r7, #0]
 8008d04:	6978      	ldr	r0, [r7, #20]
 8008d06:	f000 f8d1 	bl	8008eac <prvInsertTimerInActiveList>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d01f      	beq.n	8008d50 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d10:	2300      	movs	r3, #0
 8008d12:	9300      	str	r3, [sp, #0]
 8008d14:	2300      	movs	r3, #0
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	2100      	movs	r1, #0
 8008d1a:	6978      	ldr	r0, [r7, #20]
 8008d1c:	f7ff ff88 	bl	8008c30 <xTimerGenericCommand>
 8008d20:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d113      	bne.n	8008d50 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2c:	f383 8811 	msr	BASEPRI, r3
 8008d30:	f3bf 8f6f 	isb	sy
 8008d34:	f3bf 8f4f 	dsb	sy
 8008d38:	60fb      	str	r3, [r7, #12]
}
 8008d3a:	bf00      	nop
 8008d3c:	e7fe      	b.n	8008d3c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d44:	f023 0301 	bic.w	r3, r3, #1
 8008d48:	b2da      	uxtb	r2, r3
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	6a1b      	ldr	r3, [r3, #32]
 8008d54:	6978      	ldr	r0, [r7, #20]
 8008d56:	4798      	blx	r3
}
 8008d58:	bf00      	nop
 8008d5a:	3718      	adds	r7, #24
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}
 8008d60:	20001040 	.word	0x20001040

08008d64 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008d6c:	f107 0308 	add.w	r3, r7, #8
 8008d70:	4618      	mov	r0, r3
 8008d72:	f000 f857 	bl	8008e24 <prvGetNextExpireTime>
 8008d76:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	68f8      	ldr	r0, [r7, #12]
 8008d7e:	f000 f803 	bl	8008d88 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008d82:	f000 f8d5 	bl	8008f30 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008d86:	e7f1      	b.n	8008d6c <prvTimerTask+0x8>

08008d88 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008d92:	f7ff f883 	bl	8007e9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008d96:	f107 0308 	add.w	r3, r7, #8
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f000 f866 	bl	8008e6c <prvSampleTimeNow>
 8008da0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d130      	bne.n	8008e0a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10a      	bne.n	8008dc4 <prvProcessTimerOrBlockTask+0x3c>
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d806      	bhi.n	8008dc4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008db6:	f7ff f8b7 	bl	8007f28 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008dba:	68f9      	ldr	r1, [r7, #12]
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f7ff ff85 	bl	8008ccc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008dc2:	e024      	b.n	8008e0e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d008      	beq.n	8008ddc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008dca:	4b13      	ldr	r3, [pc, #76]	; (8008e18 <prvProcessTimerOrBlockTask+0x90>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d101      	bne.n	8008dd8 <prvProcessTimerOrBlockTask+0x50>
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	e000      	b.n	8008dda <prvProcessTimerOrBlockTask+0x52>
 8008dd8:	2300      	movs	r3, #0
 8008dda:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008ddc:	4b0f      	ldr	r3, [pc, #60]	; (8008e1c <prvProcessTimerOrBlockTask+0x94>)
 8008dde:	6818      	ldr	r0, [r3, #0]
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	1ad3      	subs	r3, r2, r3
 8008de6:	683a      	ldr	r2, [r7, #0]
 8008de8:	4619      	mov	r1, r3
 8008dea:	f7fe fdc7 	bl	800797c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008dee:	f7ff f89b 	bl	8007f28 <xTaskResumeAll>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d10a      	bne.n	8008e0e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008df8:	4b09      	ldr	r3, [pc, #36]	; (8008e20 <prvProcessTimerOrBlockTask+0x98>)
 8008dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dfe:	601a      	str	r2, [r3, #0]
 8008e00:	f3bf 8f4f 	dsb	sy
 8008e04:	f3bf 8f6f 	isb	sy
}
 8008e08:	e001      	b.n	8008e0e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008e0a:	f7ff f88d 	bl	8007f28 <xTaskResumeAll>
}
 8008e0e:	bf00      	nop
 8008e10:	3710      	adds	r7, #16
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	bf00      	nop
 8008e18:	20001044 	.word	0x20001044
 8008e1c:	20001048 	.word	0x20001048
 8008e20:	e000ed04 	.word	0xe000ed04

08008e24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008e2c:	4b0e      	ldr	r3, [pc, #56]	; (8008e68 <prvGetNextExpireTime+0x44>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d101      	bne.n	8008e3a <prvGetNextExpireTime+0x16>
 8008e36:	2201      	movs	r2, #1
 8008e38:	e000      	b.n	8008e3c <prvGetNextExpireTime+0x18>
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d105      	bne.n	8008e54 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e48:	4b07      	ldr	r3, [pc, #28]	; (8008e68 <prvGetNextExpireTime+0x44>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	60fb      	str	r3, [r7, #12]
 8008e52:	e001      	b.n	8008e58 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008e54:	2300      	movs	r3, #0
 8008e56:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008e58:	68fb      	ldr	r3, [r7, #12]
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3714      	adds	r7, #20
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr
 8008e66:	bf00      	nop
 8008e68:	20001040 	.word	0x20001040

08008e6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008e74:	f7ff f8f6 	bl	8008064 <xTaskGetTickCount>
 8008e78:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008e7a:	4b0b      	ldr	r3, [pc, #44]	; (8008ea8 <prvSampleTimeNow+0x3c>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	68fa      	ldr	r2, [r7, #12]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d205      	bcs.n	8008e90 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008e84:	f000 f936 	bl	80090f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	601a      	str	r2, [r3, #0]
 8008e8e:	e002      	b.n	8008e96 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008e96:	4a04      	ldr	r2, [pc, #16]	; (8008ea8 <prvSampleTimeNow+0x3c>)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	20001050 	.word	0x20001050

08008eac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b086      	sub	sp, #24
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	607a      	str	r2, [r7, #4]
 8008eb8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	68ba      	ldr	r2, [r7, #8]
 8008ec2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	68fa      	ldr	r2, [r7, #12]
 8008ec8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008eca:	68ba      	ldr	r2, [r7, #8]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d812      	bhi.n	8008ef8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ed2:	687a      	ldr	r2, [r7, #4]
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	1ad2      	subs	r2, r2, r3
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	699b      	ldr	r3, [r3, #24]
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d302      	bcc.n	8008ee6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	617b      	str	r3, [r7, #20]
 8008ee4:	e01b      	b.n	8008f1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008ee6:	4b10      	ldr	r3, [pc, #64]	; (8008f28 <prvInsertTimerInActiveList+0x7c>)
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	3304      	adds	r3, #4
 8008eee:	4619      	mov	r1, r3
 8008ef0:	4610      	mov	r0, r2
 8008ef2:	f7fd fd06 	bl	8006902 <vListInsert>
 8008ef6:	e012      	b.n	8008f1e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d206      	bcs.n	8008f0e <prvInsertTimerInActiveList+0x62>
 8008f00:	68ba      	ldr	r2, [r7, #8]
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d302      	bcc.n	8008f0e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	617b      	str	r3, [r7, #20]
 8008f0c:	e007      	b.n	8008f1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f0e:	4b07      	ldr	r3, [pc, #28]	; (8008f2c <prvInsertTimerInActiveList+0x80>)
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	3304      	adds	r3, #4
 8008f16:	4619      	mov	r1, r3
 8008f18:	4610      	mov	r0, r2
 8008f1a:	f7fd fcf2 	bl	8006902 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008f1e:	697b      	ldr	r3, [r7, #20]
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3718      	adds	r7, #24
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}
 8008f28:	20001044 	.word	0x20001044
 8008f2c:	20001040 	.word	0x20001040

08008f30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b08e      	sub	sp, #56	; 0x38
 8008f34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f36:	e0ca      	b.n	80090ce <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	da18      	bge.n	8008f70 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008f3e:	1d3b      	adds	r3, r7, #4
 8008f40:	3304      	adds	r3, #4
 8008f42:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d10a      	bne.n	8008f60 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4e:	f383 8811 	msr	BASEPRI, r3
 8008f52:	f3bf 8f6f 	isb	sy
 8008f56:	f3bf 8f4f 	dsb	sy
 8008f5a:	61fb      	str	r3, [r7, #28]
}
 8008f5c:	bf00      	nop
 8008f5e:	e7fe      	b.n	8008f5e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f66:	6850      	ldr	r0, [r2, #4]
 8008f68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f6a:	6892      	ldr	r2, [r2, #8]
 8008f6c:	4611      	mov	r1, r2
 8008f6e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	f2c0 80aa 	blt.w	80090cc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f7e:	695b      	ldr	r3, [r3, #20]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d004      	beq.n	8008f8e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f86:	3304      	adds	r3, #4
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f7fd fcf3 	bl	8006974 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f8e:	463b      	mov	r3, r7
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7ff ff6b 	bl	8008e6c <prvSampleTimeNow>
 8008f96:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2b09      	cmp	r3, #9
 8008f9c:	f200 8097 	bhi.w	80090ce <prvProcessReceivedCommands+0x19e>
 8008fa0:	a201      	add	r2, pc, #4	; (adr r2, 8008fa8 <prvProcessReceivedCommands+0x78>)
 8008fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa6:	bf00      	nop
 8008fa8:	08008fd1 	.word	0x08008fd1
 8008fac:	08008fd1 	.word	0x08008fd1
 8008fb0:	08008fd1 	.word	0x08008fd1
 8008fb4:	08009045 	.word	0x08009045
 8008fb8:	08009059 	.word	0x08009059
 8008fbc:	080090a3 	.word	0x080090a3
 8008fc0:	08008fd1 	.word	0x08008fd1
 8008fc4:	08008fd1 	.word	0x08008fd1
 8008fc8:	08009045 	.word	0x08009045
 8008fcc:	08009059 	.word	0x08009059
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fd6:	f043 0301 	orr.w	r3, r3, #1
 8008fda:	b2da      	uxtb	r2, r3
 8008fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008fe2:	68ba      	ldr	r2, [r7, #8]
 8008fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe6:	699b      	ldr	r3, [r3, #24]
 8008fe8:	18d1      	adds	r1, r2, r3
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ff0:	f7ff ff5c 	bl	8008eac <prvInsertTimerInActiveList>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d069      	beq.n	80090ce <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffc:	6a1b      	ldr	r3, [r3, #32]
 8008ffe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009000:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009004:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009008:	f003 0304 	and.w	r3, r3, #4
 800900c:	2b00      	cmp	r3, #0
 800900e:	d05e      	beq.n	80090ce <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009010:	68ba      	ldr	r2, [r7, #8]
 8009012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009014:	699b      	ldr	r3, [r3, #24]
 8009016:	441a      	add	r2, r3
 8009018:	2300      	movs	r3, #0
 800901a:	9300      	str	r3, [sp, #0]
 800901c:	2300      	movs	r3, #0
 800901e:	2100      	movs	r1, #0
 8009020:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009022:	f7ff fe05 	bl	8008c30 <xTimerGenericCommand>
 8009026:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009028:	6a3b      	ldr	r3, [r7, #32]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d14f      	bne.n	80090ce <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800902e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009032:	f383 8811 	msr	BASEPRI, r3
 8009036:	f3bf 8f6f 	isb	sy
 800903a:	f3bf 8f4f 	dsb	sy
 800903e:	61bb      	str	r3, [r7, #24]
}
 8009040:	bf00      	nop
 8009042:	e7fe      	b.n	8009042 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009046:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800904a:	f023 0301 	bic.w	r3, r3, #1
 800904e:	b2da      	uxtb	r2, r3
 8009050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009052:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009056:	e03a      	b.n	80090ce <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800905a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800905e:	f043 0301 	orr.w	r3, r3, #1
 8009062:	b2da      	uxtb	r2, r3
 8009064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009066:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800906a:	68ba      	ldr	r2, [r7, #8]
 800906c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009072:	699b      	ldr	r3, [r3, #24]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d10a      	bne.n	800908e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800907c:	f383 8811 	msr	BASEPRI, r3
 8009080:	f3bf 8f6f 	isb	sy
 8009084:	f3bf 8f4f 	dsb	sy
 8009088:	617b      	str	r3, [r7, #20]
}
 800908a:	bf00      	nop
 800908c:	e7fe      	b.n	800908c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800908e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009090:	699a      	ldr	r2, [r3, #24]
 8009092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009094:	18d1      	adds	r1, r2, r3
 8009096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800909a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800909c:	f7ff ff06 	bl	8008eac <prvInsertTimerInActiveList>
					break;
 80090a0:	e015      	b.n	80090ce <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80090a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090a8:	f003 0302 	and.w	r3, r3, #2
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d103      	bne.n	80090b8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80090b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090b2:	f000 fcb9 	bl	8009a28 <vPortFree>
 80090b6:	e00a      	b.n	80090ce <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090be:	f023 0301 	bic.w	r3, r3, #1
 80090c2:	b2da      	uxtb	r2, r3
 80090c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80090ca:	e000      	b.n	80090ce <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80090cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80090ce:	4b08      	ldr	r3, [pc, #32]	; (80090f0 <prvProcessReceivedCommands+0x1c0>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	1d39      	adds	r1, r7, #4
 80090d4:	2200      	movs	r2, #0
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7fe f844 	bl	8007164 <xQueueReceive>
 80090dc:	4603      	mov	r3, r0
 80090de:	2b00      	cmp	r3, #0
 80090e0:	f47f af2a 	bne.w	8008f38 <prvProcessReceivedCommands+0x8>
	}
}
 80090e4:	bf00      	nop
 80090e6:	bf00      	nop
 80090e8:	3730      	adds	r7, #48	; 0x30
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	20001048 	.word	0x20001048

080090f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b088      	sub	sp, #32
 80090f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80090fa:	e048      	b.n	800918e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80090fc:	4b2d      	ldr	r3, [pc, #180]	; (80091b4 <prvSwitchTimerLists+0xc0>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009106:	4b2b      	ldr	r3, [pc, #172]	; (80091b4 <prvSwitchTimerLists+0xc0>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	68db      	ldr	r3, [r3, #12]
 800910e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	3304      	adds	r3, #4
 8009114:	4618      	mov	r0, r3
 8009116:	f7fd fc2d 	bl	8006974 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	6a1b      	ldr	r3, [r3, #32]
 800911e:	68f8      	ldr	r0, [r7, #12]
 8009120:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009128:	f003 0304 	and.w	r3, r3, #4
 800912c:	2b00      	cmp	r3, #0
 800912e:	d02e      	beq.n	800918e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	699b      	ldr	r3, [r3, #24]
 8009134:	693a      	ldr	r2, [r7, #16]
 8009136:	4413      	add	r3, r2
 8009138:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800913a:	68ba      	ldr	r2, [r7, #8]
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	429a      	cmp	r2, r3
 8009140:	d90e      	bls.n	8009160 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	68ba      	ldr	r2, [r7, #8]
 8009146:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	68fa      	ldr	r2, [r7, #12]
 800914c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800914e:	4b19      	ldr	r3, [pc, #100]	; (80091b4 <prvSwitchTimerLists+0xc0>)
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	3304      	adds	r3, #4
 8009156:	4619      	mov	r1, r3
 8009158:	4610      	mov	r0, r2
 800915a:	f7fd fbd2 	bl	8006902 <vListInsert>
 800915e:	e016      	b.n	800918e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009160:	2300      	movs	r3, #0
 8009162:	9300      	str	r3, [sp, #0]
 8009164:	2300      	movs	r3, #0
 8009166:	693a      	ldr	r2, [r7, #16]
 8009168:	2100      	movs	r1, #0
 800916a:	68f8      	ldr	r0, [r7, #12]
 800916c:	f7ff fd60 	bl	8008c30 <xTimerGenericCommand>
 8009170:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d10a      	bne.n	800918e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800917c:	f383 8811 	msr	BASEPRI, r3
 8009180:	f3bf 8f6f 	isb	sy
 8009184:	f3bf 8f4f 	dsb	sy
 8009188:	603b      	str	r3, [r7, #0]
}
 800918a:	bf00      	nop
 800918c:	e7fe      	b.n	800918c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800918e:	4b09      	ldr	r3, [pc, #36]	; (80091b4 <prvSwitchTimerLists+0xc0>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d1b1      	bne.n	80090fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009198:	4b06      	ldr	r3, [pc, #24]	; (80091b4 <prvSwitchTimerLists+0xc0>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800919e:	4b06      	ldr	r3, [pc, #24]	; (80091b8 <prvSwitchTimerLists+0xc4>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a04      	ldr	r2, [pc, #16]	; (80091b4 <prvSwitchTimerLists+0xc0>)
 80091a4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80091a6:	4a04      	ldr	r2, [pc, #16]	; (80091b8 <prvSwitchTimerLists+0xc4>)
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	6013      	str	r3, [r2, #0]
}
 80091ac:	bf00      	nop
 80091ae:	3718      	adds	r7, #24
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	20001040 	.word	0x20001040
 80091b8:	20001044 	.word	0x20001044

080091bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80091c2:	f000 f967 	bl	8009494 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80091c6:	4b15      	ldr	r3, [pc, #84]	; (800921c <prvCheckForValidListAndQueue+0x60>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d120      	bne.n	8009210 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80091ce:	4814      	ldr	r0, [pc, #80]	; (8009220 <prvCheckForValidListAndQueue+0x64>)
 80091d0:	f7fd fb46 	bl	8006860 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80091d4:	4813      	ldr	r0, [pc, #76]	; (8009224 <prvCheckForValidListAndQueue+0x68>)
 80091d6:	f7fd fb43 	bl	8006860 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80091da:	4b13      	ldr	r3, [pc, #76]	; (8009228 <prvCheckForValidListAndQueue+0x6c>)
 80091dc:	4a10      	ldr	r2, [pc, #64]	; (8009220 <prvCheckForValidListAndQueue+0x64>)
 80091de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80091e0:	4b12      	ldr	r3, [pc, #72]	; (800922c <prvCheckForValidListAndQueue+0x70>)
 80091e2:	4a10      	ldr	r2, [pc, #64]	; (8009224 <prvCheckForValidListAndQueue+0x68>)
 80091e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80091e6:	2300      	movs	r3, #0
 80091e8:	9300      	str	r3, [sp, #0]
 80091ea:	4b11      	ldr	r3, [pc, #68]	; (8009230 <prvCheckForValidListAndQueue+0x74>)
 80091ec:	4a11      	ldr	r2, [pc, #68]	; (8009234 <prvCheckForValidListAndQueue+0x78>)
 80091ee:	2110      	movs	r1, #16
 80091f0:	200a      	movs	r0, #10
 80091f2:	f7fd fc51 	bl	8006a98 <xQueueGenericCreateStatic>
 80091f6:	4603      	mov	r3, r0
 80091f8:	4a08      	ldr	r2, [pc, #32]	; (800921c <prvCheckForValidListAndQueue+0x60>)
 80091fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80091fc:	4b07      	ldr	r3, [pc, #28]	; (800921c <prvCheckForValidListAndQueue+0x60>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d005      	beq.n	8009210 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009204:	4b05      	ldr	r3, [pc, #20]	; (800921c <prvCheckForValidListAndQueue+0x60>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	490b      	ldr	r1, [pc, #44]	; (8009238 <prvCheckForValidListAndQueue+0x7c>)
 800920a:	4618      	mov	r0, r3
 800920c:	f7fe fb62 	bl	80078d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009210:	f000 f970 	bl	80094f4 <vPortExitCritical>
}
 8009214:	bf00      	nop
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
 800921a:	bf00      	nop
 800921c:	20001048 	.word	0x20001048
 8009220:	20001018 	.word	0x20001018
 8009224:	2000102c 	.word	0x2000102c
 8009228:	20001040 	.word	0x20001040
 800922c:	20001044 	.word	0x20001044
 8009230:	200010f4 	.word	0x200010f4
 8009234:	20001054 	.word	0x20001054
 8009238:	0800d664 	.word	0x0800d664

0800923c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800923c:	b480      	push	{r7}
 800923e:	b085      	sub	sp, #20
 8009240:	af00      	add	r7, sp, #0
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	60b9      	str	r1, [r7, #8]
 8009246:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	3b04      	subs	r3, #4
 800924c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009254:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	3b04      	subs	r3, #4
 800925a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	f023 0201 	bic.w	r2, r3, #1
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	3b04      	subs	r3, #4
 800926a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800926c:	4a0c      	ldr	r2, [pc, #48]	; (80092a0 <pxPortInitialiseStack+0x64>)
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	3b14      	subs	r3, #20
 8009276:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	3b04      	subs	r3, #4
 8009282:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f06f 0202 	mvn.w	r2, #2
 800928a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	3b20      	subs	r3, #32
 8009290:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009292:	68fb      	ldr	r3, [r7, #12]
}
 8009294:	4618      	mov	r0, r3
 8009296:	3714      	adds	r7, #20
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr
 80092a0:	080092a5 	.word	0x080092a5

080092a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80092a4:	b480      	push	{r7}
 80092a6:	b085      	sub	sp, #20
 80092a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80092aa:	2300      	movs	r3, #0
 80092ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80092ae:	4b12      	ldr	r3, [pc, #72]	; (80092f8 <prvTaskExitError+0x54>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b6:	d00a      	beq.n	80092ce <prvTaskExitError+0x2a>
	__asm volatile
 80092b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092bc:	f383 8811 	msr	BASEPRI, r3
 80092c0:	f3bf 8f6f 	isb	sy
 80092c4:	f3bf 8f4f 	dsb	sy
 80092c8:	60fb      	str	r3, [r7, #12]
}
 80092ca:	bf00      	nop
 80092cc:	e7fe      	b.n	80092cc <prvTaskExitError+0x28>
	__asm volatile
 80092ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d2:	f383 8811 	msr	BASEPRI, r3
 80092d6:	f3bf 8f6f 	isb	sy
 80092da:	f3bf 8f4f 	dsb	sy
 80092de:	60bb      	str	r3, [r7, #8]
}
 80092e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80092e2:	bf00      	nop
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d0fc      	beq.n	80092e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80092ea:	bf00      	nop
 80092ec:	bf00      	nop
 80092ee:	3714      	adds	r7, #20
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr
 80092f8:	2000000c 	.word	0x2000000c
 80092fc:	00000000 	.word	0x00000000

08009300 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009300:	4b07      	ldr	r3, [pc, #28]	; (8009320 <pxCurrentTCBConst2>)
 8009302:	6819      	ldr	r1, [r3, #0]
 8009304:	6808      	ldr	r0, [r1, #0]
 8009306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800930a:	f380 8809 	msr	PSP, r0
 800930e:	f3bf 8f6f 	isb	sy
 8009312:	f04f 0000 	mov.w	r0, #0
 8009316:	f380 8811 	msr	BASEPRI, r0
 800931a:	4770      	bx	lr
 800931c:	f3af 8000 	nop.w

08009320 <pxCurrentTCBConst2>:
 8009320:	20000b18 	.word	0x20000b18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009324:	bf00      	nop
 8009326:	bf00      	nop

08009328 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009328:	4808      	ldr	r0, [pc, #32]	; (800934c <prvPortStartFirstTask+0x24>)
 800932a:	6800      	ldr	r0, [r0, #0]
 800932c:	6800      	ldr	r0, [r0, #0]
 800932e:	f380 8808 	msr	MSP, r0
 8009332:	f04f 0000 	mov.w	r0, #0
 8009336:	f380 8814 	msr	CONTROL, r0
 800933a:	b662      	cpsie	i
 800933c:	b661      	cpsie	f
 800933e:	f3bf 8f4f 	dsb	sy
 8009342:	f3bf 8f6f 	isb	sy
 8009346:	df00      	svc	0
 8009348:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800934a:	bf00      	nop
 800934c:	e000ed08 	.word	0xe000ed08

08009350 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b086      	sub	sp, #24
 8009354:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009356:	4b46      	ldr	r3, [pc, #280]	; (8009470 <xPortStartScheduler+0x120>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4a46      	ldr	r2, [pc, #280]	; (8009474 <xPortStartScheduler+0x124>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d10a      	bne.n	8009376 <xPortStartScheduler+0x26>
	__asm volatile
 8009360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009364:	f383 8811 	msr	BASEPRI, r3
 8009368:	f3bf 8f6f 	isb	sy
 800936c:	f3bf 8f4f 	dsb	sy
 8009370:	613b      	str	r3, [r7, #16]
}
 8009372:	bf00      	nop
 8009374:	e7fe      	b.n	8009374 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009376:	4b3e      	ldr	r3, [pc, #248]	; (8009470 <xPortStartScheduler+0x120>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a3f      	ldr	r2, [pc, #252]	; (8009478 <xPortStartScheduler+0x128>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d10a      	bne.n	8009396 <xPortStartScheduler+0x46>
	__asm volatile
 8009380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009384:	f383 8811 	msr	BASEPRI, r3
 8009388:	f3bf 8f6f 	isb	sy
 800938c:	f3bf 8f4f 	dsb	sy
 8009390:	60fb      	str	r3, [r7, #12]
}
 8009392:	bf00      	nop
 8009394:	e7fe      	b.n	8009394 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009396:	4b39      	ldr	r3, [pc, #228]	; (800947c <xPortStartScheduler+0x12c>)
 8009398:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	22ff      	movs	r2, #255	; 0xff
 80093a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80093b0:	78fb      	ldrb	r3, [r7, #3]
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80093b8:	b2da      	uxtb	r2, r3
 80093ba:	4b31      	ldr	r3, [pc, #196]	; (8009480 <xPortStartScheduler+0x130>)
 80093bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80093be:	4b31      	ldr	r3, [pc, #196]	; (8009484 <xPortStartScheduler+0x134>)
 80093c0:	2207      	movs	r2, #7
 80093c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80093c4:	e009      	b.n	80093da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80093c6:	4b2f      	ldr	r3, [pc, #188]	; (8009484 <xPortStartScheduler+0x134>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	3b01      	subs	r3, #1
 80093cc:	4a2d      	ldr	r2, [pc, #180]	; (8009484 <xPortStartScheduler+0x134>)
 80093ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80093d0:	78fb      	ldrb	r3, [r7, #3]
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	005b      	lsls	r3, r3, #1
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80093da:	78fb      	ldrb	r3, [r7, #3]
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093e2:	2b80      	cmp	r3, #128	; 0x80
 80093e4:	d0ef      	beq.n	80093c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80093e6:	4b27      	ldr	r3, [pc, #156]	; (8009484 <xPortStartScheduler+0x134>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f1c3 0307 	rsb	r3, r3, #7
 80093ee:	2b04      	cmp	r3, #4
 80093f0:	d00a      	beq.n	8009408 <xPortStartScheduler+0xb8>
	__asm volatile
 80093f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f6:	f383 8811 	msr	BASEPRI, r3
 80093fa:	f3bf 8f6f 	isb	sy
 80093fe:	f3bf 8f4f 	dsb	sy
 8009402:	60bb      	str	r3, [r7, #8]
}
 8009404:	bf00      	nop
 8009406:	e7fe      	b.n	8009406 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009408:	4b1e      	ldr	r3, [pc, #120]	; (8009484 <xPortStartScheduler+0x134>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	021b      	lsls	r3, r3, #8
 800940e:	4a1d      	ldr	r2, [pc, #116]	; (8009484 <xPortStartScheduler+0x134>)
 8009410:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009412:	4b1c      	ldr	r3, [pc, #112]	; (8009484 <xPortStartScheduler+0x134>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800941a:	4a1a      	ldr	r2, [pc, #104]	; (8009484 <xPortStartScheduler+0x134>)
 800941c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	b2da      	uxtb	r2, r3
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009426:	4b18      	ldr	r3, [pc, #96]	; (8009488 <xPortStartScheduler+0x138>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a17      	ldr	r2, [pc, #92]	; (8009488 <xPortStartScheduler+0x138>)
 800942c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009430:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009432:	4b15      	ldr	r3, [pc, #84]	; (8009488 <xPortStartScheduler+0x138>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a14      	ldr	r2, [pc, #80]	; (8009488 <xPortStartScheduler+0x138>)
 8009438:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800943c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800943e:	f000 f9a1 	bl	8009784 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009442:	4b12      	ldr	r3, [pc, #72]	; (800948c <xPortStartScheduler+0x13c>)
 8009444:	2200      	movs	r2, #0
 8009446:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009448:	f000 f9d8 	bl	80097fc <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800944c:	4b10      	ldr	r3, [pc, #64]	; (8009490 <xPortStartScheduler+0x140>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a0f      	ldr	r2, [pc, #60]	; (8009490 <xPortStartScheduler+0x140>)
 8009452:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009456:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009458:	f7ff ff66 	bl	8009328 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800945c:	f7fe fef4 	bl	8008248 <vTaskSwitchContext>
	prvTaskExitError();
 8009460:	f7ff ff20 	bl	80092a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009464:	2300      	movs	r3, #0
}
 8009466:	4618      	mov	r0, r3
 8009468:	3718      	adds	r7, #24
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	e000ed00 	.word	0xe000ed00
 8009474:	410fc271 	.word	0x410fc271
 8009478:	410fc270 	.word	0x410fc270
 800947c:	e000e400 	.word	0xe000e400
 8009480:	20001150 	.word	0x20001150
 8009484:	20001154 	.word	0x20001154
 8009488:	e000ed20 	.word	0xe000ed20
 800948c:	2000000c 	.word	0x2000000c
 8009490:	e000ef34 	.word	0xe000ef34

08009494 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
	__asm volatile
 800949a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800949e:	f383 8811 	msr	BASEPRI, r3
 80094a2:	f3bf 8f6f 	isb	sy
 80094a6:	f3bf 8f4f 	dsb	sy
 80094aa:	607b      	str	r3, [r7, #4]
}
 80094ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80094ae:	4b0f      	ldr	r3, [pc, #60]	; (80094ec <vPortEnterCritical+0x58>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	3301      	adds	r3, #1
 80094b4:	4a0d      	ldr	r2, [pc, #52]	; (80094ec <vPortEnterCritical+0x58>)
 80094b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80094b8:	4b0c      	ldr	r3, [pc, #48]	; (80094ec <vPortEnterCritical+0x58>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d10f      	bne.n	80094e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80094c0:	4b0b      	ldr	r3, [pc, #44]	; (80094f0 <vPortEnterCritical+0x5c>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d00a      	beq.n	80094e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80094ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ce:	f383 8811 	msr	BASEPRI, r3
 80094d2:	f3bf 8f6f 	isb	sy
 80094d6:	f3bf 8f4f 	dsb	sy
 80094da:	603b      	str	r3, [r7, #0]
}
 80094dc:	bf00      	nop
 80094de:	e7fe      	b.n	80094de <vPortEnterCritical+0x4a>
	}
}
 80094e0:	bf00      	nop
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr
 80094ec:	2000000c 	.word	0x2000000c
 80094f0:	e000ed04 	.word	0xe000ed04

080094f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80094fa:	4b12      	ldr	r3, [pc, #72]	; (8009544 <vPortExitCritical+0x50>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d10a      	bne.n	8009518 <vPortExitCritical+0x24>
	__asm volatile
 8009502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009506:	f383 8811 	msr	BASEPRI, r3
 800950a:	f3bf 8f6f 	isb	sy
 800950e:	f3bf 8f4f 	dsb	sy
 8009512:	607b      	str	r3, [r7, #4]
}
 8009514:	bf00      	nop
 8009516:	e7fe      	b.n	8009516 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009518:	4b0a      	ldr	r3, [pc, #40]	; (8009544 <vPortExitCritical+0x50>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	3b01      	subs	r3, #1
 800951e:	4a09      	ldr	r2, [pc, #36]	; (8009544 <vPortExitCritical+0x50>)
 8009520:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009522:	4b08      	ldr	r3, [pc, #32]	; (8009544 <vPortExitCritical+0x50>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d105      	bne.n	8009536 <vPortExitCritical+0x42>
 800952a:	2300      	movs	r3, #0
 800952c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	f383 8811 	msr	BASEPRI, r3
}
 8009534:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009536:	bf00      	nop
 8009538:	370c      	adds	r7, #12
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr
 8009542:	bf00      	nop
 8009544:	2000000c 	.word	0x2000000c
	...

08009550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009550:	f3ef 8009 	mrs	r0, PSP
 8009554:	f3bf 8f6f 	isb	sy
 8009558:	4b15      	ldr	r3, [pc, #84]	; (80095b0 <pxCurrentTCBConst>)
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	f01e 0f10 	tst.w	lr, #16
 8009560:	bf08      	it	eq
 8009562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800956a:	6010      	str	r0, [r2, #0]
 800956c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009570:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009574:	f380 8811 	msr	BASEPRI, r0
 8009578:	f3bf 8f4f 	dsb	sy
 800957c:	f3bf 8f6f 	isb	sy
 8009580:	f7fe fe62 	bl	8008248 <vTaskSwitchContext>
 8009584:	f04f 0000 	mov.w	r0, #0
 8009588:	f380 8811 	msr	BASEPRI, r0
 800958c:	bc09      	pop	{r0, r3}
 800958e:	6819      	ldr	r1, [r3, #0]
 8009590:	6808      	ldr	r0, [r1, #0]
 8009592:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009596:	f01e 0f10 	tst.w	lr, #16
 800959a:	bf08      	it	eq
 800959c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80095a0:	f380 8809 	msr	PSP, r0
 80095a4:	f3bf 8f6f 	isb	sy
 80095a8:	4770      	bx	lr
 80095aa:	bf00      	nop
 80095ac:	f3af 8000 	nop.w

080095b0 <pxCurrentTCBConst>:
 80095b0:	20000b18 	.word	0x20000b18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80095b4:	bf00      	nop
 80095b6:	bf00      	nop

080095b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
	__asm volatile
 80095be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c2:	f383 8811 	msr	BASEPRI, r3
 80095c6:	f3bf 8f6f 	isb	sy
 80095ca:	f3bf 8f4f 	dsb	sy
 80095ce:	607b      	str	r3, [r7, #4]
}
 80095d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80095d2:	f7fe fd7f 	bl	80080d4 <xTaskIncrementTick>
 80095d6:	4603      	mov	r3, r0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d003      	beq.n	80095e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80095dc:	4b06      	ldr	r3, [pc, #24]	; (80095f8 <xPortSysTickHandler+0x40>)
 80095de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095e2:	601a      	str	r2, [r3, #0]
 80095e4:	2300      	movs	r3, #0
 80095e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	f383 8811 	msr	BASEPRI, r3
}
 80095ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80095f0:	bf00      	nop
 80095f2:	3708      	adds	r7, #8
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}
 80095f8:	e000ed04 	.word	0xe000ed04

080095fc <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b088      	sub	sp, #32
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 8009604:	4b59      	ldr	r3, [pc, #356]	; (800976c <vPortSuppressTicksAndSleep+0x170>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	429a      	cmp	r2, r3
 800960c:	d902      	bls.n	8009614 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800960e:	4b57      	ldr	r3, [pc, #348]	; (800976c <vPortSuppressTicksAndSleep+0x170>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 8009614:	4b56      	ldr	r3, [pc, #344]	; (8009770 <vPortSuppressTicksAndSleep+0x174>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a55      	ldr	r2, [pc, #340]	; (8009770 <vPortSuppressTicksAndSleep+0x174>)
 800961a:	f023 0301 	bic.w	r3, r3, #1
 800961e:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 8009620:	4b54      	ldr	r3, [pc, #336]	; (8009774 <vPortSuppressTicksAndSleep+0x178>)
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	3b01      	subs	r3, #1
 8009628:	4953      	ldr	r1, [pc, #332]	; (8009778 <vPortSuppressTicksAndSleep+0x17c>)
 800962a:	6809      	ldr	r1, [r1, #0]
 800962c:	fb01 f303 	mul.w	r3, r1, r3
 8009630:	4413      	add	r3, r2
 8009632:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 8009634:	4b51      	ldr	r3, [pc, #324]	; (800977c <vPortSuppressTicksAndSleep+0x180>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	69fa      	ldr	r2, [r7, #28]
 800963a:	429a      	cmp	r2, r3
 800963c:	d904      	bls.n	8009648 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800963e:	4b4f      	ldr	r3, [pc, #316]	; (800977c <vPortSuppressTicksAndSleep+0x180>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	69fa      	ldr	r2, [r7, #28]
 8009644:	1ad3      	subs	r3, r2, r3
 8009646:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 8009648:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800964a:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800964e:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 8009652:	f7fe ffd7 	bl	8008604 <eTaskConfirmSleepModeStatus>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d110      	bne.n	800967e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800965c:	4b45      	ldr	r3, [pc, #276]	; (8009774 <vPortSuppressTicksAndSleep+0x178>)
 800965e:	4a48      	ldr	r2, [pc, #288]	; (8009780 <vPortSuppressTicksAndSleep+0x184>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8009664:	4b42      	ldr	r3, [pc, #264]	; (8009770 <vPortSuppressTicksAndSleep+0x174>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a41      	ldr	r2, [pc, #260]	; (8009770 <vPortSuppressTicksAndSleep+0x174>)
 800966a:	f043 0301 	orr.w	r3, r3, #1
 800966e:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8009670:	4b41      	ldr	r3, [pc, #260]	; (8009778 <vPortSuppressTicksAndSleep+0x17c>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a42      	ldr	r2, [pc, #264]	; (8009780 <vPortSuppressTicksAndSleep+0x184>)
 8009676:	3b01      	subs	r3, #1
 8009678:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800967a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800967c:	e071      	b.n	8009762 <vPortSuppressTicksAndSleep+0x166>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800967e:	4a40      	ldr	r2, [pc, #256]	; (8009780 <vPortSuppressTicksAndSleep+0x184>)
 8009680:	69fb      	ldr	r3, [r7, #28]
 8009682:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009684:	4b3b      	ldr	r3, [pc, #236]	; (8009774 <vPortSuppressTicksAndSleep+0x178>)
 8009686:	2200      	movs	r2, #0
 8009688:	601a      	str	r2, [r3, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 800968e:	6938      	ldr	r0, [r7, #16]
 8009690:	f7f6 ff80 	bl	8000594 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d004      	beq.n	80096a4 <vPortSuppressTicksAndSleep+0xa8>
				__asm volatile( "dsb" ::: "memory" );
 800969a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800969e:	bf30      	wfi
				__asm volatile( "isb" );
 80096a0:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f7f6 ffa9 	bl	80005fc <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 80096aa:	b662      	cpsie	i
			__asm volatile( "dsb" );
 80096ac:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 80096b0:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 80096b4:	b672      	cpsid	i
			__asm volatile( "dsb" );
 80096b6:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 80096ba:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 80096be:	4b2c      	ldr	r3, [pc, #176]	; (8009770 <vPortSuppressTicksAndSleep+0x174>)
 80096c0:	2206      	movs	r2, #6
 80096c2:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 80096c4:	4b2a      	ldr	r3, [pc, #168]	; (8009770 <vPortSuppressTicksAndSleep+0x174>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d01d      	beq.n	800970c <vPortSuppressTicksAndSleep+0x110>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 80096d0:	4b29      	ldr	r3, [pc, #164]	; (8009778 <vPortSuppressTicksAndSleep+0x17c>)
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	4b27      	ldr	r3, [pc, #156]	; (8009774 <vPortSuppressTicksAndSleep+0x178>)
 80096d6:	6819      	ldr	r1, [r3, #0]
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	1acb      	subs	r3, r1, r3
 80096dc:	4413      	add	r3, r2
 80096de:	3b01      	subs	r3, #1
 80096e0:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 80096e2:	4b26      	ldr	r3, [pc, #152]	; (800977c <vPortSuppressTicksAndSleep+0x180>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	697a      	ldr	r2, [r7, #20]
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d304      	bcc.n	80096f6 <vPortSuppressTicksAndSleep+0xfa>
 80096ec:	4b22      	ldr	r3, [pc, #136]	; (8009778 <vPortSuppressTicksAndSleep+0x17c>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	697a      	ldr	r2, [r7, #20]
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d903      	bls.n	80096fe <vPortSuppressTicksAndSleep+0x102>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 80096f6:	4b20      	ldr	r3, [pc, #128]	; (8009778 <vPortSuppressTicksAndSleep+0x17c>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	3b01      	subs	r3, #1
 80096fc:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 80096fe:	4a20      	ldr	r2, [pc, #128]	; (8009780 <vPortSuppressTicksAndSleep+0x184>)
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	3b01      	subs	r3, #1
 8009708:	61bb      	str	r3, [r7, #24]
 800970a:	e018      	b.n	800973e <vPortSuppressTicksAndSleep+0x142>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800970c:	4b1a      	ldr	r3, [pc, #104]	; (8009778 <vPortSuppressTicksAndSleep+0x17c>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	fb03 f202 	mul.w	r2, r3, r2
 8009716:	4b17      	ldr	r3, [pc, #92]	; (8009774 <vPortSuppressTicksAndSleep+0x178>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	1ad3      	subs	r3, r2, r3
 800971c:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800971e:	4b16      	ldr	r3, [pc, #88]	; (8009778 <vPortSuppressTicksAndSleep+0x17c>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	68fa      	ldr	r2, [r7, #12]
 8009724:	fbb2 f3f3 	udiv	r3, r2, r3
 8009728:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800972a:	69bb      	ldr	r3, [r7, #24]
 800972c:	3301      	adds	r3, #1
 800972e:	4a12      	ldr	r2, [pc, #72]	; (8009778 <vPortSuppressTicksAndSleep+0x17c>)
 8009730:	6812      	ldr	r2, [r2, #0]
 8009732:	fb03 f202 	mul.w	r2, r3, r2
 8009736:	4912      	ldr	r1, [pc, #72]	; (8009780 <vPortSuppressTicksAndSleep+0x184>)
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	1ad3      	subs	r3, r2, r3
 800973c:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800973e:	4b0d      	ldr	r3, [pc, #52]	; (8009774 <vPortSuppressTicksAndSleep+0x178>)
 8009740:	2200      	movs	r2, #0
 8009742:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8009744:	4b0a      	ldr	r3, [pc, #40]	; (8009770 <vPortSuppressTicksAndSleep+0x174>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a09      	ldr	r2, [pc, #36]	; (8009770 <vPortSuppressTicksAndSleep+0x174>)
 800974a:	f043 0301 	orr.w	r3, r3, #1
 800974e:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 8009750:	69b8      	ldr	r0, [r7, #24]
 8009752:	f7fe fc97 	bl	8008084 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8009756:	4b08      	ldr	r3, [pc, #32]	; (8009778 <vPortSuppressTicksAndSleep+0x17c>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a09      	ldr	r2, [pc, #36]	; (8009780 <vPortSuppressTicksAndSleep+0x184>)
 800975c:	3b01      	subs	r3, #1
 800975e:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 8009760:	b662      	cpsie	i
	}
 8009762:	bf00      	nop
 8009764:	3720      	adds	r7, #32
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	20001148 	.word	0x20001148
 8009770:	e000e010 	.word	0xe000e010
 8009774:	e000e018 	.word	0xe000e018
 8009778:	20001144 	.word	0x20001144
 800977c:	2000114c 	.word	0x2000114c
 8009780:	e000e014 	.word	0xe000e014

08009784 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009784:	b480      	push	{r7}
 8009786:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8009788:	4b14      	ldr	r3, [pc, #80]	; (80097dc <vPortSetupTimerInterrupt+0x58>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4a14      	ldr	r2, [pc, #80]	; (80097e0 <vPortSetupTimerInterrupt+0x5c>)
 800978e:	fba2 2303 	umull	r2, r3, r2, r3
 8009792:	099b      	lsrs	r3, r3, #6
 8009794:	4a13      	ldr	r2, [pc, #76]	; (80097e4 <vPortSetupTimerInterrupt+0x60>)
 8009796:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 8009798:	4b12      	ldr	r3, [pc, #72]	; (80097e4 <vPortSetupTimerInterrupt+0x60>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80097a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80097a4:	4a10      	ldr	r2, [pc, #64]	; (80097e8 <vPortSetupTimerInterrupt+0x64>)
 80097a6:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 80097a8:	4b10      	ldr	r3, [pc, #64]	; (80097ec <vPortSetupTimerInterrupt+0x68>)
 80097aa:	222d      	movs	r2, #45	; 0x2d
 80097ac:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80097ae:	4b10      	ldr	r3, [pc, #64]	; (80097f0 <vPortSetupTimerInterrupt+0x6c>)
 80097b0:	2200      	movs	r2, #0
 80097b2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80097b4:	4b0f      	ldr	r3, [pc, #60]	; (80097f4 <vPortSetupTimerInterrupt+0x70>)
 80097b6:	2200      	movs	r2, #0
 80097b8:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80097ba:	4b08      	ldr	r3, [pc, #32]	; (80097dc <vPortSetupTimerInterrupt+0x58>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4a08      	ldr	r2, [pc, #32]	; (80097e0 <vPortSetupTimerInterrupt+0x5c>)
 80097c0:	fba2 2303 	umull	r2, r3, r2, r3
 80097c4:	099b      	lsrs	r3, r3, #6
 80097c6:	4a0c      	ldr	r2, [pc, #48]	; (80097f8 <vPortSetupTimerInterrupt+0x74>)
 80097c8:	3b01      	subs	r3, #1
 80097ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80097cc:	4b08      	ldr	r3, [pc, #32]	; (80097f0 <vPortSetupTimerInterrupt+0x6c>)
 80097ce:	2207      	movs	r2, #7
 80097d0:	601a      	str	r2, [r3, #0]
}
 80097d2:	bf00      	nop
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr
 80097dc:	20000000 	.word	0x20000000
 80097e0:	10624dd3 	.word	0x10624dd3
 80097e4:	20001144 	.word	0x20001144
 80097e8:	20001148 	.word	0x20001148
 80097ec:	2000114c 	.word	0x2000114c
 80097f0:	e000e010 	.word	0xe000e010
 80097f4:	e000e018 	.word	0xe000e018
 80097f8:	e000e014 	.word	0xe000e014

080097fc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80097fc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800980c <vPortEnableVFP+0x10>
 8009800:	6801      	ldr	r1, [r0, #0]
 8009802:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009806:	6001      	str	r1, [r0, #0]
 8009808:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800980a:	bf00      	nop
 800980c:	e000ed88 	.word	0xe000ed88

08009810 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009810:	b480      	push	{r7}
 8009812:	b085      	sub	sp, #20
 8009814:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009816:	f3ef 8305 	mrs	r3, IPSR
 800981a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2b0f      	cmp	r3, #15
 8009820:	d914      	bls.n	800984c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009822:	4a17      	ldr	r2, [pc, #92]	; (8009880 <vPortValidateInterruptPriority+0x70>)
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	4413      	add	r3, r2
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800982c:	4b15      	ldr	r3, [pc, #84]	; (8009884 <vPortValidateInterruptPriority+0x74>)
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	7afa      	ldrb	r2, [r7, #11]
 8009832:	429a      	cmp	r2, r3
 8009834:	d20a      	bcs.n	800984c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800983a:	f383 8811 	msr	BASEPRI, r3
 800983e:	f3bf 8f6f 	isb	sy
 8009842:	f3bf 8f4f 	dsb	sy
 8009846:	607b      	str	r3, [r7, #4]
}
 8009848:	bf00      	nop
 800984a:	e7fe      	b.n	800984a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800984c:	4b0e      	ldr	r3, [pc, #56]	; (8009888 <vPortValidateInterruptPriority+0x78>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009854:	4b0d      	ldr	r3, [pc, #52]	; (800988c <vPortValidateInterruptPriority+0x7c>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	429a      	cmp	r2, r3
 800985a:	d90a      	bls.n	8009872 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800985c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009860:	f383 8811 	msr	BASEPRI, r3
 8009864:	f3bf 8f6f 	isb	sy
 8009868:	f3bf 8f4f 	dsb	sy
 800986c:	603b      	str	r3, [r7, #0]
}
 800986e:	bf00      	nop
 8009870:	e7fe      	b.n	8009870 <vPortValidateInterruptPriority+0x60>
	}
 8009872:	bf00      	nop
 8009874:	3714      	adds	r7, #20
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr
 800987e:	bf00      	nop
 8009880:	e000e3f0 	.word	0xe000e3f0
 8009884:	20001150 	.word	0x20001150
 8009888:	e000ed0c 	.word	0xe000ed0c
 800988c:	20001154 	.word	0x20001154

08009890 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b08a      	sub	sp, #40	; 0x28
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009898:	2300      	movs	r3, #0
 800989a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800989c:	f7fe fafe 	bl	8007e9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80098a0:	4b5b      	ldr	r3, [pc, #364]	; (8009a10 <pvPortMalloc+0x180>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d101      	bne.n	80098ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80098a8:	f000 f920 	bl	8009aec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80098ac:	4b59      	ldr	r3, [pc, #356]	; (8009a14 <pvPortMalloc+0x184>)
 80098ae:	681a      	ldr	r2, [r3, #0]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	4013      	ands	r3, r2
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	f040 8093 	bne.w	80099e0 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d01d      	beq.n	80098fc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80098c0:	2208      	movs	r2, #8
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4413      	add	r3, r2
 80098c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f003 0307 	and.w	r3, r3, #7
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d014      	beq.n	80098fc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f023 0307 	bic.w	r3, r3, #7
 80098d8:	3308      	adds	r3, #8
 80098da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f003 0307 	and.w	r3, r3, #7
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d00a      	beq.n	80098fc <pvPortMalloc+0x6c>
	__asm volatile
 80098e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ea:	f383 8811 	msr	BASEPRI, r3
 80098ee:	f3bf 8f6f 	isb	sy
 80098f2:	f3bf 8f4f 	dsb	sy
 80098f6:	617b      	str	r3, [r7, #20]
}
 80098f8:	bf00      	nop
 80098fa:	e7fe      	b.n	80098fa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d06e      	beq.n	80099e0 <pvPortMalloc+0x150>
 8009902:	4b45      	ldr	r3, [pc, #276]	; (8009a18 <pvPortMalloc+0x188>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	429a      	cmp	r2, r3
 800990a:	d869      	bhi.n	80099e0 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800990c:	4b43      	ldr	r3, [pc, #268]	; (8009a1c <pvPortMalloc+0x18c>)
 800990e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009910:	4b42      	ldr	r3, [pc, #264]	; (8009a1c <pvPortMalloc+0x18c>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009916:	e004      	b.n	8009922 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800991c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	429a      	cmp	r2, r3
 800992a:	d903      	bls.n	8009934 <pvPortMalloc+0xa4>
 800992c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d1f1      	bne.n	8009918 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009934:	4b36      	ldr	r3, [pc, #216]	; (8009a10 <pvPortMalloc+0x180>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800993a:	429a      	cmp	r2, r3
 800993c:	d050      	beq.n	80099e0 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800993e:	6a3b      	ldr	r3, [r7, #32]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	2208      	movs	r2, #8
 8009944:	4413      	add	r3, r2
 8009946:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	6a3b      	ldr	r3, [r7, #32]
 800994e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009952:	685a      	ldr	r2, [r3, #4]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	1ad2      	subs	r2, r2, r3
 8009958:	2308      	movs	r3, #8
 800995a:	005b      	lsls	r3, r3, #1
 800995c:	429a      	cmp	r2, r3
 800995e:	d91f      	bls.n	80099a0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	4413      	add	r3, r2
 8009966:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009968:	69bb      	ldr	r3, [r7, #24]
 800996a:	f003 0307 	and.w	r3, r3, #7
 800996e:	2b00      	cmp	r3, #0
 8009970:	d00a      	beq.n	8009988 <pvPortMalloc+0xf8>
	__asm volatile
 8009972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009976:	f383 8811 	msr	BASEPRI, r3
 800997a:	f3bf 8f6f 	isb	sy
 800997e:	f3bf 8f4f 	dsb	sy
 8009982:	613b      	str	r3, [r7, #16]
}
 8009984:	bf00      	nop
 8009986:	e7fe      	b.n	8009986 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998a:	685a      	ldr	r2, [r3, #4]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	1ad2      	subs	r2, r2, r3
 8009990:	69bb      	ldr	r3, [r7, #24]
 8009992:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009996:	687a      	ldr	r2, [r7, #4]
 8009998:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800999a:	69b8      	ldr	r0, [r7, #24]
 800999c:	f000 f908 	bl	8009bb0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80099a0:	4b1d      	ldr	r3, [pc, #116]	; (8009a18 <pvPortMalloc+0x188>)
 80099a2:	681a      	ldr	r2, [r3, #0]
 80099a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	1ad3      	subs	r3, r2, r3
 80099aa:	4a1b      	ldr	r2, [pc, #108]	; (8009a18 <pvPortMalloc+0x188>)
 80099ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80099ae:	4b1a      	ldr	r3, [pc, #104]	; (8009a18 <pvPortMalloc+0x188>)
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	4b1b      	ldr	r3, [pc, #108]	; (8009a20 <pvPortMalloc+0x190>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d203      	bcs.n	80099c2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80099ba:	4b17      	ldr	r3, [pc, #92]	; (8009a18 <pvPortMalloc+0x188>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a18      	ldr	r2, [pc, #96]	; (8009a20 <pvPortMalloc+0x190>)
 80099c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80099c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c4:	685a      	ldr	r2, [r3, #4]
 80099c6:	4b13      	ldr	r3, [pc, #76]	; (8009a14 <pvPortMalloc+0x184>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	431a      	orrs	r2, r3
 80099cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80099d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d2:	2200      	movs	r2, #0
 80099d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80099d6:	4b13      	ldr	r3, [pc, #76]	; (8009a24 <pvPortMalloc+0x194>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	3301      	adds	r3, #1
 80099dc:	4a11      	ldr	r2, [pc, #68]	; (8009a24 <pvPortMalloc+0x194>)
 80099de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80099e0:	f7fe faa2 	bl	8007f28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80099e4:	69fb      	ldr	r3, [r7, #28]
 80099e6:	f003 0307 	and.w	r3, r3, #7
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d00a      	beq.n	8009a04 <pvPortMalloc+0x174>
	__asm volatile
 80099ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f2:	f383 8811 	msr	BASEPRI, r3
 80099f6:	f3bf 8f6f 	isb	sy
 80099fa:	f3bf 8f4f 	dsb	sy
 80099fe:	60fb      	str	r3, [r7, #12]
}
 8009a00:	bf00      	nop
 8009a02:	e7fe      	b.n	8009a02 <pvPortMalloc+0x172>
	return pvReturn;
 8009a04:	69fb      	ldr	r3, [r7, #28]
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3728      	adds	r7, #40	; 0x28
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop
 8009a10:	20003870 	.word	0x20003870
 8009a14:	20003884 	.word	0x20003884
 8009a18:	20003874 	.word	0x20003874
 8009a1c:	20003868 	.word	0x20003868
 8009a20:	20003878 	.word	0x20003878
 8009a24:	2000387c 	.word	0x2000387c

08009a28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b086      	sub	sp, #24
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d04d      	beq.n	8009ad6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009a3a:	2308      	movs	r3, #8
 8009a3c:	425b      	negs	r3, r3
 8009a3e:	697a      	ldr	r2, [r7, #20]
 8009a40:	4413      	add	r3, r2
 8009a42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	685a      	ldr	r2, [r3, #4]
 8009a4c:	4b24      	ldr	r3, [pc, #144]	; (8009ae0 <vPortFree+0xb8>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4013      	ands	r3, r2
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d10a      	bne.n	8009a6c <vPortFree+0x44>
	__asm volatile
 8009a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5a:	f383 8811 	msr	BASEPRI, r3
 8009a5e:	f3bf 8f6f 	isb	sy
 8009a62:	f3bf 8f4f 	dsb	sy
 8009a66:	60fb      	str	r3, [r7, #12]
}
 8009a68:	bf00      	nop
 8009a6a:	e7fe      	b.n	8009a6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d00a      	beq.n	8009a8a <vPortFree+0x62>
	__asm volatile
 8009a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a78:	f383 8811 	msr	BASEPRI, r3
 8009a7c:	f3bf 8f6f 	isb	sy
 8009a80:	f3bf 8f4f 	dsb	sy
 8009a84:	60bb      	str	r3, [r7, #8]
}
 8009a86:	bf00      	nop
 8009a88:	e7fe      	b.n	8009a88 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	685a      	ldr	r2, [r3, #4]
 8009a8e:	4b14      	ldr	r3, [pc, #80]	; (8009ae0 <vPortFree+0xb8>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4013      	ands	r3, r2
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d01e      	beq.n	8009ad6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d11a      	bne.n	8009ad6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	685a      	ldr	r2, [r3, #4]
 8009aa4:	4b0e      	ldr	r3, [pc, #56]	; (8009ae0 <vPortFree+0xb8>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	43db      	mvns	r3, r3
 8009aaa:	401a      	ands	r2, r3
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009ab0:	f7fe f9f4 	bl	8007e9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	685a      	ldr	r2, [r3, #4]
 8009ab8:	4b0a      	ldr	r3, [pc, #40]	; (8009ae4 <vPortFree+0xbc>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4413      	add	r3, r2
 8009abe:	4a09      	ldr	r2, [pc, #36]	; (8009ae4 <vPortFree+0xbc>)
 8009ac0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009ac2:	6938      	ldr	r0, [r7, #16]
 8009ac4:	f000 f874 	bl	8009bb0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009ac8:	4b07      	ldr	r3, [pc, #28]	; (8009ae8 <vPortFree+0xc0>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	3301      	adds	r3, #1
 8009ace:	4a06      	ldr	r2, [pc, #24]	; (8009ae8 <vPortFree+0xc0>)
 8009ad0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009ad2:	f7fe fa29 	bl	8007f28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009ad6:	bf00      	nop
 8009ad8:	3718      	adds	r7, #24
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	bf00      	nop
 8009ae0:	20003884 	.word	0x20003884
 8009ae4:	20003874 	.word	0x20003874
 8009ae8:	20003880 	.word	0x20003880

08009aec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009aec:	b480      	push	{r7}
 8009aee:	b085      	sub	sp, #20
 8009af0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009af2:	f242 7310 	movw	r3, #10000	; 0x2710
 8009af6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009af8:	4b27      	ldr	r3, [pc, #156]	; (8009b98 <prvHeapInit+0xac>)
 8009afa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f003 0307 	and.w	r3, r3, #7
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d00c      	beq.n	8009b20 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	3307      	adds	r3, #7
 8009b0a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f023 0307 	bic.w	r3, r3, #7
 8009b12:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009b14:	68ba      	ldr	r2, [r7, #8]
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	1ad3      	subs	r3, r2, r3
 8009b1a:	4a1f      	ldr	r2, [pc, #124]	; (8009b98 <prvHeapInit+0xac>)
 8009b1c:	4413      	add	r3, r2
 8009b1e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009b24:	4a1d      	ldr	r2, [pc, #116]	; (8009b9c <prvHeapInit+0xb0>)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009b2a:	4b1c      	ldr	r3, [pc, #112]	; (8009b9c <prvHeapInit+0xb0>)
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	68ba      	ldr	r2, [r7, #8]
 8009b34:	4413      	add	r3, r2
 8009b36:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009b38:	2208      	movs	r2, #8
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	1a9b      	subs	r3, r3, r2
 8009b3e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f023 0307 	bic.w	r3, r3, #7
 8009b46:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	4a15      	ldr	r2, [pc, #84]	; (8009ba0 <prvHeapInit+0xb4>)
 8009b4c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009b4e:	4b14      	ldr	r3, [pc, #80]	; (8009ba0 <prvHeapInit+0xb4>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	2200      	movs	r2, #0
 8009b54:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009b56:	4b12      	ldr	r3, [pc, #72]	; (8009ba0 <prvHeapInit+0xb4>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	68fa      	ldr	r2, [r7, #12]
 8009b66:	1ad2      	subs	r2, r2, r3
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009b6c:	4b0c      	ldr	r3, [pc, #48]	; (8009ba0 <prvHeapInit+0xb4>)
 8009b6e:	681a      	ldr	r2, [r3, #0]
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	4a0a      	ldr	r2, [pc, #40]	; (8009ba4 <prvHeapInit+0xb8>)
 8009b7a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	4a09      	ldr	r2, [pc, #36]	; (8009ba8 <prvHeapInit+0xbc>)
 8009b82:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009b84:	4b09      	ldr	r3, [pc, #36]	; (8009bac <prvHeapInit+0xc0>)
 8009b86:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009b8a:	601a      	str	r2, [r3, #0]
}
 8009b8c:	bf00      	nop
 8009b8e:	3714      	adds	r7, #20
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr
 8009b98:	20001158 	.word	0x20001158
 8009b9c:	20003868 	.word	0x20003868
 8009ba0:	20003870 	.word	0x20003870
 8009ba4:	20003878 	.word	0x20003878
 8009ba8:	20003874 	.word	0x20003874
 8009bac:	20003884 	.word	0x20003884

08009bb0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b085      	sub	sp, #20
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009bb8:	4b28      	ldr	r3, [pc, #160]	; (8009c5c <prvInsertBlockIntoFreeList+0xac>)
 8009bba:	60fb      	str	r3, [r7, #12]
 8009bbc:	e002      	b.n	8009bc4 <prvInsertBlockIntoFreeList+0x14>
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	60fb      	str	r3, [r7, #12]
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d8f7      	bhi.n	8009bbe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	68ba      	ldr	r2, [r7, #8]
 8009bd8:	4413      	add	r3, r2
 8009bda:	687a      	ldr	r2, [r7, #4]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d108      	bne.n	8009bf2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	685a      	ldr	r2, [r3, #4]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	441a      	add	r2, r3
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	68ba      	ldr	r2, [r7, #8]
 8009bfc:	441a      	add	r2, r3
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d118      	bne.n	8009c38 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681a      	ldr	r2, [r3, #0]
 8009c0a:	4b15      	ldr	r3, [pc, #84]	; (8009c60 <prvInsertBlockIntoFreeList+0xb0>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d00d      	beq.n	8009c2e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	685a      	ldr	r2, [r3, #4]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	441a      	add	r2, r3
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	601a      	str	r2, [r3, #0]
 8009c2c:	e008      	b.n	8009c40 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009c2e:	4b0c      	ldr	r3, [pc, #48]	; (8009c60 <prvInsertBlockIntoFreeList+0xb0>)
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	601a      	str	r2, [r3, #0]
 8009c36:	e003      	b.n	8009c40 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009c40:	68fa      	ldr	r2, [r7, #12]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d002      	beq.n	8009c4e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c4e:	bf00      	nop
 8009c50:	3714      	adds	r7, #20
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr
 8009c5a:	bf00      	nop
 8009c5c:	20003868 	.word	0x20003868
 8009c60:	20003870 	.word	0x20003870

08009c64 <fm_calendar_get>:
 * usa.
 * @param None
 * @retval None
 */
void fm_calendar_get()
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	af00      	add	r7, sp, #0
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8009c68:	2200      	movs	r2, #0
 8009c6a:	4905      	ldr	r1, [pc, #20]	; (8009c80 <fm_calendar_get+0x1c>)
 8009c6c:	4805      	ldr	r0, [pc, #20]	; (8009c84 <fm_calendar_get+0x20>)
 8009c6e:	f7fa fbdb 	bl	8004428 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8009c72:	2200      	movs	r2, #0
 8009c74:	4904      	ldr	r1, [pc, #16]	; (8009c88 <fm_calendar_get+0x24>)
 8009c76:	4803      	ldr	r0, [pc, #12]	; (8009c84 <fm_calendar_get+0x20>)
 8009c78:	f7fa fcb9 	bl	80045ee <HAL_RTC_GetDate>
}
 8009c7c:	bf00      	nop
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	20003888 	.word	0x20003888
 8009c84:	200001a4 	.word	0x200001a4
 8009c88:	2000389c 	.word	0x2000389c

08009c8c <fm_calendar_format_time>:
 * @brief Formatea la hora en el formato hh.mm.ss.
 * @param None
 * @retval Entero que contiene la hora, minutos y segundos concatenados.
 */
int fm_calendar_format_time()
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b088      	sub	sp, #32
 8009c90:	af02      	add	r7, sp, #8
    int time = 0;
 8009c92:	2300      	movs	r3, #0
 8009c94:	617b      	str	r3, [r7, #20]
    char time_arr[PCF8553_DATA_SIZE];

    fm_calendar_get();
 8009c96:	f7ff ffe5 	bl	8009c64 <fm_calendar_get>

    sprintf(time_arr, "%02d%02d%02d", sTime.Hours, sTime.Minutes,
 8009c9a:	4b0c      	ldr	r3, [pc, #48]	; (8009ccc <fm_calendar_format_time+0x40>)
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	4b0a      	ldr	r3, [pc, #40]	; (8009ccc <fm_calendar_format_time+0x40>)
 8009ca2:	785b      	ldrb	r3, [r3, #1]
 8009ca4:	4619      	mov	r1, r3
    sTime.Seconds);
 8009ca6:	4b09      	ldr	r3, [pc, #36]	; (8009ccc <fm_calendar_format_time+0x40>)
 8009ca8:	789b      	ldrb	r3, [r3, #2]
    sprintf(time_arr, "%02d%02d%02d", sTime.Hours, sTime.Minutes,
 8009caa:	4638      	mov	r0, r7
 8009cac:	9300      	str	r3, [sp, #0]
 8009cae:	460b      	mov	r3, r1
 8009cb0:	4907      	ldr	r1, [pc, #28]	; (8009cd0 <fm_calendar_format_time+0x44>)
 8009cb2:	f003 f865 	bl	800cd80 <siprintf>
    /*
     * Esta instrucción está de mas ya que después se vuelve a formatear el
     * entero en un arreglo, pero por ahora se va a quedar así hasta que se
     * elimine el formatter de la libreria fm_lcd.h
     */
    time = atoi(time_arr);
 8009cb6:	463b      	mov	r3, r7
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f002 fed9 	bl	800ca70 <atoi>
 8009cbe:	6178      	str	r0, [r7, #20]

    return (time);
 8009cc0:	697b      	ldr	r3, [r7, #20]
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3718      	adds	r7, #24
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	20003888 	.word	0x20003888
 8009cd0:	0800d66c 	.word	0x0800d66c

08009cd4 <fm_calendar_format_date>:
 * @brief Formatea la fecha en el formato dd.mm.aaaa.
 * @param None
 * @retval Entero que contiene el día, el mes y el año concatenados.
 */
int fm_calendar_format_date()
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b088      	sub	sp, #32
 8009cd8:	af02      	add	r7, sp, #8
    int date = 0;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	617b      	str	r3, [r7, #20]
    char date_arr[PCF8553_DATA_SIZE];

    fm_calendar_get();
 8009cde:	f7ff ffc1 	bl	8009c64 <fm_calendar_get>

    sprintf(date_arr, "%02d%02d20%02d", sDate.Date, sDate.Month, sDate.Year);
 8009ce2:	4b0c      	ldr	r3, [pc, #48]	; (8009d14 <fm_calendar_format_date+0x40>)
 8009ce4:	789b      	ldrb	r3, [r3, #2]
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	4b0a      	ldr	r3, [pc, #40]	; (8009d14 <fm_calendar_format_date+0x40>)
 8009cea:	785b      	ldrb	r3, [r3, #1]
 8009cec:	4619      	mov	r1, r3
 8009cee:	4b09      	ldr	r3, [pc, #36]	; (8009d14 <fm_calendar_format_date+0x40>)
 8009cf0:	78db      	ldrb	r3, [r3, #3]
 8009cf2:	4638      	mov	r0, r7
 8009cf4:	9300      	str	r3, [sp, #0]
 8009cf6:	460b      	mov	r3, r1
 8009cf8:	4907      	ldr	r1, [pc, #28]	; (8009d18 <fm_calendar_format_date+0x44>)
 8009cfa:	f003 f841 	bl	800cd80 <siprintf>
    /*
     * Esta instrucción está de mas ya que después se vuelve a formatear el
     * entero en un arreglo, pero por ahora se va a quedar así hasta que se
     * elimine el formatter de la libreria fm_lcd.h
     */
    date = atoi(date_arr);
 8009cfe:	463b      	mov	r3, r7
 8009d00:	4618      	mov	r0, r3
 8009d02:	f002 feb5 	bl	800ca70 <atoi>
 8009d06:	6178      	str	r0, [r7, #20]

    return (date);
 8009d08:	697b      	ldr	r3, [r7, #20]
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3718      	adds	r7, #24
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	2000389c 	.word	0x2000389c
 8009d18:	0800d67c 	.word	0x0800d67c

08009d1c <fm_debug_msg_uart>:
 * @param Mensaje a transmitir y su longitud.
 * @retval None
 *
 */
void fm_debug_msg_uart(const uint8_t *p_msg, uint8_t len)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b084      	sub	sp, #16
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	460b      	mov	r3, r1
 8009d26:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef ret = HAL_BUSY;
 8009d28:	2302      	movs	r3, #2
 8009d2a:	73fb      	strb	r3, [r7, #15]
     * ejecutada en otro hilo. La siguiente implementación no es buena porque
     * bloquea puede bloquear al sistema, una mejor solucion seria bloquear
     * por un corto tiempo, aun mejor seria implementar algo con RTOS.
     *
     */
    while (ret == HAL_BUSY)
 8009d2c:	e008      	b.n	8009d40 <fm_debug_msg_uart+0x24>
    {
        ret = HAL_UART_Transmit(&huart2, p_msg, len, DELAY_DEFAULT);
 8009d2e:	78fb      	ldrb	r3, [r7, #3]
 8009d30:	b29a      	uxth	r2, r3
 8009d32:	230a      	movs	r3, #10
 8009d34:	6879      	ldr	r1, [r7, #4]
 8009d36:	4806      	ldr	r0, [pc, #24]	; (8009d50 <fm_debug_msg_uart+0x34>)
 8009d38:	f7fb fce6 	bl	8005708 <HAL_UART_Transmit>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	73fb      	strb	r3, [r7, #15]
    while (ret == HAL_BUSY)
 8009d40:	7bfb      	ldrb	r3, [r7, #15]
 8009d42:	2b02      	cmp	r3, #2
 8009d44:	d0f3      	beq.n	8009d2e <fm_debug_msg_uart+0x12>
    }

}
 8009d46:	bf00      	nop
 8009d48:	bf00      	nop
 8009d4a:	3710      	adds	r7, #16
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}
 8009d50:	20000278 	.word	0x20000278

08009d54 <fm_event_init>:
// Private function bodies.

// Public function bodies.

void fm_event_init()
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	af00      	add	r7, sp, #0
    h_event_queue = osMessageQueueNew(EVENT_QUEUE_LENGTH, sizeof(fm_event_t),
 8009d58:	4a04      	ldr	r2, [pc, #16]	; (8009d6c <fm_event_init+0x18>)
 8009d5a:	2101      	movs	r1, #1
 8009d5c:	2004      	movs	r0, #4
 8009d5e:	f7fc fbf7 	bl	8006550 <osMessageQueueNew>
 8009d62:	4603      	mov	r3, r0
 8009d64:	4a02      	ldr	r2, [pc, #8]	; (8009d70 <fm_event_init+0x1c>)
 8009d66:	6013      	str	r3, [r2, #0]
    &event_queue_attributes);
}
 8009d68:	bf00      	nop
 8009d6a:	bd80      	pop	{r7, pc}
 8009d6c:	0800d840 	.word	0x0800d840
 8009d70:	200038a0 	.word	0x200038a0

08009d74 <fm_factory_get_acm>:
 * @brief Función que devuelve el parámetro ACM almacenado en fm_factory.
 * @param None
 * @retval Parámetro ACM como estructura de tipo fmc_totalizer_t.
 */
fmc_totalizer_t fm_factory_get_acm()
{
 8009d74:	b4b0      	push	{r4, r5, r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
    return (acm_config);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	4a07      	ldr	r2, [pc, #28]	; (8009d9c <fm_factory_get_acm+0x28>)
 8009d80:	461c      	mov	r4, r3
 8009d82:	4615      	mov	r5, r2
 8009d84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009d86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009d88:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009d8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	370c      	adds	r7, #12
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bcb0      	pop	{r4, r5, r7}
 8009d98:	4770      	bx	lr
 8009d9a:	bf00      	nop
 8009d9c:	20000030 	.word	0x20000030

08009da0 <fm_factory_get_ttl>:
 * @brief Función que devuelve el parámetro TTL almacenado en fm_factory.
 * @param None
 * @retval Parámetro TTL como estructura de tipo fmc_totalizer_t.
 */
fmc_totalizer_t fm_factory_get_ttl()
{
 8009da0:	b4b0      	push	{r4, r5, r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
    return (ttl_config);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	4a07      	ldr	r2, [pc, #28]	; (8009dc8 <fm_factory_get_ttl+0x28>)
 8009dac:	461c      	mov	r4, r3
 8009dae:	4615      	mov	r5, r2
 8009db0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009db2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009db4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009db8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	370c      	adds	r7, #12
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bcb0      	pop	{r4, r5, r7}
 8009dc4:	4770      	bx	lr
 8009dc6:	bf00      	nop
 8009dc8:	20000010 	.word	0x20000010

08009dcc <fm_factory_get_rate>:
 * @brief Función que devuelve el parámetro RATE almacenado en fm_factory.
 * @param None
 * @retval Parámetro RATE como estructura de tipo fmc_totalizer_t.
 */
fmc_totalizer_t fm_factory_get_rate()
{
 8009dcc:	b4b0      	push	{r4, r5, r7}
 8009dce:	b083      	sub	sp, #12
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
    return (rate_config);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	4a07      	ldr	r2, [pc, #28]	; (8009df4 <fm_factory_get_rate+0x28>)
 8009dd8:	461c      	mov	r4, r3
 8009dda:	4615      	mov	r5, r2
 8009ddc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009dde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009de0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009de4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	370c      	adds	r7, #12
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bcb0      	pop	{r4, r5, r7}
 8009df0:	4770      	bx	lr
 8009df2:	bf00      	nop
 8009df4:	20000050 	.word	0x20000050

08009df8 <fm_factory_get_temp>:
 * fm_factory.
 * @param None
 * @retval Temperatura interna del micro como estructura de tipo fmc_temp_t.
 */
fmc_temp_t fm_factory_get_temp()
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
    return (temperature_config);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	4a05      	ldr	r2, [pc, #20]	; (8009e18 <fm_factory_get_temp+0x20>)
 8009e04:	ca07      	ldmia	r2, {r0, r1, r2}
 8009e06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	370c      	adds	r7, #12
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr
 8009e16:	bf00      	nop
 8009e18:	20000070 	.word	0x20000070

08009e1c <fm_factory_get_units_digits>:
 * fm_factory.
 * @param None
 * @retval Configuración de resoluciones como estructura de tipo fmc_fp_t.
 */
fmc_fp_t fm_factory_get_units_digits()
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
    return (units_digits);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	4a05      	ldr	r2, [pc, #20]	; (8009e3c <fm_factory_get_units_digits+0x20>)
 8009e28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e2c:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	370c      	adds	r7, #12
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr
 8009e3c:	2000007c 	.word	0x2000007c

08009e40 <fm_factory_get_k_factor>:
 * @brief Función que devuelve el factor K almacenado en fm_factory.
 * @param None
 * @retval Factor K.
 */
fmc_fp_t fm_factory_get_k_factor()
{
 8009e40:	b480      	push	{r7}
 8009e42:	b083      	sub	sp, #12
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
    return (k_factor_config);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	4a05      	ldr	r2, [pc, #20]	; (8009e60 <fm_factory_get_k_factor+0x20>)
 8009e4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e50:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	370c      	adds	r7, #12
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr
 8009e60:	20000084 	.word	0x20000084

08009e64 <fm_factory_modify_k_factor_subs>:
 * @brief Función que resta uno al dígito pasado como parámetro del factor K.
 * @param Digito a modificar del factor K de la enumeración sel_digit_t.
 * @retval None
 */
void fm_factory_modify_k_factor_subs(sel_digit_t digit_k)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b084      	sub	sp, #16
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	71fb      	strb	r3, [r7, #7]
    uint32_t k_new_num = 0;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	60fb      	str	r3, [r7, #12]
    fm_factory_separate_k_factor();
 8009e72:	f000 f8c9 	bl	800a008 <fm_factory_separate_k_factor>
    if (k_array[LINE_1_DIGITS - 1 - digit_k] > VAL_0)
 8009e76:	79fb      	ldrb	r3, [r7, #7]
 8009e78:	f1c3 0307 	rsb	r3, r3, #7
 8009e7c:	4a17      	ldr	r2, [pc, #92]	; (8009edc <fm_factory_modify_k_factor_subs+0x78>)
 8009e7e:	5cd3      	ldrb	r3, [r2, r3]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d009      	beq.n	8009e98 <fm_factory_modify_k_factor_subs+0x34>
    {
        k_array[LINE_1_DIGITS - 1 - digit_k]--;
 8009e84:	79fb      	ldrb	r3, [r7, #7]
 8009e86:	f1c3 0307 	rsb	r3, r3, #7
 8009e8a:	4a14      	ldr	r2, [pc, #80]	; (8009edc <fm_factory_modify_k_factor_subs+0x78>)
 8009e8c:	5cd2      	ldrb	r2, [r2, r3]
 8009e8e:	3a01      	subs	r2, #1
 8009e90:	b2d1      	uxtb	r1, r2
 8009e92:	4a12      	ldr	r2, [pc, #72]	; (8009edc <fm_factory_modify_k_factor_subs+0x78>)
 8009e94:	54d1      	strb	r1, [r2, r3]
 8009e96:	e005      	b.n	8009ea4 <fm_factory_modify_k_factor_subs+0x40>
    }
    else
    {
        k_array[LINE_1_DIGITS - 1 - digit_k] = VAL_9;
 8009e98:	79fb      	ldrb	r3, [r7, #7]
 8009e9a:	f1c3 0307 	rsb	r3, r3, #7
 8009e9e:	4a0f      	ldr	r2, [pc, #60]	; (8009edc <fm_factory_modify_k_factor_subs+0x78>)
 8009ea0:	2109      	movs	r1, #9
 8009ea2:	54d1      	strb	r1, [r2, r3]
    }

    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	60bb      	str	r3, [r7, #8]
 8009ea8:	e00e      	b.n	8009ec8 <fm_factory_modify_k_factor_subs+0x64>
    {
        k_new_num = (k_new_num * 10) + k_array[i];
 8009eaa:	68fa      	ldr	r2, [r7, #12]
 8009eac:	4613      	mov	r3, r2
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	4413      	add	r3, r2
 8009eb2:	005b      	lsls	r3, r3, #1
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	4a09      	ldr	r2, [pc, #36]	; (8009edc <fm_factory_modify_k_factor_subs+0x78>)
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	4413      	add	r3, r2
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	440b      	add	r3, r1
 8009ec0:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	60bb      	str	r3, [r7, #8]
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	2b07      	cmp	r3, #7
 8009ecc:	dded      	ble.n	8009eaa <fm_factory_modify_k_factor_subs+0x46>
    }

    k_factor_config.num = k_new_num;
 8009ece:	4a04      	ldr	r2, [pc, #16]	; (8009ee0 <fm_factory_modify_k_factor_subs+0x7c>)
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	6013      	str	r3, [r2, #0]
}
 8009ed4:	bf00      	nop
 8009ed6:	3710      	adds	r7, #16
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	200038a4 	.word	0x200038a4
 8009ee0:	20000084 	.word	0x20000084

08009ee4 <fm_factory_modify_k_factor_add>:
 * @brief Función que suma uno al dígito pasado como parámetro del factor K.
 * @param Digito a modificar del factor K de la enumeración sel_digit_t.
 * @retval None
 */
void fm_factory_modify_k_factor_add(sel_digit_t digit_k)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	4603      	mov	r3, r0
 8009eec:	71fb      	strb	r3, [r7, #7]
    uint32_t k_new_num = 0;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	60fb      	str	r3, [r7, #12]
    fm_factory_separate_k_factor();
 8009ef2:	f000 f889 	bl	800a008 <fm_factory_separate_k_factor>
    if (k_array[LINE_1_DIGITS - 1 - digit_k] < VAL_9)
 8009ef6:	79fb      	ldrb	r3, [r7, #7]
 8009ef8:	f1c3 0307 	rsb	r3, r3, #7
 8009efc:	4a17      	ldr	r2, [pc, #92]	; (8009f5c <fm_factory_modify_k_factor_add+0x78>)
 8009efe:	5cd3      	ldrb	r3, [r2, r3]
 8009f00:	2b08      	cmp	r3, #8
 8009f02:	d809      	bhi.n	8009f18 <fm_factory_modify_k_factor_add+0x34>
    {
        k_array[LINE_1_DIGITS - 1 - digit_k]++;
 8009f04:	79fb      	ldrb	r3, [r7, #7]
 8009f06:	f1c3 0307 	rsb	r3, r3, #7
 8009f0a:	4a14      	ldr	r2, [pc, #80]	; (8009f5c <fm_factory_modify_k_factor_add+0x78>)
 8009f0c:	5cd2      	ldrb	r2, [r2, r3]
 8009f0e:	3201      	adds	r2, #1
 8009f10:	b2d1      	uxtb	r1, r2
 8009f12:	4a12      	ldr	r2, [pc, #72]	; (8009f5c <fm_factory_modify_k_factor_add+0x78>)
 8009f14:	54d1      	strb	r1, [r2, r3]
 8009f16:	e005      	b.n	8009f24 <fm_factory_modify_k_factor_add+0x40>
    }
    else
    {
        k_array[LINE_1_DIGITS - 1 - digit_k] = VAL_0;
 8009f18:	79fb      	ldrb	r3, [r7, #7]
 8009f1a:	f1c3 0307 	rsb	r3, r3, #7
 8009f1e:	4a0f      	ldr	r2, [pc, #60]	; (8009f5c <fm_factory_modify_k_factor_add+0x78>)
 8009f20:	2100      	movs	r1, #0
 8009f22:	54d1      	strb	r1, [r2, r3]
    }

    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 8009f24:	2300      	movs	r3, #0
 8009f26:	60bb      	str	r3, [r7, #8]
 8009f28:	e00e      	b.n	8009f48 <fm_factory_modify_k_factor_add+0x64>
    {
        k_new_num = (k_new_num * 10) + k_array[i];
 8009f2a:	68fa      	ldr	r2, [r7, #12]
 8009f2c:	4613      	mov	r3, r2
 8009f2e:	009b      	lsls	r3, r3, #2
 8009f30:	4413      	add	r3, r2
 8009f32:	005b      	lsls	r3, r3, #1
 8009f34:	4619      	mov	r1, r3
 8009f36:	4a09      	ldr	r2, [pc, #36]	; (8009f5c <fm_factory_modify_k_factor_add+0x78>)
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	4413      	add	r3, r2
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	440b      	add	r3, r1
 8009f40:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	3301      	adds	r3, #1
 8009f46:	60bb      	str	r3, [r7, #8]
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	2b07      	cmp	r3, #7
 8009f4c:	dded      	ble.n	8009f2a <fm_factory_modify_k_factor_add+0x46>
    }

    k_factor_config.num = k_new_num;
 8009f4e:	4a04      	ldr	r2, [pc, #16]	; (8009f60 <fm_factory_modify_k_factor_add+0x7c>)
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	6013      	str	r3, [r2, #0]
}
 8009f54:	bf00      	nop
 8009f56:	3710      	adds	r7, #16
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}
 8009f5c:	200038a4 	.word	0x200038a4
 8009f60:	20000084 	.word	0x20000084

08009f64 <fm_factory_modify_res_acm_ttl>:
 * @param Resoluciones de fabrica, y de los parámetros ACM y TTL.
 * @retval None
 */
void fm_factory_modify_res_acm_ttl(sel_resolution_t units_res,
sel_resolution_t acm_res, sel_resolution_t ttl_res)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b083      	sub	sp, #12
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	71fb      	strb	r3, [r7, #7]
 8009f6e:	460b      	mov	r3, r1
 8009f70:	71bb      	strb	r3, [r7, #6]
 8009f72:	4613      	mov	r3, r2
 8009f74:	717b      	strb	r3, [r7, #5]
    units_digits.res = units_res;
 8009f76:	4a07      	ldr	r2, [pc, #28]	; (8009f94 <fm_factory_modify_res_acm_ttl+0x30>)
 8009f78:	79fb      	ldrb	r3, [r7, #7]
 8009f7a:	7113      	strb	r3, [r2, #4]
    acm_config.volume.res = acm_res;
 8009f7c:	4a06      	ldr	r2, [pc, #24]	; (8009f98 <fm_factory_modify_res_acm_ttl+0x34>)
 8009f7e:	79bb      	ldrb	r3, [r7, #6]
 8009f80:	7313      	strb	r3, [r2, #12]
    ttl_config.volume.res = ttl_res;
 8009f82:	4a06      	ldr	r2, [pc, #24]	; (8009f9c <fm_factory_modify_res_acm_ttl+0x38>)
 8009f84:	797b      	ldrb	r3, [r7, #5]
 8009f86:	7313      	strb	r3, [r2, #12]
}
 8009f88:	bf00      	nop
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr
 8009f94:	2000007c 	.word	0x2000007c
 8009f98:	20000030 	.word	0x20000030
 8009f9c:	20000010 	.word	0x20000010

08009fa0 <fm_factory_modify_time_units>:
 * usuario.
 * @param A que unidad se quiere cambiar.
 * @retval None
 */
void fm_factory_modify_time_units(fmc_unit_time_t time_units)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b083      	sub	sp, #12
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	71fb      	strb	r3, [r7, #7]
    acm_config.unit_time = time_units;
 8009faa:	4a07      	ldr	r2, [pc, #28]	; (8009fc8 <fm_factory_modify_time_units+0x28>)
 8009fac:	79fb      	ldrb	r3, [r7, #7]
 8009fae:	7653      	strb	r3, [r2, #25]
    ttl_config.unit_time = time_units;
 8009fb0:	4a06      	ldr	r2, [pc, #24]	; (8009fcc <fm_factory_modify_time_units+0x2c>)
 8009fb2:	79fb      	ldrb	r3, [r7, #7]
 8009fb4:	7653      	strb	r3, [r2, #25]
    rate_config.unit_time = time_units;
 8009fb6:	4a06      	ldr	r2, [pc, #24]	; (8009fd0 <fm_factory_modify_time_units+0x30>)
 8009fb8:	79fb      	ldrb	r3, [r7, #7]
 8009fba:	7653      	strb	r3, [r2, #25]
}
 8009fbc:	bf00      	nop
 8009fbe:	370c      	adds	r7, #12
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr
 8009fc8:	20000030 	.word	0x20000030
 8009fcc:	20000010 	.word	0x20000010
 8009fd0:	20000050 	.word	0x20000050

08009fd4 <fm_factory_modify_volume_units>:
 * usuario.
 * @param A que unidad se quiere cambiar.
 * @retval None
 */
void fm_factory_modify_volume_units(fmc_unit_volume_t volume_units)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	4603      	mov	r3, r0
 8009fdc:	71fb      	strb	r3, [r7, #7]
    acm_config.unit_volume = volume_units;
 8009fde:	4a07      	ldr	r2, [pc, #28]	; (8009ffc <fm_factory_modify_volume_units+0x28>)
 8009fe0:	79fb      	ldrb	r3, [r7, #7]
 8009fe2:	7613      	strb	r3, [r2, #24]
    ttl_config.unit_volume = volume_units;
 8009fe4:	4a06      	ldr	r2, [pc, #24]	; (800a000 <fm_factory_modify_volume_units+0x2c>)
 8009fe6:	79fb      	ldrb	r3, [r7, #7]
 8009fe8:	7613      	strb	r3, [r2, #24]
    rate_config.unit_volume = volume_units;
 8009fea:	4a06      	ldr	r2, [pc, #24]	; (800a004 <fm_factory_modify_volume_units+0x30>)
 8009fec:	79fb      	ldrb	r3, [r7, #7]
 8009fee:	7613      	strb	r3, [r2, #24]
}
 8009ff0:	bf00      	nop
 8009ff2:	370c      	adds	r7, #12
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr
 8009ffc:	20000030 	.word	0x20000030
 800a000:	20000010 	.word	0x20000010
 800a004:	20000050 	.word	0x20000050

0800a008 <fm_factory_separate_k_factor>:
 * global.
 * @param None
 * @retval None
 */
void fm_factory_separate_k_factor()
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
    uint32_t k_num;
    int i = 7;
 800a00e:	2307      	movs	r3, #7
 800a010:	60bb      	str	r3, [r7, #8]
    k_num = fm_factory_get_k_factor().num;
 800a012:	463b      	mov	r3, r7
 800a014:	4618      	mov	r0, r3
 800a016:	f7ff ff13 	bl	8009e40 <fm_factory_get_k_factor>
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	60fb      	str	r3, [r7, #12]

    while (i >= 0)
 800a01e:	e021      	b.n	800a064 <fm_factory_separate_k_factor+0x5c>
    {
        if (k_num > 0)
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d016      	beq.n	800a054 <fm_factory_separate_k_factor+0x4c>
        {
            k_array[i] = k_num % 10;
 800a026:	68f9      	ldr	r1, [r7, #12]
 800a028:	4b12      	ldr	r3, [pc, #72]	; (800a074 <fm_factory_separate_k_factor+0x6c>)
 800a02a:	fba3 2301 	umull	r2, r3, r3, r1
 800a02e:	08da      	lsrs	r2, r3, #3
 800a030:	4613      	mov	r3, r2
 800a032:	009b      	lsls	r3, r3, #2
 800a034:	4413      	add	r3, r2
 800a036:	005b      	lsls	r3, r3, #1
 800a038:	1aca      	subs	r2, r1, r3
 800a03a:	b2d1      	uxtb	r1, r2
 800a03c:	4a0e      	ldr	r2, [pc, #56]	; (800a078 <fm_factory_separate_k_factor+0x70>)
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	4413      	add	r3, r2
 800a042:	460a      	mov	r2, r1
 800a044:	701a      	strb	r2, [r3, #0]
            k_num /= 10;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	4a0a      	ldr	r2, [pc, #40]	; (800a074 <fm_factory_separate_k_factor+0x6c>)
 800a04a:	fba2 2303 	umull	r2, r3, r2, r3
 800a04e:	08db      	lsrs	r3, r3, #3
 800a050:	60fb      	str	r3, [r7, #12]
 800a052:	e004      	b.n	800a05e <fm_factory_separate_k_factor+0x56>
        }
        else
        {
            k_array[i] = 0;
 800a054:	4a08      	ldr	r2, [pc, #32]	; (800a078 <fm_factory_separate_k_factor+0x70>)
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	4413      	add	r3, r2
 800a05a:	2200      	movs	r2, #0
 800a05c:	701a      	strb	r2, [r3, #0]
        }
        i--;
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	3b01      	subs	r3, #1
 800a062:	60bb      	str	r3, [r7, #8]
    while (i >= 0)
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	2b00      	cmp	r3, #0
 800a068:	dada      	bge.n	800a020 <fm_factory_separate_k_factor+0x18>
    }
}
 800a06a:	bf00      	nop
 800a06c:	bf00      	nop
 800a06e:	3710      	adds	r7, #16
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}
 800a074:	cccccccd 	.word	0xcccccccd
 800a078:	200038a4 	.word	0x200038a4

0800a07c <HAL_GPIO_EXTI_Callback>:
// Private function bodies.

// Interrupts

void HAL_GPIO_EXTI_Callback(uint16_t gpio_pin) // @suppress("Name convention for function")
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b084      	sub	sp, #16
 800a080:	af00      	add	r7, sp, #0
 800a082:	4603      	mov	r3, r0
 800a084:	80fb      	strh	r3, [r7, #6]
    /*
     * Deshabilito interrupciones para evitar rebotes de los botones, hasta que
     * la tarea task_debounce termine su ejecución y se bloquee.
     */
    HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800a086:	2028      	movs	r0, #40	; 0x28
 800a088:	f7f8 fc86 	bl	8002998 <HAL_NVIC_DisableIRQ>
    #endif

    /*
     * Compruebo que botón fue el presionado.
     */
    switch (gpio_pin)
 800a08c:	88fb      	ldrh	r3, [r7, #6]
 800a08e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a092:	d018      	beq.n	800a0c6 <HAL_GPIO_EXTI_Callback+0x4a>
 800a094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a098:	dc18      	bgt.n	800a0cc <HAL_GPIO_EXTI_Callback+0x50>
 800a09a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a09e:	d00f      	beq.n	800a0c0 <HAL_GPIO_EXTI_Callback+0x44>
 800a0a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0a4:	dc12      	bgt.n	800a0cc <HAL_GPIO_EXTI_Callback+0x50>
 800a0a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0aa:	d003      	beq.n	800a0b4 <HAL_GPIO_EXTI_Callback+0x38>
 800a0ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0b0:	d003      	beq.n	800a0ba <HAL_GPIO_EXTI_Callback+0x3e>
        break;
        case KEY_ESC:
            event_now = EVENT_KEY_ESC;
        break;
        default:
        break;
 800a0b2:	e00b      	b.n	800a0cc <HAL_GPIO_EXTI_Callback+0x50>
            event_now = EVENT_KEY_UP;
 800a0b4:	2302      	movs	r3, #2
 800a0b6:	73fb      	strb	r3, [r7, #15]
        break;
 800a0b8:	e009      	b.n	800a0ce <HAL_GPIO_EXTI_Callback+0x52>
            event_now = EVENT_KEY_DOWN;
 800a0ba:	2303      	movs	r3, #3
 800a0bc:	73fb      	strb	r3, [r7, #15]
        break;
 800a0be:	e006      	b.n	800a0ce <HAL_GPIO_EXTI_Callback+0x52>
            event_now = EVENT_KEY_ENTER;
 800a0c0:	2304      	movs	r3, #4
 800a0c2:	73fb      	strb	r3, [r7, #15]
        break;
 800a0c4:	e003      	b.n	800a0ce <HAL_GPIO_EXTI_Callback+0x52>
            event_now = EVENT_KEY_ESC;
 800a0c6:	2305      	movs	r3, #5
 800a0c8:	73fb      	strb	r3, [r7, #15]
        break;
 800a0ca:	e000      	b.n	800a0ce <HAL_GPIO_EXTI_Callback+0x52>
        break;
 800a0cc:	bf00      	nop
    /*
     * Pongo el nombre del botón presionado en la cola de eventos y libero el
     * semáforo de la tarea task_debounce, para que esta se bloquee durante el
     * tiempo necesario para que no haya rebotes de los botones.
     */
    osMessageQueuePut(h_event_queue, &event_now, 0, 0);
 800a0ce:	4b08      	ldr	r3, [pc, #32]	; (800a0f0 <HAL_GPIO_EXTI_Callback+0x74>)
 800a0d0:	6818      	ldr	r0, [r3, #0]
 800a0d2:	f107 010f 	add.w	r1, r7, #15
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	2200      	movs	r2, #0
 800a0da:	f7fc faad 	bl	8006638 <osMessageQueuePut>
    osSemaphoreRelease(debounce_semaphoreHandle);
 800a0de:	4b05      	ldr	r3, [pc, #20]	; (800a0f4 <HAL_GPIO_EXTI_Callback+0x78>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f7fc f9f0 	bl	80064c8 <osSemaphoreRelease>
}
 800a0e8:	bf00      	nop
 800a0ea:	3710      	adds	r7, #16
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}
 800a0f0:	200038a0 	.word	0x200038a0
 800a0f4:	20000304 	.word	0x20000304

0800a0f8 <fm_lcd_acm_rate>:
 * personalizada según las opciones que se elijan.
 * @param None
 * @retval None
 */
void fm_lcd_acm_rate()
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b0b8      	sub	sp, #224	; 0xe0
 800a0fc:	af02      	add	r7, sp, #8
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fmc_get_acm().volume, ' ', LINE_0_DIGITS, lcd_msg,
 800a0fe:	f107 0318 	add.w	r3, r7, #24
 800a102:	4618      	mov	r0, r3
 800a104:	f002 fb70 	bl	800c7e8 <fmc_get_acm>
 800a108:	2314      	movs	r3, #20
 800a10a:	9301      	str	r3, [sp, #4]
 800a10c:	1d3b      	adds	r3, r7, #4
 800a10e:	9300      	str	r3, [sp, #0]
 800a110:	2309      	movs	r3, #9
 800a112:	2220      	movs	r2, #32
 800a114:	f107 0120 	add.w	r1, r7, #32
 800a118:	c903      	ldmia	r1, {r0, r1}
 800a11a:	f000 f951 	bl	800a3c0 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_acm().volume, lcd_msg, sizeof(lcd_msg));
 800a11e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a122:	4618      	mov	r0, r3
 800a124:	f002 fb60 	bl	800c7e8 <fmc_get_acm>
 800a128:	1d3a      	adds	r2, r7, #4
 800a12a:	2314      	movs	r3, #20
 800a12c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800a130:	c903      	ldmia	r1, {r0, r1}
 800a132:	f000 f901 	bl	800a338 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800a136:	1d3b      	adds	r3, r7, #4
 800a138:	2100      	movs	r1, #0
 800a13a:	4618      	mov	r0, r3
 800a13c:	f000 fa25 	bl	800a58a <fm_lcd_puts>

    fm_lcd_fp_to_str(fmc_get_rate().volume, ' ', LINE_1_DIGITS, lcd_msg,
 800a140:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a144:	4618      	mov	r0, r3
 800a146:	f002 fbb5 	bl	800c8b4 <fmc_get_rate>
 800a14a:	2314      	movs	r3, #20
 800a14c:	9301      	str	r3, [sp, #4]
 800a14e:	1d3b      	adds	r3, r7, #4
 800a150:	9300      	str	r3, [sp, #0]
 800a152:	2308      	movs	r3, #8
 800a154:	2220      	movs	r2, #32
 800a156:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800a15a:	c903      	ldmia	r1, {r0, r1}
 800a15c:	f000 f930 	bl	800a3c0 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_rate().volume, lcd_msg, sizeof(lcd_msg));
 800a160:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800a164:	4618      	mov	r0, r3
 800a166:	f002 fba5 	bl	800c8b4 <fmc_get_rate>
 800a16a:	1d3a      	adds	r2, r7, #4
 800a16c:	2314      	movs	r3, #20
 800a16e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800a172:	c903      	ldmia	r1, {r0, r1}
 800a174:	f000 f8e0 	bl	800a338 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800a178:	1d3b      	adds	r3, r7, #4
 800a17a:	2101      	movs	r1, #1
 800a17c:	4618      	mov	r0, r3
 800a17e:	f000 fa04 	bl	800a58a <fm_lcd_puts>

    lcd_set_symbol(ACM, 0x0);
 800a182:	2100      	movs	r1, #0
 800a184:	2006      	movs	r0, #6
 800a186:	f000 fdf5 	bl	800ad74 <lcd_set_symbol>
    lcd_set_symbol(RATE, 0x0);
 800a18a:	2100      	movs	r1, #0
 800a18c:	2002      	movs	r0, #2
 800a18e:	f000 fdf1 	bl	800ad74 <lcd_set_symbol>

    lcd_set_vol_unit(fmc_get_acm().unit_volume, 0x0);
 800a192:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a196:	4618      	mov	r0, r3
 800a198:	f002 fb26 	bl	800c7e8 <fmc_get_acm>
 800a19c:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 800a1a0:	2100      	movs	r1, #0
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f001 f864 	bl	800b270 <lcd_set_vol_unit>
    lcd_set_symbol(BACKSLASH, 0x0);
 800a1a8:	2100      	movs	r1, #0
 800a1aa:	2007      	movs	r0, #7
 800a1ac:	f000 fde2 	bl	800ad74 <lcd_set_symbol>
    lcd_set_time_unit(fmc_get_acm().unit_time, 0x0);
 800a1b0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f002 fb17 	bl	800c7e8 <fmc_get_acm>
 800a1ba:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 800a1be:	2100      	movs	r1, #0
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f001 f813 	bl	800b1ec <lcd_set_time_unit>
}
 800a1c6:	bf00      	nop
 800a1c8:	37d8      	adds	r7, #216	; 0xd8
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}

0800a1ce <fm_lcd_acm_temp>:
 * de forma personalizada según las opciones que se elijan.
 * @param None
 * @retval None
 */
void fm_lcd_acm_temp()
{
 800a1ce:	b580      	push	{r7, lr}
 800a1d0:	b0a2      	sub	sp, #136	; 0x88
 800a1d2:	af02      	add	r7, sp, #8
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fmc_get_acm().volume, ' ', LINE_0_DIGITS, lcd_msg,
 800a1d4:	f107 0318 	add.w	r3, r7, #24
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f002 fb05 	bl	800c7e8 <fmc_get_acm>
 800a1de:	2314      	movs	r3, #20
 800a1e0:	9301      	str	r3, [sp, #4]
 800a1e2:	1d3b      	adds	r3, r7, #4
 800a1e4:	9300      	str	r3, [sp, #0]
 800a1e6:	2309      	movs	r3, #9
 800a1e8:	2220      	movs	r2, #32
 800a1ea:	f107 0120 	add.w	r1, r7, #32
 800a1ee:	c903      	ldmia	r1, {r0, r1}
 800a1f0:	f000 f8e6 	bl	800a3c0 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_acm().volume, lcd_msg, sizeof(lcd_msg));
 800a1f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f002 faf5 	bl	800c7e8 <fmc_get_acm>
 800a1fe:	1d3a      	adds	r2, r7, #4
 800a200:	2314      	movs	r3, #20
 800a202:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800a206:	c903      	ldmia	r1, {r0, r1}
 800a208:	f000 f896 	bl	800a338 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800a20c:	1d3b      	adds	r3, r7, #4
 800a20e:	2100      	movs	r1, #0
 800a210:	4618      	mov	r0, r3
 800a212:	f000 f9ba 	bl	800a58a <fm_lcd_puts>

    fm_lcd_fp_to_str(fmc_get_stm32_temp().temperature, ' ', LINE_1_DIGITS,
 800a216:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a21a:	4618      	mov	r0, r3
 800a21c:	f002 fb24 	bl	800c868 <fmc_get_stm32_temp>
 800a220:	2314      	movs	r3, #20
 800a222:	9301      	str	r3, [sp, #4]
 800a224:	1d3b      	adds	r3, r7, #4
 800a226:	9300      	str	r3, [sp, #0]
 800a228:	2308      	movs	r3, #8
 800a22a:	2220      	movs	r2, #32
 800a22c:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800a230:	c903      	ldmia	r1, {r0, r1}
 800a232:	f000 f8c5 	bl	800a3c0 <fm_lcd_fp_to_str>
    lcd_msg, sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_stm32_temp().temperature, lcd_msg,
 800a236:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a23a:	4618      	mov	r0, r3
 800a23c:	f002 fb14 	bl	800c868 <fmc_get_stm32_temp>
 800a240:	1d3a      	adds	r2, r7, #4
 800a242:	2314      	movs	r3, #20
 800a244:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800a248:	c903      	ldmia	r1, {r0, r1}
 800a24a:	f000 f875 	bl	800a338 <fm_lcd_fp_add_dot>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800a24e:	1d3b      	adds	r3, r7, #4
 800a250:	2101      	movs	r1, #1
 800a252:	4618      	mov	r0, r3
 800a254:	f000 f999 	bl	800a58a <fm_lcd_puts>

    lcd_set_symbol(ACM, 0x0);
 800a258:	2100      	movs	r1, #0
 800a25a:	2006      	movs	r0, #6
 800a25c:	f000 fd8a 	bl	800ad74 <lcd_set_symbol>
    lcd_set_vol_unit(fmc_get_stm32_temp().unit_volume_temp, 0x0);
 800a260:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a264:	4618      	mov	r0, r3
 800a266:	f002 faff 	bl	800c868 <fmc_get_stm32_temp>
 800a26a:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800a26e:	2100      	movs	r1, #0
 800a270:	4618      	mov	r0, r3
 800a272:	f000 fffd 	bl	800b270 <lcd_set_vol_unit>
}
 800a276:	bf00      	nop
 800a278:	3780      	adds	r7, #128	; 0x80
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <fm_lcd_clear>:
 * @brief Función que limpia toda la pantalla.
 * @param  None
 * @retval None
 */
void fm_lcd_clear()
{
 800a27e:	b580      	push	{r7, lr}
 800a280:	af00      	add	r7, sp, #0
    lcd_clear_all();
 800a282:	f000 fa9f 	bl	800a7c4 <lcd_clear_all>
}
 800a286:	bf00      	nop
 800a288:	bd80      	pop	{r7, pc}

0800a28a <fm_lcd_date_hour>:
 * personalizada según las opciones que se elijan.
 * @param Hora y fecha a imprimir.
 * @retval None
 */
void fm_lcd_date_hour(int time, int date)
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b086      	sub	sp, #24
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
 800a292:	6039      	str	r1, [r7, #0]
    char lcd_msg[MSG_LENGTH];

    fm_lcd_format_number_in_line(HIGH_ROW, date, lcd_msg,
 800a294:	6839      	ldr	r1, [r7, #0]
 800a296:	f107 020c 	add.w	r2, r7, #12
 800a29a:	230c      	movs	r3, #12
 800a29c:	2000      	movs	r0, #0
 800a29e:	f000 f827 	bl	800a2f0 <fm_lcd_format_number_in_line>
    MSG_LENGTH);
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800a2a2:	f107 030c 	add.w	r3, r7, #12
 800a2a6:	2100      	movs	r1, #0
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f000 f96e 	bl	800a58a <fm_lcd_puts>
    lcd_set_point(HIGH_ROW, PNT_1);
 800a2ae:	2101      	movs	r1, #1
 800a2b0:	2000      	movs	r0, #0
 800a2b2:	f000 fcb3 	bl	800ac1c <lcd_set_point>
    lcd_set_point(HIGH_ROW, PNT_3);
 800a2b6:	2103      	movs	r1, #3
 800a2b8:	2000      	movs	r0, #0
 800a2ba:	f000 fcaf 	bl	800ac1c <lcd_set_point>

    fm_lcd_format_number_in_line(LOW_ROW, time, lcd_msg,
 800a2be:	6879      	ldr	r1, [r7, #4]
 800a2c0:	f107 020c 	add.w	r2, r7, #12
 800a2c4:	230c      	movs	r3, #12
 800a2c6:	2001      	movs	r0, #1
 800a2c8:	f000 f812 	bl	800a2f0 <fm_lcd_format_number_in_line>
    MSG_LENGTH);
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800a2cc:	f107 030c 	add.w	r3, r7, #12
 800a2d0:	2101      	movs	r1, #1
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f000 f959 	bl	800a58a <fm_lcd_puts>
    lcd_set_point(LOW_ROW, PNT_2);
 800a2d8:	2102      	movs	r1, #2
 800a2da:	2001      	movs	r0, #1
 800a2dc:	f000 fc9e 	bl	800ac1c <lcd_set_point>
    lcd_set_point(LOW_ROW, PNT_4);
 800a2e0:	2104      	movs	r1, #4
 800a2e2:	2001      	movs	r0, #1
 800a2e4:	f000 fc9a 	bl	800ac1c <lcd_set_point>
}
 800a2e8:	bf00      	nop
 800a2ea:	3718      	adds	r7, #24
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <fm_lcd_format_number_in_line>:
 * @param Enumeracion rows_t de lcd.h
 * @retval arreglo con la información formateada tipo char.
 */
void fm_lcd_format_number_in_line(rows_t line, uint32_t data, char *p_str,
int length)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b084      	sub	sp, #16
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	60b9      	str	r1, [r7, #8]
 800a2f8:	607a      	str	r2, [r7, #4]
 800a2fa:	603b      	str	r3, [r7, #0]
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	73fb      	strb	r3, [r7, #15]
    if (line == HIGH_ROW)
 800a300:	7bfb      	ldrb	r3, [r7, #15]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d106      	bne.n	800a314 <fm_lcd_format_number_in_line+0x24>
    {
        snprintf(p_str, length, "%8lu", data);
 800a306:	6839      	ldr	r1, [r7, #0]
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	4a09      	ldr	r2, [pc, #36]	; (800a330 <fm_lcd_format_number_in_line+0x40>)
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f002 fd03 	bl	800cd18 <sniprintf>
    }
    else if (line == LOW_ROW)
    {
        snprintf(p_str, length, "%7lu", data);
    }
}
 800a312:	e008      	b.n	800a326 <fm_lcd_format_number_in_line+0x36>
    else if (line == LOW_ROW)
 800a314:	7bfb      	ldrb	r3, [r7, #15]
 800a316:	2b01      	cmp	r3, #1
 800a318:	d105      	bne.n	800a326 <fm_lcd_format_number_in_line+0x36>
        snprintf(p_str, length, "%7lu", data);
 800a31a:	6839      	ldr	r1, [r7, #0]
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	4a05      	ldr	r2, [pc, #20]	; (800a334 <fm_lcd_format_number_in_line+0x44>)
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f002 fcf9 	bl	800cd18 <sniprintf>
}
 800a326:	bf00      	nop
 800a328:	3710      	adds	r7, #16
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
 800a32e:	bf00      	nop
 800a330:	0800d698 	.word	0x0800d698
 800a334:	0800d6a0 	.word	0x0800d6a0

0800a338 <fm_lcd_fp_add_dot>:
 * @param str_size tamaño del string.
 * @retval int.
 *
 */
int fm_lcd_fp_add_dot(fmc_fp_t fp, char *p_str, int str_size)
{
 800a338:	b590      	push	{r4, r7, lr}
 800a33a:	b087      	sub	sp, #28
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	f107 0408 	add.w	r4, r7, #8
 800a342:	e884 0003 	stmia.w	r4, {r0, r1}
 800a346:	607a      	str	r2, [r7, #4]
 800a348:	603b      	str	r3, [r7, #0]
    int idx_now;

    /*
     * Si la resolución asignada por el usuario es 0, no hay nada que hacer.
     */
    if (fp.res == 0)
 800a34a:	7b3b      	ldrb	r3, [r7, #12]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d101      	bne.n	800a354 <fm_lcd_fp_add_dot+0x1c>
    {
        return (0);
 800a350:	2300      	movs	r3, #0
 800a352:	e031      	b.n	800a3b8 <fm_lcd_fp_add_dot+0x80>
    }

    idx_now = strlen(p_str); //Como indice apunta a terminador nulo.
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f7f5 ff43 	bl	80001e0 <strlen>
 800a35a:	4603      	mov	r3, r0
 800a35c:	617b      	str	r3, [r7, #20]

    /*
     * Chequeo de contorno para ver si entra el punto o no.
     */

    if ((idx_now + 1 + 1) >= str_size)
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	3302      	adds	r3, #2
 800a362:	683a      	ldr	r2, [r7, #0]
 800a364:	429a      	cmp	r2, r3
 800a366:	dc02      	bgt.n	800a36e <fm_lcd_fp_add_dot+0x36>
    {
        return (-1);
 800a368:	f04f 33ff 	mov.w	r3, #4294967295
 800a36c:	e024      	b.n	800a3b8 <fm_lcd_fp_add_dot+0x80>
    }

    idx_end = idx_now - fp.res; //Como índice apunta a donde debe ir el '.'
 800a36e:	7b3b      	ldrb	r3, [r7, #12]
 800a370:	461a      	mov	r2, r3
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	1a9b      	subs	r3, r3, r2
 800a376:	613b      	str	r3, [r7, #16]

    /*
     * Desplazo posiciones en el arreglo hasta llegar a la posición donde debe
     * ir ubicado el '.'
     */
    while (idx_now != idx_end)
 800a378:	e00b      	b.n	800a392 <fm_lcd_fp_add_dot+0x5a>
    {
        p_str[idx_now + 1] = p_str[idx_now];
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	441a      	add	r2, r3
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	3301      	adds	r3, #1
 800a384:	6879      	ldr	r1, [r7, #4]
 800a386:	440b      	add	r3, r1
 800a388:	7812      	ldrb	r2, [r2, #0]
 800a38a:	701a      	strb	r2, [r3, #0]
        idx_now--;
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	3b01      	subs	r3, #1
 800a390:	617b      	str	r3, [r7, #20]
    while (idx_now != idx_end)
 800a392:	697a      	ldr	r2, [r7, #20]
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	429a      	cmp	r2, r3
 800a398:	d1ef      	bne.n	800a37a <fm_lcd_fp_add_dot+0x42>
    }
    p_str[idx_now + 1] = p_str[idx_now];
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	687a      	ldr	r2, [r7, #4]
 800a39e:	441a      	add	r2, r3
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	6879      	ldr	r1, [r7, #4]
 800a3a6:	440b      	add	r3, r1
 800a3a8:	7812      	ldrb	r2, [r2, #0]
 800a3aa:	701a      	strb	r2, [r3, #0]
    p_str[idx_now] = '.';
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	4413      	add	r3, r2
 800a3b2:	222e      	movs	r2, #46	; 0x2e
 800a3b4:	701a      	strb	r2, [r3, #0]

    return (0);
 800a3b6:	2300      	movs	r3, #0
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	371c      	adds	r7, #28
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd90      	pop	{r4, r7, pc}

0800a3c0 <fm_lcd_fp_to_str>:
 * @param str_size tamaño del string.
 * @retval int.
 */
int fm_lcd_fp_to_str(fmc_fp_t fp, char leading_char, int str_width, char *p_str,
int str_size)
{
 800a3c0:	b490      	push	{r4, r7}
 800a3c2:	b088      	sub	sp, #32
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	f107 0408 	add.w	r4, r7, #8
 800a3ca:	e884 0003 	stmia.w	r4, {r0, r1}
 800a3ce:	603b      	str	r3, [r7, #0]
 800a3d0:	4613      	mov	r3, r2
 800a3d2:	71fb      	strb	r3, [r7, #7]
    int idx_1 = 0;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	61fb      	str	r3, [r7, #28]
    /*
     * Este es el unico chequeo de contorno. Verifica que el tamaño del string
     * no sea menor a PCF8553_DATA_SIZE, calculado como suficiente para operar
     * con las líneas del lcd.
     */
    if (str_size < PCF8553_DATA_SIZE)
 800a3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3da:	2b13      	cmp	r3, #19
 800a3dc:	dc02      	bgt.n	800a3e4 <fm_lcd_fp_to_str+0x24>
    {
        return (-1);
 800a3de:	f04f 33ff 	mov.w	r3, #4294967295
 800a3e2:	e086      	b.n	800a4f2 <fm_lcd_fp_to_str+0x132>
    }

    /*
     * Esta linea es necesaria para representa bien a num = 0
     */
    p_str[idx_1] = fp.num % 10 + '0';
 800a3e4:	68b9      	ldr	r1, [r7, #8]
 800a3e6:	4b45      	ldr	r3, [pc, #276]	; (800a4fc <fm_lcd_fp_to_str+0x13c>)
 800a3e8:	fba3 2301 	umull	r2, r3, r3, r1
 800a3ec:	08da      	lsrs	r2, r3, #3
 800a3ee:	4613      	mov	r3, r2
 800a3f0:	009b      	lsls	r3, r3, #2
 800a3f2:	4413      	add	r3, r2
 800a3f4:	005b      	lsls	r3, r3, #1
 800a3f6:	1aca      	subs	r2, r1, r3
 800a3f8:	b2d2      	uxtb	r2, r2
 800a3fa:	69fb      	ldr	r3, [r7, #28]
 800a3fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3fe:	440b      	add	r3, r1
 800a400:	3230      	adds	r2, #48	; 0x30
 800a402:	b2d2      	uxtb	r2, r2
 800a404:	701a      	strb	r2, [r3, #0]

    uint32_t num_aux = fp.num;
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	617b      	str	r3, [r7, #20]

    /*
     * Almaceno el número de atrás para adelante hasta que llegar al primer
     * dígito inclusive
     */
    while (fp.num / 10)
 800a40a:	e019      	b.n	800a440 <fm_lcd_fp_to_str+0x80>
    {
        idx_1++;
 800a40c:	69fb      	ldr	r3, [r7, #28]
 800a40e:	3301      	adds	r3, #1
 800a410:	61fb      	str	r3, [r7, #28]
        fp.num /= 10;
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	4a39      	ldr	r2, [pc, #228]	; (800a4fc <fm_lcd_fp_to_str+0x13c>)
 800a416:	fba2 2303 	umull	r2, r3, r2, r3
 800a41a:	08db      	lsrs	r3, r3, #3
 800a41c:	60bb      	str	r3, [r7, #8]
        p_str[idx_1] = fp.num % 10 + '0';
 800a41e:	68b9      	ldr	r1, [r7, #8]
 800a420:	4b36      	ldr	r3, [pc, #216]	; (800a4fc <fm_lcd_fp_to_str+0x13c>)
 800a422:	fba3 2301 	umull	r2, r3, r3, r1
 800a426:	08da      	lsrs	r2, r3, #3
 800a428:	4613      	mov	r3, r2
 800a42a:	009b      	lsls	r3, r3, #2
 800a42c:	4413      	add	r3, r2
 800a42e:	005b      	lsls	r3, r3, #1
 800a430:	1aca      	subs	r2, r1, r3
 800a432:	b2d2      	uxtb	r2, r2
 800a434:	69fb      	ldr	r3, [r7, #28]
 800a436:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a438:	440b      	add	r3, r1
 800a43a:	3230      	adds	r2, #48	; 0x30
 800a43c:	b2d2      	uxtb	r2, r2
 800a43e:	701a      	strb	r2, [r3, #0]
    while (fp.num / 10)
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	2b09      	cmp	r3, #9
 800a444:	d8e2      	bhi.n	800a40c <fm_lcd_fp_to_str+0x4c>

    /*
     * Si se midió 0 pulsos, se rellena con 0 hasta pasar el punto y asi se
     * mantiene la resolución deseada.
     */
    if (num_aux == 0)
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d119      	bne.n	800a480 <fm_lcd_fp_to_str+0xc0>
    {
        while (idx_1 < fp.res)
 800a44c:	e013      	b.n	800a476 <fm_lcd_fp_to_str+0xb6>
        {
            idx_1++;
 800a44e:	69fb      	ldr	r3, [r7, #28]
 800a450:	3301      	adds	r3, #1
 800a452:	61fb      	str	r3, [r7, #28]
            p_str[idx_1] = fp.num % 10 + '0';
 800a454:	68b9      	ldr	r1, [r7, #8]
 800a456:	4b29      	ldr	r3, [pc, #164]	; (800a4fc <fm_lcd_fp_to_str+0x13c>)
 800a458:	fba3 2301 	umull	r2, r3, r3, r1
 800a45c:	08da      	lsrs	r2, r3, #3
 800a45e:	4613      	mov	r3, r2
 800a460:	009b      	lsls	r3, r3, #2
 800a462:	4413      	add	r3, r2
 800a464:	005b      	lsls	r3, r3, #1
 800a466:	1aca      	subs	r2, r1, r3
 800a468:	b2d2      	uxtb	r2, r2
 800a46a:	69fb      	ldr	r3, [r7, #28]
 800a46c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a46e:	440b      	add	r3, r1
 800a470:	3230      	adds	r2, #48	; 0x30
 800a472:	b2d2      	uxtb	r2, r2
 800a474:	701a      	strb	r2, [r3, #0]
        while (idx_1 < fp.res)
 800a476:	7b3b      	ldrb	r3, [r7, #12]
 800a478:	461a      	mov	r2, r3
 800a47a:	69fb      	ldr	r3, [r7, #28]
 800a47c:	4293      	cmp	r3, r2
 800a47e:	dbe6      	blt.n	800a44e <fm_lcd_fp_to_str+0x8e>

    /*
     * Si el caracter a completar no es 0, se lo debe agregar al final del
     * arreglo hasta completar el largo de la linea (7 u 8 caracteres + \0).
     */
    if (leading_char)
 800a480:	79fb      	ldrb	r3, [r7, #7]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d00d      	beq.n	800a4a2 <fm_lcd_fp_to_str+0xe2>
    {
        while (idx_1 < str_width - 1)
 800a486:	e007      	b.n	800a498 <fm_lcd_fp_to_str+0xd8>
        {
            idx_1++;
 800a488:	69fb      	ldr	r3, [r7, #28]
 800a48a:	3301      	adds	r3, #1
 800a48c:	61fb      	str	r3, [r7, #28]
            p_str[idx_1] = leading_char;
 800a48e:	69fb      	ldr	r3, [r7, #28]
 800a490:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a492:	4413      	add	r3, r2
 800a494:	79fa      	ldrb	r2, [r7, #7]
 800a496:	701a      	strb	r2, [r3, #0]
        while (idx_1 < str_width - 1)
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	3b01      	subs	r3, #1
 800a49c:	69fa      	ldr	r2, [r7, #28]
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	dbf2      	blt.n	800a488 <fm_lcd_fp_to_str+0xc8>
        }
    }
    p_str[idx_1] = '\0';
 800a4a2:	69fb      	ldr	r3, [r7, #28]
 800a4a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4a6:	4413      	add	r3, r2
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	701a      	strb	r2, [r3, #0]
    idx_1--;
 800a4ac:	69fb      	ldr	r3, [r7, #28]
 800a4ae:	3b01      	subs	r3, #1
 800a4b0:	61fb      	str	r3, [r7, #28]

    /*
     *Esta sección da vuelta el arreglo ya que se completó al revés.
     */
    int idx_2 = 0;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	61bb      	str	r3, [r7, #24]
    char ch_temp;

    while (idx_1 > idx_2)
 800a4b6:	e017      	b.n	800a4e8 <fm_lcd_fp_to_str+0x128>
    {
        ch_temp = p_str[idx_1];
 800a4b8:	69fb      	ldr	r3, [r7, #28]
 800a4ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4bc:	4413      	add	r3, r2
 800a4be:	781b      	ldrb	r3, [r3, #0]
 800a4c0:	74fb      	strb	r3, [r7, #19]
        p_str[idx_1] = p_str[idx_2];
 800a4c2:	69bb      	ldr	r3, [r7, #24]
 800a4c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4c6:	441a      	add	r2, r3
 800a4c8:	69fb      	ldr	r3, [r7, #28]
 800a4ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a4cc:	440b      	add	r3, r1
 800a4ce:	7812      	ldrb	r2, [r2, #0]
 800a4d0:	701a      	strb	r2, [r3, #0]
        p_str[idx_2] = ch_temp;
 800a4d2:	69bb      	ldr	r3, [r7, #24]
 800a4d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4d6:	4413      	add	r3, r2
 800a4d8:	7cfa      	ldrb	r2, [r7, #19]
 800a4da:	701a      	strb	r2, [r3, #0]
        idx_1--;
 800a4dc:	69fb      	ldr	r3, [r7, #28]
 800a4de:	3b01      	subs	r3, #1
 800a4e0:	61fb      	str	r3, [r7, #28]
        idx_2++;
 800a4e2:	69bb      	ldr	r3, [r7, #24]
 800a4e4:	3301      	adds	r3, #1
 800a4e6:	61bb      	str	r3, [r7, #24]
    while (idx_1 > idx_2)
 800a4e8:	69fa      	ldr	r2, [r7, #28]
 800a4ea:	69bb      	ldr	r3, [r7, #24]
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	dce3      	bgt.n	800a4b8 <fm_lcd_fp_to_str+0xf8>
    }

    return (0);
 800a4f0:	2300      	movs	r3, #0
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3720      	adds	r7, #32
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bc90      	pop	{r4, r7}
 800a4fa:	4770      	bx	lr
 800a4fc:	cccccccd 	.word	0xcccccccd

0800a500 <fm_lcd_init>:
 * segmentos por unos segundos y luego se lo apaga.
 * @param  None
 * @retval None
 */
void fm_lcd_init()
{
 800a500:	b580      	push	{r7, lr}
 800a502:	af00      	add	r7, sp, #0
    lcd_clear_all();
 800a504:	f000 f95e 	bl	800a7c4 <lcd_clear_all>
    lcd_init();
 800a508:	f000 f984 	bl	800a814 <lcd_init>

    /*
     * Se encienden todos los segmentos por 500 milisegundos al iniciar.
     */
    pcf8553_write_all(0xFF); // @suppress("Avoid magic numbers")
 800a50c:	20ff      	movs	r0, #255	; 0xff
 800a50e:	f001 fa43 	bl	800b998 <pcf8553_write_all>
    HAL_Delay(3000); // @suppress("Avoid magic numbers")
 800a512:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a516:	f7f6 fe45 	bl	80011a4 <HAL_Delay>
    pcf8553_write_all(0x00); // @suppress("Avoid magic numbers")
 800a51a:	2000      	movs	r0, #0
 800a51c:	f001 fa3c 	bl	800b998 <pcf8553_write_all>
}
 800a520:	bf00      	nop
 800a522:	bd80      	pop	{r7, pc}

0800a524 <fm_lcd_k_factor>:
 * configuración del factor de calibración K.
 * @param  None
 * @retval None
 */
void fm_lcd_k_factor()
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b094      	sub	sp, #80	; 0x50
 800a528:	af02      	add	r7, sp, #8
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fm_factory_get_k_factor(), '0', LINE_0_DIGITS, lcd_msg,
 800a52a:	f107 0318 	add.w	r3, r7, #24
 800a52e:	4618      	mov	r0, r3
 800a530:	f7ff fc86 	bl	8009e40 <fm_factory_get_k_factor>
 800a534:	2314      	movs	r3, #20
 800a536:	9301      	str	r3, [sp, #4]
 800a538:	1d3b      	adds	r3, r7, #4
 800a53a:	9300      	str	r3, [sp, #0]
 800a53c:	2309      	movs	r3, #9
 800a53e:	2230      	movs	r2, #48	; 0x30
 800a540:	f107 0118 	add.w	r1, r7, #24
 800a544:	c903      	ldmia	r1, {r0, r1}
 800a546:	f7ff ff3b 	bl	800a3c0 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_k_factor(), lcd_msg, sizeof(lcd_msg));
 800a54a:	f107 0320 	add.w	r3, r7, #32
 800a54e:	4618      	mov	r0, r3
 800a550:	f7ff fc76 	bl	8009e40 <fm_factory_get_k_factor>
 800a554:	1d3a      	adds	r2, r7, #4
 800a556:	2314      	movs	r3, #20
 800a558:	f107 0120 	add.w	r1, r7, #32
 800a55c:	c903      	ldmia	r1, {r0, r1}
 800a55e:	f7ff feeb 	bl	800a338 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800a562:	1d3b      	adds	r3, r7, #4
 800a564:	2100      	movs	r1, #0
 800a566:	4618      	mov	r0, r3
 800a568:	f000 f80f 	bl	800a58a <fm_lcd_puts>

    lcd_set_vol_unit(fmc_get_acm().unit_volume, 0x0);
 800a56c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a570:	4618      	mov	r0, r3
 800a572:	f002 f939 	bl	800c7e8 <fmc_get_acm>
 800a576:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a57a:	2100      	movs	r1, #0
 800a57c:	4618      	mov	r0, r3
 800a57e:	f000 fe77 	bl	800b270 <lcd_set_vol_unit>
}
 800a582:	bf00      	nop
 800a584:	3748      	adds	r7, #72	; 0x48
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}

0800a58a <fm_lcd_puts>:
 * @param Arreglo a imprimir.
 * @param Fila donde se coloca el arreglo a imprimir.
 * @retval None
 */
void fm_lcd_puts(const char *c, const rows_t row)
{
 800a58a:	b580      	push	{r7, lr}
 800a58c:	b084      	sub	sp, #16
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
 800a592:	460b      	mov	r3, r1
 800a594:	70fb      	strb	r3, [r7, #3]
    uint8_t col = 0;
 800a596:	2300      	movs	r3, #0
 800a598:	73fb      	strb	r3, [r7, #15]
    uint8_t col_limit;

    if (row == 0)
 800a59a:	78fb      	ldrb	r3, [r7, #3]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d102      	bne.n	800a5a6 <fm_lcd_puts+0x1c>
    {
        col_limit = LINE_0_DIGITS - 1;
 800a5a0:	2308      	movs	r3, #8
 800a5a2:	73bb      	strb	r3, [r7, #14]
 800a5a4:	e026      	b.n	800a5f4 <fm_lcd_puts+0x6a>
    }
    else
    {
        col_limit = LINE_1_DIGITS - 1;
 800a5a6:	2307      	movs	r3, #7
 800a5a8:	73bb      	strb	r3, [r7, #14]
    }

    while ((*c) && (col < col_limit))
 800a5aa:	e023      	b.n	800a5f4 <fm_lcd_puts+0x6a>
    {
        if (((*c >= '0') && (*c <= '9')) || (*c == ' ') || (*c == '.'))
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	2b2f      	cmp	r3, #47	; 0x2f
 800a5b2:	d903      	bls.n	800a5bc <fm_lcd_puts+0x32>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	781b      	ldrb	r3, [r3, #0]
 800a5b8:	2b39      	cmp	r3, #57	; 0x39
 800a5ba:	d907      	bls.n	800a5cc <fm_lcd_puts+0x42>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	2b20      	cmp	r3, #32
 800a5c2:	d003      	beq.n	800a5cc <fm_lcd_puts+0x42>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	2b2e      	cmp	r3, #46	; 0x2e
 800a5ca:	d106      	bne.n	800a5da <fm_lcd_puts+0x50>
        {
            lcd_put_char(*c, col, row);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	78fa      	ldrb	r2, [r7, #3]
 800a5d2:	7bf9      	ldrb	r1, [r7, #15]
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f000 f923 	bl	800a820 <lcd_put_char>
        }
        col++;
 800a5da:	7bfb      	ldrb	r3, [r7, #15]
 800a5dc:	3301      	adds	r3, #1
 800a5de:	73fb      	strb	r3, [r7, #15]
        c++;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	3301      	adds	r3, #1
 800a5e4:	607b      	str	r3, [r7, #4]
        if (*c == '.')
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	2b2e      	cmp	r3, #46	; 0x2e
 800a5ec:	d102      	bne.n	800a5f4 <fm_lcd_puts+0x6a>
        {
            col--;
 800a5ee:	7bfb      	ldrb	r3, [r7, #15]
 800a5f0:	3b01      	subs	r3, #1
 800a5f2:	73fb      	strb	r3, [r7, #15]
    while ((*c) && (col < col_limit))
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d003      	beq.n	800a604 <fm_lcd_puts+0x7a>
 800a5fc:	7bfa      	ldrb	r2, [r7, #15]
 800a5fe:	7bbb      	ldrb	r3, [r7, #14]
 800a600:	429a      	cmp	r2, r3
 800a602:	d3d3      	bcc.n	800a5ac <fm_lcd_puts+0x22>
        }
    }
}
 800a604:	bf00      	nop
 800a606:	3710      	adds	r7, #16
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <fm_lcd_refresh>:
 * la librería de mas bajo nivel 'lcd.h'.
 * @param  None
 * @retval None
 */
void fm_lcd_refresh()
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	af00      	add	r7, sp, #0
    lcd_refresh();
 800a610:	f000 fafe 	bl	800ac10 <lcd_refresh>
}
 800a614:	bf00      	nop
 800a616:	bd80      	pop	{r7, pc}

0800a618 <fm_lcd_ttl_rate>:
 * personalizada según las opciones que se elijan.
 * @param None
 * @retval None
 */
void fm_lcd_ttl_rate()
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b0b8      	sub	sp, #224	; 0xe0
 800a61c:	af02      	add	r7, sp, #8
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fmc_get_ttl().volume, ' ', LINE_0_DIGITS, lcd_msg,
 800a61e:	f107 0318 	add.w	r3, r7, #24
 800a622:	4618      	mov	r0, r3
 800a624:	f002 f986 	bl	800c934 <fmc_get_ttl>
 800a628:	2314      	movs	r3, #20
 800a62a:	9301      	str	r3, [sp, #4]
 800a62c:	1d3b      	adds	r3, r7, #4
 800a62e:	9300      	str	r3, [sp, #0]
 800a630:	2309      	movs	r3, #9
 800a632:	2220      	movs	r2, #32
 800a634:	f107 0120 	add.w	r1, r7, #32
 800a638:	c903      	ldmia	r1, {r0, r1}
 800a63a:	f7ff fec1 	bl	800a3c0 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_ttl().volume, lcd_msg, sizeof(lcd_msg));
 800a63e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a642:	4618      	mov	r0, r3
 800a644:	f002 f976 	bl	800c934 <fmc_get_ttl>
 800a648:	1d3a      	adds	r2, r7, #4
 800a64a:	2314      	movs	r3, #20
 800a64c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800a650:	c903      	ldmia	r1, {r0, r1}
 800a652:	f7ff fe71 	bl	800a338 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800a656:	1d3b      	adds	r3, r7, #4
 800a658:	2100      	movs	r1, #0
 800a65a:	4618      	mov	r0, r3
 800a65c:	f7ff ff95 	bl	800a58a <fm_lcd_puts>

    fm_lcd_fp_to_str(fmc_get_rate().volume, ' ', LINE_1_DIGITS, lcd_msg,
 800a660:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a664:	4618      	mov	r0, r3
 800a666:	f002 f925 	bl	800c8b4 <fmc_get_rate>
 800a66a:	2314      	movs	r3, #20
 800a66c:	9301      	str	r3, [sp, #4]
 800a66e:	1d3b      	adds	r3, r7, #4
 800a670:	9300      	str	r3, [sp, #0]
 800a672:	2308      	movs	r3, #8
 800a674:	2220      	movs	r2, #32
 800a676:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800a67a:	c903      	ldmia	r1, {r0, r1}
 800a67c:	f7ff fea0 	bl	800a3c0 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_rate().volume, lcd_msg, sizeof(lcd_msg));
 800a680:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800a684:	4618      	mov	r0, r3
 800a686:	f002 f915 	bl	800c8b4 <fmc_get_rate>
 800a68a:	1d3a      	adds	r2, r7, #4
 800a68c:	2314      	movs	r3, #20
 800a68e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800a692:	c903      	ldmia	r1, {r0, r1}
 800a694:	f7ff fe50 	bl	800a338 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800a698:	1d3b      	adds	r3, r7, #4
 800a69a:	2101      	movs	r1, #1
 800a69c:	4618      	mov	r0, r3
 800a69e:	f7ff ff74 	bl	800a58a <fm_lcd_puts>

    lcd_set_symbol(TTL, 0x0);
 800a6a2:	2100      	movs	r1, #0
 800a6a4:	2005      	movs	r0, #5
 800a6a6:	f000 fb65 	bl	800ad74 <lcd_set_symbol>
    lcd_set_symbol(RATE, 0x0);
 800a6aa:	2100      	movs	r1, #0
 800a6ac:	2002      	movs	r0, #2
 800a6ae:	f000 fb61 	bl	800ad74 <lcd_set_symbol>

    lcd_set_vol_unit(fmc_get_ttl().unit_volume, 0x0);
 800a6b2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f002 f93c 	bl	800c934 <fmc_get_ttl>
 800a6bc:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 800a6c0:	2100      	movs	r1, #0
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f000 fdd4 	bl	800b270 <lcd_set_vol_unit>
    lcd_set_symbol(BACKSLASH, 0x0);
 800a6c8:	2100      	movs	r1, #0
 800a6ca:	2007      	movs	r0, #7
 800a6cc:	f000 fb52 	bl	800ad74 <lcd_set_symbol>
    lcd_set_time_unit(fmc_get_ttl().unit_time, 0x0);
 800a6d0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f002 f92d 	bl	800c934 <fmc_get_ttl>
 800a6da:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 800a6de:	2100      	movs	r1, #0
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f000 fd83 	bl	800b1ec <lcd_set_time_unit>
}
 800a6e6:	bf00      	nop
 800a6e8:	37d8      	adds	r7, #216	; 0xd8
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}

0800a6ee <fm_lcd_units>:
 * configuración de unidades de volumen y tiempo y la resolución de la medida.
 * @param  None
 * @retval None
 */
void fm_lcd_units()
{
 800a6ee:	b580      	push	{r7, lr}
 800a6f0:	b09c      	sub	sp, #112	; 0x70
 800a6f2:	af02      	add	r7, sp, #8
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fm_factory_get_units_digits(), '0', LINE_0_DIGITS, lcd_msg,
 800a6f4:	f107 0318 	add.w	r3, r7, #24
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f7ff fb8f 	bl	8009e1c <fm_factory_get_units_digits>
 800a6fe:	2314      	movs	r3, #20
 800a700:	9301      	str	r3, [sp, #4]
 800a702:	1d3b      	adds	r3, r7, #4
 800a704:	9300      	str	r3, [sp, #0]
 800a706:	2309      	movs	r3, #9
 800a708:	2230      	movs	r2, #48	; 0x30
 800a70a:	f107 0118 	add.w	r1, r7, #24
 800a70e:	c903      	ldmia	r1, {r0, r1}
 800a710:	f7ff fe56 	bl	800a3c0 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_units_digits(), lcd_msg, sizeof(lcd_msg));
 800a714:	f107 0320 	add.w	r3, r7, #32
 800a718:	4618      	mov	r0, r3
 800a71a:	f7ff fb7f 	bl	8009e1c <fm_factory_get_units_digits>
 800a71e:	1d3a      	adds	r2, r7, #4
 800a720:	2314      	movs	r3, #20
 800a722:	f107 0120 	add.w	r1, r7, #32
 800a726:	c903      	ldmia	r1, {r0, r1}
 800a728:	f7ff fe06 	bl	800a338 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800a72c:	1d3b      	adds	r3, r7, #4
 800a72e:	2100      	movs	r1, #0
 800a730:	4618      	mov	r0, r3
 800a732:	f7ff ff2a 	bl	800a58a <fm_lcd_puts>

    lcd_set_vol_unit(fmc_get_acm().unit_volume, 0x0);
 800a736:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a73a:	4618      	mov	r0, r3
 800a73c:	f002 f854 	bl	800c7e8 <fmc_get_acm>
 800a740:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a744:	2100      	movs	r1, #0
 800a746:	4618      	mov	r0, r3
 800a748:	f000 fd92 	bl	800b270 <lcd_set_vol_unit>
    lcd_set_symbol(BACKSLASH, 0x0);
 800a74c:	2100      	movs	r1, #0
 800a74e:	2007      	movs	r0, #7
 800a750:	f000 fb10 	bl	800ad74 <lcd_set_symbol>
    lcd_set_time_unit(fmc_get_acm().unit_time, 0x0);
 800a754:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a758:	4618      	mov	r0, r3
 800a75a:	f002 f845 	bl	800c7e8 <fmc_get_acm>
 800a75e:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800a762:	2100      	movs	r1, #0
 800a764:	4618      	mov	r0, r3
 800a766:	f000 fd41 	bl	800b1ec <lcd_set_time_unit>
}
 800a76a:	bf00      	nop
 800a76c:	3768      	adds	r7, #104	; 0x68
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}

0800a772 <fm_lcd_version>:
 * según las opciones que se elijan.
 * @param puntos de la fila inferior a imprimir, de tipo point_t.
 * @retval None
 */
void fm_lcd_version(point_t low_point1, point_t low_point2)
{
 800a772:	b580      	push	{r7, lr}
 800a774:	b086      	sub	sp, #24
 800a776:	af00      	add	r7, sp, #0
 800a778:	4603      	mov	r3, r0
 800a77a:	460a      	mov	r2, r1
 800a77c:	71fb      	strb	r3, [r7, #7]
 800a77e:	4613      	mov	r3, r2
 800a780:	71bb      	strb	r3, [r7, #6]
    char lcd_msg[MSG_LENGTH];

    fm_lcd_format_number_in_line(LOW_ROW, fm_version_get(), lcd_msg,
 800a782:	f002 f817 	bl	800c7b4 <fm_version_get>
 800a786:	4601      	mov	r1, r0
 800a788:	f107 020c 	add.w	r2, r7, #12
 800a78c:	230c      	movs	r3, #12
 800a78e:	2001      	movs	r0, #1
 800a790:	f7ff fdae 	bl	800a2f0 <fm_lcd_format_number_in_line>
    MSG_LENGTH);
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800a794:	f107 030c 	add.w	r3, r7, #12
 800a798:	2101      	movs	r1, #1
 800a79a:	4618      	mov	r0, r3
 800a79c:	f7ff fef5 	bl	800a58a <fm_lcd_puts>
    lcd_set_point(LOW_ROW, low_point1);
 800a7a0:	79fb      	ldrb	r3, [r7, #7]
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	2001      	movs	r0, #1
 800a7a6:	f000 fa39 	bl	800ac1c <lcd_set_point>
    lcd_set_point(LOW_ROW, low_point2);
 800a7aa:	79bb      	ldrb	r3, [r7, #6]
 800a7ac:	4619      	mov	r1, r3
 800a7ae:	2001      	movs	r0, #1
 800a7b0:	f000 fa34 	bl	800ac1c <lcd_set_point>

    lcd_set_symbol(VE, 0x0);
 800a7b4:	2100      	movs	r1, #0
 800a7b6:	2009      	movs	r0, #9
 800a7b8:	f000 fadc 	bl	800ad74 <lcd_set_symbol>
}
 800a7bc:	bf00      	nop
 800a7be:	3718      	adds	r7, #24
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}

0800a7c4 <lcd_clear_all>:
 * @brief Función que limpia toda la pantalla.
 * @param  None
 * @retval None
 */
void lcd_clear_all()
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b082      	sub	sp, #8
 800a7c8:	af00      	add	r7, sp, #0
    pcf8553_clear_buff();
 800a7ca:	f001 f855 	bl	800b878 <pcf8553_clear_buff>
     * Limpia el buffer intermedio de los números que aparecen en las filas HIGH
     * y LOW de la pantalla LCD. No es muy eficiente si se pretende usar al
     * refrescar la pantalla cada x tiempo, pero será necesario usarla por el
     * momento al pasar de una pantalla a otra.
     */
    for (int cont_buff_row = 0; cont_buff_row < LCD_ROWS; cont_buff_row++)
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	607b      	str	r3, [r7, #4]
 800a7d2:	e013      	b.n	800a7fc <lcd_clear_all+0x38>
    {
        for (int cont_buff_col = 0; cont_buff_col < LCD_COLS; cont_buff_col++)
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	603b      	str	r3, [r7, #0]
 800a7d8:	e00a      	b.n	800a7f0 <lcd_clear_all+0x2c>
        {
            g_buf[cont_buff_row][cont_buff_col] = 0;
 800a7da:	4a0d      	ldr	r2, [pc, #52]	; (800a810 <lcd_clear_all+0x4c>)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	00db      	lsls	r3, r3, #3
 800a7e0:	441a      	add	r2, r3
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	4413      	add	r3, r2
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	701a      	strb	r2, [r3, #0]
        for (int cont_buff_col = 0; cont_buff_col < LCD_COLS; cont_buff_col++)
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	603b      	str	r3, [r7, #0]
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	2b07      	cmp	r3, #7
 800a7f4:	ddf1      	ble.n	800a7da <lcd_clear_all+0x16>
    for (int cont_buff_row = 0; cont_buff_row < LCD_ROWS; cont_buff_row++)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	607b      	str	r3, [r7, #4]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	dde8      	ble.n	800a7d4 <lcd_clear_all+0x10>
        }
    }

    pcf8553_write_all(NONE_SEGMENTS);
 800a802:	2000      	movs	r0, #0
 800a804:	f001 f8c8 	bl	800b998 <pcf8553_write_all>
}
 800a808:	bf00      	nop
 800a80a:	3708      	adds	r7, #8
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	200038ac 	.word	0x200038ac

0800a814 <lcd_init>:
 * borrándola.
 * @param  None
 * @retval None
 */
void lcd_init()
{
 800a814:	b580      	push	{r7, lr}
 800a816:	af00      	add	r7, sp, #0
    pcf8553_init();
 800a818:	f001 f874 	bl	800b904 <pcf8553_init>
}
 800a81c:	bf00      	nop
 800a81e:	bd80      	pop	{r7, pc}

0800a820 <lcd_put_char>:
 * elegida.
 * @param caracter a escribir tipo char, columna y fila de tipo uint8_t
 * @retval None
 */
void lcd_put_char(char c, uint8_t col, uint8_t row)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b082      	sub	sp, #8
 800a824:	af00      	add	r7, sp, #0
 800a826:	4603      	mov	r3, r0
 800a828:	71fb      	strb	r3, [r7, #7]
 800a82a:	460b      	mov	r3, r1
 800a82c:	71bb      	strb	r3, [r7, #6]
 800a82e:	4613      	mov	r3, r2
 800a830:	717b      	strb	r3, [r7, #5]
    g_row = row + 1;
 800a832:	797b      	ldrb	r3, [r7, #5]
 800a834:	3301      	adds	r3, #1
 800a836:	b2da      	uxtb	r2, r3
 800a838:	4bdc      	ldr	r3, [pc, #880]	; (800abac <lcd_put_char+0x38c>)
 800a83a:	701a      	strb	r2, [r3, #0]
     * Aunque esto mejora mucho la eficiencia, no tengo que escribir por SPI
     * este caracter, considero muy riesgosa esta tecnica, la sincronización
     * entre el buffer y el contenido de la memoria del pcf8553 se debe
     * asegurar. El uso del return prematuro no se si es buena práctica.
     */
    if (g_buf[row][col] == c)
 800a83c:	797a      	ldrb	r2, [r7, #5]
 800a83e:	79bb      	ldrb	r3, [r7, #6]
 800a840:	49db      	ldr	r1, [pc, #876]	; (800abb0 <lcd_put_char+0x390>)
 800a842:	00d2      	lsls	r2, r2, #3
 800a844:	440a      	add	r2, r1
 800a846:	4413      	add	r3, r2
 800a848:	781b      	ldrb	r3, [r3, #0]
 800a84a:	79fa      	ldrb	r2, [r7, #7]
 800a84c:	429a      	cmp	r2, r3
 800a84e:	f000 81d4 	beq.w	800abfa <lcd_put_char+0x3da>
    {
        return;
    }

    g_buf[row][col] = c;
 800a852:	797a      	ldrb	r2, [r7, #5]
 800a854:	79bb      	ldrb	r3, [r7, #6]
 800a856:	49d6      	ldr	r1, [pc, #856]	; (800abb0 <lcd_put_char+0x390>)
 800a858:	00d2      	lsls	r2, r2, #3
 800a85a:	440a      	add	r2, r1
 800a85c:	4413      	add	r3, r2
 800a85e:	79fa      	ldrb	r2, [r7, #7]
 800a860:	701a      	strb	r2, [r3, #0]

    switch (row)
 800a862:	797b      	ldrb	r3, [r7, #5]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d002      	beq.n	800a86e <lcd_put_char+0x4e>
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d008      	beq.n	800a87e <lcd_put_char+0x5e>
                return;
            }

        break;
        default:
            return;
 800a86c:	e1cc      	b.n	800ac08 <lcd_put_char+0x3e8>
            if (col < LINE_0_DIGITS - 1)
 800a86e:	79bb      	ldrb	r3, [r7, #6]
 800a870:	2b07      	cmp	r3, #7
 800a872:	f200 81c4 	bhi.w	800abfe <lcd_put_char+0x3de>
                g_col = col;
 800a876:	4acf      	ldr	r2, [pc, #828]	; (800abb4 <lcd_put_char+0x394>)
 800a878:	79bb      	ldrb	r3, [r7, #6]
 800a87a:	7013      	strb	r3, [r2, #0]
        break;
 800a87c:	e00a      	b.n	800a894 <lcd_put_char+0x74>
            if (col < LINE_1_DIGITS - 1)
 800a87e:	79bb      	ldrb	r3, [r7, #6]
 800a880:	2b06      	cmp	r3, #6
 800a882:	f200 81be 	bhi.w	800ac02 <lcd_put_char+0x3e2>
                g_col = 6 - col; // @suppress("Avoid magic numbers")
 800a886:	79bb      	ldrb	r3, [r7, #6]
 800a888:	f1c3 0306 	rsb	r3, r3, #6
 800a88c:	b2da      	uxtb	r2, r3
 800a88e:	4bc9      	ldr	r3, [pc, #804]	; (800abb4 <lcd_put_char+0x394>)
 800a890:	701a      	strb	r2, [r3, #0]
        break;
 800a892:	bf00      	nop
        break;
    }

    switch (c)
 800a894:	79fb      	ldrb	r3, [r7, #7]
 800a896:	3b20      	subs	r3, #32
 800a898:	2b19      	cmp	r3, #25
 800a89a:	f200 81b4 	bhi.w	800ac06 <lcd_put_char+0x3e6>
 800a89e:	a201      	add	r2, pc, #4	; (adr r2, 800a8a4 <lcd_put_char+0x84>)
 800a8a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8a4:	0800a90d 	.word	0x0800a90d
 800a8a8:	0800ac07 	.word	0x0800ac07
 800a8ac:	0800ac07 	.word	0x0800ac07
 800a8b0:	0800ac07 	.word	0x0800ac07
 800a8b4:	0800ac07 	.word	0x0800ac07
 800a8b8:	0800ac07 	.word	0x0800ac07
 800a8bc:	0800ac07 	.word	0x0800ac07
 800a8c0:	0800ac07 	.word	0x0800ac07
 800a8c4:	0800ac07 	.word	0x0800ac07
 800a8c8:	0800ac07 	.word	0x0800ac07
 800a8cc:	0800ac07 	.word	0x0800ac07
 800a8d0:	0800ac07 	.word	0x0800ac07
 800a8d4:	0800ac07 	.word	0x0800ac07
 800a8d8:	0800ac07 	.word	0x0800ac07
 800a8dc:	0800a94f 	.word	0x0800a94f
 800a8e0:	0800ac07 	.word	0x0800ac07
 800a8e4:	0800a959 	.word	0x0800a959
 800a8e8:	0800a99b 	.word	0x0800a99b
 800a8ec:	0800a9dd 	.word	0x0800a9dd
 800a8f0:	0800aa1f 	.word	0x0800aa1f
 800a8f4:	0800aa61 	.word	0x0800aa61
 800a8f8:	0800aaa3 	.word	0x0800aaa3
 800a8fc:	0800aae5 	.word	0x0800aae5
 800a900:	0800ab27 	.word	0x0800ab27
 800a904:	0800ab69 	.word	0x0800ab69
 800a908:	0800abb9 	.word	0x0800abb9
    {
        case ' ':
            lcd_write_line(SEG_A, 0);
 800a90c:	2100      	movs	r1, #0
 800a90e:	2000      	movs	r0, #0
 800a910:	f000 fea8 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 800a914:	2100      	movs	r1, #0
 800a916:	2001      	movs	r0, #1
 800a918:	f000 fea4 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_C, 0);
 800a91c:	2100      	movs	r1, #0
 800a91e:	2002      	movs	r0, #2
 800a920:	f000 fea0 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 800a924:	2100      	movs	r1, #0
 800a926:	2003      	movs	r0, #3
 800a928:	f000 fe9c 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 800a92c:	2100      	movs	r1, #0
 800a92e:	2004      	movs	r0, #4
 800a930:	f000 fe98 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_F, 0);
 800a934:	2100      	movs	r1, #0
 800a936:	2005      	movs	r0, #5
 800a938:	f000 fe94 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_G, 0);
 800a93c:	2100      	movs	r1, #0
 800a93e:	2006      	movs	r0, #6
 800a940:	f000 fe90 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 800a944:	2100      	movs	r1, #0
 800a946:	2007      	movs	r0, #7
 800a948:	f000 fe8c 	bl	800b664 <lcd_write_line>
        break;
 800a94c:	e15c      	b.n	800ac08 <lcd_put_char+0x3e8>
        case '.':
            lcd_write_line(SEG_H, 1);
 800a94e:	2101      	movs	r1, #1
 800a950:	2007      	movs	r0, #7
 800a952:	f000 fe87 	bl	800b664 <lcd_write_line>
        break;
 800a956:	e157      	b.n	800ac08 <lcd_put_char+0x3e8>
        case '0':
            lcd_write_line(SEG_A, 1);
 800a958:	2101      	movs	r1, #1
 800a95a:	2000      	movs	r0, #0
 800a95c:	f000 fe82 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 800a960:	2101      	movs	r1, #1
 800a962:	2001      	movs	r0, #1
 800a964:	f000 fe7e 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 800a968:	2101      	movs	r1, #1
 800a96a:	2002      	movs	r0, #2
 800a96c:	f000 fe7a 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 800a970:	2100      	movs	r1, #0
 800a972:	2003      	movs	r0, #3
 800a974:	f000 fe76 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 800a978:	2101      	movs	r1, #1
 800a97a:	2004      	movs	r0, #4
 800a97c:	f000 fe72 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 800a980:	2101      	movs	r1, #1
 800a982:	2005      	movs	r0, #5
 800a984:	f000 fe6e 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 800a988:	2101      	movs	r1, #1
 800a98a:	2006      	movs	r0, #6
 800a98c:	f000 fe6a 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 800a990:	2100      	movs	r1, #0
 800a992:	2007      	movs	r0, #7
 800a994:	f000 fe66 	bl	800b664 <lcd_write_line>
        break;
 800a998:	e136      	b.n	800ac08 <lcd_put_char+0x3e8>
        case '1':
            lcd_write_line(SEG_A, 0);
 800a99a:	2100      	movs	r1, #0
 800a99c:	2000      	movs	r0, #0
 800a99e:	f000 fe61 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 800a9a2:	2100      	movs	r1, #0
 800a9a4:	2001      	movs	r0, #1
 800a9a6:	f000 fe5d 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 800a9aa:	2101      	movs	r1, #1
 800a9ac:	2002      	movs	r0, #2
 800a9ae:	f000 fe59 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 800a9b2:	2100      	movs	r1, #0
 800a9b4:	2003      	movs	r0, #3
 800a9b6:	f000 fe55 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 800a9ba:	2100      	movs	r1, #0
 800a9bc:	2004      	movs	r0, #4
 800a9be:	f000 fe51 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 800a9c2:	2101      	movs	r1, #1
 800a9c4:	2005      	movs	r0, #5
 800a9c6:	f000 fe4d 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_G, 0);
 800a9ca:	2100      	movs	r1, #0
 800a9cc:	2006      	movs	r0, #6
 800a9ce:	f000 fe49 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 800a9d2:	2100      	movs	r1, #0
 800a9d4:	2007      	movs	r0, #7
 800a9d6:	f000 fe45 	bl	800b664 <lcd_write_line>
        break;
 800a9da:	e115      	b.n	800ac08 <lcd_put_char+0x3e8>
        case '2':
            lcd_write_line(SEG_A, 1);
 800a9dc:	2101      	movs	r1, #1
 800a9de:	2000      	movs	r0, #0
 800a9e0:	f000 fe40 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 800a9e4:	2101      	movs	r1, #1
 800a9e6:	2001      	movs	r0, #1
 800a9e8:	f000 fe3c 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_C, 0);
 800a9ec:	2100      	movs	r1, #0
 800a9ee:	2002      	movs	r0, #2
 800a9f0:	f000 fe38 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 800a9f4:	2101      	movs	r1, #1
 800a9f6:	2003      	movs	r0, #3
 800a9f8:	f000 fe34 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 800a9fc:	2100      	movs	r1, #0
 800a9fe:	2004      	movs	r0, #4
 800aa00:	f000 fe30 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 800aa04:	2101      	movs	r1, #1
 800aa06:	2005      	movs	r0, #5
 800aa08:	f000 fe2c 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 800aa0c:	2101      	movs	r1, #1
 800aa0e:	2006      	movs	r0, #6
 800aa10:	f000 fe28 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 800aa14:	2100      	movs	r1, #0
 800aa16:	2007      	movs	r0, #7
 800aa18:	f000 fe24 	bl	800b664 <lcd_write_line>
        break;
 800aa1c:	e0f4      	b.n	800ac08 <lcd_put_char+0x3e8>
        case '3':
            lcd_write_line(SEG_A, 1);
 800aa1e:	2101      	movs	r1, #1
 800aa20:	2000      	movs	r0, #0
 800aa22:	f000 fe1f 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 800aa26:	2100      	movs	r1, #0
 800aa28:	2001      	movs	r0, #1
 800aa2a:	f000 fe1b 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 800aa2e:	2101      	movs	r1, #1
 800aa30:	2002      	movs	r0, #2
 800aa32:	f000 fe17 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 800aa36:	2101      	movs	r1, #1
 800aa38:	2003      	movs	r0, #3
 800aa3a:	f000 fe13 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 800aa3e:	2100      	movs	r1, #0
 800aa40:	2004      	movs	r0, #4
 800aa42:	f000 fe0f 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 800aa46:	2101      	movs	r1, #1
 800aa48:	2005      	movs	r0, #5
 800aa4a:	f000 fe0b 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 800aa4e:	2101      	movs	r1, #1
 800aa50:	2006      	movs	r0, #6
 800aa52:	f000 fe07 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 800aa56:	2100      	movs	r1, #0
 800aa58:	2007      	movs	r0, #7
 800aa5a:	f000 fe03 	bl	800b664 <lcd_write_line>
        break;
 800aa5e:	e0d3      	b.n	800ac08 <lcd_put_char+0x3e8>
        case '4':
            lcd_write_line(SEG_A, 0);
 800aa60:	2100      	movs	r1, #0
 800aa62:	2000      	movs	r0, #0
 800aa64:	f000 fdfe 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 800aa68:	2100      	movs	r1, #0
 800aa6a:	2001      	movs	r0, #1
 800aa6c:	f000 fdfa 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 800aa70:	2101      	movs	r1, #1
 800aa72:	2002      	movs	r0, #2
 800aa74:	f000 fdf6 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 800aa78:	2101      	movs	r1, #1
 800aa7a:	2003      	movs	r0, #3
 800aa7c:	f000 fdf2 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 800aa80:	2101      	movs	r1, #1
 800aa82:	2004      	movs	r0, #4
 800aa84:	f000 fdee 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 800aa88:	2101      	movs	r1, #1
 800aa8a:	2005      	movs	r0, #5
 800aa8c:	f000 fdea 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_G, 0);
 800aa90:	2100      	movs	r1, #0
 800aa92:	2006      	movs	r0, #6
 800aa94:	f000 fde6 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 800aa98:	2100      	movs	r1, #0
 800aa9a:	2007      	movs	r0, #7
 800aa9c:	f000 fde2 	bl	800b664 <lcd_write_line>
        break;
 800aaa0:	e0b2      	b.n	800ac08 <lcd_put_char+0x3e8>
        case '5':
            lcd_write_line(SEG_A, 1);
 800aaa2:	2101      	movs	r1, #1
 800aaa4:	2000      	movs	r0, #0
 800aaa6:	f000 fddd 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 800aaaa:	2100      	movs	r1, #0
 800aaac:	2001      	movs	r0, #1
 800aaae:	f000 fdd9 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 800aab2:	2101      	movs	r1, #1
 800aab4:	2002      	movs	r0, #2
 800aab6:	f000 fdd5 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 800aaba:	2101      	movs	r1, #1
 800aabc:	2003      	movs	r0, #3
 800aabe:	f000 fdd1 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 800aac2:	2101      	movs	r1, #1
 800aac4:	2004      	movs	r0, #4
 800aac6:	f000 fdcd 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_F, 0);
 800aaca:	2100      	movs	r1, #0
 800aacc:	2005      	movs	r0, #5
 800aace:	f000 fdc9 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 800aad2:	2101      	movs	r1, #1
 800aad4:	2006      	movs	r0, #6
 800aad6:	f000 fdc5 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 800aada:	2100      	movs	r1, #0
 800aadc:	2007      	movs	r0, #7
 800aade:	f000 fdc1 	bl	800b664 <lcd_write_line>
        break;
 800aae2:	e091      	b.n	800ac08 <lcd_put_char+0x3e8>
        case '6':
            lcd_write_line(SEG_A, 1);
 800aae4:	2101      	movs	r1, #1
 800aae6:	2000      	movs	r0, #0
 800aae8:	f000 fdbc 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 800aaec:	2101      	movs	r1, #1
 800aaee:	2001      	movs	r0, #1
 800aaf0:	f000 fdb8 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 800aaf4:	2101      	movs	r1, #1
 800aaf6:	2002      	movs	r0, #2
 800aaf8:	f000 fdb4 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 800aafc:	2101      	movs	r1, #1
 800aafe:	2003      	movs	r0, #3
 800ab00:	f000 fdb0 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 800ab04:	2101      	movs	r1, #1
 800ab06:	2004      	movs	r0, #4
 800ab08:	f000 fdac 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_F, 0);
 800ab0c:	2100      	movs	r1, #0
 800ab0e:	2005      	movs	r0, #5
 800ab10:	f000 fda8 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 800ab14:	2101      	movs	r1, #1
 800ab16:	2006      	movs	r0, #6
 800ab18:	f000 fda4 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 800ab1c:	2100      	movs	r1, #0
 800ab1e:	2007      	movs	r0, #7
 800ab20:	f000 fda0 	bl	800b664 <lcd_write_line>
        break;
 800ab24:	e070      	b.n	800ac08 <lcd_put_char+0x3e8>
        case '7':
            lcd_write_line(SEG_A, 0);
 800ab26:	2100      	movs	r1, #0
 800ab28:	2000      	movs	r0, #0
 800ab2a:	f000 fd9b 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 800ab2e:	2100      	movs	r1, #0
 800ab30:	2001      	movs	r0, #1
 800ab32:	f000 fd97 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 800ab36:	2101      	movs	r1, #1
 800ab38:	2002      	movs	r0, #2
 800ab3a:	f000 fd93 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 800ab3e:	2100      	movs	r1, #0
 800ab40:	2003      	movs	r0, #3
 800ab42:	f000 fd8f 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 800ab46:	2100      	movs	r1, #0
 800ab48:	2004      	movs	r0, #4
 800ab4a:	f000 fd8b 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 800ab4e:	2101      	movs	r1, #1
 800ab50:	2005      	movs	r0, #5
 800ab52:	f000 fd87 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 800ab56:	2101      	movs	r1, #1
 800ab58:	2006      	movs	r0, #6
 800ab5a:	f000 fd83 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 800ab5e:	2100      	movs	r1, #0
 800ab60:	2007      	movs	r0, #7
 800ab62:	f000 fd7f 	bl	800b664 <lcd_write_line>
        break;
 800ab66:	e04f      	b.n	800ac08 <lcd_put_char+0x3e8>
        case '8':
            lcd_write_line(SEG_A, 1);
 800ab68:	2101      	movs	r1, #1
 800ab6a:	2000      	movs	r0, #0
 800ab6c:	f000 fd7a 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 800ab70:	2101      	movs	r1, #1
 800ab72:	2001      	movs	r0, #1
 800ab74:	f000 fd76 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 800ab78:	2101      	movs	r1, #1
 800ab7a:	2002      	movs	r0, #2
 800ab7c:	f000 fd72 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 800ab80:	2101      	movs	r1, #1
 800ab82:	2003      	movs	r0, #3
 800ab84:	f000 fd6e 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 800ab88:	2101      	movs	r1, #1
 800ab8a:	2004      	movs	r0, #4
 800ab8c:	f000 fd6a 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 800ab90:	2101      	movs	r1, #1
 800ab92:	2005      	movs	r0, #5
 800ab94:	f000 fd66 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 800ab98:	2101      	movs	r1, #1
 800ab9a:	2006      	movs	r0, #6
 800ab9c:	f000 fd62 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 800aba0:	2100      	movs	r1, #0
 800aba2:	2007      	movs	r0, #7
 800aba4:	f000 fd5e 	bl	800b664 <lcd_write_line>
        break;
 800aba8:	e02e      	b.n	800ac08 <lcd_put_char+0x3e8>
 800abaa:	bf00      	nop
 800abac:	200038bd 	.word	0x200038bd
 800abb0:	200038ac 	.word	0x200038ac
 800abb4:	200038bc 	.word	0x200038bc
        case '9':
            lcd_write_line(SEG_A, 0);
 800abb8:	2100      	movs	r1, #0
 800abba:	2000      	movs	r0, #0
 800abbc:	f000 fd52 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 800abc0:	2100      	movs	r1, #0
 800abc2:	2001      	movs	r0, #1
 800abc4:	f000 fd4e 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 800abc8:	2101      	movs	r1, #1
 800abca:	2002      	movs	r0, #2
 800abcc:	f000 fd4a 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 800abd0:	2101      	movs	r1, #1
 800abd2:	2003      	movs	r0, #3
 800abd4:	f000 fd46 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 800abd8:	2101      	movs	r1, #1
 800abda:	2004      	movs	r0, #4
 800abdc:	f000 fd42 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 800abe0:	2101      	movs	r1, #1
 800abe2:	2005      	movs	r0, #5
 800abe4:	f000 fd3e 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 800abe8:	2101      	movs	r1, #1
 800abea:	2006      	movs	r0, #6
 800abec:	f000 fd3a 	bl	800b664 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 800abf0:	2100      	movs	r1, #0
 800abf2:	2007      	movs	r0, #7
 800abf4:	f000 fd36 	bl	800b664 <lcd_write_line>
        break;
 800abf8:	e006      	b.n	800ac08 <lcd_put_char+0x3e8>
        return;
 800abfa:	bf00      	nop
 800abfc:	e004      	b.n	800ac08 <lcd_put_char+0x3e8>
                return;
 800abfe:	bf00      	nop
 800ac00:	e002      	b.n	800ac08 <lcd_put_char+0x3e8>
                return;
 800ac02:	bf00      	nop
 800ac04:	e000      	b.n	800ac08 <lcd_put_char+0x3e8>
        default:
        break;
 800ac06:	bf00      	nop
    }
}
 800ac08:	3708      	adds	r7, #8
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop

0800ac10 <lcd_refresh>:
 * enviar en dicho buffer y luego escribir todo junto.
 * @param Enumeraciones rows_t y point_t de lcd.h
 * @retval None
 */
void lcd_refresh()
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	af00      	add	r7, sp, #0
    pcf8553_dump();
 800ac14:	f000 fe4a 	bl	800b8ac <pcf8553_dump>
}
 800ac18:	bf00      	nop
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <lcd_set_point>:
 * @brief Función que escribe un punto en específico en la pantalla.
 * @param Enumeraciones rows_t y point_t de lcd.h
 * @retval None
 */
void lcd_set_point(rows_t line, point_t point)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b083      	sub	sp, #12
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	4603      	mov	r3, r0
 800ac24:	460a      	mov	r2, r1
 800ac26:	71fb      	strb	r3, [r7, #7]
 800ac28:	4613      	mov	r3, r2
 800ac2a:	71bb      	strb	r3, [r7, #6]
    if (line == HIGH_ROW)
 800ac2c:	79fb      	ldrb	r3, [r7, #7]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d14c      	bne.n	800accc <lcd_set_point+0xb0>
    {
        switch (point)
 800ac32:	79bb      	ldrb	r3, [r7, #6]
 800ac34:	2b06      	cmp	r3, #6
 800ac36:	f200 808f 	bhi.w	800ad58 <lcd_set_point+0x13c>
 800ac3a:	a201      	add	r2, pc, #4	; (adr r2, 800ac40 <lcd_set_point+0x24>)
 800ac3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac40:	0800ac5d 	.word	0x0800ac5d
 800ac44:	0800ac6d 	.word	0x0800ac6d
 800ac48:	0800ac7d 	.word	0x0800ac7d
 800ac4c:	0800ac8d 	.word	0x0800ac8d
 800ac50:	0800ac9d 	.word	0x0800ac9d
 800ac54:	0800acad 	.word	0x0800acad
 800ac58:	0800acbd 	.word	0x0800acbd
        {
            case PNT_0:
                g_lcd_map[REG_7] |= (1 << BIT_7);
 800ac5c:	4b44      	ldr	r3, [pc, #272]	; (800ad70 <lcd_set_point+0x154>)
 800ac5e:	79db      	ldrb	r3, [r3, #7]
 800ac60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ac64:	b2da      	uxtb	r2, r3
 800ac66:	4b42      	ldr	r3, [pc, #264]	; (800ad70 <lcd_set_point+0x154>)
 800ac68:	71da      	strb	r2, [r3, #7]
            break;
 800ac6a:	e07a      	b.n	800ad62 <lcd_set_point+0x146>
            case PNT_1:
                g_lcd_map[REG_8] |= (1 << BIT_1);
 800ac6c:	4b40      	ldr	r3, [pc, #256]	; (800ad70 <lcd_set_point+0x154>)
 800ac6e:	7a1b      	ldrb	r3, [r3, #8]
 800ac70:	f043 0302 	orr.w	r3, r3, #2
 800ac74:	b2da      	uxtb	r2, r3
 800ac76:	4b3e      	ldr	r3, [pc, #248]	; (800ad70 <lcd_set_point+0x154>)
 800ac78:	721a      	strb	r2, [r3, #8]
            break;
 800ac7a:	e072      	b.n	800ad62 <lcd_set_point+0x146>
            case PNT_2:
                g_lcd_map[REG_8] |= (1 << BIT_3);
 800ac7c:	4b3c      	ldr	r3, [pc, #240]	; (800ad70 <lcd_set_point+0x154>)
 800ac7e:	7a1b      	ldrb	r3, [r3, #8]
 800ac80:	f043 0308 	orr.w	r3, r3, #8
 800ac84:	b2da      	uxtb	r2, r3
 800ac86:	4b3a      	ldr	r3, [pc, #232]	; (800ad70 <lcd_set_point+0x154>)
 800ac88:	721a      	strb	r2, [r3, #8]
            break;
 800ac8a:	e06a      	b.n	800ad62 <lcd_set_point+0x146>
            case PNT_3:
                g_lcd_map[REG_8] |= (1 << BIT_5);
 800ac8c:	4b38      	ldr	r3, [pc, #224]	; (800ad70 <lcd_set_point+0x154>)
 800ac8e:	7a1b      	ldrb	r3, [r3, #8]
 800ac90:	f043 0320 	orr.w	r3, r3, #32
 800ac94:	b2da      	uxtb	r2, r3
 800ac96:	4b36      	ldr	r3, [pc, #216]	; (800ad70 <lcd_set_point+0x154>)
 800ac98:	721a      	strb	r2, [r3, #8]
            break;
 800ac9a:	e062      	b.n	800ad62 <lcd_set_point+0x146>
            case PNT_4:
                g_lcd_map[REG_8] |= (1 << BIT_7);
 800ac9c:	4b34      	ldr	r3, [pc, #208]	; (800ad70 <lcd_set_point+0x154>)
 800ac9e:	7a1b      	ldrb	r3, [r3, #8]
 800aca0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aca4:	b2da      	uxtb	r2, r3
 800aca6:	4b32      	ldr	r3, [pc, #200]	; (800ad70 <lcd_set_point+0x154>)
 800aca8:	721a      	strb	r2, [r3, #8]
            break;
 800acaa:	e05a      	b.n	800ad62 <lcd_set_point+0x146>
            case PNT_5:
                g_lcd_map[REG_9] |= (1 << BIT_1);
 800acac:	4b30      	ldr	r3, [pc, #192]	; (800ad70 <lcd_set_point+0x154>)
 800acae:	7a5b      	ldrb	r3, [r3, #9]
 800acb0:	f043 0302 	orr.w	r3, r3, #2
 800acb4:	b2da      	uxtb	r2, r3
 800acb6:	4b2e      	ldr	r3, [pc, #184]	; (800ad70 <lcd_set_point+0x154>)
 800acb8:	725a      	strb	r2, [r3, #9]
            break;
 800acba:	e052      	b.n	800ad62 <lcd_set_point+0x146>
            case PNT_6:
                g_lcd_map[REG_9] |= (1 << BIT_3);
 800acbc:	4b2c      	ldr	r3, [pc, #176]	; (800ad70 <lcd_set_point+0x154>)
 800acbe:	7a5b      	ldrb	r3, [r3, #9]
 800acc0:	f043 0308 	orr.w	r3, r3, #8
 800acc4:	b2da      	uxtb	r2, r3
 800acc6:	4b2a      	ldr	r3, [pc, #168]	; (800ad70 <lcd_set_point+0x154>)
 800acc8:	725a      	strb	r2, [r3, #9]
            break;
 800acca:	e04a      	b.n	800ad62 <lcd_set_point+0x146>
            default:
            break;
        }
    }
    else if (line == LOW_ROW)
 800accc:	79fb      	ldrb	r3, [r7, #7]
 800acce:	2b01      	cmp	r3, #1
 800acd0:	d144      	bne.n	800ad5c <lcd_set_point+0x140>
    {
        switch (point)
 800acd2:	79bb      	ldrb	r3, [r7, #6]
 800acd4:	2b05      	cmp	r3, #5
 800acd6:	d843      	bhi.n	800ad60 <lcd_set_point+0x144>
 800acd8:	a201      	add	r2, pc, #4	; (adr r2, 800ace0 <lcd_set_point+0xc4>)
 800acda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acde:	bf00      	nop
 800ace0:	0800acf9 	.word	0x0800acf9
 800ace4:	0800ad09 	.word	0x0800ad09
 800ace8:	0800ad19 	.word	0x0800ad19
 800acec:	0800ad29 	.word	0x0800ad29
 800acf0:	0800ad39 	.word	0x0800ad39
 800acf4:	0800ad49 	.word	0x0800ad49
        {
            case PNT_0:
                g_lcd_map[REG_7] |= (1 << BIT_2);
 800acf8:	4b1d      	ldr	r3, [pc, #116]	; (800ad70 <lcd_set_point+0x154>)
 800acfa:	79db      	ldrb	r3, [r3, #7]
 800acfc:	f043 0304 	orr.w	r3, r3, #4
 800ad00:	b2da      	uxtb	r2, r3
 800ad02:	4b1b      	ldr	r3, [pc, #108]	; (800ad70 <lcd_set_point+0x154>)
 800ad04:	71da      	strb	r2, [r3, #7]
            break;
 800ad06:	e02c      	b.n	800ad62 <lcd_set_point+0x146>
            case PNT_1:
                g_lcd_map[REG_7] |= (1 << BIT_0);
 800ad08:	4b19      	ldr	r3, [pc, #100]	; (800ad70 <lcd_set_point+0x154>)
 800ad0a:	79db      	ldrb	r3, [r3, #7]
 800ad0c:	f043 0301 	orr.w	r3, r3, #1
 800ad10:	b2da      	uxtb	r2, r3
 800ad12:	4b17      	ldr	r3, [pc, #92]	; (800ad70 <lcd_set_point+0x154>)
 800ad14:	71da      	strb	r2, [r3, #7]
            break;
 800ad16:	e024      	b.n	800ad62 <lcd_set_point+0x146>
            case PNT_2:
                g_lcd_map[REG_6] |= (1 << BIT_6);
 800ad18:	4b15      	ldr	r3, [pc, #84]	; (800ad70 <lcd_set_point+0x154>)
 800ad1a:	799b      	ldrb	r3, [r3, #6]
 800ad1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad20:	b2da      	uxtb	r2, r3
 800ad22:	4b13      	ldr	r3, [pc, #76]	; (800ad70 <lcd_set_point+0x154>)
 800ad24:	719a      	strb	r2, [r3, #6]
            break;
 800ad26:	e01c      	b.n	800ad62 <lcd_set_point+0x146>
            case PNT_3:
                g_lcd_map[REG_6] |= (1 << BIT_4);
 800ad28:	4b11      	ldr	r3, [pc, #68]	; (800ad70 <lcd_set_point+0x154>)
 800ad2a:	799b      	ldrb	r3, [r3, #6]
 800ad2c:	f043 0310 	orr.w	r3, r3, #16
 800ad30:	b2da      	uxtb	r2, r3
 800ad32:	4b0f      	ldr	r3, [pc, #60]	; (800ad70 <lcd_set_point+0x154>)
 800ad34:	719a      	strb	r2, [r3, #6]
            break;
 800ad36:	e014      	b.n	800ad62 <lcd_set_point+0x146>
            case PNT_4:
                g_lcd_map[REG_6] |= (1 << BIT_2);
 800ad38:	4b0d      	ldr	r3, [pc, #52]	; (800ad70 <lcd_set_point+0x154>)
 800ad3a:	799b      	ldrb	r3, [r3, #6]
 800ad3c:	f043 0304 	orr.w	r3, r3, #4
 800ad40:	b2da      	uxtb	r2, r3
 800ad42:	4b0b      	ldr	r3, [pc, #44]	; (800ad70 <lcd_set_point+0x154>)
 800ad44:	719a      	strb	r2, [r3, #6]
            break;
 800ad46:	e00c      	b.n	800ad62 <lcd_set_point+0x146>
            case PNT_5:
                g_lcd_map[REG_6] |= (1 << BIT_0);
 800ad48:	4b09      	ldr	r3, [pc, #36]	; (800ad70 <lcd_set_point+0x154>)
 800ad4a:	799b      	ldrb	r3, [r3, #6]
 800ad4c:	f043 0301 	orr.w	r3, r3, #1
 800ad50:	b2da      	uxtb	r2, r3
 800ad52:	4b07      	ldr	r3, [pc, #28]	; (800ad70 <lcd_set_point+0x154>)
 800ad54:	719a      	strb	r2, [r3, #6]
            break;
 800ad56:	e004      	b.n	800ad62 <lcd_set_point+0x146>
            break;
 800ad58:	bf00      	nop
 800ad5a:	e002      	b.n	800ad62 <lcd_set_point+0x146>
            default:
            break;
        }
    }
 800ad5c:	bf00      	nop
 800ad5e:	e000      	b.n	800ad62 <lcd_set_point+0x146>
            break;
 800ad60:	bf00      	nop
}
 800ad62:	bf00      	nop
 800ad64:	370c      	adds	r7, #12
 800ad66:	46bd      	mov	sp, r7
 800ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6c:	4770      	bx	lr
 800ad6e:	bf00      	nop
 800ad70:	20003924 	.word	0x20003924

0800ad74 <lcd_set_symbol>:
 * @brief Función que escribe un símbolo en específico en la pantalla.
 * @param Enumeraciones symbols_t y blink_t de lcd.h
 * @retval None
 */
void lcd_set_symbol(symbols_t symbol, blink_t blink_speed)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	460a      	mov	r2, r1
 800ad7e:	71fb      	strb	r3, [r7, #7]
 800ad80:	4613      	mov	r3, r2
 800ad82:	71bb      	strb	r3, [r7, #6]
    switch (symbol)
 800ad84:	79fb      	ldrb	r3, [r7, #7]
 800ad86:	2b0e      	cmp	r3, #14
 800ad88:	f200 8225 	bhi.w	800b1d6 <lcd_set_symbol+0x462>
 800ad8c:	a201      	add	r2, pc, #4	; (adr r2, 800ad94 <lcd_set_symbol+0x20>)
 800ad8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad92:	bf00      	nop
 800ad94:	0800ade1 	.word	0x0800ade1
 800ad98:	0800add1 	.word	0x0800add1
 800ad9c:	0800ae01 	.word	0x0800ae01
 800ada0:	0800ae11 	.word	0x0800ae11
 800ada4:	0800adf1 	.word	0x0800adf1
 800ada8:	0800ae41 	.word	0x0800ae41
 800adac:	0800ae31 	.word	0x0800ae31
 800adb0:	0800ae51 	.word	0x0800ae51
 800adb4:	0800ae21 	.word	0x0800ae21
 800adb8:	0800ae61 	.word	0x0800ae61
 800adbc:	0800aeef 	.word	0x0800aeef
 800adc0:	0800b01d 	.word	0x0800b01d
 800adc4:	0800b0ab 	.word	0x0800b0ab
 800adc8:	0800b10f 	.word	0x0800b10f
 800adcc:	0800b173 	.word	0x0800b173
    {
        case POWER:
            g_lcd_map[REG_2] |= (1 << BIT_5);
 800add0:	4b91      	ldr	r3, [pc, #580]	; (800b018 <lcd_set_symbol+0x2a4>)
 800add2:	789b      	ldrb	r3, [r3, #2]
 800add4:	f043 0320 	orr.w	r3, r3, #32
 800add8:	b2da      	uxtb	r2, r3
 800adda:	4b8f      	ldr	r3, [pc, #572]	; (800b018 <lcd_set_symbol+0x2a4>)
 800addc:	709a      	strb	r2, [r3, #2]
        break;
 800adde:	e1fb      	b.n	800b1d8 <lcd_set_symbol+0x464>
        case BATTERY:
            g_lcd_map[REG_7] |= (1 << BIT_5);
 800ade0:	4b8d      	ldr	r3, [pc, #564]	; (800b018 <lcd_set_symbol+0x2a4>)
 800ade2:	79db      	ldrb	r3, [r3, #7]
 800ade4:	f043 0320 	orr.w	r3, r3, #32
 800ade8:	b2da      	uxtb	r2, r3
 800adea:	4b8b      	ldr	r3, [pc, #556]	; (800b018 <lcd_set_symbol+0x2a4>)
 800adec:	71da      	strb	r2, [r3, #7]
        break;
 800adee:	e1f3      	b.n	800b1d8 <lcd_set_symbol+0x464>
        case BATCH:
            g_lcd_map[REG_12] |= (1 << BIT_5);
 800adf0:	4b89      	ldr	r3, [pc, #548]	; (800b018 <lcd_set_symbol+0x2a4>)
 800adf2:	7b1b      	ldrb	r3, [r3, #12]
 800adf4:	f043 0320 	orr.w	r3, r3, #32
 800adf8:	b2da      	uxtb	r2, r3
 800adfa:	4b87      	ldr	r3, [pc, #540]	; (800b018 <lcd_set_symbol+0x2a4>)
 800adfc:	731a      	strb	r2, [r3, #12]
        break;
 800adfe:	e1eb      	b.n	800b1d8 <lcd_set_symbol+0x464>
        case RATE:
            g_lcd_map[REG_17] |= (1 << BIT_5);
 800ae00:	4b85      	ldr	r3, [pc, #532]	; (800b018 <lcd_set_symbol+0x2a4>)
 800ae02:	7c5b      	ldrb	r3, [r3, #17]
 800ae04:	f043 0320 	orr.w	r3, r3, #32
 800ae08:	b2da      	uxtb	r2, r3
 800ae0a:	4b83      	ldr	r3, [pc, #524]	; (800b018 <lcd_set_symbol+0x2a4>)
 800ae0c:	745a      	strb	r2, [r3, #17]
        break;
 800ae0e:	e1e3      	b.n	800b1d8 <lcd_set_symbol+0x464>
        case E:
            g_lcd_map[REG_2] |= (1 << BIT_4);
 800ae10:	4b81      	ldr	r3, [pc, #516]	; (800b018 <lcd_set_symbol+0x2a4>)
 800ae12:	789b      	ldrb	r3, [r3, #2]
 800ae14:	f043 0310 	orr.w	r3, r3, #16
 800ae18:	b2da      	uxtb	r2, r3
 800ae1a:	4b7f      	ldr	r3, [pc, #508]	; (800b018 <lcd_set_symbol+0x2a4>)
 800ae1c:	709a      	strb	r2, [r3, #2]
        break;
 800ae1e:	e1db      	b.n	800b1d8 <lcd_set_symbol+0x464>
        case POINT:
            g_lcd_map[REG_7] |= (1 << BIT_4);
 800ae20:	4b7d      	ldr	r3, [pc, #500]	; (800b018 <lcd_set_symbol+0x2a4>)
 800ae22:	79db      	ldrb	r3, [r3, #7]
 800ae24:	f043 0310 	orr.w	r3, r3, #16
 800ae28:	b2da      	uxtb	r2, r3
 800ae2a:	4b7b      	ldr	r3, [pc, #492]	; (800b018 <lcd_set_symbol+0x2a4>)
 800ae2c:	71da      	strb	r2, [r3, #7]
        break;
 800ae2e:	e1d3      	b.n	800b1d8 <lcd_set_symbol+0x464>
        case ACM:
            g_lcd_map[REG_12] |= (1 << BIT_4);
 800ae30:	4b79      	ldr	r3, [pc, #484]	; (800b018 <lcd_set_symbol+0x2a4>)
 800ae32:	7b1b      	ldrb	r3, [r3, #12]
 800ae34:	f043 0310 	orr.w	r3, r3, #16
 800ae38:	b2da      	uxtb	r2, r3
 800ae3a:	4b77      	ldr	r3, [pc, #476]	; (800b018 <lcd_set_symbol+0x2a4>)
 800ae3c:	731a      	strb	r2, [r3, #12]
        break;
 800ae3e:	e1cb      	b.n	800b1d8 <lcd_set_symbol+0x464>
        case TTL:
            g_lcd_map[REG_17] |= (1 << BIT_4);
 800ae40:	4b75      	ldr	r3, [pc, #468]	; (800b018 <lcd_set_symbol+0x2a4>)
 800ae42:	7c5b      	ldrb	r3, [r3, #17]
 800ae44:	f043 0310 	orr.w	r3, r3, #16
 800ae48:	b2da      	uxtb	r2, r3
 800ae4a:	4b73      	ldr	r3, [pc, #460]	; (800b018 <lcd_set_symbol+0x2a4>)
 800ae4c:	745a      	strb	r2, [r3, #17]
        break;
 800ae4e:	e1c3      	b.n	800b1d8 <lcd_set_symbol+0x464>
        case BACKSLASH:
            g_lcd_map[REG_10] |= (1 << BIT_1);
 800ae50:	4b71      	ldr	r3, [pc, #452]	; (800b018 <lcd_set_symbol+0x2a4>)
 800ae52:	7a9b      	ldrb	r3, [r3, #10]
 800ae54:	f043 0302 	orr.w	r3, r3, #2
 800ae58:	b2da      	uxtb	r2, r3
 800ae5a:	4b6f      	ldr	r3, [pc, #444]	; (800b018 <lcd_set_symbol+0x2a4>)
 800ae5c:	729a      	strb	r2, [r3, #10]
        break;
 800ae5e:	e1bb      	b.n	800b1d8 <lcd_set_symbol+0x464>
        case VE:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 800ae60:	4b6d      	ldr	r3, [pc, #436]	; (800b018 <lcd_set_symbol+0x2a4>)
 800ae62:	7bdb      	ldrb	r3, [r3, #15]
 800ae64:	f043 0320 	orr.w	r3, r3, #32
 800ae68:	b2da      	uxtb	r2, r3
 800ae6a:	4b6b      	ldr	r3, [pc, #428]	; (800b018 <lcd_set_symbol+0x2a4>)
 800ae6c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 800ae6e:	4b6a      	ldr	r3, [pc, #424]	; (800b018 <lcd_set_symbol+0x2a4>)
 800ae70:	7bdb      	ldrb	r3, [r3, #15]
 800ae72:	f043 0310 	orr.w	r3, r3, #16
 800ae76:	b2da      	uxtb	r2, r3
 800ae78:	4b67      	ldr	r3, [pc, #412]	; (800b018 <lcd_set_symbol+0x2a4>)
 800ae7a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 800ae7c:	4b66      	ldr	r3, [pc, #408]	; (800b018 <lcd_set_symbol+0x2a4>)
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	f043 0320 	orr.w	r3, r3, #32
 800ae84:	b2da      	uxtb	r2, r3
 800ae86:	4b64      	ldr	r3, [pc, #400]	; (800b018 <lcd_set_symbol+0x2a4>)
 800ae88:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_2);
 800ae8a:	4b63      	ldr	r3, [pc, #396]	; (800b018 <lcd_set_symbol+0x2a4>)
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	f043 0304 	orr.w	r3, r3, #4
 800ae92:	b2da      	uxtb	r2, r3
 800ae94:	4b60      	ldr	r3, [pc, #384]	; (800b018 <lcd_set_symbol+0x2a4>)
 800ae96:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 800ae98:	4b5f      	ldr	r3, [pc, #380]	; (800b018 <lcd_set_symbol+0x2a4>)
 800ae9a:	7b9b      	ldrb	r3, [r3, #14]
 800ae9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aea0:	b2da      	uxtb	r2, r3
 800aea2:	4b5d      	ldr	r3, [pc, #372]	; (800b018 <lcd_set_symbol+0x2a4>)
 800aea4:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 800aea6:	4b5c      	ldr	r3, [pc, #368]	; (800b018 <lcd_set_symbol+0x2a4>)
 800aea8:	7bdb      	ldrb	r3, [r3, #15]
 800aeaa:	f043 0302 	orr.w	r3, r3, #2
 800aeae:	b2da      	uxtb	r2, r3
 800aeb0:	4b59      	ldr	r3, [pc, #356]	; (800b018 <lcd_set_symbol+0x2a4>)
 800aeb2:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 800aeb4:	4b58      	ldr	r3, [pc, #352]	; (800b018 <lcd_set_symbol+0x2a4>)
 800aeb6:	7cdb      	ldrb	r3, [r3, #19]
 800aeb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aebc:	b2da      	uxtb	r2, r3
 800aebe:	4b56      	ldr	r3, [pc, #344]	; (800b018 <lcd_set_symbol+0x2a4>)
 800aec0:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 800aec2:	4b55      	ldr	r3, [pc, #340]	; (800b018 <lcd_set_symbol+0x2a4>)
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	f043 0301 	orr.w	r3, r3, #1
 800aeca:	b2da      	uxtb	r2, r3
 800aecc:	4b52      	ldr	r3, [pc, #328]	; (800b018 <lcd_set_symbol+0x2a4>)
 800aece:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 800aed0:	4b51      	ldr	r3, [pc, #324]	; (800b018 <lcd_set_symbol+0x2a4>)
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	f043 0302 	orr.w	r3, r3, #2
 800aed8:	b2da      	uxtb	r2, r3
 800aeda:	4b4f      	ldr	r3, [pc, #316]	; (800b018 <lcd_set_symbol+0x2a4>)
 800aedc:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 800aede:	4b4e      	ldr	r3, [pc, #312]	; (800b018 <lcd_set_symbol+0x2a4>)
 800aee0:	795b      	ldrb	r3, [r3, #5]
 800aee2:	f043 0302 	orr.w	r3, r3, #2
 800aee6:	b2da      	uxtb	r2, r3
 800aee8:	4b4b      	ldr	r3, [pc, #300]	; (800b018 <lcd_set_symbol+0x2a4>)
 800aeea:	715a      	strb	r2, [r3, #5]
        break;
 800aeec:	e174      	b.n	800b1d8 <lcd_set_symbol+0x464>
        case PASS:
            g_lcd_map[REG_13] |= (1 << BIT_1);
 800aeee:	4b4a      	ldr	r3, [pc, #296]	; (800b018 <lcd_set_symbol+0x2a4>)
 800aef0:	7b5b      	ldrb	r3, [r3, #13]
 800aef2:	f043 0302 	orr.w	r3, r3, #2
 800aef6:	b2da      	uxtb	r2, r3
 800aef8:	4b47      	ldr	r3, [pc, #284]	; (800b018 <lcd_set_symbol+0x2a4>)
 800aefa:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_0);
 800aefc:	4b46      	ldr	r3, [pc, #280]	; (800b018 <lcd_set_symbol+0x2a4>)
 800aefe:	7b5b      	ldrb	r3, [r3, #13]
 800af00:	f043 0301 	orr.w	r3, r3, #1
 800af04:	b2da      	uxtb	r2, r3
 800af06:	4b44      	ldr	r3, [pc, #272]	; (800b018 <lcd_set_symbol+0x2a4>)
 800af08:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_1);
 800af0a:	4b43      	ldr	r3, [pc, #268]	; (800b018 <lcd_set_symbol+0x2a4>)
 800af0c:	7c9b      	ldrb	r3, [r3, #18]
 800af0e:	f043 0302 	orr.w	r3, r3, #2
 800af12:	b2da      	uxtb	r2, r3
 800af14:	4b40      	ldr	r3, [pc, #256]	; (800b018 <lcd_set_symbol+0x2a4>)
 800af16:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_18] |= (1 << BIT_0);
 800af18:	4b3f      	ldr	r3, [pc, #252]	; (800b018 <lcd_set_symbol+0x2a4>)
 800af1a:	7c9b      	ldrb	r3, [r3, #18]
 800af1c:	f043 0301 	orr.w	r3, r3, #1
 800af20:	b2da      	uxtb	r2, r3
 800af22:	4b3d      	ldr	r3, [pc, #244]	; (800b018 <lcd_set_symbol+0x2a4>)
 800af24:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_0);
 800af26:	4b3c      	ldr	r3, [pc, #240]	; (800b018 <lcd_set_symbol+0x2a4>)
 800af28:	78db      	ldrb	r3, [r3, #3]
 800af2a:	f043 0301 	orr.w	r3, r3, #1
 800af2e:	b2da      	uxtb	r2, r3
 800af30:	4b39      	ldr	r3, [pc, #228]	; (800b018 <lcd_set_symbol+0x2a4>)
 800af32:	70da      	strb	r2, [r3, #3]

            g_lcd_map[REG_13] |= (1 << BIT_3);
 800af34:	4b38      	ldr	r3, [pc, #224]	; (800b018 <lcd_set_symbol+0x2a4>)
 800af36:	7b5b      	ldrb	r3, [r3, #13]
 800af38:	f043 0308 	orr.w	r3, r3, #8
 800af3c:	b2da      	uxtb	r2, r3
 800af3e:	4b36      	ldr	r3, [pc, #216]	; (800b018 <lcd_set_symbol+0x2a4>)
 800af40:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_2);
 800af42:	4b35      	ldr	r3, [pc, #212]	; (800b018 <lcd_set_symbol+0x2a4>)
 800af44:	7b5b      	ldrb	r3, [r3, #13]
 800af46:	f043 0304 	orr.w	r3, r3, #4
 800af4a:	b2da      	uxtb	r2, r3
 800af4c:	4b32      	ldr	r3, [pc, #200]	; (800b018 <lcd_set_symbol+0x2a4>)
 800af4e:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_3);
 800af50:	4b31      	ldr	r3, [pc, #196]	; (800b018 <lcd_set_symbol+0x2a4>)
 800af52:	7c9b      	ldrb	r3, [r3, #18]
 800af54:	f043 0308 	orr.w	r3, r3, #8
 800af58:	b2da      	uxtb	r2, r3
 800af5a:	4b2f      	ldr	r3, [pc, #188]	; (800b018 <lcd_set_symbol+0x2a4>)
 800af5c:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_18] |= (1 << BIT_2);
 800af5e:	4b2e      	ldr	r3, [pc, #184]	; (800b018 <lcd_set_symbol+0x2a4>)
 800af60:	7c9b      	ldrb	r3, [r3, #18]
 800af62:	f043 0304 	orr.w	r3, r3, #4
 800af66:	b2da      	uxtb	r2, r3
 800af68:	4b2b      	ldr	r3, [pc, #172]	; (800b018 <lcd_set_symbol+0x2a4>)
 800af6a:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_2);
 800af6c:	4b2a      	ldr	r3, [pc, #168]	; (800b018 <lcd_set_symbol+0x2a4>)
 800af6e:	78db      	ldrb	r3, [r3, #3]
 800af70:	f043 0304 	orr.w	r3, r3, #4
 800af74:	b2da      	uxtb	r2, r3
 800af76:	4b28      	ldr	r3, [pc, #160]	; (800b018 <lcd_set_symbol+0x2a4>)
 800af78:	70da      	strb	r2, [r3, #3]
            g_lcd_map[REG_3] |= (1 << BIT_3);
 800af7a:	4b27      	ldr	r3, [pc, #156]	; (800b018 <lcd_set_symbol+0x2a4>)
 800af7c:	78db      	ldrb	r3, [r3, #3]
 800af7e:	f043 0308 	orr.w	r3, r3, #8
 800af82:	b2da      	uxtb	r2, r3
 800af84:	4b24      	ldr	r3, [pc, #144]	; (800b018 <lcd_set_symbol+0x2a4>)
 800af86:	70da      	strb	r2, [r3, #3]

            g_lcd_map[REG_13] |= (1 << BIT_5);
 800af88:	4b23      	ldr	r3, [pc, #140]	; (800b018 <lcd_set_symbol+0x2a4>)
 800af8a:	7b5b      	ldrb	r3, [r3, #13]
 800af8c:	f043 0320 	orr.w	r3, r3, #32
 800af90:	b2da      	uxtb	r2, r3
 800af92:	4b21      	ldr	r3, [pc, #132]	; (800b018 <lcd_set_symbol+0x2a4>)
 800af94:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_4);
 800af96:	4b20      	ldr	r3, [pc, #128]	; (800b018 <lcd_set_symbol+0x2a4>)
 800af98:	7b5b      	ldrb	r3, [r3, #13]
 800af9a:	f043 0310 	orr.w	r3, r3, #16
 800af9e:	b2da      	uxtb	r2, r3
 800afa0:	4b1d      	ldr	r3, [pc, #116]	; (800b018 <lcd_set_symbol+0x2a4>)
 800afa2:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_4);
 800afa4:	4b1c      	ldr	r3, [pc, #112]	; (800b018 <lcd_set_symbol+0x2a4>)
 800afa6:	7c9b      	ldrb	r3, [r3, #18]
 800afa8:	f043 0310 	orr.w	r3, r3, #16
 800afac:	b2da      	uxtb	r2, r3
 800afae:	4b1a      	ldr	r3, [pc, #104]	; (800b018 <lcd_set_symbol+0x2a4>)
 800afb0:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_5);
 800afb2:	4b19      	ldr	r3, [pc, #100]	; (800b018 <lcd_set_symbol+0x2a4>)
 800afb4:	78db      	ldrb	r3, [r3, #3]
 800afb6:	f043 0320 	orr.w	r3, r3, #32
 800afba:	b2da      	uxtb	r2, r3
 800afbc:	4b16      	ldr	r3, [pc, #88]	; (800b018 <lcd_set_symbol+0x2a4>)
 800afbe:	70da      	strb	r2, [r3, #3]
            g_lcd_map[REG_8] |= (1 << BIT_4);
 800afc0:	4b15      	ldr	r3, [pc, #84]	; (800b018 <lcd_set_symbol+0x2a4>)
 800afc2:	7a1b      	ldrb	r3, [r3, #8]
 800afc4:	f043 0310 	orr.w	r3, r3, #16
 800afc8:	b2da      	uxtb	r2, r3
 800afca:	4b13      	ldr	r3, [pc, #76]	; (800b018 <lcd_set_symbol+0x2a4>)
 800afcc:	721a      	strb	r2, [r3, #8]

            g_lcd_map[REG_13] |= (1 << BIT_7);
 800afce:	4b12      	ldr	r3, [pc, #72]	; (800b018 <lcd_set_symbol+0x2a4>)
 800afd0:	7b5b      	ldrb	r3, [r3, #13]
 800afd2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800afd6:	b2da      	uxtb	r2, r3
 800afd8:	4b0f      	ldr	r3, [pc, #60]	; (800b018 <lcd_set_symbol+0x2a4>)
 800afda:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_6);
 800afdc:	4b0e      	ldr	r3, [pc, #56]	; (800b018 <lcd_set_symbol+0x2a4>)
 800afde:	7b5b      	ldrb	r3, [r3, #13]
 800afe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afe4:	b2da      	uxtb	r2, r3
 800afe6:	4b0c      	ldr	r3, [pc, #48]	; (800b018 <lcd_set_symbol+0x2a4>)
 800afe8:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_6);
 800afea:	4b0b      	ldr	r3, [pc, #44]	; (800b018 <lcd_set_symbol+0x2a4>)
 800afec:	7c9b      	ldrb	r3, [r3, #18]
 800afee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aff2:	b2da      	uxtb	r2, r3
 800aff4:	4b08      	ldr	r3, [pc, #32]	; (800b018 <lcd_set_symbol+0x2a4>)
 800aff6:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_7);
 800aff8:	4b07      	ldr	r3, [pc, #28]	; (800b018 <lcd_set_symbol+0x2a4>)
 800affa:	78db      	ldrb	r3, [r3, #3]
 800affc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b000:	b2da      	uxtb	r2, r3
 800b002:	4b05      	ldr	r3, [pc, #20]	; (800b018 <lcd_set_symbol+0x2a4>)
 800b004:	70da      	strb	r2, [r3, #3]
            g_lcd_map[REG_8] |= (1 << BIT_6);
 800b006:	4b04      	ldr	r3, [pc, #16]	; (800b018 <lcd_set_symbol+0x2a4>)
 800b008:	7a1b      	ldrb	r3, [r3, #8]
 800b00a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b00e:	b2da      	uxtb	r2, r3
 800b010:	4b01      	ldr	r3, [pc, #4]	; (800b018 <lcd_set_symbol+0x2a4>)
 800b012:	721a      	strb	r2, [r3, #8]

        break;
 800b014:	e0e0      	b.n	800b1d8 <lcd_set_symbol+0x464>
 800b016:	bf00      	nop
 800b018:	20003924 	.word	0x20003924
        case KO:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 800b01c:	4b72      	ldr	r3, [pc, #456]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b01e:	7bdb      	ldrb	r3, [r3, #15]
 800b020:	f043 0320 	orr.w	r3, r3, #32
 800b024:	b2da      	uxtb	r2, r3
 800b026:	4b70      	ldr	r3, [pc, #448]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b028:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 800b02a:	4b6f      	ldr	r3, [pc, #444]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b02c:	7bdb      	ldrb	r3, [r3, #15]
 800b02e:	f043 0310 	orr.w	r3, r3, #16
 800b032:	b2da      	uxtb	r2, r3
 800b034:	4b6c      	ldr	r3, [pc, #432]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b036:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 800b038:	4b6b      	ldr	r3, [pc, #428]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b03a:	7bdb      	ldrb	r3, [r3, #15]
 800b03c:	f043 0304 	orr.w	r3, r3, #4
 800b040:	b2da      	uxtb	r2, r3
 800b042:	4b69      	ldr	r3, [pc, #420]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b044:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 800b046:	4b68      	ldr	r3, [pc, #416]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	f043 0320 	orr.w	r3, r3, #32
 800b04e:	b2da      	uxtb	r2, r3
 800b050:	4b65      	ldr	r3, [pc, #404]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b052:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_4);
 800b054:	4b64      	ldr	r3, [pc, #400]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b056:	795b      	ldrb	r3, [r3, #5]
 800b058:	f043 0310 	orr.w	r3, r3, #16
 800b05c:	b2da      	uxtb	r2, r3
 800b05e:	4b62      	ldr	r3, [pc, #392]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b060:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_19] |= (1 << BIT_6);
 800b062:	4b61      	ldr	r3, [pc, #388]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b064:	7cdb      	ldrb	r3, [r3, #19]
 800b066:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b06a:	b2da      	uxtb	r2, r3
 800b06c:	4b5e      	ldr	r3, [pc, #376]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b06e:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 800b070:	4b5d      	ldr	r3, [pc, #372]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	f043 0301 	orr.w	r3, r3, #1
 800b078:	b2da      	uxtb	r2, r3
 800b07a:	4b5b      	ldr	r3, [pc, #364]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b07c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 800b07e:	4b5a      	ldr	r3, [pc, #360]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	f043 0302 	orr.w	r3, r3, #2
 800b086:	b2da      	uxtb	r2, r3
 800b088:	4b57      	ldr	r3, [pc, #348]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b08a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_7);
 800b08c:	4b56      	ldr	r3, [pc, #344]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b08e:	791b      	ldrb	r3, [r3, #4]
 800b090:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b094:	b2da      	uxtb	r2, r3
 800b096:	4b54      	ldr	r3, [pc, #336]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b098:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 800b09a:	4b53      	ldr	r3, [pc, #332]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b09c:	795b      	ldrb	r3, [r3, #5]
 800b09e:	f043 0302 	orr.w	r3, r3, #2
 800b0a2:	b2da      	uxtb	r2, r3
 800b0a4:	4b50      	ldr	r3, [pc, #320]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b0a6:	715a      	strb	r2, [r3, #5]
        break;
 800b0a8:	e096      	b.n	800b1d8 <lcd_set_symbol+0x464>
        case PASS1:
            g_lcd_map[REG_12] |= (1 << BIT_0);
 800b0aa:	4b4f      	ldr	r3, [pc, #316]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b0ac:	7b1b      	ldrb	r3, [r3, #12]
 800b0ae:	f043 0301 	orr.w	r3, r3, #1
 800b0b2:	b2da      	uxtb	r2, r3
 800b0b4:	4b4c      	ldr	r3, [pc, #304]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b0b6:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_12] |= (1 << BIT_1);
 800b0b8:	4b4b      	ldr	r3, [pc, #300]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b0ba:	7b1b      	ldrb	r3, [r3, #12]
 800b0bc:	f043 0302 	orr.w	r3, r3, #2
 800b0c0:	b2da      	uxtb	r2, r3
 800b0c2:	4b49      	ldr	r3, [pc, #292]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b0c4:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_0);
 800b0c6:	4b48      	ldr	r3, [pc, #288]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b0c8:	7c5b      	ldrb	r3, [r3, #17]
 800b0ca:	f043 0301 	orr.w	r3, r3, #1
 800b0ce:	b2da      	uxtb	r2, r3
 800b0d0:	4b45      	ldr	r3, [pc, #276]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b0d2:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_17] |= (1 << BIT_1);
 800b0d4:	4b44      	ldr	r3, [pc, #272]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b0d6:	7c5b      	ldrb	r3, [r3, #17]
 800b0d8:	f043 0302 	orr.w	r3, r3, #2
 800b0dc:	b2da      	uxtb	r2, r3
 800b0de:	4b42      	ldr	r3, [pc, #264]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b0e0:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_1);
 800b0e2:	4b41      	ldr	r3, [pc, #260]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b0e4:	789b      	ldrb	r3, [r3, #2]
 800b0e6:	f043 0302 	orr.w	r3, r3, #2
 800b0ea:	b2da      	uxtb	r2, r3
 800b0ec:	4b3e      	ldr	r3, [pc, #248]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b0ee:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_2] |= (1 << BIT_0);
 800b0f0:	4b3d      	ldr	r3, [pc, #244]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b0f2:	789b      	ldrb	r3, [r3, #2]
 800b0f4:	f043 0301 	orr.w	r3, r3, #1
 800b0f8:	b2da      	uxtb	r2, r3
 800b0fa:	4b3b      	ldr	r3, [pc, #236]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b0fc:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_7] |= (1 << BIT_1);
 800b0fe:	4b3a      	ldr	r3, [pc, #232]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b100:	79db      	ldrb	r3, [r3, #7]
 800b102:	f043 0302 	orr.w	r3, r3, #2
 800b106:	b2da      	uxtb	r2, r3
 800b108:	4b37      	ldr	r3, [pc, #220]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b10a:	71da      	strb	r2, [r3, #7]
        break;
 800b10c:	e064      	b.n	800b1d8 <lcd_set_symbol+0x464>
        case PASS2:
            g_lcd_map[REG_11] |= (1 << BIT_6);
 800b10e:	4b36      	ldr	r3, [pc, #216]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b110:	7adb      	ldrb	r3, [r3, #11]
 800b112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b116:	b2da      	uxtb	r2, r3
 800b118:	4b33      	ldr	r3, [pc, #204]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b11a:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_11] |= (1 << BIT_7);
 800b11c:	4b32      	ldr	r3, [pc, #200]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b11e:	7adb      	ldrb	r3, [r3, #11]
 800b120:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b124:	b2da      	uxtb	r2, r3
 800b126:	4b30      	ldr	r3, [pc, #192]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b128:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_16] |= (1 << BIT_6);
 800b12a:	4b2f      	ldr	r3, [pc, #188]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b12c:	7c1b      	ldrb	r3, [r3, #16]
 800b12e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b132:	b2da      	uxtb	r2, r3
 800b134:	4b2c      	ldr	r3, [pc, #176]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b136:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_16] |= (1 << BIT_7);
 800b138:	4b2b      	ldr	r3, [pc, #172]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b13a:	7c1b      	ldrb	r3, [r3, #16]
 800b13c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b140:	b2da      	uxtb	r2, r3
 800b142:	4b29      	ldr	r3, [pc, #164]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b144:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_1] |= (1 << BIT_7);
 800b146:	4b28      	ldr	r3, [pc, #160]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b148:	785b      	ldrb	r3, [r3, #1]
 800b14a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b14e:	b2da      	uxtb	r2, r3
 800b150:	4b25      	ldr	r3, [pc, #148]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b152:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_1] |= (1 << BIT_6);
 800b154:	4b24      	ldr	r3, [pc, #144]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b156:	785b      	ldrb	r3, [r3, #1]
 800b158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b15c:	b2da      	uxtb	r2, r3
 800b15e:	4b22      	ldr	r3, [pc, #136]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b160:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_6] |= (1 << BIT_7);
 800b162:	4b21      	ldr	r3, [pc, #132]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b164:	799b      	ldrb	r3, [r3, #6]
 800b166:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b16a:	b2da      	uxtb	r2, r3
 800b16c:	4b1e      	ldr	r3, [pc, #120]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b16e:	719a      	strb	r2, [r3, #6]
        break;
 800b170:	e032      	b.n	800b1d8 <lcd_set_symbol+0x464>
        case PASS3:
            g_lcd_map[REG_11] |= (1 << BIT_4);
 800b172:	4b1d      	ldr	r3, [pc, #116]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b174:	7adb      	ldrb	r3, [r3, #11]
 800b176:	f043 0310 	orr.w	r3, r3, #16
 800b17a:	b2da      	uxtb	r2, r3
 800b17c:	4b1a      	ldr	r3, [pc, #104]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b17e:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_11] |= (1 << BIT_5);
 800b180:	4b19      	ldr	r3, [pc, #100]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b182:	7adb      	ldrb	r3, [r3, #11]
 800b184:	f043 0320 	orr.w	r3, r3, #32
 800b188:	b2da      	uxtb	r2, r3
 800b18a:	4b17      	ldr	r3, [pc, #92]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b18c:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_16] |= (1 << BIT_4);
 800b18e:	4b16      	ldr	r3, [pc, #88]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b190:	7c1b      	ldrb	r3, [r3, #16]
 800b192:	f043 0310 	orr.w	r3, r3, #16
 800b196:	b2da      	uxtb	r2, r3
 800b198:	4b13      	ldr	r3, [pc, #76]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b19a:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_16] |= (1 << BIT_5);
 800b19c:	4b12      	ldr	r3, [pc, #72]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b19e:	7c1b      	ldrb	r3, [r3, #16]
 800b1a0:	f043 0320 	orr.w	r3, r3, #32
 800b1a4:	b2da      	uxtb	r2, r3
 800b1a6:	4b10      	ldr	r3, [pc, #64]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b1a8:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_1] |= (1 << BIT_5);
 800b1aa:	4b0f      	ldr	r3, [pc, #60]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b1ac:	785b      	ldrb	r3, [r3, #1]
 800b1ae:	f043 0320 	orr.w	r3, r3, #32
 800b1b2:	b2da      	uxtb	r2, r3
 800b1b4:	4b0c      	ldr	r3, [pc, #48]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b1b6:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_1] |= (1 << BIT_4);
 800b1b8:	4b0b      	ldr	r3, [pc, #44]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b1ba:	785b      	ldrb	r3, [r3, #1]
 800b1bc:	f043 0310 	orr.w	r3, r3, #16
 800b1c0:	b2da      	uxtb	r2, r3
 800b1c2:	4b09      	ldr	r3, [pc, #36]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b1c4:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_6] |= (1 << BIT_5);
 800b1c6:	4b08      	ldr	r3, [pc, #32]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b1c8:	799b      	ldrb	r3, [r3, #6]
 800b1ca:	f043 0320 	orr.w	r3, r3, #32
 800b1ce:	b2da      	uxtb	r2, r3
 800b1d0:	4b05      	ldr	r3, [pc, #20]	; (800b1e8 <lcd_set_symbol+0x474>)
 800b1d2:	719a      	strb	r2, [r3, #6]
        break;
 800b1d4:	e000      	b.n	800b1d8 <lcd_set_symbol+0x464>
        default:
        break;
 800b1d6:	bf00      	nop
    }

    pcf8553_blink(blink_speed);
 800b1d8:	79bb      	ldrb	r3, [r7, #6]
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f000 fb20 	bl	800b820 <pcf8553_blink>
}
 800b1e0:	bf00      	nop
 800b1e2:	3708      	adds	r7, #8
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}
 800b1e8:	20003924 	.word	0x20003924

0800b1ec <lcd_set_time_unit>:
 * pantalla LCD custom.
 * @param Unidad a imprimir y velocidad de parpadeo.
 * @retval None
 */
void lcd_set_time_unit(fmc_unit_time_t time_unit, blink_t blink_speed)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b082      	sub	sp, #8
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	460a      	mov	r2, r1
 800b1f6:	71fb      	strb	r3, [r7, #7]
 800b1f8:	4613      	mov	r3, r2
 800b1fa:	71bb      	strb	r3, [r7, #6]
    switch (time_unit)
 800b1fc:	79fb      	ldrb	r3, [r7, #7]
 800b1fe:	2b03      	cmp	r3, #3
 800b200:	d82a      	bhi.n	800b258 <lcd_set_time_unit+0x6c>
 800b202:	a201      	add	r2, pc, #4	; (adr r2, 800b208 <lcd_set_time_unit+0x1c>)
 800b204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b208:	0800b219 	.word	0x0800b219
 800b20c:	0800b229 	.word	0x0800b229
 800b210:	0800b239 	.word	0x0800b239
 800b214:	0800b249 	.word	0x0800b249
    {
        case H:
            g_lcd_map[REG_5] |= (1 << BIT_6);
 800b218:	4b14      	ldr	r3, [pc, #80]	; (800b26c <lcd_set_time_unit+0x80>)
 800b21a:	795b      	ldrb	r3, [r3, #5]
 800b21c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b220:	b2da      	uxtb	r2, r3
 800b222:	4b12      	ldr	r3, [pc, #72]	; (800b26c <lcd_set_time_unit+0x80>)
 800b224:	715a      	strb	r2, [r3, #5]
        break;
 800b226:	e018      	b.n	800b25a <lcd_set_time_unit+0x6e>
        case D:
            g_lcd_map[REG_9] |= (1 << BIT_5);
 800b228:	4b10      	ldr	r3, [pc, #64]	; (800b26c <lcd_set_time_unit+0x80>)
 800b22a:	7a5b      	ldrb	r3, [r3, #9]
 800b22c:	f043 0320 	orr.w	r3, r3, #32
 800b230:	b2da      	uxtb	r2, r3
 800b232:	4b0e      	ldr	r3, [pc, #56]	; (800b26c <lcd_set_time_unit+0x80>)
 800b234:	725a      	strb	r2, [r3, #9]
        break;
 800b236:	e010      	b.n	800b25a <lcd_set_time_unit+0x6e>
        case S:
            g_lcd_map[REG_10] |= (1 << BIT_5);
 800b238:	4b0c      	ldr	r3, [pc, #48]	; (800b26c <lcd_set_time_unit+0x80>)
 800b23a:	7a9b      	ldrb	r3, [r3, #10]
 800b23c:	f043 0320 	orr.w	r3, r3, #32
 800b240:	b2da      	uxtb	r2, r3
 800b242:	4b0a      	ldr	r3, [pc, #40]	; (800b26c <lcd_set_time_unit+0x80>)
 800b244:	729a      	strb	r2, [r3, #10]
        break;
 800b246:	e008      	b.n	800b25a <lcd_set_time_unit+0x6e>
        case M:
            g_lcd_map[REG_9] |= (1 << BIT_7);
 800b248:	4b08      	ldr	r3, [pc, #32]	; (800b26c <lcd_set_time_unit+0x80>)
 800b24a:	7a5b      	ldrb	r3, [r3, #9]
 800b24c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b250:	b2da      	uxtb	r2, r3
 800b252:	4b06      	ldr	r3, [pc, #24]	; (800b26c <lcd_set_time_unit+0x80>)
 800b254:	725a      	strb	r2, [r3, #9]
        break;
 800b256:	e000      	b.n	800b25a <lcd_set_time_unit+0x6e>
        default:
        break;
 800b258:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 800b25a:	79bb      	ldrb	r3, [r7, #6]
 800b25c:	4618      	mov	r0, r3
 800b25e:	f000 fadf 	bl	800b820 <pcf8553_blink>
}
 800b262:	bf00      	nop
 800b264:	3708      	adds	r7, #8
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
 800b26a:	bf00      	nop
 800b26c:	20003924 	.word	0x20003924

0800b270 <lcd_set_vol_unit>:
 * @brief Función que imprime la unidad de volumen a utilizar.
 * @param Unidad a imprimir y velocidad de parpadeo.
 * @retval None
 */
void lcd_set_vol_unit(fmc_unit_volume_t vol_unit, blink_t blink_speed)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b082      	sub	sp, #8
 800b274:	af00      	add	r7, sp, #0
 800b276:	4603      	mov	r3, r0
 800b278:	460a      	mov	r2, r1
 800b27a:	71fb      	strb	r3, [r7, #7]
 800b27c:	4613      	mov	r3, r2
 800b27e:	71bb      	strb	r3, [r7, #6]
    switch (vol_unit)
 800b280:	79fb      	ldrb	r3, [r7, #7]
 800b282:	2b06      	cmp	r3, #6
 800b284:	f200 81e3 	bhi.w	800b64e <lcd_set_vol_unit+0x3de>
 800b288:	a201      	add	r2, pc, #4	; (adr r2, 800b290 <lcd_set_vol_unit+0x20>)
 800b28a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b28e:	bf00      	nop
 800b290:	0800b2ad 	.word	0x0800b2ad
 800b294:	0800b39f 	.word	0x0800b39f
 800b298:	0800b303 	.word	0x0800b303
 800b29c:	0800b515 	.word	0x0800b515
 800b2a0:	0800b449 	.word	0x0800b449
 800b2a4:	0800b595 	.word	0x0800b595
 800b2a8:	0800b615 	.word	0x0800b615
    {
        case LT:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 800b2ac:	4b98      	ldr	r3, [pc, #608]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b2ae:	7bdb      	ldrb	r3, [r3, #15]
 800b2b0:	f043 0320 	orr.w	r3, r3, #32
 800b2b4:	b2da      	uxtb	r2, r3
 800b2b6:	4b96      	ldr	r3, [pc, #600]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b2b8:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 800b2ba:	4b95      	ldr	r3, [pc, #596]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b2bc:	781b      	ldrb	r3, [r3, #0]
 800b2be:	f043 0320 	orr.w	r3, r3, #32
 800b2c2:	b2da      	uxtb	r2, r3
 800b2c4:	4b92      	ldr	r3, [pc, #584]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b2c6:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_5);
 800b2c8:	4b91      	ldr	r3, [pc, #580]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b2ca:	795b      	ldrb	r3, [r3, #5]
 800b2cc:	f043 0320 	orr.w	r3, r3, #32
 800b2d0:	b2da      	uxtb	r2, r3
 800b2d2:	4b8f      	ldr	r3, [pc, #572]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b2d4:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 800b2d6:	4b8e      	ldr	r3, [pc, #568]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b2d8:	7b9b      	ldrb	r3, [r3, #14]
 800b2da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b2de:	b2da      	uxtb	r2, r3
 800b2e0:	4b8b      	ldr	r3, [pc, #556]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b2e2:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_10] |= (1 << BIT_0);
 800b2e4:	4b8a      	ldr	r3, [pc, #552]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b2e6:	7a9b      	ldrb	r3, [r3, #10]
 800b2e8:	f043 0301 	orr.w	r3, r3, #1
 800b2ec:	b2da      	uxtb	r2, r3
 800b2ee:	4b88      	ldr	r3, [pc, #544]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b2f0:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_9] |= (1 << BIT_6);
 800b2f2:	4b87      	ldr	r3, [pc, #540]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b2f4:	7a5b      	ldrb	r3, [r3, #9]
 800b2f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2fa:	b2da      	uxtb	r2, r3
 800b2fc:	4b84      	ldr	r3, [pc, #528]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b2fe:	725a      	strb	r2, [r3, #9]
        break;
 800b300:	e1a6      	b.n	800b650 <lcd_set_vol_unit+0x3e0>
        case KG:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 800b302:	4b83      	ldr	r3, [pc, #524]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b304:	7bdb      	ldrb	r3, [r3, #15]
 800b306:	f043 0320 	orr.w	r3, r3, #32
 800b30a:	b2da      	uxtb	r2, r3
 800b30c:	4b80      	ldr	r3, [pc, #512]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b30e:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 800b310:	4b7f      	ldr	r3, [pc, #508]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b312:	7bdb      	ldrb	r3, [r3, #15]
 800b314:	f043 0310 	orr.w	r3, r3, #16
 800b318:	b2da      	uxtb	r2, r3
 800b31a:	4b7d      	ldr	r3, [pc, #500]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b31c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 800b31e:	4b7c      	ldr	r3, [pc, #496]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b320:	7bdb      	ldrb	r3, [r3, #15]
 800b322:	f043 0304 	orr.w	r3, r3, #4
 800b326:	b2da      	uxtb	r2, r3
 800b328:	4b79      	ldr	r3, [pc, #484]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b32a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 800b32c:	4b78      	ldr	r3, [pc, #480]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b32e:	781b      	ldrb	r3, [r3, #0]
 800b330:	f043 0320 	orr.w	r3, r3, #32
 800b334:	b2da      	uxtb	r2, r3
 800b336:	4b76      	ldr	r3, [pc, #472]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b338:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_4);
 800b33a:	4b75      	ldr	r3, [pc, #468]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b33c:	795b      	ldrb	r3, [r3, #5]
 800b33e:	f043 0310 	orr.w	r3, r3, #16
 800b342:	b2da      	uxtb	r2, r3
 800b344:	4b72      	ldr	r3, [pc, #456]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b346:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 800b348:	4b71      	ldr	r3, [pc, #452]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b34a:	7b9b      	ldrb	r3, [r3, #14]
 800b34c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b350:	b2da      	uxtb	r2, r3
 800b352:	4b6f      	ldr	r3, [pc, #444]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b354:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 800b356:	4b6e      	ldr	r3, [pc, #440]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b358:	7bdb      	ldrb	r3, [r3, #15]
 800b35a:	f043 0302 	orr.w	r3, r3, #2
 800b35e:	b2da      	uxtb	r2, r3
 800b360:	4b6b      	ldr	r3, [pc, #428]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b362:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 800b364:	4b6a      	ldr	r3, [pc, #424]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b366:	781b      	ldrb	r3, [r3, #0]
 800b368:	f043 0301 	orr.w	r3, r3, #1
 800b36c:	b2da      	uxtb	r2, r3
 800b36e:	4b68      	ldr	r3, [pc, #416]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b370:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 800b372:	4b67      	ldr	r3, [pc, #412]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b374:	781b      	ldrb	r3, [r3, #0]
 800b376:	f043 0302 	orr.w	r3, r3, #2
 800b37a:	b2da      	uxtb	r2, r3
 800b37c:	4b64      	ldr	r3, [pc, #400]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b37e:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_7);
 800b380:	4b63      	ldr	r3, [pc, #396]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b382:	791b      	ldrb	r3, [r3, #4]
 800b384:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b388:	b2da      	uxtb	r2, r3
 800b38a:	4b61      	ldr	r3, [pc, #388]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b38c:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 800b38e:	4b60      	ldr	r3, [pc, #384]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b390:	795b      	ldrb	r3, [r3, #5]
 800b392:	f043 0302 	orr.w	r3, r3, #2
 800b396:	b2da      	uxtb	r2, r3
 800b398:	4b5d      	ldr	r3, [pc, #372]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b39a:	715a      	strb	r2, [r3, #5]
        break;
 800b39c:	e158      	b.n	800b650 <lcd_set_vol_unit+0x3e0>
        case M3:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 800b39e:	4b5c      	ldr	r3, [pc, #368]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b3a0:	7bdb      	ldrb	r3, [r3, #15]
 800b3a2:	f043 0320 	orr.w	r3, r3, #32
 800b3a6:	b2da      	uxtb	r2, r3
 800b3a8:	4b59      	ldr	r3, [pc, #356]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b3aa:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_10] |= (1 << BIT_2);
 800b3ac:	4b58      	ldr	r3, [pc, #352]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b3ae:	7a9b      	ldrb	r3, [r3, #10]
 800b3b0:	f043 0304 	orr.w	r3, r3, #4
 800b3b4:	b2da      	uxtb	r2, r3
 800b3b6:	4b56      	ldr	r3, [pc, #344]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b3b8:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 800b3ba:	4b55      	ldr	r3, [pc, #340]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b3bc:	7bdb      	ldrb	r3, [r3, #15]
 800b3be:	f043 0310 	orr.w	r3, r3, #16
 800b3c2:	b2da      	uxtb	r2, r3
 800b3c4:	4b52      	ldr	r3, [pc, #328]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b3c6:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 800b3c8:	4b51      	ldr	r3, [pc, #324]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b3ca:	7bdb      	ldrb	r3, [r3, #15]
 800b3cc:	f043 0308 	orr.w	r3, r3, #8
 800b3d0:	b2da      	uxtb	r2, r3
 800b3d2:	4b4f      	ldr	r3, [pc, #316]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b3d4:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 800b3d6:	4b4e      	ldr	r3, [pc, #312]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b3d8:	781b      	ldrb	r3, [r3, #0]
 800b3da:	f043 0320 	orr.w	r3, r3, #32
 800b3de:	b2da      	uxtb	r2, r3
 800b3e0:	4b4b      	ldr	r3, [pc, #300]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b3e2:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 800b3e4:	4b4a      	ldr	r3, [pc, #296]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b3e6:	781b      	ldrb	r3, [r3, #0]
 800b3e8:	f043 0308 	orr.w	r3, r3, #8
 800b3ec:	b2da      	uxtb	r2, r3
 800b3ee:	4b48      	ldr	r3, [pc, #288]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b3f0:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 800b3f2:	4b47      	ldr	r3, [pc, #284]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b3f4:	7b9b      	ldrb	r3, [r3, #14]
 800b3f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b3fa:	b2da      	uxtb	r2, r3
 800b3fc:	4b44      	ldr	r3, [pc, #272]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b3fe:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_19] |= (1 << BIT_7);
 800b400:	4b43      	ldr	r3, [pc, #268]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b402:	7cdb      	ldrb	r3, [r3, #19]
 800b404:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b408:	b2da      	uxtb	r2, r3
 800b40a:	4b41      	ldr	r3, [pc, #260]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b40c:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 800b40e:	4b40      	ldr	r3, [pc, #256]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b410:	7cdb      	ldrb	r3, [r3, #19]
 800b412:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b416:	b2da      	uxtb	r2, r3
 800b418:	4b3d      	ldr	r3, [pc, #244]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b41a:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 800b41c:	4b3c      	ldr	r3, [pc, #240]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b41e:	781b      	ldrb	r3, [r3, #0]
 800b420:	f043 0301 	orr.w	r3, r3, #1
 800b424:	b2da      	uxtb	r2, r3
 800b426:	4b3a      	ldr	r3, [pc, #232]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b428:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_7);
 800b42a:	4b39      	ldr	r3, [pc, #228]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b42c:	791b      	ldrb	r3, [r3, #4]
 800b42e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b432:	b2da      	uxtb	r2, r3
 800b434:	4b36      	ldr	r3, [pc, #216]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b436:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 800b438:	4b35      	ldr	r3, [pc, #212]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b43a:	795b      	ldrb	r3, [r3, #5]
 800b43c:	f043 0302 	orr.w	r3, r3, #2
 800b440:	b2da      	uxtb	r2, r3
 800b442:	4b33      	ldr	r3, [pc, #204]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b444:	715a      	strb	r2, [r3, #5]
        break;
 800b446:	e103      	b.n	800b650 <lcd_set_vol_unit+0x3e0>
        case BR:
            g_lcd_map[REG_10] |= (1 << BIT_3);
 800b448:	4b31      	ldr	r3, [pc, #196]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b44a:	7a9b      	ldrb	r3, [r3, #10]
 800b44c:	f043 0308 	orr.w	r3, r3, #8
 800b450:	b2da      	uxtb	r2, r3
 800b452:	4b2f      	ldr	r3, [pc, #188]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b454:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_10] |= (1 << BIT_4);
 800b456:	4b2e      	ldr	r3, [pc, #184]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b458:	7a9b      	ldrb	r3, [r3, #10]
 800b45a:	f043 0310 	orr.w	r3, r3, #16
 800b45e:	b2da      	uxtb	r2, r3
 800b460:	4b2b      	ldr	r3, [pc, #172]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b462:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 800b464:	4b2a      	ldr	r3, [pc, #168]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b466:	7bdb      	ldrb	r3, [r3, #15]
 800b468:	f043 0308 	orr.w	r3, r3, #8
 800b46c:	b2da      	uxtb	r2, r3
 800b46e:	4b28      	ldr	r3, [pc, #160]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b470:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 800b472:	4b27      	ldr	r3, [pc, #156]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b474:	781b      	ldrb	r3, [r3, #0]
 800b476:	f043 0310 	orr.w	r3, r3, #16
 800b47a:	b2da      	uxtb	r2, r3
 800b47c:	4b24      	ldr	r3, [pc, #144]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b47e:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_2);
 800b480:	4b23      	ldr	r3, [pc, #140]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b482:	795b      	ldrb	r3, [r3, #5]
 800b484:	f043 0304 	orr.w	r3, r3, #4
 800b488:	b2da      	uxtb	r2, r3
 800b48a:	4b21      	ldr	r3, [pc, #132]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b48c:	715a      	strb	r2, [r3, #5]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 800b48e:	4b20      	ldr	r3, [pc, #128]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b490:	781b      	ldrb	r3, [r3, #0]
 800b492:	f043 0308 	orr.w	r3, r3, #8
 800b496:	b2da      	uxtb	r2, r3
 800b498:	4b1d      	ldr	r3, [pc, #116]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b49a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_5);
 800b49c:	4b1c      	ldr	r3, [pc, #112]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b49e:	795b      	ldrb	r3, [r3, #5]
 800b4a0:	f043 0320 	orr.w	r3, r3, #32
 800b4a4:	b2da      	uxtb	r2, r3
 800b4a6:	4b1a      	ldr	r3, [pc, #104]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b4a8:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 800b4aa:	4b19      	ldr	r3, [pc, #100]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b4ac:	7b9b      	ldrb	r3, [r3, #14]
 800b4ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b4b2:	b2da      	uxtb	r2, r3
 800b4b4:	4b16      	ldr	r3, [pc, #88]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b4b6:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 800b4b8:	4b15      	ldr	r3, [pc, #84]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b4ba:	7bdb      	ldrb	r3, [r3, #15]
 800b4bc:	f043 0302 	orr.w	r3, r3, #2
 800b4c0:	b2da      	uxtb	r2, r3
 800b4c2:	4b13      	ldr	r3, [pc, #76]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b4c4:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] |= (1 << BIT_7);
 800b4c6:	4b12      	ldr	r3, [pc, #72]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b4c8:	7cdb      	ldrb	r3, [r3, #19]
 800b4ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b4ce:	b2da      	uxtb	r2, r3
 800b4d0:	4b0f      	ldr	r3, [pc, #60]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b4d2:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 800b4d4:	4b0e      	ldr	r3, [pc, #56]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b4d6:	7cdb      	ldrb	r3, [r3, #19]
 800b4d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4dc:	b2da      	uxtb	r2, r3
 800b4de:	4b0c      	ldr	r3, [pc, #48]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b4e0:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 800b4e2:	4b0b      	ldr	r3, [pc, #44]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b4e4:	781b      	ldrb	r3, [r3, #0]
 800b4e6:	f043 0301 	orr.w	r3, r3, #1
 800b4ea:	b2da      	uxtb	r2, r3
 800b4ec:	4b08      	ldr	r3, [pc, #32]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b4ee:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 800b4f0:	4b07      	ldr	r3, [pc, #28]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b4f2:	781b      	ldrb	r3, [r3, #0]
 800b4f4:	f043 0302 	orr.w	r3, r3, #2
 800b4f8:	b2da      	uxtb	r2, r3
 800b4fa:	4b05      	ldr	r3, [pc, #20]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b4fc:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_0);
 800b4fe:	4b04      	ldr	r3, [pc, #16]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b500:	795b      	ldrb	r3, [r3, #5]
 800b502:	f043 0301 	orr.w	r3, r3, #1
 800b506:	b2da      	uxtb	r2, r3
 800b508:	4b01      	ldr	r3, [pc, #4]	; (800b510 <lcd_set_vol_unit+0x2a0>)
 800b50a:	715a      	strb	r2, [r3, #5]
        break;
 800b50c:	e0a0      	b.n	800b650 <lcd_set_vol_unit+0x3e0>
 800b50e:	bf00      	nop
 800b510:	20003924 	.word	0x20003924
        case GL:
            g_lcd_map[REG_10] |= (1 << BIT_3);
 800b514:	4b52      	ldr	r3, [pc, #328]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b516:	7a9b      	ldrb	r3, [r3, #10]
 800b518:	f043 0308 	orr.w	r3, r3, #8
 800b51c:	b2da      	uxtb	r2, r3
 800b51e:	4b50      	ldr	r3, [pc, #320]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b520:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_5);
 800b522:	4b4f      	ldr	r3, [pc, #316]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b524:	7bdb      	ldrb	r3, [r3, #15]
 800b526:	f043 0320 	orr.w	r3, r3, #32
 800b52a:	b2da      	uxtb	r2, r3
 800b52c:	4b4c      	ldr	r3, [pc, #304]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b52e:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 800b530:	4b4b      	ldr	r3, [pc, #300]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b532:	781b      	ldrb	r3, [r3, #0]
 800b534:	f043 0310 	orr.w	r3, r3, #16
 800b538:	b2da      	uxtb	r2, r3
 800b53a:	4b49      	ldr	r3, [pc, #292]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b53c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 800b53e:	4b48      	ldr	r3, [pc, #288]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b540:	781b      	ldrb	r3, [r3, #0]
 800b542:	f043 0320 	orr.w	r3, r3, #32
 800b546:	b2da      	uxtb	r2, r3
 800b548:	4b45      	ldr	r3, [pc, #276]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b54a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 800b54c:	4b44      	ldr	r3, [pc, #272]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	f043 0308 	orr.w	r3, r3, #8
 800b554:	b2da      	uxtb	r2, r3
 800b556:	4b42      	ldr	r3, [pc, #264]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b558:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_5);
 800b55a:	4b41      	ldr	r3, [pc, #260]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b55c:	795b      	ldrb	r3, [r3, #5]
 800b55e:	f043 0320 	orr.w	r3, r3, #32
 800b562:	b2da      	uxtb	r2, r3
 800b564:	4b3e      	ldr	r3, [pc, #248]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b566:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_15] |= (1 << BIT_1);
 800b568:	4b3d      	ldr	r3, [pc, #244]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b56a:	7bdb      	ldrb	r3, [r3, #15]
 800b56c:	f043 0302 	orr.w	r3, r3, #2
 800b570:	b2da      	uxtb	r2, r3
 800b572:	4b3b      	ldr	r3, [pc, #236]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b574:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 800b576:	4b3a      	ldr	r3, [pc, #232]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b578:	781b      	ldrb	r3, [r3, #0]
 800b57a:	f043 0302 	orr.w	r3, r3, #2
 800b57e:	b2da      	uxtb	r2, r3
 800b580:	4b37      	ldr	r3, [pc, #220]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b582:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 800b584:	4b36      	ldr	r3, [pc, #216]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b586:	795b      	ldrb	r3, [r3, #5]
 800b588:	f043 0302 	orr.w	r3, r3, #2
 800b58c:	b2da      	uxtb	r2, r3
 800b58e:	4b34      	ldr	r3, [pc, #208]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b590:	715a      	strb	r2, [r3, #5]
        break;
 800b592:	e05d      	b.n	800b650 <lcd_set_vol_unit+0x3e0>
        case CELSIUS:
            g_lcd_map[REG_10] |= (1 << BIT_3);
 800b594:	4b32      	ldr	r3, [pc, #200]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b596:	7a9b      	ldrb	r3, [r3, #10]
 800b598:	f043 0308 	orr.w	r3, r3, #8
 800b59c:	b2da      	uxtb	r2, r3
 800b59e:	4b30      	ldr	r3, [pc, #192]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b5a0:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_5);
 800b5a2:	4b2f      	ldr	r3, [pc, #188]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b5a4:	7bdb      	ldrb	r3, [r3, #15]
 800b5a6:	f043 0320 	orr.w	r3, r3, #32
 800b5aa:	b2da      	uxtb	r2, r3
 800b5ac:	4b2c      	ldr	r3, [pc, #176]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b5ae:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 800b5b0:	4b2b      	ldr	r3, [pc, #172]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b5b2:	7bdb      	ldrb	r3, [r3, #15]
 800b5b4:	f043 0308 	orr.w	r3, r3, #8
 800b5b8:	b2da      	uxtb	r2, r3
 800b5ba:	4b29      	ldr	r3, [pc, #164]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b5bc:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 800b5be:	4b28      	ldr	r3, [pc, #160]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b5c0:	7bdb      	ldrb	r3, [r3, #15]
 800b5c2:	f043 0304 	orr.w	r3, r3, #4
 800b5c6:	b2da      	uxtb	r2, r3
 800b5c8:	4b25      	ldr	r3, [pc, #148]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b5ca:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 800b5cc:	4b24      	ldr	r3, [pc, #144]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b5ce:	781b      	ldrb	r3, [r3, #0]
 800b5d0:	f043 0310 	orr.w	r3, r3, #16
 800b5d4:	b2da      	uxtb	r2, r3
 800b5d6:	4b22      	ldr	r3, [pc, #136]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b5d8:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 800b5da:	4b21      	ldr	r3, [pc, #132]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b5dc:	7b9b      	ldrb	r3, [r3, #14]
 800b5de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b5e2:	b2da      	uxtb	r2, r3
 800b5e4:	4b1e      	ldr	r3, [pc, #120]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b5e6:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 800b5e8:	4b1d      	ldr	r3, [pc, #116]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b5ea:	7bdb      	ldrb	r3, [r3, #15]
 800b5ec:	f043 0302 	orr.w	r3, r3, #2
 800b5f0:	b2da      	uxtb	r2, r3
 800b5f2:	4b1b      	ldr	r3, [pc, #108]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b5f4:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 800b5f6:	4b1a      	ldr	r3, [pc, #104]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b5f8:	781b      	ldrb	r3, [r3, #0]
 800b5fa:	f043 0302 	orr.w	r3, r3, #2
 800b5fe:	b2da      	uxtb	r2, r3
 800b600:	4b17      	ldr	r3, [pc, #92]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b602:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 800b604:	4b16      	ldr	r3, [pc, #88]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b606:	795b      	ldrb	r3, [r3, #5]
 800b608:	f043 0302 	orr.w	r3, r3, #2
 800b60c:	b2da      	uxtb	r2, r3
 800b60e:	4b14      	ldr	r3, [pc, #80]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b610:	715a      	strb	r2, [r3, #5]
        break;
 800b612:	e01d      	b.n	800b650 <lcd_set_vol_unit+0x3e0>
        case NOTHING:
            g_lcd_map[REG_15] |= (1 << BIT_2);
 800b614:	4b12      	ldr	r3, [pc, #72]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b616:	7bdb      	ldrb	r3, [r3, #15]
 800b618:	f043 0304 	orr.w	r3, r3, #4
 800b61c:	b2da      	uxtb	r2, r3
 800b61e:	4b10      	ldr	r3, [pc, #64]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b620:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 800b622:	4b0f      	ldr	r3, [pc, #60]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b624:	781b      	ldrb	r3, [r3, #0]
 800b626:	f043 0310 	orr.w	r3, r3, #16
 800b62a:	b2da      	uxtb	r2, r3
 800b62c:	4b0c      	ldr	r3, [pc, #48]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b62e:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 800b630:	4b0b      	ldr	r3, [pc, #44]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b632:	7cdb      	ldrb	r3, [r3, #19]
 800b634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b638:	b2da      	uxtb	r2, r3
 800b63a:	4b09      	ldr	r3, [pc, #36]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b63c:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 800b63e:	4b08      	ldr	r3, [pc, #32]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b640:	781b      	ldrb	r3, [r3, #0]
 800b642:	f043 0301 	orr.w	r3, r3, #1
 800b646:	b2da      	uxtb	r2, r3
 800b648:	4b05      	ldr	r3, [pc, #20]	; (800b660 <lcd_set_vol_unit+0x3f0>)
 800b64a:	701a      	strb	r2, [r3, #0]
        break;
 800b64c:	e000      	b.n	800b650 <lcd_set_vol_unit+0x3e0>
        default:
        break;
 800b64e:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 800b650:	79bb      	ldrb	r3, [r7, #6]
 800b652:	4618      	mov	r0, r3
 800b654:	f000 f8e4 	bl	800b820 <pcf8553_blink>
}
 800b658:	bf00      	nop
 800b65a:	3708      	adds	r7, #8
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}
 800b660:	20003924 	.word	0x20003924

0800b664 <lcd_write_line>:
 * la primera posicion de cada linea.
 * @param
 * @retval None
 */
void lcd_write_line(uint8_t seg, uint8_t data)
{
 800b664:	b480      	push	{r7}
 800b666:	b085      	sub	sp, #20
 800b668:	af00      	add	r7, sp, #0
 800b66a:	4603      	mov	r3, r0
 800b66c:	460a      	mov	r2, r1
 800b66e:	71fb      	strb	r3, [r7, #7]
 800b670:	4613      	mov	r3, r2
 800b672:	71bb      	strb	r3, [r7, #6]
    uint8_t reg = 0;
 800b674:	2300      	movs	r3, #0
 800b676:	73fb      	strb	r3, [r7, #15]
    uint8_t pos = 0;
 800b678:	2300      	movs	r3, #0
 800b67a:	73bb      	strb	r3, [r7, #14]

    /*
     *
     *
     */
    switch (g_row)
 800b67c:	4b33      	ldr	r3, [pc, #204]	; (800b74c <lcd_write_line+0xe8>)
 800b67e:	781b      	ldrb	r3, [r3, #0]
 800b680:	2b01      	cmp	r3, #1
 800b682:	d002      	beq.n	800b68a <lcd_write_line+0x26>
 800b684:	2b02      	cmp	r3, #2
 800b686:	d01b      	beq.n	800b6c0 <lcd_write_line+0x5c>
            pos += g_col * 2;
            reg = (pos / 8) + octal_2[seg].reg; // @suppress("Avoid magic numbers")
            pos = pos % 8; // @suppress("Avoid magic numbers")
        break;
        default:
        break;
 800b688:	e035      	b.n	800b6f6 <lcd_write_line+0x92>
            pos = octal_1[seg].pos;
 800b68a:	79fb      	ldrb	r3, [r7, #7]
 800b68c:	4a30      	ldr	r2, [pc, #192]	; (800b750 <lcd_write_line+0xec>)
 800b68e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800b692:	73bb      	strb	r3, [r7, #14]
            pos += g_col * 2;
 800b694:	4b2f      	ldr	r3, [pc, #188]	; (800b754 <lcd_write_line+0xf0>)
 800b696:	781b      	ldrb	r3, [r3, #0]
 800b698:	005b      	lsls	r3, r3, #1
 800b69a:	b2da      	uxtb	r2, r3
 800b69c:	7bbb      	ldrb	r3, [r7, #14]
 800b69e:	4413      	add	r3, r2
 800b6a0:	73bb      	strb	r3, [r7, #14]
            reg = (pos / 8) + octal_1[seg].reg; // @suppress("Avoid magic numbers")
 800b6a2:	7bbb      	ldrb	r3, [r7, #14]
 800b6a4:	08db      	lsrs	r3, r3, #3
 800b6a6:	b2da      	uxtb	r2, r3
 800b6a8:	79fb      	ldrb	r3, [r7, #7]
 800b6aa:	4929      	ldr	r1, [pc, #164]	; (800b750 <lcd_write_line+0xec>)
 800b6ac:	005b      	lsls	r3, r3, #1
 800b6ae:	440b      	add	r3, r1
 800b6b0:	785b      	ldrb	r3, [r3, #1]
 800b6b2:	4413      	add	r3, r2
 800b6b4:	73fb      	strb	r3, [r7, #15]
            pos = pos % 8; // @suppress("Avoid magic numbers")
 800b6b6:	7bbb      	ldrb	r3, [r7, #14]
 800b6b8:	f003 0307 	and.w	r3, r3, #7
 800b6bc:	73bb      	strb	r3, [r7, #14]
        break;
 800b6be:	e01a      	b.n	800b6f6 <lcd_write_line+0x92>
            pos = octal_2[seg].pos;
 800b6c0:	79fb      	ldrb	r3, [r7, #7]
 800b6c2:	4a25      	ldr	r2, [pc, #148]	; (800b758 <lcd_write_line+0xf4>)
 800b6c4:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800b6c8:	73bb      	strb	r3, [r7, #14]
            pos += g_col * 2;
 800b6ca:	4b22      	ldr	r3, [pc, #136]	; (800b754 <lcd_write_line+0xf0>)
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	005b      	lsls	r3, r3, #1
 800b6d0:	b2da      	uxtb	r2, r3
 800b6d2:	7bbb      	ldrb	r3, [r7, #14]
 800b6d4:	4413      	add	r3, r2
 800b6d6:	73bb      	strb	r3, [r7, #14]
            reg = (pos / 8) + octal_2[seg].reg; // @suppress("Avoid magic numbers")
 800b6d8:	7bbb      	ldrb	r3, [r7, #14]
 800b6da:	08db      	lsrs	r3, r3, #3
 800b6dc:	b2da      	uxtb	r2, r3
 800b6de:	79fb      	ldrb	r3, [r7, #7]
 800b6e0:	491d      	ldr	r1, [pc, #116]	; (800b758 <lcd_write_line+0xf4>)
 800b6e2:	005b      	lsls	r3, r3, #1
 800b6e4:	440b      	add	r3, r1
 800b6e6:	785b      	ldrb	r3, [r3, #1]
 800b6e8:	4413      	add	r3, r2
 800b6ea:	73fb      	strb	r3, [r7, #15]
            pos = pos % 8; // @suppress("Avoid magic numbers")
 800b6ec:	7bbb      	ldrb	r3, [r7, #14]
 800b6ee:	f003 0307 	and.w	r3, r3, #7
 800b6f2:	73bb      	strb	r3, [r7, #14]
        break;
 800b6f4:	bf00      	nop
    }

    if (data)
 800b6f6:	79bb      	ldrb	r3, [r7, #6]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d00f      	beq.n	800b71c <lcd_write_line+0xb8>
    {
        g_lcd_map[reg] |= 1 << pos;
 800b6fc:	7bfb      	ldrb	r3, [r7, #15]
 800b6fe:	4a17      	ldr	r2, [pc, #92]	; (800b75c <lcd_write_line+0xf8>)
 800b700:	5cd3      	ldrb	r3, [r2, r3]
 800b702:	b25a      	sxtb	r2, r3
 800b704:	7bbb      	ldrb	r3, [r7, #14]
 800b706:	2101      	movs	r1, #1
 800b708:	fa01 f303 	lsl.w	r3, r1, r3
 800b70c:	b25b      	sxtb	r3, r3
 800b70e:	4313      	orrs	r3, r2
 800b710:	b25a      	sxtb	r2, r3
 800b712:	7bfb      	ldrb	r3, [r7, #15]
 800b714:	b2d1      	uxtb	r1, r2
 800b716:	4a11      	ldr	r2, [pc, #68]	; (800b75c <lcd_write_line+0xf8>)
 800b718:	54d1      	strb	r1, [r2, r3]
    }
    else
    {
        g_lcd_map[reg] &= ~(1 << pos);
    }
}
 800b71a:	e010      	b.n	800b73e <lcd_write_line+0xda>
        g_lcd_map[reg] &= ~(1 << pos);
 800b71c:	7bfb      	ldrb	r3, [r7, #15]
 800b71e:	4a0f      	ldr	r2, [pc, #60]	; (800b75c <lcd_write_line+0xf8>)
 800b720:	5cd3      	ldrb	r3, [r2, r3]
 800b722:	b25a      	sxtb	r2, r3
 800b724:	7bbb      	ldrb	r3, [r7, #14]
 800b726:	2101      	movs	r1, #1
 800b728:	fa01 f303 	lsl.w	r3, r1, r3
 800b72c:	b25b      	sxtb	r3, r3
 800b72e:	43db      	mvns	r3, r3
 800b730:	b25b      	sxtb	r3, r3
 800b732:	4013      	ands	r3, r2
 800b734:	b25a      	sxtb	r2, r3
 800b736:	7bfb      	ldrb	r3, [r7, #15]
 800b738:	b2d1      	uxtb	r1, r2
 800b73a:	4a08      	ldr	r2, [pc, #32]	; (800b75c <lcd_write_line+0xf8>)
 800b73c:	54d1      	strb	r1, [r2, r3]
}
 800b73e:	bf00      	nop
 800b740:	3714      	adds	r7, #20
 800b742:	46bd      	mov	sp, r7
 800b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b748:	4770      	bx	lr
 800b74a:	bf00      	nop
 800b74c:	200038bd 	.word	0x200038bd
 800b750:	2000008c 	.word	0x2000008c
 800b754:	200038bc 	.word	0x200038bc
 800b758:	2000009c 	.word	0x2000009c
 800b75c:	20003924 	.word	0x20003924

0800b760 <prepare_to_send>:
 * COM_0_ADDRESS
 * COM_1_ADDRESS
 *
 */
void static prepare_to_send(uint8_t add)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b084      	sub	sp, #16
 800b764:	af00      	add	r7, sp, #0
 800b766:	4603      	mov	r3, r0
 800b768:	71fb      	strb	r3, [r7, #7]
    register_address_t reg;
    reg.bits.address = add;
 800b76a:	79fb      	ldrb	r3, [r7, #7]
 800b76c:	f003 031f 	and.w	r3, r3, #31
 800b770:	b2da      	uxtb	r2, r3
 800b772:	7b3b      	ldrb	r3, [r7, #12]
 800b774:	f362 0304 	bfi	r3, r2, #0, #5
 800b778:	733b      	strb	r3, [r7, #12]
    reg.bits.not_used = 0;
 800b77a:	7b3b      	ldrb	r3, [r7, #12]
 800b77c:	f36f 1346 	bfc	r3, #5, #2
 800b780:	733b      	strb	r3, [r7, #12]
    reg.bits.read_write = WRITE_DATA;
 800b782:	7b3b      	ldrb	r3, [r7, #12]
 800b784:	f36f 13c7 	bfc	r3, #7, #1
 800b788:	733b      	strb	r3, [r7, #12]
    HAL_SPI_Transmit(&h_spi1, &(reg.data), 1, DEFAULT_DELAY);
 800b78a:	2314      	movs	r3, #20
 800b78c:	f107 010c 	add.w	r1, r7, #12
 800b790:	2201      	movs	r2, #1
 800b792:	4803      	ldr	r0, [pc, #12]	; (800b7a0 <prepare_to_send+0x40>)
 800b794:	f7f9 fa0f 	bl	8004bb6 <HAL_SPI_Transmit>
}
 800b798:	bf00      	nop
 800b79a:	3710      	adds	r7, #16
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}
 800b7a0:	200038c0 	.word	0x200038c0

0800b7a4 <spi1_init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void spi1_init(void)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	af00      	add	r7, sp, #0
    h_spi1.Instance = SPI1;
 800b7a8:	4b1b      	ldr	r3, [pc, #108]	; (800b818 <spi1_init+0x74>)
 800b7aa:	4a1c      	ldr	r2, [pc, #112]	; (800b81c <spi1_init+0x78>)
 800b7ac:	601a      	str	r2, [r3, #0]
    h_spi1.Init.Mode = SPI_MODE_MASTER;
 800b7ae:	4b1a      	ldr	r3, [pc, #104]	; (800b818 <spi1_init+0x74>)
 800b7b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 800b7b4:	605a      	str	r2, [r3, #4]
    h_spi1.Init.Direction = SPI_DIRECTION_1LINE;
 800b7b6:	4b18      	ldr	r3, [pc, #96]	; (800b818 <spi1_init+0x74>)
 800b7b8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b7bc:	609a      	str	r2, [r3, #8]
    h_spi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800b7be:	4b16      	ldr	r3, [pc, #88]	; (800b818 <spi1_init+0x74>)
 800b7c0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800b7c4:	60da      	str	r2, [r3, #12]
    h_spi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800b7c6:	4b14      	ldr	r3, [pc, #80]	; (800b818 <spi1_init+0x74>)
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	611a      	str	r2, [r3, #16]
    h_spi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800b7cc:	4b12      	ldr	r3, [pc, #72]	; (800b818 <spi1_init+0x74>)
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	615a      	str	r2, [r3, #20]
    h_spi1.Init.NSS = SPI_NSS_SOFT;
 800b7d2:	4b11      	ldr	r3, [pc, #68]	; (800b818 <spi1_init+0x74>)
 800b7d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b7d8:	619a      	str	r2, [r3, #24]
    h_spi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800b7da:	4b0f      	ldr	r3, [pc, #60]	; (800b818 <spi1_init+0x74>)
 800b7dc:	2218      	movs	r2, #24
 800b7de:	61da      	str	r2, [r3, #28]
    h_spi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800b7e0:	4b0d      	ldr	r3, [pc, #52]	; (800b818 <spi1_init+0x74>)
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	621a      	str	r2, [r3, #32]
    h_spi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800b7e6:	4b0c      	ldr	r3, [pc, #48]	; (800b818 <spi1_init+0x74>)
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	625a      	str	r2, [r3, #36]	; 0x24
    h_spi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b7ec:	4b0a      	ldr	r3, [pc, #40]	; (800b818 <spi1_init+0x74>)
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	629a      	str	r2, [r3, #40]	; 0x28
    h_spi1.Init.CRCPolynomial = 7; // @suppress("Avoid magic numbers")
 800b7f2:	4b09      	ldr	r3, [pc, #36]	; (800b818 <spi1_init+0x74>)
 800b7f4:	2207      	movs	r2, #7
 800b7f6:	62da      	str	r2, [r3, #44]	; 0x2c
    h_spi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800b7f8:	4b07      	ldr	r3, [pc, #28]	; (800b818 <spi1_init+0x74>)
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	631a      	str	r2, [r3, #48]	; 0x30
    h_spi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800b7fe:	4b06      	ldr	r3, [pc, #24]	; (800b818 <spi1_init+0x74>)
 800b800:	2200      	movs	r2, #0
 800b802:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_SPI_Init(&h_spi1) != HAL_OK)
 800b804:	4804      	ldr	r0, [pc, #16]	; (800b818 <spi1_init+0x74>)
 800b806:	f7f9 f933 	bl	8004a70 <HAL_SPI_Init>
 800b80a:	4603      	mov	r3, r0
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d001      	beq.n	800b814 <spi1_init+0x70>
    {
        Error_Handler();
 800b810:	f7f5 f9ea 	bl	8000be8 <Error_Handler>
    }
}
 800b814:	bf00      	nop
 800b816:	bd80      	pop	{r7, pc}
 800b818:	200038c0 	.word	0x200038c0
 800b81c:	40013000 	.word	0x40013000

0800b820 <pcf8553_blink>:
 * PCF_BLINK_ONE_SECOND,
 * PCF_BLINK_HALF_SECOND
 * @retval None
 */
void pcf8553_blink(blink_t mode)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b082      	sub	sp, #8
 800b824:	af00      	add	r7, sp, #0
 800b826:	4603      	mov	r3, r0
 800b828:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_RESET);
 800b82a:	2200      	movs	r2, #0
 800b82c:	2110      	movs	r1, #16
 800b82e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b832:	f7f7 fa39 	bl	8002ca8 <HAL_GPIO_WritePin>
    g_display_ctrl_2.reg_bits.blink = mode;
 800b836:	79fb      	ldrb	r3, [r7, #7]
 800b838:	f003 0303 	and.w	r3, r3, #3
 800b83c:	b2d9      	uxtb	r1, r3
 800b83e:	4a0c      	ldr	r2, [pc, #48]	; (800b870 <pcf8553_blink+0x50>)
 800b840:	7813      	ldrb	r3, [r2, #0]
 800b842:	f361 0342 	bfi	r3, r1, #1, #2
 800b846:	7013      	strb	r3, [r2, #0]
    prepare_to_send(DISPLAY_CTRL_2_ADDRESS);
 800b848:	2003      	movs	r0, #3
 800b84a:	f7ff ff89 	bl	800b760 <prepare_to_send>
    HAL_SPI_Transmit(&h_spi1, &(g_display_ctrl_2.reg_data), 1, DEFAULT_DELAY);
 800b84e:	2314      	movs	r3, #20
 800b850:	2201      	movs	r2, #1
 800b852:	4907      	ldr	r1, [pc, #28]	; (800b870 <pcf8553_blink+0x50>)
 800b854:	4807      	ldr	r0, [pc, #28]	; (800b874 <pcf8553_blink+0x54>)
 800b856:	f7f9 f9ae 	bl	8004bb6 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_SET);
 800b85a:	2201      	movs	r2, #1
 800b85c:	2110      	movs	r1, #16
 800b85e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b862:	f7f7 fa21 	bl	8002ca8 <HAL_GPIO_WritePin>
}
 800b866:	bf00      	nop
 800b868:	3708      	adds	r7, #8
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}
 800b86e:	bf00      	nop
 800b870:	2000393c 	.word	0x2000393c
 800b874:	200038c0 	.word	0x200038c0

0800b878 <pcf8553_clear_buff>:

void pcf8553_clear_buff()
{
 800b878:	b480      	push	{r7}
 800b87a:	b083      	sub	sp, #12
 800b87c:	af00      	add	r7, sp, #0
    /*
     * Limpia el buffer final, que es mandado directamente al controlador de la
     * pantalla LCD.
     */
    for (int cont_buff_t = 0; cont_buff_t < PCF8553_DATA_SIZE; cont_buff_t++)
 800b87e:	2300      	movs	r3, #0
 800b880:	607b      	str	r3, [r7, #4]
 800b882:	e007      	b.n	800b894 <pcf8553_clear_buff+0x1c>
    {
        g_lcd_map[cont_buff_t] = 0;
 800b884:	4a08      	ldr	r2, [pc, #32]	; (800b8a8 <pcf8553_clear_buff+0x30>)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	4413      	add	r3, r2
 800b88a:	2200      	movs	r2, #0
 800b88c:	701a      	strb	r2, [r3, #0]
    for (int cont_buff_t = 0; cont_buff_t < PCF8553_DATA_SIZE; cont_buff_t++)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	3301      	adds	r3, #1
 800b892:	607b      	str	r3, [r7, #4]
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2b13      	cmp	r3, #19
 800b898:	ddf4      	ble.n	800b884 <pcf8553_clear_buff+0xc>
    }
}
 800b89a:	bf00      	nop
 800b89c:	bf00      	nop
 800b89e:	370c      	adds	r7, #12
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a6:	4770      	bx	lr
 800b8a8:	20003924 	.word	0x20003924

0800b8ac <pcf8553_dump>:
 *
 * @param None
 * @retval None
 */
void pcf8553_dump()
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b082      	sub	sp, #8
 800b8b0:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_RESET);
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	2110      	movs	r1, #16
 800b8b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b8ba:	f7f7 f9f5 	bl	8002ca8 <HAL_GPIO_WritePin>
    prepare_to_send(DATA_ADDRESS);
 800b8be:	2004      	movs	r0, #4
 800b8c0:	f7ff ff4e 	bl	800b760 <prepare_to_send>
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	607b      	str	r3, [r7, #4]
 800b8c8:	e00a      	b.n	800b8e0 <pcf8553_dump+0x34>
    {
        HAL_SPI_Transmit(&h_spi1, g_lcd_map + i, 1, DEFAULT_DELAY);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	4a0b      	ldr	r2, [pc, #44]	; (800b8fc <pcf8553_dump+0x50>)
 800b8ce:	1899      	adds	r1, r3, r2
 800b8d0:	2314      	movs	r3, #20
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	480a      	ldr	r0, [pc, #40]	; (800b900 <pcf8553_dump+0x54>)
 800b8d6:	f7f9 f96e 	bl	8004bb6 <HAL_SPI_Transmit>
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	3301      	adds	r3, #1
 800b8de:	607b      	str	r3, [r7, #4]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2b13      	cmp	r3, #19
 800b8e4:	ddf1      	ble.n	800b8ca <pcf8553_dump+0x1e>
    }
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_SET);
 800b8e6:	2201      	movs	r2, #1
 800b8e8:	2110      	movs	r1, #16
 800b8ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b8ee:	f7f7 f9db 	bl	8002ca8 <HAL_GPIO_WritePin>
}
 800b8f2:	bf00      	nop
 800b8f4:	3708      	adds	r7, #8
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}
 800b8fa:	bf00      	nop
 800b8fc:	20003924 	.word	0x20003924
 800b900:	200038c0 	.word	0x200038c0

0800b904 <pcf8553_init>:
 * @brief Llamar a esta función antes de empezar a trabajar con el driver.
 * @param None
 * @retval None
 */
void pcf8553_init()
{
 800b904:	b580      	push	{r7, lr}
 800b906:	af00      	add	r7, sp, #0
    spi1_init();
 800b908:	f7ff ff4c 	bl	800b7a4 <spi1_init>
    pcf8553_reset();
 800b90c:	f000 f830 	bl	800b970 <pcf8553_reset>
    HAL_Delay(DEFAULT_DELAY);
 800b910:	2314      	movs	r3, #20
 800b912:	4618      	mov	r0, r3
 800b914:	f7f5 fc46 	bl	80011a4 <HAL_Delay>
     * @brief El pcf8553 tiene un pin de chip select, la siguiente instruccion
     * habilita el chip, el parametro GPIO_PIN_RESET es muy parecido a un
     * numero magico, se debe buscar una mejor solucion.
     *
     */
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_RESET);
 800b918:	2200      	movs	r2, #0
 800b91a:	2110      	movs	r1, #16
 800b91c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b920:	f7f7 f9c2 	bl	8002ca8 <HAL_GPIO_WritePin>
     *  Display_crtl_2 = 1 to enable display.
     *  Luego de un tiempo olvidé porque hice este comentario, no parece
     *  tener sentido.
     *
     */
    prepare_to_send(0x1);
 800b924:	2001      	movs	r0, #1
 800b926:	f7ff ff1b 	bl	800b760 <prepare_to_send>
    HAL_SPI_Transmit(&h_spi1, &(g_device_ctrl.reg_data), 1, DEFAULT_DELAY);
 800b92a:	2314      	movs	r3, #20
 800b92c:	2201      	movs	r2, #1
 800b92e:	490c      	ldr	r1, [pc, #48]	; (800b960 <pcf8553_init+0x5c>)
 800b930:	480c      	ldr	r0, [pc, #48]	; (800b964 <pcf8553_init+0x60>)
 800b932:	f7f9 f940 	bl	8004bb6 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&h_spi1, &(g_display_ctrl_1.reg_data), 1, DEFAULT_DELAY);
 800b936:	2314      	movs	r3, #20
 800b938:	2201      	movs	r2, #1
 800b93a:	490b      	ldr	r1, [pc, #44]	; (800b968 <pcf8553_init+0x64>)
 800b93c:	4809      	ldr	r0, [pc, #36]	; (800b964 <pcf8553_init+0x60>)
 800b93e:	f7f9 f93a 	bl	8004bb6 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&h_spi1, &(g_display_ctrl_2.reg_data), 1, DEFAULT_DELAY);
 800b942:	2314      	movs	r3, #20
 800b944:	2201      	movs	r2, #1
 800b946:	4909      	ldr	r1, [pc, #36]	; (800b96c <pcf8553_init+0x68>)
 800b948:	4806      	ldr	r0, [pc, #24]	; (800b964 <pcf8553_init+0x60>)
 800b94a:	f7f9 f934 	bl	8004bb6 <HAL_SPI_Transmit>

    /*
     *  Chip disable.
     *
     */
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_SET);
 800b94e:	2201      	movs	r2, #1
 800b950:	2110      	movs	r1, #16
 800b952:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b956:	f7f7 f9a7 	bl	8002ca8 <HAL_GPIO_WritePin>
}
 800b95a:	bf00      	nop
 800b95c:	bd80      	pop	{r7, pc}
 800b95e:	bf00      	nop
 800b960:	20003938 	.word	0x20003938
 800b964:	200038c0 	.word	0x200038c0
 800b968:	200000ac 	.word	0x200000ac
 800b96c:	2000393c 	.word	0x2000393c

0800b970 <pcf8553_reset>:
 * at least 10 μs.
 * @param  None
 * @retval None
 */
void pcf8553_reset()
{
 800b970:	b580      	push	{r7, lr}
 800b972:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PCF8553_RESET_PORT, PCF8553_RESET_PIN, GPIO_PIN_RESET);
 800b974:	2200      	movs	r2, #0
 800b976:	2120      	movs	r1, #32
 800b978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b97c:	f7f7 f994 	bl	8002ca8 <HAL_GPIO_WritePin>
    HAL_Delay(DEFAULT_DELAY);
 800b980:	2314      	movs	r3, #20
 800b982:	4618      	mov	r0, r3
 800b984:	f7f5 fc0e 	bl	80011a4 <HAL_Delay>
    HAL_GPIO_WritePin(PCF8553_RESET_PORT, PCF8553_RESET_Pin, GPIO_PIN_SET);
 800b988:	2201      	movs	r2, #1
 800b98a:	2140      	movs	r1, #64	; 0x40
 800b98c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b990:	f7f7 f98a 	bl	8002ca8 <HAL_GPIO_WritePin>
}
 800b994:	bf00      	nop
 800b996:	bd80      	pop	{r7, pc}

0800b998 <pcf8553_write_all>:
 * futuro se hará con una enumeración que lo deje claro, ya sea en esta función
 * o en una de mas alto nivel.
 * @retval None
 */
void pcf8553_write_all(uint8_t data)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b084      	sub	sp, #16
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	4603      	mov	r3, r0
 800b9a0:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	60fb      	str	r3, [r7, #12]
 800b9a6:	e007      	b.n	800b9b8 <pcf8553_write_all+0x20>
    {
        g_lcd_map[i] = data;
 800b9a8:	4a08      	ldr	r2, [pc, #32]	; (800b9cc <pcf8553_write_all+0x34>)
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	4413      	add	r3, r2
 800b9ae:	79fa      	ldrb	r2, [r7, #7]
 800b9b0:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	60fb      	str	r3, [r7, #12]
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	2b13      	cmp	r3, #19
 800b9bc:	ddf4      	ble.n	800b9a8 <pcf8553_write_all+0x10>
    }
    pcf8553_dump();
 800b9be:	f7ff ff75 	bl	800b8ac <pcf8553_dump>
}
 800b9c2:	bf00      	nop
 800b9c4:	3710      	adds	r7, #16
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}
 800b9ca:	bf00      	nop
 800b9cc:	20003924 	.word	0x20003924

0800b9d0 <fm_menu_config_date_hour>:
 * @brief Función que imprime el menú de configuración de fecha y hora.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_date_hour(fm_event_t event_id)
{
 800b9d0:	b5b0      	push	{r4, r5, r7, lr}
 800b9d2:	b08a      	sub	sp, #40	; 0x28
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_date_hour;
 800b9da:	4b2b      	ldr	r3, [pc, #172]	; (800ba88 <fm_menu_config_date_hour+0xb8>)
 800b9dc:	627b      	str	r3, [r7, #36]	; 0x24
    fm_event_t event_now;

    if (new_entry == 1)
 800b9de:	4b2b      	ldr	r3, [pc, #172]	; (800ba8c <fm_menu_config_date_hour+0xbc>)
 800b9e0:	781b      	ldrb	r3, [r3, #0]
 800b9e2:	2b01      	cmp	r3, #1
 800b9e4:	d104      	bne.n	800b9f0 <fm_menu_config_date_hour+0x20>
    {
        fm_lcd_clear();
 800b9e6:	f7fe fc4a 	bl	800a27e <fm_lcd_clear>
        new_entry = 0;
 800b9ea:	4b28      	ldr	r3, [pc, #160]	; (800ba8c <fm_menu_config_date_hour+0xbc>)
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_date_hour(freeze_time, freeze_date);
 800b9f0:	4b27      	ldr	r3, [pc, #156]	; (800ba90 <fm_menu_config_date_hour+0xc0>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4a27      	ldr	r2, [pc, #156]	; (800ba94 <fm_menu_config_date_hour+0xc4>)
 800b9f6:	6812      	ldr	r2, [r2, #0]
 800b9f8:	4611      	mov	r1, r2
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7fe fc45 	bl	800a28a <fm_lcd_date_hour>
    fm_lcd_refresh();
 800ba00:	f7fe fe04 	bl	800a60c <fm_lcd_refresh>

    switch (event_id)
 800ba04:	79fb      	ldrb	r3, [r7, #7]
 800ba06:	3b02      	subs	r3, #2
 800ba08:	2b03      	cmp	r3, #3
 800ba0a:	d81c      	bhi.n	800ba46 <fm_menu_config_date_hour+0x76>
 800ba0c:	a201      	add	r2, pc, #4	; (adr r2, 800ba14 <fm_menu_config_date_hour+0x44>)
 800ba0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba12:	bf00      	nop
 800ba14:	0800ba47 	.word	0x0800ba47
 800ba18:	0800ba47 	.word	0x0800ba47
 800ba1c:	0800ba47 	.word	0x0800ba47
 800ba20:	0800ba25 	.word	0x0800ba25
        case EVENT_KEY_DOWN:
        break;
        case EVENT_KEY_ENTER:
        break;
        case EVENT_KEY_ESC:
            new_exit = 1;
 800ba24:	4b1c      	ldr	r3, [pc, #112]	; (800ba98 <fm_menu_config_date_hour+0xc8>)
 800ba26:	2201      	movs	r2, #1
 800ba28:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
 800ba2a:	4b1c      	ldr	r3, [pc, #112]	; (800ba9c <fm_menu_config_date_hour+0xcc>)
 800ba2c:	627b      	str	r3, [r7, #36]	; 0x24
            event_now = EVENT_LCD_REFRESH;
 800ba2e:	2301      	movs	r3, #1
 800ba30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            osMessageQueuePut(h_event_queue, &event_now, 0, 0);
 800ba34:	4b1a      	ldr	r3, [pc, #104]	; (800baa0 <fm_menu_config_date_hour+0xd0>)
 800ba36:	6818      	ldr	r0, [r3, #0]
 800ba38:	f107 0123 	add.w	r1, r7, #35	; 0x23
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	2200      	movs	r2, #0
 800ba40:	f7fa fdfa 	bl	8006638 <osMessageQueuePut>
        break;
 800ba44:	e000      	b.n	800ba48 <fm_menu_config_date_hour+0x78>
        default:
        break;
 800ba46:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar fecha y hora\n";
 800ba48:	4b16      	ldr	r3, [pc, #88]	; (800baa4 <fm_menu_config_date_hour+0xd4>)
 800ba4a:	f107 0408 	add.w	r4, r7, #8
 800ba4e:	461d      	mov	r5, r3
 800ba50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ba58:	c403      	stmia	r4!, {r0, r1}
 800ba5a:	7022      	strb	r2, [r4, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 800ba5c:	f107 0308 	add.w	r3, r7, #8
 800ba60:	2119      	movs	r1, #25
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7fe f95a 	bl	8009d1c <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 800ba68:	4b0b      	ldr	r3, [pc, #44]	; (800ba98 <fm_menu_config_date_hour+0xc8>)
 800ba6a:	781b      	ldrb	r3, [r3, #0]
 800ba6c:	2b01      	cmp	r3, #1
 800ba6e:	d105      	bne.n	800ba7c <fm_menu_config_date_hour+0xac>
    {
        new_entry = 1;
 800ba70:	4b06      	ldr	r3, [pc, #24]	; (800ba8c <fm_menu_config_date_hour+0xbc>)
 800ba72:	2201      	movs	r2, #1
 800ba74:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800ba76:	4b08      	ldr	r3, [pc, #32]	; (800ba98 <fm_menu_config_date_hour+0xc8>)
 800ba78:	2200      	movs	r2, #0
 800ba7a:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800ba7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3728      	adds	r7, #40	; 0x28
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bdb0      	pop	{r4, r5, r7, pc}
 800ba86:	bf00      	nop
 800ba88:	0800b9d1 	.word	0x0800b9d1
 800ba8c:	200000ad 	.word	0x200000ad
 800ba90:	20003940 	.word	0x20003940
 800ba94:	20003944 	.word	0x20003944
 800ba98:	20003949 	.word	0x20003949
 800ba9c:	0800c619 	.word	0x0800c619
 800baa0:	200038a0 	.word	0x200038a0
 800baa4:	0800d6a8 	.word	0x0800d6a8

0800baa8 <fm_menu_config_k_param>:
 * K.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_k_param(fm_event_t event_id)
{
 800baa8:	b5b0      	push	{r4, r5, r7, lr}
 800baaa:	b08a      	sub	sp, #40	; 0x28
 800baac:	af00      	add	r7, sp, #0
 800baae:	4603      	mov	r3, r0
 800bab0:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_t digit_modify = DIG_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
 800bab2:	4b64      	ldr	r3, [pc, #400]	; (800bc44 <fm_menu_config_k_param+0x19c>)
 800bab4:	627b      	str	r3, [r7, #36]	; 0x24
    fm_event_t event_now;

    if (new_entry == 1)
 800bab6:	4b64      	ldr	r3, [pc, #400]	; (800bc48 <fm_menu_config_k_param+0x1a0>)
 800bab8:	781b      	ldrb	r3, [r3, #0]
 800baba:	2b01      	cmp	r3, #1
 800babc:	d104      	bne.n	800bac8 <fm_menu_config_k_param+0x20>
    {
        fm_lcd_clear();
 800babe:	f7fe fbde 	bl	800a27e <fm_lcd_clear>
        new_entry = 0;
 800bac2:	4b61      	ldr	r3, [pc, #388]	; (800bc48 <fm_menu_config_k_param+0x1a0>)
 800bac4:	2200      	movs	r2, #0
 800bac6:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_factor();
 800bac8:	f7fe fd2c 	bl	800a524 <fm_lcd_k_factor>
    fm_lcd_refresh();
 800bacc:	f7fe fd9e 	bl	800a60c <fm_lcd_refresh>

    switch (event_id)
 800bad0:	79fb      	ldrb	r3, [r7, #7]
 800bad2:	3b02      	subs	r3, #2
 800bad4:	2b03      	cmp	r3, #3
 800bad6:	f200 8095 	bhi.w	800bc04 <fm_menu_config_k_param+0x15c>
 800bada:	a201      	add	r2, pc, #4	; (adr r2, 800bae0 <fm_menu_config_k_param+0x38>)
 800badc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bae0:	0800baf1 	.word	0x0800baf1
 800bae4:	0800bb1b 	.word	0x0800bb1b
 800bae8:	0800bb45 	.word	0x0800bb45
 800baec:	0800bbe3 	.word	0x0800bbe3
    {
        case EVENT_KEY_UP:
            if (correct_password)
 800baf0:	4b56      	ldr	r3, [pc, #344]	; (800bc4c <fm_menu_config_k_param+0x1a4>)
 800baf2:	781b      	ldrb	r3, [r3, #0]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d004      	beq.n	800bb02 <fm_menu_config_k_param+0x5a>
            {
                fm_factory_modify_k_factor_add(digit_modify);
 800baf8:	4b55      	ldr	r3, [pc, #340]	; (800bc50 <fm_menu_config_k_param+0x1a8>)
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	4618      	mov	r0, r3
 800bafe:	f7fe f9f1 	bl	8009ee4 <fm_factory_modify_k_factor_add>
            }
            event_now = EVENT_LCD_REFRESH;
 800bb02:	2301      	movs	r3, #1
 800bb04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            osMessageQueuePut(h_event_queue, &event_now, 0, 0);
 800bb08:	4b52      	ldr	r3, [pc, #328]	; (800bc54 <fm_menu_config_k_param+0x1ac>)
 800bb0a:	6818      	ldr	r0, [r3, #0]
 800bb0c:	f107 0123 	add.w	r1, r7, #35	; 0x23
 800bb10:	2300      	movs	r3, #0
 800bb12:	2200      	movs	r2, #0
 800bb14:	f7fa fd90 	bl	8006638 <osMessageQueuePut>
        break;
 800bb18:	e075      	b.n	800bc06 <fm_menu_config_k_param+0x15e>
        case EVENT_KEY_DOWN:
            if (correct_password)
 800bb1a:	4b4c      	ldr	r3, [pc, #304]	; (800bc4c <fm_menu_config_k_param+0x1a4>)
 800bb1c:	781b      	ldrb	r3, [r3, #0]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d004      	beq.n	800bb2c <fm_menu_config_k_param+0x84>
            {
                fm_factory_modify_k_factor_subs(digit_modify);
 800bb22:	4b4b      	ldr	r3, [pc, #300]	; (800bc50 <fm_menu_config_k_param+0x1a8>)
 800bb24:	781b      	ldrb	r3, [r3, #0]
 800bb26:	4618      	mov	r0, r3
 800bb28:	f7fe f99c 	bl	8009e64 <fm_factory_modify_k_factor_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            osMessageQueuePut(h_event_queue, &event_now, 0, 0);
 800bb32:	4b48      	ldr	r3, [pc, #288]	; (800bc54 <fm_menu_config_k_param+0x1ac>)
 800bb34:	6818      	ldr	r0, [r3, #0]
 800bb36:	f107 0123 	add.w	r1, r7, #35	; 0x23
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	f7fa fd7b 	bl	8006638 <osMessageQueuePut>
        break;
 800bb42:	e060      	b.n	800bc06 <fm_menu_config_k_param+0x15e>
        case EVENT_KEY_ENTER:
            if (correct_password)
 800bb44:	4b41      	ldr	r3, [pc, #260]	; (800bc4c <fm_menu_config_k_param+0x1a4>)
 800bb46:	781b      	ldrb	r3, [r3, #0]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d03e      	beq.n	800bbca <fm_menu_config_k_param+0x122>
            {
                if (digit_modify == DIG_0)
 800bb4c:	4b40      	ldr	r3, [pc, #256]	; (800bc50 <fm_menu_config_k_param+0x1a8>)
 800bb4e:	781b      	ldrb	r3, [r3, #0]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d103      	bne.n	800bb5c <fm_menu_config_k_param+0xb4>
                {
                    digit_modify = DIG_1;
 800bb54:	4b3e      	ldr	r3, [pc, #248]	; (800bc50 <fm_menu_config_k_param+0x1a8>)
 800bb56:	2201      	movs	r2, #1
 800bb58:	701a      	strb	r2, [r3, #0]
 800bb5a:	e036      	b.n	800bbca <fm_menu_config_k_param+0x122>
                }
                else if (digit_modify == DIG_1)
 800bb5c:	4b3c      	ldr	r3, [pc, #240]	; (800bc50 <fm_menu_config_k_param+0x1a8>)
 800bb5e:	781b      	ldrb	r3, [r3, #0]
 800bb60:	2b01      	cmp	r3, #1
 800bb62:	d103      	bne.n	800bb6c <fm_menu_config_k_param+0xc4>
                {
                    digit_modify = DIG_2;
 800bb64:	4b3a      	ldr	r3, [pc, #232]	; (800bc50 <fm_menu_config_k_param+0x1a8>)
 800bb66:	2202      	movs	r2, #2
 800bb68:	701a      	strb	r2, [r3, #0]
 800bb6a:	e02e      	b.n	800bbca <fm_menu_config_k_param+0x122>
                }
                else if (digit_modify == DIG_2)
 800bb6c:	4b38      	ldr	r3, [pc, #224]	; (800bc50 <fm_menu_config_k_param+0x1a8>)
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	2b02      	cmp	r3, #2
 800bb72:	d103      	bne.n	800bb7c <fm_menu_config_k_param+0xd4>
                {
                    digit_modify = DIG_3;
 800bb74:	4b36      	ldr	r3, [pc, #216]	; (800bc50 <fm_menu_config_k_param+0x1a8>)
 800bb76:	2203      	movs	r2, #3
 800bb78:	701a      	strb	r2, [r3, #0]
 800bb7a:	e026      	b.n	800bbca <fm_menu_config_k_param+0x122>
                }
                else if (digit_modify == DIG_3)
 800bb7c:	4b34      	ldr	r3, [pc, #208]	; (800bc50 <fm_menu_config_k_param+0x1a8>)
 800bb7e:	781b      	ldrb	r3, [r3, #0]
 800bb80:	2b03      	cmp	r3, #3
 800bb82:	d103      	bne.n	800bb8c <fm_menu_config_k_param+0xe4>
                {
                    digit_modify = DIG_4;
 800bb84:	4b32      	ldr	r3, [pc, #200]	; (800bc50 <fm_menu_config_k_param+0x1a8>)
 800bb86:	2204      	movs	r2, #4
 800bb88:	701a      	strb	r2, [r3, #0]
 800bb8a:	e01e      	b.n	800bbca <fm_menu_config_k_param+0x122>
                }
                else if (digit_modify == DIG_4)
 800bb8c:	4b30      	ldr	r3, [pc, #192]	; (800bc50 <fm_menu_config_k_param+0x1a8>)
 800bb8e:	781b      	ldrb	r3, [r3, #0]
 800bb90:	2b04      	cmp	r3, #4
 800bb92:	d103      	bne.n	800bb9c <fm_menu_config_k_param+0xf4>
                {
                    digit_modify = DIG_5;
 800bb94:	4b2e      	ldr	r3, [pc, #184]	; (800bc50 <fm_menu_config_k_param+0x1a8>)
 800bb96:	2205      	movs	r2, #5
 800bb98:	701a      	strb	r2, [r3, #0]
 800bb9a:	e016      	b.n	800bbca <fm_menu_config_k_param+0x122>
                }
                else if (digit_modify == DIG_5)
 800bb9c:	4b2c      	ldr	r3, [pc, #176]	; (800bc50 <fm_menu_config_k_param+0x1a8>)
 800bb9e:	781b      	ldrb	r3, [r3, #0]
 800bba0:	2b05      	cmp	r3, #5
 800bba2:	d103      	bne.n	800bbac <fm_menu_config_k_param+0x104>
                {
                    digit_modify = DIG_6;
 800bba4:	4b2a      	ldr	r3, [pc, #168]	; (800bc50 <fm_menu_config_k_param+0x1a8>)
 800bba6:	2206      	movs	r2, #6
 800bba8:	701a      	strb	r2, [r3, #0]
 800bbaa:	e00e      	b.n	800bbca <fm_menu_config_k_param+0x122>
                }
                else if (digit_modify == DIG_6)
 800bbac:	4b28      	ldr	r3, [pc, #160]	; (800bc50 <fm_menu_config_k_param+0x1a8>)
 800bbae:	781b      	ldrb	r3, [r3, #0]
 800bbb0:	2b06      	cmp	r3, #6
 800bbb2:	d103      	bne.n	800bbbc <fm_menu_config_k_param+0x114>
                {
                    digit_modify = DIG_7;
 800bbb4:	4b26      	ldr	r3, [pc, #152]	; (800bc50 <fm_menu_config_k_param+0x1a8>)
 800bbb6:	2207      	movs	r2, #7
 800bbb8:	701a      	strb	r2, [r3, #0]
 800bbba:	e006      	b.n	800bbca <fm_menu_config_k_param+0x122>
                }
                else if (digit_modify == DIG_7)
 800bbbc:	4b24      	ldr	r3, [pc, #144]	; (800bc50 <fm_menu_config_k_param+0x1a8>)
 800bbbe:	781b      	ldrb	r3, [r3, #0]
 800bbc0:	2b07      	cmp	r3, #7
 800bbc2:	d102      	bne.n	800bbca <fm_menu_config_k_param+0x122>
                {
                    digit_modify = DIG_0;
 800bbc4:	4b22      	ldr	r3, [pc, #136]	; (800bc50 <fm_menu_config_k_param+0x1a8>)
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 800bbca:	2301      	movs	r3, #1
 800bbcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            osMessageQueuePut(h_event_queue, &event_now, 0, 0);
 800bbd0:	4b20      	ldr	r3, [pc, #128]	; (800bc54 <fm_menu_config_k_param+0x1ac>)
 800bbd2:	6818      	ldr	r0, [r3, #0]
 800bbd4:	f107 0123 	add.w	r1, r7, #35	; 0x23
 800bbd8:	2300      	movs	r3, #0
 800bbda:	2200      	movs	r2, #0
 800bbdc:	f7fa fd2c 	bl	8006638 <osMessageQueuePut>
        break;
 800bbe0:	e011      	b.n	800bc06 <fm_menu_config_k_param+0x15e>
        case EVENT_KEY_ESC:
            new_exit = 1;
 800bbe2:	4b1d      	ldr	r3, [pc, #116]	; (800bc58 <fm_menu_config_k_param+0x1b0>)
 800bbe4:	2201      	movs	r2, #1
 800bbe6:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_units;
 800bbe8:	4b1c      	ldr	r3, [pc, #112]	; (800bc5c <fm_menu_config_k_param+0x1b4>)
 800bbea:	627b      	str	r3, [r7, #36]	; 0x24
            event_now = EVENT_LCD_REFRESH;
 800bbec:	2301      	movs	r3, #1
 800bbee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            osMessageQueuePut(h_event_queue, &event_now, 0, 0);
 800bbf2:	4b18      	ldr	r3, [pc, #96]	; (800bc54 <fm_menu_config_k_param+0x1ac>)
 800bbf4:	6818      	ldr	r0, [r3, #0]
 800bbf6:	f107 0123 	add.w	r1, r7, #35	; 0x23
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	f7fa fd1b 	bl	8006638 <osMessageQueuePut>
        break;
 800bc02:	e000      	b.n	800bc06 <fm_menu_config_k_param+0x15e>
        default:
        break;
 800bc04:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar parametro K\n";
 800bc06:	4b16      	ldr	r3, [pc, #88]	; (800bc60 <fm_menu_config_k_param+0x1b8>)
 800bc08:	f107 0408 	add.w	r4, r7, #8
 800bc0c:	461d      	mov	r5, r3
 800bc0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bc12:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bc16:	e884 0003 	stmia.w	r4, {r0, r1}
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 800bc1a:	f107 0308 	add.w	r3, r7, #8
 800bc1e:	2118      	movs	r1, #24
 800bc20:	4618      	mov	r0, r3
 800bc22:	f7fe f87b 	bl	8009d1c <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 800bc26:	4b0c      	ldr	r3, [pc, #48]	; (800bc58 <fm_menu_config_k_param+0x1b0>)
 800bc28:	781b      	ldrb	r3, [r3, #0]
 800bc2a:	2b01      	cmp	r3, #1
 800bc2c:	d105      	bne.n	800bc3a <fm_menu_config_k_param+0x192>
    {
        new_entry = 1;
 800bc2e:	4b06      	ldr	r3, [pc, #24]	; (800bc48 <fm_menu_config_k_param+0x1a0>)
 800bc30:	2201      	movs	r2, #1
 800bc32:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800bc34:	4b08      	ldr	r3, [pc, #32]	; (800bc58 <fm_menu_config_k_param+0x1b0>)
 800bc36:	2200      	movs	r2, #0
 800bc38:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800bc3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3728      	adds	r7, #40	; 0x28
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bdb0      	pop	{r4, r5, r7, pc}
 800bc44:	0800baa9 	.word	0x0800baa9
 800bc48:	200000ae 	.word	0x200000ae
 800bc4c:	20003948 	.word	0x20003948
 800bc50:	2000394a 	.word	0x2000394a
 800bc54:	200038a0 	.word	0x200038a0
 800bc58:	2000394b 	.word	0x2000394b
 800bc5c:	0800bf45 	.word	0x0800bf45
 800bc60:	0800d6e4 	.word	0x0800d6e4

0800bc64 <fm_menu_config_pass>:
 * almacenada en memoria (DOWN -> UP -> UP -> ENTER).
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_pass(fm_event_t event_id)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b086      	sub	sp, #24
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	71fb      	strb	r3, [r7, #7]
        0,
        0
    };
    static uint8_t password_index = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 800bc6e:	4baa      	ldr	r3, [pc, #680]	; (800bf18 <fm_menu_config_pass+0x2b4>)
 800bc70:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 800bc72:	4baa      	ldr	r3, [pc, #680]	; (800bf1c <fm_menu_config_pass+0x2b8>)
 800bc74:	781b      	ldrb	r3, [r3, #0]
 800bc76:	2b01      	cmp	r3, #1
 800bc78:	d107      	bne.n	800bc8a <fm_menu_config_pass+0x26>
    {
        correct_password = 0;
 800bc7a:	4ba9      	ldr	r3, [pc, #676]	; (800bf20 <fm_menu_config_pass+0x2bc>)
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	701a      	strb	r2, [r3, #0]
        fm_lcd_clear();
 800bc80:	f7fe fafd 	bl	800a27e <fm_lcd_clear>
        new_entry = 0;
 800bc84:	4ba5      	ldr	r3, [pc, #660]	; (800bf1c <fm_menu_config_pass+0x2b8>)
 800bc86:	2200      	movs	r2, #0
 800bc88:	701a      	strb	r2, [r3, #0]
    }

    lcd_set_symbol(PASS, 0x00);
 800bc8a:	2100      	movs	r1, #0
 800bc8c:	200a      	movs	r0, #10
 800bc8e:	f7ff f871 	bl	800ad74 <lcd_set_symbol>
    /*
     * Cada vez que se introduce un dígito de la contraseña, aparece un 8 nuevo
     * en la pantalla, hasta 3 veces (luego de la cuarta vez, se pasa al menú
     * de configuración del factor K).
     */
    if (password_index == 1)
 800bc92:	4ba4      	ldr	r3, [pc, #656]	; (800bf24 <fm_menu_config_pass+0x2c0>)
 800bc94:	781b      	ldrb	r3, [r3, #0]
 800bc96:	2b01      	cmp	r3, #1
 800bc98:	d104      	bne.n	800bca4 <fm_menu_config_pass+0x40>
    {
        lcd_set_symbol(PASS1, 0x00);
 800bc9a:	2100      	movs	r1, #0
 800bc9c:	200c      	movs	r0, #12
 800bc9e:	f7ff f869 	bl	800ad74 <lcd_set_symbol>
 800bca2:	e010      	b.n	800bcc6 <fm_menu_config_pass+0x62>
    }
    else if (password_index == 2)
 800bca4:	4b9f      	ldr	r3, [pc, #636]	; (800bf24 <fm_menu_config_pass+0x2c0>)
 800bca6:	781b      	ldrb	r3, [r3, #0]
 800bca8:	2b02      	cmp	r3, #2
 800bcaa:	d104      	bne.n	800bcb6 <fm_menu_config_pass+0x52>
    {
        lcd_set_symbol(PASS2, 0x00);
 800bcac:	2100      	movs	r1, #0
 800bcae:	200d      	movs	r0, #13
 800bcb0:	f7ff f860 	bl	800ad74 <lcd_set_symbol>
 800bcb4:	e007      	b.n	800bcc6 <fm_menu_config_pass+0x62>
    }
    else if (password_index == 3)
 800bcb6:	4b9b      	ldr	r3, [pc, #620]	; (800bf24 <fm_menu_config_pass+0x2c0>)
 800bcb8:	781b      	ldrb	r3, [r3, #0]
 800bcba:	2b03      	cmp	r3, #3
 800bcbc:	d103      	bne.n	800bcc6 <fm_menu_config_pass+0x62>
    {
        lcd_set_symbol(PASS3, 0x00);
 800bcbe:	2100      	movs	r1, #0
 800bcc0:	200e      	movs	r0, #14
 800bcc2:	f7ff f857 	bl	800ad74 <lcd_set_symbol>
    }
    fm_lcd_refresh();
 800bcc6:	f7fe fca1 	bl	800a60c <fm_lcd_refresh>

    switch (event_id)
 800bcca:	79fb      	ldrb	r3, [r7, #7]
 800bccc:	3b02      	subs	r3, #2
 800bcce:	2b03      	cmp	r3, #3
 800bcd0:	f200 80e0 	bhi.w	800be94 <fm_menu_config_pass+0x230>
 800bcd4:	a201      	add	r2, pc, #4	; (adr r2, 800bcdc <fm_menu_config_pass+0x78>)
 800bcd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcda:	bf00      	nop
 800bcdc:	0800bced 	.word	0x0800bced
 800bce0:	0800bd57 	.word	0x0800bd57
 800bce4:	0800bdc1 	.word	0x0800bdc1
 800bce8:	0800be2b 	.word	0x0800be2b
    {
        case EVENT_KEY_UP:
            password[password_index] = 1;
 800bcec:	4b8d      	ldr	r3, [pc, #564]	; (800bf24 <fm_menu_config_pass+0x2c0>)
 800bcee:	781b      	ldrb	r3, [r3, #0]
 800bcf0:	461a      	mov	r2, r3
 800bcf2:	4b8d      	ldr	r3, [pc, #564]	; (800bf28 <fm_menu_config_pass+0x2c4>)
 800bcf4:	2101      	movs	r1, #1
 800bcf6:	5499      	strb	r1, [r3, r2]

            if (password_index < 3)
 800bcf8:	4b8a      	ldr	r3, [pc, #552]	; (800bf24 <fm_menu_config_pass+0x2c0>)
 800bcfa:	781b      	ldrb	r3, [r3, #0]
 800bcfc:	2b02      	cmp	r3, #2
 800bcfe:	d810      	bhi.n	800bd22 <fm_menu_config_pass+0xbe>
            {
                event_now = EVENT_LCD_REFRESH;
 800bd00:	2301      	movs	r3, #1
 800bd02:	74fb      	strb	r3, [r7, #19]
                osMessageQueuePut(h_event_queue, &event_now, 0, 0);
 800bd04:	4b89      	ldr	r3, [pc, #548]	; (800bf2c <fm_menu_config_pass+0x2c8>)
 800bd06:	6818      	ldr	r0, [r3, #0]
 800bd08:	f107 0113 	add.w	r1, r7, #19
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	2200      	movs	r2, #0
 800bd10:	f7fa fc92 	bl	8006638 <osMessageQueuePut>
                password_index++;
 800bd14:	4b83      	ldr	r3, [pc, #524]	; (800bf24 <fm_menu_config_pass+0x2c0>)
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	3301      	adds	r3, #1
 800bd1a:	b2da      	uxtb	r2, r3
 800bd1c:	4b81      	ldr	r3, [pc, #516]	; (800bf24 <fm_menu_config_pass+0x2c0>)
 800bd1e:	701a      	strb	r2, [r3, #0]
                osMessageQueuePut(h_event_queue, &event_now, 0, 0);

                freeze_date = fm_calendar_format_date();
                freeze_time = fm_calendar_format_time();
            }
        break;
 800bd20:	e0b9      	b.n	800be96 <fm_menu_config_pass+0x232>
                new_exit = 1;
 800bd22:	4b83      	ldr	r3, [pc, #524]	; (800bf30 <fm_menu_config_pass+0x2cc>)
 800bd24:	2201      	movs	r2, #1
 800bd26:	701a      	strb	r2, [r3, #0]
                ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
 800bd28:	4b82      	ldr	r3, [pc, #520]	; (800bf34 <fm_menu_config_pass+0x2d0>)
 800bd2a:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	74fb      	strb	r3, [r7, #19]
                osMessageQueuePut(h_event_queue, &event_now, 0, 0);
 800bd30:	4b7e      	ldr	r3, [pc, #504]	; (800bf2c <fm_menu_config_pass+0x2c8>)
 800bd32:	6818      	ldr	r0, [r3, #0]
 800bd34:	f107 0113 	add.w	r1, r7, #19
 800bd38:	2300      	movs	r3, #0
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	f7fa fc7c 	bl	8006638 <osMessageQueuePut>
                freeze_date = fm_calendar_format_date();
 800bd40:	f7fd ffc8 	bl	8009cd4 <fm_calendar_format_date>
 800bd44:	4603      	mov	r3, r0
 800bd46:	4a7c      	ldr	r2, [pc, #496]	; (800bf38 <fm_menu_config_pass+0x2d4>)
 800bd48:	6013      	str	r3, [r2, #0]
                freeze_time = fm_calendar_format_time();
 800bd4a:	f7fd ff9f 	bl	8009c8c <fm_calendar_format_time>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	4a7a      	ldr	r2, [pc, #488]	; (800bf3c <fm_menu_config_pass+0x2d8>)
 800bd52:	6013      	str	r3, [r2, #0]
        break;
 800bd54:	e09f      	b.n	800be96 <fm_menu_config_pass+0x232>
        case EVENT_KEY_DOWN:
            password[password_index] = 2;
 800bd56:	4b73      	ldr	r3, [pc, #460]	; (800bf24 <fm_menu_config_pass+0x2c0>)
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	461a      	mov	r2, r3
 800bd5c:	4b72      	ldr	r3, [pc, #456]	; (800bf28 <fm_menu_config_pass+0x2c4>)
 800bd5e:	2102      	movs	r1, #2
 800bd60:	5499      	strb	r1, [r3, r2]

            if (password_index < 3)
 800bd62:	4b70      	ldr	r3, [pc, #448]	; (800bf24 <fm_menu_config_pass+0x2c0>)
 800bd64:	781b      	ldrb	r3, [r3, #0]
 800bd66:	2b02      	cmp	r3, #2
 800bd68:	d810      	bhi.n	800bd8c <fm_menu_config_pass+0x128>
            {
                event_now = EVENT_LCD_REFRESH;
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	74fb      	strb	r3, [r7, #19]
                osMessageQueuePut(h_event_queue, &event_now, 0, 0);
 800bd6e:	4b6f      	ldr	r3, [pc, #444]	; (800bf2c <fm_menu_config_pass+0x2c8>)
 800bd70:	6818      	ldr	r0, [r3, #0]
 800bd72:	f107 0113 	add.w	r1, r7, #19
 800bd76:	2300      	movs	r3, #0
 800bd78:	2200      	movs	r2, #0
 800bd7a:	f7fa fc5d 	bl	8006638 <osMessageQueuePut>
                password_index++;
 800bd7e:	4b69      	ldr	r3, [pc, #420]	; (800bf24 <fm_menu_config_pass+0x2c0>)
 800bd80:	781b      	ldrb	r3, [r3, #0]
 800bd82:	3301      	adds	r3, #1
 800bd84:	b2da      	uxtb	r2, r3
 800bd86:	4b67      	ldr	r3, [pc, #412]	; (800bf24 <fm_menu_config_pass+0x2c0>)
 800bd88:	701a      	strb	r2, [r3, #0]
                osMessageQueuePut(h_event_queue, &event_now, 0, 0);

                freeze_date = fm_calendar_format_date();
                freeze_time = fm_calendar_format_time();
            }
        break;
 800bd8a:	e084      	b.n	800be96 <fm_menu_config_pass+0x232>
                new_exit = 1;
 800bd8c:	4b68      	ldr	r3, [pc, #416]	; (800bf30 <fm_menu_config_pass+0x2cc>)
 800bd8e:	2201      	movs	r2, #1
 800bd90:	701a      	strb	r2, [r3, #0]
                ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
 800bd92:	4b68      	ldr	r3, [pc, #416]	; (800bf34 <fm_menu_config_pass+0x2d0>)
 800bd94:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 800bd96:	2301      	movs	r3, #1
 800bd98:	74fb      	strb	r3, [r7, #19]
                osMessageQueuePut(h_event_queue, &event_now, 0, 0);
 800bd9a:	4b64      	ldr	r3, [pc, #400]	; (800bf2c <fm_menu_config_pass+0x2c8>)
 800bd9c:	6818      	ldr	r0, [r3, #0]
 800bd9e:	f107 0113 	add.w	r1, r7, #19
 800bda2:	2300      	movs	r3, #0
 800bda4:	2200      	movs	r2, #0
 800bda6:	f7fa fc47 	bl	8006638 <osMessageQueuePut>
                freeze_date = fm_calendar_format_date();
 800bdaa:	f7fd ff93 	bl	8009cd4 <fm_calendar_format_date>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	4a61      	ldr	r2, [pc, #388]	; (800bf38 <fm_menu_config_pass+0x2d4>)
 800bdb2:	6013      	str	r3, [r2, #0]
                freeze_time = fm_calendar_format_time();
 800bdb4:	f7fd ff6a 	bl	8009c8c <fm_calendar_format_time>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	4a60      	ldr	r2, [pc, #384]	; (800bf3c <fm_menu_config_pass+0x2d8>)
 800bdbc:	6013      	str	r3, [r2, #0]
        break;
 800bdbe:	e06a      	b.n	800be96 <fm_menu_config_pass+0x232>
        case EVENT_KEY_ENTER:
            password[password_index] = 3; // @suppress("Avoid magic numbers")
 800bdc0:	4b58      	ldr	r3, [pc, #352]	; (800bf24 <fm_menu_config_pass+0x2c0>)
 800bdc2:	781b      	ldrb	r3, [r3, #0]
 800bdc4:	461a      	mov	r2, r3
 800bdc6:	4b58      	ldr	r3, [pc, #352]	; (800bf28 <fm_menu_config_pass+0x2c4>)
 800bdc8:	2103      	movs	r1, #3
 800bdca:	5499      	strb	r1, [r3, r2]

            if (password_index < 3)
 800bdcc:	4b55      	ldr	r3, [pc, #340]	; (800bf24 <fm_menu_config_pass+0x2c0>)
 800bdce:	781b      	ldrb	r3, [r3, #0]
 800bdd0:	2b02      	cmp	r3, #2
 800bdd2:	d810      	bhi.n	800bdf6 <fm_menu_config_pass+0x192>
            {
                event_now = EVENT_LCD_REFRESH;
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	74fb      	strb	r3, [r7, #19]
                osMessageQueuePut(h_event_queue, &event_now, 0, 0);
 800bdd8:	4b54      	ldr	r3, [pc, #336]	; (800bf2c <fm_menu_config_pass+0x2c8>)
 800bdda:	6818      	ldr	r0, [r3, #0]
 800bddc:	f107 0113 	add.w	r1, r7, #19
 800bde0:	2300      	movs	r3, #0
 800bde2:	2200      	movs	r2, #0
 800bde4:	f7fa fc28 	bl	8006638 <osMessageQueuePut>
                password_index++;
 800bde8:	4b4e      	ldr	r3, [pc, #312]	; (800bf24 <fm_menu_config_pass+0x2c0>)
 800bdea:	781b      	ldrb	r3, [r3, #0]
 800bdec:	3301      	adds	r3, #1
 800bdee:	b2da      	uxtb	r2, r3
 800bdf0:	4b4c      	ldr	r3, [pc, #304]	; (800bf24 <fm_menu_config_pass+0x2c0>)
 800bdf2:	701a      	strb	r2, [r3, #0]
                osMessageQueuePut(h_event_queue, &event_now, 0, 0);

                freeze_date = fm_calendar_format_date();
                freeze_time = fm_calendar_format_time();
            }
        break;
 800bdf4:	e04f      	b.n	800be96 <fm_menu_config_pass+0x232>
                new_exit = 1;
 800bdf6:	4b4e      	ldr	r3, [pc, #312]	; (800bf30 <fm_menu_config_pass+0x2cc>)
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	701a      	strb	r2, [r3, #0]
                ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
 800bdfc:	4b4d      	ldr	r3, [pc, #308]	; (800bf34 <fm_menu_config_pass+0x2d0>)
 800bdfe:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 800be00:	2301      	movs	r3, #1
 800be02:	74fb      	strb	r3, [r7, #19]
                osMessageQueuePut(h_event_queue, &event_now, 0, 0);
 800be04:	4b49      	ldr	r3, [pc, #292]	; (800bf2c <fm_menu_config_pass+0x2c8>)
 800be06:	6818      	ldr	r0, [r3, #0]
 800be08:	f107 0113 	add.w	r1, r7, #19
 800be0c:	2300      	movs	r3, #0
 800be0e:	2200      	movs	r2, #0
 800be10:	f7fa fc12 	bl	8006638 <osMessageQueuePut>
                freeze_date = fm_calendar_format_date();
 800be14:	f7fd ff5e 	bl	8009cd4 <fm_calendar_format_date>
 800be18:	4603      	mov	r3, r0
 800be1a:	4a47      	ldr	r2, [pc, #284]	; (800bf38 <fm_menu_config_pass+0x2d4>)
 800be1c:	6013      	str	r3, [r2, #0]
                freeze_time = fm_calendar_format_time();
 800be1e:	f7fd ff35 	bl	8009c8c <fm_calendar_format_time>
 800be22:	4603      	mov	r3, r0
 800be24:	4a45      	ldr	r2, [pc, #276]	; (800bf3c <fm_menu_config_pass+0x2d8>)
 800be26:	6013      	str	r3, [r2, #0]
        break;
 800be28:	e035      	b.n	800be96 <fm_menu_config_pass+0x232>
        case EVENT_KEY_ESC:
            password[password_index] = 4; // @suppress("Avoid magic numbers")
 800be2a:	4b3e      	ldr	r3, [pc, #248]	; (800bf24 <fm_menu_config_pass+0x2c0>)
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	461a      	mov	r2, r3
 800be30:	4b3d      	ldr	r3, [pc, #244]	; (800bf28 <fm_menu_config_pass+0x2c4>)
 800be32:	2104      	movs	r1, #4
 800be34:	5499      	strb	r1, [r3, r2]

            if (password_index < 3)
 800be36:	4b3b      	ldr	r3, [pc, #236]	; (800bf24 <fm_menu_config_pass+0x2c0>)
 800be38:	781b      	ldrb	r3, [r3, #0]
 800be3a:	2b02      	cmp	r3, #2
 800be3c:	d810      	bhi.n	800be60 <fm_menu_config_pass+0x1fc>
            {
                event_now = EVENT_LCD_REFRESH;
 800be3e:	2301      	movs	r3, #1
 800be40:	74fb      	strb	r3, [r7, #19]
                osMessageQueuePut(h_event_queue, &event_now, 0, 0);
 800be42:	4b3a      	ldr	r3, [pc, #232]	; (800bf2c <fm_menu_config_pass+0x2c8>)
 800be44:	6818      	ldr	r0, [r3, #0]
 800be46:	f107 0113 	add.w	r1, r7, #19
 800be4a:	2300      	movs	r3, #0
 800be4c:	2200      	movs	r2, #0
 800be4e:	f7fa fbf3 	bl	8006638 <osMessageQueuePut>
                password_index++;
 800be52:	4b34      	ldr	r3, [pc, #208]	; (800bf24 <fm_menu_config_pass+0x2c0>)
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	3301      	adds	r3, #1
 800be58:	b2da      	uxtb	r2, r3
 800be5a:	4b32      	ldr	r3, [pc, #200]	; (800bf24 <fm_menu_config_pass+0x2c0>)
 800be5c:	701a      	strb	r2, [r3, #0]
                osMessageQueuePut(h_event_queue, &event_now, 0, 0);

                freeze_date = fm_calendar_format_date();
                freeze_time = fm_calendar_format_time();
            }
        break;
 800be5e:	e01a      	b.n	800be96 <fm_menu_config_pass+0x232>
                new_exit = 1;
 800be60:	4b33      	ldr	r3, [pc, #204]	; (800bf30 <fm_menu_config_pass+0x2cc>)
 800be62:	2201      	movs	r2, #1
 800be64:	701a      	strb	r2, [r3, #0]
                ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
 800be66:	4b33      	ldr	r3, [pc, #204]	; (800bf34 <fm_menu_config_pass+0x2d0>)
 800be68:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 800be6a:	2301      	movs	r3, #1
 800be6c:	74fb      	strb	r3, [r7, #19]
                osMessageQueuePut(h_event_queue, &event_now, 0, 0);
 800be6e:	4b2f      	ldr	r3, [pc, #188]	; (800bf2c <fm_menu_config_pass+0x2c8>)
 800be70:	6818      	ldr	r0, [r3, #0]
 800be72:	f107 0113 	add.w	r1, r7, #19
 800be76:	2300      	movs	r3, #0
 800be78:	2200      	movs	r2, #0
 800be7a:	f7fa fbdd 	bl	8006638 <osMessageQueuePut>
                freeze_date = fm_calendar_format_date();
 800be7e:	f7fd ff29 	bl	8009cd4 <fm_calendar_format_date>
 800be82:	4603      	mov	r3, r0
 800be84:	4a2c      	ldr	r2, [pc, #176]	; (800bf38 <fm_menu_config_pass+0x2d4>)
 800be86:	6013      	str	r3, [r2, #0]
                freeze_time = fm_calendar_format_time();
 800be88:	f7fd ff00 	bl	8009c8c <fm_calendar_format_time>
 800be8c:	4603      	mov	r3, r0
 800be8e:	4a2b      	ldr	r2, [pc, #172]	; (800bf3c <fm_menu_config_pass+0x2d8>)
 800be90:	6013      	str	r3, [r2, #0]
        break;
 800be92:	e000      	b.n	800be96 <fm_menu_config_pass+0x232>
        default:
        break;
 800be94:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Password\n";
 800be96:	4a2a      	ldr	r2, [pc, #168]	; (800bf40 <fm_menu_config_pass+0x2dc>)
 800be98:	f107 0308 	add.w	r3, r7, #8
 800be9c:	ca07      	ldmia	r2, {r0, r1, r2}
 800be9e:	c303      	stmia	r3!, {r0, r1}
 800bea0:	801a      	strh	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 800bea2:	f107 0308 	add.w	r3, r7, #8
 800bea6:	210a      	movs	r1, #10
 800bea8:	4618      	mov	r0, r3
 800beaa:	f7fd ff37 	bl	8009d1c <fm_debug_msg_uart>
#endif

    if (new_exit == 1 && password_index >= 3)
 800beae:	4b20      	ldr	r3, [pc, #128]	; (800bf30 <fm_menu_config_pass+0x2cc>)
 800beb0:	781b      	ldrb	r3, [r3, #0]
 800beb2:	2b01      	cmp	r3, #1
 800beb4:	d12b      	bne.n	800bf0e <fm_menu_config_pass+0x2aa>
 800beb6:	4b1b      	ldr	r3, [pc, #108]	; (800bf24 <fm_menu_config_pass+0x2c0>)
 800beb8:	781b      	ldrb	r3, [r3, #0]
 800beba:	2b02      	cmp	r3, #2
 800bebc:	d927      	bls.n	800bf0e <fm_menu_config_pass+0x2aa>
    {
        /*
         * Si la contraseña ingresada es correcta, se activa una flag global que
         * permite modificar los parámetros de los menús de configuración.
         */
        if (password[0] == 2 && password[1] == 1 && password[2] == 1
 800bebe:	4b1a      	ldr	r3, [pc, #104]	; (800bf28 <fm_menu_config_pass+0x2c4>)
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	2b02      	cmp	r3, #2
 800bec4:	d10e      	bne.n	800bee4 <fm_menu_config_pass+0x280>
 800bec6:	4b18      	ldr	r3, [pc, #96]	; (800bf28 <fm_menu_config_pass+0x2c4>)
 800bec8:	785b      	ldrb	r3, [r3, #1]
 800beca:	2b01      	cmp	r3, #1
 800becc:	d10a      	bne.n	800bee4 <fm_menu_config_pass+0x280>
 800bece:	4b16      	ldr	r3, [pc, #88]	; (800bf28 <fm_menu_config_pass+0x2c4>)
 800bed0:	789b      	ldrb	r3, [r3, #2]
 800bed2:	2b01      	cmp	r3, #1
 800bed4:	d106      	bne.n	800bee4 <fm_menu_config_pass+0x280>
        && password[3] == 3)
 800bed6:	4b14      	ldr	r3, [pc, #80]	; (800bf28 <fm_menu_config_pass+0x2c4>)
 800bed8:	78db      	ldrb	r3, [r3, #3]
 800beda:	2b03      	cmp	r3, #3
 800bedc:	d102      	bne.n	800bee4 <fm_menu_config_pass+0x280>
        {
            correct_password = 1;
 800bede:	4b10      	ldr	r3, [pc, #64]	; (800bf20 <fm_menu_config_pass+0x2bc>)
 800bee0:	2201      	movs	r2, #1
 800bee2:	701a      	strb	r2, [r3, #0]
        }

        /*
         * Reinicio el arreglo de la contraseña ingresada.
         */
        password_index = 0;
 800bee4:	4b0f      	ldr	r3, [pc, #60]	; (800bf24 <fm_menu_config_pass+0x2c0>)
 800bee6:	2200      	movs	r2, #0
 800bee8:	701a      	strb	r2, [r3, #0]
        password[0] = 0;
 800beea:	4b0f      	ldr	r3, [pc, #60]	; (800bf28 <fm_menu_config_pass+0x2c4>)
 800beec:	2200      	movs	r2, #0
 800beee:	701a      	strb	r2, [r3, #0]
        password[1] = 0;
 800bef0:	4b0d      	ldr	r3, [pc, #52]	; (800bf28 <fm_menu_config_pass+0x2c4>)
 800bef2:	2200      	movs	r2, #0
 800bef4:	705a      	strb	r2, [r3, #1]
        password[2] = 0;
 800bef6:	4b0c      	ldr	r3, [pc, #48]	; (800bf28 <fm_menu_config_pass+0x2c4>)
 800bef8:	2200      	movs	r2, #0
 800befa:	709a      	strb	r2, [r3, #2]
        password[3] = 0;
 800befc:	4b0a      	ldr	r3, [pc, #40]	; (800bf28 <fm_menu_config_pass+0x2c4>)
 800befe:	2200      	movs	r2, #0
 800bf00:	70da      	strb	r2, [r3, #3]
        new_entry = 1;
 800bf02:	4b06      	ldr	r3, [pc, #24]	; (800bf1c <fm_menu_config_pass+0x2b8>)
 800bf04:	2201      	movs	r2, #1
 800bf06:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800bf08:	4b09      	ldr	r3, [pc, #36]	; (800bf30 <fm_menu_config_pass+0x2cc>)
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800bf0e:	697b      	ldr	r3, [r7, #20]
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	3718      	adds	r7, #24
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}
 800bf18:	0800bc65 	.word	0x0800bc65
 800bf1c:	200000af 	.word	0x200000af
 800bf20:	20003948 	.word	0x20003948
 800bf24:	2000394c 	.word	0x2000394c
 800bf28:	20003950 	.word	0x20003950
 800bf2c:	200038a0 	.word	0x200038a0
 800bf30:	20003954 	.word	0x20003954
 800bf34:	0800baa9 	.word	0x0800baa9
 800bf38:	20003944 	.word	0x20003944
 800bf3c:	20003940 	.word	0x20003940
 800bf40:	0800d718 	.word	0x0800d718

0800bf44 <fm_menu_config_units>:
 * volumen y tiempo, como de la resolución de las medidas.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_units(fm_event_t event_id)
{
 800bf44:	b5b0      	push	{r4, r5, r7, lr}
 800bf46:	b0e6      	sub	sp, #408	; 0x198
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	4602      	mov	r2, r0
 800bf4c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800bf50:	f2a3 1391 	subw	r3, r3, #401	; 0x191
 800bf54:	701a      	strb	r2, [r3, #0]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_units;
 800bf56:	4bb5      	ldr	r3, [pc, #724]	; (800c22c <fm_menu_config_units+0x2e8>)
 800bf58:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    fm_event_t event_now;

    if (new_entry == 1)
 800bf5c:	4bb4      	ldr	r3, [pc, #720]	; (800c230 <fm_menu_config_units+0x2ec>)
 800bf5e:	781b      	ldrb	r3, [r3, #0]
 800bf60:	2b01      	cmp	r3, #1
 800bf62:	d104      	bne.n	800bf6e <fm_menu_config_units+0x2a>
    {
        fm_lcd_clear();
 800bf64:	f7fe f98b 	bl	800a27e <fm_lcd_clear>
        new_entry = 0;
 800bf68:	4bb1      	ldr	r3, [pc, #708]	; (800c230 <fm_menu_config_units+0x2ec>)
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_units();
 800bf6e:	f7fe fbbe 	bl	800a6ee <fm_lcd_units>
    fm_lcd_refresh();
 800bf72:	f7fe fb4b 	bl	800a60c <fm_lcd_refresh>

    switch (event_id)
 800bf76:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800bf7a:	f2a3 1391 	subw	r3, r3, #401	; 0x191
 800bf7e:	781b      	ldrb	r3, [r3, #0]
 800bf80:	3b02      	subs	r3, #2
 800bf82:	2b03      	cmp	r3, #3
 800bf84:	f200 812d 	bhi.w	800c1e2 <fm_menu_config_units+0x29e>
 800bf88:	a201      	add	r2, pc, #4	; (adr r2, 800bf90 <fm_menu_config_units+0x4c>)
 800bf8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf8e:	bf00      	nop
 800bf90:	0800bfa1 	.word	0x0800bfa1
 800bf94:	0800c08d 	.word	0x0800c08d
 800bf98:	0800c11d 	.word	0x0800c11d
 800bf9c:	0800c1b9 	.word	0x0800c1b9
    {
        case EVENT_KEY_UP:
            if (correct_password)
 800bfa0:	4ba4      	ldr	r3, [pc, #656]	; (800c234 <fm_menu_config_units+0x2f0>)
 800bfa2:	781b      	ldrb	r3, [r3, #0]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d062      	beq.n	800c06e <fm_menu_config_units+0x12a>
            {
                if (fm_factory_get_acm().unit_volume == LT)
 800bfa8:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800bfac:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f7fd fedf 	bl	8009d74 <fm_factory_get_acm>
 800bfb6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800bfba:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800bfbe:	7e1b      	ldrb	r3, [r3, #24]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d103      	bne.n	800bfcc <fm_menu_config_units+0x88>
                {
                    fm_factory_modify_volume_units(M3);
 800bfc4:	2001      	movs	r0, #1
 800bfc6:	f7fe f805 	bl	8009fd4 <fm_factory_modify_volume_units>
 800bfca:	e04e      	b.n	800c06a <fm_menu_config_units+0x126>
                }
                else if (fm_factory_get_acm().unit_volume == M3)
 800bfcc:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800bfd0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f7fd fecd 	bl	8009d74 <fm_factory_get_acm>
 800bfda:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800bfde:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800bfe2:	7e1b      	ldrb	r3, [r3, #24]
 800bfe4:	2b01      	cmp	r3, #1
 800bfe6:	d103      	bne.n	800bff0 <fm_menu_config_units+0xac>
                {
                    fm_factory_modify_volume_units(KG);
 800bfe8:	2002      	movs	r0, #2
 800bfea:	f7fd fff3 	bl	8009fd4 <fm_factory_modify_volume_units>
 800bfee:	e03c      	b.n	800c06a <fm_menu_config_units+0x126>
                }
                else if (fm_factory_get_acm().unit_volume == KG)
 800bff0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800bff4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800bff8:	4618      	mov	r0, r3
 800bffa:	f7fd febb 	bl	8009d74 <fm_factory_get_acm>
 800bffe:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800c002:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800c006:	7e1b      	ldrb	r3, [r3, #24]
 800c008:	2b02      	cmp	r3, #2
 800c00a:	d103      	bne.n	800c014 <fm_menu_config_units+0xd0>
                {
                    fm_factory_modify_volume_units(GL);
 800c00c:	2003      	movs	r0, #3
 800c00e:	f7fd ffe1 	bl	8009fd4 <fm_factory_modify_volume_units>
 800c012:	e02a      	b.n	800c06a <fm_menu_config_units+0x126>
                }
                else if (fm_factory_get_acm().unit_volume == GL)
 800c014:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800c018:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c01c:	4618      	mov	r0, r3
 800c01e:	f7fd fea9 	bl	8009d74 <fm_factory_get_acm>
 800c022:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800c026:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c02a:	7e1b      	ldrb	r3, [r3, #24]
 800c02c:	2b03      	cmp	r3, #3
 800c02e:	d103      	bne.n	800c038 <fm_menu_config_units+0xf4>
                {
                    fm_factory_modify_volume_units(BR);
 800c030:	2004      	movs	r0, #4
 800c032:	f7fd ffcf 	bl	8009fd4 <fm_factory_modify_volume_units>
 800c036:	e018      	b.n	800c06a <fm_menu_config_units+0x126>
                }
                else if (fm_factory_get_acm().unit_volume == BR)
 800c038:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800c03c:	4618      	mov	r0, r3
 800c03e:	f7fd fe99 	bl	8009d74 <fm_factory_get_acm>
 800c042:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 800c046:	2b04      	cmp	r3, #4
 800c048:	d103      	bne.n	800c052 <fm_menu_config_units+0x10e>
                {
                    fm_factory_modify_volume_units(NOTHING);
 800c04a:	2006      	movs	r0, #6
 800c04c:	f7fd ffc2 	bl	8009fd4 <fm_factory_modify_volume_units>
 800c050:	e00b      	b.n	800c06a <fm_menu_config_units+0x126>
                }
                else if (fm_factory_get_acm().unit_volume == NOTHING)
 800c052:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800c056:	4618      	mov	r0, r3
 800c058:	f7fd fe8c 	bl	8009d74 <fm_factory_get_acm>
 800c05c:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 800c060:	2b06      	cmp	r3, #6
 800c062:	d102      	bne.n	800c06a <fm_menu_config_units+0x126>
                {
                    fm_factory_modify_volume_units(LT);
 800c064:	2000      	movs	r0, #0
 800c066:	f7fd ffb5 	bl	8009fd4 <fm_factory_modify_volume_units>
                }
                fm_lcd_clear();
 800c06a:	f7fe f908 	bl	800a27e <fm_lcd_clear>
            }
            event_now = EVENT_LCD_REFRESH;
 800c06e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800c072:	f2a3 1369 	subw	r3, r3, #361	; 0x169
 800c076:	2201      	movs	r2, #1
 800c078:	701a      	strb	r2, [r3, #0]
            osMessageQueuePut(h_event_queue, &event_now, 0, 0);
 800c07a:	4b6f      	ldr	r3, [pc, #444]	; (800c238 <fm_menu_config_units+0x2f4>)
 800c07c:	6818      	ldr	r0, [r3, #0]
 800c07e:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 800c082:	2300      	movs	r3, #0
 800c084:	2200      	movs	r2, #0
 800c086:	f7fa fad7 	bl	8006638 <osMessageQueuePut>
        break;
 800c08a:	e0ab      	b.n	800c1e4 <fm_menu_config_units+0x2a0>
        case EVENT_KEY_DOWN:
            if (correct_password)
 800c08c:	4b69      	ldr	r3, [pc, #420]	; (800c234 <fm_menu_config_units+0x2f0>)
 800c08e:	781b      	ldrb	r3, [r3, #0]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d034      	beq.n	800c0fe <fm_menu_config_units+0x1ba>
            {
                if (fm_factory_get_acm().unit_time == H)
 800c094:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800c098:	4618      	mov	r0, r3
 800c09a:	f7fd fe6b 	bl	8009d74 <fm_factory_get_acm>
 800c09e:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d103      	bne.n	800c0ae <fm_menu_config_units+0x16a>
                {
                    fm_factory_modify_time_units(D);
 800c0a6:	2001      	movs	r0, #1
 800c0a8:	f7fd ff7a 	bl	8009fa0 <fm_factory_modify_time_units>
 800c0ac:	e025      	b.n	800c0fa <fm_menu_config_units+0x1b6>
                }
                else if (fm_factory_get_acm().unit_time == D)
 800c0ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f7fd fe5e 	bl	8009d74 <fm_factory_get_acm>
 800c0b8:	f897 3129 	ldrb.w	r3, [r7, #297]	; 0x129
 800c0bc:	2b01      	cmp	r3, #1
 800c0be:	d103      	bne.n	800c0c8 <fm_menu_config_units+0x184>
                {
                    fm_factory_modify_time_units(S);
 800c0c0:	2002      	movs	r0, #2
 800c0c2:	f7fd ff6d 	bl	8009fa0 <fm_factory_modify_time_units>
 800c0c6:	e018      	b.n	800c0fa <fm_menu_config_units+0x1b6>
                }
                else if (fm_factory_get_acm().unit_time == S)
 800c0c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f7fd fe51 	bl	8009d74 <fm_factory_get_acm>
 800c0d2:	f897 3149 	ldrb.w	r3, [r7, #329]	; 0x149
 800c0d6:	2b02      	cmp	r3, #2
 800c0d8:	d103      	bne.n	800c0e2 <fm_menu_config_units+0x19e>
                {
                    fm_factory_modify_time_units(M);
 800c0da:	2003      	movs	r0, #3
 800c0dc:	f7fd ff60 	bl	8009fa0 <fm_factory_modify_time_units>
 800c0e0:	e00b      	b.n	800c0fa <fm_menu_config_units+0x1b6>
                }
                else if (fm_factory_get_acm().unit_time == M)
 800c0e2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f7fd fe44 	bl	8009d74 <fm_factory_get_acm>
 800c0ec:	f897 3169 	ldrb.w	r3, [r7, #361]	; 0x169
 800c0f0:	2b03      	cmp	r3, #3
 800c0f2:	d102      	bne.n	800c0fa <fm_menu_config_units+0x1b6>
                {
                    fm_factory_modify_time_units(H);
 800c0f4:	2000      	movs	r0, #0
 800c0f6:	f7fd ff53 	bl	8009fa0 <fm_factory_modify_time_units>
                }
                fm_lcd_clear();
 800c0fa:	f7fe f8c0 	bl	800a27e <fm_lcd_clear>
            }
            event_now = EVENT_LCD_REFRESH;
 800c0fe:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800c102:	f2a3 1369 	subw	r3, r3, #361	; 0x169
 800c106:	2201      	movs	r2, #1
 800c108:	701a      	strb	r2, [r3, #0]
            osMessageQueuePut(h_event_queue, &event_now, 0, 0);
 800c10a:	4b4b      	ldr	r3, [pc, #300]	; (800c238 <fm_menu_config_units+0x2f4>)
 800c10c:	6818      	ldr	r0, [r3, #0]
 800c10e:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 800c112:	2300      	movs	r3, #0
 800c114:	2200      	movs	r2, #0
 800c116:	f7fa fa8f 	bl	8006638 <osMessageQueuePut>
        break;
 800c11a:	e063      	b.n	800c1e4 <fm_menu_config_units+0x2a0>
        case EVENT_KEY_ENTER:
            if (correct_password)
 800c11c:	4b45      	ldr	r3, [pc, #276]	; (800c234 <fm_menu_config_units+0x2f0>)
 800c11e:	781b      	ldrb	r3, [r3, #0]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d03a      	beq.n	800c19a <fm_menu_config_units+0x256>
            {
                if (fm_factory_get_units_digits().res == RES_0)
 800c124:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800c128:	4618      	mov	r0, r3
 800c12a:	f7fd fe77 	bl	8009e1c <fm_factory_get_units_digits>
 800c12e:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 800c132:	2b00      	cmp	r3, #0
 800c134:	d105      	bne.n	800c142 <fm_menu_config_units+0x1fe>
                {
                    fm_factory_modify_res_acm_ttl(RES_1, RES_1, RES_1);
 800c136:	2201      	movs	r2, #1
 800c138:	2101      	movs	r1, #1
 800c13a:	2001      	movs	r0, #1
 800c13c:	f7fd ff12 	bl	8009f64 <fm_factory_modify_res_acm_ttl>
 800c140:	e02b      	b.n	800c19a <fm_menu_config_units+0x256>
                }
                else if (fm_factory_get_units_digits().res == RES_1)
 800c142:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800c146:	4618      	mov	r0, r3
 800c148:	f7fd fe68 	bl	8009e1c <fm_factory_get_units_digits>
 800c14c:	f897 3180 	ldrb.w	r3, [r7, #384]	; 0x180
 800c150:	2b01      	cmp	r3, #1
 800c152:	d105      	bne.n	800c160 <fm_menu_config_units+0x21c>
                {
                    fm_factory_modify_res_acm_ttl(RES_2, RES_2, RES_2);
 800c154:	2202      	movs	r2, #2
 800c156:	2102      	movs	r1, #2
 800c158:	2002      	movs	r0, #2
 800c15a:	f7fd ff03 	bl	8009f64 <fm_factory_modify_res_acm_ttl>
 800c15e:	e01c      	b.n	800c19a <fm_menu_config_units+0x256>
                }
                else if (fm_factory_get_units_digits().res == RES_2)
 800c160:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800c164:	4618      	mov	r0, r3
 800c166:	f7fd fe59 	bl	8009e1c <fm_factory_get_units_digits>
 800c16a:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
 800c16e:	2b02      	cmp	r3, #2
 800c170:	d105      	bne.n	800c17e <fm_menu_config_units+0x23a>
                {
                    fm_factory_modify_res_acm_ttl(RES_3, RES_3, RES_3);
 800c172:	2203      	movs	r2, #3
 800c174:	2103      	movs	r1, #3
 800c176:	2003      	movs	r0, #3
 800c178:	f7fd fef4 	bl	8009f64 <fm_factory_modify_res_acm_ttl>
 800c17c:	e00d      	b.n	800c19a <fm_menu_config_units+0x256>
                }
                else if (fm_factory_get_units_digits().res == RES_3)
 800c17e:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800c182:	4618      	mov	r0, r3
 800c184:	f7fd fe4a 	bl	8009e1c <fm_factory_get_units_digits>
 800c188:	f897 3190 	ldrb.w	r3, [r7, #400]	; 0x190
 800c18c:	2b03      	cmp	r3, #3
 800c18e:	d104      	bne.n	800c19a <fm_menu_config_units+0x256>
                {
                    fm_factory_modify_res_acm_ttl(RES_0, RES_0, RES_0);
 800c190:	2200      	movs	r2, #0
 800c192:	2100      	movs	r1, #0
 800c194:	2000      	movs	r0, #0
 800c196:	f7fd fee5 	bl	8009f64 <fm_factory_modify_res_acm_ttl>
                }
            }
            event_now = EVENT_LCD_REFRESH;
 800c19a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800c19e:	f2a3 1369 	subw	r3, r3, #361	; 0x169
 800c1a2:	2201      	movs	r2, #1
 800c1a4:	701a      	strb	r2, [r3, #0]
            osMessageQueuePut(h_event_queue, &event_now, 0, 0);
 800c1a6:	4b24      	ldr	r3, [pc, #144]	; (800c238 <fm_menu_config_units+0x2f4>)
 800c1a8:	6818      	ldr	r0, [r3, #0]
 800c1aa:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	f7fa fa41 	bl	8006638 <osMessageQueuePut>
        break;
 800c1b6:	e015      	b.n	800c1e4 <fm_menu_config_units+0x2a0>
        case EVENT_KEY_ESC:
            new_exit = 1;
 800c1b8:	4b20      	ldr	r3, [pc, #128]	; (800c23c <fm_menu_config_units+0x2f8>)
 800c1ba:	2201      	movs	r2, #1
 800c1bc:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_date_hour;
 800c1be:	4b20      	ldr	r3, [pc, #128]	; (800c240 <fm_menu_config_units+0x2fc>)
 800c1c0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
            event_now = EVENT_LCD_REFRESH;
 800c1c4:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800c1c8:	f2a3 1369 	subw	r3, r3, #361	; 0x169
 800c1cc:	2201      	movs	r2, #1
 800c1ce:	701a      	strb	r2, [r3, #0]
            osMessageQueuePut(h_event_queue, &event_now, 0, 0);
 800c1d0:	4b19      	ldr	r3, [pc, #100]	; (800c238 <fm_menu_config_units+0x2f4>)
 800c1d2:	6818      	ldr	r0, [r3, #0]
 800c1d4:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 800c1d8:	2300      	movs	r3, #0
 800c1da:	2200      	movs	r2, #0
 800c1dc:	f7fa fa2c 	bl	8006638 <osMessageQueuePut>
        break;
 800c1e0:	e000      	b.n	800c1e4 <fm_menu_config_units+0x2a0>
        default:
        break;
 800c1e2:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar unidades y resolucion\n";
 800c1e4:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800c1e8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800c1ec:	4a15      	ldr	r2, [pc, #84]	; (800c244 <fm_menu_config_units+0x300>)
 800c1ee:	461c      	mov	r4, r3
 800c1f0:	4615      	mov	r5, r2
 800c1f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c1f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c1f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c1f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c1fa:	682b      	ldr	r3, [r5, #0]
 800c1fc:	8023      	strh	r3, [r4, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 800c1fe:	f107 030c 	add.w	r3, r7, #12
 800c202:	2122      	movs	r1, #34	; 0x22
 800c204:	4618      	mov	r0, r3
 800c206:	f7fd fd89 	bl	8009d1c <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 800c20a:	4b0c      	ldr	r3, [pc, #48]	; (800c23c <fm_menu_config_units+0x2f8>)
 800c20c:	781b      	ldrb	r3, [r3, #0]
 800c20e:	2b01      	cmp	r3, #1
 800c210:	d105      	bne.n	800c21e <fm_menu_config_units+0x2da>
    {
        new_entry = 1;
 800c212:	4b07      	ldr	r3, [pc, #28]	; (800c230 <fm_menu_config_units+0x2ec>)
 800c214:	2201      	movs	r2, #1
 800c216:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800c218:	4b08      	ldr	r3, [pc, #32]	; (800c23c <fm_menu_config_units+0x2f8>)
 800c21a:	2200      	movs	r2, #0
 800c21c:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800c21e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
}
 800c222:	4618      	mov	r0, r3
 800c224:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800c228:	46bd      	mov	sp, r7
 800c22a:	bdb0      	pop	{r4, r5, r7, pc}
 800c22c:	0800bf45 	.word	0x0800bf45
 800c230:	200000b0 	.word	0x200000b0
 800c234:	20003948 	.word	0x20003948
 800c238:	200038a0 	.word	0x200038a0
 800c23c:	20003955 	.word	0x20003955
 800c240:	0800b9d1 	.word	0x0800b9d1
 800c244:	0800d738 	.word	0x0800d738

0800c248 <fm_menu_show_acm_rate>:
 * unidades y puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_acm_rate(fm_event_t event_id)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b086      	sub	sp, #24
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	4603      	mov	r3, r0
 800c250:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_rate;
 800c252:	4b35      	ldr	r3, [pc, #212]	; (800c328 <fm_menu_show_acm_rate+0xe0>)
 800c254:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 800c256:	4b35      	ldr	r3, [pc, #212]	; (800c32c <fm_menu_show_acm_rate+0xe4>)
 800c258:	781b      	ldrb	r3, [r3, #0]
 800c25a:	2b01      	cmp	r3, #1
 800c25c:	d104      	bne.n	800c268 <fm_menu_show_acm_rate+0x20>
    {
        fm_lcd_clear();
 800c25e:	f7fe f80e 	bl	800a27e <fm_lcd_clear>
        new_entry = 0;
 800c262:	4b32      	ldr	r3, [pc, #200]	; (800c32c <fm_menu_show_acm_rate+0xe4>)
 800c264:	2200      	movs	r2, #0
 800c266:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_acm_rate();
 800c268:	f7fd ff46 	bl	800a0f8 <fm_lcd_acm_rate>
    fm_lcd_refresh();
 800c26c:	f7fe f9ce 	bl	800a60c <fm_lcd_refresh>

    switch (event_id)
 800c270:	79fb      	ldrb	r3, [r7, #7]
 800c272:	3b02      	subs	r3, #2
 800c274:	2b03      	cmp	r3, #3
 800c276:	d83b      	bhi.n	800c2f0 <fm_menu_show_acm_rate+0xa8>
 800c278:	a201      	add	r2, pc, #4	; (adr r2, 800c280 <fm_menu_show_acm_rate+0x38>)
 800c27a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c27e:	bf00      	nop
 800c280:	0800c291 	.word	0x0800c291
 800c284:	0800c2b1 	.word	0x0800c2b1
 800c288:	0800c2f1 	.word	0x0800c2f1
 800c28c:	0800c2d1 	.word	0x0800c2d1
    {
        case EVENT_KEY_UP:
            new_exit = 1;
 800c290:	4b27      	ldr	r3, [pc, #156]	; (800c330 <fm_menu_show_acm_rate+0xe8>)
 800c292:	2201      	movs	r2, #1
 800c294:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 800c296:	4b27      	ldr	r3, [pc, #156]	; (800c334 <fm_menu_show_acm_rate+0xec>)
 800c298:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 800c29a:	2301      	movs	r3, #1
 800c29c:	74fb      	strb	r3, [r7, #19]
            osMessageQueuePut(h_event_queue, &event_now, 0, 0);
 800c29e:	4b26      	ldr	r3, [pc, #152]	; (800c338 <fm_menu_show_acm_rate+0xf0>)
 800c2a0:	6818      	ldr	r0, [r3, #0]
 800c2a2:	f107 0113 	add.w	r1, r7, #19
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	f7fa f9c5 	bl	8006638 <osMessageQueuePut>
        break;
 800c2ae:	e020      	b.n	800c2f2 <fm_menu_show_acm_rate+0xaa>
        case EVENT_KEY_DOWN:
            new_exit = 1;
 800c2b0:	4b1f      	ldr	r3, [pc, #124]	; (800c330 <fm_menu_show_acm_rate+0xe8>)
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_temp;
 800c2b6:	4b21      	ldr	r3, [pc, #132]	; (800c33c <fm_menu_show_acm_rate+0xf4>)
 800c2b8:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	74fb      	strb	r3, [r7, #19]
            osMessageQueuePut(h_event_queue, &event_now, 0, 0);
 800c2be:	4b1e      	ldr	r3, [pc, #120]	; (800c338 <fm_menu_show_acm_rate+0xf0>)
 800c2c0:	6818      	ldr	r0, [r3, #0]
 800c2c2:	f107 0113 	add.w	r1, r7, #19
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	f7fa f9b5 	bl	8006638 <osMessageQueuePut>
        break;
 800c2ce:	e010      	b.n	800c2f2 <fm_menu_show_acm_rate+0xaa>
        case EVENT_KEY_ENTER:
        break;
        case EVENT_KEY_ESC:
            new_exit = 1;
 800c2d0:	4b17      	ldr	r3, [pc, #92]	; (800c330 <fm_menu_show_acm_rate+0xe8>)
 800c2d2:	2201      	movs	r2, #1
 800c2d4:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 800c2d6:	4b1a      	ldr	r3, [pc, #104]	; (800c340 <fm_menu_show_acm_rate+0xf8>)
 800c2d8:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 800c2da:	2301      	movs	r3, #1
 800c2dc:	74fb      	strb	r3, [r7, #19]
            osMessageQueuePut(h_event_queue, &event_now, 0, 0);
 800c2de:	4b16      	ldr	r3, [pc, #88]	; (800c338 <fm_menu_show_acm_rate+0xf0>)
 800c2e0:	6818      	ldr	r0, [r3, #0]
 800c2e2:	f107 0113 	add.w	r1, r7, #19
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	f7fa f9a5 	bl	8006638 <osMessageQueuePut>
        break;
 800c2ee:	e000      	b.n	800c2f2 <fm_menu_show_acm_rate+0xaa>
        default:
        break;
 800c2f0:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "acm_rate\n";
 800c2f2:	4a14      	ldr	r2, [pc, #80]	; (800c344 <fm_menu_show_acm_rate+0xfc>)
 800c2f4:	f107 0308 	add.w	r3, r7, #8
 800c2f8:	ca07      	ldmia	r2, {r0, r1, r2}
 800c2fa:	c303      	stmia	r3!, {r0, r1}
 800c2fc:	801a      	strh	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 800c2fe:	f107 0308 	add.w	r3, r7, #8
 800c302:	210a      	movs	r1, #10
 800c304:	4618      	mov	r0, r3
 800c306:	f7fd fd09 	bl	8009d1c <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 800c30a:	4b09      	ldr	r3, [pc, #36]	; (800c330 <fm_menu_show_acm_rate+0xe8>)
 800c30c:	781b      	ldrb	r3, [r3, #0]
 800c30e:	2b01      	cmp	r3, #1
 800c310:	d105      	bne.n	800c31e <fm_menu_show_acm_rate+0xd6>
    {
        new_entry = 1;
 800c312:	4b06      	ldr	r3, [pc, #24]	; (800c32c <fm_menu_show_acm_rate+0xe4>)
 800c314:	2201      	movs	r2, #1
 800c316:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800c318:	4b05      	ldr	r3, [pc, #20]	; (800c330 <fm_menu_show_acm_rate+0xe8>)
 800c31a:	2200      	movs	r2, #0
 800c31c:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800c31e:	697b      	ldr	r3, [r7, #20]
}
 800c320:	4618      	mov	r0, r3
 800c322:	3718      	adds	r7, #24
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}
 800c328:	0800c249 	.word	0x0800c249
 800c32c:	200000b1 	.word	0x200000b1
 800c330:	20003956 	.word	0x20003956
 800c334:	0800c53d 	.word	0x0800c53d
 800c338:	200038a0 	.word	0x200038a0
 800c33c:	0800c349 	.word	0x0800c349
 800c340:	0800bc65 	.word	0x0800bc65
 800c344:	0800d75c 	.word	0x0800d75c

0800c348 <fm_menu_show_acm_temp>:
 * la pantalla.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_acm_temp(fm_event_t event_id)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b086      	sub	sp, #24
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	4603      	mov	r3, r0
 800c350:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_temp;
 800c352:	4b35      	ldr	r3, [pc, #212]	; (800c428 <fm_menu_show_acm_temp+0xe0>)
 800c354:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 800c356:	4b35      	ldr	r3, [pc, #212]	; (800c42c <fm_menu_show_acm_temp+0xe4>)
 800c358:	781b      	ldrb	r3, [r3, #0]
 800c35a:	2b01      	cmp	r3, #1
 800c35c:	d104      	bne.n	800c368 <fm_menu_show_acm_temp+0x20>
    {
        fm_lcd_clear();
 800c35e:	f7fd ff8e 	bl	800a27e <fm_lcd_clear>
        new_entry = 0;
 800c362:	4b32      	ldr	r3, [pc, #200]	; (800c42c <fm_menu_show_acm_temp+0xe4>)
 800c364:	2200      	movs	r2, #0
 800c366:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_acm_temp();
 800c368:	f7fd ff31 	bl	800a1ce <fm_lcd_acm_temp>
    fm_lcd_refresh();
 800c36c:	f7fe f94e 	bl	800a60c <fm_lcd_refresh>

    switch (event_id)
 800c370:	79fb      	ldrb	r3, [r7, #7]
 800c372:	3b02      	subs	r3, #2
 800c374:	2b03      	cmp	r3, #3
 800c376:	d83b      	bhi.n	800c3f0 <fm_menu_show_acm_temp+0xa8>
 800c378:	a201      	add	r2, pc, #4	; (adr r2, 800c380 <fm_menu_show_acm_temp+0x38>)
 800c37a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c37e:	bf00      	nop
 800c380:	0800c391 	.word	0x0800c391
 800c384:	0800c3b1 	.word	0x0800c3b1
 800c388:	0800c3f1 	.word	0x0800c3f1
 800c38c:	0800c3d1 	.word	0x0800c3d1
    {
        case EVENT_KEY_UP:
            new_exit = 1;
 800c390:	4b27      	ldr	r3, [pc, #156]	; (800c430 <fm_menu_show_acm_temp+0xe8>)
 800c392:	2201      	movs	r2, #1
 800c394:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_rate;
 800c396:	4b27      	ldr	r3, [pc, #156]	; (800c434 <fm_menu_show_acm_temp+0xec>)
 800c398:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 800c39a:	2301      	movs	r3, #1
 800c39c:	74fb      	strb	r3, [r7, #19]
            osMessageQueuePut(h_event_queue, &event_now, 0, 0);
 800c39e:	4b26      	ldr	r3, [pc, #152]	; (800c438 <fm_menu_show_acm_temp+0xf0>)
 800c3a0:	6818      	ldr	r0, [r3, #0]
 800c3a2:	f107 0113 	add.w	r1, r7, #19
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	f7fa f945 	bl	8006638 <osMessageQueuePut>
        break;
 800c3ae:	e020      	b.n	800c3f2 <fm_menu_show_acm_temp+0xaa>
        case EVENT_KEY_DOWN:
            new_exit = 1;
 800c3b0:	4b1f      	ldr	r3, [pc, #124]	; (800c430 <fm_menu_show_acm_temp+0xe8>)
 800c3b2:	2201      	movs	r2, #1
 800c3b4:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_date_hour;
 800c3b6:	4b21      	ldr	r3, [pc, #132]	; (800c43c <fm_menu_show_acm_temp+0xf4>)
 800c3b8:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	74fb      	strb	r3, [r7, #19]
            osMessageQueuePut(h_event_queue, &event_now, 0, 0);
 800c3be:	4b1e      	ldr	r3, [pc, #120]	; (800c438 <fm_menu_show_acm_temp+0xf0>)
 800c3c0:	6818      	ldr	r0, [r3, #0]
 800c3c2:	f107 0113 	add.w	r1, r7, #19
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	f7fa f935 	bl	8006638 <osMessageQueuePut>
        break;
 800c3ce:	e010      	b.n	800c3f2 <fm_menu_show_acm_temp+0xaa>
        case EVENT_KEY_ENTER:
        break;
        case EVENT_KEY_ESC:
            new_exit = 1;
 800c3d0:	4b17      	ldr	r3, [pc, #92]	; (800c430 <fm_menu_show_acm_temp+0xe8>)
 800c3d2:	2201      	movs	r2, #1
 800c3d4:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 800c3d6:	4b1a      	ldr	r3, [pc, #104]	; (800c440 <fm_menu_show_acm_temp+0xf8>)
 800c3d8:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 800c3da:	2301      	movs	r3, #1
 800c3dc:	74fb      	strb	r3, [r7, #19]
            osMessageQueuePut(h_event_queue, &event_now, 0, 0);
 800c3de:	4b16      	ldr	r3, [pc, #88]	; (800c438 <fm_menu_show_acm_temp+0xf0>)
 800c3e0:	6818      	ldr	r0, [r3, #0]
 800c3e2:	f107 0113 	add.w	r1, r7, #19
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	f7fa f925 	bl	8006638 <osMessageQueuePut>
        break;
 800c3ee:	e000      	b.n	800c3f2 <fm_menu_show_acm_temp+0xaa>
        default:
        break;
 800c3f0:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "acm_temp\n";
 800c3f2:	4a14      	ldr	r2, [pc, #80]	; (800c444 <fm_menu_show_acm_temp+0xfc>)
 800c3f4:	f107 0308 	add.w	r3, r7, #8
 800c3f8:	ca07      	ldmia	r2, {r0, r1, r2}
 800c3fa:	c303      	stmia	r3!, {r0, r1}
 800c3fc:	801a      	strh	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 800c3fe:	f107 0308 	add.w	r3, r7, #8
 800c402:	210a      	movs	r1, #10
 800c404:	4618      	mov	r0, r3
 800c406:	f7fd fc89 	bl	8009d1c <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 800c40a:	4b09      	ldr	r3, [pc, #36]	; (800c430 <fm_menu_show_acm_temp+0xe8>)
 800c40c:	781b      	ldrb	r3, [r3, #0]
 800c40e:	2b01      	cmp	r3, #1
 800c410:	d105      	bne.n	800c41e <fm_menu_show_acm_temp+0xd6>
    {
        new_entry = 1;
 800c412:	4b06      	ldr	r3, [pc, #24]	; (800c42c <fm_menu_show_acm_temp+0xe4>)
 800c414:	2201      	movs	r2, #1
 800c416:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800c418:	4b05      	ldr	r3, [pc, #20]	; (800c430 <fm_menu_show_acm_temp+0xe8>)
 800c41a:	2200      	movs	r2, #0
 800c41c:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800c41e:	697b      	ldr	r3, [r7, #20]
}
 800c420:	4618      	mov	r0, r3
 800c422:	3718      	adds	r7, #24
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}
 800c428:	0800c349 	.word	0x0800c349
 800c42c:	200000b2 	.word	0x200000b2
 800c430:	20003957 	.word	0x20003957
 800c434:	0800c249 	.word	0x0800c249
 800c438:	200038a0 	.word	0x200038a0
 800c43c:	0800c449 	.word	0x0800c449
 800c440:	0800bc65 	.word	0x0800bc65
 800c444:	0800d768 	.word	0x0800d768

0800c448 <fm_menu_show_date_hour>:
 * unidades y puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_date_hour(fm_event_t event_id)
{
 800c448:	b590      	push	{r4, r7, lr}
 800c44a:	b087      	sub	sp, #28
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	4603      	mov	r3, r0
 800c450:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_date_hour;
 800c452:	4b33      	ldr	r3, [pc, #204]	; (800c520 <fm_menu_show_date_hour+0xd8>)
 800c454:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 800c456:	4b33      	ldr	r3, [pc, #204]	; (800c524 <fm_menu_show_date_hour+0xdc>)
 800c458:	781b      	ldrb	r3, [r3, #0]
 800c45a:	2b01      	cmp	r3, #1
 800c45c:	d104      	bne.n	800c468 <fm_menu_show_date_hour+0x20>
    {
        fm_lcd_clear();
 800c45e:	f7fd ff0e 	bl	800a27e <fm_lcd_clear>
        new_entry = 0;
 800c462:	4b30      	ldr	r3, [pc, #192]	; (800c524 <fm_menu_show_date_hour+0xdc>)
 800c464:	2200      	movs	r2, #0
 800c466:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_date_hour(fm_calendar_format_time(), fm_calendar_format_date());
 800c468:	f7fd fc10 	bl	8009c8c <fm_calendar_format_time>
 800c46c:	4604      	mov	r4, r0
 800c46e:	f7fd fc31 	bl	8009cd4 <fm_calendar_format_date>
 800c472:	4603      	mov	r3, r0
 800c474:	4619      	mov	r1, r3
 800c476:	4620      	mov	r0, r4
 800c478:	f7fd ff07 	bl	800a28a <fm_lcd_date_hour>
    fm_lcd_refresh();
 800c47c:	f7fe f8c6 	bl	800a60c <fm_lcd_refresh>

    switch (event_id)
 800c480:	79fb      	ldrb	r3, [r7, #7]
 800c482:	3b02      	subs	r3, #2
 800c484:	2b03      	cmp	r3, #3
 800c486:	d82b      	bhi.n	800c4e0 <fm_menu_show_date_hour+0x98>
 800c488:	a201      	add	r2, pc, #4	; (adr r2, 800c490 <fm_menu_show_date_hour+0x48>)
 800c48a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c48e:	bf00      	nop
 800c490:	0800c4a1 	.word	0x0800c4a1
 800c494:	0800c4e1 	.word	0x0800c4e1
 800c498:	0800c4e1 	.word	0x0800c4e1
 800c49c:	0800c4c1 	.word	0x0800c4c1
    {
        case EVENT_KEY_UP:
            new_exit = 1;
 800c4a0:	4b21      	ldr	r3, [pc, #132]	; (800c528 <fm_menu_show_date_hour+0xe0>)
 800c4a2:	2201      	movs	r2, #1
 800c4a4:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_temp;
 800c4a6:	4b21      	ldr	r3, [pc, #132]	; (800c52c <fm_menu_show_date_hour+0xe4>)
 800c4a8:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	74fb      	strb	r3, [r7, #19]
            osMessageQueuePut(h_event_queue, &event_now, 0, 0);
 800c4ae:	4b20      	ldr	r3, [pc, #128]	; (800c530 <fm_menu_show_date_hour+0xe8>)
 800c4b0:	6818      	ldr	r0, [r3, #0]
 800c4b2:	f107 0113 	add.w	r1, r7, #19
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	f7fa f8bd 	bl	8006638 <osMessageQueuePut>
        break;
 800c4be:	e010      	b.n	800c4e2 <fm_menu_show_date_hour+0x9a>
        case EVENT_KEY_DOWN:
        break;
        case EVENT_KEY_ENTER:
        break;
        case EVENT_KEY_ESC:
            new_exit = 1;
 800c4c0:	4b19      	ldr	r3, [pc, #100]	; (800c528 <fm_menu_show_date_hour+0xe0>)
 800c4c2:	2201      	movs	r2, #1
 800c4c4:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 800c4c6:	4b1b      	ldr	r3, [pc, #108]	; (800c534 <fm_menu_show_date_hour+0xec>)
 800c4c8:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	74fb      	strb	r3, [r7, #19]
            osMessageQueuePut(h_event_queue, &event_now, 0, 0);
 800c4ce:	4b18      	ldr	r3, [pc, #96]	; (800c530 <fm_menu_show_date_hour+0xe8>)
 800c4d0:	6818      	ldr	r0, [r3, #0]
 800c4d2:	f107 0113 	add.w	r1, r7, #19
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	2200      	movs	r2, #0
 800c4da:	f7fa f8ad 	bl	8006638 <osMessageQueuePut>
        break;
 800c4de:	e000      	b.n	800c4e2 <fm_menu_show_date_hour+0x9a>
        default:
        break;
 800c4e0:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "date_hour\n";
 800c4e2:	4a15      	ldr	r2, [pc, #84]	; (800c538 <fm_menu_show_date_hour+0xf0>)
 800c4e4:	f107 0308 	add.w	r3, r7, #8
 800c4e8:	ca07      	ldmia	r2, {r0, r1, r2}
 800c4ea:	c303      	stmia	r3!, {r0, r1}
 800c4ec:	801a      	strh	r2, [r3, #0]
 800c4ee:	3302      	adds	r3, #2
 800c4f0:	0c12      	lsrs	r2, r2, #16
 800c4f2:	701a      	strb	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 800c4f4:	f107 0308 	add.w	r3, r7, #8
 800c4f8:	210b      	movs	r1, #11
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f7fd fc0e 	bl	8009d1c <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 800c500:	4b09      	ldr	r3, [pc, #36]	; (800c528 <fm_menu_show_date_hour+0xe0>)
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	2b01      	cmp	r3, #1
 800c506:	d105      	bne.n	800c514 <fm_menu_show_date_hour+0xcc>
    {
        new_entry = 1;
 800c508:	4b06      	ldr	r3, [pc, #24]	; (800c524 <fm_menu_show_date_hour+0xdc>)
 800c50a:	2201      	movs	r2, #1
 800c50c:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800c50e:	4b06      	ldr	r3, [pc, #24]	; (800c528 <fm_menu_show_date_hour+0xe0>)
 800c510:	2200      	movs	r2, #0
 800c512:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800c514:	697b      	ldr	r3, [r7, #20]
}
 800c516:	4618      	mov	r0, r3
 800c518:	371c      	adds	r7, #28
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd90      	pop	{r4, r7, pc}
 800c51e:	bf00      	nop
 800c520:	0800c449 	.word	0x0800c449
 800c524:	200000b3 	.word	0x200000b3
 800c528:	20003958 	.word	0x20003958
 800c52c:	0800c349 	.word	0x0800c349
 800c530:	200038a0 	.word	0x200038a0
 800c534:	0800bc65 	.word	0x0800bc65
 800c538:	0800d774 	.word	0x0800d774

0800c53c <fm_menu_show_ttl_rate>:
 * unidades y puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_ttl_rate(fm_event_t event_id)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b086      	sub	sp, #24
 800c540:	af00      	add	r7, sp, #0
 800c542:	4603      	mov	r3, r0
 800c544:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 800c546:	4b2d      	ldr	r3, [pc, #180]	; (800c5fc <fm_menu_show_ttl_rate+0xc0>)
 800c548:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 800c54a:	4b2d      	ldr	r3, [pc, #180]	; (800c600 <fm_menu_show_ttl_rate+0xc4>)
 800c54c:	781b      	ldrb	r3, [r3, #0]
 800c54e:	2b01      	cmp	r3, #1
 800c550:	d104      	bne.n	800c55c <fm_menu_show_ttl_rate+0x20>
    {
        fm_lcd_clear();
 800c552:	f7fd fe94 	bl	800a27e <fm_lcd_clear>
        new_entry = 0;
 800c556:	4b2a      	ldr	r3, [pc, #168]	; (800c600 <fm_menu_show_ttl_rate+0xc4>)
 800c558:	2200      	movs	r2, #0
 800c55a:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_ttl_rate();
 800c55c:	f7fe f85c 	bl	800a618 <fm_lcd_ttl_rate>
    fm_lcd_refresh();
 800c560:	f7fe f854 	bl	800a60c <fm_lcd_refresh>

    switch (event_id)
 800c564:	79fb      	ldrb	r3, [r7, #7]
 800c566:	3b02      	subs	r3, #2
 800c568:	2b03      	cmp	r3, #3
 800c56a:	d82b      	bhi.n	800c5c4 <fm_menu_show_ttl_rate+0x88>
 800c56c:	a201      	add	r2, pc, #4	; (adr r2, 800c574 <fm_menu_show_ttl_rate+0x38>)
 800c56e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c572:	bf00      	nop
 800c574:	0800c5c5 	.word	0x0800c5c5
 800c578:	0800c585 	.word	0x0800c585
 800c57c:	0800c5c5 	.word	0x0800c5c5
 800c580:	0800c5a5 	.word	0x0800c5a5
    {
        case EVENT_KEY_UP:
        break;
        case EVENT_KEY_DOWN:
            new_exit = 1;
 800c584:	4b1f      	ldr	r3, [pc, #124]	; (800c604 <fm_menu_show_ttl_rate+0xc8>)
 800c586:	2201      	movs	r2, #1
 800c588:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_rate;
 800c58a:	4b1f      	ldr	r3, [pc, #124]	; (800c608 <fm_menu_show_ttl_rate+0xcc>)
 800c58c:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 800c58e:	2301      	movs	r3, #1
 800c590:	74fb      	strb	r3, [r7, #19]
            osMessageQueuePut(h_event_queue, &event_now, 0, 0);
 800c592:	4b1e      	ldr	r3, [pc, #120]	; (800c60c <fm_menu_show_ttl_rate+0xd0>)
 800c594:	6818      	ldr	r0, [r3, #0]
 800c596:	f107 0113 	add.w	r1, r7, #19
 800c59a:	2300      	movs	r3, #0
 800c59c:	2200      	movs	r2, #0
 800c59e:	f7fa f84b 	bl	8006638 <osMessageQueuePut>
        break;
 800c5a2:	e010      	b.n	800c5c6 <fm_menu_show_ttl_rate+0x8a>
        case EVENT_KEY_ENTER:
        break;
        case EVENT_KEY_ESC:
            new_exit = 1;
 800c5a4:	4b17      	ldr	r3, [pc, #92]	; (800c604 <fm_menu_show_ttl_rate+0xc8>)
 800c5a6:	2201      	movs	r2, #1
 800c5a8:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 800c5aa:	4b19      	ldr	r3, [pc, #100]	; (800c610 <fm_menu_show_ttl_rate+0xd4>)
 800c5ac:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	74fb      	strb	r3, [r7, #19]
            osMessageQueuePut(h_event_queue, &event_now, 0, 0);
 800c5b2:	4b16      	ldr	r3, [pc, #88]	; (800c60c <fm_menu_show_ttl_rate+0xd0>)
 800c5b4:	6818      	ldr	r0, [r3, #0]
 800c5b6:	f107 0113 	add.w	r1, r7, #19
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	2200      	movs	r2, #0
 800c5be:	f7fa f83b 	bl	8006638 <osMessageQueuePut>
        break;
 800c5c2:	e000      	b.n	800c5c6 <fm_menu_show_ttl_rate+0x8a>
        default:
        break;
 800c5c4:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "ttl_rate\n";
 800c5c6:	4a13      	ldr	r2, [pc, #76]	; (800c614 <fm_menu_show_ttl_rate+0xd8>)
 800c5c8:	f107 0308 	add.w	r3, r7, #8
 800c5cc:	ca07      	ldmia	r2, {r0, r1, r2}
 800c5ce:	c303      	stmia	r3!, {r0, r1}
 800c5d0:	801a      	strh	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 800c5d2:	f107 0308 	add.w	r3, r7, #8
 800c5d6:	210a      	movs	r1, #10
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f7fd fb9f 	bl	8009d1c <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 800c5de:	4b09      	ldr	r3, [pc, #36]	; (800c604 <fm_menu_show_ttl_rate+0xc8>)
 800c5e0:	781b      	ldrb	r3, [r3, #0]
 800c5e2:	2b01      	cmp	r3, #1
 800c5e4:	d105      	bne.n	800c5f2 <fm_menu_show_ttl_rate+0xb6>
    {
        new_entry = 1;
 800c5e6:	4b06      	ldr	r3, [pc, #24]	; (800c600 <fm_menu_show_ttl_rate+0xc4>)
 800c5e8:	2201      	movs	r2, #1
 800c5ea:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800c5ec:	4b05      	ldr	r3, [pc, #20]	; (800c604 <fm_menu_show_ttl_rate+0xc8>)
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800c5f2:	697b      	ldr	r3, [r7, #20]
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	3718      	adds	r7, #24
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd80      	pop	{r7, pc}
 800c5fc:	0800c53d 	.word	0x0800c53d
 800c600:	200000b4 	.word	0x200000b4
 800c604:	20003959 	.word	0x20003959
 800c608:	0800c249 	.word	0x0800c249
 800c60c:	200038a0 	.word	0x200038a0
 800c610:	0800bc65 	.word	0x0800bc65
 800c614:	0800d780 	.word	0x0800d780

0800c618 <fm_menu_show_version>:
 * pantalla, con puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_version(fm_event_t event_id)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b086      	sub	sp, #24
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	4603      	mov	r3, r0
 800c620:	71fb      	strb	r3, [r7, #7]
    /*
     * Durante la ejecución de este menú no quiero que se puedan realizar
     * interrupciones de los botones (ya que si ocurre, se acumulan y luego se
     * disparan todas juntas después de pasados los delays).
     */
    HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800c622:	2028      	movs	r0, #40	; 0x28
 800c624:	f7f6 f9b8 	bl	8002998 <HAL_NVIC_DisableIRQ>

    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
 800c628:	4b35      	ldr	r3, [pc, #212]	; (800c700 <fm_menu_show_version+0xe8>)
 800c62a:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    fm_lcd_init();
 800c62c:	f7fd ff68 	bl	800a500 <fm_lcd_init>
    fm_lcd_refresh();
 800c630:	f7fd ffec 	bl	800a60c <fm_lcd_refresh>

    if (new_entry == 1)
 800c634:	4b33      	ldr	r3, [pc, #204]	; (800c704 <fm_menu_show_version+0xec>)
 800c636:	781b      	ldrb	r3, [r3, #0]
 800c638:	2b01      	cmp	r3, #1
 800c63a:	d104      	bne.n	800c646 <fm_menu_show_version+0x2e>
    {
        fm_lcd_clear();
 800c63c:	f7fd fe1f 	bl	800a27e <fm_lcd_clear>
        new_entry = 0;
 800c640:	4b30      	ldr	r3, [pc, #192]	; (800c704 <fm_menu_show_version+0xec>)
 800c642:	2200      	movs	r2, #0
 800c644:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_version(PNT_4, PNT_5);
 800c646:	2105      	movs	r1, #5
 800c648:	2004      	movs	r0, #4
 800c64a:	f7fe f892 	bl	800a772 <fm_lcd_version>
    fm_lcd_refresh();
 800c64e:	f7fd ffdd 	bl	800a60c <fm_lcd_refresh>
    HAL_Delay(3000); // @suppress("Avoid magic numbers")
 800c652:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800c656:	f7f4 fda5 	bl	80011a4 <HAL_Delay>

    switch (event_id)
 800c65a:	79fb      	ldrb	r3, [r7, #7]
 800c65c:	3b02      	subs	r3, #2
 800c65e:	2b03      	cmp	r3, #3
 800c660:	d80a      	bhi.n	800c678 <fm_menu_show_version+0x60>
 800c662:	a201      	add	r2, pc, #4	; (adr r2, 800c668 <fm_menu_show_version+0x50>)
 800c664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c668:	0800c6a3 	.word	0x0800c6a3
 800c66c:	0800c6a3 	.word	0x0800c6a3
 800c670:	0800c6a3 	.word	0x0800c6a3
 800c674:	0800c6a3 	.word	0x0800c6a3
        case EVENT_KEY_ENTER:
        break;
        case EVENT_KEY_ESC:
        break;
        default:
            osMessageQueueReset(h_event_queue);
 800c678:	4b23      	ldr	r3, [pc, #140]	; (800c708 <fm_menu_show_version+0xf0>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	4618      	mov	r0, r3
 800c67e:	f7fa f899 	bl	80067b4 <osMessageQueueReset>
            ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 800c682:	4b22      	ldr	r3, [pc, #136]	; (800c70c <fm_menu_show_version+0xf4>)
 800c684:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 800c686:	2301      	movs	r3, #1
 800c688:	74fb      	strb	r3, [r7, #19]
            osMessageQueuePut(h_event_queue, &event_now, 0, 0);
 800c68a:	4b1f      	ldr	r3, [pc, #124]	; (800c708 <fm_menu_show_version+0xf0>)
 800c68c:	6818      	ldr	r0, [r3, #0]
 800c68e:	f107 0113 	add.w	r1, r7, #19
 800c692:	2300      	movs	r3, #0
 800c694:	2200      	movs	r2, #0
 800c696:	f7f9 ffcf 	bl	8006638 <osMessageQueuePut>
            new_exit = 1;
 800c69a:	4b1d      	ldr	r3, [pc, #116]	; (800c710 <fm_menu_show_version+0xf8>)
 800c69c:	2201      	movs	r2, #1
 800c69e:	701a      	strb	r2, [r3, #0]
        break;
 800c6a0:	e000      	b.n	800c6a4 <fm_menu_show_version+0x8c>
        break;
 800c6a2:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "version\n";
 800c6a4:	4a1b      	ldr	r2, [pc, #108]	; (800c714 <fm_menu_show_version+0xfc>)
 800c6a6:	f107 0308 	add.w	r3, r7, #8
 800c6aa:	ca07      	ldmia	r2, {r0, r1, r2}
 800c6ac:	c303      	stmia	r3!, {r0, r1}
 800c6ae:	701a      	strb	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 800c6b0:	f107 0308 	add.w	r3, r7, #8
 800c6b4:	2109      	movs	r1, #9
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f7fd fb30 	bl	8009d1c <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 800c6bc:	4b14      	ldr	r3, [pc, #80]	; (800c710 <fm_menu_show_version+0xf8>)
 800c6be:	781b      	ldrb	r3, [r3, #0]
 800c6c0:	2b01      	cmp	r3, #1
 800c6c2:	d118      	bne.n	800c6f6 <fm_menu_show_version+0xde>
        /*
         * Borro flags para que no tome interrupciones realizadas con los
         * botones mientras se está mostrando la pantalla de inicio o la versión
         * del firmware.
         */
        __HAL_GPIO_EXTI_CLEAR_IT(KEY_UP_Pin);
 800c6c4:	4b14      	ldr	r3, [pc, #80]	; (800c718 <fm_menu_show_version+0x100>)
 800c6c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c6ca:	615a      	str	r2, [r3, #20]
        __HAL_GPIO_EXTI_CLEAR_IT(KEY_DOWN_Pin);
 800c6cc:	4b12      	ldr	r3, [pc, #72]	; (800c718 <fm_menu_show_version+0x100>)
 800c6ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c6d2:	615a      	str	r2, [r3, #20]
        __HAL_GPIO_EXTI_CLEAR_IT(KEY_ENTER_Pin);
 800c6d4:	4b10      	ldr	r3, [pc, #64]	; (800c718 <fm_menu_show_version+0x100>)
 800c6d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c6da:	615a      	str	r2, [r3, #20]
        __HAL_GPIO_EXTI_CLEAR_IT(KEY_ESC_Pin);
 800c6dc:	4b0e      	ldr	r3, [pc, #56]	; (800c718 <fm_menu_show_version+0x100>)
 800c6de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c6e2:	615a      	str	r2, [r3, #20]
        HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800c6e4:	2028      	movs	r0, #40	; 0x28
 800c6e6:	f7f6 f949 	bl	800297c <HAL_NVIC_EnableIRQ>

        new_entry = 1;
 800c6ea:	4b06      	ldr	r3, [pc, #24]	; (800c704 <fm_menu_show_version+0xec>)
 800c6ec:	2201      	movs	r2, #1
 800c6ee:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 800c6f0:	4b07      	ldr	r3, [pc, #28]	; (800c710 <fm_menu_show_version+0xf8>)
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 800c6f6:	697b      	ldr	r3, [r7, #20]
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3718      	adds	r7, #24
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}
 800c700:	0800c619 	.word	0x0800c619
 800c704:	200000b5 	.word	0x200000b5
 800c708:	200038a0 	.word	0x200038a0
 800c70c:	0800c53d 	.word	0x0800c53d
 800c710:	2000395a 	.word	0x2000395a
 800c714:	0800d78c 	.word	0x0800d78c
 800c718:	40010400 	.word	0x40010400

0800c71c <fm_temp_stm32_get>:
// Private function bodies.

// Public function bodies.

void fm_temp_stm32_get()
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b082      	sub	sp, #8
 800c720:	af00      	add	r7, sp, #0
    const uint8_t poll_time = 100;
 800c722:	2364      	movs	r3, #100	; 0x64
 800c724:	71fb      	strb	r3, [r7, #7]

    HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800c726:	217f      	movs	r1, #127	; 0x7f
 800c728:	4808      	ldr	r0, [pc, #32]	; (800c74c <fm_temp_stm32_get+0x30>)
 800c72a:	f7f5 ffcf 	bl	80026cc <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start(&hadc1);
 800c72e:	4807      	ldr	r0, [pc, #28]	; (800c74c <fm_temp_stm32_get+0x30>)
 800c730:	f7f5 f8d0 	bl	80018d4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, poll_time);
 800c734:	79fb      	ldrb	r3, [r7, #7]
 800c736:	4619      	mov	r1, r3
 800c738:	4804      	ldr	r0, [pc, #16]	; (800c74c <fm_temp_stm32_get+0x30>)
 800c73a:	f7f5 f961 	bl	8001a00 <HAL_ADC_PollForConversion>
    HAL_ADC_Stop(&hadc1);
 800c73e:	4803      	ldr	r0, [pc, #12]	; (800c74c <fm_temp_stm32_get+0x30>)
 800c740:	f7f5 f92b 	bl	800199a <HAL_ADC_Stop>
}
 800c744:	bf00      	nop
 800c746:	3708      	adds	r7, #8
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}
 800c74c:	2000013c 	.word	0x2000013c

0800c750 <fm_temp_stm32_format>:

int fm_temp_stm32_format()
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b082      	sub	sp, #8
 800c754:	af00      	add	r7, sp, #0
    uint16_t raw_value;
    int temp_celcius;

    fm_temp_stm32_get();
 800c756:	f7ff ffe1 	bl	800c71c <fm_temp_stm32_get>
    raw_value = HAL_ADC_GetValue(&hadc1);
 800c75a:	4812      	ldr	r0, [pc, #72]	; (800c7a4 <fm_temp_stm32_format+0x54>)
 800c75c:	f7f5 f9df 	bl	8001b1e <HAL_ADC_GetValue>
 800c760:	4603      	mov	r3, r0
 800c762:	80fb      	strh	r3, [r7, #6]
    temp_celcius = __HAL_ADC_CALC_TEMPERATURE(3285, raw_value,
 800c764:	88fb      	ldrh	r3, [r7, #6]
 800c766:	f640 42d5 	movw	r2, #3285	; 0xcd5
 800c76a:	fb02 f303 	mul.w	r3, r2, r3
 800c76e:	461a      	mov	r2, r3
 800c770:	4b0d      	ldr	r3, [pc, #52]	; (800c7a8 <fm_temp_stm32_format+0x58>)
 800c772:	fba3 2302 	umull	r2, r3, r3, r2
 800c776:	099b      	lsrs	r3, r3, #6
 800c778:	461a      	mov	r2, r3
 800c77a:	4b0c      	ldr	r3, [pc, #48]	; (800c7ac <fm_temp_stm32_format+0x5c>)
 800c77c:	881b      	ldrh	r3, [r3, #0]
 800c77e:	1ad3      	subs	r3, r2, r3
 800c780:	2264      	movs	r2, #100	; 0x64
 800c782:	fb03 f202 	mul.w	r2, r3, r2
 800c786:	4b0a      	ldr	r3, [pc, #40]	; (800c7b0 <fm_temp_stm32_format+0x60>)
 800c788:	881b      	ldrh	r3, [r3, #0]
 800c78a:	4619      	mov	r1, r3
 800c78c:	4b07      	ldr	r3, [pc, #28]	; (800c7ac <fm_temp_stm32_format+0x5c>)
 800c78e:	881b      	ldrh	r3, [r3, #0]
 800c790:	1acb      	subs	r3, r1, r3
 800c792:	fb92 f3f3 	sdiv	r3, r2, r3
 800c796:	331e      	adds	r3, #30
 800c798:	603b      	str	r3, [r7, #0]
    ADC_RESOLUTION_12B);

    return (temp_celcius);
 800c79a:	683b      	ldr	r3, [r7, #0]
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	3708      	adds	r7, #8
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}
 800c7a4:	2000013c 	.word	0x2000013c
 800c7a8:	057619f1 	.word	0x057619f1
 800c7ac:	1fff75a8 	.word	0x1fff75a8
 800c7b0:	1fff75ca 	.word	0x1fff75ca

0800c7b4 <fm_version_get>:
 * actualizado este valor.
 * @param None
 * @retval Número de versión en formato VRR.
 */
uint32_t fm_version_get()
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b088      	sub	sp, #32
 800c7b8:	af02      	add	r7, sp, #8
    uint32_t version = 0;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	617b      	str	r3, [r7, #20]
    char version_arr[PCF8553_DATA_SIZE];

    sprintf(version_arr, "%d%d%d", VERSION, REVISION, RELEASE);
 800c7be:	4638      	mov	r0, r7
 800c7c0:	2309      	movs	r3, #9
 800c7c2:	9300      	str	r3, [sp, #0]
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	2201      	movs	r2, #1
 800c7c8:	4906      	ldr	r1, [pc, #24]	; (800c7e4 <fm_version_get+0x30>)
 800c7ca:	f000 fad9 	bl	800cd80 <siprintf>
    /*
     * Esta instrucción está de mas ya que después se vuelve a formatear el
     * entero en un arreglo, pero por ahora se va a quedar así hasta que se
     * elimine el formatter de la libreria fm_lcd.h
     */
    version = atoi(version_arr);
 800c7ce:	463b      	mov	r3, r7
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f000 f94d 	bl	800ca70 <atoi>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	617b      	str	r3, [r7, #20]

    return (version);
 800c7da:	697b      	ldr	r3, [r7, #20]
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	3718      	adds	r7, #24
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}
 800c7e4:	0800d798 	.word	0x0800d798

0800c7e8 <fmc_get_acm>:
 * parámetro de retorno.
 * @param  None
 * @retval Volumen acumulado como estructura.
 */
fmc_totalizer_t fmc_get_acm()
{
 800c7e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7ea:	b093      	sub	sp, #76	; 0x4c
 800c7ec:	af06      	add	r7, sp, #24
 800c7ee:	62f8      	str	r0, [r7, #44]	; 0x2c
    acm = fm_factory_get_acm();
 800c7f0:	4c1c      	ldr	r4, [pc, #112]	; (800c864 <fmc_get_acm+0x7c>)
 800c7f2:	f107 0308 	add.w	r3, r7, #8
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f7fd fabc 	bl	8009d74 <fm_factory_get_acm>
 800c7fc:	4625      	mov	r5, r4
 800c7fe:	f107 0408 	add.w	r4, r7, #8
 800c802:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c804:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c806:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c80a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    acm = fmc_totalizer_init(acm);
 800c80e:	4b15      	ldr	r3, [pc, #84]	; (800c864 <fmc_get_acm+0x7c>)
 800c810:	607b      	str	r3, [r7, #4]
 800c812:	f107 0c08 	add.w	ip, r7, #8
 800c816:	4e13      	ldr	r6, [pc, #76]	; (800c864 <fmc_get_acm+0x7c>)
 800c818:	466d      	mov	r5, sp
 800c81a:	f106 0408 	add.w	r4, r6, #8
 800c81e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c820:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c822:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c826:	e885 0003 	stmia.w	r5, {r0, r1}
 800c82a:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c82e:	4660      	mov	r0, ip
 800c830:	f000 f8c0 	bl	800c9b4 <fmc_totalizer_init>
 800c834:	687d      	ldr	r5, [r7, #4]
 800c836:	f107 0408 	add.w	r4, r7, #8
 800c83a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c83c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c83e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c842:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    return (acm);
 800c846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c848:	4a06      	ldr	r2, [pc, #24]	; (800c864 <fmc_get_acm+0x7c>)
 800c84a:	461c      	mov	r4, r3
 800c84c:	4615      	mov	r5, r2
 800c84e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c850:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c852:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c856:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800c85a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c85c:	3734      	adds	r7, #52	; 0x34
 800c85e:	46bd      	mov	sp, r7
 800c860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c862:	bf00      	nop
 800c864:	20003960 	.word	0x20003960

0800c868 <fmc_get_stm32_temp>:
 * @retval temperatura interna del microcontrolador como una estructura que
 * contiene su valor, resolución y unidad.
 * global.
 */
fmc_temp_t fmc_get_stm32_temp()
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b088      	sub	sp, #32
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
    int_temperature.temperature.num = fm_temp_stm32_format();
 800c870:	f7ff ff6e 	bl	800c750 <fm_temp_stm32_format>
 800c874:	4603      	mov	r3, r0
 800c876:	461a      	mov	r2, r3
 800c878:	4b0d      	ldr	r3, [pc, #52]	; (800c8b0 <fmc_get_stm32_temp+0x48>)
 800c87a:	601a      	str	r2, [r3, #0]
    int_temperature.temperature.res = fm_factory_get_temp().temperature.res;
 800c87c:	f107 0308 	add.w	r3, r7, #8
 800c880:	4618      	mov	r0, r3
 800c882:	f7fd fab9 	bl	8009df8 <fm_factory_get_temp>
 800c886:	7b3a      	ldrb	r2, [r7, #12]
 800c888:	4b09      	ldr	r3, [pc, #36]	; (800c8b0 <fmc_get_stm32_temp+0x48>)
 800c88a:	711a      	strb	r2, [r3, #4]
    int_temperature.unit_volume_temp = fm_factory_get_temp().unit_volume_temp;
 800c88c:	f107 0314 	add.w	r3, r7, #20
 800c890:	4618      	mov	r0, r3
 800c892:	f7fd fab1 	bl	8009df8 <fm_factory_get_temp>
 800c896:	7f3a      	ldrb	r2, [r7, #28]
 800c898:	4b05      	ldr	r3, [pc, #20]	; (800c8b0 <fmc_get_stm32_temp+0x48>)
 800c89a:	721a      	strb	r2, [r3, #8]

    return (int_temperature);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	4a04      	ldr	r2, [pc, #16]	; (800c8b0 <fmc_get_stm32_temp+0x48>)
 800c8a0:	ca07      	ldmia	r2, {r0, r1, r2}
 800c8a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	3720      	adds	r7, #32
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}
 800c8ae:	bf00      	nop
 800c8b0:	200039c0 	.word	0x200039c0

0800c8b4 <fmc_get_rate>:
 * devuelve como parámetro de retorno.
 * @param  None
 * @retval caudal instantaneo como estructura.
 */
fmc_totalizer_t fmc_get_rate()
{
 800c8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8b6:	b093      	sub	sp, #76	; 0x4c
 800c8b8:	af06      	add	r7, sp, #24
 800c8ba:	62f8      	str	r0, [r7, #44]	; 0x2c
    rate = fm_factory_get_rate();
 800c8bc:	4c1c      	ldr	r4, [pc, #112]	; (800c930 <fmc_get_rate+0x7c>)
 800c8be:	f107 0308 	add.w	r3, r7, #8
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f7fd fa82 	bl	8009dcc <fm_factory_get_rate>
 800c8c8:	4625      	mov	r5, r4
 800c8ca:	f107 0408 	add.w	r4, r7, #8
 800c8ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c8d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c8d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c8d6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    rate = fmc_totalizer_init(rate);
 800c8da:	4b15      	ldr	r3, [pc, #84]	; (800c930 <fmc_get_rate+0x7c>)
 800c8dc:	607b      	str	r3, [r7, #4]
 800c8de:	f107 0c08 	add.w	ip, r7, #8
 800c8e2:	4e13      	ldr	r6, [pc, #76]	; (800c930 <fmc_get_rate+0x7c>)
 800c8e4:	466d      	mov	r5, sp
 800c8e6:	f106 0408 	add.w	r4, r6, #8
 800c8ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c8ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c8ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c8f2:	e885 0003 	stmia.w	r5, {r0, r1}
 800c8f6:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c8fa:	4660      	mov	r0, ip
 800c8fc:	f000 f85a 	bl	800c9b4 <fmc_totalizer_init>
 800c900:	687d      	ldr	r5, [r7, #4]
 800c902:	f107 0408 	add.w	r4, r7, #8
 800c906:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c908:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c90a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c90e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    return (rate);
 800c912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c914:	4a06      	ldr	r2, [pc, #24]	; (800c930 <fmc_get_rate+0x7c>)
 800c916:	461c      	mov	r4, r3
 800c918:	4615      	mov	r5, r2
 800c91a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c91c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c91e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c922:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800c926:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c928:	3734      	adds	r7, #52	; 0x34
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c92e:	bf00      	nop
 800c930:	20003980 	.word	0x20003980

0800c934 <fmc_get_ttl>:
 * parámetro de retorno.
 * @param  None
 * @retval volumen histórico como estructura.
 */
fmc_totalizer_t fmc_get_ttl()
{
 800c934:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c936:	b093      	sub	sp, #76	; 0x4c
 800c938:	af06      	add	r7, sp, #24
 800c93a:	62f8      	str	r0, [r7, #44]	; 0x2c
    ttl = fm_factory_get_ttl();
 800c93c:	4c1c      	ldr	r4, [pc, #112]	; (800c9b0 <fmc_get_ttl+0x7c>)
 800c93e:	f107 0308 	add.w	r3, r7, #8
 800c942:	4618      	mov	r0, r3
 800c944:	f7fd fa2c 	bl	8009da0 <fm_factory_get_ttl>
 800c948:	4625      	mov	r5, r4
 800c94a:	f107 0408 	add.w	r4, r7, #8
 800c94e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c950:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c952:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c956:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    ttl = fmc_totalizer_init(ttl);
 800c95a:	4b15      	ldr	r3, [pc, #84]	; (800c9b0 <fmc_get_ttl+0x7c>)
 800c95c:	607b      	str	r3, [r7, #4]
 800c95e:	f107 0c08 	add.w	ip, r7, #8
 800c962:	4e13      	ldr	r6, [pc, #76]	; (800c9b0 <fmc_get_ttl+0x7c>)
 800c964:	466d      	mov	r5, sp
 800c966:	f106 0408 	add.w	r4, r6, #8
 800c96a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c96c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c96e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c972:	e885 0003 	stmia.w	r5, {r0, r1}
 800c976:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c97a:	4660      	mov	r0, ip
 800c97c:	f000 f81a 	bl	800c9b4 <fmc_totalizer_init>
 800c980:	687d      	ldr	r5, [r7, #4]
 800c982:	f107 0408 	add.w	r4, r7, #8
 800c986:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c988:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c98a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c98e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    return (ttl);
 800c992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c994:	4a06      	ldr	r2, [pc, #24]	; (800c9b0 <fmc_get_ttl+0x7c>)
 800c996:	461c      	mov	r4, r3
 800c998:	4615      	mov	r5, r2
 800c99a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c99c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c99e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c9a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800c9a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c9a8:	3734      	adds	r7, #52	; 0x34
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9ae:	bf00      	nop
 800c9b0:	200039a0 	.word	0x200039a0

0800c9b4 <fmc_totalizer_init>:
 * @brief
 * @param
 * @retval None
 */
fmc_totalizer_t fmc_totalizer_init(fmc_totalizer_t totalizer)
{
 800c9b4:	b082      	sub	sp, #8
 800c9b6:	b5b0      	push	{r4, r5, r7, lr}
 800c9b8:	b082      	sub	sp, #8
 800c9ba:	af00      	add	r7, sp, #0
 800c9bc:	6078      	str	r0, [r7, #4]
 800c9be:	f107 0118 	add.w	r1, r7, #24
 800c9c2:	e881 000c 	stmia.w	r1, {r2, r3}
    fmc_totalizer_refresh(&totalizer);
 800c9c6:	f107 0018 	add.w	r0, r7, #24
 800c9ca:	f000 f811 	bl	800c9f0 <fmc_totalizer_refresh>

    return (totalizer);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	461d      	mov	r5, r3
 800c9d2:	f107 0418 	add.w	r4, r7, #24
 800c9d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c9d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c9da:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c9de:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	3708      	adds	r7, #8
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c9ec:	b002      	add	sp, #8
 800c9ee:	4770      	bx	lr

0800c9f0 <fmc_totalizer_refresh>:
 * @param  puntero a estructura que contiene datos como la cantidad de pulsos
 * leidos, valor y resolución del caudal/volumen, entre otros.
 * @retval None
 */
void fmc_totalizer_refresh(fmc_totalizer_t *p_totalizer)
{
 800c9f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c9f4:	b084      	sub	sp, #16
 800c9f6:	af00      	add	r7, sp, #0
 800c9f8:	6078      	str	r0, [r7, #4]
    uint64_t result;

    /*
     * result es la cantidad de pulsos almacenados en la estructura p_totalizer.
     */
    result = (uint64_t) p_totalizer->pulse;
 800c9fa:	6879      	ldr	r1, [r7, #4]
 800c9fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca00:	e9c7 0102 	strd	r0, r1, [r7, #8]

    /*
     * Pulsos escalados en el factor y en la resolucion a mostrar.
     */
    result *= g_scalar[p_totalizer->factor.res + p_totalizer->volume.res];
 800ca04:	6879      	ldr	r1, [r7, #4]
 800ca06:	7d09      	ldrb	r1, [r1, #20]
 800ca08:	4608      	mov	r0, r1
 800ca0a:	6879      	ldr	r1, [r7, #4]
 800ca0c:	7b09      	ldrb	r1, [r1, #12]
 800ca0e:	4401      	add	r1, r0
 800ca10:	4816      	ldr	r0, [pc, #88]	; (800ca6c <fmc_totalizer_refresh+0x7c>)
 800ca12:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800ca16:	2000      	movs	r0, #0
 800ca18:	460c      	mov	r4, r1
 800ca1a:	4605      	mov	r5, r0
 800ca1c:	68f9      	ldr	r1, [r7, #12]
 800ca1e:	fb04 f001 	mul.w	r0, r4, r1
 800ca22:	68b9      	ldr	r1, [r7, #8]
 800ca24:	fb05 f101 	mul.w	r1, r5, r1
 800ca28:	4401      	add	r1, r0
 800ca2a:	68b8      	ldr	r0, [r7, #8]
 800ca2c:	fba0 2304 	umull	r2, r3, r0, r4
 800ca30:	4419      	add	r1, r3
 800ca32:	460b      	mov	r3, r1
 800ca34:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800ca38:	e9c7 2302 	strd	r2, r3, [r7, #8]

    /*
     * Obtengo el valor numérico del volumen dividiendo los pulsos escalados
     * por el factor.
     */
    result /= p_totalizer->factor.num;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	691b      	ldr	r3, [r3, #16]
 800ca40:	2200      	movs	r2, #0
 800ca42:	4698      	mov	r8, r3
 800ca44:	4691      	mov	r9, r2
 800ca46:	4642      	mov	r2, r8
 800ca48:	464b      	mov	r3, r9
 800ca4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ca4e:	f7f3 fc1f 	bl	8000290 <__aeabi_uldivmod>
 800ca52:	4602      	mov	r2, r0
 800ca54:	460b      	mov	r3, r1
 800ca56:	e9c7 2302 	strd	r2, r3, [r7, #8]

    p_totalizer->volume.num = (uint32_t) result;
 800ca5a:	68ba      	ldr	r2, [r7, #8]
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	609a      	str	r2, [r3, #8]

}
 800ca60:	bf00      	nop
 800ca62:	3710      	adds	r7, #16
 800ca64:	46bd      	mov	sp, r7
 800ca66:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ca6a:	bf00      	nop
 800ca6c:	0800d858 	.word	0x0800d858

0800ca70 <atoi>:
 800ca70:	220a      	movs	r2, #10
 800ca72:	2100      	movs	r1, #0
 800ca74:	f000 ba26 	b.w	800cec4 <strtol>

0800ca78 <__errno>:
 800ca78:	4b01      	ldr	r3, [pc, #4]	; (800ca80 <__errno+0x8>)
 800ca7a:	6818      	ldr	r0, [r3, #0]
 800ca7c:	4770      	bx	lr
 800ca7e:	bf00      	nop
 800ca80:	200000b8 	.word	0x200000b8

0800ca84 <__libc_init_array>:
 800ca84:	b570      	push	{r4, r5, r6, lr}
 800ca86:	4d0d      	ldr	r5, [pc, #52]	; (800cabc <__libc_init_array+0x38>)
 800ca88:	4c0d      	ldr	r4, [pc, #52]	; (800cac0 <__libc_init_array+0x3c>)
 800ca8a:	1b64      	subs	r4, r4, r5
 800ca8c:	10a4      	asrs	r4, r4, #2
 800ca8e:	2600      	movs	r6, #0
 800ca90:	42a6      	cmp	r6, r4
 800ca92:	d109      	bne.n	800caa8 <__libc_init_array+0x24>
 800ca94:	4d0b      	ldr	r5, [pc, #44]	; (800cac4 <__libc_init_array+0x40>)
 800ca96:	4c0c      	ldr	r4, [pc, #48]	; (800cac8 <__libc_init_array+0x44>)
 800ca98:	f000 fdb8 	bl	800d60c <_init>
 800ca9c:	1b64      	subs	r4, r4, r5
 800ca9e:	10a4      	asrs	r4, r4, #2
 800caa0:	2600      	movs	r6, #0
 800caa2:	42a6      	cmp	r6, r4
 800caa4:	d105      	bne.n	800cab2 <__libc_init_array+0x2e>
 800caa6:	bd70      	pop	{r4, r5, r6, pc}
 800caa8:	f855 3b04 	ldr.w	r3, [r5], #4
 800caac:	4798      	blx	r3
 800caae:	3601      	adds	r6, #1
 800cab0:	e7ee      	b.n	800ca90 <__libc_init_array+0xc>
 800cab2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cab6:	4798      	blx	r3
 800cab8:	3601      	adds	r6, #1
 800caba:	e7f2      	b.n	800caa2 <__libc_init_array+0x1e>
 800cabc:	0800da10 	.word	0x0800da10
 800cac0:	0800da10 	.word	0x0800da10
 800cac4:	0800da10 	.word	0x0800da10
 800cac8:	0800da14 	.word	0x0800da14

0800cacc <__retarget_lock_acquire_recursive>:
 800cacc:	4770      	bx	lr

0800cace <__retarget_lock_release_recursive>:
 800cace:	4770      	bx	lr

0800cad0 <memcpy>:
 800cad0:	440a      	add	r2, r1
 800cad2:	4291      	cmp	r1, r2
 800cad4:	f100 33ff 	add.w	r3, r0, #4294967295
 800cad8:	d100      	bne.n	800cadc <memcpy+0xc>
 800cada:	4770      	bx	lr
 800cadc:	b510      	push	{r4, lr}
 800cade:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cae2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cae6:	4291      	cmp	r1, r2
 800cae8:	d1f9      	bne.n	800cade <memcpy+0xe>
 800caea:	bd10      	pop	{r4, pc}

0800caec <memset>:
 800caec:	4402      	add	r2, r0
 800caee:	4603      	mov	r3, r0
 800caf0:	4293      	cmp	r3, r2
 800caf2:	d100      	bne.n	800caf6 <memset+0xa>
 800caf4:	4770      	bx	lr
 800caf6:	f803 1b01 	strb.w	r1, [r3], #1
 800cafa:	e7f9      	b.n	800caf0 <memset+0x4>

0800cafc <sbrk_aligned>:
 800cafc:	b570      	push	{r4, r5, r6, lr}
 800cafe:	4e0e      	ldr	r6, [pc, #56]	; (800cb38 <sbrk_aligned+0x3c>)
 800cb00:	460c      	mov	r4, r1
 800cb02:	6831      	ldr	r1, [r6, #0]
 800cb04:	4605      	mov	r5, r0
 800cb06:	b911      	cbnz	r1, 800cb0e <sbrk_aligned+0x12>
 800cb08:	f000 f8f6 	bl	800ccf8 <_sbrk_r>
 800cb0c:	6030      	str	r0, [r6, #0]
 800cb0e:	4621      	mov	r1, r4
 800cb10:	4628      	mov	r0, r5
 800cb12:	f000 f8f1 	bl	800ccf8 <_sbrk_r>
 800cb16:	1c43      	adds	r3, r0, #1
 800cb18:	d00a      	beq.n	800cb30 <sbrk_aligned+0x34>
 800cb1a:	1cc4      	adds	r4, r0, #3
 800cb1c:	f024 0403 	bic.w	r4, r4, #3
 800cb20:	42a0      	cmp	r0, r4
 800cb22:	d007      	beq.n	800cb34 <sbrk_aligned+0x38>
 800cb24:	1a21      	subs	r1, r4, r0
 800cb26:	4628      	mov	r0, r5
 800cb28:	f000 f8e6 	bl	800ccf8 <_sbrk_r>
 800cb2c:	3001      	adds	r0, #1
 800cb2e:	d101      	bne.n	800cb34 <sbrk_aligned+0x38>
 800cb30:	f04f 34ff 	mov.w	r4, #4294967295
 800cb34:	4620      	mov	r0, r4
 800cb36:	bd70      	pop	{r4, r5, r6, pc}
 800cb38:	200039d4 	.word	0x200039d4

0800cb3c <_malloc_r>:
 800cb3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb40:	1ccd      	adds	r5, r1, #3
 800cb42:	f025 0503 	bic.w	r5, r5, #3
 800cb46:	3508      	adds	r5, #8
 800cb48:	2d0c      	cmp	r5, #12
 800cb4a:	bf38      	it	cc
 800cb4c:	250c      	movcc	r5, #12
 800cb4e:	2d00      	cmp	r5, #0
 800cb50:	4607      	mov	r7, r0
 800cb52:	db01      	blt.n	800cb58 <_malloc_r+0x1c>
 800cb54:	42a9      	cmp	r1, r5
 800cb56:	d905      	bls.n	800cb64 <_malloc_r+0x28>
 800cb58:	230c      	movs	r3, #12
 800cb5a:	603b      	str	r3, [r7, #0]
 800cb5c:	2600      	movs	r6, #0
 800cb5e:	4630      	mov	r0, r6
 800cb60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb64:	4e2e      	ldr	r6, [pc, #184]	; (800cc20 <_malloc_r+0xe4>)
 800cb66:	f000 f9b7 	bl	800ced8 <__malloc_lock>
 800cb6a:	6833      	ldr	r3, [r6, #0]
 800cb6c:	461c      	mov	r4, r3
 800cb6e:	bb34      	cbnz	r4, 800cbbe <_malloc_r+0x82>
 800cb70:	4629      	mov	r1, r5
 800cb72:	4638      	mov	r0, r7
 800cb74:	f7ff ffc2 	bl	800cafc <sbrk_aligned>
 800cb78:	1c43      	adds	r3, r0, #1
 800cb7a:	4604      	mov	r4, r0
 800cb7c:	d14d      	bne.n	800cc1a <_malloc_r+0xde>
 800cb7e:	6834      	ldr	r4, [r6, #0]
 800cb80:	4626      	mov	r6, r4
 800cb82:	2e00      	cmp	r6, #0
 800cb84:	d140      	bne.n	800cc08 <_malloc_r+0xcc>
 800cb86:	6823      	ldr	r3, [r4, #0]
 800cb88:	4631      	mov	r1, r6
 800cb8a:	4638      	mov	r0, r7
 800cb8c:	eb04 0803 	add.w	r8, r4, r3
 800cb90:	f000 f8b2 	bl	800ccf8 <_sbrk_r>
 800cb94:	4580      	cmp	r8, r0
 800cb96:	d13a      	bne.n	800cc0e <_malloc_r+0xd2>
 800cb98:	6821      	ldr	r1, [r4, #0]
 800cb9a:	3503      	adds	r5, #3
 800cb9c:	1a6d      	subs	r5, r5, r1
 800cb9e:	f025 0503 	bic.w	r5, r5, #3
 800cba2:	3508      	adds	r5, #8
 800cba4:	2d0c      	cmp	r5, #12
 800cba6:	bf38      	it	cc
 800cba8:	250c      	movcc	r5, #12
 800cbaa:	4629      	mov	r1, r5
 800cbac:	4638      	mov	r0, r7
 800cbae:	f7ff ffa5 	bl	800cafc <sbrk_aligned>
 800cbb2:	3001      	adds	r0, #1
 800cbb4:	d02b      	beq.n	800cc0e <_malloc_r+0xd2>
 800cbb6:	6823      	ldr	r3, [r4, #0]
 800cbb8:	442b      	add	r3, r5
 800cbba:	6023      	str	r3, [r4, #0]
 800cbbc:	e00e      	b.n	800cbdc <_malloc_r+0xa0>
 800cbbe:	6822      	ldr	r2, [r4, #0]
 800cbc0:	1b52      	subs	r2, r2, r5
 800cbc2:	d41e      	bmi.n	800cc02 <_malloc_r+0xc6>
 800cbc4:	2a0b      	cmp	r2, #11
 800cbc6:	d916      	bls.n	800cbf6 <_malloc_r+0xba>
 800cbc8:	1961      	adds	r1, r4, r5
 800cbca:	42a3      	cmp	r3, r4
 800cbcc:	6025      	str	r5, [r4, #0]
 800cbce:	bf18      	it	ne
 800cbd0:	6059      	strne	r1, [r3, #4]
 800cbd2:	6863      	ldr	r3, [r4, #4]
 800cbd4:	bf08      	it	eq
 800cbd6:	6031      	streq	r1, [r6, #0]
 800cbd8:	5162      	str	r2, [r4, r5]
 800cbda:	604b      	str	r3, [r1, #4]
 800cbdc:	4638      	mov	r0, r7
 800cbde:	f104 060b 	add.w	r6, r4, #11
 800cbe2:	f000 f97f 	bl	800cee4 <__malloc_unlock>
 800cbe6:	f026 0607 	bic.w	r6, r6, #7
 800cbea:	1d23      	adds	r3, r4, #4
 800cbec:	1af2      	subs	r2, r6, r3
 800cbee:	d0b6      	beq.n	800cb5e <_malloc_r+0x22>
 800cbf0:	1b9b      	subs	r3, r3, r6
 800cbf2:	50a3      	str	r3, [r4, r2]
 800cbf4:	e7b3      	b.n	800cb5e <_malloc_r+0x22>
 800cbf6:	6862      	ldr	r2, [r4, #4]
 800cbf8:	42a3      	cmp	r3, r4
 800cbfa:	bf0c      	ite	eq
 800cbfc:	6032      	streq	r2, [r6, #0]
 800cbfe:	605a      	strne	r2, [r3, #4]
 800cc00:	e7ec      	b.n	800cbdc <_malloc_r+0xa0>
 800cc02:	4623      	mov	r3, r4
 800cc04:	6864      	ldr	r4, [r4, #4]
 800cc06:	e7b2      	b.n	800cb6e <_malloc_r+0x32>
 800cc08:	4634      	mov	r4, r6
 800cc0a:	6876      	ldr	r6, [r6, #4]
 800cc0c:	e7b9      	b.n	800cb82 <_malloc_r+0x46>
 800cc0e:	230c      	movs	r3, #12
 800cc10:	603b      	str	r3, [r7, #0]
 800cc12:	4638      	mov	r0, r7
 800cc14:	f000 f966 	bl	800cee4 <__malloc_unlock>
 800cc18:	e7a1      	b.n	800cb5e <_malloc_r+0x22>
 800cc1a:	6025      	str	r5, [r4, #0]
 800cc1c:	e7de      	b.n	800cbdc <_malloc_r+0xa0>
 800cc1e:	bf00      	nop
 800cc20:	200039d0 	.word	0x200039d0

0800cc24 <cleanup_glue>:
 800cc24:	b538      	push	{r3, r4, r5, lr}
 800cc26:	460c      	mov	r4, r1
 800cc28:	6809      	ldr	r1, [r1, #0]
 800cc2a:	4605      	mov	r5, r0
 800cc2c:	b109      	cbz	r1, 800cc32 <cleanup_glue+0xe>
 800cc2e:	f7ff fff9 	bl	800cc24 <cleanup_glue>
 800cc32:	4621      	mov	r1, r4
 800cc34:	4628      	mov	r0, r5
 800cc36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc3a:	f000 b959 	b.w	800cef0 <_free_r>
	...

0800cc40 <_reclaim_reent>:
 800cc40:	4b2c      	ldr	r3, [pc, #176]	; (800ccf4 <_reclaim_reent+0xb4>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	4283      	cmp	r3, r0
 800cc46:	b570      	push	{r4, r5, r6, lr}
 800cc48:	4604      	mov	r4, r0
 800cc4a:	d051      	beq.n	800ccf0 <_reclaim_reent+0xb0>
 800cc4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800cc4e:	b143      	cbz	r3, 800cc62 <_reclaim_reent+0x22>
 800cc50:	68db      	ldr	r3, [r3, #12]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d14a      	bne.n	800ccec <_reclaim_reent+0xac>
 800cc56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc58:	6819      	ldr	r1, [r3, #0]
 800cc5a:	b111      	cbz	r1, 800cc62 <_reclaim_reent+0x22>
 800cc5c:	4620      	mov	r0, r4
 800cc5e:	f000 f947 	bl	800cef0 <_free_r>
 800cc62:	6961      	ldr	r1, [r4, #20]
 800cc64:	b111      	cbz	r1, 800cc6c <_reclaim_reent+0x2c>
 800cc66:	4620      	mov	r0, r4
 800cc68:	f000 f942 	bl	800cef0 <_free_r>
 800cc6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cc6e:	b111      	cbz	r1, 800cc76 <_reclaim_reent+0x36>
 800cc70:	4620      	mov	r0, r4
 800cc72:	f000 f93d 	bl	800cef0 <_free_r>
 800cc76:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cc78:	b111      	cbz	r1, 800cc80 <_reclaim_reent+0x40>
 800cc7a:	4620      	mov	r0, r4
 800cc7c:	f000 f938 	bl	800cef0 <_free_r>
 800cc80:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800cc82:	b111      	cbz	r1, 800cc8a <_reclaim_reent+0x4a>
 800cc84:	4620      	mov	r0, r4
 800cc86:	f000 f933 	bl	800cef0 <_free_r>
 800cc8a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cc8c:	b111      	cbz	r1, 800cc94 <_reclaim_reent+0x54>
 800cc8e:	4620      	mov	r0, r4
 800cc90:	f000 f92e 	bl	800cef0 <_free_r>
 800cc94:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800cc96:	b111      	cbz	r1, 800cc9e <_reclaim_reent+0x5e>
 800cc98:	4620      	mov	r0, r4
 800cc9a:	f000 f929 	bl	800cef0 <_free_r>
 800cc9e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800cca0:	b111      	cbz	r1, 800cca8 <_reclaim_reent+0x68>
 800cca2:	4620      	mov	r0, r4
 800cca4:	f000 f924 	bl	800cef0 <_free_r>
 800cca8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ccaa:	b111      	cbz	r1, 800ccb2 <_reclaim_reent+0x72>
 800ccac:	4620      	mov	r0, r4
 800ccae:	f000 f91f 	bl	800cef0 <_free_r>
 800ccb2:	69a3      	ldr	r3, [r4, #24]
 800ccb4:	b1e3      	cbz	r3, 800ccf0 <_reclaim_reent+0xb0>
 800ccb6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ccb8:	4620      	mov	r0, r4
 800ccba:	4798      	blx	r3
 800ccbc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ccbe:	b1b9      	cbz	r1, 800ccf0 <_reclaim_reent+0xb0>
 800ccc0:	4620      	mov	r0, r4
 800ccc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ccc6:	f7ff bfad 	b.w	800cc24 <cleanup_glue>
 800ccca:	5949      	ldr	r1, [r1, r5]
 800cccc:	b941      	cbnz	r1, 800cce0 <_reclaim_reent+0xa0>
 800ccce:	3504      	adds	r5, #4
 800ccd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ccd2:	2d80      	cmp	r5, #128	; 0x80
 800ccd4:	68d9      	ldr	r1, [r3, #12]
 800ccd6:	d1f8      	bne.n	800ccca <_reclaim_reent+0x8a>
 800ccd8:	4620      	mov	r0, r4
 800ccda:	f000 f909 	bl	800cef0 <_free_r>
 800ccde:	e7ba      	b.n	800cc56 <_reclaim_reent+0x16>
 800cce0:	680e      	ldr	r6, [r1, #0]
 800cce2:	4620      	mov	r0, r4
 800cce4:	f000 f904 	bl	800cef0 <_free_r>
 800cce8:	4631      	mov	r1, r6
 800ccea:	e7ef      	b.n	800cccc <_reclaim_reent+0x8c>
 800ccec:	2500      	movs	r5, #0
 800ccee:	e7ef      	b.n	800ccd0 <_reclaim_reent+0x90>
 800ccf0:	bd70      	pop	{r4, r5, r6, pc}
 800ccf2:	bf00      	nop
 800ccf4:	200000b8 	.word	0x200000b8

0800ccf8 <_sbrk_r>:
 800ccf8:	b538      	push	{r3, r4, r5, lr}
 800ccfa:	4d06      	ldr	r5, [pc, #24]	; (800cd14 <_sbrk_r+0x1c>)
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	4604      	mov	r4, r0
 800cd00:	4608      	mov	r0, r1
 800cd02:	602b      	str	r3, [r5, #0]
 800cd04:	f7f4 f9a4 	bl	8001050 <_sbrk>
 800cd08:	1c43      	adds	r3, r0, #1
 800cd0a:	d102      	bne.n	800cd12 <_sbrk_r+0x1a>
 800cd0c:	682b      	ldr	r3, [r5, #0]
 800cd0e:	b103      	cbz	r3, 800cd12 <_sbrk_r+0x1a>
 800cd10:	6023      	str	r3, [r4, #0]
 800cd12:	bd38      	pop	{r3, r4, r5, pc}
 800cd14:	200039d8 	.word	0x200039d8

0800cd18 <sniprintf>:
 800cd18:	b40c      	push	{r2, r3}
 800cd1a:	b530      	push	{r4, r5, lr}
 800cd1c:	4b17      	ldr	r3, [pc, #92]	; (800cd7c <sniprintf+0x64>)
 800cd1e:	1e0c      	subs	r4, r1, #0
 800cd20:	681d      	ldr	r5, [r3, #0]
 800cd22:	b09d      	sub	sp, #116	; 0x74
 800cd24:	da08      	bge.n	800cd38 <sniprintf+0x20>
 800cd26:	238b      	movs	r3, #139	; 0x8b
 800cd28:	602b      	str	r3, [r5, #0]
 800cd2a:	f04f 30ff 	mov.w	r0, #4294967295
 800cd2e:	b01d      	add	sp, #116	; 0x74
 800cd30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd34:	b002      	add	sp, #8
 800cd36:	4770      	bx	lr
 800cd38:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cd3c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cd40:	bf14      	ite	ne
 800cd42:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cd46:	4623      	moveq	r3, r4
 800cd48:	9304      	str	r3, [sp, #16]
 800cd4a:	9307      	str	r3, [sp, #28]
 800cd4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cd50:	9002      	str	r0, [sp, #8]
 800cd52:	9006      	str	r0, [sp, #24]
 800cd54:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cd58:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cd5a:	ab21      	add	r3, sp, #132	; 0x84
 800cd5c:	a902      	add	r1, sp, #8
 800cd5e:	4628      	mov	r0, r5
 800cd60:	9301      	str	r3, [sp, #4]
 800cd62:	f000 f96d 	bl	800d040 <_svfiprintf_r>
 800cd66:	1c43      	adds	r3, r0, #1
 800cd68:	bfbc      	itt	lt
 800cd6a:	238b      	movlt	r3, #139	; 0x8b
 800cd6c:	602b      	strlt	r3, [r5, #0]
 800cd6e:	2c00      	cmp	r4, #0
 800cd70:	d0dd      	beq.n	800cd2e <sniprintf+0x16>
 800cd72:	9b02      	ldr	r3, [sp, #8]
 800cd74:	2200      	movs	r2, #0
 800cd76:	701a      	strb	r2, [r3, #0]
 800cd78:	e7d9      	b.n	800cd2e <sniprintf+0x16>
 800cd7a:	bf00      	nop
 800cd7c:	200000b8 	.word	0x200000b8

0800cd80 <siprintf>:
 800cd80:	b40e      	push	{r1, r2, r3}
 800cd82:	b500      	push	{lr}
 800cd84:	b09c      	sub	sp, #112	; 0x70
 800cd86:	ab1d      	add	r3, sp, #116	; 0x74
 800cd88:	9002      	str	r0, [sp, #8]
 800cd8a:	9006      	str	r0, [sp, #24]
 800cd8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cd90:	4809      	ldr	r0, [pc, #36]	; (800cdb8 <siprintf+0x38>)
 800cd92:	9107      	str	r1, [sp, #28]
 800cd94:	9104      	str	r1, [sp, #16]
 800cd96:	4909      	ldr	r1, [pc, #36]	; (800cdbc <siprintf+0x3c>)
 800cd98:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd9c:	9105      	str	r1, [sp, #20]
 800cd9e:	6800      	ldr	r0, [r0, #0]
 800cda0:	9301      	str	r3, [sp, #4]
 800cda2:	a902      	add	r1, sp, #8
 800cda4:	f000 f94c 	bl	800d040 <_svfiprintf_r>
 800cda8:	9b02      	ldr	r3, [sp, #8]
 800cdaa:	2200      	movs	r2, #0
 800cdac:	701a      	strb	r2, [r3, #0]
 800cdae:	b01c      	add	sp, #112	; 0x70
 800cdb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cdb4:	b003      	add	sp, #12
 800cdb6:	4770      	bx	lr
 800cdb8:	200000b8 	.word	0x200000b8
 800cdbc:	ffff0208 	.word	0xffff0208

0800cdc0 <_strtol_l.constprop.0>:
 800cdc0:	2b01      	cmp	r3, #1
 800cdc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdc6:	d001      	beq.n	800cdcc <_strtol_l.constprop.0+0xc>
 800cdc8:	2b24      	cmp	r3, #36	; 0x24
 800cdca:	d906      	bls.n	800cdda <_strtol_l.constprop.0+0x1a>
 800cdcc:	f7ff fe54 	bl	800ca78 <__errno>
 800cdd0:	2316      	movs	r3, #22
 800cdd2:	6003      	str	r3, [r0, #0]
 800cdd4:	2000      	movs	r0, #0
 800cdd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdda:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cec0 <_strtol_l.constprop.0+0x100>
 800cdde:	460d      	mov	r5, r1
 800cde0:	462e      	mov	r6, r5
 800cde2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cde6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800cdea:	f017 0708 	ands.w	r7, r7, #8
 800cdee:	d1f7      	bne.n	800cde0 <_strtol_l.constprop.0+0x20>
 800cdf0:	2c2d      	cmp	r4, #45	; 0x2d
 800cdf2:	d132      	bne.n	800ce5a <_strtol_l.constprop.0+0x9a>
 800cdf4:	782c      	ldrb	r4, [r5, #0]
 800cdf6:	2701      	movs	r7, #1
 800cdf8:	1cb5      	adds	r5, r6, #2
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d05b      	beq.n	800ceb6 <_strtol_l.constprop.0+0xf6>
 800cdfe:	2b10      	cmp	r3, #16
 800ce00:	d109      	bne.n	800ce16 <_strtol_l.constprop.0+0x56>
 800ce02:	2c30      	cmp	r4, #48	; 0x30
 800ce04:	d107      	bne.n	800ce16 <_strtol_l.constprop.0+0x56>
 800ce06:	782c      	ldrb	r4, [r5, #0]
 800ce08:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ce0c:	2c58      	cmp	r4, #88	; 0x58
 800ce0e:	d14d      	bne.n	800ceac <_strtol_l.constprop.0+0xec>
 800ce10:	786c      	ldrb	r4, [r5, #1]
 800ce12:	2310      	movs	r3, #16
 800ce14:	3502      	adds	r5, #2
 800ce16:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ce1a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ce1e:	f04f 0c00 	mov.w	ip, #0
 800ce22:	fbb8 f9f3 	udiv	r9, r8, r3
 800ce26:	4666      	mov	r6, ip
 800ce28:	fb03 8a19 	mls	sl, r3, r9, r8
 800ce2c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ce30:	f1be 0f09 	cmp.w	lr, #9
 800ce34:	d816      	bhi.n	800ce64 <_strtol_l.constprop.0+0xa4>
 800ce36:	4674      	mov	r4, lr
 800ce38:	42a3      	cmp	r3, r4
 800ce3a:	dd24      	ble.n	800ce86 <_strtol_l.constprop.0+0xc6>
 800ce3c:	f1bc 0f00 	cmp.w	ip, #0
 800ce40:	db1e      	blt.n	800ce80 <_strtol_l.constprop.0+0xc0>
 800ce42:	45b1      	cmp	r9, r6
 800ce44:	d31c      	bcc.n	800ce80 <_strtol_l.constprop.0+0xc0>
 800ce46:	d101      	bne.n	800ce4c <_strtol_l.constprop.0+0x8c>
 800ce48:	45a2      	cmp	sl, r4
 800ce4a:	db19      	blt.n	800ce80 <_strtol_l.constprop.0+0xc0>
 800ce4c:	fb06 4603 	mla	r6, r6, r3, r4
 800ce50:	f04f 0c01 	mov.w	ip, #1
 800ce54:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce58:	e7e8      	b.n	800ce2c <_strtol_l.constprop.0+0x6c>
 800ce5a:	2c2b      	cmp	r4, #43	; 0x2b
 800ce5c:	bf04      	itt	eq
 800ce5e:	782c      	ldrbeq	r4, [r5, #0]
 800ce60:	1cb5      	addeq	r5, r6, #2
 800ce62:	e7ca      	b.n	800cdfa <_strtol_l.constprop.0+0x3a>
 800ce64:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ce68:	f1be 0f19 	cmp.w	lr, #25
 800ce6c:	d801      	bhi.n	800ce72 <_strtol_l.constprop.0+0xb2>
 800ce6e:	3c37      	subs	r4, #55	; 0x37
 800ce70:	e7e2      	b.n	800ce38 <_strtol_l.constprop.0+0x78>
 800ce72:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ce76:	f1be 0f19 	cmp.w	lr, #25
 800ce7a:	d804      	bhi.n	800ce86 <_strtol_l.constprop.0+0xc6>
 800ce7c:	3c57      	subs	r4, #87	; 0x57
 800ce7e:	e7db      	b.n	800ce38 <_strtol_l.constprop.0+0x78>
 800ce80:	f04f 3cff 	mov.w	ip, #4294967295
 800ce84:	e7e6      	b.n	800ce54 <_strtol_l.constprop.0+0x94>
 800ce86:	f1bc 0f00 	cmp.w	ip, #0
 800ce8a:	da05      	bge.n	800ce98 <_strtol_l.constprop.0+0xd8>
 800ce8c:	2322      	movs	r3, #34	; 0x22
 800ce8e:	6003      	str	r3, [r0, #0]
 800ce90:	4646      	mov	r6, r8
 800ce92:	b942      	cbnz	r2, 800cea6 <_strtol_l.constprop.0+0xe6>
 800ce94:	4630      	mov	r0, r6
 800ce96:	e79e      	b.n	800cdd6 <_strtol_l.constprop.0+0x16>
 800ce98:	b107      	cbz	r7, 800ce9c <_strtol_l.constprop.0+0xdc>
 800ce9a:	4276      	negs	r6, r6
 800ce9c:	2a00      	cmp	r2, #0
 800ce9e:	d0f9      	beq.n	800ce94 <_strtol_l.constprop.0+0xd4>
 800cea0:	f1bc 0f00 	cmp.w	ip, #0
 800cea4:	d000      	beq.n	800cea8 <_strtol_l.constprop.0+0xe8>
 800cea6:	1e69      	subs	r1, r5, #1
 800cea8:	6011      	str	r1, [r2, #0]
 800ceaa:	e7f3      	b.n	800ce94 <_strtol_l.constprop.0+0xd4>
 800ceac:	2430      	movs	r4, #48	; 0x30
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d1b1      	bne.n	800ce16 <_strtol_l.constprop.0+0x56>
 800ceb2:	2308      	movs	r3, #8
 800ceb4:	e7af      	b.n	800ce16 <_strtol_l.constprop.0+0x56>
 800ceb6:	2c30      	cmp	r4, #48	; 0x30
 800ceb8:	d0a5      	beq.n	800ce06 <_strtol_l.constprop.0+0x46>
 800ceba:	230a      	movs	r3, #10
 800cebc:	e7ab      	b.n	800ce16 <_strtol_l.constprop.0+0x56>
 800cebe:	bf00      	nop
 800cec0:	0800d8d5 	.word	0x0800d8d5

0800cec4 <strtol>:
 800cec4:	4613      	mov	r3, r2
 800cec6:	460a      	mov	r2, r1
 800cec8:	4601      	mov	r1, r0
 800ceca:	4802      	ldr	r0, [pc, #8]	; (800ced4 <strtol+0x10>)
 800cecc:	6800      	ldr	r0, [r0, #0]
 800cece:	f7ff bf77 	b.w	800cdc0 <_strtol_l.constprop.0>
 800ced2:	bf00      	nop
 800ced4:	200000b8 	.word	0x200000b8

0800ced8 <__malloc_lock>:
 800ced8:	4801      	ldr	r0, [pc, #4]	; (800cee0 <__malloc_lock+0x8>)
 800ceda:	f7ff bdf7 	b.w	800cacc <__retarget_lock_acquire_recursive>
 800cede:	bf00      	nop
 800cee0:	200039cc 	.word	0x200039cc

0800cee4 <__malloc_unlock>:
 800cee4:	4801      	ldr	r0, [pc, #4]	; (800ceec <__malloc_unlock+0x8>)
 800cee6:	f7ff bdf2 	b.w	800cace <__retarget_lock_release_recursive>
 800ceea:	bf00      	nop
 800ceec:	200039cc 	.word	0x200039cc

0800cef0 <_free_r>:
 800cef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cef2:	2900      	cmp	r1, #0
 800cef4:	d044      	beq.n	800cf80 <_free_r+0x90>
 800cef6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cefa:	9001      	str	r0, [sp, #4]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	f1a1 0404 	sub.w	r4, r1, #4
 800cf02:	bfb8      	it	lt
 800cf04:	18e4      	addlt	r4, r4, r3
 800cf06:	f7ff ffe7 	bl	800ced8 <__malloc_lock>
 800cf0a:	4a1e      	ldr	r2, [pc, #120]	; (800cf84 <_free_r+0x94>)
 800cf0c:	9801      	ldr	r0, [sp, #4]
 800cf0e:	6813      	ldr	r3, [r2, #0]
 800cf10:	b933      	cbnz	r3, 800cf20 <_free_r+0x30>
 800cf12:	6063      	str	r3, [r4, #4]
 800cf14:	6014      	str	r4, [r2, #0]
 800cf16:	b003      	add	sp, #12
 800cf18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf1c:	f7ff bfe2 	b.w	800cee4 <__malloc_unlock>
 800cf20:	42a3      	cmp	r3, r4
 800cf22:	d908      	bls.n	800cf36 <_free_r+0x46>
 800cf24:	6825      	ldr	r5, [r4, #0]
 800cf26:	1961      	adds	r1, r4, r5
 800cf28:	428b      	cmp	r3, r1
 800cf2a:	bf01      	itttt	eq
 800cf2c:	6819      	ldreq	r1, [r3, #0]
 800cf2e:	685b      	ldreq	r3, [r3, #4]
 800cf30:	1949      	addeq	r1, r1, r5
 800cf32:	6021      	streq	r1, [r4, #0]
 800cf34:	e7ed      	b.n	800cf12 <_free_r+0x22>
 800cf36:	461a      	mov	r2, r3
 800cf38:	685b      	ldr	r3, [r3, #4]
 800cf3a:	b10b      	cbz	r3, 800cf40 <_free_r+0x50>
 800cf3c:	42a3      	cmp	r3, r4
 800cf3e:	d9fa      	bls.n	800cf36 <_free_r+0x46>
 800cf40:	6811      	ldr	r1, [r2, #0]
 800cf42:	1855      	adds	r5, r2, r1
 800cf44:	42a5      	cmp	r5, r4
 800cf46:	d10b      	bne.n	800cf60 <_free_r+0x70>
 800cf48:	6824      	ldr	r4, [r4, #0]
 800cf4a:	4421      	add	r1, r4
 800cf4c:	1854      	adds	r4, r2, r1
 800cf4e:	42a3      	cmp	r3, r4
 800cf50:	6011      	str	r1, [r2, #0]
 800cf52:	d1e0      	bne.n	800cf16 <_free_r+0x26>
 800cf54:	681c      	ldr	r4, [r3, #0]
 800cf56:	685b      	ldr	r3, [r3, #4]
 800cf58:	6053      	str	r3, [r2, #4]
 800cf5a:	4421      	add	r1, r4
 800cf5c:	6011      	str	r1, [r2, #0]
 800cf5e:	e7da      	b.n	800cf16 <_free_r+0x26>
 800cf60:	d902      	bls.n	800cf68 <_free_r+0x78>
 800cf62:	230c      	movs	r3, #12
 800cf64:	6003      	str	r3, [r0, #0]
 800cf66:	e7d6      	b.n	800cf16 <_free_r+0x26>
 800cf68:	6825      	ldr	r5, [r4, #0]
 800cf6a:	1961      	adds	r1, r4, r5
 800cf6c:	428b      	cmp	r3, r1
 800cf6e:	bf04      	itt	eq
 800cf70:	6819      	ldreq	r1, [r3, #0]
 800cf72:	685b      	ldreq	r3, [r3, #4]
 800cf74:	6063      	str	r3, [r4, #4]
 800cf76:	bf04      	itt	eq
 800cf78:	1949      	addeq	r1, r1, r5
 800cf7a:	6021      	streq	r1, [r4, #0]
 800cf7c:	6054      	str	r4, [r2, #4]
 800cf7e:	e7ca      	b.n	800cf16 <_free_r+0x26>
 800cf80:	b003      	add	sp, #12
 800cf82:	bd30      	pop	{r4, r5, pc}
 800cf84:	200039d0 	.word	0x200039d0

0800cf88 <__ssputs_r>:
 800cf88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf8c:	688e      	ldr	r6, [r1, #8]
 800cf8e:	429e      	cmp	r6, r3
 800cf90:	4682      	mov	sl, r0
 800cf92:	460c      	mov	r4, r1
 800cf94:	4690      	mov	r8, r2
 800cf96:	461f      	mov	r7, r3
 800cf98:	d838      	bhi.n	800d00c <__ssputs_r+0x84>
 800cf9a:	898a      	ldrh	r2, [r1, #12]
 800cf9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cfa0:	d032      	beq.n	800d008 <__ssputs_r+0x80>
 800cfa2:	6825      	ldr	r5, [r4, #0]
 800cfa4:	6909      	ldr	r1, [r1, #16]
 800cfa6:	eba5 0901 	sub.w	r9, r5, r1
 800cfaa:	6965      	ldr	r5, [r4, #20]
 800cfac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cfb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cfb4:	3301      	adds	r3, #1
 800cfb6:	444b      	add	r3, r9
 800cfb8:	106d      	asrs	r5, r5, #1
 800cfba:	429d      	cmp	r5, r3
 800cfbc:	bf38      	it	cc
 800cfbe:	461d      	movcc	r5, r3
 800cfc0:	0553      	lsls	r3, r2, #21
 800cfc2:	d531      	bpl.n	800d028 <__ssputs_r+0xa0>
 800cfc4:	4629      	mov	r1, r5
 800cfc6:	f7ff fdb9 	bl	800cb3c <_malloc_r>
 800cfca:	4606      	mov	r6, r0
 800cfcc:	b950      	cbnz	r0, 800cfe4 <__ssputs_r+0x5c>
 800cfce:	230c      	movs	r3, #12
 800cfd0:	f8ca 3000 	str.w	r3, [sl]
 800cfd4:	89a3      	ldrh	r3, [r4, #12]
 800cfd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfda:	81a3      	strh	r3, [r4, #12]
 800cfdc:	f04f 30ff 	mov.w	r0, #4294967295
 800cfe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfe4:	6921      	ldr	r1, [r4, #16]
 800cfe6:	464a      	mov	r2, r9
 800cfe8:	f7ff fd72 	bl	800cad0 <memcpy>
 800cfec:	89a3      	ldrh	r3, [r4, #12]
 800cfee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cff6:	81a3      	strh	r3, [r4, #12]
 800cff8:	6126      	str	r6, [r4, #16]
 800cffa:	6165      	str	r5, [r4, #20]
 800cffc:	444e      	add	r6, r9
 800cffe:	eba5 0509 	sub.w	r5, r5, r9
 800d002:	6026      	str	r6, [r4, #0]
 800d004:	60a5      	str	r5, [r4, #8]
 800d006:	463e      	mov	r6, r7
 800d008:	42be      	cmp	r6, r7
 800d00a:	d900      	bls.n	800d00e <__ssputs_r+0x86>
 800d00c:	463e      	mov	r6, r7
 800d00e:	6820      	ldr	r0, [r4, #0]
 800d010:	4632      	mov	r2, r6
 800d012:	4641      	mov	r1, r8
 800d014:	f000 faa8 	bl	800d568 <memmove>
 800d018:	68a3      	ldr	r3, [r4, #8]
 800d01a:	1b9b      	subs	r3, r3, r6
 800d01c:	60a3      	str	r3, [r4, #8]
 800d01e:	6823      	ldr	r3, [r4, #0]
 800d020:	4433      	add	r3, r6
 800d022:	6023      	str	r3, [r4, #0]
 800d024:	2000      	movs	r0, #0
 800d026:	e7db      	b.n	800cfe0 <__ssputs_r+0x58>
 800d028:	462a      	mov	r2, r5
 800d02a:	f000 fab7 	bl	800d59c <_realloc_r>
 800d02e:	4606      	mov	r6, r0
 800d030:	2800      	cmp	r0, #0
 800d032:	d1e1      	bne.n	800cff8 <__ssputs_r+0x70>
 800d034:	6921      	ldr	r1, [r4, #16]
 800d036:	4650      	mov	r0, sl
 800d038:	f7ff ff5a 	bl	800cef0 <_free_r>
 800d03c:	e7c7      	b.n	800cfce <__ssputs_r+0x46>
	...

0800d040 <_svfiprintf_r>:
 800d040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d044:	4698      	mov	r8, r3
 800d046:	898b      	ldrh	r3, [r1, #12]
 800d048:	061b      	lsls	r3, r3, #24
 800d04a:	b09d      	sub	sp, #116	; 0x74
 800d04c:	4607      	mov	r7, r0
 800d04e:	460d      	mov	r5, r1
 800d050:	4614      	mov	r4, r2
 800d052:	d50e      	bpl.n	800d072 <_svfiprintf_r+0x32>
 800d054:	690b      	ldr	r3, [r1, #16]
 800d056:	b963      	cbnz	r3, 800d072 <_svfiprintf_r+0x32>
 800d058:	2140      	movs	r1, #64	; 0x40
 800d05a:	f7ff fd6f 	bl	800cb3c <_malloc_r>
 800d05e:	6028      	str	r0, [r5, #0]
 800d060:	6128      	str	r0, [r5, #16]
 800d062:	b920      	cbnz	r0, 800d06e <_svfiprintf_r+0x2e>
 800d064:	230c      	movs	r3, #12
 800d066:	603b      	str	r3, [r7, #0]
 800d068:	f04f 30ff 	mov.w	r0, #4294967295
 800d06c:	e0d1      	b.n	800d212 <_svfiprintf_r+0x1d2>
 800d06e:	2340      	movs	r3, #64	; 0x40
 800d070:	616b      	str	r3, [r5, #20]
 800d072:	2300      	movs	r3, #0
 800d074:	9309      	str	r3, [sp, #36]	; 0x24
 800d076:	2320      	movs	r3, #32
 800d078:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d07c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d080:	2330      	movs	r3, #48	; 0x30
 800d082:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d22c <_svfiprintf_r+0x1ec>
 800d086:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d08a:	f04f 0901 	mov.w	r9, #1
 800d08e:	4623      	mov	r3, r4
 800d090:	469a      	mov	sl, r3
 800d092:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d096:	b10a      	cbz	r2, 800d09c <_svfiprintf_r+0x5c>
 800d098:	2a25      	cmp	r2, #37	; 0x25
 800d09a:	d1f9      	bne.n	800d090 <_svfiprintf_r+0x50>
 800d09c:	ebba 0b04 	subs.w	fp, sl, r4
 800d0a0:	d00b      	beq.n	800d0ba <_svfiprintf_r+0x7a>
 800d0a2:	465b      	mov	r3, fp
 800d0a4:	4622      	mov	r2, r4
 800d0a6:	4629      	mov	r1, r5
 800d0a8:	4638      	mov	r0, r7
 800d0aa:	f7ff ff6d 	bl	800cf88 <__ssputs_r>
 800d0ae:	3001      	adds	r0, #1
 800d0b0:	f000 80aa 	beq.w	800d208 <_svfiprintf_r+0x1c8>
 800d0b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d0b6:	445a      	add	r2, fp
 800d0b8:	9209      	str	r2, [sp, #36]	; 0x24
 800d0ba:	f89a 3000 	ldrb.w	r3, [sl]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	f000 80a2 	beq.w	800d208 <_svfiprintf_r+0x1c8>
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	f04f 32ff 	mov.w	r2, #4294967295
 800d0ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d0ce:	f10a 0a01 	add.w	sl, sl, #1
 800d0d2:	9304      	str	r3, [sp, #16]
 800d0d4:	9307      	str	r3, [sp, #28]
 800d0d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d0da:	931a      	str	r3, [sp, #104]	; 0x68
 800d0dc:	4654      	mov	r4, sl
 800d0de:	2205      	movs	r2, #5
 800d0e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0e4:	4851      	ldr	r0, [pc, #324]	; (800d22c <_svfiprintf_r+0x1ec>)
 800d0e6:	f7f3 f883 	bl	80001f0 <memchr>
 800d0ea:	9a04      	ldr	r2, [sp, #16]
 800d0ec:	b9d8      	cbnz	r0, 800d126 <_svfiprintf_r+0xe6>
 800d0ee:	06d0      	lsls	r0, r2, #27
 800d0f0:	bf44      	itt	mi
 800d0f2:	2320      	movmi	r3, #32
 800d0f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0f8:	0711      	lsls	r1, r2, #28
 800d0fa:	bf44      	itt	mi
 800d0fc:	232b      	movmi	r3, #43	; 0x2b
 800d0fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d102:	f89a 3000 	ldrb.w	r3, [sl]
 800d106:	2b2a      	cmp	r3, #42	; 0x2a
 800d108:	d015      	beq.n	800d136 <_svfiprintf_r+0xf6>
 800d10a:	9a07      	ldr	r2, [sp, #28]
 800d10c:	4654      	mov	r4, sl
 800d10e:	2000      	movs	r0, #0
 800d110:	f04f 0c0a 	mov.w	ip, #10
 800d114:	4621      	mov	r1, r4
 800d116:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d11a:	3b30      	subs	r3, #48	; 0x30
 800d11c:	2b09      	cmp	r3, #9
 800d11e:	d94e      	bls.n	800d1be <_svfiprintf_r+0x17e>
 800d120:	b1b0      	cbz	r0, 800d150 <_svfiprintf_r+0x110>
 800d122:	9207      	str	r2, [sp, #28]
 800d124:	e014      	b.n	800d150 <_svfiprintf_r+0x110>
 800d126:	eba0 0308 	sub.w	r3, r0, r8
 800d12a:	fa09 f303 	lsl.w	r3, r9, r3
 800d12e:	4313      	orrs	r3, r2
 800d130:	9304      	str	r3, [sp, #16]
 800d132:	46a2      	mov	sl, r4
 800d134:	e7d2      	b.n	800d0dc <_svfiprintf_r+0x9c>
 800d136:	9b03      	ldr	r3, [sp, #12]
 800d138:	1d19      	adds	r1, r3, #4
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	9103      	str	r1, [sp, #12]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	bfbb      	ittet	lt
 800d142:	425b      	neglt	r3, r3
 800d144:	f042 0202 	orrlt.w	r2, r2, #2
 800d148:	9307      	strge	r3, [sp, #28]
 800d14a:	9307      	strlt	r3, [sp, #28]
 800d14c:	bfb8      	it	lt
 800d14e:	9204      	strlt	r2, [sp, #16]
 800d150:	7823      	ldrb	r3, [r4, #0]
 800d152:	2b2e      	cmp	r3, #46	; 0x2e
 800d154:	d10c      	bne.n	800d170 <_svfiprintf_r+0x130>
 800d156:	7863      	ldrb	r3, [r4, #1]
 800d158:	2b2a      	cmp	r3, #42	; 0x2a
 800d15a:	d135      	bne.n	800d1c8 <_svfiprintf_r+0x188>
 800d15c:	9b03      	ldr	r3, [sp, #12]
 800d15e:	1d1a      	adds	r2, r3, #4
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	9203      	str	r2, [sp, #12]
 800d164:	2b00      	cmp	r3, #0
 800d166:	bfb8      	it	lt
 800d168:	f04f 33ff 	movlt.w	r3, #4294967295
 800d16c:	3402      	adds	r4, #2
 800d16e:	9305      	str	r3, [sp, #20]
 800d170:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d23c <_svfiprintf_r+0x1fc>
 800d174:	7821      	ldrb	r1, [r4, #0]
 800d176:	2203      	movs	r2, #3
 800d178:	4650      	mov	r0, sl
 800d17a:	f7f3 f839 	bl	80001f0 <memchr>
 800d17e:	b140      	cbz	r0, 800d192 <_svfiprintf_r+0x152>
 800d180:	2340      	movs	r3, #64	; 0x40
 800d182:	eba0 000a 	sub.w	r0, r0, sl
 800d186:	fa03 f000 	lsl.w	r0, r3, r0
 800d18a:	9b04      	ldr	r3, [sp, #16]
 800d18c:	4303      	orrs	r3, r0
 800d18e:	3401      	adds	r4, #1
 800d190:	9304      	str	r3, [sp, #16]
 800d192:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d196:	4826      	ldr	r0, [pc, #152]	; (800d230 <_svfiprintf_r+0x1f0>)
 800d198:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d19c:	2206      	movs	r2, #6
 800d19e:	f7f3 f827 	bl	80001f0 <memchr>
 800d1a2:	2800      	cmp	r0, #0
 800d1a4:	d038      	beq.n	800d218 <_svfiprintf_r+0x1d8>
 800d1a6:	4b23      	ldr	r3, [pc, #140]	; (800d234 <_svfiprintf_r+0x1f4>)
 800d1a8:	bb1b      	cbnz	r3, 800d1f2 <_svfiprintf_r+0x1b2>
 800d1aa:	9b03      	ldr	r3, [sp, #12]
 800d1ac:	3307      	adds	r3, #7
 800d1ae:	f023 0307 	bic.w	r3, r3, #7
 800d1b2:	3308      	adds	r3, #8
 800d1b4:	9303      	str	r3, [sp, #12]
 800d1b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1b8:	4433      	add	r3, r6
 800d1ba:	9309      	str	r3, [sp, #36]	; 0x24
 800d1bc:	e767      	b.n	800d08e <_svfiprintf_r+0x4e>
 800d1be:	fb0c 3202 	mla	r2, ip, r2, r3
 800d1c2:	460c      	mov	r4, r1
 800d1c4:	2001      	movs	r0, #1
 800d1c6:	e7a5      	b.n	800d114 <_svfiprintf_r+0xd4>
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	3401      	adds	r4, #1
 800d1cc:	9305      	str	r3, [sp, #20]
 800d1ce:	4619      	mov	r1, r3
 800d1d0:	f04f 0c0a 	mov.w	ip, #10
 800d1d4:	4620      	mov	r0, r4
 800d1d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1da:	3a30      	subs	r2, #48	; 0x30
 800d1dc:	2a09      	cmp	r2, #9
 800d1de:	d903      	bls.n	800d1e8 <_svfiprintf_r+0x1a8>
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d0c5      	beq.n	800d170 <_svfiprintf_r+0x130>
 800d1e4:	9105      	str	r1, [sp, #20]
 800d1e6:	e7c3      	b.n	800d170 <_svfiprintf_r+0x130>
 800d1e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1ec:	4604      	mov	r4, r0
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	e7f0      	b.n	800d1d4 <_svfiprintf_r+0x194>
 800d1f2:	ab03      	add	r3, sp, #12
 800d1f4:	9300      	str	r3, [sp, #0]
 800d1f6:	462a      	mov	r2, r5
 800d1f8:	4b0f      	ldr	r3, [pc, #60]	; (800d238 <_svfiprintf_r+0x1f8>)
 800d1fa:	a904      	add	r1, sp, #16
 800d1fc:	4638      	mov	r0, r7
 800d1fe:	f3af 8000 	nop.w
 800d202:	1c42      	adds	r2, r0, #1
 800d204:	4606      	mov	r6, r0
 800d206:	d1d6      	bne.n	800d1b6 <_svfiprintf_r+0x176>
 800d208:	89ab      	ldrh	r3, [r5, #12]
 800d20a:	065b      	lsls	r3, r3, #25
 800d20c:	f53f af2c 	bmi.w	800d068 <_svfiprintf_r+0x28>
 800d210:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d212:	b01d      	add	sp, #116	; 0x74
 800d214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d218:	ab03      	add	r3, sp, #12
 800d21a:	9300      	str	r3, [sp, #0]
 800d21c:	462a      	mov	r2, r5
 800d21e:	4b06      	ldr	r3, [pc, #24]	; (800d238 <_svfiprintf_r+0x1f8>)
 800d220:	a904      	add	r1, sp, #16
 800d222:	4638      	mov	r0, r7
 800d224:	f000 f87a 	bl	800d31c <_printf_i>
 800d228:	e7eb      	b.n	800d202 <_svfiprintf_r+0x1c2>
 800d22a:	bf00      	nop
 800d22c:	0800d9d5 	.word	0x0800d9d5
 800d230:	0800d9df 	.word	0x0800d9df
 800d234:	00000000 	.word	0x00000000
 800d238:	0800cf89 	.word	0x0800cf89
 800d23c:	0800d9db 	.word	0x0800d9db

0800d240 <_printf_common>:
 800d240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d244:	4616      	mov	r6, r2
 800d246:	4699      	mov	r9, r3
 800d248:	688a      	ldr	r2, [r1, #8]
 800d24a:	690b      	ldr	r3, [r1, #16]
 800d24c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d250:	4293      	cmp	r3, r2
 800d252:	bfb8      	it	lt
 800d254:	4613      	movlt	r3, r2
 800d256:	6033      	str	r3, [r6, #0]
 800d258:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d25c:	4607      	mov	r7, r0
 800d25e:	460c      	mov	r4, r1
 800d260:	b10a      	cbz	r2, 800d266 <_printf_common+0x26>
 800d262:	3301      	adds	r3, #1
 800d264:	6033      	str	r3, [r6, #0]
 800d266:	6823      	ldr	r3, [r4, #0]
 800d268:	0699      	lsls	r1, r3, #26
 800d26a:	bf42      	ittt	mi
 800d26c:	6833      	ldrmi	r3, [r6, #0]
 800d26e:	3302      	addmi	r3, #2
 800d270:	6033      	strmi	r3, [r6, #0]
 800d272:	6825      	ldr	r5, [r4, #0]
 800d274:	f015 0506 	ands.w	r5, r5, #6
 800d278:	d106      	bne.n	800d288 <_printf_common+0x48>
 800d27a:	f104 0a19 	add.w	sl, r4, #25
 800d27e:	68e3      	ldr	r3, [r4, #12]
 800d280:	6832      	ldr	r2, [r6, #0]
 800d282:	1a9b      	subs	r3, r3, r2
 800d284:	42ab      	cmp	r3, r5
 800d286:	dc26      	bgt.n	800d2d6 <_printf_common+0x96>
 800d288:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d28c:	1e13      	subs	r3, r2, #0
 800d28e:	6822      	ldr	r2, [r4, #0]
 800d290:	bf18      	it	ne
 800d292:	2301      	movne	r3, #1
 800d294:	0692      	lsls	r2, r2, #26
 800d296:	d42b      	bmi.n	800d2f0 <_printf_common+0xb0>
 800d298:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d29c:	4649      	mov	r1, r9
 800d29e:	4638      	mov	r0, r7
 800d2a0:	47c0      	blx	r8
 800d2a2:	3001      	adds	r0, #1
 800d2a4:	d01e      	beq.n	800d2e4 <_printf_common+0xa4>
 800d2a6:	6823      	ldr	r3, [r4, #0]
 800d2a8:	68e5      	ldr	r5, [r4, #12]
 800d2aa:	6832      	ldr	r2, [r6, #0]
 800d2ac:	f003 0306 	and.w	r3, r3, #6
 800d2b0:	2b04      	cmp	r3, #4
 800d2b2:	bf08      	it	eq
 800d2b4:	1aad      	subeq	r5, r5, r2
 800d2b6:	68a3      	ldr	r3, [r4, #8]
 800d2b8:	6922      	ldr	r2, [r4, #16]
 800d2ba:	bf0c      	ite	eq
 800d2bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d2c0:	2500      	movne	r5, #0
 800d2c2:	4293      	cmp	r3, r2
 800d2c4:	bfc4      	itt	gt
 800d2c6:	1a9b      	subgt	r3, r3, r2
 800d2c8:	18ed      	addgt	r5, r5, r3
 800d2ca:	2600      	movs	r6, #0
 800d2cc:	341a      	adds	r4, #26
 800d2ce:	42b5      	cmp	r5, r6
 800d2d0:	d11a      	bne.n	800d308 <_printf_common+0xc8>
 800d2d2:	2000      	movs	r0, #0
 800d2d4:	e008      	b.n	800d2e8 <_printf_common+0xa8>
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	4652      	mov	r2, sl
 800d2da:	4649      	mov	r1, r9
 800d2dc:	4638      	mov	r0, r7
 800d2de:	47c0      	blx	r8
 800d2e0:	3001      	adds	r0, #1
 800d2e2:	d103      	bne.n	800d2ec <_printf_common+0xac>
 800d2e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d2e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2ec:	3501      	adds	r5, #1
 800d2ee:	e7c6      	b.n	800d27e <_printf_common+0x3e>
 800d2f0:	18e1      	adds	r1, r4, r3
 800d2f2:	1c5a      	adds	r2, r3, #1
 800d2f4:	2030      	movs	r0, #48	; 0x30
 800d2f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d2fa:	4422      	add	r2, r4
 800d2fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d300:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d304:	3302      	adds	r3, #2
 800d306:	e7c7      	b.n	800d298 <_printf_common+0x58>
 800d308:	2301      	movs	r3, #1
 800d30a:	4622      	mov	r2, r4
 800d30c:	4649      	mov	r1, r9
 800d30e:	4638      	mov	r0, r7
 800d310:	47c0      	blx	r8
 800d312:	3001      	adds	r0, #1
 800d314:	d0e6      	beq.n	800d2e4 <_printf_common+0xa4>
 800d316:	3601      	adds	r6, #1
 800d318:	e7d9      	b.n	800d2ce <_printf_common+0x8e>
	...

0800d31c <_printf_i>:
 800d31c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d320:	7e0f      	ldrb	r7, [r1, #24]
 800d322:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d324:	2f78      	cmp	r7, #120	; 0x78
 800d326:	4691      	mov	r9, r2
 800d328:	4680      	mov	r8, r0
 800d32a:	460c      	mov	r4, r1
 800d32c:	469a      	mov	sl, r3
 800d32e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d332:	d807      	bhi.n	800d344 <_printf_i+0x28>
 800d334:	2f62      	cmp	r7, #98	; 0x62
 800d336:	d80a      	bhi.n	800d34e <_printf_i+0x32>
 800d338:	2f00      	cmp	r7, #0
 800d33a:	f000 80d8 	beq.w	800d4ee <_printf_i+0x1d2>
 800d33e:	2f58      	cmp	r7, #88	; 0x58
 800d340:	f000 80a3 	beq.w	800d48a <_printf_i+0x16e>
 800d344:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d348:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d34c:	e03a      	b.n	800d3c4 <_printf_i+0xa8>
 800d34e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d352:	2b15      	cmp	r3, #21
 800d354:	d8f6      	bhi.n	800d344 <_printf_i+0x28>
 800d356:	a101      	add	r1, pc, #4	; (adr r1, 800d35c <_printf_i+0x40>)
 800d358:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d35c:	0800d3b5 	.word	0x0800d3b5
 800d360:	0800d3c9 	.word	0x0800d3c9
 800d364:	0800d345 	.word	0x0800d345
 800d368:	0800d345 	.word	0x0800d345
 800d36c:	0800d345 	.word	0x0800d345
 800d370:	0800d345 	.word	0x0800d345
 800d374:	0800d3c9 	.word	0x0800d3c9
 800d378:	0800d345 	.word	0x0800d345
 800d37c:	0800d345 	.word	0x0800d345
 800d380:	0800d345 	.word	0x0800d345
 800d384:	0800d345 	.word	0x0800d345
 800d388:	0800d4d5 	.word	0x0800d4d5
 800d38c:	0800d3f9 	.word	0x0800d3f9
 800d390:	0800d4b7 	.word	0x0800d4b7
 800d394:	0800d345 	.word	0x0800d345
 800d398:	0800d345 	.word	0x0800d345
 800d39c:	0800d4f7 	.word	0x0800d4f7
 800d3a0:	0800d345 	.word	0x0800d345
 800d3a4:	0800d3f9 	.word	0x0800d3f9
 800d3a8:	0800d345 	.word	0x0800d345
 800d3ac:	0800d345 	.word	0x0800d345
 800d3b0:	0800d4bf 	.word	0x0800d4bf
 800d3b4:	682b      	ldr	r3, [r5, #0]
 800d3b6:	1d1a      	adds	r2, r3, #4
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	602a      	str	r2, [r5, #0]
 800d3bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d3c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d3c4:	2301      	movs	r3, #1
 800d3c6:	e0a3      	b.n	800d510 <_printf_i+0x1f4>
 800d3c8:	6820      	ldr	r0, [r4, #0]
 800d3ca:	6829      	ldr	r1, [r5, #0]
 800d3cc:	0606      	lsls	r6, r0, #24
 800d3ce:	f101 0304 	add.w	r3, r1, #4
 800d3d2:	d50a      	bpl.n	800d3ea <_printf_i+0xce>
 800d3d4:	680e      	ldr	r6, [r1, #0]
 800d3d6:	602b      	str	r3, [r5, #0]
 800d3d8:	2e00      	cmp	r6, #0
 800d3da:	da03      	bge.n	800d3e4 <_printf_i+0xc8>
 800d3dc:	232d      	movs	r3, #45	; 0x2d
 800d3de:	4276      	negs	r6, r6
 800d3e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d3e4:	485e      	ldr	r0, [pc, #376]	; (800d560 <_printf_i+0x244>)
 800d3e6:	230a      	movs	r3, #10
 800d3e8:	e019      	b.n	800d41e <_printf_i+0x102>
 800d3ea:	680e      	ldr	r6, [r1, #0]
 800d3ec:	602b      	str	r3, [r5, #0]
 800d3ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d3f2:	bf18      	it	ne
 800d3f4:	b236      	sxthne	r6, r6
 800d3f6:	e7ef      	b.n	800d3d8 <_printf_i+0xbc>
 800d3f8:	682b      	ldr	r3, [r5, #0]
 800d3fa:	6820      	ldr	r0, [r4, #0]
 800d3fc:	1d19      	adds	r1, r3, #4
 800d3fe:	6029      	str	r1, [r5, #0]
 800d400:	0601      	lsls	r1, r0, #24
 800d402:	d501      	bpl.n	800d408 <_printf_i+0xec>
 800d404:	681e      	ldr	r6, [r3, #0]
 800d406:	e002      	b.n	800d40e <_printf_i+0xf2>
 800d408:	0646      	lsls	r6, r0, #25
 800d40a:	d5fb      	bpl.n	800d404 <_printf_i+0xe8>
 800d40c:	881e      	ldrh	r6, [r3, #0]
 800d40e:	4854      	ldr	r0, [pc, #336]	; (800d560 <_printf_i+0x244>)
 800d410:	2f6f      	cmp	r7, #111	; 0x6f
 800d412:	bf0c      	ite	eq
 800d414:	2308      	moveq	r3, #8
 800d416:	230a      	movne	r3, #10
 800d418:	2100      	movs	r1, #0
 800d41a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d41e:	6865      	ldr	r5, [r4, #4]
 800d420:	60a5      	str	r5, [r4, #8]
 800d422:	2d00      	cmp	r5, #0
 800d424:	bfa2      	ittt	ge
 800d426:	6821      	ldrge	r1, [r4, #0]
 800d428:	f021 0104 	bicge.w	r1, r1, #4
 800d42c:	6021      	strge	r1, [r4, #0]
 800d42e:	b90e      	cbnz	r6, 800d434 <_printf_i+0x118>
 800d430:	2d00      	cmp	r5, #0
 800d432:	d04d      	beq.n	800d4d0 <_printf_i+0x1b4>
 800d434:	4615      	mov	r5, r2
 800d436:	fbb6 f1f3 	udiv	r1, r6, r3
 800d43a:	fb03 6711 	mls	r7, r3, r1, r6
 800d43e:	5dc7      	ldrb	r7, [r0, r7]
 800d440:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d444:	4637      	mov	r7, r6
 800d446:	42bb      	cmp	r3, r7
 800d448:	460e      	mov	r6, r1
 800d44a:	d9f4      	bls.n	800d436 <_printf_i+0x11a>
 800d44c:	2b08      	cmp	r3, #8
 800d44e:	d10b      	bne.n	800d468 <_printf_i+0x14c>
 800d450:	6823      	ldr	r3, [r4, #0]
 800d452:	07de      	lsls	r6, r3, #31
 800d454:	d508      	bpl.n	800d468 <_printf_i+0x14c>
 800d456:	6923      	ldr	r3, [r4, #16]
 800d458:	6861      	ldr	r1, [r4, #4]
 800d45a:	4299      	cmp	r1, r3
 800d45c:	bfde      	ittt	le
 800d45e:	2330      	movle	r3, #48	; 0x30
 800d460:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d464:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d468:	1b52      	subs	r2, r2, r5
 800d46a:	6122      	str	r2, [r4, #16]
 800d46c:	f8cd a000 	str.w	sl, [sp]
 800d470:	464b      	mov	r3, r9
 800d472:	aa03      	add	r2, sp, #12
 800d474:	4621      	mov	r1, r4
 800d476:	4640      	mov	r0, r8
 800d478:	f7ff fee2 	bl	800d240 <_printf_common>
 800d47c:	3001      	adds	r0, #1
 800d47e:	d14c      	bne.n	800d51a <_printf_i+0x1fe>
 800d480:	f04f 30ff 	mov.w	r0, #4294967295
 800d484:	b004      	add	sp, #16
 800d486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d48a:	4835      	ldr	r0, [pc, #212]	; (800d560 <_printf_i+0x244>)
 800d48c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d490:	6829      	ldr	r1, [r5, #0]
 800d492:	6823      	ldr	r3, [r4, #0]
 800d494:	f851 6b04 	ldr.w	r6, [r1], #4
 800d498:	6029      	str	r1, [r5, #0]
 800d49a:	061d      	lsls	r5, r3, #24
 800d49c:	d514      	bpl.n	800d4c8 <_printf_i+0x1ac>
 800d49e:	07df      	lsls	r7, r3, #31
 800d4a0:	bf44      	itt	mi
 800d4a2:	f043 0320 	orrmi.w	r3, r3, #32
 800d4a6:	6023      	strmi	r3, [r4, #0]
 800d4a8:	b91e      	cbnz	r6, 800d4b2 <_printf_i+0x196>
 800d4aa:	6823      	ldr	r3, [r4, #0]
 800d4ac:	f023 0320 	bic.w	r3, r3, #32
 800d4b0:	6023      	str	r3, [r4, #0]
 800d4b2:	2310      	movs	r3, #16
 800d4b4:	e7b0      	b.n	800d418 <_printf_i+0xfc>
 800d4b6:	6823      	ldr	r3, [r4, #0]
 800d4b8:	f043 0320 	orr.w	r3, r3, #32
 800d4bc:	6023      	str	r3, [r4, #0]
 800d4be:	2378      	movs	r3, #120	; 0x78
 800d4c0:	4828      	ldr	r0, [pc, #160]	; (800d564 <_printf_i+0x248>)
 800d4c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d4c6:	e7e3      	b.n	800d490 <_printf_i+0x174>
 800d4c8:	0659      	lsls	r1, r3, #25
 800d4ca:	bf48      	it	mi
 800d4cc:	b2b6      	uxthmi	r6, r6
 800d4ce:	e7e6      	b.n	800d49e <_printf_i+0x182>
 800d4d0:	4615      	mov	r5, r2
 800d4d2:	e7bb      	b.n	800d44c <_printf_i+0x130>
 800d4d4:	682b      	ldr	r3, [r5, #0]
 800d4d6:	6826      	ldr	r6, [r4, #0]
 800d4d8:	6961      	ldr	r1, [r4, #20]
 800d4da:	1d18      	adds	r0, r3, #4
 800d4dc:	6028      	str	r0, [r5, #0]
 800d4de:	0635      	lsls	r5, r6, #24
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	d501      	bpl.n	800d4e8 <_printf_i+0x1cc>
 800d4e4:	6019      	str	r1, [r3, #0]
 800d4e6:	e002      	b.n	800d4ee <_printf_i+0x1d2>
 800d4e8:	0670      	lsls	r0, r6, #25
 800d4ea:	d5fb      	bpl.n	800d4e4 <_printf_i+0x1c8>
 800d4ec:	8019      	strh	r1, [r3, #0]
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	6123      	str	r3, [r4, #16]
 800d4f2:	4615      	mov	r5, r2
 800d4f4:	e7ba      	b.n	800d46c <_printf_i+0x150>
 800d4f6:	682b      	ldr	r3, [r5, #0]
 800d4f8:	1d1a      	adds	r2, r3, #4
 800d4fa:	602a      	str	r2, [r5, #0]
 800d4fc:	681d      	ldr	r5, [r3, #0]
 800d4fe:	6862      	ldr	r2, [r4, #4]
 800d500:	2100      	movs	r1, #0
 800d502:	4628      	mov	r0, r5
 800d504:	f7f2 fe74 	bl	80001f0 <memchr>
 800d508:	b108      	cbz	r0, 800d50e <_printf_i+0x1f2>
 800d50a:	1b40      	subs	r0, r0, r5
 800d50c:	6060      	str	r0, [r4, #4]
 800d50e:	6863      	ldr	r3, [r4, #4]
 800d510:	6123      	str	r3, [r4, #16]
 800d512:	2300      	movs	r3, #0
 800d514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d518:	e7a8      	b.n	800d46c <_printf_i+0x150>
 800d51a:	6923      	ldr	r3, [r4, #16]
 800d51c:	462a      	mov	r2, r5
 800d51e:	4649      	mov	r1, r9
 800d520:	4640      	mov	r0, r8
 800d522:	47d0      	blx	sl
 800d524:	3001      	adds	r0, #1
 800d526:	d0ab      	beq.n	800d480 <_printf_i+0x164>
 800d528:	6823      	ldr	r3, [r4, #0]
 800d52a:	079b      	lsls	r3, r3, #30
 800d52c:	d413      	bmi.n	800d556 <_printf_i+0x23a>
 800d52e:	68e0      	ldr	r0, [r4, #12]
 800d530:	9b03      	ldr	r3, [sp, #12]
 800d532:	4298      	cmp	r0, r3
 800d534:	bfb8      	it	lt
 800d536:	4618      	movlt	r0, r3
 800d538:	e7a4      	b.n	800d484 <_printf_i+0x168>
 800d53a:	2301      	movs	r3, #1
 800d53c:	4632      	mov	r2, r6
 800d53e:	4649      	mov	r1, r9
 800d540:	4640      	mov	r0, r8
 800d542:	47d0      	blx	sl
 800d544:	3001      	adds	r0, #1
 800d546:	d09b      	beq.n	800d480 <_printf_i+0x164>
 800d548:	3501      	adds	r5, #1
 800d54a:	68e3      	ldr	r3, [r4, #12]
 800d54c:	9903      	ldr	r1, [sp, #12]
 800d54e:	1a5b      	subs	r3, r3, r1
 800d550:	42ab      	cmp	r3, r5
 800d552:	dcf2      	bgt.n	800d53a <_printf_i+0x21e>
 800d554:	e7eb      	b.n	800d52e <_printf_i+0x212>
 800d556:	2500      	movs	r5, #0
 800d558:	f104 0619 	add.w	r6, r4, #25
 800d55c:	e7f5      	b.n	800d54a <_printf_i+0x22e>
 800d55e:	bf00      	nop
 800d560:	0800d9e6 	.word	0x0800d9e6
 800d564:	0800d9f7 	.word	0x0800d9f7

0800d568 <memmove>:
 800d568:	4288      	cmp	r0, r1
 800d56a:	b510      	push	{r4, lr}
 800d56c:	eb01 0402 	add.w	r4, r1, r2
 800d570:	d902      	bls.n	800d578 <memmove+0x10>
 800d572:	4284      	cmp	r4, r0
 800d574:	4623      	mov	r3, r4
 800d576:	d807      	bhi.n	800d588 <memmove+0x20>
 800d578:	1e43      	subs	r3, r0, #1
 800d57a:	42a1      	cmp	r1, r4
 800d57c:	d008      	beq.n	800d590 <memmove+0x28>
 800d57e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d582:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d586:	e7f8      	b.n	800d57a <memmove+0x12>
 800d588:	4402      	add	r2, r0
 800d58a:	4601      	mov	r1, r0
 800d58c:	428a      	cmp	r2, r1
 800d58e:	d100      	bne.n	800d592 <memmove+0x2a>
 800d590:	bd10      	pop	{r4, pc}
 800d592:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d596:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d59a:	e7f7      	b.n	800d58c <memmove+0x24>

0800d59c <_realloc_r>:
 800d59c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5a0:	4680      	mov	r8, r0
 800d5a2:	4614      	mov	r4, r2
 800d5a4:	460e      	mov	r6, r1
 800d5a6:	b921      	cbnz	r1, 800d5b2 <_realloc_r+0x16>
 800d5a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5ac:	4611      	mov	r1, r2
 800d5ae:	f7ff bac5 	b.w	800cb3c <_malloc_r>
 800d5b2:	b92a      	cbnz	r2, 800d5c0 <_realloc_r+0x24>
 800d5b4:	f7ff fc9c 	bl	800cef0 <_free_r>
 800d5b8:	4625      	mov	r5, r4
 800d5ba:	4628      	mov	r0, r5
 800d5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5c0:	f000 f81b 	bl	800d5fa <_malloc_usable_size_r>
 800d5c4:	4284      	cmp	r4, r0
 800d5c6:	4607      	mov	r7, r0
 800d5c8:	d802      	bhi.n	800d5d0 <_realloc_r+0x34>
 800d5ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d5ce:	d812      	bhi.n	800d5f6 <_realloc_r+0x5a>
 800d5d0:	4621      	mov	r1, r4
 800d5d2:	4640      	mov	r0, r8
 800d5d4:	f7ff fab2 	bl	800cb3c <_malloc_r>
 800d5d8:	4605      	mov	r5, r0
 800d5da:	2800      	cmp	r0, #0
 800d5dc:	d0ed      	beq.n	800d5ba <_realloc_r+0x1e>
 800d5de:	42bc      	cmp	r4, r7
 800d5e0:	4622      	mov	r2, r4
 800d5e2:	4631      	mov	r1, r6
 800d5e4:	bf28      	it	cs
 800d5e6:	463a      	movcs	r2, r7
 800d5e8:	f7ff fa72 	bl	800cad0 <memcpy>
 800d5ec:	4631      	mov	r1, r6
 800d5ee:	4640      	mov	r0, r8
 800d5f0:	f7ff fc7e 	bl	800cef0 <_free_r>
 800d5f4:	e7e1      	b.n	800d5ba <_realloc_r+0x1e>
 800d5f6:	4635      	mov	r5, r6
 800d5f8:	e7df      	b.n	800d5ba <_realloc_r+0x1e>

0800d5fa <_malloc_usable_size_r>:
 800d5fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5fe:	1f18      	subs	r0, r3, #4
 800d600:	2b00      	cmp	r3, #0
 800d602:	bfbc      	itt	lt
 800d604:	580b      	ldrlt	r3, [r1, r0]
 800d606:	18c0      	addlt	r0, r0, r3
 800d608:	4770      	bx	lr
	...

0800d60c <_init>:
 800d60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d60e:	bf00      	nop
 800d610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d612:	bc08      	pop	{r3}
 800d614:	469e      	mov	lr, r3
 800d616:	4770      	bx	lr

0800d618 <_fini>:
 800d618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d61a:	bf00      	nop
 800d61c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d61e:	bc08      	pop	{r3}
 800d620:	469e      	mov	lr, r3
 800d622:	4770      	bx	lr
